import{_ as o,D as e,o as t,g as c,J as l,h as n,m as s,Q as p}from"./chunks/framework.f67d7268.js";const D=JSON.parse('{"title":"13DDT：博采众长，数据驱动的秘诀（一）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4673) 13  DDT：博采众长，数据驱动的秘诀（一）.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4673) 13  DDT：博采众长，数据驱动的秘诀（一）.md","lastUpdated":1696682708000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4673) 13  DDT：博采众长，数据驱动的秘诀（一）.md"},E=s("h1",{id:"_13ddt-博采众长-数据驱动的秘诀-一",tabindex:"-1"},[n("13DDT：博采众长，数据驱动的秘诀（一） "),s("a",{class:"header-anchor",href:"#_13ddt-博采众长-数据驱动的秘诀-一","aria-label":'Permalink to "13DDT：博采众长，数据驱动的秘诀（一）"'},"​")],-1),y=s("p",null,"通过上一节课的学习，你已经迈入了测试开发的大门，能够自己搭建起一套融合 API 测试和 UI 测试的自动化框架，并且能把这套测试框架按照需要，快速部署到新项目中去，非常了不起。",-1),i=s("p",null,"本节课开始，我将带你探寻经典的本质，以下是这节课的框架供你参考。",-1),d=p(`<p>在正式的工作中数据驱动非常重要。可以说，我们测试一半的写代码时间都在准备数据、清理数据。既然数据驱动如此重要，那么我们要不要了解下什么是数据驱动？数据驱动的原理是什么？以及如何徒手实现呢？</p><h3 id="什么是数据驱动" tabindex="-1">什么是数据驱动？ <a class="header-anchor" href="#什么是数据驱动" aria-label="Permalink to &quot;什么是数据驱动？&quot;">​</a></h3><p>数据驱动，指在自动化测试中处理测试数据的方式。</p><p>通常测试数据与功能函数分离，存储在<strong>功能函数的外部位置</strong> 。在自动化测试运行时，数据驱动框架会读取数据源中的数据，把<strong>数据作为参数传递到功能函数</strong> 中，并会根据数据的条数<strong>多次运行同一个功能函数</strong>。</p><p>数据驱动的数据源可以是函数外的数据集合、CSV 文件、Excel 表格、TXT 文件，以及数据库等。</p><h3 id="数据驱动的好处有哪些" tabindex="-1">数据驱动的好处有哪些？ <a class="header-anchor" href="#数据驱动的好处有哪些" aria-label="Permalink to &quot;数据驱动的好处有哪些？&quot;">​</a></h3><h4 id="_1-数据驱动能够减少重复代码" tabindex="-1">1.数据驱动能够减少重复代码 <a class="header-anchor" href="#_1-数据驱动能够减少重复代码" aria-label="Permalink to &quot;1.数据驱动能够减少重复代码&quot;">​</a></h4><p>下面我们通过一个例子来看下数据驱动是如何减少代码重复的。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 伪代码，仅供演示</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">book_order</span><span style="color:#E1E4E8;">(user, product, num):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 你的函数逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果没有数据驱动，你的代码是这样的：</span></span>
<span class="line"><span style="color:#E1E4E8;">book_order(</span><span style="color:#9ECBFF;">&#39;张三&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;前端自动化测试框架Cypress从入门到精通&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">book_order(</span><span style="color:#9ECBFF;">&#39;李四&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;测试开发入门与实战&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">book_order(</span><span style="color:#9ECBFF;">&#39;王五&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;[测试开发入门与实战,前端自动化测试框架Cypress从入门到精通]&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 伪代码，仅供演示</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">book_order</span><span style="color:#24292E;">(user, product, num):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 你的函数逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果没有数据驱动，你的代码是这样的：</span></span>
<span class="line"><span style="color:#24292E;">book_order(</span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;前端自动化测试框架Cypress从入门到精通&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">book_order(</span><span style="color:#032F62;">&#39;李四&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;测试开发入门与实战&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">book_order(</span><span style="color:#032F62;">&#39;王五&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;[测试开发入门与实战,前端自动化测试框架Cypress从入门到精通]&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">)</span></span></code></pre></div><p>没有数据驱动时，并且同一个功能函数存在多个测试数据，你只能多次调用这个功能函数；另外一旦某一个测试数据有更改/删除，你需要在函数调用里去更改相应的测试数据，非常不方便。</p><p>但有了测试驱动时，你的代码可能是下面这个样子。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># data_book指向一个文件，这个文件里存储有你所有的测数据。</span></span>
<span class="line"><span style="color:#E1E4E8;">data_book </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./tests/data/testdata.csv&#39;</span></span>
<span class="line"><span style="color:#6A737D;"># dataDrivenDecorator是你实现数据驱动的装饰器</span></span>
<span class="line"><span style="color:#B392F0;">@dataDrivenDecorator</span><span style="color:#E1E4E8;">(data_book)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">book_order</span><span style="color:#E1E4E8;">(user, product, num):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 你的函数逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># data_book指向一个文件，这个文件里存储有你所有的测数据。</span></span>
<span class="line"><span style="color:#24292E;">data_book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./tests/data/testdata.csv&#39;</span></span>
<span class="line"><span style="color:#6A737D;"># dataDrivenDecorator是你实现数据驱动的装饰器</span></span>
<span class="line"><span style="color:#6F42C1;">@dataDrivenDecorator</span><span style="color:#24292E;">(data_book)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">book_order</span><span style="color:#24292E;">(user, product, num):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 你的函数逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>这种情况下， 你无须进行多次调用，而且当你的测试数据发生改变时， 你仅需要更改数据源文件的数据就可以了。</p><h4 id="_2-数据所属的测试用例失败-不会影响到其他测试数据对应的测试用例" tabindex="-1">2.数据所属的测试用例失败，不会影响到其他测试数据对应的测试用例 <a class="header-anchor" href="#_2-数据所属的测试用例失败-不会影响到其他测试数据对应的测试用例" aria-label="Permalink to &quot;2.数据所属的测试用例失败，不会影响到其他测试数据对应的测试用例&quot;">​</a></h4><p>同样举一个例子，没有数据驱动之前，假设我们有这样的一个函数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_without_data_driven</span><span style="color:#E1E4E8;">(records):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> records:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test_without_data_driven(test_data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_without_data_driven</span><span style="color:#24292E;">(records):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> records:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test_without_data_driven(test_data)</span></span></code></pre></div><p>当你运行这段代码时，因为 test_data 的第一个值是 0， 它不大于 0。所以断言失败，所有 test_data 这个函数 0 后面的测试数据都没有执行。</p><p>如果有了数据驱动，则数据驱动会把这一个测试按照测试数据分解成多个测试，所有第一个测试数据失败不也会影响到后面的测试结果。</p><p><strong>了解了数据驱动的众多好处，我们来看下在 Python 中，应用比较广泛的两个数据驱动的框架。一个是 DDT（Data-Driven Tests），它是 unittest 框架中实现数据驱动的不二之选；另外一个是 parameterized，它是 pytest 能够实现数据驱动的秘诀。</strong></p><blockquote><p>这一课时我先介绍 DDT，下一课时我将介绍 parameterized。</p></blockquote><h3 id="ddt-含有哪些装饰器" tabindex="-1">DDT 含有哪些装饰器 <a class="header-anchor" href="#ddt-含有哪些装饰器" aria-label="Permalink to &quot;DDT 含有哪些装饰器&quot;">​</a></h3><h4 id="_1-一个类装饰器" tabindex="-1">1.一个类装饰器 <a class="header-anchor" href="#_1-一个类装饰器" aria-label="Permalink to &quot;1.一个类装饰器&quot;">​</a></h4><p>ddt 这个类装饰器必须装饰在 TestCase 的子类上，TestCase 是 unittest 框架中的一个基类，它实现了 Test Runner 驱动测试运行所需的接口（interface）。</p><h4 id="_2-两个方法装饰器" tabindex="-1">2.两个方法装饰器 <a class="header-anchor" href="#_2-两个方法装饰器" aria-label="Permalink to &quot;2.两个方法装饰器&quot;">​</a></h4><p>分别是 data 和 file_data。其中 data 装饰器，直接提供测试数据；file_data 装饰器则从 JSON 或 YAML 文件加载测试数据。</p><p><strong>DDT 的使用步骤如下：</strong></p><ul><li><p>使用 @ddt 装饰你的测试类；</p></li><li><p>使用 @data 或者 @file_data 装饰你需要数据驱动的测试方法；</p></li><li><p>如一组测试数据有多个参数，则需 unpack，使用 @unpack 装饰你的测试方法。</p></li></ul><h3 id="ddt-使用详解" tabindex="-1">DDT 使用详解 <a class="header-anchor" href="#ddt-使用详解" aria-label="Permalink to &quot;DDT 使用详解&quot;">​</a></h3><p><strong>先安装 DDT</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install ddt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install ddt</span></span></code></pre></div><p>然后我以 lagouAPITest 框架里，tests 文件夹下的 test_baidu.py 这个文件为例，来讲解下 ddt 的使用。</p><h4 id="_1-ddt-直接提供数据" tabindex="-1"><strong>1.ddt 直接提供数据</strong> <a class="header-anchor" href="#_1-ddt-直接提供数据" aria-label="Permalink to &quot;**1.ddt 直接提供数据**&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> ddt </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ddt, data, file_data, unpack</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#6A737D;"># ddt一定是装饰在TestCase的子类上</span></span>
<span class="line"><span style="color:#B392F0;">@ddt</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baidu</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.implicitly_wait(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># data表示data是直接提供的。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># unpack表示，对于每一组数据，如果它的值是list或者tuple，那么就分拆成独立的参数。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@data</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&#39;helloqa.com&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@unpack</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results, </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tearDown</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    unittest.main(</span><span style="color:#FFAB70;">verbosity</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> ddt </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ddt, data, file_data, unpack</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#6A737D;"># ddt一定是装饰在TestCase的子类上</span></span>
<span class="line"><span style="color:#6F42C1;">@ddt</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baidu</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.implicitly_wait(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># data表示data是直接提供的。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># unpack表示，对于每一组数据，如果它的值是list或者tuple，那么就分拆成独立的参数。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@data</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&#39;helloqa.com&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@unpack</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results, </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tearDown</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    unittest.main(</span><span style="color:#E36209;">verbosity</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>在这个例子中，我直接使用了 @data 装饰器。在这个装饰器中，我给出了测试的 2 组数据，分别是 <strong>[&#39;iTesting&#39;, &#39;iTesting&#39;]</strong> 和 <strong>[&#39;helloqa.com&#39;, &#39;iTesting&#39;]</strong>；然后我使用 @unpack 装饰器把每一组数据的数据 unpack 成一个个的参数传给我的函数 test_baidu_search。</p><p>直接运行这个文件，结果如下：</p>`,35),_=p(`<p>你注意下，虽然我们只有一个测试用例 test_baidu_search。但在生成的测试报告里，显示&quot;Run 2 tests in 17.172s&quot;，也就是 test_baidu_search 运行了 2 次，这就是 DDT 在起作用。</p><p>这是多组参数，每组多个数据的情况，如果每组仅有一个数据呢？你仅需要更改如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 如仅有一个参数，那么直接在data里写参数就好。</span></span>
<span class="line"><span style="color:#6A737D;"># 仅有一个参数的情况下，无须再用@unpack装饰测试方法。 </span></span>
<span class="line"><span style="color:#B392F0;">@data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;data2&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 如仅有一个参数，那么直接在data里写参数就好。</span></span>
<span class="line"><span style="color:#6A737D;"># 仅有一个参数的情况下，无须再用@unpack装饰测试方法。 </span></span>
<span class="line"><span style="color:#6F42C1;">@data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data1&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;data2&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="_2-ddt-使用函数提供数据" tabindex="-1"><strong>2.ddt 使用函数提供数据</strong> <a class="header-anchor" href="#_2-ddt-使用函数提供数据" aria-label="Permalink to &quot;**2.ddt 使用函数提供数据**&quot;">​</a></h4><p>ddt 直接提供数据，除去上述的直接把数据写在 @data() 的参数中外，还有一个情况，即数据先从函数获取，然后再写入 @data() 的参数中。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> ddt </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ddt, data, file_data, unpack</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_test_data</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 这里写你获取测试数据的业务逻辑。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 获取到后，把数据返回即可。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 注意，如果多组数据，需要返回类似([数据1-参数1， 数据1-参数2]，[数据2-参数1， 数据2-参数2])这样的格式，方便ddt.data()解析</span></span>
<span class="line"><span style="color:#E1E4E8;">    results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&#39;helloqa.com&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> results</span></span>
<span class="line"><span style="color:#6A737D;"># ddt一定是装饰在TestCase的子类上</span></span>
<span class="line"><span style="color:#B392F0;">@ddt</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baidu</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.implicitly_wait(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># data表示data是直接提供的。注意data里的参数我写了函数get_test_data()的返回值，并且以*为前缀，代表返回的是可变参数。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># unpack表示，对于每一组数据，如果它的值是list或者tuple，那么就分拆成独立的参数。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@data</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">get_test_data())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@unpack</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results, </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tearDown</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    unittest.main(verbosi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> ddt </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ddt, data, file_data, unpack</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_test_data</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 这里写你获取测试数据的业务逻辑。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 获取到后，把数据返回即可。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 注意，如果多组数据，需要返回类似([数据1-参数1， 数据1-参数2]，[数据2-参数1， 数据2-参数2])这样的格式，方便ddt.data()解析</span></span>
<span class="line"><span style="color:#24292E;">    results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&#39;helloqa.com&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> results</span></span>
<span class="line"><span style="color:#6A737D;"># ddt一定是装饰在TestCase的子类上</span></span>
<span class="line"><span style="color:#6F42C1;">@ddt</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baidu</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.implicitly_wait(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># data表示data是直接提供的。注意data里的参数我写了函数get_test_data()的返回值，并且以*为前缀，代表返回的是可变参数。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># unpack表示，对于每一组数据，如果它的值是list或者tuple，那么就分拆成独立的参数。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@data</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">get_test_data())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@unpack</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results, </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tearDown</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    unittest.main(verbosi</span></span></code></pre></div><p>在本例中，我创建了一个函数 get_test_data() 用于获取我的测试数据。这个函数可以带参数，也可以不带参数，具体需要根据你的业务逻辑来。</p><p><strong>注意：get_test_data() 的返回值，一定需要遵守 ddt.data() 可接受的数据格式。即：</strong></p><p><strong>一组数据，每个数据为单个的值；多组数据，每组数据为一个列表或者一个字典。</strong></p><h4 id="_3-ddt-使用文件提供数据-json-和-yaml" tabindex="-1"><strong>3.ddt 使用文件提供数据 --- JSON 和 YAML</strong> <a class="header-anchor" href="#_3-ddt-使用文件提供数据-json-和-yaml" aria-label="Permalink to &quot;**3.ddt 使用文件提供数据 --- JSON 和 YAML**&quot;">​</a></h4><p>除了使用 @ddt 直接提供数据，DDT 还支持通过文件加载数据。</p><p>不过默认只支持两种格式 YAML 和 JSON，只有以&quot;.yml&quot; 或者&quot;.yaml&quot; 结尾的会被认作 YAML 文件，其他格式都将被认为是 JSON 文件。</p><ul><li><strong>使用 JSON 文件</strong></li></ul><p>如果把上述用例改成使用 JSON 文件，则我们的用例看起来是这样的：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">|--lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    |-- .....</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--test_baidu.json</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--__init__.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">|--lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    |-- .....</span></span>
<span class="line"><span style="color:#24292E;">    |--tests</span></span>
<span class="line"><span style="color:#24292E;">        |--test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        |--test_baidu.json</span></span>
<span class="line"><span style="color:#24292E;">        |--__init__.py</span></span></code></pre></div><p>首先，我们创建一个跟 test_baidu.py 同名的文件 test_baidu.json，内容如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">&quot;case1&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;search_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;itesting&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;expect_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;case2&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;search_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;itesting&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;expect_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#005CC5;">&quot;case1&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;search_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;itesting&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;expect_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;case2&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;search_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;itesting&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;expect_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后更新 test_baidu.py，更新后的代码如下所示：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> ddt </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ddt, data, file_data, unpack</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@ddt</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baidu</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.implicitly_wait(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 此处测试数据从文件读取，使用@file_data装饰器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 文件路径是相对于Baidu这个测试类的相对路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 使用外部文件方式Load数据无须使用unpack</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@file_data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;test_baidu.json&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results, </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tearDown</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    unittest.main(</span><span style="color:#FFAB70;">verbosity</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> ddt </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ddt, data, file_data, unpack</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@ddt</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baidu</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.implicitly_wait(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 此处测试数据从文件读取，使用@file_data装饰器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 文件路径是相对于Baidu这个测试类的相对路径</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 使用外部文件方式Load数据无须使用unpack</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@file_data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;test_baidu.json&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results, </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tearDown</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    unittest.main(</span><span style="color:#E36209;">verbosity</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>可以看到，使用 @file_data 这个装饰器，与使用 @data 的装饰器有一点不同：</p><p>（1）@file_data 这个装饰器里，文件的路径是相对于这个测试类本身来说的。在本例中为 Baidu 这个测试类所处的文件的相对位置；</p><p>（2）使用 @file_data 无须使用 unpack，即使同一组数据的参数有多个。</p><ul><li><strong>使用 YAML 文件</strong></li></ul><p>如果想在 python 中使用 yaml 文件，则需要安装 PyYAML。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install pyyaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install pyyaml</span></span></code></pre></div><p>安装好后，我们在test_baidu.json的同级目录下，创建一个文件test_baidu.yaml，内容如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&quot;case1&quot;:</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;search_string&quot;: &quot;itesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;expect_string&quot;: &quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&quot;case2&quot;: </span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;search_string&quot;: &quot;itesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;expect_string&quot;: &quot;iTesting&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&quot;case1&quot;:</span></span>
<span class="line"><span style="color:#24292E;">  &quot;search_string&quot;: &quot;itesting&quot;</span></span>
<span class="line"><span style="color:#24292E;">  &quot;expect_string&quot;: &quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&quot;case2&quot;: </span></span>
<span class="line"><span style="color:#24292E;">  &quot;search_string&quot;: &quot;itesting&quot;</span></span>
<span class="line"><span style="color:#24292E;">  &quot;expect_string&quot;: &quot;iTesting&quot;</span></span></code></pre></div><p>然后，我们更改 test_baidu.py，更改后的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> ddt </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ddt, data, file_data, unpack</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#6A737D;"># 使用yaml文件前先尝试导入，导入失败则将skip使用yaml数据驱动的测试用例</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> yaml</span></span>
<span class="line"><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ImportError</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    have_yaml_support </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    have_yaml_support </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">needs_yaml </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> unittest.skipUnless(</span></span>
<span class="line"><span style="color:#E1E4E8;">    have_yaml_support, </span><span style="color:#9ECBFF;">&quot;Need YAML to run this test&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@ddt</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baidu</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.implicitly_wait(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 使用yaml文件必须使用@needs_yaml装饰</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@needs_yaml</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@file_data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;test_baidu.yaml&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results, </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tearDown</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    unittest.main(</span><span style="color:#FFAB70;">verbosity</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> ddt </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ddt, data, file_data, unpack</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#6A737D;"># 使用yaml文件前先尝试导入，导入失败则将skip使用yaml数据驱动的测试用例</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> yaml</span></span>
<span class="line"><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ImportError</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    have_yaml_support </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    have_yaml_support </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">needs_yaml </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> unittest.skipUnless(</span></span>
<span class="line"><span style="color:#24292E;">    have_yaml_support, </span><span style="color:#032F62;">&quot;Need YAML to run this test&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@ddt</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baidu</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.implicitly_wait(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 使用yaml文件必须使用@needs_yaml装饰</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@needs_yaml</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@file_data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;test_baidu.yaml&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results, </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tearDown</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    unittest.main(</span><span style="color:#E36209;">verbosity</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>你可以看到，与使用 JSON 文件不同， 使用 YAML 文件必须要先安装 PyYaml。然后为了防止 yaml 导入失败，我定义了 needs_yaml 这个装饰器，用来给我的程序加个安全判断。如果导入失败，则所有以 needs_yaml 装饰的测试用例将不会执行。</p><h4 id="_4-ddt-使用文件提供数据-其他格式数据文件" tabindex="-1">4.ddt 使用文件提供数据 --- 其他格式数据文件 <a class="header-anchor" href="#_4-ddt-使用文件提供数据-其他格式数据文件" aria-label="Permalink to &quot;4.ddt 使用文件提供数据 --- 其他格式数据文件&quot;">​</a></h4><p>因为 ddt 默认只支持 JSON 和 YAML 格式的数据。但是我想使用其他数据格式怎么办？</p><p>常用的方式有如下两种：</p><ul><li><p>先读取其他格式的文件（例如 Excel 格式），然后创建 ddt 支持的 JSON 或者 YAML 文件，最后把获取到的数据写入这个文件，再使用 @file_data() 即可；</p></li><li><p>创建一个函数，在函数中读取其他格式的文件并获取数据，将数据直接返回为 @ddt.data() 支持的格式调用即可。</p></li></ul><h3 id="ddt-的原理解析" tabindex="-1">DDT 的原理解析 <a class="header-anchor" href="#ddt-的原理解析" aria-label="Permalink to &quot;DDT 的原理解析&quot;">​</a></h3><p>了解了 ddt 的使用，不知你有没有想过如下问题：</p><ul><li><p>ddt 是如何把你的测试数据转给你的测试用例的？</p></li><li><p>当你的一组数据有多个参数时，ddt 是如何 unpack 的？</p></li><li><p>当你有多组数据时，ddt 拆分测试用例是如何命名的？</p></li></ul><p>下面我们就来一一揭晓 ddt 实现数据驱动的秘密。</p><p>其实 ddt 的实现核心就是**@ddt(cls)<strong>这个装饰器，而这个装饰器的</strong>核心代码是 wrapper**这个内函数，下面我直接把 wrapper 的源码贴上来，我们一起看看：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapper</span><span style="color:#E1E4E8;">(cls):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 先遍历被装饰类的name, 和func</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 对于func，先看被装饰的是DATA_ATTR还是FILE_ATTR</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> name, func </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__dict__</span><span style="color:#E1E4E8;">.items()):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 如果被装饰的是DATA_ATTR</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">DATA_ATTR</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">#获取@data提供数据的index和内容并且遍历它们</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">DATA_ATTR</span><span style="color:#E1E4E8;">)):</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;"># 重新生成新的测试函数名，这个函数名会展示在测试报告中</span></span>
<span class="line"><span style="color:#E1E4E8;">                test_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mk_test_name(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    name,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(v, </span><span style="color:#9ECBFF;">&quot;__name__&quot;</span><span style="color:#E1E4E8;">, v),</span></span>
<span class="line"><span style="color:#E1E4E8;">                    i,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    fmt_test_name</span></span>
<span class="line"><span style="color:#E1E4E8;">                )</span></span>
<span class="line"><span style="color:#E1E4E8;">                test_data_docstring </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _get_test_data_docstring(func, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;"># 如果类函数被@unpack装饰</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">UNPACK_ATTR</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;"># 如果提供的数据是tuple或者list</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(v, </span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(v, </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;"># 则添加一个case到测试类中</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;"># list或tuple传不定数目的值， 用*v即可。</span></span>
<span class="line"><span style="color:#E1E4E8;">                        add_test(</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            test_name,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            test_data_docstring,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            func,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v</span></span>
<span class="line"><span style="color:#E1E4E8;">                        )</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;"># unpack dictionary</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;"># 添加一个case到测试类中</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;"># dict中传不定数目的值，用**v</span></span>
<span class="line"><span style="color:#E1E4E8;">                        add_test(</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            test_name,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            test_data_docstring,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            func,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">v</span></span>
<span class="line"><span style="color:#E1E4E8;">                        )</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;"># 如不需要unpack，则直接添加一个case到测试类</span></span>
<span class="line"><span style="color:#E1E4E8;">                    add_test(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">, test_name, test_data_docstring, func, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 删除原来的测试类</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">delattr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">, name)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 如果被装饰的是file_data</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">FILE_ATTR</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 获取file的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">            file_attr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">FILE_ATTR</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 根据process_file_data解析这个文件</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 在解析的最后，会调用mk_test_name生成多个测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">            process_file_data(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">, name, func, file_attr)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 测试用例生成后，会删除原来的测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">delattr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">, name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cls</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapper</span><span style="color:#24292E;">(cls):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 先遍历被装饰类的name, 和func</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 对于func，先看被装饰的是DATA_ATTR还是FILE_ATTR</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name, func </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__dict__</span><span style="color:#24292E;">.items()):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 如果被装饰的是DATA_ATTR</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">DATA_ATTR</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">#获取@data提供数据的index和内容并且遍历它们</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">DATA_ATTR</span><span style="color:#24292E;">)):</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 重新生成新的测试函数名，这个函数名会展示在测试报告中</span></span>
<span class="line"><span style="color:#24292E;">                test_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mk_test_name(</span></span>
<span class="line"><span style="color:#24292E;">                    name,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(v, </span><span style="color:#032F62;">&quot;__name__&quot;</span><span style="color:#24292E;">, v),</span></span>
<span class="line"><span style="color:#24292E;">                    i,</span></span>
<span class="line"><span style="color:#24292E;">                    fmt_test_name</span></span>
<span class="line"><span style="color:#24292E;">                )</span></span>
<span class="line"><span style="color:#24292E;">                test_data_docstring </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _get_test_data_docstring(func, v)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 如果类函数被@unpack装饰</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">UNPACK_ATTR</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 如果提供的数据是tuple或者list</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(v, </span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(v, </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># 则添加一个case到测试类中</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># list或tuple传不定数目的值， 用*v即可。</span></span>
<span class="line"><span style="color:#24292E;">                        add_test(</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                            test_name,</span></span>
<span class="line"><span style="color:#24292E;">                            test_data_docstring,</span></span>
<span class="line"><span style="color:#24292E;">                            func,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v</span></span>
<span class="line"><span style="color:#24292E;">                        )</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># unpack dictionary</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># 添加一个case到测试类中</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># dict中传不定数目的值，用**v</span></span>
<span class="line"><span style="color:#24292E;">                        add_test(</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                            test_name,</span></span>
<span class="line"><span style="color:#24292E;">                            test_data_docstring,</span></span>
<span class="line"><span style="color:#24292E;">                            func,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">v</span></span>
<span class="line"><span style="color:#24292E;">                        )</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 如不需要unpack，则直接添加一个case到测试类</span></span>
<span class="line"><span style="color:#24292E;">                    add_test(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">, test_name, test_data_docstring, func, v)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 删除原来的测试类</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">delattr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">, name)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 如果被装饰的是file_data</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">FILE_ATTR</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 获取file的名称</span></span>
<span class="line"><span style="color:#24292E;">            file_attr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">FILE_ATTR</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 根据process_file_data解析这个文件</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 在解析的最后，会调用mk_test_name生成多个测试用例</span></span>
<span class="line"><span style="color:#24292E;">            process_file_data(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">, name, func, file_attr)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 测试用例生成后，会删除原来的测试用例</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">delattr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">, name)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cls</span></span></code></pre></div><p>来分析下这段代码， 对于每一个被 <strong>@ddt 装饰</strong> 的测试类，ddt 首先去<strong>遍历</strong> 测试类的自有属性，从而得出这个测试类<strong>有哪些测试方法</strong>，这部分主要靠这条语句：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># wrapper源码第4行</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> name, func </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__dict__</span><span style="color:#E1E4E8;">.items()):</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># wrapper源码第4行</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name, func </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__dict__</span><span style="color:#24292E;">.items()):</span></span></code></pre></div><p>然后，ddt 去判断所有的 func（即类函数）里，有没有装饰器 @data 或者 @file_data，主要靠这两条语句：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 被@data装饰， wrapper源码第6行</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">DATA_ATTR</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#6A737D;"># 被file_data 装饰，wrapper源码第47行</span></span>
<span class="line"><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">FILE_ATTR</span><span style="color:#E1E4E8;">):</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 被@data装饰， wrapper源码第6行</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">DATA_ATTR</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#6A737D;"># 被file_data 装饰，wrapper源码第47行</span></span>
<span class="line"><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">FILE_ATTR</span><span style="color:#24292E;">):</span></span></code></pre></div><p>接着程序会进入两条分支：被 @data 装饰，即由 ddt 直接提供数据；被 @file_data 装饰，即数据由外部文件提供。</p><h4 id="_1-被-data-装饰-即由-ddt-直接提供数据" tabindex="-1">1.被 @data 装饰，即由 ddt 直接提供数据 <a class="header-anchor" href="#_1-被-data-装饰-即由-ddt-直接提供数据" aria-label="Permalink to &quot;1.被 @data 装饰，即由 ddt 直接提供数据&quot;">​</a></h4><p>如果数据是直接通过 @data 提供的，那么为每一组数据新生成一个测试用例名称。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在本例中， i， v的第一次循环，值为 </span></span>
<span class="line"><span style="color:#6A737D;"># i:0 v:[&#39;iTesting&#39;, &#39;iTesting&#39;]</span></span>
<span class="line"><span style="color:#6A737D;"># wrapper源码第8行</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">DATA_ATTR</span><span style="color:#E1E4E8;">)):</span></span>
<span class="line"><span style="color:#E1E4E8;">    test_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mk_test_name(</span></span>
<span class="line"><span style="color:#E1E4E8;">        name,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(v, </span><span style="color:#9ECBFF;">&quot;__name__&quot;</span><span style="color:#E1E4E8;">, v),</span></span>
<span class="line"><span style="color:#E1E4E8;">        i,</span></span>
<span class="line"><span style="color:#E1E4E8;">        fmt_test_name</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在本例中， i， v的第一次循环，值为 </span></span>
<span class="line"><span style="color:#6A737D;"># i:0 v:[&#39;iTesting&#39;, &#39;iTesting&#39;]</span></span>
<span class="line"><span style="color:#6A737D;"># wrapper源码第8行</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">DATA_ATTR</span><span style="color:#24292E;">)):</span></span>
<span class="line"><span style="color:#24292E;">    test_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mk_test_name(</span></span>
<span class="line"><span style="color:#24292E;">        name,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(v, </span><span style="color:#032F62;">&quot;__name__&quot;</span><span style="color:#24292E;">, v),</span></span>
<span class="line"><span style="color:#24292E;">        i,</span></span>
<span class="line"><span style="color:#24292E;">        fmt_test_name</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span></code></pre></div><p>test_name 生成使用的是函数 mk_test_name。</p><p><strong>注意：ddt 在此时实现了把你的测试数据转给你的测试用例。 其实不是通过传递，而是通过把测试数据拆分，并且生成新测试用例的方式来达成的。</strong></p><p>而在函数 mk_test_name 里，ddt 更是把原来的测试函数通过特定的规则，拆分成不同的测试函数。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mk_test_name(name,</span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(v, </span><span style="color:#9ECBFF;">&quot;__name__&quot;</span><span style="color:#E1E4E8;">, v),i,fmt_test_name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mk_test_name(name,</span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(v, </span><span style="color:#032F62;">&quot;__name__&quot;</span><span style="color:#24292E;">, v),i,fmt_test_name)</span></span></code></pre></div><p>mk_test_name 的参数里：</p><ul><li><p>name 是原测试函数的名字</p></li><li><p>v 是我们的一组测试数据</p></li><li><p>i 是这组数据的 index</p></li><li><p>fmt_test_name 指定新的 test 函数的名字的格式，这个格式是按照原来测试函数名 <em>index</em> 第一个测试数据_第二个测试数据这样的格式。</p></li></ul><p>例如，我们的测试数据 <strong>[&#39;iTesting&#39;，&#39;iTesting&#39;]</strong> 会被转换成<strong>test_baidu_search_1_[&#39;iTesting&#39;， &#39;iTesting&#39;]&#39;</strong> ，但是由于符号 <strong>&#39;[&#39;</strong> 和 <strong>&#39;&#39;</strong> 以及 <strong>&#39;，&#39;</strong> 是不合法的字符，故会被 <strong>&#39;_&#39;</strong> 替换，故最终新生成的测试用例名是<strong>test_baidu_search_1___iTesting____iTesting__</strong> 这块的逻辑在函数 mk_test_name 的最后两行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># ddt内容函数mk_test_name，test_name处理逻辑如下</span></span>
<span class="line"><span style="color:#E1E4E8;">test_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{0}</span><span style="color:#9ECBFF;">_</span><span style="color:#79B8FF;">{1}</span><span style="color:#9ECBFF;">_</span><span style="color:#79B8FF;">{2}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">.format(name, index, value)</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> re.sub(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\W</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">^</span><span style="color:#F97583;">(?=</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">)</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">, test_name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># ddt内容函数mk_test_name，test_name处理逻辑如下</span></span>
<span class="line"><span style="color:#24292E;">test_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{0}</span><span style="color:#032F62;">_</span><span style="color:#005CC5;">{1}</span><span style="color:#032F62;">_</span><span style="color:#005CC5;">{2}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(name, index, value)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> re.sub(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\W</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">^</span><span style="color:#D73A49;">(?=</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">)</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">, test_name)</span></span></code></pre></div><p>紧接着，ddt 又去查找你的测试类函数，看它有没有被 @unpack 装饰。如果有，就意味着我们的测试类函数有多个参数，这个时候就需要把我们的测试数据 unpack，这样我们的测试类函数的各个参数才能接收到传入的值。</p><p>这样，ddt 把上一步生成的 test_name 和刚刚 unpack 的值（数据是 list、tuple，还是 dictionary，决定了 unpack 采用 *v 还是 **v），通过 add_test 来新生成一个测试用例，注册到我们的测试类下面，所有这些动作是在下面这段代码里完成的。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># wrapper源码里的18行到43行</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">UNPACK_ATTR</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(v, </span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(v, </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        add_test(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            test_name,</span></span>
<span class="line"><span style="color:#E1E4E8;">            test_data_docstring,</span></span>
<span class="line"><span style="color:#E1E4E8;">            func,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># unpack dictionary</span></span>
<span class="line"><span style="color:#E1E4E8;">        add_test(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            test_name,</span></span>
<span class="line"><span style="color:#E1E4E8;">            test_data_docstring,</span></span>
<span class="line"><span style="color:#E1E4E8;">            func,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">v</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    add_test(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">, test_name, test_data_docstring, func, v)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># wrapper源码里的18行到43行</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">UNPACK_ATTR</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(v, </span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(v, </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        add_test(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            test_name,</span></span>
<span class="line"><span style="color:#24292E;">            test_data_docstring,</span></span>
<span class="line"><span style="color:#24292E;">            func,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># unpack dictionary</span></span>
<span class="line"><span style="color:#24292E;">        add_test(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            test_name,</span></span>
<span class="line"><span style="color:#24292E;">            test_data_docstring,</span></span>
<span class="line"><span style="color:#24292E;">            func,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">v</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    add_test(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">, test_name, test_data_docstring, func, v)</span></span></code></pre></div><p><strong>注意：</strong></p><ul><li><p>这个时候测试类中是多了测试函数的，多了多少个，要取决于 ddt 提供的测试数据的组数，<strong>有几组就生成几个测试用例</strong>，并且都注册到原测试类中去；</p></li><li><p>unpack 其实就是为了把一个测试用例的<strong>多个测试数据全部传入新生成的测试函数中</strong>去，这些测试数据和测试函数的参数一一对应。</p></li></ul><p>最后，ddt 会把最初的那个原始测试类方法给删除（因为原测试函数已经根据各组数据变成了新的测试函数）。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># wrapper源码45行</span></span>
<span class="line"><span style="color:#B392F0;">delattr</span><span style="color:#E1E4E8;">(cls, name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># wrapper源码45行</span></span>
<span class="line"><span style="color:#6F42C1;">delattr</span><span style="color:#24292E;">(cls, name)</span></span></code></pre></div><p>通过这样的方式，ddt 根据测试数据的组数，通过函数 mk_test_name 生成多组测试用例，并通过 add_test 函数注册到 unittest的TestSuite 里去。</p><h4 id="_2-被-file-data-装饰-即数据由外部文件提供" tabindex="-1">2.被 @file_data 装饰，即数据由外部文件提供 <a class="header-anchor" href="#_2-被-file-data-装饰-即数据由外部文件提供" aria-label="Permalink to &quot;2.被 @file_data 装饰，即数据由外部文件提供&quot;">​</a></h4><p>如果测试函数被 @file_data 装饰，ddt 则会先获取 file_data 里的数据文件名称，然后通过函数 process_file_data 里进行下一步处理。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># wrapper源码的第49到52行</span></span>
<span class="line"><span style="color:#E1E4E8;">file_attr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(func, </span><span style="color:#79B8FF;">FILE_ATTR</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">process_file_data(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">, name, func, file_attr)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># wrapper源码的第49到52行</span></span>
<span class="line"><span style="color:#24292E;">file_attr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(func, </span><span style="color:#005CC5;">FILE_ATTR</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">process_file_data(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">, name, func, file_attr)</span></span></code></pre></div><p>看起来只有短短的两行，其实 ddt 在函数 process_file_data 内部做了很多操作。</p><p>首先 ddt 会先拿到我们提供的数据文件的绝对地址，并通过后缀名判断它是 yaml 文件还是 json 文件，然后分别调用 yaml 或者 json 的 load 方法拿到文件里提供的数据。</p><p>拿到数据后，最终也是通过 mk_test_name 函数和 add_test 函数，生成多条测试用例，并且注册到 unittest 的 TestSuite 里去。</p><p>最后一样是删除原来的测试函数：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># wrapper源码54行</span></span>
<span class="line"><span style="color:#E1E4E8;">delattr(cls, name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># wrapper源码54行</span></span>
<span class="line"><span style="color:#24292E;">delattr(cls, name)</span></span></code></pre></div><p>这就是 ddt 的整个实现逻辑了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>我来总结下今天所讲的内容。</p><p>今天我们了解了 unittest 里数据驱动 DDT 的安装、使用，以及实现原理。通过对其源代码的解析，我们掌握<strong>DDT 是如何实现按照数据组数生成测试用例、更新测试方法名，以及根据数据类型 unpack 测试数据的。</strong></p><p>DDT 的源代码非常经典，代码行数又不多，值得我们深读。仔细琢磨并研究透 DDT 的源码，有助于你的测试开发技术突飞猛进。</p><p><strong>我希望你能用单步调试的方式，结合本节课所讲，边执行测试代码边走读 DDT 代码，这样有助于你加深理解。</strong></p><p><strong>在此留一个课后作业给你：</strong></p><p>在本课时&quot;ddt 使用文件提供数据------其他格式数据文件&quot;这一小节中，我提及了使用其他数据格式进行数据驱动的方法，但是没有给出代码示例。</p><p>希望你结合本节所讲内容，以 Excel 格式的数据为例， 将 Excel 中的数据作为数据源提供给 DDT 使用</p><blockquote><p>Tips：读写 Excel 可以使用相关的 Library，例如&quot;读&quot;可以选择 xlrd、&quot;写&quot;可以选择 xlwt。</p></blockquote><p>好，本节课就到这里，下一节课，我将带你探寻 pytest 里的数据驱动以及数据模块 parameterized。</p><p>关于更多测试框架的知识，请关注我公众号iTesting，回复&quot;测试框架&quot;查看。</p><hr><p><a href="https://wj.qq.com/s2/7506053/9b01" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品～</a></p>`,86);function u(F,C,h,g,m,A){const a=e("Image");return t(),c("div",null,[E,y,i,l(a,{alt:"Lark20201021-171331.png",src:"https://s0.lgstatic.com/i/image/M00/61/92/Ciqc1F-P-9eAUYldAAI9I7f4yvA883.png"}),n(),d,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/60/84/Ciqc1F-NdceAHdJAAABwa3neOXM327.png"}),n(),_])}const v=o(r,[["render",u]]);export{D as __pageData,v as default};
