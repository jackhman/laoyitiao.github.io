import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.4e7d56ce.js";const m=JSON.parse('{"title":"21v-model：双向绑定到底是怎么实现的？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7649) 21  v-model：双向绑定到底是怎么实现的？.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7649) 21  v-model：双向绑定到底是怎么实现的？.md","lastUpdated":1696682708000}'),p={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7649) 21  v-model：双向绑定到底是怎么实现的？.md"},o=l(`<h1 id="_21v-model-双向绑定到底是怎么实现的" tabindex="-1">21v-model：双向绑定到底是怎么实现的？ <a class="header-anchor" href="#_21v-model-双向绑定到底是怎么实现的" aria-label="Permalink to &quot;21v-model：双向绑定到底是怎么实现的？&quot;">​</a></h1><p>很多人学习 Vue.js，会把 Vue.js 的响应式原理误解为双向绑定。其实响应式原理是一种单向行为，它是数据到 DOM 的映射。而真正的双向绑定，除了数据变化，会引起 DOM 的变化之外，还应该在操作 DOM 改变后，反过来影响数据的变化。</p><p>那么 Vue.js 里有内置的双向绑定的实现吗？答案是有的，v-model 指令就是一种双向绑定的实现，我们在平时项目开发中，也经常会使用 v-model。</p><p>v-model 也不是可以作用到任意标签，它只能在一些特定的表单标签如 input、select、textarea 和自定义组件中使用。</p><p>那么 v-model 的实现原理到底是怎样的呢？接下来，我们从普通表单元素和自定义组件两个方面来分别分析它的实现。</p><h3 id="在普通表单元素上作用-v-model" tabindex="-1">在普通表单元素上作用 v-model <a class="header-anchor" href="#在普通表单元素上作用-v-model" aria-label="Permalink to &quot;在普通表单元素上作用 v-model&quot;">​</a></h3><p>首先，我们来看在普通表单元素上作用 v-model，还是先举一个基本的示例：<code>&lt;input v-model=&quot;searchText&quot;/&gt;</code>。</p><p>我们先看这个模板编译后生成的 render 函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { vModelText as _vModelText, createVNode as _createVNode, withDirectives as _withDirectives, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> _withDirectives((_openBlock(), _createBlock(&quot;input&quot;, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;onUpdate:modelValue&quot;: $event =&gt; (_ctx.searchText = $event)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#FDAEB7;font-style:italic;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#E1E4E8;">, [&quot;onUpdate:modelValue&quot;])), [</span></span>
<span class="line"><span style="color:#E1E4E8;">    [_vModelText, _ctx.searchText]</span></span>
<span class="line"><span style="color:#E1E4E8;">  ])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { vModelText as _vModelText, createVNode as _createVNode, withDirectives as _withDirectives, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> _withDirectives((_openBlock(), _createBlock(&quot;input&quot;, {</span></span>
<span class="line"><span style="color:#24292E;">    &quot;onUpdate:modelValue&quot;: $event =&gt; (_ctx.searchText = $event)</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#B31D28;font-style:italic;">null</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#24292E;">, [&quot;onUpdate:modelValue&quot;])), [</span></span>
<span class="line"><span style="color:#24292E;">    [_vModelText, _ctx.searchText]</span></span>
<span class="line"><span style="color:#24292E;">  ])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，作用在 input 标签的 v-model 指令在编译后，除了使用 withDirectives 给这个 vnode 添加了 vModelText 指令对象外，还额外传递了一个名为 onUpdate:modelValue 的 prop，它的值是一个函数，这个函数就是用来更新变量 searchText。</p><p>我们来看 vModelText 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> vModelText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">created</span><span style="color:#E1E4E8;">(el, { value, modifiers</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { lazy, trim, number } }, vnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">    el._assign </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModelAssigner</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> castToNumber </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> number </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> el.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(el, lazy </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;change&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">, e </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.target.composing)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      let domValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> el.value</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (trim) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        domValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> domValue.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (castToNumber) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        domValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toNumber</span><span style="color:#E1E4E8;">(domValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      el.</span><span style="color:#B392F0;">_assign</span><span style="color:#E1E4E8;">(domValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (trim) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(el, </span><span style="color:#9ECBFF;">&#39;change&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        el.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> el.value.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">lazy) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(el, </span><span style="color:#9ECBFF;">&#39;compositionstart&#39;</span><span style="color:#E1E4E8;">, onCompositionStart)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(el, </span><span style="color:#9ECBFF;">&#39;compositionend&#39;</span><span style="color:#E1E4E8;">, onCompositionEnd)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">beforeUpdate</span><span style="color:#E1E4E8;">(el, { value, modifiers</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { trim, number } }, vnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    el._assign </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModelAssigner</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (document.activeElement </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (trim </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> el.value.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((number </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> el.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toNumber</span><span style="color:#E1E4E8;">(el.value) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> newValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (el.value </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> newValue) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      el.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getModelAssigner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (vnode) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.props[</span><span style="color:#9ECBFF;">&#39;onUpdate:modelValue&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(fn) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invokeArrayFns</span><span style="color:#E1E4E8;">(fn, value) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fn</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">onCompositionStart</span><span style="color:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  e.target.composing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">onCompositionEnd</span><span style="color:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.target</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (target.composing) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    target.composing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">trigger</span><span style="color:#E1E4E8;">(target, </span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> vModelText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">created</span><span style="color:#24292E;">(el, { value, modifiers</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { lazy, trim, number } }, vnode) {</span></span>
<span class="line"><span style="color:#24292E;">    el.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">    el._assign </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getModelAssigner</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> castToNumber </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> el.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(el, lazy </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;change&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;input&#39;</span><span style="color:#24292E;">, e </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.target.composing)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      let domValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.value</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (trim) {</span></span>
<span class="line"><span style="color:#24292E;">        domValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> domValue.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (castToNumber) {</span></span>
<span class="line"><span style="color:#24292E;">        domValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toNumber</span><span style="color:#24292E;">(domValue)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      el.</span><span style="color:#6F42C1;">_assign</span><span style="color:#24292E;">(domValue)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (trim) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(el, </span><span style="color:#032F62;">&#39;change&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        el.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.value.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">lazy) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(el, </span><span style="color:#032F62;">&#39;compositionstart&#39;</span><span style="color:#24292E;">, onCompositionStart)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(el, </span><span style="color:#032F62;">&#39;compositionend&#39;</span><span style="color:#24292E;">, onCompositionEnd)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">beforeUpdate</span><span style="color:#24292E;">(el, { value, modifiers</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { trim, number } }, vnode) {</span></span>
<span class="line"><span style="color:#24292E;">    el._assign </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getModelAssigner</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (document.activeElement </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> el) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (trim </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> el.value.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((number </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> el.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toNumber</span><span style="color:#24292E;">(el.value) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> newValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (el.value </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> newValue) {</span></span>
<span class="line"><span style="color:#24292E;">      el.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getModelAssigner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (vnode) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.props[</span><span style="color:#032F62;">&#39;onUpdate:modelValue&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(fn) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invokeArrayFns</span><span style="color:#24292E;">(fn, value) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fn</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">onCompositionStart</span><span style="color:#24292E;">(e) {</span></span>
<span class="line"><span style="color:#24292E;">  e.target.composing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">onCompositionEnd</span><span style="color:#24292E;">(e) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.target</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target.composing) {</span></span>
<span class="line"><span style="color:#24292E;">    target.composing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">trigger</span><span style="color:#24292E;">(target, </span><span style="color:#032F62;">&#39;input&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么接下来，我们就来拆解这个指令的实现。首先，这个指令实现了两个钩子函数，created 和 beforeUpdate。</p><p>我们先来看 created 部分的实现，根据上节课的分析，我们知道第一个参数 el 是节点的 DOM 对象，第二个参数是 binding 对象，第三个参数 vnode 是节点的 vnode 对象。</p><p>created 函数首先把 v-model 绑定的值 value 赋值给 el.value，这个就是数据到 DOM 的单向流动；接着通过 getModelAssigner 方法获取 props 中的 onUpdate:modelValue 属性对应的函数，赋值给 el._assign 属性；最后通过 addEventListener 来监听 input 标签的事件，它会根据是否配置 lazy 这个修饰符来决定监听 input 还是 change 事件。</p><p>我们接着看这个事件监听函数，当用户手动输入一些数据触发事件的时候，会执行函数，并通过 el.value 获取 input 标签新的值，然后调用 el._assign 方法更新数据，这就是 DOM 到数据的流动。</p><p>至此，我们就实现了数据的双向绑定，就是这么简单。接着我们来看 input v-model 支持的几个修饰符都分别代表什么含义。</p><h4 id="lazy-修饰符" tabindex="-1">lazy 修饰符 <a class="header-anchor" href="#lazy-修饰符" aria-label="Permalink to &quot;lazy 修饰符&quot;">​</a></h4><p>如果配置了 lazy 修饰符，那么监听的是 input 的 change 事件，它不会在input输入框实时输入的时候触发，而会在 input 元素值改变且失去焦点的时候触发。</p><p>如果不配置 lazy，监听的是 input 的 input 事件，它会在用户实时输入的时候触发。此外，还会多监听 compositionstart 和 compositionend 事件。</p><p>当用户在使用一些中文输入法的时候，会触发 compositionstart 事件，这个时候设置 e.target.composing 为 true，这样虽然 input 事件触发了，但是 input 事件的回调函数里判断了 e.target.composing 的值，如果为 true 则直接返回，不会把 DOM 值赋值给数据。</p><p>然后当用户从输入法中确定选中了一些数据完成输入后，会触发 compositionend 事件，这个时候判断 e.target.composing 为 true 的话则把它设置为 false，然后再手动触发元素的 input 事件，完成数据的赋值。</p><h4 id="trim-修饰符" tabindex="-1">trim 修饰符 <a class="header-anchor" href="#trim-修饰符" aria-label="Permalink to &quot;trim 修饰符&quot;">​</a></h4><p>如果配置了 trim 修饰符，那么会在 input 或者 change 事件的回调函数中，在获取 DOM 的值后，手动调用 trim 方法去除首尾空格。另外，还会额外监听 change 事件执行 el.value.trim() 把 DOM 的值的首尾空格去除。</p><h4 id="number-修饰符" tabindex="-1">number 修饰符 <a class="header-anchor" href="#number-修饰符" aria-label="Permalink to &quot;number 修饰符&quot;">​</a></h4><p>如果配置了 number 修饰符，或者 input 的 type 是 number，就会把 DOM 的值转成 number 类型后再赋值给数据。</p><p>接下来我们再来看一下 beforeUpdate 钩子函数的实现，非常简单，主要就是在组件更新前判断如果数据的值和 DOM 的值不同，则把数据更新到 DOM 上。</p><p>前面我们的分析的是文本类型的 input，如果我们对示例稍加修改：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;checkbox&quot;</span><span style="color:#E1E4E8;"> v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;searchText&quot;</span><span style="color:#F97583;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;checkbox&quot;</span><span style="color:#24292E;"> v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;searchText&quot;</span><span style="color:#D73A49;">/&gt;</span></span></code></pre></div><p>你可以看到，编译的结果不同，调用的指令也不一样了，我希望你可以举一反三，去自学其他类型的表单元素的 v-model 实现。</p><h3 id="在自定义组件上作用-v-model" tabindex="-1">在自定义组件上作用 v-model <a class="header-anchor" href="#在自定义组件上作用-v-model" aria-label="Permalink to &quot;在自定义组件上作用 v-model&quot;">​</a></h3><p>接下来，我们来分析自定义组件上作用 v-model，看看它与表单的 v-model 有哪些不同。还是通过一个示例说明：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;custom-input&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;modelValue&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`,</span></span>
<span class="line"><span style="color:#E1E4E8;">  computed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.modelValue</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;update:modelValue&#39;</span><span style="color:#E1E4E8;">, value)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;custom-input&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;modelValue&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  \`,</span></span>
<span class="line"><span style="color:#24292E;">  computed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.modelValue</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(value) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;update:modelValue&#39;</span><span style="color:#24292E;">, value)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>我们先通过 app.component 全局注册了一个 custom-input 自定义组件，内部我们使用了原生的 input 并使用了 v-model 指令实现数据的绑定。</p><p>注意这里我们不能直接把 modelValue 作为 input 对应的 v-model 数据，因为不能直接对 props 的值修改，因此这里使用计算属性。</p><p>计算属性 value 对应的 getter 函数是直接取 modelValue 这个 prop 的值，而 setter 函数是派发一个自定义事件 update:modelValue。</p><p>接下来我们就可以在应用的其他的地方使用这个自定义组件了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">custom</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">input v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;searchText&quot;</span><span style="color:#F97583;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">custom</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">input v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;searchText&quot;</span><span style="color:#D73A49;">/&gt;</span></span></code></pre></div><p>我们来看一下这个模板编译后生成的 render 函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> _component_custom_input = _resolveComponent(&quot;custom</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">input&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> (_openBlock(), _createBlock(_component_custom_input, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    modelValue: _ctx.searchText,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;onUpdate:modelValue&quot;: $event =&gt; (_ctx.searchText = $event)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#FDAEB7;font-style:italic;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#E1E4E8;">, [&quot;modelValue&quot;, &quot;onUpdate:modelValue&quot;]))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> _component_custom_input = _resolveComponent(&quot;custom</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">input&quot;)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> (_openBlock(), _createBlock(_component_custom_input, {</span></span>
<span class="line"><span style="color:#24292E;">    modelValue: _ctx.searchText,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;onUpdate:modelValue&quot;: $event =&gt; (_ctx.searchText = $event)</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#B31D28;font-style:italic;">null</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#24292E;">, [&quot;modelValue&quot;, &quot;onUpdate:modelValue&quot;]))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，编译的结果似乎和指令没有什么关系，并没有调用 withDirective 函数。</p><p>我们对示例稍做修改：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">custom</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">input </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">modelValue</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;searchText&quot;</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">update:</span><span style="color:#E1E4E8;">modelValue</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;$event=&gt;{searchText = $event}&quot;</span><span style="color:#F97583;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">custom</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">input </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">modelValue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;searchText&quot;</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">update:</span><span style="color:#24292E;">modelValue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$event=&gt;{searchText = $event}&quot;</span><span style="color:#D73A49;">/&gt;</span></span></code></pre></div><p>然后我们再来看它编译后生成的 render 函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> _component_custom_input = _resolveComponent(&quot;custom</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">input&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> (_openBlock(), _createBlock(_component_custom_input, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    modelValue: _ctx.searchText,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;onUpdate:modelValue&quot;: $event=&gt;{_ctx.searchText = $event}</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#FDAEB7;font-style:italic;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#E1E4E8;">, [&quot;modelValue&quot;, &quot;onUpdate:modelValue&quot;]))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> _component_custom_input = _resolveComponent(&quot;custom</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">input&quot;)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> (_openBlock(), _createBlock(_component_custom_input, {</span></span>
<span class="line"><span style="color:#24292E;">    modelValue: _ctx.searchText,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;onUpdate:modelValue&quot;: $event=&gt;{_ctx.searchText = $event}</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#B31D28;font-style:italic;">null</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#24292E;">, [&quot;modelValue&quot;, &quot;onUpdate:modelValue&quot;]))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们发现，它和前面示例的编译结果是一模一样的，因为 v-model 作用于组件上本质就是一个语法糖，就是往组件传入了一个名为 modelValue 的 prop，它的值是往组件传入的数据 data，另外它还在组件上监听了一个名为 update:modelValue 的自定义事件，事件的回调函数接受一个参数，执行的时候会把参数 $event 赋值给数据 data。</p><p>正因为这个原理，所以我们想要实现自定义组件的 v-model，首先需要定义一个名为 modelValue 的 prop，然后在数据改变的时候，派发一个名为 update:modelValue 的事件。</p><p>Vue.js 3.0 关于组件 v-model 的实现和 Vue.js 2.x 实现是很类似的，在 Vue.js 2.x 中，想要实现自定义组件的 v-model，首先需要定义一个名为 value 的 prop，然后在数据改变的时候，派发一个名为 input 的事件。</p><p>总结下来，作用在组件上的 v-model 实际上就是一种打通数据双向通讯的语法糖，即外部可以往组件上传递数据，组件内部经过某些操作行为修改了数据，然后把更改后的数据再回传到外部。</p><p>v-model 在自定义组件的设计中非常常用，你可以看到 Element UI 几乎所有的表单组件都是通过 v-model 的方式完成了数据的交换。</p><p>一旦我们使用了 v-model 的方式，我们必须在组件中申明一个 modelValue 的 prop，如果不想用这个 prop，想换个名字，当然也是可以的。</p><p>Vue.js 3.0 给组件的 v-model 提供了参数的方式，允许我们指定 prop 的名称：<code>&lt;custom-input v-model:text=&quot;searchText&quot;/&gt;</code>。</p><p>然后我们再来看编译后的 render 函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> _component_custom_input = _resolveComponent(&quot;custom</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">input&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> (_openBlock(), _createBlock(_component_custom_input, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    text: _ctx.searchText,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;onUpdate:text&quot;: $event =&gt; (_ctx.searchText = $event)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#FDAEB7;font-style:italic;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#E1E4E8;">, [&quot;text&quot;, &quot;onUpdate:text&quot;]))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> _component_custom_input = _resolveComponent(&quot;custom</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">input&quot;)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> (_openBlock(), _createBlock(_component_custom_input, {</span></span>
<span class="line"><span style="color:#24292E;">    text: _ctx.searchText,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;onUpdate:text&quot;: $event =&gt; (_ctx.searchText = $event)</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#B31D28;font-style:italic;">null</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#24292E;">, [&quot;text&quot;, &quot;onUpdate:text&quot;]))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，我们往组件传递的 prop 变成了 text，监听的自定义事件也变成了 @update:text 了。</p><p>显然，如果 v-model 支持了参数，那么我们就可以在一个组件上使用多个 v-model 了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ChildComponent v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">title</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;pageTitle&quot;</span><span style="color:#E1E4E8;"> v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">content</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;pageContent&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ChildComponent v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">title</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;pageTitle&quot;</span><span style="color:#24292E;"> v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">content</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;pageContent&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span></code></pre></div><p>至此，我们就掌握了组件 v-model 的实现原理，它</p><p>的本质就是语法糖：<strong>通过 prop 向组件传递数据</strong> ，<strong>并监听自定义事件接受组件反传的数据并更新</strong>。</p><p>prop 的实现原理我们之前分析过，但自定义事件是如何派发的呢？因为从模板的编译结果看，除了 modelValue 这个 prop，还多了一个 onUpdate:modelValue 的 prop，它和自定义事件有什么关系？接下来我们就来分析这部分的实现。</p><h3 id="自定义事件派发" tabindex="-1">自定义事件派发 <a class="header-anchor" href="#自定义事件派发" aria-label="Permalink to &quot;自定义事件派发&quot;">​</a></h3><p>从前面的示例我们知道，子组件会执行<code>this.$emit(&#39;update:modelValue&#39;,value)</code>方法派发自定义事件，$emit 内部执行了 emit 方法，我们来看一下它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(instance, event, ...args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance.vnode.props </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> EMPTY_OBJ</span></span>
<span class="line"><span style="color:#E1E4E8;">  let handlerName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`on\${</span><span style="color:#B392F0;">capitalize</span><span style="color:#E1E4E8;">(event)}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  let handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props[handlerName]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">handler </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;update:&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    handlerName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`on\${</span><span style="color:#B392F0;">capitalize</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">hyphenate</span><span style="color:#E1E4E8;">(event))}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props[handlerName]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (handler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callWithAsyncErrorHandling</span><span style="color:#E1E4E8;">(handler, instance, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_EVENT_HANDLER */</span><span style="color:#E1E4E8;">, args)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(instance, event, ...args) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance.vnode.props </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> EMPTY_OBJ</span></span>
<span class="line"><span style="color:#24292E;">  let handlerName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`on\${</span><span style="color:#6F42C1;">capitalize</span><span style="color:#24292E;">(event)}\`</span></span>
<span class="line"><span style="color:#24292E;">  let handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props[handlerName]</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">handler </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;update:&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    handlerName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`on\${</span><span style="color:#6F42C1;">capitalize</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">hyphenate</span><span style="color:#24292E;">(event))}\`</span></span>
<span class="line"><span style="color:#24292E;">    handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props[handlerName]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (handler) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callWithAsyncErrorHandling</span><span style="color:#24292E;">(handler, instance, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_EVENT_HANDLER */</span><span style="color:#24292E;">, args)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>emit 方法支持 3 个参数，第一个参数 instance 是组件的实例，也就是执行 $emit 方法的组件实例，第二个参数 event 是自定义事件名称，第三个参数 args 是事件传递的参数。</p><p>emit 方法首先获取事件名称，把传递的 event 首字母大写，然后前面加上 on 字符串，比如我们前面派发的 update:modelValue 事件名称，处理后就变成了 onUpdate:modelValue。</p><p>接下来，通过这个事件名称，从 props 中根据事件名找到对应的 prop 值，作为事件的回调函数。</p><p>如果找不到对应的 prop 并且 event 是以 update: 开头的，则尝试把 event 名先转成连字符形式然后再处理。</p><p>找到回调函数 handler 后，再去执行这个回调函数，并且把参数 args 传入。针对 v-model 场景，这个回调函数就是拿到子组件回传的数据然后修改父元素传入到子组件的 prop 数据，这样就达到了数据双向通讯的目的。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该要了解 v-model 在普通表单元素上以及在自定义指令上的实现原理分别是怎样的，以及了解自定义事件派发的实现原理。</p><p>最后，给你留一道思考题目，如果自定义组件不用 v-model，也不用自定义事件监听的方式，如何实现和 v-model 一样的效果，怎么做呢？欢迎你在留言区与我分享。</p><blockquote><p>本节课的相关代码在源代码中的位置如下：</p><p>packages/runtime-dom/src/directives/vModel.ts</p></blockquote>`,72),e=[o];function t(c,r,E,y,i,u){return n(),a("div",null,e)}const v=s(p,[["render",t]]);export{m as __pageData,v as default};
