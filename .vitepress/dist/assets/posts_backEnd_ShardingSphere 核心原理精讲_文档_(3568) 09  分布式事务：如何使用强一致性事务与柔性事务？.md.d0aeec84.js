import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.f949202b.js";const b=JSON.parse('{"title":"如何理解分布式事务？ ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3568) 09  分布式事务：如何使用强一致性事务与柔性事务？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3568) 09  分布式事务：如何使用强一致性事务与柔性事务？.md","lastUpdated":null}'),l={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3568) 09  分布式事务：如何使用强一致性事务与柔性事务？.md"},e=p(`<p>你好，欢迎进入第 09 课时的学习。今天，我们将介绍一个分布式环境下的重要主题，即分布式事务。在介绍 ShardingSphere 中的具体应用方式之前，我们有必要对分布式事务的基本概念做简要介绍。</p><h3 id="如何理解分布式事务" tabindex="-1">如何理解分布式事务？ <a class="header-anchor" href="#如何理解分布式事务" aria-label="Permalink to &quot;如何理解分布式事务？&quot;">​</a></h3><p>在传统的关系型数据库中，事务是一个标准组件，几乎所有成熟的关系型数据库都提供了对本地事务的原生支持。本地事务提供了 ACID 事务特性。基于本地事务，为了保证数据的一致性，我们先开启一个事务后，才可以执行数据操作，最后提交或回滚就可以了。更进一步，借助于 Spring 等集成化框架，开发人员只需关注引起数据改变的业务即可。</p><p>但在分布式环境下，事情就会变得比较复杂。假设系统中存在多个独立的数据库，为了确保数据在这些独立的数据库中保持一致，我们需要把这些数据库纳入同一个事务中。这时本地事务就无能为力了，我们需要使用分布式事务。</p><p>业界关于如何实现分布式事务也有一些通用的实现机制，例如支持两阶段提交的 XA 协议以及以 Saga 为代表的柔性事务。针对不同的实现机制，也存在一些供应商和开发工具。因为这些开发工具在使用方式上和实现原理上都有较大的差异性，所以开发人员的一大诉求在于，希望能有一套统一的解决方案能够屏蔽这些差异。同时，我们也希望这种解决方案能够提供友好的系统集成性。</p><p>ShardingSphere 作为一款分布式数据库中间件，势必要考虑分布式事务的实现方案。而在设计上，ShardingSphere 从一开始就充分考虑到了开发人员的这些诉求，接下来让我们一起来看一下。</p><h3 id="shardingsphere-中的分布式事务" tabindex="-1">ShardingSphere 中的分布式事务 <a class="header-anchor" href="#shardingsphere-中的分布式事务" aria-label="Permalink to &quot;ShardingSphere 中的分布式事务&quot;">​</a></h3><p>在 ShardingSphere 中，除本地事务之外，还提供针对分布式事务的两种实现方案，分别是 XA 事务和柔性事务。这点可以从事务类型枚举值 TransactionType 中得到验证：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">LOCAL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">XA</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BASE</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">LOCAL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">XA</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BASE</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="xa-事务" tabindex="-1">XA 事务 <a class="header-anchor" href="#xa-事务" aria-label="Permalink to &quot;XA 事务&quot;">​</a></h4><p>XA 事务提供基于两阶段提交协议的实现机制。所谓两阶段提交，顾名思义分成两个阶段，一个是准备阶段，一个是执行阶段。在准备阶段中，协调者发起一个提议，分别询问各参与者是否接受。在执行阶段，协调者根据参与者的反馈，提交或终止事务。如果参与者全部同意则提交，只要有一个参与者不同意就终止。</p><p><img src="https://s0.lgstatic.com/i/image/M00/31/26/CgqCHl8MBruAHHnkAABo-3eRic0694.png" alt="Drawing 0.png"><br> 两阶段提交示意图</p><p>目前，业界在实现 XA 事务时也存在一些主流工具库，包括 Atomikos、Narayana 和 Bitronix。ShardingSphere 对这三种工具库都进行了集成，并默认使用 Atomikos 来完成两阶段提交。</p><h4 id="base-事务" tabindex="-1">BASE 事务 <a class="header-anchor" href="#base-事务" aria-label="Permalink to &quot;BASE 事务&quot;">​</a></h4><p>XA 事务是典型的强一致性事务，也就是完全遵循事务的 ACID 设计原则。与 XA 事务这种&quot;刚性&quot;不同，柔性事务则遵循 BASE 设计理论，追求的是最终一致性。这里的 BASE 来自基本可用（Basically Available）、软状态（Soft State）和最终一致性（Eventual Consistency）这三个概念。</p><p>关于如何实现基于 BASE 原则的柔性事务，业界也存在一些优秀的框架，例如阿里巴巴提供的 Seata。ShardingSphere 内部也集成了对 Seata 的支持。当然，我们也可以根据需要，集成其他分布式事务类开源框架，并基于微内核架构嵌入到 ShardingSphere 运行时环境中。</p><p>介绍完理论知识之后，接下来让我们分别使用 XA 事务和 BASE 事务来实现分布式环境下的数据一致性。</p><h3 id="使用-xa-事务" tabindex="-1">使用 XA 事务 <a class="header-anchor" href="#使用-xa-事务" aria-label="Permalink to &quot;使用 XA 事务&quot;">​</a></h3><p>在 Spring 应用程序中添加对 XA 事务的支持相对简单，无论是 Spring 框架，还是 ShardingSphere 自身，都为我们提供了低成本的开发机制。</p><h4 id="开发环境准备" tabindex="-1">开发环境准备 <a class="header-anchor" href="#开发环境准备" aria-label="Permalink to &quot;开发环境准备&quot;">​</a></h4><p>要想使用 XA 事务，我们首先要在 pom 文件中添加 sharding-jdbc-core 和 sharding-transaction-xa-core 这两个依赖：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sharding-jdbc-core&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sharding-transaction-xa-core&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sharding-jdbc-core&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sharding-transaction-xa-core&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在今天的案例中，我们将演示如何在分库环境下实现分布式事务，因此我们需要在 Spring Boot 中创建一个 .properties 文件，并包含分库需要的所有配置项信息：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds0,ds1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.jdbc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds0</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.autoCommit</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.jdbc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds1</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.autoCommit</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{user_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.binding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tables</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_record,health_task</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.broadcast</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tables</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_level</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">}.health_record</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">}.health_task</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.props.sql.show</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds0,ds1</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.jdbc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds0</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.autoCommit</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.jdbc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds1</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.autoCommit</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{user_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.binding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tables</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_record,health_task</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.broadcast</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tables</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_level</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">}.health_record</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">}.health_task</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.props.sql.show</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="实现-xa-事务" tabindex="-1">实现 XA 事务 <a class="header-anchor" href="#实现-xa-事务" aria-label="Permalink to &quot;实现 XA 事务&quot;">​</a></h4><p>通过分库配置，我们将获取 SQL 执行的目标 DataSource。由于我们使用 Spring 框架而不是使用原生的 JDBC 进行事务管理，所以需要将 DataSource 与 Spring 中的事务管理器 PlatformTransactionManager 关联起来。</p><p>另一方面，为了更好地集成 ShardingSphere 中的分布式事务支持，我们可以通过 Spring 框架提供的 JdbcTemplate 模板类来简化 SQL 的执行过程。一种常见的做法是创建一个事务配置类来初始化所需的 PlatformTransactionManager 和 JdbcTemplate 对象：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableTransactionManagement</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PlatformTransactionManager </span><span style="color:#B392F0;">txManager</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#FFAB70;">dataSource</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceTransactionManager</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> JdbcTemplate </span><span style="color:#B392F0;">jdbcTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#FFAB70;">dataSource</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JdbcTemplate</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableTransactionManagement</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PlatformTransactionManager </span><span style="color:#6F42C1;">txManager</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataSource </span><span style="color:#E36209;">dataSource</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceTransactionManager</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> JdbcTemplate </span><span style="color:#6F42C1;">jdbcTemplate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataSource </span><span style="color:#E36209;">dataSource</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JdbcTemplate</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>一旦初始化了 JdbcTemplate，就可以在业务代码中注入这个模板类来执行各种 SQL 操作，常见的做法是传入一个 PreparedStatementCallback，并在这个回调中执行各种具体的 SQL：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">JdbcTemplate jdbcTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">jdbcTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(SQL, (PreparedStatementCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) preparedStatement </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> preparedStatement;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">JdbcTemplate jdbcTemplate;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">jdbcTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(SQL, (PreparedStatementCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) preparedStatement </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> preparedStatement;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在上面的代码中，我们通过 PreparedStatementCallback 回调获取一个 PreparedStatement 对象。或者，我们可以使用 JdbcTemplate 另一种执行 SQL 的代码风格，通过使用更基础的 ConnectionCallback 回调接口：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">jdbcTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">((ConnectionCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) connection</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> connection;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">jdbcTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">((ConnectionCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) connection</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> connection;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>为了在业务代码中以最少的开发成本嵌入分布式事务机制，ShardingSphere 也专门提供了一个 @ShardingTransactionType 注解来配置所需要执行的事务类型：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.METHOD, ElementType.TYPE})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Inherited</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ShardingTransactionType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    TransactionType </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> TransactionType.LOCAL;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.METHOD, ElementType.TYPE})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Inherited</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ShardingTransactionType</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    TransactionType </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> TransactionType.LOCAL;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我们知道，ShardingSphere 提供的事务类型有三种，分别是 LOCAL、XA 和 BASE，默认使用的是 LOCAL。所以如果需要用到分布式事务，需要在业务方法上显式的添加这个注解：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ShardingTransactionType</span><span style="color:#E1E4E8;">(TransactionType.XA)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ShardingTransactionType</span><span style="color:#24292E;">(TransactionType.XA)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>另一种设置 TransactionType 的方式是使用 TransactionTypeHolder 工具类。TransactionTypeHolder 类中通过 ThreadLocal 来保存 TransactionType：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionTypeHolder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ThreadLocal&lt;</span><span style="color:#F97583;">TransactionType</span><span style="color:#E1E4E8;">&gt; CONTEXT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ThreadLocal&lt;</span><span style="color:#F97583;">TransactionType</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> TransactionType </span><span style="color:#B392F0;">initialValue</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> TransactionType.LOCAL;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> TransactionType </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> CONTEXT.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TransactionType </span><span style="color:#FFAB70;">transactionType</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CONTEXT.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(transactionType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CONTEXT.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionTypeHolder</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ThreadLocal&lt;</span><span style="color:#D73A49;">TransactionType</span><span style="color:#24292E;">&gt; CONTEXT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ThreadLocal&lt;</span><span style="color:#D73A49;">TransactionType</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> TransactionType </span><span style="color:#6F42C1;">initialValue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> TransactionType.LOCAL;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> TransactionType </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> CONTEXT.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TransactionType </span><span style="color:#E36209;">transactionType</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        CONTEXT.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(transactionType);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        CONTEXT.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>可以看到，TransactionTypeHolder 中默认采用的是本地事务，我们可以通过 set 方法来改变初始设置：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TransactionTypeHolder.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(TransactionType.</span><span style="color:#79B8FF;">XA</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TransactionTypeHolder.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(TransactionType.</span><span style="color:#005CC5;">XA</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>现在，使用 XA 开发分布式事务的整体结构的方法已经梳理清楚了，我们可以通过创建一个 insertHealthRecords 方法，在其中添加对 HealthRecord 和 HealthTask 的数据插入代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Long</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insertHealthRecords</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       List&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       jdbcTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">((ConnectionCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) connection</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           connection.</span><span style="color:#B392F0;">setAutoCommit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Long i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                HealthRecord healthRecord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createHealthRecord</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#B392F0;">insertHealthRecord</span><span style="color:#E1E4E8;">(healthRecord, connection);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">             HealthTask healthTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createHealthTask</span><span style="color:#E1E4E8;">(i, healthRecord);</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">insertHealthTask</span><span style="color:#E1E4E8;">(healthTask, connection);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">              result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(healthRecord.</span><span style="color:#B392F0;">getRecordId</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">             connection.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">             connection.</span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> connection;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Long</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insertHealthRecords</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">       List&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       jdbcTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">((ConnectionCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) connection</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           connection.</span><span style="color:#6F42C1;">setAutoCommit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Long i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                HealthRecord healthRecord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createHealthRecord</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6F42C1;">insertHealthRecord</span><span style="color:#24292E;">(healthRecord, connection);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">             HealthTask healthTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createHealthTask</span><span style="color:#24292E;">(i, healthRecord);</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">insertHealthTask</span><span style="color:#24292E;">(healthTask, connection);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">              result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(healthRecord.</span><span style="color:#6F42C1;">getRecordId</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">             connection.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">             connection.</span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> connection;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>可以看到，在执行插入操作之前，我们关闭了 Connection 的自动提交功能。在 SQL 执行完毕之后，手动通过 Connection commit 方法执行事务提交。一旦在 SQL 的执行过程中出现任何异常时，就调用 Connection 的 rollback 方法回滚事务。</p><p>这里有必要介绍执行数据插入的具体实现过程，我们以 insertHealthRecord 方法为例进行展开：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insertHealthRecord</span><span style="color:#E1E4E8;">(HealthRecord healthRecord, Connection connection) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (PreparedStatement preparedStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(sql_health_record_insert, Statement.RETURN_GENERATED_KEYS)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, healthRecord.</span><span style="color:#B392F0;">getUserId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            preparedStatement.</span><span style="color:#B392F0;">setLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, healthRecord.</span><span style="color:#B392F0;">getLevelId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">            preparedStatement.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Remark&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> healthRecord.</span><span style="color:#B392F0;">getUserId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            preparedStatement.</span><span style="color:#B392F0;">executeUpdate</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (ResultSet resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preparedStatement.</span><span style="color:#B392F0;">getGeneratedKeys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resultSet.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  healthRecord.</span><span style="color:#B392F0;">setRecordId</span><span style="color:#E1E4E8;">(resultSet.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insertHealthRecord</span><span style="color:#24292E;">(HealthRecord healthRecord, Connection connection) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (PreparedStatement preparedStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(sql_health_record_insert, Statement.RETURN_GENERATED_KEYS)) {</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, healthRecord.</span><span style="color:#6F42C1;">getUserId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            preparedStatement.</span><span style="color:#6F42C1;">setLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, healthRecord.</span><span style="color:#6F42C1;">getLevelId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;">            preparedStatement.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Remark&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> healthRecord.</span><span style="color:#6F42C1;">getUserId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            preparedStatement.</span><span style="color:#6F42C1;">executeUpdate</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (ResultSet resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preparedStatement.</span><span style="color:#6F42C1;">getGeneratedKeys</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resultSet.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                  healthRecord.</span><span style="color:#6F42C1;">setRecordId</span><span style="color:#24292E;">(resultSet.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>首先通过 Connection 对象构建一个 PreparedStatement。请注意，<strong>由于我们需要通过 ShardingSphere 的主键自动生成机制，所以在创建 PreparedStatement 时需要进行特殊地设置：</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">connection.</span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(sql_health_record_insert, Statement.RETURN_GENERATED_KEYS)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">connection.</span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(sql_health_record_insert, Statement.RETURN_GENERATED_KEYS)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过这种方式，在 PreparedStatement 完成 SQL 执行之后，我们就可以获取自动生成的主键值：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (ResultSet resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preparedStatement.</span><span style="color:#B392F0;">getGeneratedKeys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resultSet.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          healthRecord.</span><span style="color:#B392F0;">setRecordId</span><span style="color:#E1E4E8;">(resultSet.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (ResultSet resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preparedStatement.</span><span style="color:#6F42C1;">getGeneratedKeys</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resultSet.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">          healthRecord.</span><span style="color:#6F42C1;">setRecordId</span><span style="color:#24292E;">(resultSet.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当获取这个主键值之后，就将这个主键值设置回 HealthRecord，这是使用自动生成主键的常见做法。</p><p>最后，我们在事务方法的入口处，需要设置 TransactionType：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processWithXA</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       TransactionTypeHolder.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(TransactionType.XA);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">insertHealthRecords</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processWithXA</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">       TransactionTypeHolder.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(TransactionType.XA);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">insertHealthRecords</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>现在让我们执行这个 processWithXA 方法，看看数据是否已经按照分库的配置写入到目标数据库表中。下面是 ds0 中的 health_record 表和 health_task 表：</p><p><img src="https://s0.lgstatic.com/i/image/M00/31/1C/Ciqc1F8MB4yADpvNAAAn7gHRWyw024.png" alt="Drawing 2.png"><br> ds0 中的 health_record 表</p><p><img src="https://s0.lgstatic.com/i/image/M00/31/1C/Ciqc1F8MCEuAUA1NAAAuoAPD9w4209.png" alt="Drawing 3.png"><br> ds0 中的 health_task 表</p><p>下面则是 ds1 中的 health\\_record 表和 health\\_task 表：<br><img src="https://s0.lgstatic.com/i/image/M00/31/27/CgqCHl8MB6SAOFIhAAAoGKuCLOw688.png" alt="Drawing 4.png"><br> ds1 中的 health_record 表</p><p><img src="https://s0.lgstatic.com/i/image/M00/31/1C/Ciqc1F8MCFiAH4szAAAvGNmTj1Y923.png" alt="Drawing 5.png"><br> ds1 中的 health_task 表</p><p>我们也可以通过控制台日志来跟踪具体的 SQL 执行过程：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">2020-06-01 20:11:52.043  INFO 10720 --- [           main] ShardingSphere-SQL                       : Rule Type: sharding</span></span>
<span class="line"><span style="color:#E1E4E8;">2020-06-01 20:11:52.043  INFO 10720 --- [           main] ShardingSphere-SQL                       : Logic SQL: INSERT INTO health_record (user_id, level_id, remark) VALUES (?, ?, ?)</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">2020-06-01 20:11:52.043  INFO 10720 --- [           main] ShardingSphere-SQL                       : Actual SQL: ds1 ::: INSERT INTO health_record (user_id, level_id, remark, record_id) VALUES (?, ?, ?, ?) ::: [1, 1, Remark1, 474308304135393280]</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">2020-06-01 20:11:52.043  INFO 10720 --- [           main] ShardingSphere-SQL                       : Rule Type: sharding</span></span>
<span class="line"><span style="color:#24292E;">2020-06-01 20:11:52.043  INFO 10720 --- [           main] ShardingSphere-SQL                       : Logic SQL: INSERT INTO health_record (user_id, level_id, remark) VALUES (?, ?, ?)</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">2020-06-01 20:11:52.043  INFO 10720 --- [           main] ShardingSphere-SQL                       : Actual SQL: ds1 ::: INSERT INTO health_record (user_id, level_id, remark, record_id) VALUES (?, ?, ?, ?) ::: [1, 1, Remark1, 474308304135393280]</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>现在，让我们模拟事务失败的场景，可以在代码执行过程中故意抛出一个异常来做到这一点：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Long i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                HealthRecord healthRecord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createHealthRecord</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#B392F0;">insertHealthRecord</span><span style="color:#E1E4E8;">(healthRecord, connection);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">             HealthTask healthTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createHealthTask</span><span style="color:#E1E4E8;">(i, healthRecord);</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">insertHealthTask</span><span style="color:#E1E4E8;">(healthTask, connection);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">              result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(healthRecord.</span><span style="color:#B392F0;">getRecordId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//手工抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;数据库执行异常!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">             connection.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">             connection.</span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Long i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                HealthRecord healthRecord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createHealthRecord</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6F42C1;">insertHealthRecord</span><span style="color:#24292E;">(healthRecord, connection);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">             HealthTask healthTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createHealthTask</span><span style="color:#24292E;">(i, healthRecord);</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">insertHealthTask</span><span style="color:#24292E;">(healthTask, connection);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">              result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(healthRecord.</span><span style="color:#6F42C1;">getRecordId</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//手工抛出异常</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;数据库执行异常!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">             connection.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">             connection.</span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>再次执行 processWithXA 方法，基于 connection 提供的 rollback 方法，我们发现已经执行的部分 SQL 并没有提交到任何一个数据库中。</p><h3 id="使用-base-事务" tabindex="-1">使用 BASE 事务 <a class="header-anchor" href="#使用-base-事务" aria-label="Permalink to &quot;使用 BASE 事务&quot;">​</a></h3><p>相较于 XA 事务，在业务代码中集成 BASE 事务的过程就显得相对复杂一点，因为我们需要借助外部框架来做到这一点。这里，我们将基于阿里巴巴提供的 Seata 框架来演示如何使用 BASE 事务。</p><h4 id="开发环境准备-1" tabindex="-1">开发环境准备 <a class="header-anchor" href="#开发环境准备-1" aria-label="Permalink to &quot;开发环境准备&quot;">​</a></h4><p>同样，要想使用基于 Seata 的 BASE 事务，我们首先需要在 pom 文件中添加对 sharding-jdbc-core 和 sharding-transaction-base-seata-at 这两个依赖：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sharding-jdbc-core&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sharding-transaction-base-seata-at&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sharding-jdbc-core&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sharding-transaction-base-seata-at&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>因为用到了 Seata 框架，所以也需要引入 Seate 框架的相关组件：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.seata&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;seata-rm-datasource&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.seata&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;seata-tm&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.seata&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;seata-codec-all&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.seata&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;seata-rm-datasource&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.seata&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;seata-tm&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.seata&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;seata-codec-all&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>然后，我们下载并启动 Seata 服务器，这个过程需要设置 Seata 服务器 config 目录下的 registry.conf，以便指定注册中心，这里使用 ZooKeeper 来充当注册中心。关于如何启动 Seata 服务器的过程可以参考 Seata 的官方文档。请注意，按照 Seata 的运行要求，我们需要在每一个分片数据库实例中创建一张 undo_log 表。然后，我们还需要在代码工程中 classpath 中增加一个 seata.conf 配置文件：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">client {</span></span>
<span class="line"><span style="color:#E1E4E8;">    application.id = health-base</span></span>
<span class="line"><span style="color:#E1E4E8;">    transaction.service.group = health-base-group</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">client {</span></span>
<span class="line"><span style="color:#24292E;">    application.id = health-base</span></span>
<span class="line"><span style="color:#24292E;">    transaction.service.group = health-base-group</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在，在 src/main/resources 目录下的文件组织形式应该是这样：</p><p><img src="https://s0.lgstatic.com/i/image/M00/31/1C/Ciqc1F8MB7aAL-kkAAAU1FYPsK0495.png" alt="Drawing 6.png"></p><p>当然，这里我们还是继续沿用前面介绍的分库配置。</p><h3 id="实现-base-事务" tabindex="-1">实现 BASE 事务 <a class="header-anchor" href="#实现-base-事务" aria-label="Permalink to &quot;实现 BASE 事务&quot;">​</a></h3><p>基于 ShardingSphere 提供的分布式事务的抽象，我们从 XA 事务转到 BASE 事务唯一要做的事情就是重新设置 TransactionType，也就是修改一行代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processWithBASE</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       TransactionTypeHolder.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(TransactionType.BASE);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">insertHealthRecords</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processWithBASE</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">       TransactionTypeHolder.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(TransactionType.BASE);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">insertHealthRecords</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>重新执行测试用例，我们发现在正常提交和异常回滚的场景下，基于 Seata 的分布式事务同样发挥了效果。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>分布式事务是 ShardingSphere 中提供的一大核心功能，也是分布式环境下数据处理所必须要考虑的话题。ShardingSphere 提供了两种处理分布式事务的实现方式，分别是基于强一致性的 XA 事务，以及基于最终一致性的 BASE 事务。今天，我们结合案例对这两种事务的使用方式做了详细的介绍。</p><p>这里给你留一道思考题：当使用 ShardingSphere 时，在业务代码中嵌入分布式事务有哪些开发方式？</p><p>本课时的内容就到这里。在下一课时中，我们将介绍 ShardingSphere 中提供了与数据访问安全性相关的一个话题，也就是通过数据脱敏完成对敏感数据的安全访问。</p>`,82),o=[e];function r(t,c,E,y,i,d){return n(),a("div",null,o)}const u=s(l,[["render",r]]);export{b as __pageData,u as default};
