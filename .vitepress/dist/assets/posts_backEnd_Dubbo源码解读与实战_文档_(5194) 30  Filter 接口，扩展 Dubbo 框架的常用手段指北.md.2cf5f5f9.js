import{_ as o,j as e,o as t,h as c,k as l,f as n,s,Q as p}from"./chunks/framework.d3daa342.js";const B=JSON.parse('{"title":"30Filter接口，扩展Dubbo框架的常用手段指北","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5194) 30  Filter 接口，扩展 Dubbo 框架的常用手段指北.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5194) 30  Filter 接口，扩展 Dubbo 框架的常用手段指北.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(5194) 30  Filter 接口，扩展 Dubbo 框架的常用手段指北.md"},E=s("h1",{id:"_30filter接口-扩展dubbo框架的常用手段指北",tabindex:"-1"},[n("30Filter接口，扩展Dubbo框架的常用手段指北 "),s("a",{class:"header-anchor",href:"#_30filter接口-扩展dubbo框架的常用手段指北","aria-label":'Permalink to "30Filter接口，扩展Dubbo框架的常用手段指北"'},"​")],-1),y=s("p",null,"在前面的第 27 课时中，我们介绍了 ProtocolFilterWrapper 的具体实现，这里简单回顾一下。在 buildInvokerChain() 方法中，ProtocolFilterWrapper 会加载 Dubbo 以及应用程序提供的 Filter 实现类，然后构造成 Filter 链，最后通过装饰者模式在原有 Invoker 对象基础上添加执行 Filter 链的逻辑。",-1),i=s("p",null,'Filter 链的组装逻辑设计得非常灵活，其中可以通过"-"配置手动剔除 Dubbo 原生提供的、默认加载的 Filter，通过"default"来代替 Dubbo 原生提供的 Filter，这样就可以很好地控制哪些 Filter 要加载，以及 Filter 的真正执行顺序。',-1),F=s("p",null,[s("strong",null,"Filter 是扩展 Dubbo 功能的首选方案"),n("，并且 Dubbo 自身也提供了非常多的 Filter 实现来扩展自身功能。在回顾了 ProtocolFilterWrapper 加载 Filter 的大致逻辑之后，我们本课时就来深入介绍 Dubbo 内置的多种 Filter 实现类，以及自定义 Filter 扩展 Dubbo 的方式。")],-1),g=s("p",null,"在开始介绍 Filter 接口实现之前，我们需要了解一下 Filter 在 Dubbo 架构中的位置，这样才能明确 Filter 链处理请求/响应的位置，如下图红框所示：",-1),A=p(`<p>Filter 在 Dubbo 架构中的位置</p><h3 id="consumercontextfilter" tabindex="-1">ConsumerContextFilter <a class="header-anchor" href="#consumercontextfilter" aria-label="Permalink to &quot;ConsumerContextFilter&quot;">​</a></h3><p>ConsumerContextFilter 是一个非常简单的 Consumer 端 Filter 实现，它会在当前的 RpcContext 中记录本地调用的一些状态信息（会记录到 LOCAL 对应的 RpcContext 中），例如，调用相关的 Invoker、Invocation 以及调用的本地地址、远端地址信息，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">setInvoker</span><span style="color:#E1E4E8;">(invoker) </span><span style="color:#6A737D;">// 记录Invoker</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setInvocation</span><span style="color:#E1E4E8;">(invocation) </span><span style="color:#6A737D;">// 记录Invocation</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 记录本地地址以及远端地址</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setLocalAddress</span><span style="color:#E1E4E8;">(NetUtils.</span><span style="color:#B392F0;">getLocalHost</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setRemoteAddress</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">(), invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 记录远端应用名称等信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setRemoteApplicationName</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                 .</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(REMOTE_APPLICATION_KEY))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setAttachment</span><span style="color:#E1E4E8;">(REMOTE_APPLICATION_KEY, invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(APPLICATION_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (invocation </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> RpcInvocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((RpcInvocation) invocation).</span><span style="color:#B392F0;">setInvoker</span><span style="color:#E1E4E8;">(invoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测是否超时</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object countDown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(TIME_COUNTDOWN_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (countDown </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TimeoutCountDown timeoutCountDown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (TimeoutCountDown) countDown;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (timeoutCountDown.</span><span style="color:#B392F0;">isExpired</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> AsyncRpcResult.</span><span style="color:#B392F0;">newDefaultAsyncResult</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;....&quot;</span><span style="color:#E1E4E8;">), invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    RpcContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">setInvoker</span><span style="color:#24292E;">(invoker) </span><span style="color:#6A737D;">// 记录Invoker</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setInvocation</span><span style="color:#24292E;">(invocation) </span><span style="color:#6A737D;">// 记录Invocation</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 记录本地地址以及远端地址</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setLocalAddress</span><span style="color:#24292E;">(NetUtils.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setRemoteAddress</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">(), invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 记录远端应用名称等信息</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setRemoteApplicationName</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                 .</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(REMOTE_APPLICATION_KEY))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setAttachment</span><span style="color:#24292E;">(REMOTE_APPLICATION_KEY, invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(APPLICATION_KEY));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (invocation </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> RpcInvocation) {</span></span>
<span class="line"><span style="color:#24292E;">        ((RpcInvocation) invocation).</span><span style="color:#6F42C1;">setInvoker</span><span style="color:#24292E;">(invoker);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测是否超时</span></span>
<span class="line"><span style="color:#24292E;">    Object countDown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(TIME_COUNTDOWN_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (countDown </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        TimeoutCountDown timeoutCountDown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TimeoutCountDown) countDown;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timeoutCountDown.</span><span style="color:#6F42C1;">isExpired</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> AsyncRpcResult.</span><span style="color:#6F42C1;">newDefaultAsyncResult</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;....&quot;</span><span style="color:#24292E;">), invocation);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里使用的 TimeoutCountDown 对象用于检测当前调用是否超时，其中有三个字段。</p><ul><li><p>timeoutInMillis（long 类型）：超时时间，单位为毫秒。</p></li><li><p>deadlineInNanos（long 类型）：超时的时间戳，单位为纳秒。</p></li><li><p>expired（boolean 类型）：标识当前 TimeoutCountDown 关联的调用是否已超时。</p></li></ul><p>在 TimeoutCountDown.isExpire() 方法中，会比较当前时间与 deadlineInNanos 字段记录的超时时间戳。正如上面看到的逻辑，如果请求超时，则不再发起远程调用，直接让 AsyncRpcResult 异常结束。</p><h3 id="activelimitfilter" tabindex="-1">ActiveLimitFilter <a class="header-anchor" href="#activelimitfilter" aria-label="Permalink to &quot;ActiveLimitFilter&quot;">​</a></h3><p>ActiveLimitFilter 是 Consumer 端用于限制一个 Consumer 对于一个服务端方法的并发调用量，也可以称为&quot;客户端限流&quot;。下面我们就来看下 ActiveLimitFilter 的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 获得url对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">// 获得方法名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取最大并发数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethodParameter</span><span style="color:#E1E4E8;">(methodName, ACTIVES_KEY, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取该方法的状态信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RpcStatus rpcStatus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcStatus.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), invocation.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">RpcStatus.</span><span style="color:#B392F0;">beginCount</span><span style="color:#E1E4E8;">(url, methodName, max)) { </span><span style="color:#6A737D;">// 尝试并发度加一</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethodParameter</span><span style="color:#E1E4E8;">(invocation.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">(), TIMEOUT_KEY, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> remain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeout;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (rpcStatus) { </span><span style="color:#6A737D;">// 加锁</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">RpcStatus.</span><span style="color:#B392F0;">beginCount</span><span style="color:#E1E4E8;">(url, methodName, max)) { </span><span style="color:#6A737D;">// 再次尝试并发度加一</span></span>
<span class="line"><span style="color:#E1E4E8;">                rpcStatus.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">(remain); </span><span style="color:#6A737D;">// 当前线程阻塞，等待并发度降低</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 检测是否超时</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> elapsed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start;</span></span>
<span class="line"><span style="color:#E1E4E8;">                remain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> elapsed;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (remain </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcException</span><span style="color:#E1E4E8;">(...);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加一个attribute</span></span>
<span class="line"><span style="color:#E1E4E8;">    invocation.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ACTIVELIMIT_FILTER_START_TIME, System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 获得url对象</span></span>
<span class="line"><span style="color:#24292E;">    String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">// 获得方法名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取最大并发数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethodParameter</span><span style="color:#24292E;">(methodName, ACTIVES_KEY, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取该方法的状态信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RpcStatus rpcStatus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcStatus.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), invocation.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">RpcStatus.</span><span style="color:#6F42C1;">beginCount</span><span style="color:#24292E;">(url, methodName, max)) { </span><span style="color:#6A737D;">// 尝试并发度加一</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethodParameter</span><span style="color:#24292E;">(invocation.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">(), TIMEOUT_KEY, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> remain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeout;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (rpcStatus) { </span><span style="color:#6A737D;">// 加锁</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">RpcStatus.</span><span style="color:#6F42C1;">beginCount</span><span style="color:#24292E;">(url, methodName, max)) { </span><span style="color:#6A737D;">// 再次尝试并发度加一</span></span>
<span class="line"><span style="color:#24292E;">                rpcStatus.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">(remain); </span><span style="color:#6A737D;">// 当前线程阻塞，等待并发度降低</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 检测是否超时</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> elapsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start;</span></span>
<span class="line"><span style="color:#24292E;">                remain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> elapsed;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (remain </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcException</span><span style="color:#24292E;">(...);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加一个attribute</span></span>
<span class="line"><span style="color:#24292E;">    invocation.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ACTIVELIMIT_FILTER_START_TIME, System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 ActiveLimitFilter.invoke() 方法的代码中可以看到，其核心实现与 RpcStatus 对象密切相关。RpcStatus 中维护了两个集合，分别是：</p><ul><li><p>SERVICE_STATISTICS 集合（ConcurrentMap&lt;String, RpcStatus&gt; 类型），这个集合记录了当前 Consumer 调用每个服务的状态信息，其中 Key 是 URL，Value 是对应的 RpcStatus 对象；</p></li><li><p>METHOD_STATISTICS 集合（ConcurrentMap&lt;String, ConcurrentMap&lt;String, RpcStatus&gt;&gt; 类型），这个集合记录了当前 Consumer 调用每个服务方法的状态信息，其中第一层 Key 是 URL ，第二层 Key 是方法名称，第三层是对应的 RpcStatus 对象。</p></li></ul><p>RpcStatus 中统计了很多调用相关的信息，核心字段有如下几个。</p><ul><li><p>active（AtomicInteger 类型）：当前并发度。这也是 ActiveLimitFilter 中关注的并发度。</p></li><li><p>total（AtomicLong 类型）：调用的总数。</p></li><li><p>failed（AtomicInteger 类型）：失败的调用数。</p></li><li><p>totalElapsed（AtomicLong 类型）：所有调用的总耗时。</p></li><li><p>failedElapsed（AtomicLong 类型）：所有失败调用的总耗时。</p></li><li><p>maxElapsed（AtomicLong 类型）：所有调用中最长的耗时。</p></li><li><p>failedMaxElapsed（AtomicLong 类型）：所有失败调用中最长的耗时。</p></li><li><p>succeededMaxElapsed（AtomicLong 类型）：所有成功调用中最长的耗时。</p></li></ul><p>另外，RpcStatus 提供了上述字段的 getter/setter 方法，用于读写这些字段值，这里不再展开分析。</p><p>RpcStatus 中的 beginCount() 方法会在远程调用开始之前执行，其中会从 SERVICE_STATISTICS 集合和 METHOD_STATISTICS 集合中获取服务和服务方法对应的 RpcStatus 对象，然后分别将它们的 active 字段加一，相关实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beginCount</span><span style="color:#E1E4E8;">(URL url, String methodName, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> max) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (max </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Integer.MAX_VALUE </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> max;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取服务对应的RpcStatus对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcStatus appStatus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">(url); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取服务方法对应的RpcStatus对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcStatus methodStatus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">(url, methodName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (methodStatus.active.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Integer.MAX_VALUE) { </span><span style="color:#6A737D;">// 并发度溢出</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i; ; ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> methodStatus.active.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> max) { </span><span style="color:#6A737D;">// 并发度超过max上限，直接返回false</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (methodStatus.active.</span><span style="color:#B392F0;">compareAndSet</span><span style="color:#E1E4E8;">(i, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) { </span><span style="color:#6A737D;">// CAS操作</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 更新成功后退出当前循环</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    appStatus.active.</span><span style="color:#B392F0;">incrementAndGet</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 单个服务的并发度加一</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beginCount</span><span style="color:#24292E;">(URL url, String methodName, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> max) {</span></span>
<span class="line"><span style="color:#24292E;">    max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (max </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Integer.MAX_VALUE </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> max;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取服务对应的RpcStatus对象</span></span>
<span class="line"><span style="color:#24292E;">    RpcStatus appStatus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">(url); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取服务方法对应的RpcStatus对象</span></span>
<span class="line"><span style="color:#24292E;">    RpcStatus methodStatus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">(url, methodName);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (methodStatus.active.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Integer.MAX_VALUE) { </span><span style="color:#6A737D;">// 并发度溢出</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i; ; ) {</span></span>
<span class="line"><span style="color:#24292E;">        i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> methodStatus.active.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> max) { </span><span style="color:#6A737D;">// 并发度超过max上限，直接返回false</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (methodStatus.active.</span><span style="color:#6F42C1;">compareAndSet</span><span style="color:#24292E;">(i, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) { </span><span style="color:#6A737D;">// CAS操作</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 更新成功后退出当前循环</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    appStatus.active.</span><span style="color:#6F42C1;">incrementAndGet</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 单个服务的并发度加一</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ActiveLimitFilter 在继承 Filter 接口的同时，还继承了 Filter.Listener 这个内部接口，在其 onResponse() 方法的实现中，不仅会调用 RpcStatus.endCount() 方法完成调用监控的统计，还会调用 notifyFinish() 方法唤醒阻塞在对应 RpcStatus 对象上的线程，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onResponse</span><span style="color:#E1E4E8;">(Result appResponse, Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取调用的方法名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethodParameter</span><span style="color:#E1E4E8;">(methodName, ACTIVES_KEY, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 RpcStatus.endCount() 方法完成调用监控的统计</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcStatus.</span><span style="color:#B392F0;">endCount</span><span style="color:#E1E4E8;">(url, methodName, </span><span style="color:#B392F0;">getElapsed</span><span style="color:#E1E4E8;">(invocation), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 notifyFinish() 方法唤醒阻塞在对应 RpcStatus 对象上的线程</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">notifyFinish</span><span style="color:#E1E4E8;">(RpcStatus.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">(url, methodName), max);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onResponse</span><span style="color:#24292E;">(Result appResponse, Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) {</span></span>
<span class="line"><span style="color:#24292E;">    String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取调用的方法名称</span></span>
<span class="line"><span style="color:#24292E;">    URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethodParameter</span><span style="color:#24292E;">(methodName, ACTIVES_KEY, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 RpcStatus.endCount() 方法完成调用监控的统计</span></span>
<span class="line"><span style="color:#24292E;">    RpcStatus.</span><span style="color:#6F42C1;">endCount</span><span style="color:#24292E;">(url, methodName, </span><span style="color:#6F42C1;">getElapsed</span><span style="color:#24292E;">(invocation), </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 notifyFinish() 方法唤醒阻塞在对应 RpcStatus 对象上的线程</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">notifyFinish</span><span style="color:#24292E;">(RpcStatus.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">(url, methodName), max);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 RpcStatus.endCount() 方法中，会对服务和服务方法两个维度的 RpcStatus 中的所有字段进行更新，完成统计：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">endCount</span><span style="color:#E1E4E8;">(RpcStatus status, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> elapsed, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> succeeded) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    status.active.</span><span style="color:#B392F0;">decrementAndGet</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 请求完成，降低并发度</span></span>
<span class="line"><span style="color:#E1E4E8;">    status.total.</span><span style="color:#B392F0;">incrementAndGet</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 调用总次数增加</span></span>
<span class="line"><span style="color:#E1E4E8;">    status.totalElapsed.</span><span style="color:#B392F0;">addAndGet</span><span style="color:#E1E4E8;">(elapsed); </span><span style="color:#6A737D;">// 调用总耗时增加</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.maxElapsed.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> elapsed) { </span><span style="color:#6A737D;">// 更新最大耗时</span></span>
<span class="line"><span style="color:#E1E4E8;">        status.maxElapsed.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(elapsed);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (succeeded) { </span><span style="color:#6A737D;">// 如果此次调用成功，则会更新成功调用的最大耗时</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.succeededMaxElapsed.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> elapsed) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            status.succeededMaxElapsed.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(elapsed);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 如果此次调用失败，则会更新失败调用的最大耗时</span></span>
<span class="line"><span style="color:#E1E4E8;">        status.failed.</span><span style="color:#B392F0;">incrementAndGet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        status.failedElapsed.</span><span style="color:#B392F0;">addAndGet</span><span style="color:#E1E4E8;">(elapsed);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.failedMaxElapsed.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> elapsed) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            status.failedMaxElapsed.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(elapsed);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">endCount</span><span style="color:#24292E;">(RpcStatus status, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> elapsed, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> succeeded) {</span></span>
<span class="line"><span style="color:#24292E;">    status.active.</span><span style="color:#6F42C1;">decrementAndGet</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 请求完成，降低并发度</span></span>
<span class="line"><span style="color:#24292E;">    status.total.</span><span style="color:#6F42C1;">incrementAndGet</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 调用总次数增加</span></span>
<span class="line"><span style="color:#24292E;">    status.totalElapsed.</span><span style="color:#6F42C1;">addAndGet</span><span style="color:#24292E;">(elapsed); </span><span style="color:#6A737D;">// 调用总耗时增加</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.maxElapsed.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> elapsed) { </span><span style="color:#6A737D;">// 更新最大耗时</span></span>
<span class="line"><span style="color:#24292E;">        status.maxElapsed.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(elapsed);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (succeeded) { </span><span style="color:#6A737D;">// 如果此次调用成功，则会更新成功调用的最大耗时</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.succeededMaxElapsed.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> elapsed) {</span></span>
<span class="line"><span style="color:#24292E;">            status.succeededMaxElapsed.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(elapsed);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果此次调用失败，则会更新失败调用的最大耗时</span></span>
<span class="line"><span style="color:#24292E;">        status.failed.</span><span style="color:#6F42C1;">incrementAndGet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        status.failedElapsed.</span><span style="color:#6F42C1;">addAndGet</span><span style="color:#24292E;">(elapsed);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.failedMaxElapsed.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> elapsed) {</span></span>
<span class="line"><span style="color:#24292E;">            status.failedMaxElapsed.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(elapsed);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="contextfilter" tabindex="-1">ContextFilter <a class="header-anchor" href="#contextfilter" aria-label="Permalink to &quot;ContextFilter&quot;">​</a></h3><p>在前面第 26 课时介绍 AbstractInvoker 的时候，我们提到其 invoke() 方法中有如下一段逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; contextAttachments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmptyMap</span><span style="color:#E1E4E8;">(contextAttachments)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    invocation.</span><span style="color:#B392F0;">addObjectAttachments</span><span style="color:#E1E4E8;">(contextAttachments);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; contextAttachments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmptyMap</span><span style="color:#24292E;">(contextAttachments)) {</span></span>
<span class="line"><span style="color:#24292E;">    invocation.</span><span style="color:#6F42C1;">addObjectAttachments</span><span style="color:#24292E;">(contextAttachments);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里将 RpcContext 中的附加信息添加到 Invocation 中，一并传递到 Provider 端。那在 Provider 端是如何获取 Invocation 中的附加信息，并设置到 RpcContext 中的呢？</p><p><strong>ContextFilter 是 Provider 端的一个 Filter 实现，它主要用来初始化 Provider 端的 RpcContext。</strong> ContextFilter 首先会从 Invocation 中获取 Attachments 集合，并对该集合中的 Key 进行过滤，其中会将 UNLOADING_KEYS 集合中的全部 Key 过滤掉；之后会初始化 RpcContext 以及 Invocation 的各项信息，例如，Invocation、Attachments、localAddress、remoteApplication、超时时间等；最后调用 Invoker.invoke() 方法执行 Provider 的业务逻辑。ContextFilter.Invoke() 方法的具体逻辑如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; attachments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ... </span><span style="color:#6A737D;">// 省略过滤UNLOADING_KEYS集合的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取RpcContext</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">setInvoker</span><span style="color:#E1E4E8;">(invoker) </span><span style="color:#6A737D;">// 设置RpcContext中的信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setInvocation</span><span style="color:#E1E4E8;">(invocation)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setLocalAddress</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">                invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    String remoteApplication </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String) invocation.</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(REMOTE_APPLICATION_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(remoteApplication)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">setRemoteApplicationName</span><span style="color:#E1E4E8;">(remoteApplication);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">setRemoteApplicationName</span><span style="color:#E1E4E8;">((String) context.</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(REMOTE_APPLICATION_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcUtils.</span><span style="color:#B392F0;">getTimeout</span><span style="color:#E1E4E8;">(invocation, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (timeout </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 设置超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(TIME_COUNTDOWN_KEY, TimeoutCountDown.</span><span style="color:#B392F0;">newCountDown</span><span style="color:#E1E4E8;">(timeout, TimeUnit.MILLISECONDS));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (attachments </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 向RpcContext中设置Attachments</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context.</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            context.</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(attachments);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            context.</span><span style="color:#B392F0;">setObjectAttachments</span><span style="color:#E1E4E8;">(attachments);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (invocation </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> RpcInvocation) { </span><span style="color:#6A737D;">// 向Invocation设置Invoker</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((RpcInvocation) invocation).</span><span style="color:#B392F0;">setInvoker</span><span style="color:#E1E4E8;">(invoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在整个调用过程中，需要保持当前RpcContext不被删除，这里会将remove开关关掉，这样，removeContext()方法不会删除LOCAL RpcContext了</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">clearAfterEachInvoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 重置remove开关</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">clearAfterEachInvoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 清理RpcContext，当前线程处理下一个调用的时候，会创建新的RpcContext</span></span>
<span class="line"><span style="color:#E1E4E8;">        RpcContext.</span><span style="color:#B392F0;">removeContext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        RpcContext.</span><span style="color:#B392F0;">removeServerContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; attachments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ... ... </span><span style="color:#6A737D;">// 省略过滤UNLOADING_KEYS集合的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    RpcContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取RpcContext</span></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">setInvoker</span><span style="color:#24292E;">(invoker) </span><span style="color:#6A737D;">// 设置RpcContext中的信息</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setInvocation</span><span style="color:#24292E;">(invocation)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setLocalAddress</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">                invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    String remoteApplication </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String) invocation.</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(REMOTE_APPLICATION_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(remoteApplication)) {</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">setRemoteApplicationName</span><span style="color:#24292E;">(remoteApplication);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">setRemoteApplicationName</span><span style="color:#24292E;">((String) context.</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(REMOTE_APPLICATION_KEY));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcUtils.</span><span style="color:#6F42C1;">getTimeout</span><span style="color:#24292E;">(invocation, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timeout </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 设置超时时间</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(TIME_COUNTDOWN_KEY, TimeoutCountDown.</span><span style="color:#6F42C1;">newCountDown</span><span style="color:#24292E;">(timeout, TimeUnit.MILLISECONDS));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (attachments </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 向RpcContext中设置Attachments</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context.</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            context.</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(attachments);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            context.</span><span style="color:#6F42C1;">setObjectAttachments</span><span style="color:#24292E;">(attachments);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (invocation </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> RpcInvocation) { </span><span style="color:#6A737D;">// 向Invocation设置Invoker</span></span>
<span class="line"><span style="color:#24292E;">        ((RpcInvocation) invocation).</span><span style="color:#6F42C1;">setInvoker</span><span style="color:#24292E;">(invoker);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在整个调用过程中，需要保持当前RpcContext不被删除，这里会将remove开关关掉，这样，removeContext()方法不会删除LOCAL RpcContext了</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">clearAfterEachInvoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重置remove开关</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">clearAfterEachInvoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 清理RpcContext，当前线程处理下一个调用的时候，会创建新的RpcContext</span></span>
<span class="line"><span style="color:#24292E;">        RpcContext.</span><span style="color:#6F42C1;">removeContext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        RpcContext.</span><span style="color:#6F42C1;">removeServerContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ContextFilter 继承了 Filter 接口的同时，还继承了 Filter.Listener 这个内部接口。在 ContextFilter.onResponse() 方法中，会将 SERVER_LOCAL 这个 RpcContext 中的附加信息添加到 AppResponse 的 attachments 字段中，返回给 Consumer。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onResponse</span><span style="color:#E1E4E8;">(Result appResponse, Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">appResponse.</span><span style="color:#B392F0;">addObjectAttachments</span><span style="color:#E1E4E8;">(RpcContext.</span><span style="color:#B392F0;">getServerContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onResponse</span><span style="color:#24292E;">(Result appResponse, Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) {</span></span>
<span class="line"><span style="color:#24292E;">appResponse.</span><span style="color:#6F42C1;">addObjectAttachments</span><span style="color:#24292E;">(RpcContext.</span><span style="color:#6F42C1;">getServerContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="accesslogfilter" tabindex="-1">AccessLogFilter <a class="header-anchor" href="#accesslogfilter" aria-label="Permalink to &quot;AccessLogFilter&quot;">​</a></h3><p>AccessLogFilter 主要用于记录日志，它的主要功能是将 Provider 或者 Consumer 的日志信息写入文件中。AccessLogFilter 会先将日志消息放入内存日志集合中缓存，当缓存大小超过一定阈值之后，会触发日志的写入。若长时间未触发日志文件写入，则由定时任务定时写入。</p><p>AccessLogFilter.invoke() 方法的核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation inv) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String accessLogKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(ACCESS_LOG_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ConfigUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(accessLogKey)) { </span><span style="color:#6A737D;">// 获取ACCESS_LOG_KEY</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 构造AccessLogData对象，其中记录了日志信息，例如，调用的服务名称、方法名称、version等</span></span>
<span class="line"><span style="color:#E1E4E8;">        AccessLogData logData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildAccessLogData</span><span style="color:#E1E4E8;">(invoker, inv);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(accessLogKey, logData);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用下一个Invoker</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(inv);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation inv) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    String accessLogKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(ACCESS_LOG_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ConfigUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(accessLogKey)) { </span><span style="color:#6A737D;">// 获取ACCESS_LOG_KEY</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 构造AccessLogData对象，其中记录了日志信息，例如，调用的服务名称、方法名称、version等</span></span>
<span class="line"><span style="color:#24292E;">        AccessLogData logData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildAccessLogData</span><span style="color:#24292E;">(invoker, inv);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(accessLogKey, logData);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用下一个Invoker</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(inv);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 log() 方法中，会按照 ACCESS_LOG_KEY 的值，找到对应的 AccessLogData 集合，然后完成缓存写入；如果缓存大小超过阈值，则触发文件写入。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(String accessLog, AccessLogData accessLogData) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据ACCESS_LOG_KEY获取对应的缓存集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">AccessLogData</span><span style="color:#E1E4E8;">&gt; logSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LOG_ENTRIES.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(accessLog, k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashSet&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logSet.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> LOG_MAX_BUFFER) { </span><span style="color:#6A737D;">// 缓存大小未超过阈值</span></span>
<span class="line"><span style="color:#E1E4E8;">        logSet.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(accessLogData);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 缓存大小超过阈值，触发缓存数据写入文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">writeLogSetToFile</span><span style="color:#E1E4E8;">(accessLog, logSet);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 完成文件写入之后，再次写入缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        logSet.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(accessLogData);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(String accessLog, AccessLogData accessLogData) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据ACCESS_LOG_KEY获取对应的缓存集合</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">AccessLogData</span><span style="color:#24292E;">&gt; logSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LOG_ENTRIES.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(accessLog, k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashSet&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logSet.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> LOG_MAX_BUFFER) { </span><span style="color:#6A737D;">// 缓存大小未超过阈值</span></span>
<span class="line"><span style="color:#24292E;">        logSet.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(accessLogData);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 缓存大小超过阈值，触发缓存数据写入文件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">writeLogSetToFile</span><span style="color:#24292E;">(accessLog, logSet);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 完成文件写入之后，再次写入缓存</span></span>
<span class="line"><span style="color:#24292E;">        logSet.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(accessLogData);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 writeLogSetToFile() 方法中，会按照 ACCESS_LOG_KEY 的值将日志信息写入不同的日志文件中：</p><ul><li><p>如果 ACCESS_LOG_KEY 配置的值为 true 或 default，会使用 Dubbo 默认提供的统一日志框架，输出到日志文件中；</p></li><li><p>如果 ACCESS_LOG_KEY 配置的值不为 true 或 default，则 ACCESS_LOG_KEY 配置值会被当作 access log 文件的名称，AccessLogFilter 会创建相应的目录和文件，并完成日志的输出。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">writeLogSetToFile</span><span style="color:#E1E4E8;">(String accessLog, Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccessLogData</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> logSet) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ConfigUtils.</span><span style="color:#B392F0;">isDefault</span><span style="color:#E1E4E8;">(accessLog)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ACCESS_LOG_KEY配置值为true或是default</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">processWithServiceLogger</span><span style="color:#E1E4E8;">(logSet);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// ACCESS_LOG_KEY配置既不是true也不是default的时候</span></span>
<span class="line"><span style="color:#E1E4E8;">            File file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(accessLog);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">createIfLogDirAbsent</span><span style="color:#E1E4E8;">(file); </span><span style="color:#6A737D;">// 创建目录</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">renameFile</span><span style="color:#E1E4E8;">(file); </span><span style="color:#6A737D;">// 创建日志文件，这里会以日期为后缀，滚动创建</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 遍历logSet集合，将日志逐条写入文件</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">processWithAccessKeyLogger</span><span style="color:#E1E4E8;">(logSet, file);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">(), e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processWithAccessKeyLogger</span><span style="color:#E1E4E8;">(Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccessLogData</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> logSet, File file) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建FileWriter，写入指定的日志文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (FileWriter writer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(file, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Iterator&lt;</span><span style="color:#F97583;">AccessLogData</span><span style="color:#E1E4E8;">&gt; iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> logSet.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">             iterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">             iterator.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getLogMessage</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;line.separator&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        writer.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">writeLogSetToFile</span><span style="color:#24292E;">(String accessLog, Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccessLogData</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> logSet) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ConfigUtils.</span><span style="color:#6F42C1;">isDefault</span><span style="color:#24292E;">(accessLog)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ACCESS_LOG_KEY配置值为true或是default</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">processWithServiceLogger</span><span style="color:#24292E;">(logSet);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// ACCESS_LOG_KEY配置既不是true也不是default的时候</span></span>
<span class="line"><span style="color:#24292E;">            File file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(accessLog);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">createIfLogDirAbsent</span><span style="color:#24292E;">(file); </span><span style="color:#6A737D;">// 创建目录</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">renameFile</span><span style="color:#24292E;">(file); </span><span style="color:#6A737D;">// 创建日志文件，这里会以日期为后缀，滚动创建</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 遍历logSet集合，将日志逐条写入文件</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">processWithAccessKeyLogger</span><span style="color:#24292E;">(logSet, file);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">(), e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processWithAccessKeyLogger</span><span style="color:#24292E;">(Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccessLogData</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> logSet, File file) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建FileWriter，写入指定的日志文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileWriter writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(file, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Iterator&lt;</span><span style="color:#D73A49;">AccessLogData</span><span style="color:#24292E;">&gt; iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> logSet.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">             iterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">             iterator.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getLogMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;line.separator&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        writer.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 AccessLogFilter 的构造方法中，会启动一个定时任务，定时调用上面介绍的 writeLogSetToFile() 方法，定时写入日志，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 启动一个线程池</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ScheduledExecutorService LOG_SCHEDULED </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newSingleThreadScheduledExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamedThreadFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Dubbo-Access-Log&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 启动一个定时任务，定期执行writeLogSetToFile()方法，完成日志写入</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccessLogFilter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    LOG_SCHEDULED.</span><span style="color:#B392F0;">scheduleWithFixedDelay</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">writeLogToFile, LOG_OUTPUT_INTERVAL, </span></span>
<span class="line"><span style="color:#E1E4E8;">           LOG_OUTPUT_INTERVAL, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 启动一个线程池</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ScheduledExecutorService LOG_SCHEDULED </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newSingleThreadScheduledExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamedThreadFactory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Dubbo-Access-Log&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 启动一个定时任务，定期执行writeLogSetToFile()方法，完成日志写入</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccessLogFilter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    LOG_SCHEDULED.</span><span style="color:#6F42C1;">scheduleWithFixedDelay</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">writeLogToFile, LOG_OUTPUT_INTERVAL, </span></span>
<span class="line"><span style="color:#24292E;">           LOG_OUTPUT_INTERVAL, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为便于你更好地理解这部分内容，下面我们再来看一下 Dubbo 对各种日志框架的支持，在 processWithServiceLogger() 方法中我们可以看到 Dubbo 是通过 LoggerFactory 来支持各种第三方日志框架的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processWithServiceLogger</span><span style="color:#E1E4E8;">(Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccessLogData</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> logSet) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Iterator&lt;</span><span style="color:#F97583;">AccessLogData</span><span style="color:#E1E4E8;">&gt; iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> logSet.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         iterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         iterator.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 遍历logSet集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        AccessLogData logData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过LoggerFactory获取Logger对象，并写入日志</span></span>
<span class="line"><span style="color:#E1E4E8;">        LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(LOG_KEY </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> logData.</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(logData.</span><span style="color:#B392F0;">getLogMessage</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processWithServiceLogger</span><span style="color:#24292E;">(Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccessLogData</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> logSet) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Iterator&lt;</span><span style="color:#D73A49;">AccessLogData</span><span style="color:#24292E;">&gt; iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> logSet.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         iterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         iterator.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 遍历logSet集合</span></span>
<span class="line"><span style="color:#24292E;">        AccessLogData logData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过LoggerFactory获取Logger对象，并写入日志</span></span>
<span class="line"><span style="color:#24292E;">        LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(LOG_KEY </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> logData.</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(logData.</span><span style="color:#6F42C1;">getLogMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 LoggerFactory 中维护了一个 LOGGERS 集合（Map&lt;String, FailsafeLogger&gt; 类型），其中维护了当前使用的全部 FailsafeLogger 对象；FailsafeLogger 对象中封装了一个 Logger 对象，这个 Logger 接口是 Dubbo 自己定义的接口，Dubbo 针对每种第三方框架都提供了一个 Logger 接口的实现，如下图所示：</p>`,43),u=p(`<p>Logger 接口的实现</p><p>FailsafeLogger 是 Logger 对象的装饰器，它在每个 Logger 日志写入操作之外，都添加了 try/catch 异常处理。其他的 Dubbo Logger 实现类则是封装了相应第三方的 Logger 对象，并将日志输出操作委托给第三方的 Logger 对象完成。这里我们以 Log4j2Logger 为例进行简单分析：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log4j2Logger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Logger</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 维护了一个log4j日志框架中的Logger对象，实现了适配器的功能</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> org.apache.logging.log4j.Logger logger;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log4j2Logger</span><span style="color:#E1E4E8;">(org.apache.logging.log4j.Logger </span><span style="color:#FFAB70;">logger</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> logger;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(msg, e); </span><span style="color:#6A737D;">// 直接调用log4j日志框架的Logger写入日志</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略info()方法的其他重载，省略error、trace、warn、debug等方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log4j2Logger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Logger</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 维护了一个log4j日志框架中的Logger对象，实现了适配器的功能</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> org.apache.logging.log4j.Logger logger;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log4j2Logger</span><span style="color:#24292E;">(org.apache.logging.log4j.Logger </span><span style="color:#E36209;">logger</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> logger;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(msg, e); </span><span style="color:#6A737D;">// 直接调用log4j日志框架的Logger写入日志</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略info()方法的其他重载，省略error、trace、warn、debug等方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 LoggerFactory.getLogger() 方法中，是通过其中的 LOGGER_ADAPTER 字段（LoggerAdapter 类型） 获取 Logger 实现对象的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Logger </span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LOGGERS.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(key, k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FailsafeLogger</span><span style="color:#E1E4E8;">(LOGGER_ADAPTER.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(k)));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Logger </span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(String key) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LOGGERS.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(key, k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FailsafeLogger</span><span style="color:#24292E;">(LOGGER_ADAPTER.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(k)));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>LOGGER_ADAPTER 字段在 LoggerFactory.setLogger() 方法中，通过 SPI 机制初始化：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setLoggerAdapter</span><span style="color:#E1E4E8;">(String loggerAdapter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loggerAdapter </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> loggerAdapter.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setLoggerAdapter</span><span style="color:#E1E4E8;">(ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">           LoggerAdapter.class).</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(loggerAdapter));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setLoggerAdapter</span><span style="color:#24292E;">(String loggerAdapter) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loggerAdapter </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> loggerAdapter.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setLoggerAdapter</span><span style="color:#24292E;">(ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">           LoggerAdapter.class).</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(loggerAdapter));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>LoggerAdapter 被 @SPI 注解修饰，是一个扩展接口，如下图所示，LoggerAdapter 对应每个第三方框架的一个相应实现，用于创建相应的 Dubbo Logger 实现对象。</p>`,8),d=p(`<p>LoggerAdapter 接口实现</p><p>以 Log4j2LoggerAdapter 为例，其核心在 getLogger() 方法中，主要是创建 Log4j2Logger 对象，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log4j2LoggerAdapter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoggerAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Logger </span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 创建Log4j2Logger适配器</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log4j2Logger</span><span style="color:#E1E4E8;">(LogManager.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(key));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log4j2LoggerAdapter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoggerAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Logger </span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 创建Log4j2Logger适配器</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log4j2Logger</span><span style="color:#24292E;">(LogManager.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(key));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="classloaderfilter" tabindex="-1">ClassLoaderFilter <a class="header-anchor" href="#classloaderfilter" aria-label="Permalink to &quot;ClassLoaderFilter&quot;">​</a></h3><p>ClassLoaderFilter 是 Provider 端的一个 Filter 实现，主要功能是切换类加载器。</p><p>在 ClassLoaderFilter.invoke() 方法中，首先获取当前线程关联的 contextClassLoader，然后将其 ContextClassLoader 设置为 invoker.getInterface().getClassLoader()，也就是加载服务接口类的类加载器；之后执行 invoker.invoke() 方法，执行后续的 Filter 逻辑以及业务逻辑；最后，将当前线程关联的 contextClassLoader 重置为原来的 contextClassLoader。ClassLoaderFilter 的核心逻辑如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ClassLoader ocl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getContextClassLoader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新当前线程绑定的ClassLoader Thread.currentThread().setContextClassLoader(invoker.getInterface().getClassLoader());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setContextClassLoader</span><span style="color:#E1E4E8;">(ocl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    ClassLoader ocl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getContextClassLoader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新当前线程绑定的ClassLoader Thread.currentThread().setContextClassLoader(invoker.getInterface().getClassLoader());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setContextClassLoader</span><span style="color:#24292E;">(ocl);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="executelimitfilter" tabindex="-1">ExecuteLimitFilter <a class="header-anchor" href="#executelimitfilter" aria-label="Permalink to &quot;ExecuteLimitFilter&quot;">​</a></h3><p><strong>ExecuteLimitFilter 是 Dubbo 在 Provider 端限流的实现</strong>，与 Consumer 端的限流实现 ActiveLimitFilter 相对应。ExecuteLimitFilter 的核心实现与 ActiveLimitFilter类似，也是依赖 RpcStatus 的 beginCount() 方法和 endCount() 方法来实现 RpcStatus.active 字段的增减，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getMethodParameter</span><span style="color:#E1E4E8;">(methodName, EXECUTES_KEY, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 尝试增加active的值，当并发度达到executes配置指定的阈值，则直接抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">RpcStatus.</span><span style="color:#B392F0;">beginCount</span><span style="color:#E1E4E8;">(url, methodName, max)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    invocation.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(EXECUTE_LIMIT_FILTER_START_TIME, System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation); </span><span style="color:#6A737D;">// 执行后续Filter以及业务逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getMethodParameter</span><span style="color:#24292E;">(methodName, EXECUTES_KEY, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 尝试增加active的值，当并发度达到executes配置指定的阈值，则直接抛出异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">RpcStatus.</span><span style="color:#6F42C1;">beginCount</span><span style="color:#24292E;">(url, methodName, max)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    invocation.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(EXECUTE_LIMIT_FILTER_START_TIME, System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation); </span><span style="color:#6A737D;">// 执行后续Filter以及业务逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ExecuteLimitFilter 同时还实现了 Filter 内部的 Listener 接口，在 onResponse() 方法和 onError() 方法中会调用 RpcStatus.endCount() 方法，减小 active 的值，同时完成对一次调用的统计，具体实现比较简单，这里就不再展示。</p><h3 id="timeoutfilter" tabindex="-1">TimeoutFilter <a class="header-anchor" href="#timeoutfilter" aria-label="Permalink to &quot;TimeoutFilter&quot;">​</a></h3><p>在前文介绍 ConsumerContextFilter 的时候可以看到，如果通过 TIME_COUNTDOWN_KEY 在 RpcContext 中配置了 TimeCountDown，就会对 TimeoutCountDown 进行检查，判定此次请求是否超时。然后，在 DubboInvoker 的 doInvoker() 方法实现中可以看到，在发起请求之前会调用 calculateTimeout() 方法确定该请求还有多久过期：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calculateTimeout</span><span style="color:#E1E4E8;">(Invocation invocation, String methodName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object countdown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(TIME_COUNTDOWN_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DEFAULT_TIMEOUT;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (countdown </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// RpcContext中没有指定TIME_COUNTDOWN_KEY，则使用timeout配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取timeout配置指定的超时时长，默认值为1秒</span></span>
<span class="line"><span style="color:#E1E4E8;">        timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) RpcUtils.</span><span style="color:#B392F0;">getTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), methodName, RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(), DEFAULT_TIMEOUT);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(ENABLE_TIMEOUT_COUNTDOWN_KEY, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果开启了ENABLE_TIMEOUT_COUNTDOWN_KEY，则通过TIMEOUT_ATTACHENT_KEY将超时时间传递给Provider端</span></span>
<span class="line"><span style="color:#E1E4E8;">            invocation.</span><span style="color:#B392F0;">setObjectAttachment</span><span style="color:#E1E4E8;">(TIMEOUT_ATTACHENT_KEY, timeout);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 当前RpcContext中已经通过TIME_COUNTDOWN_KEY指定了超时时间，则使用该值作为超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">        TimeoutCountDown timeoutCountDown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (TimeoutCountDown) countdown;</span></span>
<span class="line"><span style="color:#E1E4E8;">        timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) timeoutCountDown.</span><span style="color:#B392F0;">timeRemaining</span><span style="color:#E1E4E8;">(TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将剩余超时时间放入attachment中，传递给Provider端</span></span>
<span class="line"><span style="color:#E1E4E8;">        invocation.</span><span style="color:#B392F0;">setObjectAttachment</span><span style="color:#E1E4E8;">(TIMEOUT_ATTACHENT_KEY, timeout);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> timeout;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calculateTimeout</span><span style="color:#24292E;">(Invocation invocation, String methodName) {</span></span>
<span class="line"><span style="color:#24292E;">    Object countdown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(TIME_COUNTDOWN_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DEFAULT_TIMEOUT;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (countdown </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// RpcContext中没有指定TIME_COUNTDOWN_KEY，则使用timeout配置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取timeout配置指定的超时时长，默认值为1秒</span></span>
<span class="line"><span style="color:#24292E;">        timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) RpcUtils.</span><span style="color:#6F42C1;">getTimeout</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), methodName, RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">(), DEFAULT_TIMEOUT);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(ENABLE_TIMEOUT_COUNTDOWN_KEY, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果开启了ENABLE_TIMEOUT_COUNTDOWN_KEY，则通过TIMEOUT_ATTACHENT_KEY将超时时间传递给Provider端</span></span>
<span class="line"><span style="color:#24292E;">            invocation.</span><span style="color:#6F42C1;">setObjectAttachment</span><span style="color:#24292E;">(TIMEOUT_ATTACHENT_KEY, timeout);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 当前RpcContext中已经通过TIME_COUNTDOWN_KEY指定了超时时间，则使用该值作为超时时间</span></span>
<span class="line"><span style="color:#24292E;">        TimeoutCountDown timeoutCountDown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TimeoutCountDown) countdown;</span></span>
<span class="line"><span style="color:#24292E;">        timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) timeoutCountDown.</span><span style="color:#6F42C1;">timeRemaining</span><span style="color:#24292E;">(TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将剩余超时时间放入attachment中，传递给Provider端</span></span>
<span class="line"><span style="color:#24292E;">        invocation.</span><span style="color:#6F42C1;">setObjectAttachment</span><span style="color:#24292E;">(TIMEOUT_ATTACHENT_KEY, timeout);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> timeout;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当请求到达 Provider 时，ContextFilter 会根据 Invocation 中的 attachment 恢复 RpcContext 的attachment，其中就包含 TIMEOUT_ATTACHENT_KEY（对应的 Value 会恢复成 TimeoutCountDown 对象）。</p><p>TimeoutFilter 是 Provider 端另一个涉及超时时间的 Filter 实现，其 invoke() 方法实现比较简单，直接将请求转发给后续 Filter 处理。在 TimeoutFilter 对 onResponse() 方法的实现中，会从 RpcContext 中读取上述 TimeoutCountDown 对象，并检查此次请求是否超时。如果请求已经超时，则会将 AppResponse 中的结果清空，同时打印一条警告日志，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onResponse</span><span style="color:#E1E4E8;">(Result appResponse, Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(TIME_COUNTDOWN_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TimeoutCountDown countDown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (TimeoutCountDown) obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (countDown.</span><span style="color:#B392F0;">isExpired</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 检查结果是否超时</span></span>
<span class="line"><span style="color:#E1E4E8;">            ((AppResponse) appResponse).</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 清理结果信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isWarnEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onResponse</span><span style="color:#24292E;">(Result appResponse, Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) {</span></span>
<span class="line"><span style="color:#24292E;">    Object obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(TIME_COUNTDOWN_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        TimeoutCountDown countDown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TimeoutCountDown) obj;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (countDown.</span><span style="color:#6F42C1;">isExpired</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 检查结果是否超时</span></span>
<span class="line"><span style="color:#24292E;">            ((AppResponse) appResponse).</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 清理结果信息</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isWarnEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                logger.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="tpslimitfilter" tabindex="-1">TpsLimitFilter <a class="header-anchor" href="#tpslimitfilter" aria-label="Permalink to &quot;TpsLimitFilter&quot;">​</a></h3><p><strong>TpsLimitFilter 是 Provider 端对 TPS 限流的实现</strong>。TpsLimitFilter 中维护了一个 TPSLimiter 接口类型的对象，其默认实现是 DefaultTPSLimiter，由它来控制 Provider 端的 TPS 上限值为多少。TpsLimitFilter.invoke() 方法的具体实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 超过限流之后，直接抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tpsLimiter.</span><span style="color:#B392F0;">isAllowable</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), invocation)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;... &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 超过限流之后，直接抛出异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tpsLimiter.</span><span style="color:#6F42C1;">isAllowable</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), invocation)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;... &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TPSLimiter 接口中的核心是 isAllowable() 方法。在 DefaultTPSLimiter 实现中，使用ConcurrentHashMap（stats 字段）为每个 ServiceKey 维护了一个相应的 StatItem 对象；在 isAllowable() 方法实现中，会从 URL 中读取 tps 参数值（默认为 -1，即没有限流），对于需要限流的请求，会从 stats 集合中获取（或创建）相应 StatItem 对象，然后调用 StatItem 对象的isAllowable() 方法判断是否被限流，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isAllowable</span><span style="color:#E1E4E8;">(URL url, Invocation invocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(TPS_LIMIT_RATE_KEY, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> interval </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(TPS_LIMIT_INTERVAL_KEY, DEFAULT_TPS_LIMIT_INTERVAL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getServiceKey</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rate </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 需要限流，尝试从stats集合中获取相应的StatItem对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        StatItem statItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stats.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(serviceKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (statItem </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 查询stats集合失败，则创建新的StatItem对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            stats.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(serviceKey, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatItem</span><span style="color:#E1E4E8;">(serviceKey, rate, interval));</span></span>
<span class="line"><span style="color:#E1E4E8;">            statItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stats.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(serviceKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// URL中参数发生变化时，会重建对应的StatItem</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (statItem.</span><span style="color:#B392F0;">getRate</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> rate </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> statItem.</span><span style="color:#B392F0;">getInterval</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> interval) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                stats.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(serviceKey, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatItem</span><span style="color:#E1E4E8;">(serviceKey, rate, interval));</span></span>
<span class="line"><span style="color:#E1E4E8;">                statItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stats.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(serviceKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> statItem.</span><span style="color:#B392F0;">isAllowable</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 不需要限流，则从stats集合中清除相应的StatItem对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        StatItem statItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stats.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(serviceKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (statItem </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            stats.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(serviceKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isAllowable</span><span style="color:#24292E;">(URL url, Invocation invocation) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(TPS_LIMIT_RATE_KEY, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> interval </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(TPS_LIMIT_INTERVAL_KEY, DEFAULT_TPS_LIMIT_INTERVAL);</span></span>
<span class="line"><span style="color:#24292E;">    String serviceKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getServiceKey</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rate </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 需要限流，尝试从stats集合中获取相应的StatItem对象</span></span>
<span class="line"><span style="color:#24292E;">        StatItem statItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stats.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(serviceKey);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (statItem </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 查询stats集合失败，则创建新的StatItem对象</span></span>
<span class="line"><span style="color:#24292E;">            stats.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(serviceKey, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatItem</span><span style="color:#24292E;">(serviceKey, rate, interval));</span></span>
<span class="line"><span style="color:#24292E;">            statItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stats.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(serviceKey);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// URL中参数发生变化时，会重建对应的StatItem</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (statItem.</span><span style="color:#6F42C1;">getRate</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> rate </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> statItem.</span><span style="color:#6F42C1;">getInterval</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> interval) {</span></span>
<span class="line"><span style="color:#24292E;">                stats.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(serviceKey, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatItem</span><span style="color:#24292E;">(serviceKey, rate, interval));</span></span>
<span class="line"><span style="color:#24292E;">                statItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stats.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(serviceKey);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> statItem.</span><span style="color:#6F42C1;">isAllowable</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 不需要限流，则从stats集合中清除相应的StatItem对象</span></span>
<span class="line"><span style="color:#24292E;">        StatItem statItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stats.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(serviceKey);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (statItem </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            stats.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(serviceKey);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 StatItem 中会记录如下一些关键信息。</p><ul><li><p>name（String 类型）：对应的 ServiceKey。</p></li><li><p>rate（int 类型）：一段时间内能通过的 TPS 上限。</p></li><li><p>token（LongAdder 类型）：初始值为 rate 值，每通过一个请求 token 递减一，当减为 0 时，不再通过任何请求，实现限流的作用。</p></li><li><p>interval（long 类型）：重置 token 值的时间周期，这样就实现了在 interval 时间段内能够通过 rate 个请求的效果。</p></li></ul><p>下面我们来看 StatItem 中 isAllowable() 方法的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isAllowable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> now </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (now </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> lastResetTime </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> interval) { </span><span style="color:#6A737D;">// 周期性重置token</span></span>
<span class="line"><span style="color:#E1E4E8;">          token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildLongAdder</span><span style="color:#E1E4E8;">(rate);</span></span>
<span class="line"><span style="color:#E1E4E8;">          lastResetTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> now; </span><span style="color:#6A737D;">// 记录最近一次重置token的时间戳</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (token.</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 请求限流</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      token.</span><span style="color:#B392F0;">decrement</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 请求正常通过</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isAllowable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (now </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> lastResetTime </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> interval) { </span><span style="color:#6A737D;">// 周期性重置token</span></span>
<span class="line"><span style="color:#24292E;">          token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildLongAdder</span><span style="color:#24292E;">(rate);</span></span>
<span class="line"><span style="color:#24292E;">          lastResetTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> now; </span><span style="color:#6A737D;">// 记录最近一次重置token的时间戳</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (token.</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 请求限流</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      token.</span><span style="color:#6F42C1;">decrement</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 请求正常通过</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>到这里，Dubbo 中提供的核心 Filter 实现就介绍完了。不过，还有 EchoFilter 和 ExceptionFilter 这两个实现没有详细介绍，就留给你自行分析了，相信在了解上述 Filter 实现之后，你就可以非常轻松地阅读这两个 Filter 的源码。</p><h3 id="自定义-filter-实践" tabindex="-1">自定义 Filter 实践 <a class="header-anchor" href="#自定义-filter-实践" aria-label="Permalink to &quot;自定义 Filter 实践&quot;">​</a></h3><p>在了解完 Dubbo 加载 Filter 的原理以及 Dubbo 提供的多种 Filter 实现之后，下面我们就开始动手实现一个自定义的 Filter 实现，来进一步扩展 Dubbo 的功能。这里我们编写两个自定义的 Filter 实现类------ JarVersionConsumerFilter 和 JarVersionProviderFilter。</p><ul><li><p>JarVersionConsumerFilter 会获取服务接口所在 jar 包的版本，并作为 attachment 随请求发送到 Provider 端。</p></li><li><p>JarVersionProviderFilter 会统计请求中携带的 jar 包版本，并周期性打印（实践中一般会和监控数据一起生成报表）。</p></li></ul><p>在实践中，我们可以通过这两个 Filter 实现，搞清楚当前所有 Consumer 端升级接口 jar 包的情况。</p><p>首先，我们来看 JarVersionConsumerFilter 实现中的几个关键点。</p><ul><li><p>JarVersionConsumerFilter 被 @Activate 注解修饰，其中的 group 字段值为 CommonConstants.CONSUMER，会在 Consumer 端自动激活，order 字段值为 -1 ，是最后执行的 Filter。</p></li><li><p>JarVersionConsumerFilter 中维护了一个 LoadingCache 用于缓存各个业务接口与对应 jar 包版本号之间的映射关系。</p></li><li><p>在 invoke() 方法的实现中，会通过 LoadingCache 查询接口所在 jar 包的版本号，然后记录到 Invocation 的 attachment 之中，发送到 Provider 端。</p></li></ul><p>下面是 JarVersionConsumerFilter 的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Activate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">group</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {CommonConstants.CONSUMER}, </span><span style="color:#79B8FF;">order</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JarVersionConsumerFilter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Filter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String JAR_VERSION_NAME_KEY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dubbo.jar.version&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过一个LoadingCache缓存各个Class所在的jar包版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> LoadingCache&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; versionCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CacheBuilder.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">maximumSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> CacheLoader&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getJarVersion</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">invoker</span><span style="color:#E1E4E8;">, Invocation </span><span style="color:#FFAB70;">invocation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; attachments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">getAttachments</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> versionCache.</span><span style="color:#B392F0;">getUnchecked</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getInterface</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(version)) { </span><span style="color:#6A737D;">// 添加版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">            attachments.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(JAR_VERSION_NAME_KEY, version);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取Classpath下的&quot;/META-INF/MANIFEST.MF&quot;文件，获取jar包版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getJarVersion</span><span style="color:#E1E4E8;">(Class </span><span style="color:#FFAB70;">clazz</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (BufferedReader reader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedReader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InputStreamReader</span><span style="color:#E1E4E8;">(clazz.</span><span style="color:#B392F0;">getResourceAsStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/META-INF/MANIFEST.MF&quot;</span><span style="color:#E1E4E8;">)))) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reader.</span><span style="color:#B392F0;">readLine</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Implementation-Version:&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 省略异常处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Activate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">group</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {CommonConstants.CONSUMER}, </span><span style="color:#005CC5;">order</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JarVersionConsumerFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Filter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String JAR_VERSION_NAME_KEY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dubbo.jar.version&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过一个LoadingCache缓存各个Class所在的jar包版本</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> LoadingCache&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; versionCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheBuilder.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">maximumSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> CacheLoader&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getJarVersion</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">invoker</span><span style="color:#24292E;">, Invocation </span><span style="color:#E36209;">invocation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RpcException {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; attachments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">getAttachments</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> versionCache.</span><span style="color:#6F42C1;">getUnchecked</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getInterface</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(version)) { </span><span style="color:#6A737D;">// 添加版本号</span></span>
<span class="line"><span style="color:#24292E;">            attachments.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(JAR_VERSION_NAME_KEY, version);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取Classpath下的&quot;/META-INF/MANIFEST.MF&quot;文件，获取jar包版本</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getJarVersion</span><span style="color:#24292E;">(Class </span><span style="color:#E36209;">clazz</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (BufferedReader reader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(clazz.</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/META-INF/MANIFEST.MF&quot;</span><span style="color:#24292E;">)))) { </span></span>
<span class="line"><span style="color:#24292E;">            String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reader.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Implementation-Version:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 省略异常处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>JarVersionProviderFilter 的实现就非常简单了，它会读取请求中的版本信息，并将关联的计数器加一。另外，JarVersionProviderFilter 的构造方法中会启动一个定时任务，每隔一分钟执行一次，将统计结果打印到日志中（在生产环境一般会将这些统计数据生成报表展示）。</p><p>JarVersionProviderFilter 既然要运行在 Provider 端，那就需要将其 @Activate 注解的 group 字段设置为 CommonConstants.PROVIDER 常量。JarVersionProviderFilter 的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Activate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">group</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {CommonConstants.PROVIDER}, </span><span style="color:#79B8FF;">order</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JarVersionProviderFilter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Filter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String JAR_VERSION_NAME_KEY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dubbo.jar.version&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">AtomicLong</span><span style="color:#E1E4E8;">&gt; versionState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newScheduledThreadPool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JarVersionProviderFilter</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">// 启动定时任务</span></span>
<span class="line"><span style="color:#E1E4E8;">        SCHEDULED_EXECUTOR_SERVICE.</span><span style="color:#B392F0;">schedule</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">AtomicLong</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> versionState.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getAndSet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 打印日志并将统计数据重置</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, TimeUnit.MINUTES);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">invoker</span><span style="color:#E1E4E8;">, Invocation </span><span style="color:#FFAB70;">invocation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String versionAttachment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(JAR_VERSION_NAME_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(versionAttachment)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            AtomicLong count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> versionState.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(versionAttachment, v </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            count.</span><span style="color:#B392F0;">getAndIncrement</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 递增该版本的统计值</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Activate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">group</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {CommonConstants.PROVIDER}, </span><span style="color:#005CC5;">order</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JarVersionProviderFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Filter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String JAR_VERSION_NAME_KEY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dubbo.jar.version&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">AtomicLong</span><span style="color:#24292E;">&gt; versionState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newScheduledThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JarVersionProviderFilter</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 启动定时任务</span></span>
<span class="line"><span style="color:#24292E;">        SCHEDULED_EXECUTOR_SERVICE.</span><span style="color:#6F42C1;">schedule</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">AtomicLong</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> versionState.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAndSet</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 打印日志并将统计数据重置</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, TimeUnit.MINUTES);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">invoker</span><span style="color:#24292E;">, Invocation </span><span style="color:#E36209;">invocation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RpcException {</span></span>
<span class="line"><span style="color:#24292E;">        String versionAttachment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(JAR_VERSION_NAME_KEY);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(versionAttachment)) {</span></span>
<span class="line"><span style="color:#24292E;">            AtomicLong count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> versionState.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(versionAttachment, v </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            count.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 递增该版本的统计值</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们需要在 Provider 项目的 /resources/META-INF/dubbo 目录下添加一个 SPI 配置文件，文件名称为 org.apache.dubbo.rpc.Filter，具体内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.dubbo.demo.provider.JarVersionProviderFilter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">version</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.dubbo.demo.provider.JarVersionProviderFilter</span></span></code></pre></div><p>同样，也需要在 Consumer 项目相同位置添加相同的 SPI 配置文件（文件名称也相同），具体内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consumer</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.dubbo.demo.consumer.JarVersionConsumerFilter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">version</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consumer</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.dubbo.demo.consumer.JarVersionConsumerFilter</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时重点介绍了 Dubbo 中 Filter 接口的相关实现。首先，我们回顾了 Filter 链的加载流程实现；然后详细分析了 Dubbo 中多个内置的 Filter 实现，这些内置 Filter 对于实现 Dubbo 核心功能是不可或缺的；最后，我们还阐述了自定义 Filter 扩展 Dubbo 功能的流程，并通过一个统计 jar 包版本的示例进行说明。</p><p>在下一课时，我们将开始介绍 Dubbo 中 Cluster 层的内容。</p>`,45);function C(v,D,m,h,S,L){const a=e("Image");return t(),c("div",null,[E,y,i,F,g,l(a,{alt:"Lark20201106-191028.png",src:"https://s0.lgstatic.com/i/image/M00/68/FD/CgqCHl-lLz2APEb2ABSTPPnfqGQ345.png"}),n(),A,l(a,{alt:"Lark20201106-191032.png",src:"https://s0.lgstatic.com/i/image/M00/68/F2/Ciqc1F-lL4eAGvorAAEnucS-mWg399.png"}),n(),u,l(a,{alt:"Lark20201106-191036.png",src:"https://s0.lgstatic.com/i/image/M00/68/FE/CgqCHl-lL4GAWy4JAAFMZJwzrp8801.png"}),n(),d])}const k=o(r,[["render",C]]);export{B as __pageData,k as default};
