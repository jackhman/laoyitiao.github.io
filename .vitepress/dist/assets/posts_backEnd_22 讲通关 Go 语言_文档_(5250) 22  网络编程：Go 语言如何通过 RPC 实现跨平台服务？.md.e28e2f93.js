import{_ as p,j as l,o,g as e,k as a,h as t,Q as s}from"./chunks/framework.4e7d56ce.js";const A=JSON.parse('{"title":"什么是RPC 服务 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5250) 22  网络编程：Go 语言如何通过 RPC 实现跨平台服务？.md","filePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5250) 22  网络编程：Go 语言如何通过 RPC 实现跨平台服务？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/22 讲通关 Go 语言_文档/(5250) 22  网络编程：Go 语言如何通过 RPC 实现跨平台服务？.md"},r=s(`<p>在上一讲中，我为你讲解了 RESTful API 的规范以及实现，并且留了两个作业，它们分别是删除和修改用户，现在我为你讲解这两个作业。</p><p>删除一个用户比较简单，它的 API 格式和获取一个用户一样，但是 HTTP 方法换成了DELETE。删除一个用户的示例代码如下所示：</p><p><em>ch21/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//省略没有修改的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">   r.</span><span style="color:#79B8FF;">DELETE</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users/:id&quot;</span><span style="color:#E1E4E8;">, deleteUser)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteUser</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">gin.Context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   id </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//类似于数据库的SQL查询</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> index, u </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> users {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#79B8FF;">EqualFold</span><span style="color:#E1E4E8;">(id, strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(u.ID)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(users[:i], users[i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:]</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(http.StatusNoContent, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(http.StatusNotFound, gin.H{</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;用户不存在&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//省略没有修改的代码</span></span>
<span class="line"><span style="color:#24292E;">   r.</span><span style="color:#005CC5;">DELETE</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users/:id&quot;</span><span style="color:#24292E;">, deleteUser)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteUser</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">gin.Context) {</span></span>
<span class="line"><span style="color:#24292E;">   id </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//类似于数据库的SQL查询</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> index, u </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> users {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> strings.</span><span style="color:#005CC5;">EqualFold</span><span style="color:#24292E;">(id, strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(u.ID)) {</span></span>
<span class="line"><span style="color:#24292E;">         i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(users[:i], users[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:]</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(http.StatusNoContent, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(http.StatusNotFound, gin.H{</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;用户不存在&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个示例的逻辑就是注册 DELETE 方法，达到删除用户的目的。删除用户的逻辑是通过ID 查询：</p><ul><li><p>如果可以找到要删除的用户，记录索引并跳出循环，然后根据索引删除该用户；</p></li><li><p>如果找不到要删除的用户，则返回 404。</p></li></ul><p>实现了删除用户的逻辑后，相信你已经会修改一个用户的名字了，因为它和删除一个用户非常像，实现代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//省略没有修改的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">   r.</span><span style="color:#79B8FF;">PATCH</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users/:id&quot;</span><span style="color:#E1E4E8;">,updateUserName)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateUserName</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">gin.Context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   id </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//类似于数据库的SQL查询</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> index, u </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> users {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#79B8FF;">EqualFold</span><span style="color:#E1E4E8;">(id, strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(u.ID)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      users[i].Name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">DefaultPostForm</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">,users[i].Name)</span></span>
<span class="line"><span style="color:#E1E4E8;">      c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(http.StatusOK, users[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(http.StatusNotFound, gin.H{</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;用户不存在&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//省略没有修改的代码</span></span>
<span class="line"><span style="color:#24292E;">   r.</span><span style="color:#005CC5;">PATCH</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users/:id&quot;</span><span style="color:#24292E;">,updateUserName)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateUserName</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">gin.Context) {</span></span>
<span class="line"><span style="color:#24292E;">   id </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//类似于数据库的SQL查询</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> index, u </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> users {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> strings.</span><span style="color:#005CC5;">EqualFold</span><span style="color:#24292E;">(id, strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(u.ID)) {</span></span>
<span class="line"><span style="color:#24292E;">         i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      users[i].Name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">DefaultPostForm</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">,users[i].Name)</span></span>
<span class="line"><span style="color:#24292E;">      c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(http.StatusOK, users[i])</span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(http.StatusNotFound, gin.H{</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;用户不存在&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>整体代码逻辑和删除的差不多的，只不过这里使用的是 PATCH方法。</p><h3 id="什么是rpc-服务" tabindex="-1">什么是RPC 服务 <a class="header-anchor" href="#什么是rpc-服务" aria-label="Permalink to &quot;什么是RPC 服务&quot;">​</a></h3><p>RPC，也就是<strong>远程过程调用</strong>，是分布式系统中不同节点调用的方式（进程间通信），属于 C/S 模式。RPC 由客户端发起，调用服务端的方法进行通信，然后服务端把结果返回给客户端。</p><p>RPC的核心有两个：<strong>通信协议</strong> 和<strong>序列化</strong>。在 HTTP 2 之前，一般采用自定义 TCP 协议的方式进行通信，HTTP 2 出来后，也有采用该协议的，比如流行的gRPC。</p><p><strong>序列化</strong> 和<strong>反序列化</strong>是一种把传输内容编码和解码的方式，常见的编解码方式有 JSON、Protobuf 等。</p><p>在大多数 RPC的架构设计中，都有<strong>Client</strong> 、<strong>Client Stub</strong> 、<strong>Server</strong> 、<strong>Server Stub</strong>这四个组件，Client 和 Server 之间通过 Socket 进行通信。RPC 架构如下图所示：</p>`,14),E=s(`<p>（图片来自于 Google 搜索）</p><p>下面我为你总结下 RPC 调用的流程：</p><ul><li><p>客户端（Client）调用客户端存根（Client Stub），同时把参数传给客户端存根；</p></li><li><p>客户端存根将参数打包编码，并通过系统调用发送到服务端；</p></li><li><p>客户端本地系统发送信息到服务器；</p></li><li><p>服务器系统将信息发送到服务端存根（Server Stub）；</p></li><li><p>服务端存根解析信息，也就是解码；</p></li><li><p>服务端存根调用真正的服务端程序（Sever）；</p></li><li><p>服务端（Server）处理后，通过同样的方式，把结果再返回给客户端（Client）。</p></li></ul><p>RPC 调用常用于大型项目，也就是我们现在常说的微服务，而且还会包含服务注册、治理、监控等功能，是一套完整的体系。</p><h3 id="go-语言-rpc-简单入门" tabindex="-1">Go 语言 RPC 简单入门 <a class="header-anchor" href="#go-语言-rpc-简单入门" aria-label="Permalink to &quot;Go 语言 RPC 简单入门&quot;">​</a></h3><p>RPC这么流行，Go 语言当然不会错过，在 Go SDK 中，已经<strong>内置了 net/rpc 包</strong>来帮助开发者实现 RPC。简单来说，net/rpc 包提供了通过网络访问服务端对象方法的能力。</p><p>现在我通过一个加法运算来演示 RPC的使用，它的服务端代码如下所示：</p><p><em>ch22/server/math_service.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">server</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MathService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   A, B </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (m </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">MathService) </span><span style="color:#B392F0;">Add</span><span style="color:#E1E4E8;">(args Args, reply </span><span style="color:#F97583;">*int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">reply </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.A </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> args.B</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">server</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MathService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   A, B </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (m </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">MathService) </span><span style="color:#6F42C1;">Add</span><span style="color:#24292E;">(args Args, reply </span><span style="color:#D73A49;">*int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">reply </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.A </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> args.B</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在以上代码中：</p><ul><li><p>定义了<strong>MathService</strong>，用于表示一个远程服务对象；</p></li><li><p>Args 结构体用于表示参数；</p></li><li><p>Add 这个方法实现了加法的功能，加法的结果通过 replay这个指针变量返回。</p></li></ul><p>有了这个定义好的服务对象，就可以把它注册到暴露的服务列表中，以供其他客户端使用了。在Go 语言中，要注册一个一个RPC 服务对象还是比较简单的，通过 RegisterName 方法即可，示例代码如下所示：</p><p><em>ch22/server_main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">gotour/ch22/server</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/rpc</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   rpc.</span><span style="color:#79B8FF;">RegisterName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(server.MathService))</span></span>
<span class="line"><span style="color:#E1E4E8;">   l, e </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#79B8FF;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;listen error:&quot;</span><span style="color:#E1E4E8;">, e)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   rpc.</span><span style="color:#79B8FF;">Accept</span><span style="color:#E1E4E8;">(l)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">gotour/ch22/server</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/rpc</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">   rpc.</span><span style="color:#005CC5;">RegisterName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(server.MathService))</span></span>
<span class="line"><span style="color:#24292E;">   l, e </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#005CC5;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;listen error:&quot;</span><span style="color:#24292E;">, e)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   rpc.</span><span style="color:#005CC5;">Accept</span><span style="color:#24292E;">(l)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上示例代码中，通过 RegisterName 函数注册了一个服务对象，该函数接收两个参数：</p><ul><li><p>服务名称（MathService）；</p></li><li><p>具体的服务对象，也就是我刚刚定义好的MathService 这个结构体。</p></li></ul><p>然后通过 net.Listen 函数建立一个TCP 链接，在 1234 端口进行监听，最后通过 rpc.Accept 函数在该 TCP 链接上提供 MathService 这个 RPC 服务。现在客户端就可以看到MathService这个服务以及它的Add 方法了。</p><p>任何一个框架都有自己的规则，net/rpc 这个 Go 语言提供的RPC 框架也不例外。要想把一个对象注册为 RPC 服务，可以让<strong>客户端远程访问</strong>，那么该对象（类型）的方法必须满足如下条件：</p><ul><li><p>方法的类型是可导出的（公开的）；</p></li><li><p>方法本身也是可导出的；</p></li><li><p>方法必须有 2 个参数，并且参数类型是可导出或者内建的；</p></li><li><p>方法必须返回一个 error 类型。</p></li></ul><p>总结下来，该方法的格式如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">T) </span><span style="color:#B392F0;">MethodName</span><span style="color:#E1E4E8;">(argType T1, replyType </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">T2) </span><span style="color:#F97583;">error</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">T) </span><span style="color:#6F42C1;">MethodName</span><span style="color:#24292E;">(argType T1, replyType </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">T2) </span><span style="color:#D73A49;">error</span></span></code></pre></div><p>这里面的 T1、T2都是可以被 encoding/gob 序列化的。</p><ul><li><p>第一个参数 argType 是调用者（客户端）提供的；</p></li><li><p>第二个参数 replyType是返回给调用者结果，必须是指针类型。</p></li></ul><p>有了提供好的RPC 服务，现在再来看下客户端如何调用，它的代码如下所示：</p><p><em>ch22/client_main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">gotour/ch22/server</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/rpc</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> rpc.</span><span style="color:#79B8FF;">Dial</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&quot;localhost:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dialing:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   args </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> server.Args{A:</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">,B:</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> reply </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">   err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Call</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService.Add&quot;</span><span style="color:#E1E4E8;">, args, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">reply)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService.Add error:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService.Add: </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">+</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">=</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, args.A, args.B, reply)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">gotour/ch22/server</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/rpc</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">   client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> rpc.</span><span style="color:#005CC5;">Dial</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&quot;localhost:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dialing:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   args </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> server.Args{A:</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,B:</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> reply </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">   err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Call</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService.Add&quot;</span><span style="color:#24292E;">, args, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">reply)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService.Add error:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService.Add: </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">+</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">=</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, args.A, args.B, reply)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在以上实例代码中，首先通过 rpc.Dial 函数建立 TCP 链接，需要注意的是这里的 IP、端口要和RPC 服务提供的一致，确保可以建立 RCP 链接。</p><p>TCP 链接建立成功后，就需要准备远程方法需要的参数，也就是示例中的args 和 reply。参数准备好之后，就可以通过 Call 方法调用远程的RPC 服务了。Call 方法有 3 个参数，它们的作用分别如下所示：</p><ol><li><p>调用的远程方法的名字，这里是MathService.Add，点前面的部分是<strong>注册的服务的名称</strong> ，点后面的部分是<strong>该服务的方法</strong>；</p></li><li><p>客户端为了<strong>调用远程方法</strong>提供的参数，示例中是args；</p></li><li><p>为了接收远程方法返回的结果，必须是一个指针，也就是示例中的&amp; replay，这样客户端就可以获得服务端返回的结果了。</p></li></ol><p>服务端和客户端的代码都写好了，现在就可以运行它们，测试 RPC调用的效果了。</p><p>首先运行服务端的代码，提供 RPC 服务，运行命令如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ch22/server_main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ch22/server_main.go</span></span></code></pre></div><p>然后运行客户端代码，测试调用 RPC的结果，运行命令如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ch22/client_main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ch22/client_main.go</span></span></code></pre></div><p>如果你看到了 MathService.Add: 7+8=15的结果，那么恭喜你，你完成了一个完整的RPC 调用。</p><h3 id="基于-http的rpc" tabindex="-1">基于 HTTP的RPC <a class="header-anchor" href="#基于-http的rpc" aria-label="Permalink to &quot;基于 HTTP的RPC&quot;">​</a></h3><p>RPC 除了可以通过 TCP 协议调用之外，还可以通过HTTP 协议进行调用，而且内置的net/rpc 包已经支持，现在我修改以上示例代码，支持 HTTP 协议的调用，服务端代码如下所示：</p><p><em>ch22/server_main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   rpc.</span><span style="color:#79B8FF;">RegisterName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(server.MathService))</span></span>
<span class="line"><span style="color:#E1E4E8;">   rpc.</span><span style="color:#79B8FF;">HandleHTTP</span><span style="color:#E1E4E8;">()</span><span style="color:#6A737D;">//新增的</span></span>
<span class="line"><span style="color:#E1E4E8;">   l, e </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#79B8FF;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;listen error:&quot;</span><span style="color:#E1E4E8;">, e)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">Serve</span><span style="color:#E1E4E8;">(l, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">//换成http的服务</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   rpc.</span><span style="color:#005CC5;">RegisterName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(server.MathService))</span></span>
<span class="line"><span style="color:#24292E;">   rpc.</span><span style="color:#005CC5;">HandleHTTP</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//新增的</span></span>
<span class="line"><span style="color:#24292E;">   l, e </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#005CC5;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;listen error:&quot;</span><span style="color:#24292E;">, e)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">Serve</span><span style="color:#24292E;">(l, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//换成http的服务</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上是服务端代码的修改，只需修改两处，我已经在代码中标注出来了，很容易理解。</p><p>服务端修改的代码不算多，客户端修改的代码就更少了，只需要修改一处即可，修改的部分如下所示：</p><p><em>ch22/client_main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> rpc.</span><span style="color:#79B8FF;">DialHTTP</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&quot;localhost:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//省略了其他没有修改的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">   client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> rpc.</span><span style="color:#005CC5;">DialHTTP</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&quot;localhost:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//省略了其他没有修改的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从以上代码可以看到，只需要把建立链接的方法从 Dial 换成 DialHTTP 即可。</p><p>现在分别运行服务端和客户端代码，就可以看到输出的结果了，和上面使用TCP 链接时是一样的。</p><p>此外，Go 语言 net/rpc 包提供的 HTTP 协议的 RPC 还有一个调试的 URL，运行服务端代码后，在浏览器中输入 <a href="http://localhost:1234/debug/rpc" target="_blank" rel="noreferrer">http://localhost:1234/debug/rpc</a> 回车，即可看到服务端注册的RPC 服务，以及每个服务的方法，如下图所示：</p>`,46),y=s(`<p>如上图所示，<strong>注册的 RPC 服务</strong> 、<strong>方法的签名</strong> 、<strong>已经被调用的次数</strong>都可以看到。</p><h3 id="json-rpc-跨平台通信" tabindex="-1">JSON RPC 跨平台通信 <a class="header-anchor" href="#json-rpc-跨平台通信" aria-label="Permalink to &quot;JSON RPC 跨平台通信&quot;">​</a></h3><p>以上我实现的RPC 服务是基于 gob 编码的，这种编码在跨语言调用的时候比较困难，而当前在微服务架构中，RPC 服务的实现者和调用者都可能是不同的编程语言，因此我们实现的 RPC 服务要支持多语言的调用。</p><h4 id="基于-tcp-的-json-rpc" tabindex="-1">基于 TCP 的 JSON RPC <a class="header-anchor" href="#基于-tcp-的-json-rpc" aria-label="Permalink to &quot;基于 TCP 的 JSON RPC&quot;">​</a></h4><p>实现跨语言 RPC 服务的核心在于选择一个<strong>通用的编码</strong>，这样大多数语言都支持，比如常用的JSON。在 Go 语言中，实现一个 JSON RPC 服务非常简单，只需要使用 net/rpc/jsonrpc 包即可。</p><p>同样以上面的示例为例，我把它改造成支持 JSON的RPC 服务，服务端代码如下所示：</p><p><em>ch22/server_main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   rpc.</span><span style="color:#79B8FF;">RegisterName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(server.MathService))</span></span>
<span class="line"><span style="color:#E1E4E8;">   l, e </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#79B8FF;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;listen error:&quot;</span><span style="color:#E1E4E8;">, e)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      conn, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> l.</span><span style="color:#79B8FF;">Accept</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jsonrpc.Serve: accept:&quot;</span><span style="color:#E1E4E8;">, err.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//json rpc</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> jsonrpc.</span><span style="color:#79B8FF;">ServeConn</span><span style="color:#E1E4E8;">(conn)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   rpc.</span><span style="color:#005CC5;">RegisterName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(server.MathService))</span></span>
<span class="line"><span style="color:#24292E;">   l, e </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#005CC5;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;listen error:&quot;</span><span style="color:#24292E;">, e)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      conn, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> l.</span><span style="color:#005CC5;">Accept</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jsonrpc.Serve: accept:&quot;</span><span style="color:#24292E;">, err.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//json rpc</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> jsonrpc.</span><span style="color:#005CC5;">ServeConn</span><span style="color:#24292E;">(conn)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从以上代码可以看到，相比 gob 编码的RPC 服务，JSON 的 RPC 服务是把链接交给了jsonrpc.ServeConn这个函数处理，达到了基于 JSON 进行 RPC 调用的目的。</p><p>JSON RPC 的客户端代码也非常少，只需要修改一处，修改的部分如下所示：</p><p><em>ch22/client_main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> jsonrpc.</span><span style="color:#79B8FF;">Dial</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&quot;localhost:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//省略了其他没有修改的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">   client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> jsonrpc.</span><span style="color:#005CC5;">Dial</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&quot;localhost:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//省略了其他没有修改的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从以上代码可以看到，只需要把建立链接的 Dial方法换成 jsonrpc 包中的即可。</p><p>以上是使用 Go 语言作为客户端调用 RPC 服务的示例，其他编程语言也是类似的，只需要遵守 <a href="https://www.jsonrpc.org/specification" target="_blank" rel="noreferrer">JSON-RPC 规范</a>即可。</p><h4 id="基于-http的json-rpc" tabindex="-1">基于 HTTP的JSON RPC <a class="header-anchor" href="#基于-http的json-rpc" aria-label="Permalink to &quot;基于 HTTP的JSON RPC&quot;">​</a></h4><p>相比基于 TCP 调用的RPC 来说，使用 HTTP肯定会更方便，也更通用。Go 语言内置的jsonrpc 并没有实现基于 HTTP的传输，所以就需要自己来实现，这里我参考 gob 编码的HTTP RPC 实现方式，来<strong>实现基于 HTTP的JSON RPC 服务</strong>。</p><p>还是上面的示例，我改造下让其支持 HTTP 协议，RPC 服务端代码如下所示：</p><p><em>ch22/server_main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   rpc.</span><span style="color:#79B8FF;">RegisterName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(server.MathService))</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//注册一个path，用于提供基于http的json rpc服务</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">HandleFunc</span><span style="color:#E1E4E8;">(rpc.DefaultRPCPath, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(rw http.ResponseWriter, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      conn, _, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> rw.(http.Hijacker).</span><span style="color:#79B8FF;">Hijack</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         log.</span><span style="color:#79B8FF;">Print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rpc hijacking &quot;</span><span style="color:#E1E4E8;">, r.RemoteAddr, </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;">, err.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> connected </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;200 Connected to JSON RPC&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      io.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(conn, </span><span style="color:#9ECBFF;">&quot;HTTP/1.0 &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">connected</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      jsonrpc.</span><span style="color:#79B8FF;">ServeConn</span><span style="color:#E1E4E8;">(conn)</span></span>
<span class="line"><span style="color:#E1E4E8;">   })</span></span>
<span class="line"><span style="color:#E1E4E8;">   l, e </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#79B8FF;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;listen error:&quot;</span><span style="color:#E1E4E8;">, e)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">Serve</span><span style="color:#E1E4E8;">(l, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">//换成http的服务</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   rpc.</span><span style="color:#005CC5;">RegisterName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(server.MathService))</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//注册一个path，用于提供基于http的json rpc服务</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">HandleFunc</span><span style="color:#24292E;">(rpc.DefaultRPCPath, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(rw http.ResponseWriter, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) {</span></span>
<span class="line"><span style="color:#24292E;">      conn, _, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> rw.(http.Hijacker).</span><span style="color:#005CC5;">Hijack</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         log.</span><span style="color:#005CC5;">Print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rpc hijacking &quot;</span><span style="color:#24292E;">, r.RemoteAddr, </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;">, err.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> connected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;200 Connected to JSON RPC&quot;</span></span>
<span class="line"><span style="color:#24292E;">      io.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(conn, </span><span style="color:#032F62;">&quot;HTTP/1.0 &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">connected</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      jsonrpc.</span><span style="color:#005CC5;">ServeConn</span><span style="color:#24292E;">(conn)</span></span>
<span class="line"><span style="color:#24292E;">   })</span></span>
<span class="line"><span style="color:#24292E;">   l, e </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#005CC5;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;listen error:&quot;</span><span style="color:#24292E;">, e)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">Serve</span><span style="color:#24292E;">(l, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//换成http的服务</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码的实现基于 HTTP 协议的核心，即使用 http.HandleFunc 注册了一个 path，对外提供基于 HTTP 的 JSON RPC 服务。在这个 HTTP 服务的实现中，通过Hijack方法劫持链接，然后转交给 jsonrpc 处理，这样就实现了基于 HTTP 协议的 JSON RPC 服务。</p><p>实现了服务端的代码后，现在开始实现客户端调用，它的代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">     client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DialHTTP</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&quot;localhost:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dialing:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     args </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> server.Args{A:</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">,B:</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> reply </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">     err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Call</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService.Add&quot;</span><span style="color:#E1E4E8;">, args, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">reply)</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService.Add error:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MathService.Add: </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">+</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">=</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, args.A, args.B, reply)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// DialHTTP connects to an HTTP RPC server at the specified network address</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// listening on the default HTTP RPC path.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DialHTTP</span><span style="color:#E1E4E8;">(network, address </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rpc.Client, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DialHTTPPath</span><span style="color:#E1E4E8;">(network, address, rpc.DefaultRPCPath)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// DialHTTPPath connects to an HTTP RPC server</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// at the specified network address and path.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DialHTTPPath</span><span style="color:#E1E4E8;">(network, address, path </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rpc.Client, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">     conn, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#79B8FF;">Dial</span><span style="color:#E1E4E8;">(network, address)</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     io.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(conn, </span><span style="color:#9ECBFF;">&quot;GET &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot; HTTP/1.0</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// Require successful HTTP response</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// before switching to RPC protocol.</span></span>
<span class="line"><span style="color:#E1E4E8;">     resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#79B8FF;">ReadResponse</span><span style="color:#E1E4E8;">(bufio.</span><span style="color:#79B8FF;">NewReader</span><span style="color:#E1E4E8;">(conn), </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">http.Request{Method: </span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">     connected </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;200 Connected to JSON RPC&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> resp.Status </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> connected {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonrpc.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(conn), </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unexpected HTTP response: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> resp.Status)</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     conn.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">net.OpError{</span></span>
<span class="line"><span style="color:#E1E4E8;">        Op:   </span><span style="color:#9ECBFF;">&quot;dial-http&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Net:  network </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> address,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Addr: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Err:  err,</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">     client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DialHTTP</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&quot;localhost:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dialing:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     args </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> server.Args{A:</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,B:</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> reply </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">     err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Call</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService.Add&quot;</span><span style="color:#24292E;">, args, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">reply)</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService.Add error:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MathService.Add: </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">+</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">=</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, args.A, args.B, reply)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// DialHTTP connects to an HTTP RPC server at the specified network address</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// listening on the default HTTP RPC path.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DialHTTP</span><span style="color:#24292E;">(network, address </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rpc.Client, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DialHTTPPath</span><span style="color:#24292E;">(network, address, rpc.DefaultRPCPath)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// DialHTTPPath connects to an HTTP RPC server</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// at the specified network address and path.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DialHTTPPath</span><span style="color:#24292E;">(network, address, path </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rpc.Client, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">     conn, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#005CC5;">Dial</span><span style="color:#24292E;">(network, address)</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     io.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(conn, </span><span style="color:#032F62;">&quot;GET &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot; HTTP/1.0</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// Require successful HTTP response</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// before switching to RPC protocol.</span></span>
<span class="line"><span style="color:#24292E;">     resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> http.</span><span style="color:#005CC5;">ReadResponse</span><span style="color:#24292E;">(bufio.</span><span style="color:#005CC5;">NewReader</span><span style="color:#24292E;">(conn), </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">http.Request{Method: </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">     connected </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;200 Connected to JSON RPC&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> resp.Status </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> connected {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonrpc.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(conn), </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unexpected HTTP response: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> resp.Status)</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     conn.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">net.OpError{</span></span>
<span class="line"><span style="color:#24292E;">        Op:   </span><span style="color:#032F62;">&quot;dial-http&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Net:  network </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> address,</span></span>
<span class="line"><span style="color:#24292E;">        Addr: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Err:  err,</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>以上这段代码的核心在于通过建立好的TCP 链接，发送 HTTP 请求调用远程的HTTP JSON RPC 服务，这里使用的是 HTTP GET 方法。</p><p>分别运行服务端和客户端，就可以看到正确的HTTP JSON RPC 调用结果了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲基于 Go 语言自带的RPC 框架，讲解了 RPC 服务的实现以及调用。通过这一讲的学习相信你可以很好地了解什么是 RPC 服务，基于 TCP 和 HTTP 实现的RPC 服务有什么不同，它们是如何实现的等等。</p><p>不过在实际的项目开发中，使用Go 语言自带的 RPC 框架并不多，但是这里我还是以自带的框架为例进行讲解，这样可以更好地理解 RPC 的使用以及实现原理。如果你可以很好地掌握它们，那么你使用第三方的 RPC 框架也可以很快上手。</p><p>在实际的项目中，比较常用的是Google的gRPC 框架，它是通过Protobuf 序列化的，是基于 HTTP/2 协议的二进制传输，并且支持很多编程语言，效率也比较高。关于 gRPC的使用可以看官网的文档，入门是很容易的。</p>`,28);function i(F,u,C,d,g,h){const n=l("Image");return o(),e("div",null,[r,a(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/8D/45/CgqCHl_8K6eADlRHAAFxSlJHXWc596.png"}),t(),E,a(n,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/8D/2F/Ciqc1F_7zbWAb5PXAAA7zm9tcRE148.png"}),y])}const B=p(c,[["render",i]]);export{A as __pageData,B as default};
