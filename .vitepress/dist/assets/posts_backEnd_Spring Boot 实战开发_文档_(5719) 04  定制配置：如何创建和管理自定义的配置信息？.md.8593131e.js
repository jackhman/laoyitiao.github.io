import{_ as l,D as e,o as t,g as r,J as a,h as n,Q as p,m as o}from"./chunks/framework.f67d7268.js";const f=JSON.parse('{"title":"04定制配置：如何创建和管理自定义的配置信息？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Boot 实战开发_文档/(5719) 04  定制配置：如何创建和管理自定义的配置信息？.md","filePath":"posts/backEnd/Spring Boot 实战开发_文档/(5719) 04  定制配置：如何创建和管理自定义的配置信息？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Boot 实战开发_文档/(5719) 04  定制配置：如何创建和管理自定义的配置信息？.md"},i=p(`<h1 id="_04定制配置-如何创建和管理自定义的配置信息" tabindex="-1">04定制配置：如何创建和管理自定义的配置信息？ <a class="header-anchor" href="#_04定制配置-如何创建和管理自定义的配置信息" aria-label="Permalink to &quot;04定制配置：如何创建和管理自定义的配置信息？&quot;">​</a></h1><p>03 讲中，我们介绍了 Spring Boot 中的配置体系，梳理了配置文件的组织结构以及如何通过代码实现动态的配置信息加载过程。今天我们将在 03 讲的基础上，给出更多与配置体系相关的高级用法，以及如何创建和管理各种自定义的配置信息。</p><h3 id="如何在应用程序中嵌入系统配置信息" tabindex="-1">如何在应用程序中嵌入系统配置信息？ <a class="header-anchor" href="#如何在应用程序中嵌入系统配置信息" aria-label="Permalink to &quot;如何在应用程序中嵌入系统配置信息？&quot;">​</a></h3><p>我们知道 Spring Boot 通过自动配置机制内置了很多默认的配置信息，而在这些配置信息中，有一部分系统配置信息也可以反过来作为配置项应用到我们的应用程序中。</p><p>例如，如果想要获取当前应用程序的名称并作为一个配置项进行管理，那么很简单，我们直接通过 \${spring.application.name} 占位符就可以做到这一点，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">myapplication.name : \${spring.application.name}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myapplication.name : \${spring.application.name}</span></span></code></pre></div><p>通过 \${} 占位符同样可以引用配置文件中的其他配置项内容，如在下列配置项中，最终&quot;system.description&quot;配置项的值就是&quot;The system springcss is used for health&quot;。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">system.name=springcss</span></span>
<span class="line"><span style="color:#E1E4E8;">system.domain=health</span></span>
<span class="line"><span style="color:#E1E4E8;">system.description=The system \${name} is used for \${domain}.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">system.name=springcss</span></span>
<span class="line"><span style="color:#24292E;">system.domain=health</span></span>
<span class="line"><span style="color:#24292E;">system.description=The system \${name} is used for \${domain}.</span></span></code></pre></div><p>再来看一种场景，假设我们使用 Maven 来构建应用程序，那么可以按如下所示的配置项来动态获取与系统构建过程相关的信息：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">info: </span></span>
<span class="line"><span style="color:#E1E4E8;">  app:</span></span>
<span class="line"><span style="color:#E1E4E8;">    encoding: @project.build.sourceEncoding@</span></span>
<span class="line"><span style="color:#E1E4E8;">    java:</span></span>
<span class="line"><span style="color:#E1E4E8;">      source: @java.version@</span></span>
<span class="line"><span style="color:#E1E4E8;">      target: @java.version@</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">info: </span></span>
<span class="line"><span style="color:#24292E;">  app:</span></span>
<span class="line"><span style="color:#24292E;">    encoding: @project.build.sourceEncoding@</span></span>
<span class="line"><span style="color:#24292E;">    java:</span></span>
<span class="line"><span style="color:#24292E;">      source: @java.version@</span></span>
<span class="line"><span style="color:#24292E;">      target: @java.version@</span></span></code></pre></div><p>上述配置项的效果与如下所示的静态配置是一样的：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">info:</span></span>
<span class="line"><span style="color:#E1E4E8;">  app:</span></span>
<span class="line"><span style="color:#E1E4E8;">    encoding: UTF-8</span></span>
<span class="line"><span style="color:#E1E4E8;">    java:</span></span>
<span class="line"><span style="color:#E1E4E8;">        source: 1.8.0_31</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: 1.8.0_31</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">info:</span></span>
<span class="line"><span style="color:#24292E;">  app:</span></span>
<span class="line"><span style="color:#24292E;">    encoding: UTF-8</span></span>
<span class="line"><span style="color:#24292E;">    java:</span></span>
<span class="line"><span style="color:#24292E;">        source: 1.8.0_31</span></span>
<span class="line"><span style="color:#24292E;">        target: 1.8.0_31</span></span></code></pre></div><p>根据不同的需求，在应用程序中嵌入系统配置信息是很有用的，特别是在一些面向 DevOps 的应用场景中。</p><h3 id="如何创建和使用自定义配置信息" tabindex="-1">如何创建和使用自定义配置信息？ <a class="header-anchor" href="#如何创建和使用自定义配置信息" aria-label="Permalink to &quot;如何创建和使用自定义配置信息？&quot;">​</a></h3><p>在现实的开发过程中，面对纷繁复杂的应用场景，Spring Boot 所提供的内置配置信息并不一定能够完全满足开发的需求，这就需要开发人员创建并管理各种自定义的配置信息。例如，对于一个电商类应用场景，为了鼓励用户完成下单操作，我们希望每完成一个订单给就给到用户一定数量的积分。从系统扩展性上讲，这个积分应该是可以调整的，所以我们创建了一个自定义的配置项，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">springcss.order.point = 10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">springcss.order.point = 10</span></span></code></pre></div><p>这里，我们设置了每个订单对应的积分为 10，那么应用程序该如何获取这个配置项的内容呢？通常有两种方法。</p><h4 id="使用-value-注解" tabindex="-1">使用 @Value 注解 <a class="header-anchor" href="#使用-value-注解" aria-label="Permalink to &quot;使用 @Value 注解&quot;">​</a></h4><p>使用 @Value 注解来注入配置项内容是一种传统的实现方法。针对前面给出的自定义配置项，我们可以构建一个 SpringCssConfig 类，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringCssConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${springcss.order.point}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> point;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringCssConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${springcss.order.point}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> point;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 SpringCssConfig 类中，我们要做的就是在字段上添加 @Value 注解，并指向配置项的名称即可。</p><h4 id="使用-configurationproperties-注解" tabindex="-1">使用 @ConfigurationProperties 注解 <a class="header-anchor" href="#使用-configurationproperties-注解" aria-label="Permalink to &quot;使用 @ConfigurationProperties 注解&quot;">​</a></h4><p>相较 @Value 注解，更为现代的一种做法是使用 @ConfigurationProperties 注解。在使用该注解时，我们通常会设置一个&quot;prefix&quot;属性用来指定配置项的前缀，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;springcss.order&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringCsshConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> point;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;springcss.order&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringCsshConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> point;</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相比 @Value 注解只能用于指定具体某一个配置项，@ConfigurationProperties 可以用来批量提取配置内容。只要指定 prefix，我们就可以把该 prefix 下的所有配置项按照名称自动注入业务代码中。</p><p>我们考虑一种更常见也更复杂的场景：假设用户根据下单操作获取的积分并不是固定的，而是根据每个不同类型的订单会有不同的积分，那么现在的配置项的内容，如果使用 Yaml 格式的话就应该是这样：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">springcss:</span></span>
<span class="line"><span style="color:#E1E4E8;">    points:</span></span>
<span class="line"><span style="color:#E1E4E8;">      orderType[1]: 10</span></span>
<span class="line"><span style="color:#E1E4E8;">      orderType[2]: 20</span></span>
<span class="line"><span style="color:#E1E4E8;">      orderType[3]: 30</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">springcss:</span></span>
<span class="line"><span style="color:#24292E;">    points:</span></span>
<span class="line"><span style="color:#24292E;">      orderType[1]: 10</span></span>
<span class="line"><span style="color:#24292E;">      orderType[2]: 20</span></span>
<span class="line"><span style="color:#24292E;">      orderType[3]: 30</span></span></code></pre></div><p>如果想把这些配置项全部加载到业务代码中，使用 @ConfigurationProperties 注解同样也很容易实现。我们可以直接在配置类 SpringCssConfig 中定义一个 Map 对象，然后通过 Key-Value 对来保存这些配置数据，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;springcss.points&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringCssConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; orderType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;springcss.points&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringCssConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; orderType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里通过创建一个 HashMap 来保存这些 Key-Value 对。类似的，我们也可以实现常见的一些数据结构的自动嵌入。</p><h4 id="为自定义配置项添加提示功能" tabindex="-1">为自定义配置项添加提示功能 <a class="header-anchor" href="#为自定义配置项添加提示功能" aria-label="Permalink to &quot;为自定义配置项添加提示功能&quot;">​</a></h4><p>如果你已经使用过 Spring Boot 中的配置文件，并添加了一些内置的配置项，你就会发现，当我们输入某一个配置项的前缀时，诸如 IDEA、Eclipse 这样的，IDE 就会自动弹出该前缀下的所有配置信息供你进行选择，效果如下：</p>`,32),E=o("p",null,"IDE 自动提示配置项的效果图",-1),y=o("p",null,"上图的效果对于管理自定义的配置信息非常有用。如何实现这种效果呢？当我们在 application.yml 配置文件中添加一个自定义配置项时，会注意到 IDE 会出现一个提示，说明这个配置项无法被 IDE 所识别，如下所示：",-1),u=p(`<p>IDE 无法识别配置项时的示意图</p><p>遇到这种提示时，我们是可以忽略的，因为它不会影响到任何执行效果。但为了达到自动提示效果，我们就需要生成配置元数据。生成元数据的方法也很简单，直接通过 IDE 的&quot;Create metadata for &#39;springcss.order.point&#39;&quot;按钮，就可以选择创建配置元数据文件，这个文件的名称为 additional-spring-configuration-metadata.json，文件内容如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{&quot;properties&quot;: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;name&quot;: &quot;springcss.order.point&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;type&quot;: &quot;java.lang.String&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;description&quot;: &quot;A description for &#39;springcss.order.point&#39;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}]}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{&quot;properties&quot;: [{</span></span>
<span class="line"><span style="color:#24292E;">  &quot;name&quot;: &quot;springcss.order.point&quot;,</span></span>
<span class="line"><span style="color:#24292E;">  &quot;type&quot;: &quot;java.lang.String&quot;,</span></span>
<span class="line"><span style="color:#24292E;">  &quot;description&quot;: &quot;A description for &#39;springcss.order.point&#39;&quot;</span></span>
<span class="line"><span style="color:#24292E;">}]}</span></span></code></pre></div><p>现在，假如我们在 application.properties 文件中输入&quot;springcss&quot;，IDE 就会自动提示完整的配置项内容，效果如下所示：</p>`,4),d=p(`<p>IDE 自动提示 springcss 前缀的效果图</p><p>另外，假设我们需要为 springcss.order.point 配置项指定一个默认值，可以通过在元数据中添加一个&quot;defaultValue&quot;项来实现，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{&quot;properties&quot;: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;name&quot;: &quot;springcss.order.point&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;type&quot;: &quot;java.lang.String&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;description&quot;: &quot;&#39;springcss.order.point&#39; is userd for setting the point when dealing with an order.&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;defaultValue&quot;: 10</span></span>
<span class="line"><span style="color:#E1E4E8;">}]}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{&quot;properties&quot;: [{</span></span>
<span class="line"><span style="color:#24292E;">  &quot;name&quot;: &quot;springcss.order.point&quot;,</span></span>
<span class="line"><span style="color:#24292E;">  &quot;type&quot;: &quot;java.lang.String&quot;,</span></span>
<span class="line"><span style="color:#24292E;">  &quot;description&quot;: &quot;&#39;springcss.order.point&#39; is userd for setting the point when dealing with an order.&quot;,</span></span>
<span class="line"><span style="color:#24292E;">  &quot;defaultValue&quot;: 10</span></span>
<span class="line"><span style="color:#24292E;">}]}</span></span></code></pre></div><p>这时候，在 IDE 中设置这个配置项时，就会提出该配置项的默认值为 10，效果如下所示：</p>`,4),g=p(`<p>IDE 自动提示包含默认值的 springcss 前缀效果图</p><h3 id="如何组织和整合配置信息" tabindex="-1">如何组织和整合配置信息？ <a class="header-anchor" href="#如何组织和整合配置信息" aria-label="Permalink to &quot;如何组织和整合配置信息？&quot;">​</a></h3><p>在上一课时中，我们提到了 Profile 概念，Profile 可以认为是管理配置信息中的一种有效手段。今天，我们继续介绍另一种组织和整合配置信息的方法，这种方法同样依赖于前面介绍的 @ConfigurationProperties 注解。</p><h4 id="使用-propertysources-注解" tabindex="-1">使用 @PropertySources 注解 <a class="header-anchor" href="#使用-propertysources-注解" aria-label="Permalink to &quot;使用 @PropertySources 注解&quot;">​</a></h4><p>在使用 @ConfigurationProperties 注解时，我们可以和 @PropertySource 注解一起进行使用，从而指定从哪个具体的配置文件中获取配置信息。例如，在下面这个示例中，我们通过 @PropertySource 注解指定了 @ConfigurationProperties 注解中所使用的配置信息是从当前类路径下的 application.properties 配置文件中进行读取。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;springcss.order&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PropertySource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;classpath:application.properties&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringCssConfig</span><span style="color:#E1E4E8;"> {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;springcss.order&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PropertySource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;classpath:application.properties&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringCssConfig</span><span style="color:#24292E;"> {</span></span></code></pre></div><p>既然我们可以通过 @PropertySource 注解来指定一个配置文件的引用地址，那么显然也可以引入多个配置文件，这时候用到的是 @PropertySources 注解，使用方式如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PropertySources</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">PropertySource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:application.properties &quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">PropertySource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:redis.properties&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">PropertySource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:mq.properties&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringCssConfig</span><span style="color:#E1E4E8;"> {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PropertySources</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">PropertySource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;classpath:application.properties &quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">PropertySource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;classpath:redis.properties&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">PropertySource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;classpath:mq.properties&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringCssConfig</span><span style="color:#24292E;"> {</span></span></code></pre></div><p>这里，我们通过 @PropertySources 注解组合了多个 @PropertySource 注解中所指定的配置文件路径。SpringCssConfig 类可以同时引用所有这些配置文件中的配置项。</p><p>另一方面，我们也可以通过配置 spring.config.location 来改变配置文件的默认加载位置，从而实现对多个配置文件的同时加载。例如，如下所示的执行脚本会在启动 customerservice-0.0.1-SNAPSHOT.jar 时加载D盘下的 application.properties 文件，以及位于当前类路径下 config 目录中的所有配置文件：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java -jar customerservice-0.0.1-SNAPSHOT.jar --spring.config.location=file:///D:/application.properties, classpath:/config/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java -jar customerservice-0.0.1-SNAPSHOT.jar --spring.config.location=file:///D:/application.properties, classpath:/config/</span></span></code></pre></div><p>通过 spring.config.location 指定多个配置文件路径也是组织和整合配置信息的一种有效的实现方式。</p><h4 id="理解配置文件的加载顺序" tabindex="-1">理解配置文件的加载顺序 <a class="header-anchor" href="#理解配置文件的加载顺序" aria-label="Permalink to &quot;理解配置文件的加载顺序&quot;">​</a></h4><p>通过前面的示例，我们看到可以把配置文件保存在多个路径，而这些路径在加载配置文件时具有一定的顺序。Spring Boot 在启动时会扫描以下位置的 application.properties 或者 application.yml 文件作为全局配置文件：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">--file:./config/</span></span>
<span class="line"><span style="color:#E1E4E8;">--file:./</span></span>
<span class="line"><span style="color:#E1E4E8;">--classpath:/config/</span></span>
<span class="line"><span style="color:#E1E4E8;">--classpath:/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">--file:./config/</span></span>
<span class="line"><span style="color:#24292E;">--file:./</span></span>
<span class="line"><span style="color:#24292E;">--classpath:/config/</span></span>
<span class="line"><span style="color:#24292E;">--classpath:/</span></span></code></pre></div><p>以下是按照优先级从高到低的顺序，如下所示：</p>`,16),h=p(`<p>Spring Boot 会全部扫描上图中的这四个位置，扫描规则是高优先级配置内容会覆盖低优先级配置内容。而如果高优先级的配置文件中存在与低优先级配置文件不冲突的属性，则会形成一种互补配置，也就是说会整合所有不冲突的属性。</p><h3 id="如何覆写内置的配置类" tabindex="-1">如何覆写内置的配置类？ <a class="header-anchor" href="#如何覆写内置的配置类" aria-label="Permalink to &quot;如何覆写内置的配置类？&quot;">​</a></h3><p>关于 Spring Boot 配置体系，最后值得介绍的就是如何覆写它所提供的配置类。在前面的课程中，我们已经反复强调 Spring Boot 内置了大量的自动配置，如果我们不想使用这些配置，就需要对它们进行覆写。覆写的方法有很多，我们可以使用配置文件、Groovy 脚本以及 Java 代码。这里，我们就以Java代码为例来简单演示覆写配置类的实现方法。</p><p>在后续的&quot;如何使用 Spring 构建系统安全层？&quot;专题中，我们将会引入 Spring Security 框架来实现对服务访问的权限控制。在 Spring Security 体系中，设置用户认证信息所依赖的配置类是 WebSecurityConfigurer 类。顾名思义，这是一个设置 Web 安全的配置类。Spring Security 提供了 WebSecurityConfigurerAdapter 这个适配器类来简化该配置类的使用方式，我们可以继承 WebSecurityConfigurerAdapter 类并且覆写其中的 configure() 的方法来完成自定义的用户认证配置工作。典型的 WebSecurityConfigurerAdapter 子类及其代码实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringHCssWebSecurityConfigurer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebSecurityConfigurerAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> AuthenticationManager </span><span style="color:#B392F0;">authenticationManagerBean</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">authenticationManagerBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserDetailsService </span><span style="color:#B392F0;">userDetailsServiceBean</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">userDetailsServiceBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(AuthenticationManagerBuilder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">     builder.</span><span style="color:#B392F0;">inMemoryAuthentication</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withUser</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;springcss_user&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">password</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{noop}password1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">roles</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;USER&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">withUser</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;springcss_admin&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">password</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{noop}password2&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">roles</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;USER&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ADMIN&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringHCssWebSecurityConfigurer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebSecurityConfigurerAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AuthenticationManager </span><span style="color:#6F42C1;">authenticationManagerBean</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">authenticationManagerBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserDetailsService </span><span style="color:#6F42C1;">userDetailsServiceBean</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">userDetailsServiceBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(AuthenticationManagerBuilder </span><span style="color:#E36209;">builder</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">     builder.</span><span style="color:#6F42C1;">inMemoryAuthentication</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withUser</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;springcss_user&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">password</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{noop}password1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">roles</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;USER&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withUser</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;springcss_admin&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">password</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{noop}password2&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">roles</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;USER&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ADMIN&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>关于该类的具体展开超出了今天的讨论内容范围，我们在后续课程介绍到 Spring Security 时会对上述代码进行详细的展开，这里我们只需要知道，在 Spring Boot 中，提供了一些类的内置配置类，而开发人员可以通过构建诸如上述所示的 SpringCssWebSecurityConfigurer 类来对这些内置配置类进行覆写，从而实现自定义的配置信息。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>通常在 Web 应用程序的开发过程中，或多或少都会涉及定制化配置信息的使用。在今天的课程中，我们详细介绍了如何创建和使用自定义配置信息的实现过程，同时也给出了如何组织和整合各种配置信息的方法。</p><p>这里给你留一道思考题：使用 Spring Boot 时，在应用程序中嵌入自定义配置信息的方法有哪些？</p><p>04 讲中，我们还提到可以对 Spring Boot 内置的配置类进行覆写以便扩展功能。Spring Boot 通过自动配置机制为我们提供了大量内置配置类，在 05 讲中，我们将一起来讨论 Spring Boot 的自动配置实现原理。</p>`,10);function C(q,v,F,_,b,m){const s=e("Image");return t(),r("div",null,[i,a(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/72/01/Ciqc1F_AkJuAbymgAAA2lqR7sX4654.png"}),n(),E,y,a(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/72/0C/CgqCHl_AkKuAfadcAAAT9yjkbDc611.png"}),n(),u,a(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/72/0C/CgqCHl_AkLOAOewrAAAZuAPdrEs491.png"}),n(),d,a(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/72/01/Ciqc1F_AkL6AGrQwAAAa2ONwouI508.png"}),n(),g,a(s,{alt:"IiC6LiP3KXM49YyV__thumbnail.png",src:"https://s0.lgstatic.com/i/image/M00/73/15/CgqCHl_FvNiAAWTiAAAzJGEDupA763.png"}),n(),h])}const S=l(c,[["render",C]]);export{f as __pageData,S as default};
