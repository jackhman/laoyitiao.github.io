import{_ as n,j as a,o as p,g as l,k as o,Q as e,s as t}from"./chunks/framework.4e7d56ce.js";const D=JSON.parse('{"title":"命令行工具原理和实现 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5955) 26  如何设计一个“万能”项目脚手架？.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5955) 26  如何设计一个“万能”项目脚手架？.md","lastUpdated":1696417798000}'),c={name:"posts/frontEnd/105-前端基础建设与架构文档/(5955) 26  如何设计一个“万能”项目脚手架？.md"},r=e(`<p>脚手架是工程化中不可缺少的一环。究竟什么是脚手架呢？广义上来说，脚手架就是为了保证各施工过程顺利进行而搭设的工作平台。</p><p>编程领域的脚手架主要为了完成新项目的启动和搭建，能够帮助开发者提升效率和开发体验。对于前端来说，从零开始建立一个项目是复杂的，因此也就存在了较多类型的脚手架：</p><ul><li><p>Vue/React 框架类脚手架</p></li><li><p>Webpack 等构建配置类脚手架</p></li><li><p>混合脚手架，比如大家熟悉的 Vue-cli 或者 create-react-app</p></li></ul><p>这一讲我们就深入这些脚手架的原理进行讲解。</p><h3 id="命令行工具原理和实现" tabindex="-1">命令行工具原理和实现 <a class="header-anchor" href="#命令行工具原理和实现" aria-label="Permalink to &quot;命令行工具原理和实现&quot;">​</a></h3><p>现代脚手架离不开命令行工具，命令行工具即 Command-line interfaces（CLIs） ，是编程领域的重要概念，也是我们开发中经常接触到的工具之一。</p><p>比如 Webpack、Babel、npm、Yarn 等都是典型的命令行。此外，流畅的命令行能够迅速启动一个脚手架，实现<strong>自动化和智能化</strong>流程。这一部分，我们就使用 Node.js 来开发一个命令行。</p><p>我们先来看几个开发命令行工具的关键依赖。</p><ul><li><p><a href="http://npm.im/inquirer" target="_blank" rel="noreferrer"><code>inquirer</code></a>、<a href="http://npm.im/enquirer" target="_blank" rel="noreferrer"><code>enquirer</code></a>、<a href="https://npm.im/prompts" target="_blank" rel="noreferrer"><code>prompts</code></a>：可以处理复杂的用户输入，完成命令行输入交互。</p></li><li><p><a href="http://npm.im/chalk" target="_blank" rel="noreferrer"><code>chalk</code></a>、<a href="https://npm.im/kleur" target="_blank" rel="noreferrer"><code>kleur</code></a>：使终端可以输出彩色信息文案。</p></li><li><p><a href="http://npm.im/ora" target="_blank" rel="noreferrer"><code>ora</code></a>：可以让命令行出现好看的 Spinners。</p></li><li><p><a href="http://npm.im/boxen" target="_blank" rel="noreferrer"><code>boxen</code></a>：可以在命令行中画出 Boxes 区块。</p></li><li><p><a href="http://npm.im/listr" target="_blank" rel="noreferrer"><code>listr</code></a>：可以在命令行中画出进度列表。</p></li><li><p><a href="http://npm.im/meow" target="_blank" rel="noreferrer"><code>meow</code></a>、<a href="http://npm.im/arg" target="_blank" rel="noreferrer"><code>arg</code></a>：可以进行基础的命令行参数解析。</p></li><li><p><a href="http://npm.im/commander" target="_blank" rel="noreferrer"><code>commander</code></a>、<a href="https://www.npmjs.com/package/yargs" target="_blank" rel="noreferrer"><code>yargs</code></a>：可以进行更加复杂的命令行参数解析。</p></li></ul><p>我们的目标是支持以下面这种启动方式，建立我们的项目，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm init @</span><span style="color:#F97583;">lucas/</span><span style="color:#E1E4E8;">project</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm init @</span><span style="color:#D73A49;">lucas/</span><span style="color:#24292E;">project</span></span></code></pre></div><p>npm 6.1 及以上版本，我们都可以使用<code>npm init</code>或<code>yarn create</code>来启动我们的项目，比如下面两个命令就是等价的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 使用 Node.js</span></span>
<span class="line"><span style="color:#E1E4E8;">npm init @</span><span style="color:#F97583;">lucas/</span><span style="color:#E1E4E8;">project</span></span>
<span class="line"><span style="color:#E1E4E8;"># 使用 Yarn</span></span>
<span class="line"><span style="color:#E1E4E8;">yarn create @</span><span style="color:#F97583;">lucas/</span><span style="color:#E1E4E8;">project</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 使用 Node.js</span></span>
<span class="line"><span style="color:#24292E;">npm init @</span><span style="color:#D73A49;">lucas/</span><span style="color:#24292E;">project</span></span>
<span class="line"><span style="color:#24292E;"># 使用 Yarn</span></span>
<span class="line"><span style="color:#24292E;">yarn create @</span><span style="color:#D73A49;">lucas/</span><span style="color:#24292E;">project</span></span></code></pre></div><h4 id="启动命令行项目" tabindex="-1">启动命令行项目 <a class="header-anchor" href="#启动命令行项目" aria-label="Permalink to &quot;启动命令行项目&quot;">​</a></h4><p>下面开始进入开发，首先我们创建项目：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mkdir create</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">project </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> cd create</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">project</span></span>
<span class="line"><span style="color:#E1E4E8;">npm init </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mkdir create</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">project </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> cd create</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">project</span></span>
<span class="line"><span style="color:#24292E;">npm init </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">yes</span></span></code></pre></div><p>接着进入<code>create-project</code>文件中，创建<code>src</code>目录及<code>src/cli.js</code>文件，<code>cli.js</code>文件内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">cli</span><span style="color:#E1E4E8;">(args) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">cli</span><span style="color:#24292E;">(args) {</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，为了使我们的命令行可以在终端执行，我们新建<code>bin/</code>目录，并在其下创建一个<code>create-project</code>文件，代码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">!/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">env node</span></span>
<span class="line"><span style="color:#E1E4E8;">require </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;esm&#39;</span><span style="color:#E1E4E8;">)(module </span><span style="color:#6A737D;">/*, options*/</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../src/cli&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">cli</span><span style="color:#E1E4E8;">(process.argv);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#</span><span style="color:#D73A49;">!/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">env node</span></span>
<span class="line"><span style="color:#24292E;">require </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;esm&#39;</span><span style="color:#24292E;">)(module </span><span style="color:#6A737D;">/*, options*/</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../src/cli&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">cli</span><span style="color:#24292E;">(process.argv);</span></span></code></pre></div><p>上述代码中，我们使用了<a href="https://www.npmjs.com/package/esm" target="_blank" rel="noreferrer"><code>esm</code></a> 模块，这样就可以在其他文件中使用<code>import</code>关键字，即 ESM 模块规范了。我们在该入口文件中，引入<code>cli.js</code>并将命令行参数<a href="https://nodejs.org/api/process.html#process_process_argv" target="_blank" rel="noreferrer"><code>process.argv</code></a>传给<code>cli</code>函数执行。</p><p>当然，为了能够正常使用<a href="https://www.npmjs.com/package/esm" target="_blank" rel="noreferrer"><code>esm</code></a> 模块，我们需要先安装，执行<code>npm install esm</code>。</p><p>此时 package.json 内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@lucas/create-project&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1.0.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;A CLI to bootstrap my new projects&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;src/index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bin&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;@lucas/create-project&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bin/create-project&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;create-project&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bin/create-project&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;publishConfig&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;access&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;echo </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Error: no test specified</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;cli&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;create-project&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> ],</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;author&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;YOUR_AUTHOR&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;license&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;MIT&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dependencies&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;esm&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;^3.2.18&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@lucas/create-project&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1.0.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A CLI to bootstrap my new projects&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;src/index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bin&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;@lucas/create-project&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bin/create-project&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;create-project&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bin/create-project&quot;</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;publishConfig&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;access&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;echo </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Error: no test specified</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;cli&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;create-project&quot;</span></span>
<span class="line"><span style="color:#24292E;"> ],</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;author&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;YOUR_AUTHOR&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;license&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;MIT&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dependencies&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;esm&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;^3.2.18&quot;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里需要注意的是 <code>bin</code>字段，我们注册了两个可用命令：一个是带有 npm 命名 scope 的，一个是常规的<code>create-project</code>命令。</p><p>为了调试方便，我们使用<a href="https://docs.npmjs.com/cli/link.html" target="_blank" rel="noreferrer"><code>npm link</code></a>命令进行调试，在终端中项目目录下执行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm link</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm link</span></span></code></pre></div><p>上述命令可以在全局范围内添加一个软链到当前项目中。我们执行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">create</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">project </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">create</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">project </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">yes</span></span></code></pre></div><p>就会得到下面这样的输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[ </span><span style="color:#9ECBFF;">&#39;/usr/local/Cellar/node/11.6.0/bin/node&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;/Users/dkundel/dev/create-project/bin/create-project&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;--yes&#39;</span><span style="color:#E1E4E8;"> ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[ </span><span style="color:#032F62;">&#39;/usr/local/Cellar/node/11.6.0/bin/node&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;/Users/dkundel/dev/create-project/bin/create-project&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;--yes&#39;</span><span style="color:#24292E;"> ]</span></span></code></pre></div><p>该输出，就对应了代码中的<a href="https://nodejs.org/api/process.html#process_process_argv" target="_blank" rel="noreferrer"><code>process.argv</code></a>。</p><h4 id="解析处理命令行输入" tabindex="-1">解析处理命令行输入 <a class="header-anchor" href="#解析处理命令行输入" aria-label="Permalink to &quot;解析处理命令行输入&quot;">​</a></h4><p>在解析处理命令行输入之前，我们需要设计命令行支持的几个选项，如下。</p><ul><li><p><code>[template]</code>：支持默认的几种模板类型，用户可以通过 select 进行选择。</p></li><li><p><code>--git</code>：等同于<code>git init</code>去创建一个新的 Git 项目。</p></li><li><p><code>--install</code>：支持自动下载项目依赖。</p></li><li><p><code>--yes</code>：跳过命令行交互，直接使用默认配置。</p></li></ul><p>我们利用<code>inquirer</code>使得命令行支持用户交互，同时使用<code>arg</code>来解析命令行参数，安装相关依赖命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install inquirer arg</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install inquirer arg</span></span></code></pre></div><p>接下来编写命令行参数解析逻辑，在<code>cli.js</code>中添加：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> arg from &#39;arg&#39;;</span></span>
<span class="line"><span style="color:#6A737D;">// 解析命令行参数为 options</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseArgumentsIntoOptions</span><span style="color:#E1E4E8;">(rawArgs) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用 arg 进行解析</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arg</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&#39;--git&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&#39;--yes&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&#39;--install&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&#39;-g&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;--git&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&#39;-y&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;--yes&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&#39;-i&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;--install&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">     argv</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> rawArgs.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   skipPrompts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args[</span><span style="color:#9ECBFF;">&#39;--yes&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   git</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args[</span><span style="color:#9ECBFF;">&#39;--git&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args._[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">   runInstall</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args[</span><span style="color:#9ECBFF;">&#39;--install&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">cli</span><span style="color:#E1E4E8;">(args) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 获取命令行配置</span></span>
<span class="line"><span style="color:#E1E4E8;"> let options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseArgumentsIntoOptions</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> arg from &#39;arg&#39;;</span></span>
<span class="line"><span style="color:#6A737D;">// 解析命令行参数为 options</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseArgumentsIntoOptions</span><span style="color:#24292E;">(rawArgs) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 使用 arg 进行解析</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arg</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&#39;--git&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Boolean,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&#39;--yes&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Boolean,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&#39;--install&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Boolean,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&#39;-g&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;--git&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&#39;-y&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;--yes&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&#39;-i&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;--install&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">     argv</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> rawArgs.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   skipPrompts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args[</span><span style="color:#032F62;">&#39;--yes&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   git</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args[</span><span style="color:#032F62;">&#39;--git&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args._[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">   runInstall</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args[</span><span style="color:#032F62;">&#39;--install&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">cli</span><span style="color:#24292E;">(args) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 获取命令行配置</span></span>
<span class="line"><span style="color:#24292E;"> let options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseArgumentsIntoOptions</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码很好理解，我已经加入了相关注释。接下来，我们实现使用默认配置和交互式配置选择逻辑，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> arg from &#39;arg&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> inquirer from &#39;inquirer&#39;;</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseArgumentsIntoOptions</span><span style="color:#E1E4E8;">(rawArgs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">async function </span><span style="color:#B392F0;">promptForMissingOptions</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 默认使用名为 JavaScript 的模板</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> defaultTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;JavaScript&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用默认模板则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.skipPrompts) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     ...options,</span></span>
<span class="line"><span style="color:#E1E4E8;">     template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.template </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> defaultTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">   };</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 准备交互式问题 </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> questions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">options.template) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   questions.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">     type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;list&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;template&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Please choose which project template to use&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     choices</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;JavaScript&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;TypeScript&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> defaultTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">   });</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">options.git) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   questions.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">     type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;confirm&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;git&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Initialize a git repository?&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   });</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用 inquirer 进行交互式查询，并获取用户答案选项</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> answers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await inquirer.</span><span style="color:#B392F0;">prompt</span><span style="color:#E1E4E8;">(questions);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...options,</span></span>
<span class="line"><span style="color:#E1E4E8;">   template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.template </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> answers.template,</span></span>
<span class="line"><span style="color:#E1E4E8;">   git</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.git </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> answers.git,</span></span>
<span class="line"><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">export async function </span><span style="color:#B392F0;">cli</span><span style="color:#E1E4E8;">(args) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> let options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseArgumentsIntoOptions</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">promptForMissingOptions</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> arg from &#39;arg&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> inquirer from &#39;inquirer&#39;;</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseArgumentsIntoOptions</span><span style="color:#24292E;">(rawArgs) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">async function </span><span style="color:#6F42C1;">promptForMissingOptions</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 默认使用名为 JavaScript 的模板</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> defaultTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;JavaScript&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 使用默认模板则直接返回</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.skipPrompts) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     ...options,</span></span>
<span class="line"><span style="color:#24292E;">     template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.template </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> defaultTemplate,</span></span>
<span class="line"><span style="color:#24292E;">   };</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 准备交互式问题 </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> questions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">options.template) {</span></span>
<span class="line"><span style="color:#24292E;">   questions.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">     type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;list&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;template&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Please choose which project template to use&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     choices</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;JavaScript&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;TypeScript&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> defaultTemplate,</span></span>
<span class="line"><span style="color:#24292E;">   });</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">options.git) {</span></span>
<span class="line"><span style="color:#24292E;">   questions.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">     type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;confirm&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;git&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Initialize a git repository?&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   });</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 使用 inquirer 进行交互式查询，并获取用户答案选项</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> answers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await inquirer.</span><span style="color:#6F42C1;">prompt</span><span style="color:#24292E;">(questions);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   ...options,</span></span>
<span class="line"><span style="color:#24292E;">   template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.template </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> answers.template,</span></span>
<span class="line"><span style="color:#24292E;">   git</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.git </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> answers.git,</span></span>
<span class="line"><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">export async function </span><span style="color:#6F42C1;">cli</span><span style="color:#24292E;">(args) {</span></span>
<span class="line"><span style="color:#24292E;"> let options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseArgumentsIntoOptions</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">promptForMissingOptions</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样一来，我们就可以获取到类似：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">	skipPrompts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    git</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;JavaScript&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runInstall</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">	skipPrompts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    git</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;JavaScript&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    runInstall</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相关的配置了。</p><p>下面我们需要完成下载模板到本地的逻辑，我们事先准备好两种名为<code>typescript</code>和<code>javascript</code>的模板，并将相关的模板存储在项目的根目录中。当然你在实际开发应用中，可以内置更多的模板。</p><p>我们使用<code>ncp</code>包实现跨平台递归拷贝文件，使用<code>chalk</code>做个性化输出。安装相关依赖如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install ncp chalk</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install ncp chalk</span></span></code></pre></div><p>在<code>src/</code>目录下，创建新的文件<code>main.js</code>，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> chalk from &#39;chalk&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> fs from &#39;fs&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ncp from &#39;ncp&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> path from &#39;path&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { promisify } from &#39;util&#39;;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> access </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">promisify</span><span style="color:#E1E4E8;">(fs.access);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> copy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">promisify</span><span style="color:#E1E4E8;">(ncp);</span></span>
<span class="line"><span style="color:#6A737D;">// 递归拷贝文件</span></span>
<span class="line"><span style="color:#E1E4E8;">async function </span><span style="color:#B392F0;">copyTemplateFiles</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(options.templateDirectory, options.targetDirectory, {</span></span>
<span class="line"><span style="color:#E1E4E8;">   clobber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建项目</span></span>
<span class="line"><span style="color:#E1E4E8;">export async function </span><span style="color:#B392F0;">createProject</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...options,</span></span>
<span class="line"><span style="color:#E1E4E8;">   targetDirectory</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.targetDirectory </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> currentFileUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i<wbr>mport.meta.url;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> templateDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(currentFileUrl).pathname,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&#39;../../templates&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   options.template.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;"> options.templateDirectory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> templateDir;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> 	 </span><span style="color:#6A737D;">// 判断模板是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">   await </span><span style="color:#B392F0;">access</span><span style="color:#E1E4E8;">(templateDir, fs.constants.R_OK);</span></span>
<span class="line"><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> 	 </span><span style="color:#6A737D;">// 模板不存在 </span></span>
<span class="line"><span style="color:#E1E4E8;">   console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%s Invalid template name&#39;</span><span style="color:#E1E4E8;">, chalk.red.</span><span style="color:#B392F0;">bold</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ERROR&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">   process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 拷贝模板</span></span>
<span class="line"><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">copyTemplateFiles</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%s Project ready&#39;</span><span style="color:#E1E4E8;">, chalk.green.</span><span style="color:#B392F0;">bold</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;DONE&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> chalk from &#39;chalk&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fs from &#39;fs&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ncp from &#39;ncp&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> path from &#39;path&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { promisify } from &#39;util&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> access </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">promisify</span><span style="color:#24292E;">(fs.access);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> copy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">promisify</span><span style="color:#24292E;">(ncp);</span></span>
<span class="line"><span style="color:#6A737D;">// 递归拷贝文件</span></span>
<span class="line"><span style="color:#24292E;">async function </span><span style="color:#6F42C1;">copyTemplateFiles</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(options.templateDirectory, options.targetDirectory, {</span></span>
<span class="line"><span style="color:#24292E;">   clobber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建项目</span></span>
<span class="line"><span style="color:#24292E;">export async function </span><span style="color:#6F42C1;">createProject</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   ...options,</span></span>
<span class="line"><span style="color:#24292E;">   targetDirectory</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.targetDirectory </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> currentFileUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i<wbr>mport.meta.url;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> templateDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(currentFileUrl).pathname,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&#39;../../templates&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   options.template.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;"> options.templateDirectory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> templateDir;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> 	 </span><span style="color:#6A737D;">// 判断模板是否存在</span></span>
<span class="line"><span style="color:#24292E;">   await </span><span style="color:#6F42C1;">access</span><span style="color:#24292E;">(templateDir, fs.constants.R_OK);</span></span>
<span class="line"><span style="color:#24292E;"> } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;"> 	 </span><span style="color:#6A737D;">// 模板不存在 </span></span>
<span class="line"><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%s Invalid template name&#39;</span><span style="color:#24292E;">, chalk.red.</span><span style="color:#6F42C1;">bold</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ERROR&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">   process.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 拷贝模板</span></span>
<span class="line"><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">copyTemplateFiles</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%s Project ready&#39;</span><span style="color:#24292E;">, chalk.green.</span><span style="color:#6F42C1;">bold</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;DONE&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码我们通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import%2Emeta" target="_blank" rel="noreferrer"><code>i<wbr>mport.meta.url</code></a>来获取当前模块的 URL 路径，并通过<code>fs.constants.R_OK</code>判断对应模板是否存在。此时<code>cli.js</code>关键内容为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> arg from &#39;arg&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> inquirer from &#39;inquirer&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createProject } from &#39;./main&#39;;</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseArgumentsIntoOptions</span><span style="color:#E1E4E8;">(rawArgs) {</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">async function </span><span style="color:#B392F0;">promptForMissingOptions</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">export async function </span><span style="color:#B392F0;">cli</span><span style="color:#E1E4E8;">(args) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> let options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseArgumentsIntoOptions</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">promptForMissingOptions</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">createProject</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> arg from &#39;arg&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> inquirer from &#39;inquirer&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createProject } from &#39;./main&#39;;</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseArgumentsIntoOptions</span><span style="color:#24292E;">(rawArgs) {</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">async function </span><span style="color:#6F42C1;">promptForMissingOptions</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">export async function </span><span style="color:#6F42C1;">cli</span><span style="color:#24292E;">(args) {</span></span>
<span class="line"><span style="color:#24292E;"> let options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseArgumentsIntoOptions</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">promptForMissingOptions</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">createProject</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，我们需要完成<code>git</code>的初始化以及依赖安装工作，这时候需要用到以下内容。</p><ul><li><p><a href="http://npm.im/execa" target="_blank" rel="noreferrer"><code>execa</code></a>：允许开发中使用类似<code>git</code>的外部命令。</p></li><li><p><a href="http://npm.im/pkg-install" target="_blank" rel="noreferrer"><code>pkg-install</code></a>：使用<code>yarn install</code>或<code>npm install</code>安装依赖。</p></li><li><p><a href="http://npm.im/listr" target="_blank" rel="noreferrer"><code>listr</code></a>：给出当前进度 progress。</p></li></ul><p>执行安装依赖：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install execa pkg</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">install listr</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install execa pkg</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">install listr</span></span></code></pre></div><p>更新<code>main.js</code>为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> chalk from &#39;chalk&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> fs from &#39;fs&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ncp from &#39;ncp&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> path from &#39;path&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { promisify } from &#39;util&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> execa from &#39;execa&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Listr from &#39;listr&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { projectInstall } from &#39;pkg</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">install&#39;;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> access </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">promisify</span><span style="color:#E1E4E8;">(fs.access);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> copy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">promisify</span><span style="color:#E1E4E8;">(ncp);</span></span>
<span class="line"><span style="color:#6A737D;">// 拷贝模板</span></span>
<span class="line"><span style="color:#E1E4E8;">async function </span><span style="color:#B392F0;">copyTemplateFiles</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(options.templateDirectory, options.targetDirectory, {</span></span>
<span class="line"><span style="color:#E1E4E8;">   clobber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化 git</span></span>
<span class="line"><span style="color:#E1E4E8;">async function </span><span style="color:#B392F0;">initGit</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 执行 git init</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">execa</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;git&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&#39;init&#39;</span><span style="color:#E1E4E8;">], {</span></span>
<span class="line"><span style="color:#E1E4E8;">   cwd</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.targetDirectory,</span></span>
<span class="line"><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.failed) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Failed to initialize git&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建项目</span></span>
<span class="line"><span style="color:#E1E4E8;">export async function </span><span style="color:#B392F0;">createProject</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...options,</span></span>
<span class="line"><span style="color:#E1E4E8;">   targetDirectory</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.targetDirectory </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> templateDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(i<wbr>mport.meta.url).pathname,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&#39;../../templates&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   options.template</span></span>
<span class="line"><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;"> options.templateDirectory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> templateDir;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> 	 </span><span style="color:#6A737D;">// 判断模板是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">   await </span><span style="color:#B392F0;">access</span><span style="color:#E1E4E8;">(templateDir, fs.constants.R_OK);</span></span>
<span class="line"><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%s Invalid template name&#39;</span><span style="color:#E1E4E8;">, chalk.red.</span><span style="color:#B392F0;">bold</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ERROR&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">   process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 声明 tasks</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> tasks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Listr</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">     title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Copy project files&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     task</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copyTemplateFiles</span><span style="color:#E1E4E8;">(options),</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">     title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Initialize git&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     task</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initGit</span><span style="color:#E1E4E8;">(options),</span></span>
<span class="line"><span style="color:#E1E4E8;">     enabled</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> options.git,</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">     title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Install dependencies&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     task</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">projectInstall</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">         cwd</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.targetDirectory,</span></span>
<span class="line"><span style="color:#E1E4E8;">       }),</span></span>
<span class="line"><span style="color:#E1E4E8;">     skip</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">options.runInstall</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Pass --install to automatically install dependencies&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined,</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;"> ]);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 并行执行 tasks</span></span>
<span class="line"><span style="color:#E1E4E8;"> await tasks.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%s Project ready&#39;</span><span style="color:#E1E4E8;">, chalk.green.</span><span style="color:#B392F0;">bold</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;DONE&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> chalk from &#39;chalk&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fs from &#39;fs&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ncp from &#39;ncp&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> path from &#39;path&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { promisify } from &#39;util&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> execa from &#39;execa&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Listr from &#39;listr&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { projectInstall } from &#39;pkg</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">install&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> access </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">promisify</span><span style="color:#24292E;">(fs.access);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> copy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">promisify</span><span style="color:#24292E;">(ncp);</span></span>
<span class="line"><span style="color:#6A737D;">// 拷贝模板</span></span>
<span class="line"><span style="color:#24292E;">async function </span><span style="color:#6F42C1;">copyTemplateFiles</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(options.templateDirectory, options.targetDirectory, {</span></span>
<span class="line"><span style="color:#24292E;">   clobber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化 git</span></span>
<span class="line"><span style="color:#24292E;">async function </span><span style="color:#6F42C1;">initGit</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 执行 git init</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">execa</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;git&#39;</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&#39;init&#39;</span><span style="color:#24292E;">], {</span></span>
<span class="line"><span style="color:#24292E;">   cwd</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.targetDirectory,</span></span>
<span class="line"><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.failed) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Failed to initialize git&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建项目</span></span>
<span class="line"><span style="color:#24292E;">export async function </span><span style="color:#6F42C1;">createProject</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   ...options,</span></span>
<span class="line"><span style="color:#24292E;">   targetDirectory</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.targetDirectory </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> templateDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(i<wbr>mport.meta.url).pathname,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&#39;../../templates&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   options.template</span></span>
<span class="line"><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;"> options.templateDirectory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> templateDir;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> 	 </span><span style="color:#6A737D;">// 判断模板是否存在</span></span>
<span class="line"><span style="color:#24292E;">   await </span><span style="color:#6F42C1;">access</span><span style="color:#24292E;">(templateDir, fs.constants.R_OK);</span></span>
<span class="line"><span style="color:#24292E;"> } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%s Invalid template name&#39;</span><span style="color:#24292E;">, chalk.red.</span><span style="color:#6F42C1;">bold</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ERROR&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">   process.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 声明 tasks</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> tasks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Listr</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">     title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Copy project files&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     task</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copyTemplateFiles</span><span style="color:#24292E;">(options),</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">     title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Initialize git&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     task</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initGit</span><span style="color:#24292E;">(options),</span></span>
<span class="line"><span style="color:#24292E;">     enabled</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> options.git,</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">     title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Install dependencies&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     task</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">projectInstall</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">         cwd</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.targetDirectory,</span></span>
<span class="line"><span style="color:#24292E;">       }),</span></span>
<span class="line"><span style="color:#24292E;">     skip</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">options.runInstall</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Pass --install to automatically install dependencies&#39;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined,</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;"> ]);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 并行执行 tasks</span></span>
<span class="line"><span style="color:#24292E;"> await tasks.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%s Project ready&#39;</span><span style="color:#24292E;">, chalk.green.</span><span style="color:#6F42C1;">bold</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;DONE&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样一来，我们的命令行就大功告成了。</p><p>接下来我们主要谈谈模板维护问题，上述实现中，模板维护在了本地。为了更大范围的合作，模板可以共享到 GitHub 中。我们可以在 package.json 文件中声明 files 字段，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;files&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;bin/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;src/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;templates/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;files&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;bin/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;src/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;templates/&quot;</span></span>
<span class="line"><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以此来声明哪些文件可以被<code>npm publish</code>出去。</p><p>另外一种做法是将模板单独维护到一个 GitHub 仓库当中。在创建一个项目时，我们使用 <a href="https://www.npmjs.com/package/download-git-repo" target="_blank" rel="noreferrer">download-git-repo</a>来下载模板。</p><h3 id="从命令行到万能脚手架" tabindex="-1">从命令行到万能脚手架 <a class="header-anchor" href="#从命令行到万能脚手架" aria-label="Permalink to &quot;从命令行到万能脚手架&quot;">​</a></h3><p>前面我们分析了一个命令行的实现和开发原理，这些内容并不复杂。但如何从一个命令行升级到一个万能脚手架呢？我们继续探讨。</p><p>使用命令行启动并创建一个基于模板的项目只能说是一个脚手架的雏形。对比大家熟悉的<code>vue-cli</code>、<code>create-react-app</code>、<code>@tarojs/cli</code>、<code>umi</code>等，我们还需要从可伸缩性、用户友好性方面考虑：</p><ul><li><p>如何使模板支持版本管理</p></li><li><p>模板如何进行扩展</p></li><li><p>如何进行版本检查和更新</p></li><li><p>如何自定义构建</p></li></ul><p>下面我们分别来讨论。</p><p>模板支持版本管理可以使用 npm 维护模板，这样借助 npm 的版本管理，我们可以天然地支持不同版本的模板。当然在脚手架的设计中，要加入<strong>对版本的选择和处理</strong>。</p><p>如前文所说，模板扩展可以借助中心化手段，集成开发者力量，提供模板市场。这里需要注意的是，针对不同模板或功能区块的<strong>可插拔性</strong>是非常重要的。下面我们会具体展开。</p><p>版本检查可以使用 npm view @lucas/create-project version\\ 来进行版本检查，并根据环境版本，提示用户更新。</p><p>构建是一个老大难问题，不同项目的构建需求是不同的。参照<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5952" target="_blank" rel="noreferrer">第 23 讲&quot;npm scripts：打造一体化的构建和部署流程&quot;</a>所讲，不同构建脚本可以考虑<strong>单独抽象，提供可插拔式封装</strong> 。比如<a href="https://github.com/yanhaijing/jslib-base/tree/master/packages" target="_blank" rel="noreferrer">jslib-base</a>这个库的设计，这也是一个&quot;万能脚手架&quot;。</p><p>我们具体来看，使用脚手架初始化一个项目的过程，本质是根据输入信息进行模板填充。比如，如果开发者选择使用 TypeScript 以及英语环境构建项目，并使用 rollup 进行构建。那么核心流程中在初始化 rollup.config.js 文件时，我们读取 rollup.js.tmpl，并将相关信息（比如对 TypeScript 的编译）填写到模板中。</p><p>类似的情况还有初始化 .eslintrc.ts.json、package.json、CHANGELOG.en.md、README.en.md，以及 doc.en.md 等。</p><p>所有这些文件的生成过程都需要<strong>可插拔，更理想的是，这些插件是一个独立的运行时</strong>。因此我们可以将每一个脚手架文件（即模板文件）的初始化视作一个独立的应用，由命令行统一指挥调度。</p><p>比如 <a href="https://github.com/yanhaijing/jslib-base/tree/master/packages" target="_blank" rel="noreferrer">jslib-base</a> 这个库对于 rollup 构建的处理，支持开发者传入 option，由命令行处理函数，结合不同的配置版本进行自定义分配。具体代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> util </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@js-lib/util&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(cmdPath, name, option) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// type 为 js 和 ts 两种</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> option.type;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// module 分为：umd/esm/commonjs</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> option.module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> option.module.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((prev, name) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (prev[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name, prev), ({}));</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// rollup 基本配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    util.</span><span style="color:#B392F0;">copyTmpl</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, \`.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${type}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rollup.js.tmpl\`),</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(cmdPath, name, </span><span style="color:#9ECBFF;">&#39;config/rollup.js&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        option,</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// umd 模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (module.umd) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        util.</span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, \`.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${type}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rollup.config.aio.js\`),</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(cmdPath, name, </span><span style="color:#9ECBFF;">&#39;config/rollup.config.aio.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// esm 模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (module.esm) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        util.</span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, \`.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${type}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rollup.config.esm.js\`),</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(cmdPath, name, </span><span style="color:#9ECBFF;">&#39;config/rollup.config.esm.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// commonjs 模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (module.commonjs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        util.</span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, \`.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${type}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rollup.config.js\`),</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(cmdPath, name, </span><span style="color:#9ECBFF;">&#39;config/rollup.config.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    util.</span><span style="color:#B392F0;">mergeTmpl2JSON</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, \`.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${type}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">package.json.tmpl\`),</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(cmdPath, name, </span><span style="color:#9ECBFF;">&#39;package.json&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        option,</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;js&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        util.</span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, \`.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">js</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.babelrc\`),</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(cmdPath, name, </span><span style="color:#9ECBFF;">&#39;.babelrc&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ts&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        util.</span><span style="color:#B392F0;">copyFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, \`.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tsconfig.json\`),</span></span>
<span class="line"><span style="color:#E1E4E8;">            path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(cmdPath, name, </span><span style="color:#9ECBFF;">&#39;tsconfig.json&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    init</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> init,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> util </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@js-lib/util&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(cmdPath, name, option) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// type 为 js 和 ts 两种</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> option.type;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// module 分为：umd/esm/commonjs</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> option.module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> option.module.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((prev, name) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (prev[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name, prev), ({}));</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// rollup 基本配置</span></span>
<span class="line"><span style="color:#24292E;">    util.</span><span style="color:#6F42C1;">copyTmpl</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, \`.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\${type}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rollup.js.tmpl\`),</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(cmdPath, name, </span><span style="color:#032F62;">&#39;config/rollup.js&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        option,</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// umd 模式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (module.umd) {</span></span>
<span class="line"><span style="color:#24292E;">        util.</span><span style="color:#6F42C1;">copyFile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, \`.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\${type}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rollup.config.aio.js\`),</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(cmdPath, name, </span><span style="color:#032F62;">&#39;config/rollup.config.aio.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// esm 模式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (module.esm) {</span></span>
<span class="line"><span style="color:#24292E;">        util.</span><span style="color:#6F42C1;">copyFile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, \`.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\${type}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rollup.config.esm.js\`),</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(cmdPath, name, </span><span style="color:#032F62;">&#39;config/rollup.config.esm.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// commonjs 模式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (module.commonjs) {</span></span>
<span class="line"><span style="color:#24292E;">        util.</span><span style="color:#6F42C1;">copyFile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, \`.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\${type}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rollup.config.js\`),</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(cmdPath, name, </span><span style="color:#032F62;">&#39;config/rollup.config.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    util.</span><span style="color:#6F42C1;">mergeTmpl2JSON</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, \`.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\${type}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">package.json.tmpl\`),</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(cmdPath, name, </span><span style="color:#032F62;">&#39;package.json&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        option,</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;js&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        util.</span><span style="color:#6F42C1;">copyFile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, \`.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">js</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.babelrc\`),</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(cmdPath, name, </span><span style="color:#032F62;">&#39;.babelrc&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ts&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        util.</span><span style="color:#6F42C1;">copyFile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, \`.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ts</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tsconfig.json\`),</span></span>
<span class="line"><span style="color:#24292E;">            path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(cmdPath, name, </span><span style="color:#032F62;">&#39;tsconfig.json&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    init</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> init,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上代码，根据用户输入，使用了不同版本的 rollup 构建内容。</p><p>相信你了解了这些内容，对于实现一个自己的 create-react-app、vue-cli 会更有心得和启发。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们从开发一个命令行入手，分析了实现一个脚手架的方方面面。实现一个企业级脚手架需要不断打磨和优化，不断增强用户体验和可操作性，比如处理边界情况、终端提示等。更重要的是，对构建逻辑的抽象和封装，根据业务需求，不断扩展命令和模板。</p><p>本讲内容总结如下：</p>`,81),E=t("p",null,"从 0 到 1 简单，但是从 1 开始出发，就需要开发者不断思考和总结。下一讲我们将开启 Node.js 的学习，来实现一个 SSR 应用。我们会直入正题，不再过多学习 Node.js 的基础内容，也请你提前做好准备。",-1);function y(i,F,d,u,m,g){const s=a("Image");return p(),l("div",null,[r,o(s,{alt:"前端基建 金句.png",src:"https://s0.lgstatic.com/i/image6/M01/17/03/Cgp9HWBHK1WAeFWWAAdEzv-BDFI037.png"}),E])}const A=n(c,[["render",y]]);export{D as __pageData,A as default};
