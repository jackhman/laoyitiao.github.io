import{_ as o,j as e,o as t,g as c,k as p,h as s,s as a,Q as l}from"./chunks/framework.4e7d56ce.js";const j=JSON.parse('{"title":"10你的第一个API测试框架（二）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4829) 10  你的第一个 API 测试框架（二）.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4829) 10  你的第一个 API 测试框架（二）.md","lastUpdated":1696682708000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4829) 10  你的第一个 API 测试框架（二）.md"},y=a("h1",{id:"_10你的第一个api测试框架-二",tabindex:"-1"},[s("10你的第一个API测试框架（二） "),a("a",{class:"header-anchor",href:"#_10你的第一个api测试框架-二","aria-label":'Permalink to "10你的第一个API测试框架（二）"'},"​")],-1),i=a("p",null,'欢迎来到第 10 课时，进入"API 测试框架"的第二个部分。上一课时我们介绍了 Requests，以及测试框架核心模块 pytest，这一课时我将深入讲解 pytest 的使用，这节课的知识内容如下。',-1),E=l(`<h3 id="融会贯通-pytest-使用" tabindex="-1">融会贯通 pytest 使用 <a class="header-anchor" href="#融会贯通-pytest-使用" aria-label="Permalink to &quot;融会贯通 pytest 使用&quot;">​</a></h3><h4 id="_1-pytest-运行方式详解及其参数" tabindex="-1">1. pytest 运行方式详解及其参数 <a class="header-anchor" href="#_1-pytest-运行方式详解及其参数" aria-label="Permalink to &quot;1. pytest 运行方式详解及其参数&quot;">​</a></h4><p>pytest 有两个测试运行方式，命令行运行和 pytest.main() 运行。</p><ul><li><strong>命令行运行</strong></li></ul><p>pytest 支持在命令行中以如下方式运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> python </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m pytest [</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> python </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m pytest [</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">]</span></span></code></pre></div><ul><li><strong>pytest.main() 运行</strong></li></ul><p>除了命令行运行方式外，pytest 还支持在程序中运行，在程序中运行的命令如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest.main([</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest.main([</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">])</span></span></code></pre></div><p>不管是使用命令行运行或者使用 pytest.main() 的方式运行，它们支持的参数都是一样的。<strong>需要注意的是：pytest 的参数必须放在一个 list 或者 tuple 里。</strong></p><p><strong>pytest 参数</strong></p><p>pytest 支持特别多的参数，具体有哪些参数可以通过如下命令查看：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">help</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">help</span></span></code></pre></div><p>在这里，我列出我们在工作中常用的几个。</p><p><strong>-m: 用表达式指定多个标记名。</strong></p><p>pytest 提供了一个装饰器 @pytest.mark.xxx，用于标记测试并分组（xxx是你定义的分组名），以便你快速选中并运行，各个分组直接用 and、or 来分割。</p><p><strong>-v: 运行时输出更详细的用例执行信息</strong></p><p>不使用 -v 参数，运行时不会显示运行的具体测试用例名称；使用 -v 参数，会在 console 里打印出具体哪条测试用例被运行。</p><p><strong>-q: 类似 unittest 里的 verbosity，用来简化运行输出信息。</strong></p><p>使用 -q 运行测试用例，仅仅显示很简单的运行信息， 例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.s..   [</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> passed, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> skipped in 9.</span><span style="color:#FDAEB7;font-style:italic;">60s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.s..   [</span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> passed, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> skipped in 9.</span><span style="color:#B31D28;font-style:italic;">60s</span></span></code></pre></div><p><strong>-k: 可以通过表达式运行指定的测试用例。</strong></p><p>它是一种模糊匹配，用 and 或 or 区分各个关键字，匹配范围有文件名、类名、函数名。</p><p><strong>-x: 出现一条测试用例失败就退出测试。</strong></p><p>在调试时，这个功能非常有用。当出现测试失败时，停止运行后续的测试。</p><p>以上这些命令，我将把它们融合进日常工作场景，逐个向大家介绍。</p><h4 id="_2-运行指定文件夹下的测试用例" tabindex="-1">2.运行指定文件夹下的测试用例 <a class="header-anchor" href="#_2-运行指定文件夹下的测试用例" aria-label="Permalink to &quot;2.运行指定文件夹下的测试用例&quot;">​</a></h4><p>pytest 支持更简单的方法实现指定文件夹运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 执行所有当前文件夹及子文件夹下的所有测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest .</span></span>
<span class="line"><span style="color:#6A737D;"># 执行跟当前文件夹同级的tests文件夹及子文件夹下的所有测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest ..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 执行所有当前文件夹及子文件夹下的所有测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest .</span></span>
<span class="line"><span style="color:#6A737D;"># 执行跟当前文件夹同级的tests文件夹及子文件夹下的所有测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tests</span></span></code></pre></div><p>除此之外，pytest 还允许你通过更复杂的方式来<strong>挑选测试用例执行</strong>。例如，我们可以通过 -m 或者 -k 的参数，把我们的测试用例限制在某一个文件夹下，这样就实现了仅允许指定文件夹下的测试用例。</p><blockquote><p>关于 -m 和 -k 的使用，请看接下来我要讲的 <strong>&quot;动态挑选测试用例运行 --- 按 Tag&quot;</strong> 及 <strong>&quot;动态挑选测试用例运行 --- 按名称&quot;</strong> 这两个部分。</p></blockquote><h4 id="_3-选择测试用例执行" tabindex="-1">3.选择测试用例执行 <a class="header-anchor" href="#_3-选择测试用例执行" aria-label="Permalink to &quot;3.选择测试用例执行&quot;">​</a></h4><p>pytest 里选择测试用例执行有很多方法，可以按照测试文件夹、测试文件、测试类和测试方法四种。</p><ul><li><strong>按照测试文件夹执行</strong></li></ul><p>在刚刚**&quot;运行指定文件夹下的测试用例&quot;**中已经详细说明，我不再赘述。</p><ul><li><strong>按照测试文件执行</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 运行test_lagou.py下的所有的测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest test_lagou.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 运行test_lagou.py下的所有的测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest test_lagou.py</span></span></code></pre></div><ul><li><strong>按照测试类执行</strong></li></ul><p>按照测试类执行，必须以如下格式：</p><p>pytest 文件名 .py:: 测试类，其中&quot;::&quot;是分隔符，用于分割测试 module 和测试类。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 运行test_lagou.py文件下的，类名是TestLaGou下的所有测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest test_lagou.py::TestLaGou</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 运行test_lagou.py文件下的，类名是TestLaGou下的所有测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest test_lagou.py::TestLaGou</span></span></code></pre></div><ul><li><strong>按照测试方法执行</strong></li></ul><p>同样的测试方法执行，必须以如下格式：</p><p>pytest 文件名 .py:: 测试类 :: 测试方法，其中 &quot;::&quot; 是分隔符，用于分割测试 module、测试类，以及测试方法。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 运行test_lagou.py文件下的，类名是TestLaGou下的，名字为test_get_new_message的测试用例 </span></span>
<span class="line"><span style="color:#E1E4E8;">pytest test_lagou.py::TestLaGou::test_get_new_message</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 运行test_lagou.py文件下的，类名是TestLaGou下的，名字为test_get_new_message的测试用例 </span></span>
<span class="line"><span style="color:#24292E;">pytest test_lagou.py::TestLaGou::test_get_new_message</span></span></code></pre></div><ul><li><strong>不在命令行执行，在程序中执行</strong></li></ul><p>以上选择测试用例执行的方法，可以不在命令行，而直接在测试程序里执行，其语法为</p><p>pytest.main([模块.py::类::方法])</p><h4 id="_4-动态挑选测试用例运行-按-tag" tabindex="-1">4.动态挑选测试用例运行 --- 按 Tag <a class="header-anchor" href="#_4-动态挑选测试用例运行-按-tag" aria-label="Permalink to &quot;4.动态挑选测试用例运行 --- 按 Tag&quot;">​</a></h4><p>动态挑选测试用例一直是测试框架的刚需，在 pytest 里动态挑选测试用例需要借助两个步骤。</p><ul><li>首先给测试用例打标签（mark），在 Class、method 上加上如下装饰器：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@pytest.mark.xxx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@pytest.mark.xxx</span></span></code></pre></div><ul><li>在运行时，命令行动态指定标签运行：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 同时选中带有这两个标签的所有测试用例运行</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;mark1 and mark2&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 选中带有mark1的测试用例，不运行mark2的测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;mark1 and not mark2&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 选中带有mark1或 mark2标签的所有测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;mark1 or mark2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 同时选中带有这两个标签的所有测试用例运行</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;mark1 and mark2&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 选中带有mark1的测试用例，不运行mark2的测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;mark1 and not mark2&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 选中带有mark1或 mark2标签的所有测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;mark1 or mark2&quot;</span></span></code></pre></div><p>下面来实际演示下，仍然以我们的项目 lagouTest 为例，我们更改 tests 文件夹下的两个文件，</p><p>其中对 test_baidu.py 文件的修改如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># test_baidu.py下更改</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#6A737D;"># 在Baidu这个类上加标签baidu</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baidu</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#6A737D;"># 以下代码皆不变</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># test_baidu.py下更改</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#6A737D;"># 在Baidu这个类上加标签baidu</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baidu</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#6A737D;"># 以下代码皆不变</span></span></code></pre></div><p>对 test_lagou.py 文件的修改如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># test_lagou.py下更改</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#6A737D;"># 在TestLaGou这个类上加标签lagou</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.lagou</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestLaGou</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;"># 以下代码皆不变</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># test_lagou.py下更改</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#6A737D;"># 在TestLaGou这个类上加标签lagou</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.lagou</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestLaGou</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;"># 以下代码皆不变</span></span></code></pre></div><p>我给这两个测试类分别加上了标签 baidu 和标签 lagou，现在我们按需运行下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;lagou and not baidu&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;lagou and not baidu&quot;</span></span></code></pre></div>`,61),d=l(`<p>可以看到标记为 lagou 下面的 2 条测试用例都被执行了，但是 baidu 标签下的 2 条都没有被执行，在 Console 中显示 &quot;2 deselected&quot;。</p><p>同样地，我们还可以用以下命令，运行所有包含 lagou 和 baidu 标签的测试用例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;lagou and baidu&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;lagou and baidu&quot;</span></span></code></pre></div><p>请注意，不同标签之间的分割要使用<strong>and</strong> 或者<strong>or</strong>关键字。</p><p><strong>在这里给你布置一个课外作业：</strong></p><p>如果给一个类打了一个标签叫作 toRun，然后给这个类下的某一个方法也打了一个标签叫作 notToRun， 如果我在命令行中输入以下命令，运行状况是什么呢？</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;toRun and not notToRun&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;toRun and not notToRun&quot;</span></span></code></pre></div><p>如果我输入以下的命令，运行情况又是怎么样呢？</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;notToRun and not toRun&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;notToRun and not toRun&quot;</span></span></code></pre></div><h4 id="_5-动态挑选测试用例运行-按名称" tabindex="-1">5.动态挑选测试用例运行 --- 按名称 <a class="header-anchor" href="#_5-动态挑选测试用例运行-按名称" aria-label="Permalink to &quot;5.动态挑选测试用例运行 --- 按名称&quot;">​</a></h4><p>pytest 中，动态挑选测试用例，除了打标签（mark）外，还有另外一种方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k 参数是按照文件名、类名、方法名来模糊匹配的</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k xxxPattern</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k 参数是按照文件名、类名、方法名来模糊匹配的</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k xxxPattern</span></span></code></pre></div><p>下面来详细演示下，我们的项目文件结构如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_lagou.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_lagou.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span></code></pre></div><p>其中：</p><ul><li><p>test_baidu.py 里定义了一个测试类 Baidu， 这个测试类下有两个测试方法 test_baidu_search 和 test_baidu_set；</p></li><li><p>test_lagou.py 中定义了一个测试类 TestLaGou，这个测试类下面有两个测试方法 test_visit_lagou 和 test_get_new_message。</p></li></ul><p>在命令行中以如下方式运行。</p><ul><li>按照文件名称全匹配：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 运行test_lagou.py下的所有的测试</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#9ECBFF;">&quot;test_lagou.py&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 运行test_lagou.py下的所有的测试</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#032F62;">&quot;test_lagou.py&quot;</span></span></code></pre></div><ul><li>按照文件名字部分匹配：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 因为lagou能匹配上test_lagou.py,故运行test_lagou.py下所有的测试</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#9ECBFF;">&quot;lagou&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 因为lagou能匹配上test_lagou.py,故运行test_lagou.py下所有的测试</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#032F62;">&quot;lagou&quot;</span></span></code></pre></div><ul><li>按照类名匹配：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 因为Baidu能匹配上test_baidu.py里定义的测试类Baidu,故运行Baidu测试类下所有的测试。 你也可以写成Bai</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#9ECBFF;">&quot;Baidu&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 因为Baidu能匹配上test_baidu.py里定义的测试类Baidu,故运行Baidu测试类下所有的测试。 你也可以写成Bai</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#032F62;">&quot;Baidu&quot;</span></span></code></pre></div><ul><li>按照方法名匹配：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># message只能匹配test_lagou.py中定义的测试类TestLaGou下的测试方法test_get_new_message， 故仅有test_get_new_message这个方法会执行</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#9ECBFF;">&quot;message&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># message只能匹配test_lagou.py中定义的测试类TestLaGou下的测试方法test_get_new_message， 故仅有test_get_new_message这个方法会执行</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#032F62;">&quot;message&quot;</span></span></code></pre></div><h4 id="_6-忽略测试用例执行" tabindex="-1">6.忽略测试用例执行 <a class="header-anchor" href="#_6-忽略测试用例执行" aria-label="Permalink to &quot;6.忽略测试用例执行&quot;">​</a></h4><p>有挑选测试用例执行，那么就一定会有忽略测试用例执行，忽略测试用例执行有如下 3 种方式：</p><ul><li><strong>直接忽略测试执行</strong></li></ul><p>直接忽略可以使用 @pytest.mark.skip 装饰器来实现。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># test_lagou.py</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.skip</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">reason</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;skip此测试用例&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> test_get_new_message:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 实现方法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># test_lagou.py</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.skip</span><span style="color:#24292E;">(</span><span style="color:#E36209;">reason</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;skip此测试用例&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> test_get_new_message:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 实现方法</span></span></code></pre></div><p>比如，在 test_lagou.py 里，我定义了一个测试方法 test_get_new_message，然后我给他加上装饰器 pytest.mark.skip，那么当我在命令行中执行如下语句时，test_get_new_message 将会被忽略执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest test_lagou.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest test_lagou.py</span></span></code></pre></div><ul><li><strong>按条件忽略测试执行 --- 使用 skipif 忽略</strong></li></ul><p>按 skipif 条件，当条件符合时便会忽略某条测试用例执行。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># test_lagou.py </span></span>
<span class="line"><span style="color:#6A737D;"># 定义一个flag，用来指示是否要skip一个测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">flag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 此处判断flag的值，为1则忽略，0则不忽略 </span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.skipif</span><span style="color:#E1E4E8;">(flag </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reason</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;by condition&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> test_get_new_message:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 实现方法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># test_lagou.py </span></span>
<span class="line"><span style="color:#6A737D;"># 定义一个flag，用来指示是否要skip一个测试用例</span></span>
<span class="line"><span style="color:#24292E;">flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 此处判断flag的值，为1则忽略，0则不忽略 </span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.skipif</span><span style="color:#24292E;">(flag </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reason</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;by condition&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> test_get_new_message:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 实现方法</span></span></code></pre></div><p>当我在命令行中执行如下语句时，test_get_new_message 将会被忽略执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest test_lagou.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest test_lagou.py</span></span></code></pre></div><p>更改 flag 的值为 0 ，再次运行这条语句，你将发现此方法将会被执行。</p><ul><li><strong>按条件忽略测试执行 --- 使用 -m 或者 -k 忽略</strong></li></ul><p>除了 skip 和 skipif 外，我们也可以通过 -m 或者 -k 的方式，把我们不需要运行的测试用例给过滤掉，从而实现测试用例的忽略执行。在刚刚的内容中便详细讲解了 -m 和 -k 的具体用法，你可详细回顾一下。</p><h4 id="_7-setup-和-teardown-详解" tabindex="-1">7.setUp 和 tearDown 详解 <a class="header-anchor" href="#_7-setup-和-teardown-详解" aria-label="Permalink to &quot;7.setUp 和 tearDown 详解&quot;">​</a></h4><p>我们在&quot;07 | 你的第一个 Web 测试框架（一）&quot;（&quot;Test Fixture 的使用&quot;部分）中便讲解了如何在 unittest 中使用 setUp 和 tearDown 方法实现测试执行前的准备工作和测试执行后的清理工作。</p><p>其实在 pytest 里也有类似的方法，而且在粒度上更加精细。</p><p><strong>（1）按 module 进行 setup 和 tear down</strong></p><p>按 module 进行 setup 和 tear down，即在某一个 module 内 setup 或者 tear down 的方法只会执行一次，pytest 里用于 module 的 set up 和 tear down 方法为：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup_module</span><span style="color:#E1E4E8;">(module):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    module级别的setup，直接定义为一个module里的函数</span></span>
<span class="line"><span style="color:#9ECBFF;">    在本module里所有test执行之前，被调用一次</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">## 你的set up代码，例如：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;------ set up for module ------&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">teardown_module</span><span style="color:#E1E4E8;">(module):</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    module级别的setup，直接定义为一个module里的函数</span></span>
<span class="line"><span style="color:#9ECBFF;">    在本module里所有test执行之后，被调用一次</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">## 你的tear down代码，例如：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;------ tead down for module ------&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup_module</span><span style="color:#24292E;">(module):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    module级别的setup，直接定义为一个module里的函数</span></span>
<span class="line"><span style="color:#032F62;">    在本module里所有test执行之前，被调用一次</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">## 你的set up代码，例如：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;------ set up for module ------&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">teardown_module</span><span style="color:#24292E;">(module):</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    module级别的setup，直接定义为一个module里的函数</span></span>
<span class="line"><span style="color:#032F62;">    在本module里所有test执行之后，被调用一次</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">## 你的tear down代码，例如：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;------ tead down for module ------&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>需注意以下几个事情：</p><ul><li><p>setup_module(module) 和 teardown_module(module) 的写法最好不要改动；</p></li><li><p>当 setup_module 出错，teardown_module 不会被执行；</p></li><li><p>一个 module（.py 文件）可以包括多个 Class，多个classs 下可能有多个 case，但是 setup_module 和 teardown_module 只会执行一次。</p></li></ul><p><strong>（2）按 class 进行 setup 和 tear down</strong></p><p>在某一个测试类内，同样可以进行 set up 和 tear down。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baidu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">classmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup_class</span><span style="color:#E1E4E8;">(cls):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color:#9ECBFF;">        仅在当前测试类下的所有test执行之前，被调用一次</span></span>
<span class="line"><span style="color:#9ECBFF;">        注意它必须以@classmethod装饰</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">## 你的set up代码，例如：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;------ set up for class------&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">classmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">teardown_class</span><span style="color:#E1E4E8;">(cls):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color:#9ECBFF;">        仅在当前测试类下的所有test执行之后，被调用一次</span></span>
<span class="line"><span style="color:#9ECBFF;">        注意它必须以@classmethod装饰</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">## 你的tear down代码，例如：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;------tear down for class------&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baidu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">classmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup_class</span><span style="color:#24292E;">(cls):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color:#032F62;">        仅在当前测试类下的所有test执行之前，被调用一次</span></span>
<span class="line"><span style="color:#032F62;">        注意它必须以@classmethod装饰</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">## 你的set up代码，例如：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;------ set up for class------&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">classmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">teardown_class</span><span style="color:#24292E;">(cls):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color:#032F62;">        仅在当前测试类下的所有test执行之后，被调用一次</span></span>
<span class="line"><span style="color:#032F62;">        注意它必须以@classmethod装饰</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">## 你的tear down代码，例如：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;------tear down for class------&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>需注意以下几个事情：</p><ul><li><p>setup_class(cls) 和 teardown_class(cls) 的写法最好不要改动。</p></li><li><p>setup_class(cls) 和 teardown_class(cls) 必须以 @classmethod 装饰。</p></li><li><p>当 setup_class(cls) 出错，teardown_class(cls) 不会被执行。</p></li></ul><p><strong>（3）按 method 进行 setup 和 tear down</strong></p><p>针对每一个测试用例，同样可以进行 set up 和 tear down。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup_method</span><span style="color:#E1E4E8;">(self, method):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color:#9ECBFF;">        在当前测试类里，每一个test执行之前，被调用一次</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">## 你的set up代码，例如：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;------set up for method------）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> teardown_method(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, method):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color:#9ECBFF;">        在当前测试类里，每一个test执行之前，被调用一次</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">## 你的tear down代码，例如：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;------tear down for method------）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup_method</span><span style="color:#24292E;">(self, method):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color:#032F62;">        在当前测试类里，每一个test执行之前，被调用一次</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">## 你的set up代码，例如：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;------set up for method------）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> teardown_method(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, method):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot; </span></span>
<span class="line"><span style="color:#032F62;">        在当前测试类里，每一个test执行之前，被调用一次</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">## 你的tear down代码，例如：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;------tear down for method------）</span></span></code></pre></div><p>需注意以下两个事情：</p><ul><li><p>setup_method(self, method) 和 teardown_method(self, method) 的写法最好不要改动。</p></li><li><p>当 setup_method(self, method)用例执行失败时，teardown_method(self, method) 不会被执行。</p></li></ul><p>setup 和 teardown 在我们测试开始和结束后准备/清理测试数据，系统状态时非常有用。</p><h4 id="_8-使用-pytest-ini-文件破除默认-pattern-灵活命名测试文件" tabindex="-1">8.使用 pytest.ini 文件破除默认 pattern，灵活命名测试文件 <a class="header-anchor" href="#_8-使用-pytest-ini-文件破除默认-pattern-灵活命名测试文件" aria-label="Permalink to &quot;8.使用 pytest.ini 文件破除默认 pattern，灵活命名测试文件&quot;">​</a></h4><p>我在上一课时的&quot;pytest 查找测试用例的原则&quot;部分说过，pytest 查找测试用例，会根据测试用例名，仅默认查找前缀以 _tes开头或者后缀以 _test 结尾的测试文件；而查找测试方法，仅查找测试类以 Test 开头，测试方法以 test 开头。</p><p>那有没有办法破除这一依赖呢？当然有，那就是使用 pytest.ini 文件。</p><p>pytest.ini 是 pytest 的主配置文件，可以改变 pytest 的默认行为。在项目根目录 lagoutAPITest 下新创建一个文件 pytest.ini，我们的项目结构就变成这样：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_lagou.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__pytest.ini</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_lagou.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__pytest.ini</span></span></code></pre></div><p>pytest.ini 的内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[pytest]</span></span>
<span class="line"><span style="color:#E1E4E8;">python_classes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#E1E4E8;">python_files</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#E1E4E8;">python_functions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> test</span><span style="color:#F97583;">*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[pytest]</span></span>
<span class="line"><span style="color:#24292E;">python_classes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#24292E;">python_files</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#24292E;">python_functions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">*</span></span></code></pre></div><p>其中：</p><ul><li><p>python_classes，表示要匹配的测试类的 pattern，*匹配所有。</p></li><li><p>python_files，表示要匹配的测试文件。</p></li><li><p>python_functions，表示要匹配的测试方法。</p></li></ul><p>在这里我把 python_files 和 python_classes 均设置为*，表示任何 *.py 都将被认为是测试文件。任何名字的测试类都将被认为是测试类。</p><p>下面我再次在根目录 lagouAPITest 下建立一个测试文件 sample.py，里面的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sample</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_equal</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">not_equal</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sample</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_equal</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">not_equal</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>我定义了一个 Sample 类，其中包括两个测试方法 test_equal 和 not_equal。然后我切换到项目根目录下，在命令行运行如下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\_Automation\\lagouAPITest</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">pytest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\_Automation\\lagouAPITest</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">pytest</span></span></code></pre></div><p>结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tests</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sample.py</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">Sample</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">test_equal PASSED</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tests</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sample.py</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">Sample</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">test_equal PASSED</span></span></code></pre></div><p>可以看到，sample.py 这个文件被当作了测试文件，并且 Sample 这个类也被 pytest 视为测试类，因为他们符合 pytest.ini 里的配置。</p><p>而 Sample 类的两个测试方法中，test_equal 被执行，而 not_equal 没有被执行，因为我在 pytest.ini 里关于 python_functions 的配置是必须以 test 开头。</p><p>使用 pytest.ini 可以针对 pytest 做更多配置，做法如下所示。</p><ul><li><strong>注册标签：</strong></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[pytest]</span></span>
<span class="line"><span style="color:#E1E4E8;">markers = </span></span>
<span class="line"><span style="color:#E1E4E8;">    smoke: run smoke test</span></span>
<span class="line"><span style="color:#E1E4E8;">    sanity: run sanity test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[pytest]</span></span>
<span class="line"><span style="color:#24292E;">markers = </span></span>
<span class="line"><span style="color:#24292E;">    smoke: run smoke test</span></span>
<span class="line"><span style="color:#24292E;">    sanity: run sanity test</span></span></code></pre></div><p>你可以在 pytest.ini 里注册标签，并统一管理。</p><p>在 pytest.ini 文件里注册标签并不意味着你不需要在测试类/测试方法里忽略 @pytest.mark.xxx 装饰器，你仍需要在你的测试用例上加上标签。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 例如在sample.py文件里的Sample类上加标签</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.smoke</span></span>
<span class="line"><span style="color:#E1E4E8;">Class Sample:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 测试方法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 例如在sample.py文件里的Sample类上加标签</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.smoke</span></span>
<span class="line"><span style="color:#24292E;">Class Sample:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 测试方法</span></span></code></pre></div><ul><li><strong>指定测试目录</strong></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[pytest]</span></span>
<span class="line"><span style="color:#E1E4E8;">testpaths=tests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[pytest]</span></span>
<span class="line"><span style="color:#24292E;">testpaths=tests</span></span></code></pre></div><p>此方法把 testpaths 指定为 tests，当你在命令行中直接执行 pytest 时，会自动查询 testpaths 文件夹，如果没有设置 testpaths，则会自动从当前文件夹找起。</p><p>除了以上这些，pytest.ini 还有其他很多用处，例如<strong>更改默认命令行参数、指定 pytest 最低版本号、指定忽略某些目录</strong> 、<strong>禁用 XPASS</strong> 等功能，大家有兴趣可以自行查询。</p><blockquote><p>另外，pytest 里查找测试用例的 pattern 是采用的 Glob 这个库，你可以进入 <a href="https://docs.python.org/3/library/glob.html" target="_blank" rel="noreferrer">Python 官网</a>查看更多关于如何匹配 pattern 的内容。</p></blockquote><h4 id="_9-数据驱动" tabindex="-1">9.数据驱动 <a class="header-anchor" href="#_9-数据驱动" aria-label="Permalink to &quot;9.数据驱动&quot;">​</a></h4><p>pytest 支持数据驱动，关于数据驱动，我将在后续的章节第 13、14 讲&quot;DDT：博采众长，数据驱动的秘诀&quot;中为你详细讲解。</p><h4 id="_10-失败重跑测试用例" tabindex="-1">10.失败重跑测试用例 <a class="header-anchor" href="#_10-失败重跑测试用例" aria-label="Permalink to &quot;10.失败重跑测试用例&quot;">​</a></h4><p>在测试执行中，偶尔会出现由于环境不稳定，或者网络不稳定造成的测试运行失败的情况，如果第一次运行就报错，那么势必会增加我们排查的工作量。</p><p>所以 pytest 支持错误失败重跑，使用失败重跑机制的步骤如下：</p><ul><li>安装</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">U pytest</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rerunfailures</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">U pytest</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rerunfailures</span></span></code></pre></div><ul><li>命令行执行失败重跑次数</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 语法：</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">reruns Num。 其中Num是重跑的次数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 语法：</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">reruns Num。 其中Num是重跑的次数</span></span></code></pre></div><p>下面我们来实际看一个 re-run 的例子，我更改 sample.py 文件如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.smoke</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sample</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_equal</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 在这里，我让这个case失败，来演示re-run</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">not_equal</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.smoke</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sample</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_equal</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 在这里，我让这个case失败，来演示re-run</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">not_equal</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>然后我们在命令行执行如下命令：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># sample.py目录为 D:\\_Automation\\lagouAPITest\\tests</span></span>
<span class="line"><span style="color:#6A737D;"># 需切换至此目录执行</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest sample.py </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">reruns </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># sample.py目录为 D:\\_Automation\\lagouAPITest\\tests</span></span>
<span class="line"><span style="color:#6A737D;"># 需切换至此目录执行</span></span>
<span class="line"><span style="color:#24292E;">pytest sample.py </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">reruns </span><span style="color:#005CC5;">2</span></span></code></pre></div><p>执行后观察测试输出，会发现如下信息&quot;1 failed，2 rerun&quot;：</p>`,102),u=l(`<h4 id="_11-并发运行测试用例集" tabindex="-1">11.并发运行测试用例集 <a class="header-anchor" href="#_11-并发运行测试用例集" aria-label="Permalink to &quot;11.并发运行测试用例集&quot;">​</a></h4><p>当你的测试用例比较多时，最好可以通过并发测试来减少测试整体的运行时间。pytest 支持并发测试，并且有不同的并发测试库，其中如下两个比较著名：</p><ul><li><strong>pytest-parallel</strong></li></ul><p><strong>安装</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install pytest</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">parallel</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install pytest</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">parallel</span></span></code></pre></div><p><strong>运行</strong>：使用 pytest-parallel 运行，需要指定参数。</p><blockquote><p>--workers (optional) X</p></blockquote><p>多进程运行， X 是进程数，默认值 1。</p><blockquote><p>--tests-per-worker (optional) X</p></blockquote><p>多线程运行， X 是每个 worker 运行的最大并发线程数， 默认值1。</p><p><strong>注意：这个插件仅仅支持 python 3.6 版本及以上，而且如果你想多进程并发，必须跑在 Unix 或者 Mac 机器上，windows 环境仅仅支持多线程运行。</strong></p><p>运行命令如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">workers </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#指定2个进程并发</span></span>
<span class="line"><span style="color:#6A737D;">#指定2个进程并发，每个进程最多运行3个线程</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">workers </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">per</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">worker </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">workers </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#指定2个进程并发</span></span>
<span class="line"><span style="color:#6A737D;">#指定2个进程并发，每个进程最多运行3个线程</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">workers </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">per</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">worker </span><span style="color:#005CC5;">3</span></span></code></pre></div><ul><li><strong>pytest-xdist</strong></li></ul><p><strong>安装</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install pytest</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">xdist</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install pytest</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">xdist</span></span></code></pre></div><p><strong>运行</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 语法：</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#79B8FF;">NUMCPUS</span></span>
<span class="line"><span style="color:#6A737D;"># 以下为2个进程并行运行</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#6A737D;">#使用与CPU内核一样多的进程来并发</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n auto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 语法：</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#005CC5;">NUMCPUS</span></span>
<span class="line"><span style="color:#6A737D;"># 以下为2个进程并行运行</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#6A737D;">#使用与CPU内核一样多的进程来并发</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n auto</span></span></code></pre></div><p><strong>从理论上来说，pytest-parallel 要更好一些，因为 pytest-xdist 有以下缺点：</strong></p><ul><li><p>非线程安全</p></li><li><p>多线程时性能不佳</p></li><li><p>需要状态隔离</p></li></ul><p>但是实际应用中，pytest-parallel 有时会出现如下运行错误：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">BrokenPipeError</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [WinError </span><span style="color:#79B8FF;">109</span><span style="color:#E1E4E8;">] 管道已结束</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BrokenPipeError</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [WinError </span><span style="color:#005CC5;">109</span><span style="color:#24292E;">] 管道已结束</span></span></code></pre></div><p>而且这个错误发生的原因不确定，官方暂时没有修复， 如果你在测试中发现这个错误，那么可以使用 pytest-xdist 来进行并发测试。</p><h3 id="pytest-集成测试报告" tabindex="-1">pytest 集成测试报告 <a class="header-anchor" href="#pytest-集成测试报告" aria-label="Permalink to &quot;pytest 集成测试报告&quot;">​</a></h3><p>在 pytest 中集成测试报告也有两个方式：</p><h4 id="_1-pytest-html" tabindex="-1">1.pytest-html <a class="header-anchor" href="#_1-pytest-html" aria-label="Permalink to &quot;1.pytest-html&quot;">​</a></h4><p>安装：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install pytest</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install pytest</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">html</span></span></code></pre></div><p>使用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">report.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">report.html</span></span></code></pre></div><p>以我们的项目 lagouAPITest 为例，在项目根目录下执行</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">report.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">report.html</span></span></code></pre></div><p>然后在项目根目录下会生成一个 report.html 文件。</p>`,33),h=l('<p>pytest-html 也可以支持 pytest-xdist，也就是说，如果你使用了pytest-xdist来进行并发测试， pytest-html也可以收集并发测试结果了。两者结合使用的命令如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">report.html </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">contained</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">report.html </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">contained</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">html</span></span></code></pre></div><p>运行结束后查看结果如下：</p>',3),g=l('<p>pytest-html 还支持错误重试，使用如下命令运行</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">report.html </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">contained</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">html </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">reruns </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">report.html </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">contained</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">html </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">reruns </span><span style="color:#005CC5;">2</span></span></code></pre></div><p>运行结束你会发现，错误的测试用例被运行了 2 次。</p>',3),F=l(`<h4 id="_2-allure" tabindex="-1">2.allure <a class="header-anchor" href="#_2-allure" aria-label="Permalink to &quot;2.allure&quot;">​</a></h4><p>使用 allure 生成测试报告的步骤如下。</p><ul><li><strong>安装 allure</strong></li></ul><p>在不同操作系统上安装 allure 的步骤是不同的。</p><p><strong>MacOS：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">brew install allure</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">brew install allure</span></span></code></pre></div><p><strong>Linux：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sudo apt</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">add</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">repository ppa</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">qameta</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">allure</span></span>
<span class="line"><span style="color:#E1E4E8;">sudo apt</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">get update </span></span>
<span class="line"><span style="color:#E1E4E8;">sudo apt</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">get install allure</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sudo apt</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">add</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">repository ppa</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">qameta</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">allure</span></span>
<span class="line"><span style="color:#24292E;">sudo apt</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">get update </span></span>
<span class="line"><span style="color:#24292E;">sudo apt</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">get install allure</span></span></code></pre></div><p><strong>Windows：</strong></p><p>在 Windows 上安装 allure，首先要安装 Scoop，Scoop 的安装步骤如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 以Win10为例：</span></span>
<span class="line"><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;"> 使用快捷键 Win </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> R 调起运行提示框</span></span>
<span class="line"><span style="color:#79B8FF;">2.</span><span style="color:#E1E4E8;"> 输入</span><span style="color:#9ECBFF;">&quot;cmd&quot;</span><span style="color:#E1E4E8;">进入到命令行</span></span>
<span class="line"><span style="color:#79B8FF;">3.</span><span style="color:#E1E4E8;"> 输入</span><span style="color:#9ECBFF;">&quot;powershell&quot;</span><span style="color:#E1E4E8;">进入到powershell模式（此时你的命令提示应该以PS开始）</span></span>
<span class="line"><span style="color:#79B8FF;">4.</span><span style="color:#E1E4E8;"> 确保你的PowerShell版本大于5.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">，命令如下：</span></span>
<span class="line"><span style="color:#E1E4E8;">$psversiontable.psversion.major # 这个运行后出现的值应该</span><span style="color:#F97583;">&gt;=</span><span style="color:#79B8FF;">5.0</span></span>
<span class="line"><span style="color:#79B8FF;">5.</span><span style="color:#E1E4E8;"> 允许PowerShell 执行本地脚本：</span></span>
<span class="line"><span style="color:#E1E4E8;">set</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">executionpolicy remotesigned </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">scope currentuser</span></span>
<span class="line"><span style="color:#79B8FF;">6.</span><span style="color:#E1E4E8;"> 安装Scoop</span></span>
<span class="line"><span style="color:#E1E4E8;">Invoke</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Expression</span><span style="color:#E1E4E8;"> (New</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Object System.Net.WebClient).</span><span style="color:#B392F0;">DownloadString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://get.scoop.sh&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 以Win10为例：</span></span>
<span class="line"><span style="color:#005CC5;">1.</span><span style="color:#24292E;"> 使用快捷键 Win </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> R 调起运行提示框</span></span>
<span class="line"><span style="color:#005CC5;">2.</span><span style="color:#24292E;"> 输入</span><span style="color:#032F62;">&quot;cmd&quot;</span><span style="color:#24292E;">进入到命令行</span></span>
<span class="line"><span style="color:#005CC5;">3.</span><span style="color:#24292E;"> 输入</span><span style="color:#032F62;">&quot;powershell&quot;</span><span style="color:#24292E;">进入到powershell模式（此时你的命令提示应该以PS开始）</span></span>
<span class="line"><span style="color:#005CC5;">4.</span><span style="color:#24292E;"> 确保你的PowerShell版本大于5.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">，命令如下：</span></span>
<span class="line"><span style="color:#24292E;">$psversiontable.psversion.major # 这个运行后出现的值应该</span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;">5.0</span></span>
<span class="line"><span style="color:#005CC5;">5.</span><span style="color:#24292E;"> 允许PowerShell 执行本地脚本：</span></span>
<span class="line"><span style="color:#24292E;">set</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">executionpolicy remotesigned </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">scope currentuser</span></span>
<span class="line"><span style="color:#005CC5;">6.</span><span style="color:#24292E;"> 安装Scoop</span></span>
<span class="line"><span style="color:#24292E;">Invoke</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Expression</span><span style="color:#24292E;"> (New</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Object System.Net.WebClient).</span><span style="color:#6F42C1;">DownloadString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://get.scoop.sh&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>使用上述方式安装好后，你应该可以看到如下界面：</p>`,12),v=l('<p>安装好 Scoop 后，不要关闭 powershell，直接输入如下命令安装 allure：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PS C</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\Users\\Admin</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">scoop install allure</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PS C</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\Users\\Admin</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">scoop install allure</span></span></code></pre></div><p>安装好后，你将看到如下界面：</p>',3),_=l(`<p>如果你之前安装过 allure，也可以通过如下方式更新：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PS C</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\Users\\Admin</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">scoop update allure</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PS C</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\Users\\Admin</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">scoop update allure</span></span></code></pre></div><p>你还可以查看当前使用的 allure 版本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PS C</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\Users\\Admin</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">allure </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">version</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PS C</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\Users\\Admin</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">allure </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">version</span></span></code></pre></div><ul><li><strong>执行 pytest 命令，并指定 allure 报告目录</strong></li></ul><p>可以直接在命令行里执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 直接执行lagouAPITest项目下的所有测试用例，并将测试报告文件夹allure_reports放在项目根目录下</span></span>
<span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest&gt;pytest --alluredir=./allure_reports</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 直接执行lagouAPITest项目下的所有测试用例，并将测试报告文件夹allure_reports放在项目根目录下</span></span>
<span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest&gt;pytest --alluredir=./allure_reports</span></span></code></pre></div><p>还可以在程序里执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 执行所有的标记为smoke的测试用例，并且报告文件夹设置为allure_reports</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest.main([</span><span style="color:#9ECBFF;">&quot;-m&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;smoke&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#9ECBFF;">&quot;--alluredir=./allure_reports&quot;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 执行所有的标记为smoke的测试用例，并且报告文件夹设置为allure_reports</span></span>
<span class="line"><span style="color:#24292E;">pytest.main([</span><span style="color:#032F62;">&quot;-m&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;smoke&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#032F62;">&quot;--alluredir=./allure_reports&quot;</span><span style="color:#24292E;">])</span></span></code></pre></div><ul><li><strong>打开 allure 报告</strong></li></ul><p>测试执行完成后，通过以下方式打开生成的 allure 报告：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 以Win10为例：</span></span>
<span class="line"><span style="color:#E1E4E8;">1. 使用快捷键 Win + R 调起运行提示框</span></span>
<span class="line"><span style="color:#E1E4E8;">2. 输入&quot;cmd&quot;进入到命令行</span></span>
<span class="line"><span style="color:#E1E4E8;">3. 切换目录到项目根目录，本例中在D:\\_Automation\\lagouAPITest&gt;：</span></span>
<span class="line"><span style="color:#E1E4E8;">4. 输入命令生成allure报告：</span></span>
<span class="line"><span style="color:#E1E4E8;">allure serve allure_reports</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 以Win10为例：</span></span>
<span class="line"><span style="color:#24292E;">1. 使用快捷键 Win + R 调起运行提示框</span></span>
<span class="line"><span style="color:#24292E;">2. 输入&quot;cmd&quot;进入到命令行</span></span>
<span class="line"><span style="color:#24292E;">3. 切换目录到项目根目录，本例中在D:\\_Automation\\lagouAPITest&gt;：</span></span>
<span class="line"><span style="color:#24292E;">4. 输入命令生成allure报告：</span></span>
<span class="line"><span style="color:#24292E;">allure serve allure_reports</span></span></code></pre></div><p>需要注意的是，allure_reports 文件夹就是我们在第 2 步中定义的 allure 报告文件夹所在的位置，命令执行后，会自动打开 allure 测试报告：</p>`,13),m=a("p",null,[s("更多关于测试报告的技巧，我将在 "),a("strong",null,'"23 | 对外输出，让测试报告自己说话"'),s(" 一节中向你详细介绍。")],-1),k=a("p",null,"至此，我们的第一个 API 接口自动化测试框架已经全部完成。",-1),C=a("h3",{id:"总结",tabindex:"-1"},[s("总结 "),a("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),b=a("p",null,'"模块二：项目实战，搭建自动化测试框架"这一部分便结束了，完成学习的你已经可以胜任 Web 自动化测试框架，API 自动化测试框架的搭建工作了。',-1),A=a("p",null,"本章节实践较多，希望大家能够把所讲的内容亲自实践一下，尽可能多的掌握测试框架搭建基本功，从下一章开始，我将带领大家进入能力修炼，全面掌握多项技能。",-1),D=a("hr",null,null,-1),q=a("p",null,'更多关于测试框架的知识，请关注测试公众号 iTesting，搜索"测试框架"查看。',-1);function B(f,T,w,P,S,x){const n=e("Image");return t(),c("div",null,[y,i,p(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4A/Ciqc1F-EHU-ABZ8aAADaqpxn2Rw509.png"}),s(),E,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/5D/55/CgqCHl-EHYmAOi13AABotxo1Vw4813.png"}),s(),d,p(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/5D/56/CgqCHl-EHeOATmAKAABbpslTqbs982.png"}),s(),u,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4B/Ciqc1F-EHfmAWUTzAAC0YsyYy9Y669.png"}),s(),h,p(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4B/Ciqc1F-EHgGALE1NAAC6hgFUAO0670.png"}),s(),g,p(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/5D/56/CgqCHl-EHgeAQbaiAACTBJmZLww890.png"}),s(),F,p(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4B/Ciqc1F-EHheAZlvIAAAvur73UMc511.png"}),s(),v,p(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/5D/56/CgqCHl-EHiCAKqtcAAAkfEMMpH8475.png"}),s(),_,p(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4B/Ciqc1F-EHi2AemzEAADkfPwy6Xg873.png"}),s(),m,k,C,b,A,D,q])}const N=o(r,[["render",B]]);export{j as __pageData,N as default};
