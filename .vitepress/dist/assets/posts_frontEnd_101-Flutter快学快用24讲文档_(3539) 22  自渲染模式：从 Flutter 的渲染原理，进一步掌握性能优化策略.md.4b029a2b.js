import{_ as e,j as o,o as t,g as c,k as a,h as s,Q as l,s as p}from"./chunks/framework.cfb14fe0.js";const k=JSON.parse('{"title":"22自渲染模式：从Flutter的渲染原理，进一步掌握性能优化策略","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3539) 22  自渲染模式：从 Flutter 的渲染原理，进一步掌握性能优化策略.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3539) 22  自渲染模式：从 Flutter 的渲染原理，进一步掌握性能优化策略.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3539) 22  自渲染模式：从 Flutter 的渲染原理，进一步掌握性能优化策略.md"},E=l('<h1 id="_22自渲染模式-从flutter的渲染原理-进一步掌握性能优化策略" tabindex="-1">22自渲染模式：从Flutter的渲染原理，进一步掌握性能优化策略 <a class="header-anchor" href="#_22自渲染模式-从flutter的渲染原理-进一步掌握性能优化策略" aria-label="Permalink to &quot;22自渲染模式：从Flutter的渲染原理，进一步掌握性能优化策略&quot;">​</a></h1><p>在自渲染模式中，Flutter 三棵树是一个比较关键的知识点。本课时将带你学习 Flutter 自渲染模式的三棵树，然后从三棵树的绘制过程中了解 Flutter 是如何做性能优化和如何进行 Flutter App 的性能提升。</p><h3 id="三棵树" tabindex="-1">三棵树 <a class="header-anchor" href="#三棵树" aria-label="Permalink to &quot;三棵树&quot;">​</a></h3><p>在 Flutter 中存在三棵树，分别是 Widget 、Element 和 RenderObject。</p><ul><li><p>Widget，是用来描述 UI 界面的，里面主要包含了一些基础的 UI 渲染的配置信息。</p></li><li><p>Element，类似于前端的虚拟 Dom，介于 Widget 和 RenderObject 之间。</p></li><li><p>RenderObject，则是实际上需要渲染的树，渲染引擎会根据 RenderObject 来进行界面渲染。</p></li></ul><p>在 Flutter 中经过一系列处理后，将会生成一份这样的配置信息，如图 1 所示（你可以使用 debug 模式得到这份渲染树的结构信息）。</p>',6),i=l(`<p>图 1 渲染树结构</p><p>在图 1 中比较关键的是 3 个属性：</p><ul><li><p>_widget 就是我们所说的 Widget 树；</p></li><li><p>_chilid 就是我们所说的 Element 树；</p></li><li><p>而 _renderObject 就是 RenderObject 树。</p></li></ul><p>以上的渲染树结构对于我们所看到的 Widget 是一份非常简单的配置，如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runApp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">MaterialApp</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Navigation Basics&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    home</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FirstRoute</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FirstRoute</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Center</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;flutter test&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runApp</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">MaterialApp</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Navigation Basics&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    home</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FirstRoute</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  ));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FirstRoute</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Center</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;flutter test&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码描述的是一个简单的页面组件，不过在这个简单页面组件背后是一个非常复杂的树型结构，具体看看渲染的 Element 树到底是个什么样子，如图 2 所示。</p>`,6),y=p("p",null,"图 2 Element 树结构",-1),d=p("p",null,"你有没有发现就一个非常简单的 Widget ，在 Flutter 中实际生成的 Element 树结构图是如此的复杂。你有没有发现在树的最底层才是我们使用的组件 FirstRoute->Center->Text->RichText（如图 2 中红色的部分）。了解完三棵树结构后，我们再来看下三棵树是如何进行转化的。",-1),u=p("h3",{id:"三棵树对应关系",tabindex:"-1"},[s("三棵树对应关系 "),p("a",{class:"header-anchor",href:"#三棵树对应关系","aria-label":'Permalink to "三棵树对应关系"'},"​")],-1),h=p("p",null,"在 Flutter 中，Widget 和 Element 树是一一对应的，但是与 RenderObject 不是一一对应的。因为有些 Widget 是不需要渲染的，比如我们上面测试代码中的 FirstRoute 就是不需要渲染的 Widget。最终只有 RenderObjectWidget 相关的 Widget 才会转化为 RenderObject，也只有这种类型才需要进行渲染。可以看下表格 1 所展示的三棵树部分类型的对应关系。",-1),F=l(`<p>表格 1 Widget 、 Element 和 RenderObject 对应关系</p><p>接下来我们看下三者是如何进行转化的。</p><h3 id="三棵树转化流程" tabindex="-1">三棵树转化流程 <a class="header-anchor" href="#三棵树转化流程" aria-label="Permalink to &quot;三棵树转化流程&quot;">​</a></h3><p>Flutter 运行中的一部分核心逻辑就是在处理这三棵树的转化，所有的界面交互和事件处理，最终都反应在这三棵树上的操作结果。一般情况下，我们都是这样去运行 Flutter 项目的。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runApp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">MaterialApp</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Navigation Basics&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    home</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FirstRoute</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runApp</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">MaterialApp</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Navigation Basics&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    home</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FirstRoute</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  ));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中的 MaterialApp 就是我们所描述的一个 Widget ，Flutter 会经过 scheduleAttachRootWidget 、 attachRootWidget 、attachToRenderTree 调用到 RenderObjectToWidgetElement 的 mount 方法。在过程中会涉及相当多的源码函数，这里我们选择几个比较重要的函数介绍下。</p><h4 id="重要函数说明" tabindex="-1">重要函数说明 <a class="header-anchor" href="#重要函数说明" aria-label="Permalink to &quot;重要函数说明&quot;">​</a></h4><p>在介绍函数之前我们先来看下整体的架构流程图，如图 3 所示。</p>`,8),g=l(`<p>图 3 Flutter 树转化图</p><p>上述图比较复杂，你可以先简单了解下，等下我们会详细拆分来讲解。我们先来看下这几个关键函数的作用。</p><ul><li><strong>scheduleAttachRootWidget</strong>，创建根 widget ，并且从根 widget 向子节点递归创建元素Element，对子节点为 RenderObjectWidget 的小部件创建 RenderObject 树节点，从而创建出 View 的渲染树，这里源代码中使用 Timer.run 事件任务的方式来运行，目的是避免影响到微任务的执行。</li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scheduleAttachRootWidget</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> rootWidget) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Timer</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">attachRootWidget</span><span style="color:#E1E4E8;">(rootWidget);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scheduleAttachRootWidget</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> rootWidget) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Timer</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">attachRootWidget</span><span style="color:#24292E;">(rootWidget);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>attachRootWidget</strong> 与 scheduleAttachRootWidget 作用一致，首先是创建根节点，然后调用 attachToRenderTree 循环创建子节点。</li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">attachRootWidget</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> rootWidget) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  _readyToProduceFrames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  _renderViewElement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RenderObjectToWidgetAdapter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">RenderBox</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">    container</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> renderView,</span></span>
<span class="line"><span style="color:#E1E4E8;">    debugShortDescription</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[root]&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> rootWidget,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ).</span><span style="color:#B392F0;">attachToRenderTree</span><span style="color:#E1E4E8;">(buildOwner, renderViewElement </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RenderObjectToWidgetElement</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">RenderBox</span><span style="color:#E1E4E8;">&gt;);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">attachRootWidget</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> rootWidget) {</span></span>
<span class="line"><span style="color:#24292E;">  _readyToProduceFrames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  _renderViewElement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RenderObjectToWidgetAdapter</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">RenderBox</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">    container</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> renderView,</span></span>
<span class="line"><span style="color:#24292E;">    debugShortDescription</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[root]&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> rootWidget,</span></span>
<span class="line"><span style="color:#24292E;">  ).</span><span style="color:#6F42C1;">attachToRenderTree</span><span style="color:#24292E;">(buildOwner, renderViewElement </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RenderObjectToWidgetElement</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">RenderBox</span><span style="color:#24292E;">&gt;);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>attachToRenderTree</strong>，该方法中有两个比较关键的调用，我只举例出核心代码部分，这里会先执行 buildScope ，但是在 buildScope 中会优先调用第二个参数（回调函数，也就是 element.mount ），而 mount 就会循环创建子节点，并在创建的过程中将需要更新的数据标记为 dirty。</li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">owner.</span><span style="color:#B392F0;">buildScope</span><span style="color:#E1E4E8;">(element, () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  element.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">owner.</span><span style="color:#6F42C1;">buildScope</span><span style="color:#24292E;">(element, () {</span></span>
<span class="line"><span style="color:#24292E;">  element.</span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ul><li><p><strong>buildScope</strong>，如果首次渲染 dirty 是空的列表，因此首次渲染在该函数中是没有任何执行流程的，该函数的核心还是在第二次渲染或者 setState 后，有标记 dirty 的 Element 时才会起作用，该函数的目的也是循环 dirty 数组，如果 Element 有 child 则会递归判断子元素，并进行子元素的 build ，创建新的 Element 或者修改 Element 或者创建 RenderObject。</p></li><li><p><strong>updateChild</strong>，该方法非常重要，所有子节点的处理都是经过该函数，在该函数中 Flutter 会处理 Element 与 RenderObject 的转化逻辑，通过 Element 树的中间状态来减少对 RenderObject 树的影响，从而提升性能。具体这个函数的代码逻辑，我们拆解来分析。该函数的输入参数，包括三个参数：Element child、Widget newWidget、dynamic newSlot 。child 为当前节点的 Element 信息， newWidget 为 Widget 树的新节点，newSlot 为节点的新位置。在了解参数后接下来看下核心逻辑，首先判断是否有新的 Widget 节点。</p></li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newWidget </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (child </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">deactivateChild</span><span style="color:#E1E4E8;">(child);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newWidget </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (child </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">deactivateChild</span><span style="color:#24292E;">(child);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果不存在，则将当前节点的 Element 直接销毁，如果 Widget 存在该节点，并且 Element 中也存在该节点，那么就首先判断两个节点是否一致，如代码第一行，如果一致只是位置不同，则更新位置即可。其他情况下判断是否可更新子节点，如果可以则更新，如果不可以则销毁原来的 Element 子节点，并重新创建一个。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hasSameSuperclass </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> child.widget </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> newWidget) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (child.slot </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> newSlot)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">updateSlotForChild</span><span style="color:#E1E4E8;">(child, newSlot);</span></span>
<span class="line"><span style="color:#E1E4E8;">  newChild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hasSameSuperclass </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">canUpdate</span><span style="color:#E1E4E8;">(child.widget, newWidget)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (child.slot </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> newSlot)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">updateSlotForChild</span><span style="color:#E1E4E8;">(child, newSlot);</span></span>
<span class="line"><span style="color:#E1E4E8;">  child.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(newWidget);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;">(child.widget </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> newWidget);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    child.owner.</span><span style="color:#B392F0;">_debugElementWasRebuilt</span><span style="color:#E1E4E8;">(child);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }());</span></span>
<span class="line"><span style="color:#E1E4E8;">  newChild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">deactivateChild</span><span style="color:#E1E4E8;">(child);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;">(child._parent </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  newChild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">inflateWidget</span><span style="color:#E1E4E8;">(newWidget, newSlot);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hasSameSuperclass </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> child.widget </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> newWidget) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (child.slot </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> newSlot)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">updateSlotForChild</span><span style="color:#24292E;">(child, newSlot);</span></span>
<span class="line"><span style="color:#24292E;">  newChild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hasSameSuperclass </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">canUpdate</span><span style="color:#24292E;">(child.widget, newWidget)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (child.slot </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> newSlot)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">updateSlotForChild</span><span style="color:#24292E;">(child, newSlot);</span></span>
<span class="line"><span style="color:#24292E;">  child.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(newWidget);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;">(child.widget </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> newWidget);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">    child.owner.</span><span style="color:#6F42C1;">_debugElementWasRebuilt</span><span style="color:#24292E;">(child);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }());</span></span>
<span class="line"><span style="color:#24292E;">  newChild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">deactivateChild</span><span style="color:#24292E;">(child);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;">(child._parent </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  newChild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inflateWidget</span><span style="color:#24292E;">(newWidget, newSlot);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码的第 8 行非常关键，在 child.update 函数逻辑里面，会根据当前节点的类型，调用不同的 update ，可参考图 3 中的 update 下的流程，每一个流程也都会递归调用子节点，并循环返回到 updateChild 中。有以下三个核心的函数会重新进入 updateChild 流程中，分别是 performRebuild、inflateWidget 和 markNeedsBuild，接下来我们看下这三个函数具体的作用。</p><ul><li><p><strong>performRebuild</strong>是非常关键的一个代码，这部分就是我们在组件中写的 build 逻辑函数，StatelessWidget 和 StatefulWidget 的 build 函数都是在此执行，执行完成后将作为该节点的子节点，并进入 updateChild 递归函数中。</p></li><li><p><strong>inflateWidget</strong>创建一个新的节点，在创建完成后会根据当前 Element 类型，判断是 RenderObjectElement 或者 ComponentElement 。根据两者类型的不同，调用不同 mount 挂载到当前节点上，在两种类型的 mount 中又会循环子节点，调用 updateChild 重新进入子节点更新流程。这里还有一点，当为 RenderObjectElement 的时候会去创建 RenderObject 。</p></li><li><p><strong>markNeedsBuild</strong>，标记为 dirty ，并且调用 scheduleBuildFor 等待下一次 buildScope 操作。</p></li></ul><p>以上就是比较关键的几个函数，其他函数你可以自己查看官网的文档。下面结合图 3 的流程图，我结合两个流程来讲解：首次 build 的流程和 setState 的流程。</p><h4 id="首次-build" tabindex="-1">首次 build <a class="header-anchor" href="#首次-build" aria-label="Permalink to &quot;首次 build&quot;">​</a></h4><p>当我们首次加载一个页面组件的时候，由于所有节点都是不存在的，因此这时候的流程大部分情况下都是创建新的节点，流程会如图 4 所示。</p>`,17),C=l('<p>图 4 首次 build 流程</p><p>runApp 到 RenderObjectToWidgetElement(mount) 逻辑都是一样的，在 _rebuild 中会调用 updateChild 更新节点，由于节点是不存在的，因此这时候就调用 inflateWidget 来创建 Element。</p><p>当 <strong>Element 为 Component</strong> 时，会调用 Component.mount ，在 Component.mount 中会创建 Element 并挂载到当前节点上，其次会调用 _firstBuild 进行子组件的 build ，build 完成后则将 build 好的组件作为子组件，进入 updateChild 的子组件更新。</p><p>当 <strong>Element 为 RenderObjectElement</strong> 时，则会调用 RenderObjectElement.mount，在 RenderObjectElement.mount 中会创建 RenderObjectElement 并且调用 createRenderObject 创建 RenderObject，并将该 RenderObject 和 RenderObjectElement 分别挂载到当前节点的 Element 树和 RenderObject 树，最后同样会调用 updateChild 来递归创建子节点。</p><p>以上就是首次 build 的逻辑，单独来看还是非常清晰的，接下来我们看下 setState 的逻辑。</p><h4 id="setstate" tabindex="-1">setState <a class="header-anchor" href="#setstate" aria-label="Permalink to &quot;setState&quot;">​</a></h4><p>当我们调用 setState 后，我们实际上调用的是组件的 markNeedsBuild ，而这个函数上面已经介绍到是将组件设置为 dirty ，并且添加下一次 buildScope 的逻辑，等待下一次 rebuild 循环。如图 5 流程。buildScope 会调用 rebuild 然后进入 build 操作，从而进入 updateChild 的循环体系。</p>',7),m=l(`<p>图 5 setState 流程</p><p>在图 5 中，我们就可以了解到，在 Flutter 中，如果父节点更新以后，也就是 setState 调用必定会引起子节点的递归循环判断 build 逻辑，虽然不一定会进行 RenderObject 树的创建（因为可能子节点没有变化，因此没有改变），但还是存在一定的性能影响。</p><p>以上就是三棵树的转化过程，其中我省略了部分非核心流程函数，大家如果感兴趣，可以在<a href="https://github.com/flutter/flutter/tree/master/packages" target="_blank" rel="noreferrer">Flutter 官网的 Github</a> 上进行学习。在掌握了整体的流程，我们接下来就要从这个转化过程中，提炼出可以提升我们 Flutter APP 性能的关键点。</p><h3 id="性能提升要点" tabindex="-1">性能提升要点 <a class="header-anchor" href="#性能提升要点" aria-label="Permalink to &quot;性能提升要点&quot;">​</a></h3><p>在图 3 的整体流程中，我们要特别注意的就是 updateChild 这个函数，这也是 Flutter 从 Widget 到 Element 再到 RenderObject 性能提升的关键点。这个函数的作用在上面已经有介绍到了，关键点就是在 Widget 转化为 Element，然后 Element 转化 RenderObject 过程中做的一些细节的判断优化，这些细节处理包括以下这五点。</p><ul><li><p>新节点被删除了，则直接删除 Element 节点。</p></li><li><p>节点存在，组件类型相同，并且组件相等时，则更新节点位置。</p></li><li><p>节点存在，组件类型相同，组件不相同，并且组件可进行更新时，则更新组件，由于当前组件更新了，因此需要更新当前组件的子节点，所以调用 update 来更新子节点列表，在此过程中也会对节点的 RenderObject 的子节点进行更新。</p></li><li><p>节点存在，组件类型相同，组件不相同，其次也无法进行组件更新时，则创建节点，同时在创建过程中判断是否为 RenderObject ，如果是则创建 RenderObject ，并循环判断子节点。</p></li><li><p>节点不存在，则同样走创建流程。</p></li></ul><p>通过这种方式就可以减少 Widget 对 RenderObject 的影响，只有需要创建和更新的节点才会反映到 RenderObject 树中。从这个树节点的转化过程，我们可以提炼出以下四个关键点，从而提升我们 APP 的性能。</p><h4 id="const" tabindex="-1">const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;const&quot;">​</a></h4><p>上面提到了父组件更新，导致子组件都需要进行 rebuild 操作，一种办法就是减少有状态组件下的子组件，还有一种办法就是尽量多用 const 组件，这样即使父组件更新了，子组件也不会重新 rebuild 操作。这里就是在上面的判断逻辑，节点存在，组件类型相同，并且组件相等时的处理逻辑。</p><p>这点在我们项目的源代码中，也有一些实践优化的点，特别是一些长期不修改的组件，例如通用报错组件和通用 loading 组件等，当然只能针对不带变量的组件返回，例如下面这部分代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonError</span><span style="color:#E1E4E8;">(action</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.setFirstPage);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (contentList </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Loading</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonError</span><span style="color:#24292E;">(action</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.setFirstPage);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (contentList </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Loading</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第 2 行代码中有一个变量 action ，因此是不能设置为 const 的，下面的 Loading 由于没有携带变量，因此是可以设置为 const 的。其他代码可以同样进行修改，对性能提升还是有一定的帮助的，特别是在组件设计不合理的过程中。</p><h4 id="canupdate" tabindex="-1">canUpdate <a class="header-anchor" href="#canupdate" aria-label="Permalink to &quot;canUpdate&quot;">​</a></h4><p>在 updateChild 上面流程中，有一个执行函数 canUpdate ，这个也是一个性能提升的关键点，特别是在需要对多个元素进行调整时，可以看下具体的逻辑实现。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">canUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> oldWidget, </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> newWidget) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> oldWidget.runtimeType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> newWidget.runtimeType</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> oldWidget.key </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> newWidget.key;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">canUpdate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> oldWidget, </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> newWidget) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldWidget.runtimeType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> newWidget.runtimeType</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> oldWidget.key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> newWidget.key;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>主要是判断运行时的类是否相同，同时判断 key 是否一样，如果都一样，则可直接更新组件 Element 位置，提升性能，因此在组件设计时，尽量减少组件的 key 的变化，可以默认设置为空。</p><p>其次在如果需要频繁地对组件进行排序、删除或者新增处理时，最好要将组件增加上 key ，以提升性能。这里要非常注意，由于 StatefulWidget 的 state 是保存在 Element 中，因此如果希望区分两个相同类名（ runtimeType ）的 Widget 时，必须携带不同的 key ，不然无法区分新旧 Widget 的变化，特别是在一个列表数据，每个列表都是一个有状态类，如果需要切换列表中项目列表时，则必须设置 key，不然会导致顺序切换失效。了解更多关于这点的，可以参考这篇<a href="https://medium.com/flutter/keys-what-are-they-good-for-13cb51742e7d" target="_blank" rel="noreferrer">英文的文章</a>。</p><h4 id="inflatewidget" tabindex="-1">inflateWidget <a class="header-anchor" href="#inflatewidget" aria-label="Permalink to &quot;inflateWidget&quot;">​</a></h4><p>在 updateChild 中的 inflateWidget 执行函数也是一个比较关键的性能提升点，这个函数在创建之前会检查 key 是否为 GlobalKey ，如果是则表明 Element 存在，那么这时候直接启用即可，如果不存在则需要重新创建，这就类似与组件缓存，只能说减少组件的 build 成本，看下如下这部分代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newWidget.key;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GlobalKey</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Element</span><span style="color:#E1E4E8;"> newChild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_retakeInactiveElement</span><span style="color:#E1E4E8;">(key, newWidget);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newChild </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;">(newChild._parent </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">_debugCheckForCycles</span><span style="color:#E1E4E8;">(newChild);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }());</span></span>
<span class="line"><span style="color:#E1E4E8;">    newChild.</span><span style="color:#B392F0;">_activateWithParent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, newSlot);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Element</span><span style="color:#E1E4E8;"> updatedChild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateChild</span><span style="color:#E1E4E8;">(newChild, newWidget, newSlot);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;">(newChild </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> updatedChild);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> updatedChild;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Element</span><span style="color:#E1E4E8;"> newChild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newWidget.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Key</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newWidget.key;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GlobalKey</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Element</span><span style="color:#24292E;"> newChild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_retakeInactiveElement</span><span style="color:#24292E;">(key, newWidget);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newChild </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;">(newChild._parent </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">_debugCheckForCycles</span><span style="color:#24292E;">(newChild);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }());</span></span>
<span class="line"><span style="color:#24292E;">    newChild.</span><span style="color:#6F42C1;">_activateWithParent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, newSlot);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Element</span><span style="color:#24292E;"> updatedChild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateChild</span><span style="color:#24292E;">(newChild, newWidget, newSlot);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;">(newChild </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> updatedChild);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> updatedChild;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Element</span><span style="color:#24292E;"> newChild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newWidget.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">();</span></span></code></pre></div><p>但是这部分也是非常损耗内存的，因为它会将组件缓存到内存中，导致垃圾内容无法进行回收，因此在使用 GlobalKey 要非常注意，尽量应用在复用性高且 build 业务复杂的组件上。</p><h4 id="setstate-1" tabindex="-1">setState <a class="header-anchor" href="#setstate-1" aria-label="Permalink to &quot;setState&quot;">​</a></h4><p>在图 3 中的 setState 被触发后，当前组件会进行 rebuild 操作，由于当前组件的 build ，会引起当前组件下的所有子组件发生 rebuild 行为，因此在设计时，<strong>尽量减少有状态组件下的无状态组件</strong>，从而减少没必要的 build 逻辑。这也是我们之前提到的一些组件设计要点，虽然说 Flutter 构建 Widget 和 Element 是比较快的，但是为了性能考虑，还是尽量减少这部分没必要的损耗。其次也注意减少 build 中的业务逻辑，因为 Flutter 中的 build 是会经常被触发，特别是有状态组件。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时着重介绍了 Flutter 自渲染中的三棵树知识，从 Flutter 的三棵树概念到三棵树对应关系，其中着重介绍了三棵树的转化流程，并在流程中总结出性能优化需要着重注意的点。</p><p>学完本课时后，你需要掌握 Flutter 的三棵树概念，并非常清晰的了解三棵树的转化过程，通过对转化过程中性能优化知识的学习，从而在编码过程中养成一个非常好的编码习惯。</p><p><a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">点击链接，查看本课时源码</a></p>`,27);function b(_,A,W,w,D,B){const n=o("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/44/E0/Ciqc1F8_i_CAfmbFAAJQmkbVhaU299.png"}),s(),i,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/44/E0/Ciqc1F8_i_uAHvbgAAFqAXyCe9s498.png"}),s(),y,d,u,h,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/44/E0/Ciqc1F8_jAWASaH5AABxjuioTcw001.png"}),s(),F,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/44/E0/Ciqc1F8_jBaAPZtCAADE5IavI9E126.png"}),s(),g,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/44/E0/Ciqc1F8_jEiAbM-GAAFJbtV_XLo642.png"}),s(),C,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/44/E0/Ciqc1F8_jJGATAlDAAFF3eMI6D8595.png"}),s(),m])}const f=e(r,[["render",b]]);export{k as __pageData,f as default};
