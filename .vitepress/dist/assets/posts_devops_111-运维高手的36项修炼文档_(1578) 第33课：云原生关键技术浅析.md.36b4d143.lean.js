import{_ as o,j as a,o as p,g as c,k as e,Q as _,s}from"./chunks/framework.b3d8e22e.js";const f=JSON.parse('{"title":"什么是云原生 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/111-运维高手的36项修炼文档/(1578) 第33课：云原生关键技术浅析.md","filePath":"posts/devops/111-运维高手的36项修炼文档/(1578) 第33课：云原生关键技术浅析.md","lastUpdated":1696417798000}'),i={name:"posts/devops/111-运维高手的36项修炼文档/(1578) 第33课：云原生关键技术浅析.md"},n=_("",9),l=s("p",null,"图中最底层便是硬件基础设施，基础设施通过虚拟化技术交付 IaaS 资源给到最上层是应用层使用，应用层并不关心底层的基础设施，因为中间层的虚拟化技术会帮助实现，比如云计算资源，可以使用 K8s\\Docker 方式轻量化计算。应用所需的数据库资源，则结合 OpenStack+KVM 或 K8S+Docker 等技术结合到具体的应数据库的服务供应用层调用；应用所需的存储资源则可以通过如 GFS、Ceph、NFS 等共享的分布式存储技术来供 App 调用，所以你发现应用层并不需要关心硬件设施层。",-1),r=s("p",null,"K8s 作为容器管理平台是被普遍应用的，云原生所依赖的基础设施能力在此基础上得到了更大的扩展，比如 Istio 服务网格，Prometheus 针对编排模式提供了特定的服务扩展，它们也随之在不断融入云原生的核心组件中，所以我们 K8s\\Docker 的作用举足轻重。",-1),d=s("p",null,"另外一个概念就是 Devops，我们在前面的课程中讲过，Devops 涵盖了开发、测试、部署、运维四大环节，打通了整个开发体系实现了持续交付，在开发层通过 Git 对代码库进行管理，Jenkins 可以完成项目的开发、测试、部署，以及对底层的依赖，使得应用部署发布更加容易，所以通过这几个关键技术就可以帮我们构建一套开源的 Devops 方案。",-1),h=s("p",null,"另外一个关键技术就是服务网格，服务网格是用于处理服务间通信的基础设施层，它负责构建复杂的云原生应用传递可靠的网络请求，在实践中服务网格的实现通常和应用部署在一起，提供轻量化的网络代理服务，对于应用而言它是透明的，如图所示，在 K8s 中最小单元是 Pod，在 Pod 里的应用实例对外部目标应用实例的调用需要通过一个 Sidecar 中间代理，调用协议通过 RPC 协议调用 Sidecar，Sidecar 代理则请求一个统一的服务注册中心，这里基于应用请求的应用名称得到需要请求的具体的目标实例的连接信息，拿到后再去请求目标的实例，整个服务网格中如果聚焦到单元 Pod 里的具体应用实例间的调用关系就是这样的流程，注册中心能维护可用的实例列表，并且对可用的实例列表可以通过评级打分的策略来得出负载均衡的权重，就可以实现负载均衡，另外还可以通过熔断的自动隔离机制实现自动隔离不健康的实例。",-1),g=s("p",null,"基于此，我们再宏观到整个集群，所有实例的相互调用就形成了一张网格状的图表，我们可以看到深蓝色的部分代表的就是具体的微服务应用，而它调用的 Sidecar 关联起每个实例应用，所以这样就形成了一个服务类的服务网格，Sidecar 通信的组织框架可以用 K8s 进行统一管理，常见的 Sidecar 代码实现方式主要是通过 Istio，它是由 Google 和 IBM 主导并支持开源的 Service Mesh 框架。",-1),m=s("p",null,"我们看到有了服务网格以后，整个微服务的层级关系是这样组成的，底层是基础设施层，上层封装具体的容器，如 Docker 和 rkt 等轻量级容器服务，再往上层是通过 K8s 进行容器编排，最上层是服务网格（Istio 和 LINKERD 提供服务）。",-1),A=s("p",null,"最后，我们来聊聊微服务的开发模式演变，传统的部署模式我们会把应用放到一个单体应用里面，比如我们早期做 Java 开发时，会把所有的业务逻辑都封装到一个 war 包里进行部署，虽然这种部署方式简单快速，但仍然有各种各样的问题，当技术演变到今天，单体应用已经很少见了，通过不断地发展，就形成了微服务开发模式，它强调各个服务各个组件个体化，不再依赖特定的环境，降低了对环境的依赖度，另外就是通过虚拟化容器技术实现了隔离。",-1),u=s("p",null,"对于单体应用向微服务拆分，如何设计和安排呢？总结来说：首先通常会把一些通用的服务先拆分到微服务中，比如统一权限、统一存储、统一登录等功能优先拆分；另外就是先处理有状态的服务，比如登录信息、动态路由等存储到共享的数据队列或共享的数据库中，也就是拆分有状态的服务单独进行处理；另外我们还需要掌握整个系统对外的接口与实体之间的关系，还要结合业务的具体流程，优先考虑将一些新的功能拆分到微服务中，因为新服务通常依赖比较少；另外就是新老服务架构同时并行，拆分出微服务上线后，同时老服务平台依然保留；最后就是业务可以考虑垂直拆分，从业务角度把独立的业务线、流程线进行垂直拆分，性能上考虑水平拆分，比如单体服务要求有更多的计算资源时就可以通过水平拆分进行性能优化。",-1);function S(C,v,D,I,P,k){const t=a("Image");return p(),c("div",null,[n,e(t,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/26/40/CgqCHl7xs2yAAbENAAECy_O4FQE223.png"}),l,r,e(t,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/26/34/Ciqc1F7xs3-AXRATAAGNS6GpNy8059.png"}),d,e(t,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/26/40/CgqCHl7xs4yAHNE4AADh1KsRsBM428.png"}),h,e(t,{alt:"image (6).png",src:"https://s0.lgstatic.com/i/image/M00/26/40/CgqCHl7xs7GAGwXYAAMc5moEoWI792.png"}),g,e(t,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image/M00/26/40/CgqCHl7xs5yAFxMBAAOf2lLXlXI686.png"}),m,A,u])}const q=o(i,[["render",S]]);export{f as __pageData,q as default};
