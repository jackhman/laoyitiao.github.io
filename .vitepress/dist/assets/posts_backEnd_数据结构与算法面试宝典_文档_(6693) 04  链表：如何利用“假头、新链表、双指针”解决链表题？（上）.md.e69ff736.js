import{_ as o,D as e,o as t,g as c,J as l,h as n,Q as p,m as s}from"./chunks/framework.f67d7268.js";const B=JSON.parse('{"title":"04链表：如何利用“假头、新链表、双指针”解决链表题？（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6693) 04  链表：如何利用“假头、新链表、双指针”解决链表题？（上）.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6693) 04  链表：如何利用“假头、新链表、双指针”解决链表题？（上）.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6693) 04  链表：如何利用“假头、新链表、双指针”解决链表题？（上）.md"},E=p(`<h1 id="_04链表-如何利用-假头、新链表、双指针-解决链表题-上" tabindex="-1">04链表：如何利用“假头、新链表、双指针”解决链表题？（上） <a class="header-anchor" href="#_04链表-如何利用-假头、新链表、双指针-解决链表题-上" aria-label="Permalink to &quot;04链表：如何利用“假头、新链表、双指针”解决链表题？（上）&quot;">​</a></h1><p>大家都知道程咬金的&quot;三板斧&quot;这个绝技，那今天我也给你介绍解决链表问题的&quot;三板斧&quot;：<strong>假头、新链表、双指针</strong>。由于内容比较多，所以这里拆分了上、下两篇来讲解，通过这一讲的学习，你可以深入理解带假头链表的 6 种最基本的操作。</p><p><strong>链表</strong>作为一种重要的数据结构，无论是在工作中，还是在面试中都经常出现。这种数据结构可以用在很多地方，比如内核的消息队列、缓存管理、跳表，B+ 树等。</p><p>有的面试官非常喜欢考察面试者的链表知识，主要有以下 3 个原因：</p><ol><li><p>操作链表需要非常小心，考虑<strong>各种边界</strong>情况；</p></li><li><p>链表结构简单，但是查找、交换、翻转都非常容易出错；</p></li><li><p>解决链表问题，需要有一定的算法思想，但是又并不太难。在面试过程中，需要你想到解题方法并实现出来，更加考察应试者的工程能力。</p></li></ol><p><em>注：由于链表题的求解重点不在思路，所以这里，我们不再采用&quot;四步分析法&quot;找规律来讲解链表。</em></p><p>在本讲我会介绍一些解决链表的新方法与新思路，带你踏上&quot;链表的奇幻之旅&quot;。</p><h3 id="三板斧中的第一斧-假头" tabindex="-1">三板斧中的第一斧：假头 <a class="header-anchor" href="#三板斧中的第一斧-假头" aria-label="Permalink to &quot;三板斧中的第一斧：假头&quot;">​</a></h3><p><strong>假头通常也叫作 Dummy Head 或者</strong> &quot;<strong>哑头</strong>&quot;。实际上，就是在链表前面，加上一个额外的结点。此时，存放了 N 个数据的带假头的链表，算上假头一共有 N+1 个结点。</p><p>额外的结点不会存放有意义的数据。那么它的作用是什么呢？</p><p>你可以这样理解，添加假头后，可以省略掉很多空指针的判断，链表的各种操作会变得更加简洁。接下来，我们看一下关于链表的各种操作，今天主要介绍 6 种最基本的操作：</p><ul><li><p>初始化</p></li><li><p>追加结点</p></li><li><p>头部插入结点</p></li><li><p>查找结点</p></li><li><p>插入指定位置之前</p></li><li><p>删除结点</p></li></ul><p>为了将这 6 种基本的操作串起来，我想到了一道考察<strong>设计链表的</strong> 面试题，题目要求应试者将这 6 种基本的操作加以实现：注释中的 /<em>code here</em>/ 部分是填写相应的 6 种功能代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 实现单链表</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyLinkedList</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 链表结点的定义</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// val用来存放链表中的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// next指向下一个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ListNode next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  /** code here: 初始化链表*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyLinkedList</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAtTail</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* code here: 将值为 val 的结点追加到链表尾部*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAtHead</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* code here: 插入值val的新结点，使它成为链表的第一个结点*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* code here: 获取链表中第index个结点的值。如果索引无效，则返回-1。*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// index从0开始。</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAtIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// code here:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在链表中的第 index 个结点之前添加值为 val  的结点。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 如果 index 等于链表的长度，则该结点将附加到链表的末尾。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 如果 index 大于链表长度，则不会插入结点。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 如果index小于0，则在头</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAtIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* code here: 如果索引index有效，则删除链表中的第index个结点。*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 实现单链表</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyLinkedList</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 链表结点的定义</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// val用来存放链表中的数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// next指向下一个结点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListNode next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  /** code here: 初始化链表*/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyLinkedList</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAtTail</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* code here: 将值为 val 的结点追加到链表尾部*/</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAtHead</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* code here: 插入值val的新结点，使它成为链表的第一个结点*/</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* code here: 获取链表中第index个结点的值。如果索引无效，则返回-1。*/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// index从0开始。</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAtIndex</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// code here:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在链表中的第 index 个结点之前添加值为 val  的结点。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 如果 index 等于链表的长度，则该结点将附加到链表的末尾。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 如果 index 大于链表长度，则不会插入结点。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 如果index小于0，则在头</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAtIndex</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* code here: 如果索引index有效，则删除链表中的第index个结点。*/</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p>初始化假头链表，首先，我们需要 new 出一个链表结点，并且让链表的 dummy 和 tail 指针都指向它，代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">  /** code here: 初始化链表*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化dummy</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ListNode dummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化链表tail指针</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ListNode tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化链表的长度，此时为0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">  /** code here: 初始化链表*/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化dummy</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ListNode dummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化链表tail指针</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ListNode tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化链表的长度，此时为0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L22-L24" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L69-L75" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L68-L72" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>初始化完成后，链表已经有了一个结点，但是此时，整个链表中还没有任何数据。因此，在后文中，我们说一个<strong>空链表</strong>的时候，就是指已经初始化好的带假头链表。</p><p>相信你已经学会了这几行代码的精髓，下面我要考考你了。</p><p><strong>小测验：一个带假头的链表初始化的时候，哪个指针是空的</strong>？</p><ul><li><p>A. dummy 指针</p></li><li><p>B. tail 指针</p></li><li><p>C. dummy 和 tail 指针</p></li><li><p>D. dummy.next 指针</p></li></ul><p><strong>正确答案 D</strong></p><p>dummy.next 指针。因为带假头的链表初始化以后，dummy 和 tail 都是指向了 new 出来的结点，但是这个时候，还没有任何其他结点进来，所以 dummy.next 为空。</p><p>虽然 dummy 和 tail 初始化完成之后，都指向同一个结点。但是这两者还有一个有趣的特点，叫&quot;<strong>动静结合</strong>&quot;。</p><ul><li><p>静：dummy 指针初始化好以后，永远都是静止的，再也不会动了。</p></li><li><p>动：tail 指针在链表发生变动的时候，就需要移动调整。</p></li></ul><p>接下来，我们再来看看追加结点。</p><h4 id="追加结点" tabindex="-1">追加结点 <a class="header-anchor" href="#追加结点" aria-label="Permalink to &quot;追加结点&quot;">​</a></h4><p>尾部添加新结点操作只有两步，代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAtTail</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* code here: 将值为 val 的结点追加到链表尾部*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 尾部添加一个新结点</span></span>
<span class="line"><span style="color:#E1E4E8;">    tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 移动tail指针</span></span>
<span class="line"><span style="color:#E1E4E8;">    tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tail.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 链表长度+1</span></span>
<span class="line"><span style="color:#E1E4E8;">    length</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAtTail</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* code here: 将值为 val 的结点追加到链表尾部*/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 尾部添加一个新结点</span></span>
<span class="line"><span style="color:#24292E;">    tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 移动tail指针</span></span>
<span class="line"><span style="color:#24292E;">    tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tail.next;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 链表长度+1</span></span>
<span class="line"><span style="color:#24292E;">    length</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L62-L67" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L108-L113" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L68-L72#L98-L101" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>这段代码的执行过程如下图所示：</p>`,32),y=s("p",null,[s("strong",null,"小测验"),n("：这里 tail 指针需要判断是否为空吗？")],-1),i=s("ul",null,[s("li",null,[s("p",null,"A. 需要")]),s("li",null,[s("p",null,"B. 不需要")])],-1),d=s("p",null,[s("strong",null,"正确答案 B")],-1),A=s("p",null,"带假头的链表初始化之后，可以保证 tail 指针永远非空，因此，也就可以直接去修改 tail.next 指针，省略掉了关于 tail 指针是否为空的判断。比如，空链表追加新结点时执行过程如下动图所示：",-1),g=p(`<h4 id="头部插入结点" tabindex="-1">头部插入结点 <a class="header-anchor" href="#头部插入结点" aria-label="Permalink to &quot;头部插入结点&quot;">​</a></h4><p>需要插入的新结点为 p，插入之后，新结点 p 会成为第一个有意义的数据结点。通过以下 3 步可以完成头部插入：</p><ol><li><p>新结点 p.next 指向 dummy.next；</p></li><li><p>dummy.next 指向 p；</p></li><li><p>如果原来的 tail 指向 dummy，那么将 tail 指向 p。</p></li></ol><p>对应的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAtHead</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* code here: 插入值val的新结点，使它成为链表的第一个结点*/</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 生成一个结点，存放的值为val</span></span>
<span class="line"><span style="color:#E1E4E8;">    ListNode p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将p.next指向第一个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">    p.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// dummy.next指向新结点，使之变成第一个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">    dummy.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意动静结合原则，添加结点时，注意修改tail指针。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tail </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> dummy) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    length</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAtHead</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* code here: 插入值val的新结点，使它成为链表的第一个结点*/</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// 生成一个结点，存放的值为val</span></span>
<span class="line"><span style="color:#24292E;">    ListNode p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将p.next指向第一个结点</span></span>
<span class="line"><span style="color:#24292E;">    p.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy.next;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// dummy.next指向新结点，使之变成第一个结点</span></span>
<span class="line"><span style="color:#24292E;">    dummy.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意动静结合原则，添加结点时，注意修改tail指针。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tail </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> dummy) {</span></span>
<span class="line"><span style="color:#24292E;">      tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    length</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L51-L60" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L95-L106" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L87-L96" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>代码执行流程如下动图所示：</p>`,7),h=s("p",null,"这段代码有趣的地方在于，当链表为空的时候，它依然是可以工作的。因为虽然链表是空的，但是由于有 dummy 结点的存在，代码并不会遇到空指针，此时工作流程如下：",-1),u=p(`<p>下面请你通过小测验自我检验。</p><p><strong>小测验</strong>：在插入结点的时候，哪一步最容易遗忘？</p><ul><li><p>A. new 一个假头</p></li><li><p>B. new 一个新结点</p></li><li><p>C. 修改 next 指针</p></li><li><p>D. 修改 tail 指针</p></li></ul><p><strong>正确答案</strong> D</p><p>如果链表添加了结点，或者删除了结点，一定要记得修改 tail 指针。<strong>如果忘了修改，那么就不能正确地获取链表的尾指针，从而错误地访问链表中的数据</strong>。这一点非常重要，无数人在这个坑上翻过车。</p><h4 id="查找结点" tabindex="-1">查找结点 <a class="header-anchor" href="#查找结点" aria-label="Permalink to &quot;查找结点&quot;">​</a></h4><p>在查找索引值为 index（假设 index 从 0 开始）的结点时，你需要注意，<strong>大多数情况下，返回指定结点前面的一个结点 prev 更加有用</strong>。</p><p>好处有以下两个方面：</p><ol><li><p>通过 prev.next 就可以访问到你想要找到的结点，如果没有找到，那么 prev.next 为 null；</p></li><li><p>通过 prev 可以方便完成后续操作，比如在 target 前面 insert 一个新结点，或者将 target 结点从链表中移出去。</p></li></ol><p>因此，如果要实现 get 函数，我们应该先实现一个 getPrevNode 函数。具体的操作如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">getPrevNode</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/*返回index结点的前驱结点，如果index不存在，那么返回dummy*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化front与back，分别一前一后</span></span>
<span class="line"><span style="color:#E1E4E8;">  ListNode front </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ListNode back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在查找的时候，front与back总是一起走</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> front </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> front;</span></span>
<span class="line"><span style="color:#E1E4E8;">    front </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> front.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 把back做为prev并且返回</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> back;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">getPrevNode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/*返回index结点的前驱结点，如果index不存在，那么返回dummy*/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化front与back，分别一前一后</span></span>
<span class="line"><span style="color:#24292E;">  ListNode front </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy.next;</span></span>
<span class="line"><span style="color:#24292E;">  ListNode back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在查找的时候，front与back总是一起走</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> front </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> front;</span></span>
<span class="line"><span style="color:#24292E;">    front </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> front.next;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 把back做为prev并且返回</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> back;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L68-L72#L74-L80" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L31-L39" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L74-L80" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>程序的执行过程如下：</p>`,13),D=p(`<p>有了假头的帮助，这段查找代码就非常健壮了，可以处理以下 2 种情况：</p><ol><li><p>如果 target 在链表中不存在，此时 prev 返回链表的最后一个结点；</p></li><li><p>如果为空链表（空链表指只有一个假头的链表），此时 prev 指向 dummy。也就是说，返回的 prev 指针总是有效的。</p></li></ol><p>借助 getPrevNode 函数，我们就可以写出 get 函数了，代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取链表中第 index 个结点的值。如果索引无效，则返回-1。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// index从0开始</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 因为getPrevNode总是返回有效的结点，所以可以直接取值。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPrevNode</span><span style="color:#E1E4E8;">(index).next.val;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取链表中第 index 个结点的值。如果索引无效，则返回-1。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// index从0开始</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 因为getPrevNode总是返回有效的结点，所以可以直接取值。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPrevNode</span><span style="color:#24292E;">(index).next.val;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L41-L47" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L88-L93" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L82-L85" target="_blank" rel="noreferrer">Python</a></p></blockquote><h4 id="插入指定位置之前" tabindex="-1">插入指定位置之前 <a class="header-anchor" href="#插入指定位置之前" aria-label="Permalink to &quot;插入指定位置之前&quot;">​</a></h4><p>插入指定位置的前面，有 4 个需求。</p><ol><li><p>如果 index 大于链表长度，则不会插入结点。</p></li><li><p>如果 index 等于链表的长度，则该结点将附加到链表的末尾。</p></li><li><p>如果 index 小于 0，则在头部插入结点。</p></li><li><p>否则在指定位置前面插入结点。</p></li></ol><p>其中，Case 1~3 较容易处理。可以直接写。重点在于 Case 4。现在你已经有了 getPrevNode() 函数，就可以比较容易地写出 Case 4 的代码，思路如下：</p><ul><li><p>使用 getPrevNode() 函数拿到 index 之前的结点 pre；</p></li><li><p>在 pre 的后面添加一个新结点。</p></li></ul><p>以下是具体的 Case 1~4 的操作过程，具体的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAtIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Case 1.如果 index 大于链表长度，则不会插入结点。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Case 2.如果 index 等于链表的长度，则该结点将附加到链表的末尾。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addAtTail</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Case 3. 如果index小于0，则在头部插入结点。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addAtHead</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Case 4.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 得到index之前的结点pre</span></span>
<span class="line"><span style="color:#E1E4E8;">    ListNode pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPrevNode</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在pre的后面添加新结点</span></span>
<span class="line"><span style="color:#E1E4E8;">    ListNode p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">    p.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pre.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    pre.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意修改长度</span></span>
<span class="line"><span style="color:#E1E4E8;">    length</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAtIndex</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Case 1.如果 index 大于链表长度，则不会插入结点。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Case 2.如果 index 等于链表的长度，则该结点将附加到链表的末尾。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addAtTail</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Case 3. 如果index小于0，则在头部插入结点。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addAtHead</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Case 4.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 得到index之前的结点pre</span></span>
<span class="line"><span style="color:#24292E;">    ListNode pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPrevNode</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在pre的后面添加新结点</span></span>
<span class="line"><span style="color:#24292E;">    ListNode p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">    p.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pre.next;</span></span>
<span class="line"><span style="color:#24292E;">    pre.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意修改长度</span></span>
<span class="line"><span style="color:#24292E;">    length</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L69-L89" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L115-L135" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L103-L123" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>注意：</strong> 这里有一个新手很容易犯错的地方，我单独给你提取出来：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    p.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pre.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    pre.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    p.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pre.next;</span></span>
<span class="line"><span style="color:#24292E;">    pre.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span></code></pre></div><p>你一定要记住，这两行代码的顺序打死也不能换。一旦交换，链表的操作就会出现错误，再也不能正常工作了。此时出错的情况就会变成下图这样：</p>`,16),b=p(`<h4 id="删除结点" tabindex="-1">删除结点 <a class="header-anchor" href="#删除结点" aria-label="Permalink to &quot;删除结点&quot;">​</a></h4><p>删除结点操作是给定要删除的下标 index（下标从 0 开始），删除的情况分 2 种：</p><ol><li><p>如果 index 无效，那么什么也不做；</p></li><li><p>如果 index 有效，那么将这个结点删除。</p></li></ol><p>上面这 2 种情况中，Case 1 比较容易处理，相对要麻烦一些的是 Case 2。要删除 index 结点，最好是能找到它前面的结点。有了前面的结点，再删除后面的结点就容易多了。不过我们已经有了 getPrevNode 函数，所以操作起来还是很简单的。</p><p>以下是具体的操作过程（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 如果索引 index 有效，则删除链表中的第 index 个节点。</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAtIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Case 1. 如果index无效，那么什么也不做。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Case 2. 删除index结点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// step 1. 找到index前面的结点</span></span>
<span class="line"><span style="color:#E1E4E8;">  ListNode pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPrevNode</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// step 2. 如果要删除的是最后一个结点，那么需要更改tail指针</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tail </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> pre.next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pre;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// step. 3 进行删除操作。并修改链表长度。</span></span>
<span class="line"><span style="color:#E1E4E8;">  pre.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pre.next.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">  length</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 如果索引 index 有效，则删除链表中的第 index 个节点。</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAtIndex</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Case 1. 如果index无效，那么什么也不做。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Case 2. 删除index结点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// step 1. 找到index前面的结点</span></span>
<span class="line"><span style="color:#24292E;">  ListNode pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPrevNode</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// step 2. 如果要删除的是最后一个结点，那么需要更改tail指针</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tail </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> pre.next) {</span></span>
<span class="line"><span style="color:#24292E;">    tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pre;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// step. 3 进行删除操作。并修改链表长度。</span></span>
<span class="line"><span style="color:#24292E;">  pre.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pre.next.next;</span></span>
<span class="line"><span style="color:#24292E;">  length</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L91-L105" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L137-L150" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L125-L138" target="_blank" rel="noreferrer">Python</a></p></blockquote><h3 id="总结与延伸" tabindex="-1">总结与延伸 <a class="header-anchor" href="#总结与延伸" aria-label="Permalink to &quot;总结与延伸&quot;">​</a></h3><p>在本讲，我向你介绍了三板斧中的第一斧：假头，我们一起成功地设计了一个链表类，其中有 6 种基本操作------初始化、追加结点、头部插入结点、查找结点、插入指定位置前面以及删除结点。你可以参考下图：</p>`,9),m=p('<p>这 6 种基本操作是学习链表的基本功，更是解决各种链表题基础的基础！你需要非常熟练地掌握！最后，<strong>设计链表</strong>完整的代码：</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><h3 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><p>我再给你留一道<strong>思考题</strong>：如果在链表中进行查找的时候，给定的并不是下标，而是一个数 target，或者是一个结点 ListNode target，应该如何正确地编写这个查找函数呢？</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/ans.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/ans.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/ans.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>你可以把答案写在评论区，我们一起讨论。接下来请和我一起踏上更加奇妙的算法与数据结构的旅程，继续探索解决链表问题的第二斧<strong>新链表</strong> 、第三斧<strong>双指针</strong>。让我们继续前进。</p><p>下一讲将介绍 05 | 链表：如何利用&quot;假头，新链表，双指针&quot;解决链表题？（下）记得按时来探险。</p>',7);function F(v,_,x,L,k,C){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"1.gif",src:"https://s0.lgstatic.com/i/image6/M00/17/CA/CioPOWBIMYOASGfSAAfGljWjNtw694.gif"}),n(),y,i,d,A,l(a,{alt:"2.gif",src:"https://s0.lgstatic.com/i/image6/M00/17/CD/Cgp9HWBIMZCAEHw5AAVk4Jb8MEs921.gif"}),n(),g,l(a,{alt:"3.gif",src:"https://s0.lgstatic.com/i/image6/M00/17/CD/Cgp9HWBIMZ2AEMTiAAoTgPIJPh8420.gif"}),n(),h,l(a,{alt:"4.gif",src:"https://s0.lgstatic.com/i/image6/M00/17/CD/Cgp9HWBIMaeAMwi6AAdLTcRFg2U490.gif"}),n(),u,l(a,{alt:"5.gif",src:"https://s0.lgstatic.com/i/image6/M00/17/CA/CioPOWBIMbWAZF4OAAuzYmMlByU170.gif"}),n(),D,l(a,{alt:"6.gif",src:"https://s0.lgstatic.com/i/image6/M00/17/CA/CioPOWBIMgiAGcwWAAeNIlv7KX0437.gif"}),n(),b,l(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M00/17/CA/CioPOWBIMhaAJYx8AADVb1uk2iI792.png"}),n(),m])}const N=o(r,[["render",F]]);export{B as __pageData,N as default};
