import{_ as l,j as e,o as t,g as r,k as o,h as a,Q as p,s}from"./chunks/framework.cfb14fe0.js";const _=JSON.parse('{"title":"02Dubbo的配置总线：抓住URL，就理解了半个Dubbo","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4258) 02  Dubbo 的配置总线：抓住 URL，就理解了半个 Dubbo.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4258) 02  Dubbo 的配置总线：抓住 URL，就理解了半个 Dubbo.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4258) 02  Dubbo 的配置总线：抓住 URL，就理解了半个 Dubbo.md"},E=p(`<h1 id="_02dubbo的配置总线-抓住url-就理解了半个dubbo" tabindex="-1">02Dubbo的配置总线：抓住URL，就理解了半个Dubbo <a class="header-anchor" href="#_02dubbo的配置总线-抓住url-就理解了半个dubbo" aria-label="Permalink to &quot;02Dubbo的配置总线：抓住URL，就理解了半个Dubbo&quot;">​</a></h1><p>你好，我是杨四正，今天我和你分享的主题是 Dubbo 的配置总线：抓住 URL，就理解了半个 Dubbo 。</p><p>在互联网领域，每个信息资源都有统一的且在网上唯一的地址，该地址就叫 URL（Uniform Resource Locator，统一资源定位符），它是互联网的统一资源定位标志，也就是指网络地址。</p><p>URL 本质上就是一个特殊格式的字符串。一个标准的 URL 格式可以包含如下的几个部分：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">protocol</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//username:password@host:port/path?key=value&amp;key=value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">protocol</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//username:password@host:port/path?key=value&amp;key=value</span></span></code></pre></div><ul><li><p><strong>protocol</strong>：URL 的协议。我们常见的就是 HTTP 协议和 HTTPS 协议，当然，还有其他协议，如 FTP 协议、SMTP 协议等。</p></li><li><p><strong>username/password</strong>：用户名/密码。 HTTP Basic Authentication 中多会使用在 URL 的协议之后直接携带用户名和密码的方式。</p></li><li><p><strong>host/port</strong>：主机/端口。在实践中一般会使用域名，而不是使用具体的 host 和 port。</p></li><li><p><strong>path</strong>：请求的路径。</p></li><li><p><strong>parameters</strong>：参数键值对。一般在 GET 请求中会将参数放到 URL 中，POST 请求会将参数放到请求体中。</p></li></ul><p>URL 是整个 Dubbo 中非常基础，也是非常核心的一个组件，阅读源码的过程中你会发现很多方法都是以 URL 作为参数的，在方法内部解析传入的 URL 得到有用的参数，所以有人将 URL 称为<strong>Dubbo 的配置总线</strong>。</p><p>例如，在下一课时介绍的 Dubbo SPI 核心实现中，你会看到 URL 参与了扩展实现的确定；在本课程后续介绍注册中心实现的时候，你还会看到 Provider 将自身的信息封装成 URL 注册到 ZooKeeper 中，从而暴露自己的服务， Consumer 也是通过 URL 来确定自己订阅了哪些 Provider 的。</p><p>由此可见，URL 之于 Dubbo 是非常重要的，所以说&quot;抓住 URL，就理解了半个 Dubbo&quot;。那本文我们就来介绍 URL 在 Dubbo 中的应用，以及 URL 作为 Dubbo 统一契约的重要性，最后我们再通过示例说明 URL 在 Dubbo 中的具体应用。</p><h3 id="dubbo-中的-url" tabindex="-1">Dubbo 中的 URL <a class="header-anchor" href="#dubbo-中的-url" aria-label="Permalink to &quot;Dubbo 中的 URL&quot;">​</a></h3><p>Dubbo 中任意的一个实现都可以抽象为一个 URL，Dubbo 使用 URL 来统一描述了所有对象和配置信息，并贯穿在整个 Dubbo 框架之中。这里我们来看 Dubbo 中一个典型 URL 的示例，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//172.17.32.91:20880/org.apache.dubbo.demo.DemoService?anyhost=true&amp;application=dubbo-demo-api-provider&amp;dubbo=2.0.2&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello,sayHelloAsync&amp;pid=32508&amp;release=&amp;side=provider&amp;timestamp=1593253404714dubbo://172.17.32.91:20880/org.apache.dubbo.demo.DemoService?anyhost=true&amp;application=dubbo-demo-api-provider&amp;dubbo=2.0.2&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello,sayHelloAsync&amp;pid=32508&amp;release=&amp;side=provider&amp;timestamp=1593253404714</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//172.17.32.91:20880/org.apache.dubbo.demo.DemoService?anyhost=true&amp;application=dubbo-demo-api-provider&amp;dubbo=2.0.2&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello,sayHelloAsync&amp;pid=32508&amp;release=&amp;side=provider&amp;timestamp=1593253404714dubbo://172.17.32.91:20880/org.apache.dubbo.demo.DemoService?anyhost=true&amp;application=dubbo-demo-api-provider&amp;dubbo=2.0.2&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello,sayHelloAsync&amp;pid=32508&amp;release=&amp;side=provider&amp;timestamp=1593253404714</span></span></code></pre></div><p>这个 Demo Provider 注册到 ZooKeeper 上的 URL 信息，简单解析一下这个 URL 的各个部分：</p><ul><li><p><strong>protocol</strong>：dubbo 协议。</p></li><li><p><strong>username/password</strong>：没有用户名和密码。</p></li><li><p><strong>host/port</strong>：172.17.32.91:20880。</p></li><li><p><strong>path</strong>：org.apache.dubbo.demo.DemoService。</p></li><li><p><strong>parameters</strong>：参数键值对，这里是问号后面的参数。</p></li></ul><p>下面是 URL 的构造方法，你可以看到其核心字段与前文分析的 URL 基本一致：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(String protocol, </span></span>
<span class="line"><span style="color:#E1E4E8;">            String username, </span></span>
<span class="line"><span style="color:#E1E4E8;">            String password, </span></span>
<span class="line"><span style="color:#E1E4E8;">            String host, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port, </span></span>
<span class="line"><span style="color:#E1E4E8;">            String path, </span></span>
<span class="line"><span style="color:#E1E4E8;">            Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters, </span></span>
<span class="line"><span style="color:#E1E4E8;">            Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> methodParameters) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(username) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(password)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Invalid url&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> protocol; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> username; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> password; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> host; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(port, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.host, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.port); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (path </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parameters </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(parameters); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">unmodifiableMap</span><span style="color:#E1E4E8;">(parameters); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.methodParameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">unmodifiableMap</span><span style="color:#E1E4E8;">(methodParameters); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(String protocol, </span></span>
<span class="line"><span style="color:#24292E;">            String username, </span></span>
<span class="line"><span style="color:#24292E;">            String password, </span></span>
<span class="line"><span style="color:#24292E;">            String host, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port, </span></span>
<span class="line"><span style="color:#24292E;">            String path, </span></span>
<span class="line"><span style="color:#24292E;">            Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters, </span></span>
<span class="line"><span style="color:#24292E;">            Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> methodParameters) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(username) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(password)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Invalid url&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> protocol; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> username; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> password; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> host; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(port, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.host, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.port); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (path </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">        path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parameters </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(parameters); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">unmodifiableMap</span><span style="color:#24292E;">(parameters); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.methodParameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">unmodifiableMap</span><span style="color:#24292E;">(methodParameters); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外，在 dubbo-common 包中还提供了 URL 的辅助类：</p><ul><li><p><strong>URLBuilder，</strong> 辅助构造 URL；</p></li><li><p><strong>URLStrParser，</strong> 将字符串解析成 URL 对象。</p></li></ul><h3 id="契约的力量" tabindex="-1">契约的力量 <a class="header-anchor" href="#契约的力量" aria-label="Permalink to &quot;契约的力量&quot;">​</a></h3><p>对于 Dubbo 中的 URL，很多人称之为&quot;配置总线&quot;，也有人称之为&quot;统一配置模型&quot;。虽然说法不同，但都是在表达一个意思，URL 在 Dubbo 中被当作是&quot;<strong>公共的契约</strong>&quot;。一个 URL 可以包含非常多的扩展点参数，URL 作为上下文信息贯穿整个扩展点设计体系。</p><p>其实，一个优秀的开源产品都有一套灵活清晰的扩展契约，不仅是第三方可以按照这个契约进行扩展，其自身的内核也可以按照这个契约进行搭建。如果没有一个公共的契约，只是针对每个接口或方法进行约定，就会导致不同的接口甚至同一接口中的不同方法，以不同的参数类型进行传参，一会儿传递 Map，一会儿传递字符串，而且字符串的格式也不确定，需要你自己进行解析，这就多了一层没有明确表现出来的隐含的约定。</p><p>所以说，在 Dubbo 中使用 URL 的好处多多，增加了便捷性：</p><ul><li><p>使用 URL 这种公共契约进行上下文信息传递，最重要的就是代码更加易读、易懂，不用花大量时间去揣测传递数据的格式和含义，进而形成一个统一的规范，使得代码易写、易读。</p></li><li><p>使用 URL 作为方法的入参（相当于一个 Key/Value 都是 String 的 Map)，它所表达的含义比单个参数更丰富，当代码需要扩展的时候，可以将新的参数以 Key/Value 的形式追加到 URL 之中，而不需要改变入参或是返回值的结构。</p></li><li><p>使用 URL 这种&quot;公共的契约&quot;可以简化沟通，人与人之间的沟通消耗是非常大的，信息传递的效率非常低，使用统一的契约、术语、词汇范围，可以省去很多沟通成本，尽可能地提高沟通效率。</p></li></ul><h3 id="dubbo-中的-url-示例" tabindex="-1">Dubbo 中的 URL 示例 <a class="header-anchor" href="#dubbo-中的-url-示例" aria-label="Permalink to &quot;Dubbo 中的 URL 示例&quot;">​</a></h3><p>了解了 URL 的结构以及 Dubbo 使用 URL 的原因之后，我们再来看 Dubbo 中的三个真实示例，进一步感受 URL 的重要性。</p><h4 id="_1-url-在-spi-中的应用" tabindex="-1">1. URL 在 SPI 中的应用 <a class="header-anchor" href="#_1-url-在-spi-中的应用" aria-label="Permalink to &quot;1. URL 在 SPI 中的应用&quot;">​</a></h4><p>Dubbo SPI 中有一个依赖 URL 的重要场景------适配器方法，是被 @Adaptive 注解标注的， URL 一个很重要的作用就是与 @Adaptive 注解一起选择合适的扩展实现类。</p><p>例如，在 dubbo-registry-api 模块中我们可以看到 RegistryFactory 这个接口，其中的 getRegistry() 方法上有 @Adaptive({&quot;protocol&quot;}) 注解，说明这是一个适配器方法，Dubbo 在运行时会为其动态生成相应的 &quot;$Adaptive&quot; 类型，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegistryFactory$Adaptive</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegistryFactory</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Registry </span><span style="color:#B392F0;">getRegistry</span><span style="color:#E1E4E8;">(org.apache.dubbo.common.URL </span><span style="color:#FFAB70;">arg0</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (arg0 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        org.apache.dubbo.common.URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arg0; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 尝试获取URL的Protocol，如果Protocol为空，则使用默认值&quot;dubbo&quot; </span></span>
<span class="line"><span style="color:#E1E4E8;">        String extName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (url.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">             url.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (extName </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据扩展名选择相应的扩展实现，Dubbo SPI的核心原理在下一课时深入分析 </span></span>
<span class="line"><span style="color:#E1E4E8;">        RegistryFactory extension </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (RegistryFactory) ExtensionLoader </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(RegistryFactory.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(extName); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> extension.</span><span style="color:#B392F0;">getRegistry</span><span style="color:#E1E4E8;">(arg0); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegistryFactory$Adaptive</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegistryFactory</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Registry </span><span style="color:#6F42C1;">getRegistry</span><span style="color:#24292E;">(org.apache.dubbo.common.URL </span><span style="color:#E36209;">arg0</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arg0 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        org.apache.dubbo.common.URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arg0; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 尝试获取URL的Protocol，如果Protocol为空，则使用默认值&quot;dubbo&quot; </span></span>
<span class="line"><span style="color:#24292E;">        String extName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (url.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">             url.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (extName </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据扩展名选择相应的扩展实现，Dubbo SPI的核心原理在下一课时深入分析 </span></span>
<span class="line"><span style="color:#24292E;">        RegistryFactory extension </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (RegistryFactory) ExtensionLoader </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(RegistryFactory.class) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(extName); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> extension.</span><span style="color:#6F42C1;">getRegistry</span><span style="color:#24292E;">(arg0); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们会看到，在生成的 RegistryFactory$Adaptive 类中会自动实现 getRegistry() 方法，其中会根据 URL 的 Protocol 确定扩展名称，从而确定使用的具体扩展实现类。我们可以找到 RegistryProtocol 这个类，并在其 getRegistry() 方法中打一个断点， Debug 启动上一课时介绍的任意一个 Demo 示例中的 Provider，得到如下图所示的内容：</p>`,30),y=p('<p>这里传入的 registryUrl 值为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zookeeper</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:2181/org.apache.dubbo...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zookeeper</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:2181/org.apache.dubbo...</span></span></code></pre></div><p>那么在 RegistryFactory$Adaptive 中得到的扩展名称为 zookeeper，此次使用的 Registry 扩展实现类就是 ZookeeperRegistryFactory。至于 Dubbo SPI 的完整内容，我们将在下一课时详细介绍，这里就不再展开了。</p><h4 id="_2-url-在服务暴露中的应用" tabindex="-1">2. URL 在服务暴露中的应用 <a class="header-anchor" href="#_2-url-在服务暴露中的应用" aria-label="Permalink to &quot;2. URL 在服务暴露中的应用&quot;">​</a></h4><p>我们再来看另一个与 URL 相关的示例。上一课时我们在介绍 Dubbo 的简化架构时提到，Provider 在启动时，会将自身暴露的服务注册到 ZooKeeper 上，具体是注册哪些信息到 ZooKeeper 上呢？我们来看 ZookeeperRegistry.doRegister() 方法，在其中打个断点，然后 Debug 启动 Provider，会得到下图：</p>',5),i=s("p",null,"传入的 URL 中包含了 Provider 的地址（172.18.112.15:20880）、暴露的接口（org.apache.dubbo.demo.DemoService）等信息， toUrlPath() 方法会根据传入的 URL 参数确定在 ZooKeeper 上创建的节点路径，还会通过 URL 中的 dynamic 参数值确定创建的 ZNode 是临时节点还是持久节点。",-1),u=s("h4",{id:"_3-url-在服务订阅中的应用",tabindex:"-1"},[a("3. URL 在服务订阅中的应用 "),s("a",{class:"header-anchor",href:"#_3-url-在服务订阅中的应用","aria-label":'Permalink to "3. URL 在服务订阅中的应用"'},"​")],-1),d=s("p",null,"Consumer 启动后会向注册中心进行订阅操作，并监听自己关注的 Provider。那 Consumer 是如何告诉注册中心自己关注哪些 Provider 呢？",-1),b=s("p",null,"我们来看 ZookeeperRegistry 这个实现类，它是由上面的 ZookeeperRegistryFactory 工厂类创建的 Registry 接口实现，其中的 doSubscribe() 方法是订阅操作的核心实现，在第 175 行打一个断点，并 Debug 启动 Demo 中 Consumer，会得到下图所示的内容：",-1),g=p('<p>我们看到传入的 URL 参数如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">consumer</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//...?application=dubbo-demo-api-consumer&amp;category=providers,configurators,routers&amp;interface=org.apache.dubbo.demo.DemoService...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">consumer</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//...?application=dubbo-demo-api-consumer&amp;category=providers,configurators,routers&amp;interface=org.apache.dubbo.demo.DemoService...</span></span></code></pre></div><p>其中 Protocol 为 consumer ，表示是 Consumer 的订阅协议，其中的 category 参数表示要订阅的分类，这里要订阅 providers、configurators 以及 routers 三个分类；interface 参数表示订阅哪个服务接口，这里要订阅的是暴露 org.apache.dubbo.demo.DemoService 实现的 Provider。</p><p>通过 URL 中的上述参数，ZookeeperRegistry 会在 toCategoriesPath() 方法中将其整理成一个 ZooKeeper 路径，然后调用 zkClient 在其上添加监听。</p><p>通过上述示例，相信你已经感觉到 URL 在 Dubbo 体系中称为&quot;总线&quot;或是&quot;契约&quot;的原因了，在后面的源码分析中，我们还将看到更多关于 URL 的实现。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在本课时，我们重点介绍了 Dubbo 对 URL 的封装以及相关的工具类，然后说明了统一契约的好处，当然也是 Dubbo 使用 URL 作为统一配置总线的好处，最后我们还介绍了 Dubbo SPI、Provider 注册、Consumer 订阅等场景中与 URL 相关的实现，这些都可以帮助你更好地感受 URL 在其中发挥的作用。</p><p>这里你可以想一下，在其他框架或是实际工作中，有没有类似 Dubbo URL 这种统一的契约？欢迎你在留言区分享你的想法。</p>',8);function m(h,F,D,R,A,C){const n=e("Image");return t(),r("div",null,[E,o(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/3B/53/Ciqc1F8j2R2AO15wAAGHCEMA4ig361.png"}),a(),y,o(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/3B/53/Ciqc1F8j2aGAJmTVAAI-2XB7V7o382.png"}),a(),i,u,d,b,o(n,{alt:"Lark20200731-183202.png",src:"https://s0.lgstatic.com/i/image/M00/3B/6D/CgqCHl8j822Aa3VpAAPpUoCBlf4288.png"}),a(),g])}const U=l(c,[["render",m]]);export{_ as __pageData,U as default};
