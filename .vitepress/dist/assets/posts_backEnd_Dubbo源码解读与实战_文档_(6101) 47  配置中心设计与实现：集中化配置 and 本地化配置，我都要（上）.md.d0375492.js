import{_ as l,j as e,o as t,g as r,k as a,h as s,Q as o,s as p}from"./chunks/framework.cfb14fe0.js";const k=JSON.parse('{"title":"47配置中心设计与实现：集中化配置and本地化配置，我都要（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(6101) 47  配置中心设计与实现：集中化配置 and 本地化配置，我都要（上）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(6101) 47  配置中心设计与实现：集中化配置 and 本地化配置，我都要（上）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(6101) 47  配置中心设计与实现：集中化配置 and 本地化配置，我都要（上）.md"},E=o('<h1 id="_47配置中心设计与实现-集中化配置and本地化配置-我都要-上" tabindex="-1">47配置中心设计与实现：集中化配置and本地化配置，我都要（上） <a class="header-anchor" href="#_47配置中心设计与实现-集中化配置and本地化配置-我都要-上" aria-label="Permalink to &quot;47配置中心设计与实现：集中化配置and本地化配置，我都要（上）&quot;">​</a></h1><p><strong>从 2.7.0 版本开始，Dubbo 正式支持配置中心</strong>，在服务自省架构中也依赖配置中心完成 Service ID 与 Service Name 的映射。配置中心在 Dubbo 中主要承担两个职责：</p><ul><li><p>外部化配置；</p></li><li><p>服务治理，负责服务治理规则的存储与通知。</p></li></ul><p><strong>外部化配置目的之一是实现配置的集中式管理。</strong> 目前已经有很多成熟的专业配置管理系统（例如，携程开源的 Apollo、阿里开源的 Nacos 等），Dubbo 配置中心的目的不是再&quot;造一次轮子&quot;，而是保证 Dubbo 能与这些成熟的配置管理系统正常工作。</p><p>Dubbo 可以同时支持多种配置来源。在 Dubbo 初始化过程中，会从多个来源获取配置，并按照固定的优先级将这些配置整合起来，实现<strong>高优先级的配置覆盖低优先级配置</strong>的效果。这些配置的汇总结果将会参与形成 URL，以及后续的服务发布和服务引用。</p><p>Dubbo 目前支持下面四种配置来源，优先级由 1 到 4 逐级降低：</p><ol><li><p>System Properties，即 -D 参数；</p></li><li><p>外部化配置，也就是本课时要介绍的配置中心；</p></li><li><p>API 接口、注解、XML 配置等编程方式收到的配置，最终得到 ServiceConfig、ReferenceConfig 等对象；</p></li><li><p>本地 dubbo.properties 配置文件。</p></li></ol><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><p><strong>Configuration 接口是 Dubbo 中所有配置的基础接口</strong>，其中定义了根据指定 Key 获取对应配置值的相关方法，如下图所示：</p>',9),y=p("p",null,[s("Configuration 接口核心方法"),p("br"),s(" 从上图中我们可以看到，Configuration 针对不同的 boolean、int、String 返回值都有对应的 get*() 方法，同时还提供了带有默认值的 get*() 方法。"),p("strong",null,'这些 get<p style="text-align:center">*() 方法底层首先调用 getInternalProperty() 方法获取配置值'),s("，然后调用 convert() 方法将获取到的配置值转换成返回值的类型之后返回。getInternalProperty() 是一个抽象方法，由 Configuration 接口的子类具体实现。")],-1),i=p("p",null,"下图展示了 Dubbo 中提供的 Configuration 接口实现，包括：SystemConfiguration、EnvironmentConfiguration、InmemoryConfiguration、PropertiesConfiguration、CompositeConfiguration、ConfigConfigurationAdapter 和 DynamicConfiguration。下面我们将结合具体代码逐个介绍其实现。",-1),g=o(`<p>Configuration 继承关系图</p><h4 id="systemconfiguration-environmentconfiguration" tabindex="-1">SystemConfiguration &amp; EnvironmentConfiguration <a class="header-anchor" href="#systemconfiguration-environmentconfiguration" aria-label="Permalink to &quot;SystemConfiguration \\&amp; EnvironmentConfiguration&quot;">​</a></h4><p>SystemConfiguration 是从 Java Properties 配置（也就是 -D 配置参数）中获取相应的配置项，EnvironmentConfiguration 是从使用环境变量中获取相应的配置。两者的 getInternalProperty() 方法实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SystemConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(key); </span><span style="color:#6A737D;">// 读取-D配置参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnvironmentConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getenv</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 读取环境变量中获取相应的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">            value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getenv</span><span style="color:#E1E4E8;">(StringUtils.</span><span style="color:#B392F0;">toOSStyleKey</span><span style="color:#E1E4E8;">(key));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SystemConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(key); </span><span style="color:#6A737D;">// 读取-D配置参数</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnvironmentConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getenv</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 读取环境变量中获取相应的配置</span></span>
<span class="line"><span style="color:#24292E;">            value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getenv</span><span style="color:#24292E;">(StringUtils.</span><span style="color:#6F42C1;">toOSStyleKey</span><span style="color:#24292E;">(key));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="inmemoryconfiguration" tabindex="-1">InmemoryConfiguration <a class="header-anchor" href="#inmemoryconfiguration" aria-label="Permalink to &quot;InmemoryConfiguration&quot;">​</a></h4><p>InmemoryConfiguration 会在内存中维护一个 Map&lt;String, String&gt; 集合（store 字段），其 getInternalProperty() 方法的实现就是从 store 集合中获取对应配置值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InmemoryConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; store </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> store.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略addProperty()等写入store集合的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InmemoryConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; store </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> store.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略addProperty()等写入store集合的方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="propertiesconfiguration" tabindex="-1">PropertiesConfiguration <a class="header-anchor" href="#propertiesconfiguration" aria-label="Permalink to &quot;PropertiesConfiguration&quot;">​</a></h4><p>PropertiesConfiguration 涉及 OrderedPropertiesProvider，其接口的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderedPropertiesProvider</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用于排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Properties配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    Properties </span><span style="color:#B392F0;">initProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderedPropertiesProvider</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用于排序</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Properties配置</span></span>
<span class="line"><span style="color:#24292E;">    Properties </span><span style="color:#6F42C1;">initProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 PropertiesConfiguration 的构造方法中，会加载 OrderedPropertiesProvider 接口的全部扩展实现，并按照 priority() 方法进行排序。然后，加载默认的 dubbo.properties.file 配置文件。最后，用 OrderedPropertiesProvider 中提供的配置覆盖 dubbo.properties.file 文件中的配置。PropertiesConfiguration 的构造方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PropertiesConfiguration</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取OrderedPropertiesProvider接口的全部扩展名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExtensionLoader&lt;</span><span style="color:#F97583;">OrderedPropertiesProvider</span><span style="color:#E1E4E8;">&gt; propertiesProviderExtensionLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(OrderedPropertiesProvider.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; propertiesProviderNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> propertiesProviderExtensionLoader.</span><span style="color:#B392F0;">getSupportedExtensions</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (propertiesProviderNames </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> propertiesProviderNames.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载OrderedPropertiesProvider接口的全部扩展实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">OrderedPropertiesProvider</span><span style="color:#E1E4E8;">&gt; orderedPropertiesProviders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String propertiesProviderName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> propertiesProviderNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderedPropertiesProviders.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(propertiesProviderExtensionLoader.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(propertiesProviderName));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 排序OrderedPropertiesProvider接口的扩展实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    orderedPropertiesProviders.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((OrderedPropertiesProvider a, OrderedPropertiesProvider b) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载默认的dubbo.properties.file配置文件，加载后的结果记录在ConfigUtils.PROPERTIES这个static字段中</span></span>
<span class="line"><span style="color:#E1E4E8;">    Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigUtils.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用OrderedPropertiesProvider扩展实现，按序覆盖dubbo.properties.file配置文件中的默认配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (OrderedPropertiesProvider orderedPropertiesProvider </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            orderedPropertiesProviders) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(orderedPropertiesProvider.</span><span style="color:#B392F0;">initProperties</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新ConfigUtils.PROPERTIES字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigUtils.</span><span style="color:#B392F0;">setProperties</span><span style="color:#E1E4E8;">(properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropertiesConfiguration</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取OrderedPropertiesProvider接口的全部扩展名称</span></span>
<span class="line"><span style="color:#24292E;">    ExtensionLoader&lt;</span><span style="color:#D73A49;">OrderedPropertiesProvider</span><span style="color:#24292E;">&gt; propertiesProviderExtensionLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(OrderedPropertiesProvider.class);</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; propertiesProviderNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> propertiesProviderExtensionLoader.</span><span style="color:#6F42C1;">getSupportedExtensions</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (propertiesProviderNames </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> propertiesProviderNames.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载OrderedPropertiesProvider接口的全部扩展实现</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">OrderedPropertiesProvider</span><span style="color:#24292E;">&gt; orderedPropertiesProviders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String propertiesProviderName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> propertiesProviderNames) {</span></span>
<span class="line"><span style="color:#24292E;">        orderedPropertiesProviders.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(propertiesProviderExtensionLoader.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(propertiesProviderName));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 排序OrderedPropertiesProvider接口的扩展实现</span></span>
<span class="line"><span style="color:#24292E;">    orderedPropertiesProviders.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((OrderedPropertiesProvider a, OrderedPropertiesProvider b) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载默认的dubbo.properties.file配置文件，加载后的结果记录在ConfigUtils.PROPERTIES这个static字段中</span></span>
<span class="line"><span style="color:#24292E;">    Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigUtils.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用OrderedPropertiesProvider扩展实现，按序覆盖dubbo.properties.file配置文件中的默认配置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (OrderedPropertiesProvider orderedPropertiesProvider </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            orderedPropertiesProviders) {</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(orderedPropertiesProvider.</span><span style="color:#6F42C1;">initProperties</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新ConfigUtils.PROPERTIES字段</span></span>
<span class="line"><span style="color:#24292E;">    ConfigUtils.</span><span style="color:#6F42C1;">setProperties</span><span style="color:#24292E;">(properties);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 PropertiesConfiguration.getInternalProperty() 方法中，直接从 ConfigUtils.PROPERTIES 这个 Properties 中获取覆盖后的配置信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ConfigUtils.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(String key) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ConfigUtils.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="compositeconfiguration" tabindex="-1">CompositeConfiguration <a class="header-anchor" href="#compositeconfiguration" aria-label="Permalink to &quot;CompositeConfiguration&quot;">​</a></h4><p>CompositeConfiguration 是一个复合的 Configuration 对象，<strong>其核心就是将多个 Configuration 对象组合起来，对外表现为一个 Configuration 对象</strong>。</p><p>CompositeConfiguration 组合的 Configuration 对象都保存在 configList 字段中（LinkedList<code>&lt;Configuration&gt;</code> 集合），CompositeConfiguration 提供了 addConfiguration() 方法用于向 configList 集合中添加 Configuration 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(Configuration configuration) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (configList.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(configuration)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 不会重复添加同一个Configuration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.configList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(configuration);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(Configuration configuration) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (configList.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(configuration)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 不会重复添加同一个Configuration对象</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.configList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(configuration);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 CompositeConfiguration 中维护了一个 prefix 字段和 id 字段，两者可以作为 Key 的前缀进行查询，在 getProperty() 方法中的相关代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(String key, Object defaultValue) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(prefix)) { </span><span style="color:#6A737D;">// 检查prefix</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(id)) { </span><span style="color:#6A737D;">// 检查id</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// prefix和id都作为前缀，然后拼接key进行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">            value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 只把prefix作为前缀，拼接key进行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">            value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 若prefix为空，则直接用key进行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">        value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> defaultValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(String key, Object defaultValue) {</span></span>
<span class="line"><span style="color:#24292E;">    Object value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(prefix)) { </span><span style="color:#6A737D;">// 检查prefix</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(id)) { </span><span style="color:#6A737D;">// 检查id</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// prefix和id都作为前缀，然后拼接key进行查询</span></span>
<span class="line"><span style="color:#24292E;">            value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> key);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 只把prefix作为前缀，拼接key进行查询</span></span>
<span class="line"><span style="color:#24292E;">            value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> key);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 若prefix为空，则直接用key进行查询</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> defaultValue;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 getInternalProperty() 方法中，会按序遍历 configList 集合中的全部 Configuration 查询对应的 Key，返回第一个成功查询到的 Value 值，如下示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Configuration firstMatchingConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Configuration config </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> configList) { </span><span style="color:#6A737D;">// 遍历所有Configuration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (config.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(key)) { </span><span style="color:#6A737D;">// 得到第一个包含指定Key的Configuration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                firstMatchingConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config; </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (firstMatchingConfiguration </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 通过该Configuration查询Key并返回配置值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> firstMatchingConfiguration.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(String key) {</span></span>
<span class="line"><span style="color:#24292E;">    Configuration firstMatchingConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Configuration config </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> configList) { </span><span style="color:#6A737D;">// 遍历所有Configuration对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (config.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(key)) { </span><span style="color:#6A737D;">// 得到第一个包含指定Key的Configuration对象</span></span>
<span class="line"><span style="color:#24292E;">                firstMatchingConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config; </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (firstMatchingConfiguration </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 通过该Configuration查询Key并返回配置值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> firstMatchingConfiguration.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="configconfigurationadapter" tabindex="-1">ConfigConfigurationAdapter <a class="header-anchor" href="#configconfigurationadapter" aria-label="Permalink to &quot;ConfigConfigurationAdapter&quot;">​</a></h4><p>Dubbo 通过 AbstractConfig 类来抽象实例对应的配置，如下图所示：</p>`,24),u=o(`<p>AbstractConfig 继承关系图</p><p>这些 AbstractConfig 实现基本都对应一个固定的配置，也定义了配置对应的字段以及 getter/setter() 方法。例如，RegistryConfig 这个实现类就对应了注册中心的相关配置，其中包含了 address、protocol、port、timeout 等一系列与注册中心相关的字段以及对应的 getter/setter() 方法，来接收用户通过 XML、Annotation 或是 API 方式传入的注册中心配置。</p><p><strong>ConfigConfigurationAdapter 是 AbstractConfig 与 Configuration 之间的适配器</strong>，它会将 AbstractConfig 对象转换成 Configuration 对象。在 ConfigConfigurationAdapter 的构造方法中会获取 AbstractConfig 对象的全部字段，并转换成一个 Map&lt;String, String&gt; 集合返回，该 Map&lt;String, String&gt; 集合将会被 ConfigConfigurationAdapter 的 metaData 字段引用。相关示例代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigConfigurationAdapter</span><span style="color:#E1E4E8;">(AbstractConfig config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取该AbstractConfig对象中的全部字段与字段值的映射</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; configMetadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getMetaData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    metaData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(configMetadata.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据AbstractConfig配置的prefix和id，修改metaData集合中Key的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> configMetadata.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String prefix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getPrefix</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getPrefix</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getPrefix</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        metaData.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigConfigurationAdapter</span><span style="color:#24292E;">(AbstractConfig config) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取该AbstractConfig对象中的全部字段与字段值的映射</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; configMetadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getMetaData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    metaData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(configMetadata.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据AbstractConfig配置的prefix和id，修改metaData集合中Key的名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> configMetadata.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        String prefix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getPrefix</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getPrefix</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getPrefix</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        metaData.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ConfigConfigurationAdapter 的 getInternalProperty() 方法实现中，直接从 metaData 集合中获取配置值即可，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> metaData.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(String key) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> metaData.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="dynamicconfiguration" tabindex="-1">DynamicConfiguration <a class="header-anchor" href="#dynamicconfiguration" aria-label="Permalink to &quot;DynamicConfiguration&quot;">​</a></h3><p>DynamicConfiguration 是对 Dubbo 中动态配置的抽象，其核心方法有下面三类。</p><ul><li><p>getProperties()/ getConfig() / getProperty() 方法：从配置中心获取指定的配置，在使用时，可以指定一个超时时间。</p></li><li><p>addListener()/ removeListener() 方法：添加或删除对指定配置的监听器。</p></li><li><p>publishConfig() 方法：发布一条配置信息。</p></li></ul><p>在上述三类方法中，每个方法都用多个重载，其中，都会包含一个带有 group 参数的重载，也就是说<strong>配置中心的配置可以按照 group 进行分组</strong>。</p><p>与 Dubbo 中很多接口类似，DynamicConfiguration 接口本身不被 @SPI 注解修饰（即不是一个扩展接口），<strong>而是在 DynamicConfigurationFactory 上添加了 @SPI 注解，使其成为一个扩展接口</strong>。</p><p>在 DynamicConfiguration 中提供了 getDynamicConfiguration() 静态方法，该方法会从传入的配置中心 URL 参数中，解析出协议类型并获取对应的 DynamicConfigurationFactory 实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DynamicConfiguration </span><span style="color:#B392F0;">getDynamicConfiguration</span><span style="color:#E1E4E8;">(URL connectionURL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connectionURL.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    DynamicConfigurationFactory factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDynamicConfigurationFactory</span><span style="color:#E1E4E8;">(protocol);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">getDynamicConfiguration</span><span style="color:#E1E4E8;">(connectionURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DynamicConfiguration </span><span style="color:#6F42C1;">getDynamicConfiguration</span><span style="color:#24292E;">(URL connectionURL) {</span></span>
<span class="line"><span style="color:#24292E;">    String protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connectionURL.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    DynamicConfigurationFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDynamicConfigurationFactory</span><span style="color:#24292E;">(protocol);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">getDynamicConfiguration</span><span style="color:#24292E;">(connectionURL);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>DynamicConfigurationFactory 接口的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;nop&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DynamicConfigurationFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    DynamicConfiguration </span><span style="color:#B392F0;">getDynamicConfiguration</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DynamicConfigurationFactory </span><span style="color:#B392F0;">getDynamicConfigurationFactory</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据扩展名称获取DynamicConfigurationFactory实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">DynamicConfigurationFactory</span><span style="color:#E1E4E8;">&gt; factoryClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DynamicConfigurationFactory.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ExtensionLoader&lt;</span><span style="color:#F97583;">DynamicConfigurationFactory</span><span style="color:#E1E4E8;">&gt; loader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(factoryClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loader.</span><span style="color:#B392F0;">getOrDefaultExtension</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nop&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DynamicConfigurationFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    DynamicConfiguration </span><span style="color:#6F42C1;">getDynamicConfiguration</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DynamicConfigurationFactory </span><span style="color:#6F42C1;">getDynamicConfigurationFactory</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据扩展名称获取DynamicConfigurationFactory实现</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">DynamicConfigurationFactory</span><span style="color:#24292E;">&gt; factoryClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DynamicConfigurationFactory.class;</span></span>
<span class="line"><span style="color:#24292E;">        ExtensionLoader&lt;</span><span style="color:#D73A49;">DynamicConfigurationFactory</span><span style="color:#24292E;">&gt; loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(factoryClass);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loader.</span><span style="color:#6F42C1;">getOrDefaultExtension</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>DynamicConfigurationFactory 接口的继承关系以及 DynamicConfiguration 接口对应的继承关系如下：</p>`,16),d=p("p",null,"DynamicConfigurationFactory 继承关系图",-1),C=o(`<p>DynamicConfiguration 继承关系图</p><p>我们先来看 AbstractDynamicConfigurationFactory 的实现，其中会维护一个 dynamicConfigurations 集合（Map&lt;String, DynamicConfiguration&gt; 类型），在 getDynamicConfiguration() 方法中会填充该集合，实现<strong>缓存</strong> DynamicConfiguration 对象的效果。同时，AbstractDynamicConfigurationFactory 提供了一个 createDynamicConfiguration() 方法给子类实现，来<strong>创建</strong>DynamicConfiguration 对象。</p><p>以 ZookeeperDynamicConfigurationFactory 实现为例，其 createDynamicConfiguration() 方法创建的就是 ZookeeperDynamicConfiguration 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> DynamicConfiguration </span><span style="color:#B392F0;">createDynamicConfiguration</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里创建ZookeeperDynamicConfiguration使用的ZookeeperTransporter就是前文在Transport层中针对Zookeeper的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZookeeperDynamicConfiguration</span><span style="color:#E1E4E8;">(url, zookeeperTransporter);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> DynamicConfiguration </span><span style="color:#6F42C1;">createDynamicConfiguration</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里创建ZookeeperDynamicConfiguration使用的ZookeeperTransporter就是前文在Transport层中针对Zookeeper的实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ZookeeperDynamicConfiguration</span><span style="color:#24292E;">(url, zookeeperTransporter);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来我们再以 ZookeeperDynamicConfiguration 为例，分析 DynamicConfiguration 接口的具体实现。</p><p>首先来看 ZookeeperDynamicConfiguration 的核心字段。</p><ul><li><p>executor（Executor 类型）：用于执行监听器的线程池。</p></li><li><p>rootPath（String 类型）：以 Zookeeper 作为配置中心时，配置也是以 ZNode 形式存储的，rootPath 记录了所有配置节点的根路径。</p></li><li><p>zkClient（ZookeeperClient 类型）：与 Zookeeper 集群交互的客户端。</p></li><li><p>initializedLatch（CountDownLatch 类型）：阻塞等待 ZookeeperDynamicConfiguration 相关的监听器注册完成。</p></li><li><p>cacheListener（CacheListener 类型）：用于监听配置变化的监听器。</p></li><li><p>url（URL 类型）：配置中心对应的 URL 对象。</p></li></ul><p>在 ZookeeperDynamicConfiguration 的构造函数中，会<strong>初始化上述核心字段</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ZookeeperDynamicConfiguration</span><span style="color:#E1E4E8;">(URL url, ZookeeperTransporter zookeeperTransporter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据URL中的config.namespace参数(默认值为dubbo)，确定配置中心ZNode的根路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    rootPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PATH_SEPARATOR </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(CONFIG_NAMESPACE_KEY, DEFAULT_GROUP) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/config&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化initializedLatch以及cacheListener，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在cacheListener注册成功之后，会调用cacheListener.countDown()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    initializedLatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountDownLatch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cacheListener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheListener</span><span style="color:#E1E4E8;">(rootPath, initializedLatch);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化executor字段，用于执行监听器的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newFixedThreadPool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamedThreadFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化Zookeeper客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">    zkClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zookeeperTransporter.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在rootPath上添加cacheListener监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    zkClient.</span><span style="color:#B392F0;">addDataListener</span><span style="color:#E1E4E8;">(rootPath, cacheListener, executor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从URL中获取当前线程阻塞等待Zookeeper监听器注册成功的时长上限</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;init.timeout&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 阻塞当前线程，等待监听器注册完成</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isCountDown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.initializedLatch.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">(timeout, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isCountDown) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ZookeeperDynamicConfiguration</span><span style="color:#24292E;">(URL url, ZookeeperTransporter zookeeperTransporter) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据URL中的config.namespace参数(默认值为dubbo)，确定配置中心ZNode的根路径</span></span>
<span class="line"><span style="color:#24292E;">    rootPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PATH_SEPARATOR </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(CONFIG_NAMESPACE_KEY, DEFAULT_GROUP) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/config&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化initializedLatch以及cacheListener，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在cacheListener注册成功之后，会调用cacheListener.countDown()方法</span></span>
<span class="line"><span style="color:#24292E;">    initializedLatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountDownLatch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cacheListener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheListener</span><span style="color:#24292E;">(rootPath, initializedLatch);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化executor字段，用于执行监听器的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamedThreadFactory</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化Zookeeper客户端</span></span>
<span class="line"><span style="color:#24292E;">    zkClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zookeeperTransporter.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在rootPath上添加cacheListener监听器</span></span>
<span class="line"><span style="color:#24292E;">    zkClient.</span><span style="color:#6F42C1;">addDataListener</span><span style="color:#24292E;">(rootPath, cacheListener, executor);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从URL中获取当前线程阻塞等待Zookeeper监听器注册成功的时长上限</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;init.timeout&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 阻塞当前线程，等待监听器注册完成</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isCountDown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.initializedLatch.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">(timeout, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isCountDown) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述初始化过程中，ZookeeperDynamicConfiguration 会创建 CacheListener 监听器。在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=4267" target="_blank" rel="noreferrer">第 15 课时</a>中，我们介绍了 dubbo-remoting-zookeeper 对外提供了 StateListener、DataListener 和 ChildListener 三种类型的监听器。<strong>这里的 CacheListener 就是 DataListener 监听器的具体实现</strong>。</p><p>在 CacheListener 中维护了一个 Map&lt;String, Set&gt; 集合（keyListeners 字段）用于记录所有添加的 ConfigurationListener 监听器，其中 Key 是配置信息在 Zookeeper 中存储的 path，Value 为该 path 上的监听器集合。当某个配置项发生变化的时候，CacheListener 会从 keyListeners 中获取该配置对应的 ConfigurationListener 监听器集合，并逐个进行通知。该逻辑是在 CacheListener 的 dataChanged() 方法中实现的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dataChanged</span><span style="color:#E1E4E8;">(String path, Object value, EventType eventType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (eventType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (eventType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> EventType.INITIALIZED) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在收到INITIALIZED事件的时候，表示CacheListener已经成功注册，会释放阻塞在initializedLatch上的主线程</span></span>
<span class="line"><span style="color:#E1E4E8;">        initializedLatch.</span><span style="color:#B392F0;">countDown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (path </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> eventType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> EventType.NodeDeleted)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (path.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">).length </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> MIN_PATH_DEPTH) { </span><span style="color:#6A737D;">// 对path层数进行过滤</span></span>
<span class="line"><span style="color:#E1E4E8;">        String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pathToKey</span><span style="color:#E1E4E8;">(path); </span><span style="color:#6A737D;">// 将path中的&quot;/&quot;替换成&quot;.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigChangeType changeType;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (eventType) { </span><span style="color:#6A737D;">// 将Zookeeper中不同的事件转换成不同的ConfigChangedEvent事件</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> NodeCreated</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                changeType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigChangeType.ADDED;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> NodeDeleted</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                changeType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigChangeType.DELETED;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> NodeDataChanged</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                changeType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigChangeType.MODIFIED;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 使用ConfigChangedEvent封装触发事件的Key、Value、配置group以及事件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigChangedEvent configChangeEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigChangedEvent</span><span style="color:#E1E4E8;">(key, </span><span style="color:#B392F0;">getGroup</span><span style="color:#E1E4E8;">(path), (String) value, changeType);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从keyListeners集合中获取对应的ConfigurationListener集合，然后逐一进行通知</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">ConfigurationListener</span><span style="color:#E1E4E8;">&gt; listeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> keyListeners.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(path);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(listeners)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            listeners.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(listener </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> listener.</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(configChangeEvent));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dataChanged</span><span style="color:#24292E;">(String path, Object value, EventType eventType) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (eventType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (eventType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> EventType.INITIALIZED) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在收到INITIALIZED事件的时候，表示CacheListener已经成功注册，会释放阻塞在initializedLatch上的主线程</span></span>
<span class="line"><span style="color:#24292E;">        initializedLatch.</span><span style="color:#6F42C1;">countDown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (path </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> eventType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> EventType.NodeDeleted)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (path.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">).length </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> MIN_PATH_DEPTH) { </span><span style="color:#6A737D;">// 对path层数进行过滤</span></span>
<span class="line"><span style="color:#24292E;">        String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pathToKey</span><span style="color:#24292E;">(path); </span><span style="color:#6A737D;">// 将path中的&quot;/&quot;替换成&quot;.&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ConfigChangeType changeType;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (eventType) { </span><span style="color:#6A737D;">// 将Zookeeper中不同的事件转换成不同的ConfigChangedEvent事件</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NodeCreated</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                changeType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigChangeType.ADDED;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NodeDeleted</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                changeType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigChangeType.DELETED;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NodeDataChanged</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                changeType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigChangeType.MODIFIED;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用ConfigChangedEvent封装触发事件的Key、Value、配置group以及事件类型</span></span>
<span class="line"><span style="color:#24292E;">        ConfigChangedEvent configChangeEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigChangedEvent</span><span style="color:#24292E;">(key, </span><span style="color:#6F42C1;">getGroup</span><span style="color:#24292E;">(path), (String) value, changeType);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从keyListeners集合中获取对应的ConfigurationListener集合，然后逐一进行通知</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">ConfigurationListener</span><span style="color:#24292E;">&gt; listeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keyListeners.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(listeners)) {</span></span>
<span class="line"><span style="color:#24292E;">            listeners.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(listener </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> listener.</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(configChangeEvent));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>CacheListener 中调用的监听器都是 ConfigurationListener 接口实现，如下图所示，这里涉及<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=4279" target="_blank" rel="noreferrer">第 33 课时</a>介绍的 TagRouter、AppRouter 和 ServiceRouter，它们主要是监听路由配置的变化；还涉及 RegistryDirectory 和 RegistryProtocol 中的四个内部类（AbstractConfiguratorListener 的子类），它们主要监听 Provider 和 Consumer 的配置变化。</p>`,13),F=o(`<p>ConfigurationListener 继承关系图</p><p>这些 ConfigurationListener 实现在前面的课程中已经详细介绍过了，这里就不再重复。ZookeeperDynamicConfiguration 中还提供了 addListener()、removeListener() 两个方法用来增删 ConfigurationListener 监听器，具体实现比较简单，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>介绍完 ZookeeperDynamicConfiguration 的初始化过程之后，我们再来看 ZookeeperDynamicConfiguration 中<strong>读取配置、写入配置</strong>的相关操作。相关方法的实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getInternalProperty</span><span style="color:#E1E4E8;">(String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 直接从Zookeeper中读取对应的Key</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> zkClient.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishConfig</span><span style="color:#E1E4E8;">(String key, String group, String content) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// getPathKey()方法中会添加rootPath和group两部分信息到Key中</span></span>
<span class="line"><span style="color:#E1E4E8;">    String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPathKey</span><span style="color:#E1E4E8;">(group, key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在Zookeeper中创建对应ZNode节点用来存储配置信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    zkClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(path, content, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getInternalProperty</span><span style="color:#24292E;">(String key) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 直接从Zookeeper中读取对应的Key</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> zkClient.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishConfig</span><span style="color:#24292E;">(String key, String group, String content) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// getPathKey()方法中会添加rootPath和group两部分信息到Key中</span></span>
<span class="line"><span style="color:#24292E;">    String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPathKey</span><span style="color:#24292E;">(group, key);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在Zookeeper中创建对应ZNode节点用来存储配置信息</span></span>
<span class="line"><span style="color:#24292E;">    zkClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(path, content, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们重点介绍了 Dubbo 配置中心中的多种配置接口。首先，我们讲解了 Configuration 这个顶层接口的核心方法，然后介绍了 Configuration 接口的相关实现，这些实现可以从环境变量、-D 启动参数、Properties文件以及其他配置文件或注解处读取配置信息。最后，我们还着重介绍了 DynamicConfiguration 这个动态配置接口的定义，并分析了以 Zookeeper 为动态配置中心的 ZookeeperDynamicConfiguration 实现。</p><p>下一课时，我们将深入介绍 Dubbo 动态配置中心启动的核心流程，记得按时来听课。</p>`,7);function D(f,A,h,v,m,P){const n=e("Image");return t(),r("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/04/94/Cip5yF_zz3yABBYdAACqAETTGm0778.png"}),s(),y,i,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/04/94/Cip5yF_zz6eAMN_oAACEEj9pVjg547.png"}),s(),g,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/8C/BD/CgqCHl_zz8WAHdY3AAMJFKW_uQE360.png"}),s(),u,a(n,{alt:"11.png",src:"https://s0.lgstatic.com/i/image/M00/8C/CD/CgqCHl_0L-GAPVy9AAEqog2bl7U068.png"}),s(),d,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/04/94/Cip5yF_zz9iAM1YYAAB_QXlLDcU550.png"}),s(),C,a(n,{alt:"222.png",src:"https://s0.lgstatic.com/i/image/M00/8C/CD/CgqCHl_0L9WAYbfVAAGH_E-l-UU432.png"}),s(),F])}const _=l(c,[["render",D]]);export{k as __pageData,_ as default};
