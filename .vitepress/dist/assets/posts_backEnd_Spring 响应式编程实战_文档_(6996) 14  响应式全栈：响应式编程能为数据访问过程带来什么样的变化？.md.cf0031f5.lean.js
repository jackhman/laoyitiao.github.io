import{_ as o,j as e,o as t,g as r,k as l,h as a,s,Q as p}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"14响应式全栈：响应式编程能为数据访问过程带来什么样的变化？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6996) 14  响应式全栈：响应式编程能为数据访问过程带来什么样的变化？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6996) 14  响应式全栈：响应式编程能为数据访问过程带来什么样的变化？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring 响应式编程实战_文档/(6996) 14  响应式全栈：响应式编程能为数据访问过程带来什么样的变化？.md"},E=s("h1",{id:"_14响应式全栈-响应式编程能为数据访问过程带来什么样的变化",tabindex:"-1"},[a("14响应式全栈：响应式编程能为数据访问过程带来什么样的变化？ "),s("a",{class:"header-anchor",href:"#_14响应式全栈-响应式编程能为数据访问过程带来什么样的变化","aria-label":'Permalink to "14响应式全栈：响应式编程能为数据访问过程带来什么样的变化？"'},"​")],-1),y=s("p",null,"从这一讲开始，我们就进入新的模块，讨论 Spring Boot 中另一个核心技术体系------数据访问。",-1),i=s("p",null,"无论是传统软件还是互联网应用，对于任何一个系统而言，数据的存储和访问都是不可缺少的。而数据访问层的构建可能会涉及多种不同形式的数据存储媒介，包括传统的关系型数据库，也包含各种 NoSQL。今天这一讲我们先讨论响应式数据访问的模型，以及 Spring 框架所提供的支持。",-1),d=s("p",null,"在今天的课程中，我将先引出全栈式响应式编程这一设计理念，在这一设计理念之下，需要解决的一大问题就是如何构建响应式数据访问。幸好，Spring Data 为我们提供了一套完整的解决方案，其中 Spring Data Reactive 组件是你需要重点掌握的。",-1),F=s("h3",{id:"全栈式响应式编程",tabindex:"-1"},[a("全栈式响应式编程 "),s("a",{class:"header-anchor",href:"#全栈式响应式编程","aria-label":'Permalink to "全栈式响应式编程"'},"​")],-1),g=s("p",null,"这一讲要讨论如何构建响应式数据访问组件，构建响应式数据访问组件的目的来自一个核心概念，即全栈式响应式编程。",-1),u=s("p",null,"所谓全栈式响应式编程，指的是响应式开发方式的有效性取决于整个请求链路的各个环节是否都采用了响应式编程模型，正如下图所展示的。",-1),A=p("",35),D=p("",23);function v(B,h,S,b,R,C){const n=e("Image");return t(),r("div",null,[E,y,i,d,F,g,u,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/37/91/CioPOWB33--ACl0DAADS1lLV65A836.png"}),a(),A,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/37/91/CioPOWB34AyABV44AAC4qGvugN0231.png"}),a(),D])}const m=o(c,[["render",v]]);export{f as __pageData,m as default};
