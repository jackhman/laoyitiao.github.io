import{_ as s,o as a,g as n,Q as l}from"./chunks/framework.f949202b.js";const d=JSON.parse('{"title":"认证 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4535) 18  权限分析：Kubernete 集群权限管理那些事儿.md","filePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4535) 18  权限分析：Kubernete 集群权限管理那些事儿.md","lastUpdated":null}'),p={name:"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4535) 18  权限分析：Kubernete 集群权限管理那些事儿.md"},e=l(`<p>你好，我是正范。</p><p>通过前面的课程学习，你已经学会了使用<code>kubectl</code>命令行，或者直接发送 REST 请求，以及使用各种语言的 <a href="https://kubernetes.io/docs/reference/using-api/client-libraries/" target="_blank" rel="noreferrer">client 库</a>来跟 APIServer 进行交互。那么你是否知道在这其中Kubernetes 是如何对这些请求进行认证、授权的呢？这节课，我们就来一探究竟。</p><p>任何请求访问 Kubernetes 的 kube-apiserver 时，都要依次经历三个阶段：认证（Authentication，有时简写成 AuthN）、授权（Authorization，有时简写成 AuthZ）和准入控制（Admission Control）。</p><p><img src="https://s0.lgstatic.com/i/image/M00/62/1E/Ciqc1F-RVYyAeaf5AABESlN1pJg327.png" alt="image (2).png"></p><p>(<a href="http://cloudgeekz.com/1045/kubernetes-authentication-and-authorization.html" target="_blank" rel="noreferrer">(http://cloudgeekz.com/1045/kubernetes-authentication-and-authorization.html)</a>)</p><p>其中，认证这个概念比较好理解，就是做身份校验，解决&quot;你是谁？&quot;的问题。</p><p><strong>授权</strong>负责做权限管控，解决&quot;你能干什么？&quot;的问题，给予你能访问 Kubernetes 集群中的哪些资源以及做哪些操作的权利，比如你是否能创建一个 Pod，是否能删除一个 Pod。</p><p><strong>准入控制</strong>，从字面上你可能不太好理解。其实就是由一组控制逻辑级联而成，对对象进行拦截校验、更改等操作。比如你打算在一个名为 test 的 namespace 中创建一个 Pod，如果这个 namespace 不存在，集群要不要自动创建出来？或者直接拒绝掉该请求？这些逻辑都可以通过准入控制进行配置。</p><p>当然如果你的 Kubernetes 集群开启了 HTTP 访问，就不再需要认证和授权流程了。显然这种配置相当于敞开大门，风险太大了，所以在生产环境我建议你不要这么配置。</p><p>上述三个阶段，任何一个阶段验证失败都会导致该请求被拒绝访问，我们现在深入认识一下每个阶段。</p><h3 id="认证" tabindex="-1">认证 <a class="header-anchor" href="#认证" aria-label="Permalink to &quot;认证&quot;">​</a></h3><p>在认证阶段最重要的就是身份（Identity），我们需要从中获取到用户的相关信息。通常，Identity 信息可以通过 User 或者 Group 来定义，但是 Kubernetes 中其实并没有相关定义，所以你无法通过 Kubernetes API 接口进行创建、查询和管理。</p><p>Kubernetes 认为 User 这类信息由外部系统来管理，自己并不负责管理和设计，这样可以避免重复定义用户模型，方便第三方用户权限平台进行对接。</p><p>所以 Kuberentes 是如何做身份认证的呢？这里我们简单介绍一下 Kubernetes 中几种常见的用户认证方式。</p><h4 id="x509-证书" tabindex="-1">x509 证书 <a class="header-anchor" href="#x509-证书" aria-label="Permalink to &quot;x509 证书&quot;">​</a></h4><p>Kubernetes 使用<a href="https://developers.cloudflare.com/access/service-auth/mtls" target="_blank" rel="noreferrer">mTLS</a>进行身份验证，通过解析请求使用的 客户端（client）证书，将其中的 subject 的通用名称（Common Name）字段（例如&quot;/CN=bob&quot;）作为用户名。Kubernetes 集群各个组件间相互通信，都是基于 x509 证书进行身份校验的。关于证书的创建、查看等，可以参考<a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/certificates/" target="_blank" rel="noreferrer">官方文档</a>。</p><p>比如使用<code>openssl</code>命令行工具生成一个证书签名请求（CSR）：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">openssl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">req</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zhangsan.pem</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-out</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zhangsan-csr.pem</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-subj</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/CN=zhangsan/O=app1/O=app2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">openssl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">req</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zhangsan.pem</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-out</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zhangsan-csr.pem</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-subj</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/CN=zhangsan/O=app1/O=app2&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这条命令会使用用户名zhangsan生成一个 CSR，且它属于 &quot;app1&quot; 和 &quot;app2&quot; 两个用户组，然后我们使用 CA 证书根据这个 CSR 就可以签发出一对证书。当用这对证书去访问 APIServer 时，它拿到的用户就是zhangsan了。</p><h4 id="token" tabindex="-1">Token <a class="header-anchor" href="#token" aria-label="Permalink to &quot;Token&quot;">​</a></h4><p>我们接着来看基于 Token 的验证方式，它又可以分为几种类型。</p><p>第一种是<strong>用户自己提供的静态 Token</strong>，可以将这些 Token 写到一个 CSV 文件中，其中至少包含 3 列：分别为 Token、用户名和用户 ID。你可以增加一个可选列包含 group 的信息，比如：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">token</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,user</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,uid</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;group1,group2,group3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">token</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,user</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,uid</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;group1,group2,group3&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>APIServer 在启动时会通过参数<code>--token-auth-file=xxxx</code>来指定读取的 CSV 文件。不过这种方式，实际环境中基本上不会使用到。毕竟这种静态文件不方便修改，每次修改后还需要重新启动 APIServer。</p><p>还有一种是<strong>ServiceAccount Token</strong> 。这是 Kubernetes 中使用最为广泛的认证方式之一，主要用来给 Pod 提供访问 APIServer 的权限，通过使用 Volume 的方式挂载到 Pod 中。我们之前讲 Pod、Volume 的时候提到过，你也可以参考<a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-service-account/" target="_blank" rel="noreferrer">这份文档</a>重温下如何为 Pod 配置 ServiceAccount。</p><p>当你创建一个 ServiceAccount 的时候，kube-controller-manager 会自动帮你创建出一个Secret来保存 Token，比如：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sa</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#B392F0;">serviceaccount/demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">created</span></span>
<span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">~</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sa</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">SECRETS</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">6</span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">~</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sa</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#B392F0;">Name:</span><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#B392F0;">Namespace:</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#B392F0;">Labels:</span><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">non</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">Annotations:</span><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">non</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">Image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">secrets:</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">non</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">Mountable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">secrets:</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#B392F0;">Tokens:</span><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#B392F0;">Events:</span><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">non</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sa</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#6F42C1;">serviceaccount/demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">created</span></span>
<span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;">  </span><span style="color:#032F62;">~</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sa</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">   </span><span style="color:#032F62;">SECRETS</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">demo</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">6</span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;">  </span><span style="color:#032F62;">~</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sa</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#6F42C1;">Name:</span><span style="color:#24292E;">                </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#6F42C1;">Namespace:</span><span style="color:#24292E;">           </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#6F42C1;">Labels:</span><span style="color:#24292E;">              </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">non</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">Annotations:</span><span style="color:#24292E;">         </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">non</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">Image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">secrets:</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">non</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">Mountable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">secrets:</span><span style="color:#24292E;">   </span><span style="color:#032F62;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#6F42C1;">Tokens:</span><span style="color:#24292E;">              </span><span style="color:#032F62;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#6F42C1;">Events:</span><span style="color:#24292E;">              </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">non</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>可以看到这里自动创建了一个名为<code>demo-token-fvsjg</code>的 Secret，我们来查看一下其中的内容：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">secret</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">               </span><span style="color:#9ECBFF;">TYPE</span><span style="color:#E1E4E8;">                                  </span><span style="color:#9ECBFF;">DATA</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">demo-token-fvsjg</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">kubernetes.io/service-account-token</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">27</span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">secret</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#B392F0;">Name:</span><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#B392F0;">Namespace:</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#B392F0;">Labels:</span><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">non</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">Annotations:</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">kubernetes.io/service-account.name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">kubernetes.io/service-account.uid:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">f8fe4799-9add-4a36-8c29-a6b2744ba9a2</span></span>
<span class="line"><span style="color:#B392F0;">Type:</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">kubernetes.io/service-account-token</span></span>
<span class="line"><span style="color:#B392F0;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">====</span></span>
<span class="line"><span style="color:#B392F0;">token:</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">eyJhbGciOiJSUzI1NiIsImtpZCI6Ildhc3plOFE0UXBlRE8xTFdsRThRVXktRF93T0otcW55VXI3R0RvV1IzVjgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlbW8tdG9rZW4tZnZzamciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVtbyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImY4ZmU0Nzk5LTlhZGQtNGEzNi04YzI5LWE2YjI3NDRiYTlhMiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlbW8ifQ.t0sNk8PiRIgMXaauzM8v8eW_AF7J5Su_TpyURaeBQX0BuFDpU-rrTC6h9sjetAQOLa6iLFsrG2tqH04pNo2N6TB73-K-M54veVpP6FGhceLO0Vsz_iTJuOsnkS_6agqfW0UrtaY8_oCk1OZipdbTJYZlmwlb6opcfP1j7bFHCdDbwfbWx8ilHqTaJ5_r7zrdhxsmC5ogtBRDaJfEYmsIBZSgnt_0qMHNj9L47n2mj_wo-aQQ25o0lbO_7RSeVA17kkgbAJ2wzwvv8-i3f7K23DSxab3k8trbuIRt1R3Gl33fv5WIwiz9okYIFfus4pe0MCtjBxxTMa526cdezKS4LQ</span></span>
<span class="line"><span style="color:#B392F0;">ca.crt:</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">1025</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bytes</span></span>
<span class="line"><span style="color:#B392F0;">namespace:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bytes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">secret</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">               </span><span style="color:#032F62;">TYPE</span><span style="color:#24292E;">                                  </span><span style="color:#032F62;">DATA</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">demo-token-fvsjg</span><span style="color:#24292E;">   </span><span style="color:#032F62;">kubernetes.io/service-account-token</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">27</span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">secret</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#6F42C1;">Name:</span><span style="color:#24292E;">         </span><span style="color:#032F62;">demo-token-fvsjg</span></span>
<span class="line"><span style="color:#6F42C1;">Namespace:</span><span style="color:#24292E;">    </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#6F42C1;">Labels:</span><span style="color:#24292E;">       </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">non</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">Annotations:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">kubernetes.io/service-account.name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">kubernetes.io/service-account.uid:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">f8fe4799-9add-4a36-8c29-a6b2744ba9a2</span></span>
<span class="line"><span style="color:#6F42C1;">Type:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">kubernetes.io/service-account-token</span></span>
<span class="line"><span style="color:#6F42C1;">Data</span></span>
<span class="line"><span style="color:#24292E;">====</span></span>
<span class="line"><span style="color:#6F42C1;">token:</span><span style="color:#24292E;">      </span><span style="color:#032F62;">eyJhbGciOiJSUzI1NiIsImtpZCI6Ildhc3plOFE0UXBlRE8xTFdsRThRVXktRF93T0otcW55VXI3R0RvV1IzVjgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlbW8tdG9rZW4tZnZzamciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVtbyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImY4ZmU0Nzk5LTlhZGQtNGEzNi04YzI5LWE2YjI3NDRiYTlhMiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlbW8ifQ.t0sNk8PiRIgMXaauzM8v8eW_AF7J5Su_TpyURaeBQX0BuFDpU-rrTC6h9sjetAQOLa6iLFsrG2tqH04pNo2N6TB73-K-M54veVpP6FGhceLO0Vsz_iTJuOsnkS_6agqfW0UrtaY8_oCk1OZipdbTJYZlmwlb6opcfP1j7bFHCdDbwfbWx8ilHqTaJ5_r7zrdhxsmC5ogtBRDaJfEYmsIBZSgnt_0qMHNj9L47n2mj_wo-aQQ25o0lbO_7RSeVA17kkgbAJ2wzwvv8-i3f7K23DSxab3k8trbuIRt1R3Gl33fv5WIwiz9okYIFfus4pe0MCtjBxxTMa526cdezKS4LQ</span></span>
<span class="line"><span style="color:#6F42C1;">ca.crt:</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">1025</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bytes</span></span>
<span class="line"><span style="color:#6F42C1;">namespace:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bytes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Data 里面的 token 我们可以到<a href="https://jwt.io/" target="_blank" rel="noreferrer">https://jwt.io/</a>中 Decode 出来：</p><p><img src="https://s0.lgstatic.com/i/image/M00/62/1E/Ciqc1F-RVduACXUqABUdlGrHMh4648.png" alt="image (3).png"></p><p>从解析出来的 Payload 中可以看到， ServiceAccount 所属的 namespace、name 等信息。</p><p>除此之外，还支持<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#bootstrap-tokens" target="_blank" rel="noreferrer">Bootstrap Token</a>、<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#openid-connect-tokens" target="_blank" rel="noreferrer">OpeID Connect Token (OIDC Token)</a>、<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/#webhook-token-authentication" target="_blank" rel="noreferrer">Webhook Token</a>等，在此不一一介绍。</p><p>值得一提的是，Bootstrap Token 是 kubeadm 引入的方便创建新集群所使用的 Token 类型，通过如下类似的命令就可以将其加入新的节点中：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubeadm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">join</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--discovery-token</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">abcdef.1234567890abcdef</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubeadm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">join</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--discovery-token</span><span style="color:#24292E;"> </span><span style="color:#032F62;">abcdef.1234567890abcdef</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>不管是上面哪种 Token，我们都可以拿来向 APIServer 发送请求，只需要向 HTTP 请求的 Header 中添加一个键为 Authorization ，值为<code>Bearer THETOKEN</code>的字段，类似如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Authorization: Bearer this-is-a-very-very-very-long-token</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Authorization: Bearer this-is-a-very-very-very-long-token</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>还有一种是静态用户密码文件，在 1.16 版本以前，Kubernetes 支持指定一个 CSV 文件，里面包含了用户名以及密码等信息。但是在 1.16 版本开始已经<a href="https://github.com/kubernetes/kubernetes/pull/81152" target="_blank" rel="noreferrer">被废弃掉了</a>，这里我提出来是想告诉你请不要再使用这种方式了。</p><p>我介绍的这些也是使用最多的认证方式，通过认证就来到了授权阶段。</p><h3 id="授权" tabindex="-1">授权 <a class="header-anchor" href="#授权" aria-label="Permalink to &quot;授权&quot;">​</a></h3><p>Kubernetes 内部有多种授权模块，比如 <a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/node/" target="_blank" rel="noreferrer">Node</a>、<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/abac/" target="_blank" rel="noreferrer">ABAC</a>、<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/" target="_blank" rel="noreferrer">RBAC</a>、<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/webhook/" target="_blank" rel="noreferrer">Webhook</a>。授权阶段会根据从 AuthN 拿到的用户信息，依次按配置的授权次序逐一进行权限验证。任一授权模块验证通过，即允许该请求继续访问。</p><p>我们这里简要讲一下 ABAC 和 RBAC 这两种授权模式。</p><h4 id="abac" tabindex="-1">ABAC <a class="header-anchor" href="#abac" aria-label="Permalink to &quot;ABAC&quot;">​</a></h4><p>ABAC (Attribute Based Access Control) 是一种基于属性的访问控制，可以给 APIServer 指定一个 JSON 文件<code>--authorization-policy-file=SOME_FILENAME</code>，该文件描述了一组属性组合策略，比如：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">&quot;apiVersion&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;abac.authorization.kubernetes.io/v1beta1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;kind&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Policy&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;spec&quot;</span><span style="color:#E1E4E8;">: {</span><span style="color:#79B8FF;">&quot;user&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;namespace&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;resource&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;pods&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;readonly&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">&quot;apiVersion&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;abac.authorization.kubernetes.io/v1beta1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;kind&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Policy&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;spec&quot;</span><span style="color:#24292E;">: {</span><span style="color:#005CC5;">&quot;user&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;namespace&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;resource&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;pods&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;readonly&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这条策略表示，用户 zhangsan 可以以<strong>只读</strong> 的方式读取任何 namespace 中的 Pod。这里有一份<a href="https://raw.githubusercontent.com/kubernetes/kubernetes/master/pkg/auth/authorizer/abac/example_policy_file.jsonl" target="_blank" rel="noreferrer">示例文件</a>，你可以参考一下。</p><p>不过在实际使用中，ABAC 使用得比较少，跟我们上面 AuthN 中提到的静态 Token 一样，不方便修改、更新，每次变更后都需要重启 APIServer。所以在实际使用中，RBAC 最常见，使用更广泛。</p><h4 id="rbac" tabindex="-1">RBAC <a class="header-anchor" href="#rbac" aria-label="Permalink to &quot;RBAC&quot;">​</a></h4><p>相对而言，RBAC 使用起来就非常方便了，通过 Kubernetes 的对象就可以直接进行管理，也便于动态调整权限。</p><p>RBAC 中引入了<strong>角色</strong>，所有的权限都是围着这个角色进行展开的，每个角色里面定义了可以操作的资源以及操作方式。在 Kubernetes 中有两种角色，一种是 namespace 级别的 Role ，一种是集群级别的 ClusterRole 。</p><p>在 Kubernetes 中有些资源是 namespace 级别的，比如 Pod、Service 等，而有些则属于集群级别，比如 Node、PV 等。所以有了 Role 和 ClusterRole 两种角色。</p><p>我们来看个例子：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kind:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Role</span></span>
<span class="line"><span style="color:#B392F0;">apiVersion:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color:#B392F0;">metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">namespace:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-reader</span></span>
<span class="line"><span style="color:#B392F0;">rules:</span></span>
<span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apiGroups:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;"># 空字符串&quot;&quot;表明使用core API group</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resources:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;pods&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">verbs:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;get&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;watch&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;list&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kind:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Role</span></span>
<span class="line"><span style="color:#6F42C1;">apiVersion:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color:#6F42C1;">metadata:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">namespace:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-reader</span></span>
<span class="line"><span style="color:#6F42C1;">rules:</span></span>
<span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apiGroups:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;"># 空字符串&quot;&quot;表明使用core API group</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resources:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;pods&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">verbs:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;watch&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;list&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这样一个角色表示可以访问 default 命名空间下面的 Pods，并可以对其进行 get、watch 以及 list 操作。</p><p>ClusterRole 除了可以定义集群方位的资源外，比如 Node，还可以定义跨 namespace 的资源访问，比如你想访问所有命名空间下面的 Pod，就可以这么定义：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kind:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ClusterRole</span></span>
<span class="line"><span style="color:#B392F0;">apiVersion:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color:#B392F0;">metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 鉴于ClusterRole是集群范围对象，所以这里不需要定义&quot;namespace&quot;字段</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pods-reader</span></span>
<span class="line"><span style="color:#B392F0;">rules:</span></span>
<span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apiGroups:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resources:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;pods&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">verbs:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;get&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;watch&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;list&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kind:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ClusterRole</span></span>
<span class="line"><span style="color:#6F42C1;">apiVersion:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color:#6F42C1;">metadata:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 鉴于ClusterRole是集群范围对象，所以这里不需要定义&quot;namespace&quot;字段</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pods-reader</span></span>
<span class="line"><span style="color:#6F42C1;">rules:</span></span>
<span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apiGroups:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resources:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;pods&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">verbs:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;watch&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;list&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>RBAC 中定义这些角色包含了一组权限规则，这些规则纯粹以累加形式组合，没有互斥的概念。</p><p>定义好角色，我们就可以做权限绑定了。这里分别有两个 API 对象，RoleBinding 和 ClusterRoleBinding。角色绑定就是把一个权限授予一个或者一组用户，例如：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">apiVersion:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color:#6A737D;"># 此角色绑定使得用户 &quot;jane&quot; 或者 &quot;manager&quot;组（Group）能够读取 &quot;default&quot; 命名空间中的 Pods</span></span>
<span class="line"><span style="color:#B392F0;">kind:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">RoleBinding</span></span>
<span class="line"><span style="color:#B392F0;">metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">read-pods</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">namespace:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#B392F0;">subjects:</span></span>
<span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kind:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">User</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jane</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 名称区分大小写</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apiGroup:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kind:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Group</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">manager</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 名称区分大小写</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apiGroup:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color:#B392F0;">roleRef:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">kind:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Role</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 这里可以是 Role，也可以是 ClusterRole</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pods-reader</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 这里的名称必须与你想要绑定的 Role 或 ClusterRole 名称一致</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apiGroup:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rbac.authorization.k8s.io</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">apiVersion:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span style="color:#6A737D;"># 此角色绑定使得用户 &quot;jane&quot; 或者 &quot;manager&quot;组（Group）能够读取 &quot;default&quot; 命名空间中的 Pods</span></span>
<span class="line"><span style="color:#6F42C1;">kind:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">RoleBinding</span></span>
<span class="line"><span style="color:#6F42C1;">metadata:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">read-pods</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">namespace:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#6F42C1;">subjects:</span></span>
<span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kind:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">User</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jane</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 名称区分大小写</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">apiGroup:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kind:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Group</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">manager</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 名称区分大小写</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">apiGroup:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="color:#6F42C1;">roleRef:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">kind:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Role</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 这里可以是 Role，也可以是 ClusterRole</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pods-reader</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 这里的名称必须与你想要绑定的 Role 或 ClusterRole 名称一致</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">apiGroup:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rbac.authorization.k8s.io</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>这里定义的 RoleBinding 对象在 default 命名空间中将 pods-reader 角色授予用户 jane和组 manager。 这一授权将允许用户 jane 和 manager 组中的各个用户从default 命名空间中读取到 Pod。</p><p>好了，最后就是准入控制了。</p><h3 id="准入控制" tabindex="-1">准入控制 <a class="header-anchor" href="#准入控制" aria-label="Permalink to &quot;准入控制&quot;">​</a></h3><p>准入控制可以帮助我们在 APIServer 真正处理对象前做一些校验以及修改的工作。</p><p>这里官方列出了<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/#%E6%AF%8F%E4%B8%AA%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">很多准入控制组件</a>，官方已经将使用方法写得很清楚了，你可以根据自己的需要，选择合适的准入控制插件，我就不再赘述了。</p><h3 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h3><p>作为一个企业级的容器管理调度平台，Kubernetes 在 Auth 方面设计得很完善，支持多种后端身份认证授权系统，比如 LDAP (Lightweight Directory Access Protocol)、Webhook 等。AuthN 负责完成对用户的认证，并获取用户的相关信息（比如 Username、Groups 等），而 AuthZ 则会根据 AuthN 返回的用户信息，根据配置的授权模式进行权限校验，来决定是否允许对某个 API 资源的操作请求。</p><p>到这里这节课就结束了，如果你对本节课有什么想法或者疑问，欢迎你在留言区留言，我们一起讨论。</p>`,67),o=[e];function t(r,c,y,E,i,u){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{d as __pageData,b as default};
