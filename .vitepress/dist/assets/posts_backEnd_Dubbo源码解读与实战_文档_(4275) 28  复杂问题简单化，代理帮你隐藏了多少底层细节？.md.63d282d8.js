import{_ as o,j as e,o as t,g as c,k as l,h as n,s,Q as p}from"./chunks/framework.cfb14fe0.js";const S=JSON.parse('{"title":"28复杂问题简单化，代理帮你隐藏了多少底层细节？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4275) 28  复杂问题简单化，代理帮你隐藏了多少底层细节？.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4275) 28  复杂问题简单化，代理帮你隐藏了多少底层细节？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4275) 28  复杂问题简单化，代理帮你隐藏了多少底层细节？.md"},E=s("h1",{id:"_28复杂问题简单化-代理帮你隐藏了多少底层细节",tabindex:"-1"},[n("28复杂问题简单化，代理帮你隐藏了多少底层细节？ "),s("a",{class:"header-anchor",href:"#_28复杂问题简单化-代理帮你隐藏了多少底层细节","aria-label":'Permalink to "28复杂问题简单化，代理帮你隐藏了多少底层细节？"'},"​")],-1),y=s("p",null,"在前面介绍 DubboProtocol 的相关实现时，我们知道 Protocol 这一层以及后面介绍的 Cluster 层暴露出来的接口都是 Dubbo 内部的一些概念，业务层无法直接使用。为了让业务逻辑能够无缝使用 Dubbo，我们就需要将业务逻辑与 Dubbo 内部概念打通，这就用到了动态生成代理对象的功能。Proxy 层在 Dubbo 架构中的位置如下所示（虽然在架构图中 Proxy 层与 Protocol 层距离很远，但 Proxy 的具体代码实现就位于 dubbo-rpc-api 模块中）：",-1),i=s("p",null,"Dubbo 架构中 Proxy 层的位置图",-1),F=s("p",null,[n("在 Consumer 进行调用的时候，Dubbo 会通过"),s("strong",null,"动态代理"),n(" 将业务接口实现对象转化为相应的 Invoker 对象，然后在 Cluster 层、Protocol 层都会使用 Invoker。在 Provider 暴露服务的时候，也会有 Invoker 对象与业务接口实现对象之间的转换，这同样也是通过"),s("strong",null,"动态代理"),n("实现的。")],-1),d=s("p",null,"实现动态代理的常见方案有：JDK 动态代理、CGLib 动态代理和 Javassist 动态代理。这些方案的应用都还是比较广泛的，例如，Hibernate 底层使用了 Javassist 和 CGLib，Spring 使用了 CGLib 和 JDK 动态代理，MyBatis 底层使用了 JDK 动态代理和 Javassist。",-1),C=s("p",null,"从性能方面看，Javassist 与 CGLib 的实现方式相差无几，两者都比 JDK 动态代理性能要高，具体高多少，这就要看具体的机器、JDK 版本、测试基准的具体实现等条件了。",-1),u=s("p",null,[s("strong",null,"Dubbo 提供了两种方式来实现代理，分别是 JDK 动态代理和 Javassist"),n("。我们可以在 proxy 这个包内，看到相应工厂类，如下图所示：")],-1),A=p(`<p>ProxyFactory 核心实现的位置</p><p>了解了 Proxy 存在的必要性以及 Dubbo 提供的两种代理生成方式之后，下面我们就开始对 Proxy 层的实现进行深入分析。</p><h3 id="proxyfactory" tabindex="-1">ProxyFactory <a class="header-anchor" href="#proxyfactory" aria-label="Permalink to &quot;ProxyFactory&quot;">​</a></h3><p>关于 ProxyFactory 接口，我们在前面的第 23 课时中已经介绍过了，这里做一下简单回顾。ProxyFactory 是一个扩展接口，其中定义了<strong>两个核心方法：一个是 getProxy() 方法，为 Invoker 对象创建代理对象；另一个是 getInvoker() 方法，将代理对象反向封装成 Invoker 对象。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;javassist&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProxyFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为传入的Invoker对象创建代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Adaptive</span><span style="color:#E1E4E8;">({PROXY_KEY})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">invoker</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RpcException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Adaptive</span><span style="color:#E1E4E8;">({PROXY_KEY})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">invoker</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">generic</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RpcException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将传入的代理对象封装成Invoker对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Adaptive</span><span style="color:#E1E4E8;">({PROXY_KEY})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">proxy</span><span style="color:#E1E4E8;">, Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">, URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RpcException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;javassist&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProxyFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为传入的Invoker对象创建代理对象</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Adaptive</span><span style="color:#24292E;">({PROXY_KEY})</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">invoker</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RpcException;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Adaptive</span><span style="color:#24292E;">({PROXY_KEY})</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">invoker</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">generic</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RpcException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将传入的代理对象封装成Invoker对象</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Adaptive</span><span style="color:#24292E;">({PROXY_KEY})</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">proxy</span><span style="color:#24292E;">, Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">type</span><span style="color:#24292E;">, URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RpcException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>看到 ProxyFactory 上的 @SPI 注解我们知道，其默认实现使用 Javassist 来创建代码对象。</p><p><strong>AbstractProxyFactory 是代理工厂的抽象类</strong>，继承关系如下图所示：</p>`,7),g=p(`<p>AbstractProxyFactory 继承关系图</p><h3 id="abstractproxyfactory" tabindex="-1">AbstractProxyFactory <a class="header-anchor" href="#abstractproxyfactory" aria-label="Permalink to &quot;AbstractProxyFactory&quot;">​</a></h3><p>AbstractProxyFactory 主要处理的是需要代理的接口，具体实现在 getProxy() 方法中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> invoker, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> generic) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; interfaces </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;();</span><span style="color:#6A737D;">// 记录要代理的接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取URL中interfaces参数指定的接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    String config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(INTERFACES);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (config </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 按照逗号切分interfaces参数，得到接口集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] types </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> COMMA_SPLIT_PATTERN.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String type </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> types) { </span><span style="color:#6A737D;">// 记录这些接口信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            interfaces.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(ReflectUtils.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(type));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (generic) { </span><span style="color:#6A737D;">// 针对泛化接口的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">GenericService.class.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getInterface</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            interfaces.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(GenericService.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从URL中获取interface参数指定的接口</span></span>
<span class="line"><span style="color:#E1E4E8;">        String realInterface </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(Constants.INTERFACE);</span></span>
<span class="line"><span style="color:#E1E4E8;">        interfaces.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(ReflectUtils.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(realInterface));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Invoker中type字段指定的接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    interfaces.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getInterface</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加EchoService、Destroyable两个默认接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    interfaces.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(INTERNAL_INTERFACES));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用抽象的getProxy()重载方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(invoker, interfaces.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> invoker, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> generic) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; interfaces </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span><span style="color:#6A737D;">// 记录要代理的接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取URL中interfaces参数指定的接口</span></span>
<span class="line"><span style="color:#24292E;">    String config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(INTERFACES);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (config </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 按照逗号切分interfaces参数，得到接口集合</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] types </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> COMMA_SPLIT_PATTERN.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String type </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> types) { </span><span style="color:#6A737D;">// 记录这些接口信息</span></span>
<span class="line"><span style="color:#24292E;">            interfaces.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(ReflectUtils.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(type));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (generic) { </span><span style="color:#6A737D;">// 针对泛化接口的处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">GenericService.class.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getInterface</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            interfaces.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(GenericService.class);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从URL中获取interface参数指定的接口</span></span>
<span class="line"><span style="color:#24292E;">        String realInterface </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(Constants.INTERFACE);</span></span>
<span class="line"><span style="color:#24292E;">        interfaces.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(ReflectUtils.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(realInterface));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Invoker中type字段指定的接口</span></span>
<span class="line"><span style="color:#24292E;">    interfaces.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getInterface</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加EchoService、Destroyable两个默认接口</span></span>
<span class="line"><span style="color:#24292E;">    interfaces.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(INTERNAL_INTERFACES));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用抽象的getProxy()重载方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(invoker, interfaces.</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AbstractProxyFactory 从多个地方获取需要代理的接口之后，会调用子类实现的 getProxy() 方法创建代理对象。</p><p>JavassistProxyFactory 对 getProxy() 方法的实现比较简单，直接委托给了 dubbo-common 模块中的 Proxy 工具类进行代理类的生成。下面我们就来深入分析 Proxy 生成代理类的全流程。</p><h3 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h3><p><strong>在 dubbo-common 模块，Proxy 中的 getProxy() 方法提供了动态创建代理类的核心实现</strong>。这个创建代理类的流程比较长，为了便于你更好地理解，这里我们将其拆开，一步步进行分析。</p><p>首先是查找 PROXY_CACHE_MAP 这个代理类缓存（new WeakHashMap&lt;ClassLoader, Map&lt;String, Object&gt;&gt;() 类型），其中第一层 Key 是 ClassLoader 对象，第二层 Key 是上面整理得到的接口拼接而成的，Value 是被缓存的代理类的 WeakReference（弱引用）。</p><p>WeakReference（弱引用）的特性是：WeakReference 引用的对象生命周期是两次 GC 之间，也就是说当垃圾收集器扫描到只具有弱引用的对象时，无论当前内存空间是否足够，都会回收该对象。（由于垃圾收集器是一个优先级很低的线程，不一定会很快发现那些只具有弱引用的对象。）</p><p>WeakReference 的特性决定了它特别适合用于数据可恢复的内存型缓存。查找缓存的结果有下面三个：</p><ul><li><p>如果缓存中查找不到任务信息，则会在缓存中添加一个 PENDING_GENERATION_MARKER 占位符，当前线程后续创建生成代理类并最终替换占位符。</p></li><li><p>如果在缓存中查找到了 PENDING_GENERATION_MARKER 占位符，说明其他线程已经在生成相应的代理类了，当前线程会阻塞等待。</p></li><li><p>如果缓存中查找到完整代理类，则会直接返回，不会再执行后续动态代理类的生成。</p></li></ul><p>下面是 Proxy.getProxy() 方法中对 PROXY_CACHE_MAP 缓存进行查询的相关代码片段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Proxy </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(ClassLoader cl, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">... ics) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    StringBuilder sb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ics.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 循环处理每个接口类</span></span>
<span class="line"><span style="color:#E1E4E8;">        String itf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ics[i].</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ics[i].</span><span style="color:#B392F0;">isInterface</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 传入的必须是接口类，否则直接报错</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(itf </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; is not a interface.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 加载接口类，加载失败则直接报错</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(itf, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, cl);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tmp </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> ics[i]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        sb.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(itf).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;;&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 将接口类的完整名称用分号连接起来</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 接口列表将会作为第二层集合的Key</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sb.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; cache;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (PROXY_CACHE_MAP) { </span><span style="color:#6A737D;">// 加锁同步</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PROXY_CACHE_MAP.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(cl, k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Proxy proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (cache) { </span><span style="color:#6A737D;">// 加锁</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Object value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Reference</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 获取到WeakReference</span></span>
<span class="line"><span style="color:#E1E4E8;">                proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Proxy) ((Reference</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) value).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (proxy </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 查找到缓存的代理类</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> proxy;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> PENDING_GENERATION_MARKER) { </span><span style="color:#6A737D;">// 获取到占位符</span></span>
<span class="line"><span style="color:#E1E4E8;">                cache.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 阻塞等待其他线程生成好代理类，并添加到缓存中</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 设置占位符，由当前线程生成代理类</span></span>
<span class="line"><span style="color:#E1E4E8;">                cache.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, PENDING_GENERATION_MARKER);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 退出当前循环</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ... </span><span style="color:#6A737D;">// 后续动态生成代理类的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Proxy </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(ClassLoader cl, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">... ics) {</span></span>
<span class="line"><span style="color:#24292E;">    StringBuilder sb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ics.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 循环处理每个接口类</span></span>
<span class="line"><span style="color:#24292E;">        String itf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ics[i].</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ics[i].</span><span style="color:#6F42C1;">isInterface</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 传入的必须是接口类，否则直接报错</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(itf </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is not a interface.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 加载接口类，加载失败则直接报错</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(itf, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, cl);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tmp </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> ics[i]) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(itf).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;;&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 将接口类的完整名称用分号连接起来</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接口列表将会作为第二层集合的Key</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sb.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; cache;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (PROXY_CACHE_MAP) { </span><span style="color:#6A737D;">// 加锁同步</span></span>
<span class="line"><span style="color:#24292E;">        cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PROXY_CACHE_MAP.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(cl, k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Proxy proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (cache) { </span><span style="color:#6A737D;">// 加锁</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Object value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Reference</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 获取到WeakReference</span></span>
<span class="line"><span style="color:#24292E;">                proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Proxy) ((Reference</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) value).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (proxy </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 查找到缓存的代理类</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> proxy;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> PENDING_GENERATION_MARKER) { </span><span style="color:#6A737D;">// 获取到占位符</span></span>
<span class="line"><span style="color:#24292E;">                cache.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 阻塞等待其他线程生成好代理类，并添加到缓存中</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 设置占位符，由当前线程生成代理类</span></span>
<span class="line"><span style="color:#24292E;">                cache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, PENDING_GENERATION_MARKER);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 退出当前循环</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... ... </span><span style="color:#6A737D;">// 后续动态生成代理类的逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>完成缓存的查找之后，下面我们再来看代理类的生成过程。</p><p>第一步，调用 ClassGenerator.newInstance() 方法创建 ClassLoader 对应的 ClassPool。ClassGenerator 中封装了 Javassist 的基本操作，还定义了很多字段用来暂存代理类的信息，在其 toClass() 方法中会用这些暂存的信息来动态生成代理类。下面就来简单说明一下这些字段。</p><ul><li><p>mClassName（String 类型）：代理类的类名。</p></li><li><p>mSuperClass（String 类型）：代理类父类的名称。</p></li><li><p>mInterfaces（Set<code>&lt;String&gt;</code> 类型）：代理类实现的接口。</p></li><li><p>mFields（List类型）：代理类中的字段。</p></li><li><p>mConstructors（List<code>&lt;String&gt;</code>类型）：代理类中全部构造方法的信息，其中包括构造方法的具体实现。</p></li><li><p>mMethods（List<code>&lt;String&gt;</code>类型）：代理类中全部方法的信息，其中包括方法的具体实现。</p></li><li><p>mDefaultConstructor（boolean 类型）：标识是否为代理类生成的默认构造方法。</p></li></ul><p>在 ClassGenerator 的 toClass() 方法中，会根据上述字段用 Javassist 生成代理类，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toClass</span><span style="color:#E1E4E8;">(ClassLoader loader, ProtectionDomain pd) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mCtc </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        mCtc.</span><span style="color:#B392F0;">detach</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在代理类继承父类的时候，会将该id作为后缀编号，防止代理类重名</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CLASS_NAME_COUNTER.</span><span style="color:#B392F0;">getAndIncrement</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    CtClass ctcs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mSuperClass </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mPool.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(mSuperClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mClassName </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 确定代理类的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">        mClassName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (mSuperClass </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> javassist.Modifier.</span><span style="color:#B392F0;">isPublic</span><span style="color:#E1E4E8;">(ctcs.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> ClassGenerator.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mSuperClass </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;$sc&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    mCtc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mPool.</span><span style="color:#B392F0;">makeClass</span><span style="color:#E1E4E8;">(mClassName); </span><span style="color:#6A737D;">// 创建CtClass，用来生成代理类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mSuperClass </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 设置代理类的父类</span></span>
<span class="line"><span style="color:#E1E4E8;">        mCtc.</span><span style="color:#B392F0;">setSuperclass</span><span style="color:#E1E4E8;">(ctcs);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置代理类实现的接口，默认会添加DC这个接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    mCtc.</span><span style="color:#B392F0;">addInterface</span><span style="color:#E1E4E8;">(mPool.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(DC.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mInterfaces </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String cl </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mInterfaces) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            mCtc.</span><span style="color:#B392F0;">addInterface</span><span style="color:#E1E4E8;">(mPool.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(cl));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mFields </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 设置代理类的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String code </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mFields) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            mCtc.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(CtField.</span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(code, mCtc));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mMethods </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 生成代理类的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String code </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mMethods) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (code.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;:&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                mCtc.</span><span style="color:#B392F0;">addMethod</span><span style="color:#E1E4E8;">(CtNewMethod.</span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getCtMethod</span><span style="color:#E1E4E8;">(mCopyMethods.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(code.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))),</span></span>
<span class="line"><span style="color:#E1E4E8;">                        code.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, code.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;">)), mCtc, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                mCtc.</span><span style="color:#B392F0;">addMethod</span><span style="color:#E1E4E8;">(CtNewMethod.</span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(code, mCtc));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mDefaultConstructor) { </span><span style="color:#6A737D;">// 生成默认的构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        mCtc.</span><span style="color:#B392F0;">addConstructor</span><span style="color:#E1E4E8;">(CtNewConstructor.</span><span style="color:#B392F0;">defaultConstructor</span><span style="color:#E1E4E8;">(mCtc));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mConstructors </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 生成构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String code </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mConstructors) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (code.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;:&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                mCtc.</span><span style="color:#B392F0;">addConstructor</span><span style="color:#E1E4E8;">(CtNewConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getCtConstructor</span><span style="color:#E1E4E8;">(mCopyConstructors.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(code.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))), mCtc, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] sn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mCtc.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">$+&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// inner class name include $.</span></span>
<span class="line"><span style="color:#E1E4E8;">                mCtc.</span><span style="color:#B392F0;">addConstructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        CtNewConstructor.</span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(code.</span><span style="color:#B392F0;">replaceFirst</span><span style="color:#E1E4E8;">(SIMPLE_NAME_TAG, sn[sn.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]), mCtc));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mCtc.</span><span style="color:#B392F0;">toClass</span><span style="color:#E1E4E8;">(loader, pd);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toClass</span><span style="color:#24292E;">(ClassLoader loader, ProtectionDomain pd) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mCtc </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        mCtc.</span><span style="color:#6F42C1;">detach</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在代理类继承父类的时候，会将该id作为后缀编号，防止代理类重名</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CLASS_NAME_COUNTER.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    CtClass ctcs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mSuperClass </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mPool.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(mSuperClass);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mClassName </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 确定代理类的名称</span></span>
<span class="line"><span style="color:#24292E;">        mClassName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (mSuperClass </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> javassist.Modifier.</span><span style="color:#6F42C1;">isPublic</span><span style="color:#24292E;">(ctcs.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ClassGenerator.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mSuperClass </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;$sc&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    mCtc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mPool.</span><span style="color:#6F42C1;">makeClass</span><span style="color:#24292E;">(mClassName); </span><span style="color:#6A737D;">// 创建CtClass，用来生成代理类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mSuperClass </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 设置代理类的父类</span></span>
<span class="line"><span style="color:#24292E;">        mCtc.</span><span style="color:#6F42C1;">setSuperclass</span><span style="color:#24292E;">(ctcs);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置代理类实现的接口，默认会添加DC这个接口</span></span>
<span class="line"><span style="color:#24292E;">    mCtc.</span><span style="color:#6F42C1;">addInterface</span><span style="color:#24292E;">(mPool.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(DC.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mInterfaces </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String cl </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mInterfaces) {</span></span>
<span class="line"><span style="color:#24292E;">            mCtc.</span><span style="color:#6F42C1;">addInterface</span><span style="color:#24292E;">(mPool.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(cl));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mFields </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 设置代理类的字段</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String code </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mFields) {</span></span>
<span class="line"><span style="color:#24292E;">            mCtc.</span><span style="color:#6F42C1;">addField</span><span style="color:#24292E;">(CtField.</span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">(code, mCtc));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mMethods </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 生成代理类的方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String code </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mMethods) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (code.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;:&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                mCtc.</span><span style="color:#6F42C1;">addMethod</span><span style="color:#24292E;">(CtNewMethod.</span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getCtMethod</span><span style="color:#24292E;">(mCopyMethods.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(code.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))),</span></span>
<span class="line"><span style="color:#24292E;">                        code.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, code.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;">)), mCtc, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                mCtc.</span><span style="color:#6F42C1;">addMethod</span><span style="color:#24292E;">(CtNewMethod.</span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">(code, mCtc));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mDefaultConstructor) { </span><span style="color:#6A737D;">// 生成默认的构造方法</span></span>
<span class="line"><span style="color:#24292E;">        mCtc.</span><span style="color:#6F42C1;">addConstructor</span><span style="color:#24292E;">(CtNewConstructor.</span><span style="color:#6F42C1;">defaultConstructor</span><span style="color:#24292E;">(mCtc));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mConstructors </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 生成构造方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String code </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mConstructors) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (code.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;:&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                mCtc.</span><span style="color:#6F42C1;">addConstructor</span><span style="color:#24292E;">(CtNewConstructor</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getCtConstructor</span><span style="color:#24292E;">(mCopyConstructors.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(code.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))), mCtc, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] sn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mCtc.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">$+&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// inner class name include $.</span></span>
<span class="line"><span style="color:#24292E;">                mCtc.</span><span style="color:#6F42C1;">addConstructor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        CtNewConstructor.</span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">(code.</span><span style="color:#6F42C1;">replaceFirst</span><span style="color:#24292E;">(SIMPLE_NAME_TAG, sn[sn.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]), mCtc));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mCtc.</span><span style="color:#6F42C1;">toClass</span><span style="color:#24292E;">(loader, pd);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步，从 PROXY_CLASS_COUNTER 字段（AtomicLong类型）中获取一个 id 值，作为代理类的后缀，这主要是为了避免类名重复发生冲突。</p><p>第三步，遍历全部接口，获取每个接口中定义的方法，对每个方法进行如下处理：</p><ol><li><p>加入 worked 集合（Set<code>&lt;String&gt;</code> 类型）中，用来判重。</p></li><li><p>将方法对应的 Method 对象添加到 methods 集合（List<code>&lt;Method&gt;</code> 类型）中。</p></li><li><p>获取方法的参数类型以及返回类型，构建方法体以及 return 语句。</p></li><li><p>将构造好的方法添加到 ClassGenerator 中的 mMethods 集合中进行缓存。</p></li></ol><p>相关代码片段如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PROXY_CLASS_COUNTER.</span><span style="color:#B392F0;">getAndIncrement</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">String pkg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassGenerator ccp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, ccm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ccp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassGenerator.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(cl);</span></span>
<span class="line"><span style="color:#E1E4E8;">Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; worked </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;Method&gt; methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&gt;();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ics.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Modifier.</span><span style="color:#B392F0;">isPublic</span><span style="color:#E1E4E8;">(ics[i].</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String npkg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ics[i].</span><span style="color:#B392F0;">getPackage</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pkg </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 如果接口不是public的，则需要保证所有接口在一个包下</span></span>
<span class="line"><span style="color:#E1E4E8;">            pkg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> npkg;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pkg.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(npkg)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;non-public interfaces from different packages&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ccp.</span><span style="color:#B392F0;">addInterface</span><span style="color:#E1E4E8;">(ics[i]); </span><span style="color:#6A737D;">// 向ClassGenerator中添加接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Method method </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ics[i].</span><span style="color:#B392F0;">getMethods</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 遍历接口中的每个方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        String desc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReflectUtils.</span><span style="color:#B392F0;">getDesc</span><span style="color:#E1E4E8;">(method);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 跳过已经重复方法以及static方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (worked.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(desc) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> Modifier.</span><span style="color:#B392F0;">isStatic</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ics[i].</span><span style="color:#B392F0;">isInterface</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Modifier.</span><span style="color:#B392F0;">isStatic</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        worked.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(desc); </span><span style="color:#6A737D;">// 将方法描述添加到worked这个Set集合中，进行去重</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> methods.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; rt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取方法的返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] pts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取方法的参数列表</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建方法体</span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuilder code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Object[] args = new Object[&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(pts.length).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;];&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> pts.length; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            code.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; args[&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(j).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;] = ($w)$&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        code.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; Object ret = handler.invoke(this, methods[&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(ix).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;], args);&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Void.TYPE.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(rt)) { </span><span style="color:#6A737D;">// 生成return语句</span></span>
<span class="line"><span style="color:#E1E4E8;">            code.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; return &quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">asArgument</span><span style="color:#E1E4E8;">(rt, </span><span style="color:#9ECBFF;">&quot;ret&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将生成好的方法添加到ClassGenerator中缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        methods.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(method);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ccp.</span><span style="color:#B392F0;">addMethod</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), method.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">(), rt, pts, method.</span><span style="color:#B392F0;">getExceptionTypes</span><span style="color:#E1E4E8;">(), code.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PROXY_CLASS_COUNTER.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">String pkg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ClassGenerator ccp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, ccm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ccp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassGenerator.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(cl);</span></span>
<span class="line"><span style="color:#24292E;">Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; worked </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;()</span></span>
<span class="line"><span style="color:#24292E;">List&lt;Method&gt; methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ics.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Modifier.</span><span style="color:#6F42C1;">isPublic</span><span style="color:#24292E;">(ics[i].</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        String npkg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ics[i].</span><span style="color:#6F42C1;">getPackage</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pkg </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果接口不是public的，则需要保证所有接口在一个包下</span></span>
<span class="line"><span style="color:#24292E;">            pkg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> npkg;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pkg.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(npkg)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;non-public interfaces from different packages&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ccp.</span><span style="color:#6F42C1;">addInterface</span><span style="color:#24292E;">(ics[i]); </span><span style="color:#6A737D;">// 向ClassGenerator中添加接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Method method </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ics[i].</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 遍历接口中的每个方法</span></span>
<span class="line"><span style="color:#24292E;">        String desc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectUtils.</span><span style="color:#6F42C1;">getDesc</span><span style="color:#24292E;">(method);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 跳过已经重复方法以及static方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (worked.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(desc) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> Modifier.</span><span style="color:#6F42C1;">isStatic</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ics[i].</span><span style="color:#6F42C1;">isInterface</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Modifier.</span><span style="color:#6F42C1;">isStatic</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        worked.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(desc); </span><span style="color:#6A737D;">// 将方法描述添加到worked这个Set集合中，进行去重</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> methods.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; rt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取方法的返回值</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] pts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取方法的参数列表</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建方法体</span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Object[] args = new Object[&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(pts.length).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;];&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> pts.length; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            code.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; args[&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(j).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;] = ($w)$&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        code.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; Object ret = handler.invoke(this, methods[&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(ix).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;], args);&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Void.TYPE.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(rt)) { </span><span style="color:#6A737D;">// 生成return语句</span></span>
<span class="line"><span style="color:#24292E;">            code.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; return &quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">asArgument</span><span style="color:#24292E;">(rt, </span><span style="color:#032F62;">&quot;ret&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将生成好的方法添加到ClassGenerator中缓存</span></span>
<span class="line"><span style="color:#24292E;">        methods.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(method);</span></span>
<span class="line"><span style="color:#24292E;">        ccp.</span><span style="color:#6F42C1;">addMethod</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), method.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">(), rt, pts, method.</span><span style="color:#6F42C1;">getExceptionTypes</span><span style="color:#24292E;">(), code.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们以 Demo 示例（即 dubbo-demo 模块中的 Demo）中的 sayHello() 方法为例，生成的方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> java.lang.String </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(java.lang.String arg0){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]; </span></span>
<span class="line"><span style="color:#E1E4E8;">  args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ($w)$1; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这里通过InvocationHandler.invoke()方法调用目标方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handler.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, methods[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], args); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (java.lang.String)ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> java.lang.String </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(java.lang.String arg0){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]; </span></span>
<span class="line"><span style="color:#24292E;">  args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ($w)$1; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这里通过InvocationHandler.invoke()方法调用目标方法</span></span>
<span class="line"><span style="color:#24292E;">  Object ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, methods[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], args); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (java.lang.String)ret;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的方法调用其实是：委托 InvocationHandler 对象的 invoke() 方法去调用真正的实例方法。</p><p>第四步，开始创建代理实例类（ProxyInstance）和代理类。这里我们先创建代理实例类，需要向 ClassGenerator 中添加相应的信息，例如，类名、默认构造方法、字段、父类以及一个 newInstance() 方法，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String pcn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pkg </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.proxy&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id; </span><span style="color:#6A737D;">// 生成并设置代理类类名</span></span>
<span class="line"><span style="color:#E1E4E8;">ccp.</span><span style="color:#B392F0;">setClassName</span><span style="color:#E1E4E8;">(pcn); </span></span>
<span class="line"><span style="color:#6A737D;">// 添加字段，一个是前面生成的methods集合，另一个是InvocationHandler对象</span></span>
<span class="line"><span style="color:#E1E4E8;">ccp.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;public static java.lang.reflect.Method[] methods;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ccp.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;private &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> InvocationHandler.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; handler;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 添加构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">ccp.</span><span style="color:#B392F0;">addConstructor</span><span style="color:#E1E4E8;">(Modifier.PUBLIC, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[]{InvocationHandler.class}, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&quot;handler=$1;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ccp.</span><span style="color:#B392F0;">addDefaultConstructor</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 默认构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; clazz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ccp.</span><span style="color:#B392F0;">toClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">clazz.</span><span style="color:#B392F0;">getField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;methods&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, methods.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String pcn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pkg </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.proxy&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id; </span><span style="color:#6A737D;">// 生成并设置代理类类名</span></span>
<span class="line"><span style="color:#24292E;">ccp.</span><span style="color:#6F42C1;">setClassName</span><span style="color:#24292E;">(pcn); </span></span>
<span class="line"><span style="color:#6A737D;">// 添加字段，一个是前面生成的methods集合，另一个是InvocationHandler对象</span></span>
<span class="line"><span style="color:#24292E;">ccp.</span><span style="color:#6F42C1;">addField</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;public static java.lang.reflect.Method[] methods;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ccp.</span><span style="color:#6F42C1;">addField</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;private &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> InvocationHandler.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; handler;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 添加构造方法</span></span>
<span class="line"><span style="color:#24292E;">ccp.</span><span style="color:#6F42C1;">addConstructor</span><span style="color:#24292E;">(Modifier.PUBLIC, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[]{InvocationHandler.class}, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;handler=$1;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ccp.</span><span style="color:#6F42C1;">addDefaultConstructor</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 默认构造方法</span></span>
<span class="line"><span style="color:#24292E;">Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ccp.</span><span style="color:#6F42C1;">toClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">clazz.</span><span style="color:#6F42C1;">getField</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;methods&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, methods.</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]));</span></span></code></pre></div><p>这里得到的代理实例类中每个方法的实现，都类似于上面提到的 sayHello() 方法的实现，即通过 InvocationHandler.invoke()方法调用目标方法。</p><p>接下来创建代理类，它实现了 Proxy 接口，并实现了 newInstance() 方法，该方法会直接返回上面代理实例类的对象，相关代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String fcn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Proxy.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">ccm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassGenerator.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(cl);</span></span>
<span class="line"><span style="color:#E1E4E8;">ccm.</span><span style="color:#B392F0;">setClassName</span><span style="color:#E1E4E8;">(fcn);</span></span>
<span class="line"><span style="color:#E1E4E8;">ccm.</span><span style="color:#B392F0;">addDefaultConstructor</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 默认构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">ccm.</span><span style="color:#B392F0;">setSuperClass</span><span style="color:#E1E4E8;">(Proxy.class); </span><span style="color:#6A737D;">// 实现Proxy接口</span></span>
<span class="line"><span style="color:#6A737D;">// 实现newInstance()方法，返回上面创建的代理实例类的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">ccm.</span><span style="color:#B392F0;">addMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;public Object newInstance(&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> InvocationHandler.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; h){ return new &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> pcn </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;($1); }&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; pc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ccm.</span><span style="color:#B392F0;">toClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Proxy) pc.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String fcn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Proxy.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">ccm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassGenerator.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(cl);</span></span>
<span class="line"><span style="color:#24292E;">ccm.</span><span style="color:#6F42C1;">setClassName</span><span style="color:#24292E;">(fcn);</span></span>
<span class="line"><span style="color:#24292E;">ccm.</span><span style="color:#6F42C1;">addDefaultConstructor</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 默认构造方法</span></span>
<span class="line"><span style="color:#24292E;">ccm.</span><span style="color:#6F42C1;">setSuperClass</span><span style="color:#24292E;">(Proxy.class); </span><span style="color:#6A737D;">// 实现Proxy接口</span></span>
<span class="line"><span style="color:#6A737D;">// 实现newInstance()方法，返回上面创建的代理实例类的对象</span></span>
<span class="line"><span style="color:#24292E;">ccm.</span><span style="color:#6F42C1;">addMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;public Object newInstance(&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> InvocationHandler.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; h){ return new &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pcn </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;($1); }&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; pc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ccm.</span><span style="color:#6F42C1;">toClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Proxy) pc.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span></code></pre></div><p>生成的代理类如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.apache.dubbo.common.bytecode;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy0</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(InvocationHandler </span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxy0</span><span style="color:#E1E4E8;">(h);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.apache.dubbo.common.bytecode;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy0</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(InvocationHandler </span><span style="color:#E36209;">h</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxy0</span><span style="color:#24292E;">(h);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第五步，也就是最后一步，在 finally 代码块中，会释放 ClassGenerator 的相关资源，将生成的代理类添加到 PROXY_CACHE_MAP 缓存中保存，同时会唤醒所有阻塞在 PROXY_CACHE_MAP 缓存上的线程，重新检测需要的代理类是否已经生成完毕。相关代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ccp </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 释放ClassGenerator的相关资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    ccp.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ccm </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ccm.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (cache) { </span><span style="color:#6A737D;">// 加锁</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (proxy </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 填充PROXY_CACHE_MAP缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> WeakReference&lt;</span><span style="color:#F97583;">Proxy</span><span style="color:#E1E4E8;">&gt;(proxy));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    cache.</span><span style="color:#B392F0;">notifyAll</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 唤醒所有阻塞在PROXY_CACHE_MAP上的线程</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ccp </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 释放ClassGenerator的相关资源</span></span>
<span class="line"><span style="color:#24292E;">    ccp.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ccm </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ccm.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (cache) { </span><span style="color:#6A737D;">// 加锁</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (proxy </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        cache.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 填充PROXY_CACHE_MAP缓存</span></span>
<span class="line"><span style="color:#24292E;">        cache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> WeakReference&lt;</span><span style="color:#D73A49;">Proxy</span><span style="color:#24292E;">&gt;(proxy));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    cache.</span><span style="color:#6F42C1;">notifyAll</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 唤醒所有阻塞在PROXY_CACHE_MAP上的线程</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="getproxy-方法实现" tabindex="-1">getProxy() 方法实现 <a class="header-anchor" href="#getproxy-方法实现" aria-label="Permalink to &quot;getProxy() 方法实现&quot;">​</a></h3><p>分析完 Proxy 使用 Javassist 生成代理类的完整流程之后，我们再回头看一下 JavassistProxyFactory 工厂的 getProxy() 方法实现。这里首先通过前面分析的 getProxy() 方法获取 Proxy 对象，然后调用 newInstance() 方法获取目标类的代理对象，具体如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> invoker, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] interfaces) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) Proxy.</span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(interfaces).</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvokerInvocationHandler</span><span style="color:#E1E4E8;">(invoker));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> invoker, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] interfaces) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) Proxy.</span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(interfaces).</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvokerInvocationHandler</span><span style="color:#24292E;">(invoker));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相比之下，JdkProxyFactory 对 getProxy() 方法的实现就简单很多，直接使用 JDK 自带的 java.lang.reflect.Proxy 生成代理对象，你可以参考前面第 8 课时中 JDK 动态代理的基本使用方式以及原理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> invoker, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] interfaces) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) Proxy.</span><span style="color:#B392F0;">newProxyInstance</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getContextClassLoader</span><span style="color:#E1E4E8;">(), interfaces, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvokerInvocationHandler</span><span style="color:#E1E4E8;">(invoker));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> invoker, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] interfaces) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) Proxy.</span><span style="color:#6F42C1;">newProxyInstance</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getContextClassLoader</span><span style="color:#24292E;">(), interfaces, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvokerInvocationHandler</span><span style="color:#24292E;">(invoker));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="invokerinvocationhandler" tabindex="-1">InvokerInvocationHandler <a class="header-anchor" href="#invokerinvocationhandler" aria-label="Permalink to &quot;InvokerInvocationHandler&quot;">​</a></h3><p>无论是 Javassist 还是 JDK 生成的代理类，都会将方法委托给 InvokerInvocationHandler 进行处理。InvokerInvocationHandler 中维护了一个 Invoker 对象，也是前面 getProxy() 方法传入的第一个参数，这个 Invoker 不是一个简单的 DubboInvoker 对象，而是在 DubboInvoker 之上经过一系列装饰器修饰的 Invoker 对象。</p><p>在 InvokerInvocationHandler 的 invoke() 方法中，首先会针对特殊的方法进行处理，比如 toString()、$destroy() 等方法。之后，对于业务方法，会创建相应的 RpcInvocation 对象调用 Invoker.invoke() 方法发起 RPC 调用，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Object proxy, Method method, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对于Object中定义的方法，直接调用Invoker对象的相应方法即可</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (method.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Object.class) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invoker, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] parameterTypes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parameterTypes.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 对$destroy等方法的特殊处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;$destroy&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(methodName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            invoker.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略其他特殊处理的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建RpcInvocation对象，后面会作为远程RPC调用的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcInvocation rpcInvocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcInvocation</span><span style="color:#E1E4E8;">(method, invoker.</span><span style="color:#B392F0;">getInterface</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getServiceKey</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpcInvocation.</span><span style="color:#B392F0;">setTargetServiceUniqueName</span><span style="color:#E1E4E8;">(serviceKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (consumerModel </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rpcInvocation.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(Constants.CONSUMER_MODEL, consumerModel);</span></span>
<span class="line"><span style="color:#E1E4E8;">        rpcInvocation.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(Constants.METHOD_MODEL, consumerModel.</span><span style="color:#B392F0;">getMethodModel</span><span style="color:#E1E4E8;">(method));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用invoke()方法发起远程调用，拿到AsyncRpcResult之后，调用recreate()方法获取响应结果(或是Future)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(rpcInvocation).</span><span style="color:#B392F0;">recreate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object proxy, Method method, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对于Object中定义的方法，直接调用Invoker对象的相应方法即可</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Object.class) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invoker, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] parameterTypes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parameterTypes.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 对$destroy等方法的特殊处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;$destroy&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(methodName)) {</span></span>
<span class="line"><span style="color:#24292E;">            invoker.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略其他特殊处理的方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建RpcInvocation对象，后面会作为远程RPC调用的参数</span></span>
<span class="line"><span style="color:#24292E;">    RpcInvocation rpcInvocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcInvocation</span><span style="color:#24292E;">(method, invoker.</span><span style="color:#6F42C1;">getInterface</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), args);</span></span>
<span class="line"><span style="color:#24292E;">    String serviceKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getServiceKey</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    rpcInvocation.</span><span style="color:#6F42C1;">setTargetServiceUniqueName</span><span style="color:#24292E;">(serviceKey);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (consumerModel </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        rpcInvocation.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(Constants.CONSUMER_MODEL, consumerModel);</span></span>
<span class="line"><span style="color:#24292E;">        rpcInvocation.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(Constants.METHOD_MODEL, consumerModel.</span><span style="color:#6F42C1;">getMethodModel</span><span style="color:#24292E;">(method));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用invoke()方法发起远程调用，拿到AsyncRpcResult之后，调用recreate()方法获取响应结果(或是Future)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(rpcInvocation).</span><span style="color:#6F42C1;">recreate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="wrapper" tabindex="-1">Wrapper <a class="header-anchor" href="#wrapper" aria-label="Permalink to &quot;Wrapper&quot;">​</a></h3><p>Invoker 是 Dubbo 的核心模型。在 Dubbo 中，Provider 的业务层实现会被包装成一个 ProxyInvoker，然后这个 ProxyInvoker 还会被 Filter、Listener 以及其他装饰器包装。ProxyFactory 的 getInvoker 方法就是将业务接口实现封装成 ProxyInvoker 入口。</p><p>我们先来看 JdkProxyFactory 中的实现。JdkProxyFactory 会创建一个匿名 AbstractProxyInvoker 的实现，其中的 doInvoke() 方法是通过 Java 原生的反射技术实现的，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(T proxy, Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type, URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AbstractProxyInvoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;(proxy, type, url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">doInvoke</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">proxy</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">methodName</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] </span><span style="color:#FFAB70;">parameterTypes</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">arguments</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 使用反射方式查找methodName对应的方法，并进行调用</span></span>
<span class="line"><span style="color:#E1E4E8;">            Method method </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proxy.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethod</span><span style="color:#E1E4E8;">(methodName, parameterTypes);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(proxy, arguments);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(T proxy, Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type, URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AbstractProxyInvoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;(proxy, type, url) {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">doInvoke</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">proxy</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">methodName</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] </span><span style="color:#E36209;">parameterTypes</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">arguments</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 使用反射方式查找methodName对应的方法，并进行调用</span></span>
<span class="line"><span style="color:#24292E;">            Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> proxy.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(methodName, parameterTypes);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(proxy, arguments);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在前面两个课时中我们已经介绍了 Invoker 接口的一个重要实现分支------ AbstractInvoker 以及它的一个实现 DubboInvoker。AbstractProxyInvoker 是 Invoker 接口的另一个实现分支，继承关系如下图所示，其实现类都是 ProxyFactory 实现中的匿名内部类。</p>`,50),D=p(`<p>在 AbstractProxyInvoker 实现的 invoke() 方法中，会将 doInvoke() 方法返回的结果封装成 CompletableFuture 对象，然后再封装成 AsyncRpcResult 对象返回，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行doInvoke()方法，调用业务实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doInvoke</span><span style="color:#E1E4E8;">(proxy, invocation.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">(), invocation.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">(), invocation.</span><span style="color:#B392F0;">getArguments</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将value值封装成CompletableFuture对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapWithFuture</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 再次转换，转换为CompletableFuture&lt;AppResponse&gt;类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture&lt;</span><span style="color:#F97583;">AppResponse</span><span style="color:#E1E4E8;">&gt; appResponseFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">((obj, t) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        AppResponse result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppResponse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (t </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (t </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> CompletionException) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">setException</span><span style="color:#E1E4E8;">(t.</span><span style="color:#B392F0;">getCause</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">setException</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">setValue</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将CompletableFuture封装成AsyncRpcResult返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncRpcResult</span><span style="color:#E1E4E8;">(appResponseFuture, invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行doInvoke()方法，调用业务实现</span></span>
<span class="line"><span style="color:#24292E;">    Object value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doInvoke</span><span style="color:#24292E;">(proxy, invocation.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">(), invocation.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">(), invocation.</span><span style="color:#6F42C1;">getArguments</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将value值封装成CompletableFuture对象</span></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapWithFuture</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 再次转换，转换为CompletableFuture&lt;AppResponse&gt;类型</span></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture&lt;</span><span style="color:#D73A49;">AppResponse</span><span style="color:#24292E;">&gt; appResponseFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">((obj, t) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        AppResponse result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppResponse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (t </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (t </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> CompletionException) {</span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">setException</span><span style="color:#24292E;">(t.</span><span style="color:#6F42C1;">getCause</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">setException</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">setValue</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将CompletableFuture封装成AsyncRpcResult返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncRpcResult</span><span style="color:#24292E;">(appResponseFuture, invocation);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>了解了 AbstractProxyInvoker 以及 JdkProxyFactory 返回的实现之后，我们再来看 JavassistProxyFactory.getInvoker() 方法返回的实现。首先该方法会通过 Wrapper 创建一个包装类，然后创建一个实现了 AbstractProxyInvoker 的匿名内部类，其 doInvoker() 方法会直接委托给 Wrapper 对象的 InvokeMethod() 方法，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(T proxy, Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type, URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过Wrapper创建一个包装类对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Wrapper wrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Wrapper.</span><span style="color:#B392F0;">getWrapper</span><span style="color:#E1E4E8;">(proxy.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;$&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> proxy.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> type);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建一个实现了AbstractProxyInvoker的匿名内部类，其doInvoker()方法会直接委托给Wrapper对象的InvokeMethod()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AbstractProxyInvoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;(proxy, type, url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">doInvoke</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">proxy</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">methodName</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] </span><span style="color:#FFAB70;">parameterTypes</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">arguments</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wrapper.</span><span style="color:#B392F0;">invokeMethod</span><span style="color:#E1E4E8;">(proxy, methodName, parameterTypes, arguments);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(T proxy, Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type, URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过Wrapper创建一个包装类对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Wrapper wrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Wrapper.</span><span style="color:#6F42C1;">getWrapper</span><span style="color:#24292E;">(proxy.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;$&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> proxy.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> type);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个实现了AbstractProxyInvoker的匿名内部类，其doInvoker()方法会直接委托给Wrapper对象的InvokeMethod()方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AbstractProxyInvoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;(proxy, type, url) {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">doInvoke</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">proxy</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">methodName</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] </span><span style="color:#E36209;">parameterTypes</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">arguments</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wrapper.</span><span style="color:#6F42C1;">invokeMethod</span><span style="color:#24292E;">(proxy, methodName, parameterTypes, arguments);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>Wrapper 类本身是抽象类，是对 Java 类的一种包装</strong>。Wrapper 会从 Java 类中的字段和方法抽象出相应 propertyName 和 methodName，在需要调用一个字段或方法的时候，会根据传入的方法名和参数进行匹配，找到对应的字段和方法进行调用。</p><p>Wrapper.getWrapper() 方法会根据不同的 Java 对象，使用 Javassist 生成一个相应的 Wrapper 实现对象。下面我们就来一起分析下 getWrapper() 方法实现：</p><ul><li><p>首先检测该 Java 类是否实现了 DC 这个标识接口，在前面介绍 Proxy 抽象类的时候，我们提到过这个接口；</p></li><li><p>检测 WRAPPER_MAP 集合（Map&lt;Class&lt;?&gt;, Wrapper&gt; 类型）中是否缓存了对应的 Wrapper 对象，如果已缓存则直接返回，如果未缓存则调用 makeWrapper() 方法动态生成 Wrapper 实现类，以及相应的实例对象，并写入缓存中。</p></li></ul><p>makeWrapper() 方法的实现非常长，但是逻辑并不复杂，该方法会遍历传入的 Class 对象的所有 public 字段和 public 方法，构建组装 Wrapper 实现类需要的 Java 代码。具体实现有如下三个步骤。</p><p>第一步，public 字段会构造相应的 getPropertyValue() 方法和 setPropertyValue() 方法。例如，有一个名为&quot;name&quot;的 public 字段，则会生成如下的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 生成的getPropertyValue()方法</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getPropertyValue</span><span style="color:#E1E4E8;">(Object o, String n){</span></span>
<span class="line"><span style="color:#E1E4E8;">    DemoServiceImpl w; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">        w </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((DemoServiceImpl)$1); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){ </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(e); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( $2.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; if( $2.equals(&quot;</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">&quot;) ){</span></span>
<span class="line"><span style="color:#9ECBFF;">        return ($w)w.name; </span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">// 生成的setPropertyValue()方法</span></span>
<span class="line"><span style="color:#9ECBFF;">public void setPropertyValue(Object o, String n, Object v){ </span></span>
<span class="line"><span style="color:#9ECBFF;">    DemoServiceImpl w; </span></span>
<span class="line"><span style="color:#9ECBFF;">    try{</span></span>
<span class="line"><span style="color:#9ECBFF;">         w = ((DemoServiceImpl)$1); </span></span>
<span class="line"><span style="color:#9ECBFF;">    }catch(Throwable e){ </span></span>
<span class="line"><span style="color:#9ECBFF;">        throw new IllegalArgumentException(e); </span></span>
<span class="line"><span style="color:#9ECBFF;">    } </span></span>
<span class="line"><span style="color:#9ECBFF;">    if( $2.equals(&quot;</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">&quot;) ){ </span></span>
<span class="line"><span style="color:#9ECBFF;">        w.name=(java.lang.String)$3; return; </span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 生成的getPropertyValue()方法</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getPropertyValue</span><span style="color:#24292E;">(Object o, String n){</span></span>
<span class="line"><span style="color:#24292E;">    DemoServiceImpl w; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">        w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((DemoServiceImpl)$1); </span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(e); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">( $2.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; if( $2.equals(&quot;</span><span style="color:#24292E;">name</span><span style="color:#032F62;">&quot;) ){</span></span>
<span class="line"><span style="color:#032F62;">        return ($w)w.name; </span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">// 生成的setPropertyValue()方法</span></span>
<span class="line"><span style="color:#032F62;">public void setPropertyValue(Object o, String n, Object v){ </span></span>
<span class="line"><span style="color:#032F62;">    DemoServiceImpl w; </span></span>
<span class="line"><span style="color:#032F62;">    try{</span></span>
<span class="line"><span style="color:#032F62;">         w = ((DemoServiceImpl)$1); </span></span>
<span class="line"><span style="color:#032F62;">    }catch(Throwable e){ </span></span>
<span class="line"><span style="color:#032F62;">        throw new IllegalArgumentException(e); </span></span>
<span class="line"><span style="color:#032F62;">    } </span></span>
<span class="line"><span style="color:#032F62;">    if( $2.equals(&quot;</span><span style="color:#24292E;">name</span><span style="color:#032F62;">&quot;) ){ </span></span>
<span class="line"><span style="color:#032F62;">        w.name=(java.lang.String)$3; return; </span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre></div><p>第二步，处理 public 方法，这些 public 方法会添加到 invokeMethod 方法中。以 Demo 示例（即 dubbo-demo 模块中的 demo ）中的 DemoServiceImpl 为例，生成的 invokeMethod() 方法实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invokeMethod</span><span style="color:#E1E4E8;">(Object o, String n, </span><span style="color:#F97583;">Class</span><span style="color:#E1E4E8;">[] p, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] v) throws java.lang.reflect.InvocationTargetException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    org.apache.dubbo.demo.provider.DemoServiceImpl w;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        w </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((org.apache.dubbo.demo.provider.DemoServiceImpl) $1);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 省略getter/setter方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;sayHello&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">($2) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> $3.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ($w) w.</span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">((java.lang.String) $4[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;sayHelloAsync&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">($2) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> $3.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ($w) w.</span><span style="color:#B392F0;">sayHelloAsync</span><span style="color:#E1E4E8;">((java.lang.String) $4[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> java.lang.reflect.</span><span style="color:#B392F0;">InvocationTargetException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NoSuchMethodException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Not found method&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invokeMethod</span><span style="color:#24292E;">(Object o, String n, </span><span style="color:#D73A49;">Class</span><span style="color:#24292E;">[] p, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] v) throws java.lang.reflect.InvocationTargetException {</span></span>
<span class="line"><span style="color:#24292E;">    org.apache.dubbo.demo.provider.DemoServiceImpl w;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((org.apache.dubbo.demo.provider.DemoServiceImpl) $1);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 省略getter/setter方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;sayHello&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">($2) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> $3.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ($w) w.</span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">((java.lang.String) $4[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;sayHelloAsync&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">($2) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> $3.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ($w) w.</span><span style="color:#6F42C1;">sayHelloAsync</span><span style="color:#24292E;">((java.lang.String) $4[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> java.lang.reflect.</span><span style="color:#6F42C1;">InvocationTargetException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoSuchMethodException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Not found method&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步，完成了上述 Wrapper 实现类相关信息的填充之后，makeWrapper() 方法会通过 ClassGenerator 创建 Wrapper 实现类，具体原理与前面 Proxy 创建代理类的流程类似，这里就不再赘述。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时主要介绍了 dubbo-rpc-api 模块中&quot;代理&quot;相关的内容。首先我们从 ProxyFactory.getProxy() 方法入手，详细介绍了 JDK 方式和 Javassist 方式创建动态代理类的底层原理，以及其中使用的 InvokerInvocationHandler 的实现。接下来我们又通过 ProxyFactory.getInvoker() 方法入手，重点讲解了 Wrapper 的生成过程和核心原理。</p><p>下面这张简图很好地展示了 Dubbo 中 Proxy 和 Wrapper 的重要性：</p>`,16),v=s("p",null,"Proxy 和 Wrapper 远程调用简图",-1),h=s("p",null,"Consumer 端的 Proxy 底层屏蔽了复杂的网络交互、集群策略以及 Dubbo 内部的 Invoker 等概念，提供给上层使用的是业务接口。Provider 端的 Wrapper 是将个性化的业务接口实现，统一转换成 Dubbo 内部的 Invoker 接口实现。正是由于 Proxy 和 Wrapper 这两个组件的存在，Dubbo 才能实现内部接口和业务接口的无缝转换。",-1),m=s("p",null,'关于"代理"相关的内容，你若还有什么想法，欢迎你留言跟我分享。下一课时，我们会再做一个加餐，介绍 Dubbo 中支持的 HTTP 协议的相关内容。',-1);function B(b,k,f,I,P,x){const a=e("Image");return t(),c("div",null,[E,y,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/63/B5/CgqCHl-WrK6Af2f9ACAFYNhhHPc051.png"}),n(),i,F,d,C,u,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/63/AA/Ciqc1F-WrLqALvCWAACKW4k6bv4319.png"}),n(),A,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/63/AA/Ciqc1F-WrMiAXWheAACKwcyiNxw669.png"}),n(),g,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/63/B6/CgqCHl-WrSOAU0FXAABwy4VTTF4402.png"}),n(),D,l(a,{alt:"Dubbo_28的图（待替换）.png",src:"https://s0.lgstatic.com/i/image/M00/65/9D/Ciqc1F-biguAJK7LAADFmPgsdKQ193.png"}),n(),v,h,m])}const _=o(r,[["render",B]]);export{S as __pageData,_ as default};
