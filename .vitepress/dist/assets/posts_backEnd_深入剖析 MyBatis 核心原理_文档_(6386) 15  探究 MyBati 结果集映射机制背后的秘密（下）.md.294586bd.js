import{_ as o,j as e,o as t,g as r,k as l,h as a,s,Q as p}from"./chunks/framework.b3d8e22e.js";const j=JSON.parse('{"title":"嵌套映射 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6386) 15  探究 MyBati 结果集映射机制背后的秘密（下）.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6386) 15  探究 MyBati 结果集映射机制背后的秘密（下）.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6386) 15  探究 MyBati 结果集映射机制背后的秘密（下）.md"},y=p(`<p>在上一讲中，我们介绍了 MyBatis 中结果集映射的核心逻辑位于 DefaultResultSetHandler 之中，然后深入分析了 DefaultResultSetHandler 与简单结果集映射相关的核心实现，这是 MyBatis 整个结果集映射功能的基本。</p><p>今天我们就紧接着上一讲，继续介绍 DefaultResultSetHandler 中关于嵌套映射、延迟加载以及多结果集处理的内容。</p><h3 id="嵌套映射" tabindex="-1">嵌套映射 <a class="header-anchor" href="#嵌套映射" aria-label="Permalink to &quot;嵌套映射&quot;">​</a></h3><p>处理简单映射只是所有映射处理逻辑中的一个分支，handleRowValues() 方法还有另一条分支是用来<strong>处理嵌套映射的，也就是 handleRowValuesForNestedResultMap() 方法</strong>。</p><p>handleRowValuesForNestedResultMap() 方法处理嵌套映射的核心流程如下所示。</p><ol><li><p>通过 skipRows() 方法将 ResultSet 的指针指向目标行。</p></li><li><p>执行 shouldProcessMoreRows() 方法检测 ResultSet 中是否包含能继续映射的数据行，如果包含，就开始映射一个具体的数据行。</p></li><li><p>通过 resolveDiscriminatedResultMap() 方法处理 ResultMap 中的 Discriminator 对象，确定最终使用的 ResultMap 映射规则。</p></li><li><p>为当前处理的数据行生成 CacheKey。除了作为缓存中的 key 值外，CacheKey 在嵌套映射中也作为唯一标识来标识结果对象。</p></li><li><p>根据步骤 4 生成的 CacheKey 从 DefaultResultSetHandler.nestedResultObjects 集合中查询中间结果。nestedResultObjects 是一个 HashMap 集合，在处理嵌套映射过程中产生的全部中间对象，都会记录到这个 Map 中，其中的 Key 就是 CacheKey。</p></li><li><p>检测 <code>&lt;select&gt;</code> 标签中 resultOrdered 属性的配置，并根据 resultOrdered 的配置决定是否提前释放 nestedResultObjects 集合中的中间数据，避免在进行嵌套映射时出现内存不足的情况。</p></li><li><p>通过 getRowValue() 方法完成当前记录行的映射，得到最终的结果对象，其中还会将结果对象添加到 nestedResultObjects 集合中。</p></li><li><p>通过 storeObject() 方法将生成的结果对象保存到 ResultHandler 中。</p></li></ol><p>在上述过程中，有很多步骤的实现已经在上一讲的简单映射部分介绍过了，例如，前三步中使用到的 skipRows()、shouldProcessMoreRows() 和 resolveDiscriminatedResultMap() 三个方法。所以，下面我们就从（第 4 步）创建 CacheKey 开始介绍。</p><h4 id="_1-创建-cachekey" tabindex="-1">1. 创建 CacheKey <a class="header-anchor" href="#_1-创建-cachekey" aria-label="Permalink to &quot;1. 创建 CacheKey&quot;">​</a></h4><p>创建 CacheKey 的<strong>核心逻辑在 createRowKey() 方法中</strong> ，该方法构建 CacheKey 的过程是这样的：尝试使用 <code>&lt;idArg&gt;</code> 标签或 <code>&lt;id&gt;</code> 标签中定义的列名以及对应列值组成 CacheKey 对象；没有定义 <code>&lt;idArg&gt;</code> 标签或 <code>&lt;id&gt;</code> 标签，则由 ResultMap 中映射的列名和对应列值一起构成 CacheKey 对象；这样如果依然无法创建 CacheKey 的话，就由 ResultSet 中所有列名以及对应列值一起构成 CacheKey 对象。</p><p>无论是使用 <code>&lt;idArg&gt;</code>、<code>&lt;id&gt;</code> 指定的列名和列值来创建 CacheKey 对象，还是使用全部的列名和列值来创建，<strong>最终都是为了使 CacheKey 能够唯一标识结果对象</strong>。</p><h4 id="_2-外层映射" tabindex="-1">2. 外层映射 <a class="header-anchor" href="#_2-外层映射" aria-label="Permalink to &quot;2. 外层映射&quot;">​</a></h4><p>完成 CacheKey 的创建之后，我们开始处理嵌套映射，<strong>整个处理过程的入口是 getRowValue() 方法</strong>。</p><p>因为嵌套映射涉及多层映射，这里我们先来关注外层映射的处理流程。</p><p>首先通过 createResultObject() 方法创建外层对象，再通过 shouldApplyAutomaticMappings() 方法检测是否开启自动映射来处理包含嵌套的映射。对于嵌套映射，只有 ResultMap 明确配置或是全局的 AutoMappingBehavior 配置为 FULL 的时候，才会开启自动映射。</p><p>如果发现开启了自动映射，则会指定 applyAutomaticMappings() 方法，处理 ResultMap 中未明确映射的列。然后再通过 applyPropertyMappings() 方法处理 ResultMap 中明确需要进行映射的列。applyAutomaticMappings() 方法和 applyPropertyMappings() 方法我们在上一讲中已经详细分析过了，这里就不再赘述。</p><p><strong>到此为止，处理外层映射的步骤其实与处理简单映射的步骤基本一致</strong>，但不同的是：外层映射此时得到的并不是一个完整的对象，而是一个&quot;部分映射&quot;的对象，因为只填充了一部分属性，另一部分属性将由后面得到的嵌套映射的结果对象填充。</p><p><strong>接下来就是与简单映射不一样的步骤了</strong> 。这里会先将&quot;部分映射&quot;的结果对象添加到 ancestorObjects 集合中暂存，ancestorObjects 是一个 HashMap<code>&lt;String, Object&gt;</code> 类型，key 是 ResultMap 的唯一标识（即 id 属性值），value 为外层的&quot;部分映射&quot;的结果对象。</p><p>然后通过 applyNestedResultMappings() 方法处理嵌套映射，在处理过程中，会从 ancestorObjects 集合中获取外层对象，并将嵌套映射产生的结果对象设置到外层对象的属性中。</p><p>处理完之后，就清理 ancestorObjects 集合，并将外层对象保存到 nestedResultObjects 集合中，等待后续的映射步骤继续使用。这里使用的 Key 就是前面创建的 CacheKey 对象。</p><p>了解了外层映射的核心步骤之后，下面我们一起来看一下 getRowValue() 方法的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getRowValue</span><span style="color:#E1E4E8;">(ResultSetWrapper rsw, ResultMap resultMap, CacheKey combinedKey, String columnPrefix, Object partialObject) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String resultMapId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resultMap.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object rowValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> partialObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rowValue </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 检测外层对象是否已经存在，如果存在，直接执行嵌套映射的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MetaObject metaObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">newMetaObject</span><span style="color:#E1E4E8;">(rowValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">putAncestor</span><span style="color:#E1E4E8;">(rowValue, resultMapId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">applyNestedResultMappings</span><span style="color:#E1E4E8;">(rsw, resultMap, metaObject, columnPrefix, combinedKey, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ancestorObjects.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(resultMapId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 外层对象不存在，先生成外层映射的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ResultLoaderMap与延迟加载相关</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ResultLoaderMap lazyLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResultLoaderMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建外层对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        rowValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createResultObject</span><span style="color:#E1E4E8;">(rsw, resultMap, lazyLoader, columnPrefix);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rowValue </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasTypeHandlerForResultObject</span><span style="color:#E1E4E8;">(rsw, resultMap.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 创建外层对象关联的MetaObject对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MetaObject metaObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">newMetaObject</span><span style="color:#E1E4E8;">(rowValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> foundValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.useConstructorMappings;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">shouldApplyAutomaticMappings</span><span style="color:#E1E4E8;">(resultMap, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)) { </span><span style="color:#6A737D;">// 自动映射</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 自动映射ResultMap中未明确映射的列</span></span>
<span class="line"><span style="color:#E1E4E8;">                foundValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyAutomaticMappings</span><span style="color:#E1E4E8;">(rsw, resultMap, metaObject, columnPrefix) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> foundValues;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理ResultMap中明确映射的列</span></span>
<span class="line"><span style="color:#E1E4E8;">            foundValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyPropertyMappings</span><span style="color:#E1E4E8;">(rsw, resultMap, metaObject, lazyLoader, columnPrefix) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> foundValues;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将&quot;部分构造&quot;的外层对象添加到ancestorObjects集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">putAncestor</span><span style="color:#E1E4E8;">(rowValue, resultMapId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理嵌套映射，其中会从ancestorObjects集合中获取外层对象，并将嵌套映射的结果对象设置到外层对象的属性中</span></span>
<span class="line"><span style="color:#E1E4E8;">            foundValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyNestedResultMappings</span><span style="color:#E1E4E8;">(rsw, resultMap, metaObject, columnPrefix, combinedKey, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> foundValues;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 清理ancestorObjects集合，删除外层对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            ancestorObjects.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(resultMapId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            foundValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lazyLoader.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> foundValues;</span></span>
<span class="line"><span style="color:#E1E4E8;">            rowValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> foundValues </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">isReturnInstanceForEmptyRow</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> rowValue </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (combinedKey </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> CacheKey.NULL_CACHE_KEY) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将外层对象记录到nestedResultObjects集合中，等待后续使用</span></span>
<span class="line"><span style="color:#E1E4E8;">            nestedResultObjects.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(combinedKey, rowValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rowValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getRowValue</span><span style="color:#24292E;">(ResultSetWrapper rsw, ResultMap resultMap, CacheKey combinedKey, String columnPrefix, Object partialObject) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String resultMapId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resultMap.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Object rowValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> partialObject;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rowValue </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 检测外层对象是否已经存在，如果存在，直接执行嵌套映射的逻辑</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MetaObject metaObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">newMetaObject</span><span style="color:#24292E;">(rowValue);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">putAncestor</span><span style="color:#24292E;">(rowValue, resultMapId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">applyNestedResultMappings</span><span style="color:#24292E;">(rsw, resultMap, metaObject, columnPrefix, combinedKey, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ancestorObjects.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(resultMapId);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 外层对象不存在，先生成外层映射的对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ResultLoaderMap与延迟加载相关</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ResultLoaderMap lazyLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResultLoaderMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建外层对象</span></span>
<span class="line"><span style="color:#24292E;">        rowValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createResultObject</span><span style="color:#24292E;">(rsw, resultMap, lazyLoader, columnPrefix);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rowValue </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasTypeHandlerForResultObject</span><span style="color:#24292E;">(rsw, resultMap.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建外层对象关联的MetaObject对象</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MetaObject metaObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">newMetaObject</span><span style="color:#24292E;">(rowValue);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> foundValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.useConstructorMappings;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">shouldApplyAutomaticMappings</span><span style="color:#24292E;">(resultMap, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)) { </span><span style="color:#6A737D;">// 自动映射</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 自动映射ResultMap中未明确映射的列</span></span>
<span class="line"><span style="color:#24292E;">                foundValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyAutomaticMappings</span><span style="color:#24292E;">(rsw, resultMap, metaObject, columnPrefix) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> foundValues;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理ResultMap中明确映射的列</span></span>
<span class="line"><span style="color:#24292E;">            foundValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyPropertyMappings</span><span style="color:#24292E;">(rsw, resultMap, metaObject, lazyLoader, columnPrefix) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> foundValues;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将&quot;部分构造&quot;的外层对象添加到ancestorObjects集合中</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">putAncestor</span><span style="color:#24292E;">(rowValue, resultMapId);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理嵌套映射，其中会从ancestorObjects集合中获取外层对象，并将嵌套映射的结果对象设置到外层对象的属性中</span></span>
<span class="line"><span style="color:#24292E;">            foundValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyNestedResultMappings</span><span style="color:#24292E;">(rsw, resultMap, metaObject, columnPrefix, combinedKey, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> foundValues;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 清理ancestorObjects集合，删除外层对象</span></span>
<span class="line"><span style="color:#24292E;">            ancestorObjects.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(resultMapId);</span></span>
<span class="line"><span style="color:#24292E;">            foundValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lazyLoader.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> foundValues;</span></span>
<span class="line"><span style="color:#24292E;">            rowValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> foundValues </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">isReturnInstanceForEmptyRow</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> rowValue </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (combinedKey </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> CacheKey.NULL_CACHE_KEY) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将外层对象记录到nestedResultObjects集合中，等待后续使用</span></span>
<span class="line"><span style="color:#24292E;">            nestedResultObjects.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(combinedKey, rowValue);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rowValue;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-applynestedresultmappings-方法" tabindex="-1">3. applyNestedResultMappings() 方法 <a class="header-anchor" href="#_3-applynestedresultmappings-方法" aria-label="Permalink to &quot;3. applyNestedResultMappings() 方法&quot;">​</a></h4><p>通过对外层对象的处理我们可以知道，<strong>处理嵌套映射的核心在于 applyNestedResultMappings() 方法</strong>，其中会遍历 ResultMap 中的每个 ResultMapping 对象。</p><p>针对嵌套映射对应的 ResultMapping 对象进行特殊处理，其核心处理步骤如下。</p><ol><li><p>确保 ResultMapping 对象的 nestedResultMapId 字段值不为空，该字段值保存了嵌套映射的 ResultMapId；同时还会检查 resultSet 字段是否为空，如果不为空，则是多结果集的映射，不是嵌套映射。</p></li><li><p>确定此次嵌套映射使用的 ResultMap 对象，这里依赖上一讲介绍的 resolveDiscriminatedResultMap() 方法。</p></li><li><p>处理循环引用的场景。如果存在循环引用的情况，则此次嵌套映射不会执行，直接重用已存在的嵌套对象即可。这里会先检查在 ancestorObjects 集合中是否已经存在嵌套对象，如果存在，就可以重用这个嵌套对象。</p></li><li><p>为嵌套对象创建 CacheKey。嵌套对象的 CacheKey 除了包含嵌套对象的信息，还会包含外层对象的 CacheKey 信息，这样才能得到一个全局唯一的 CacheKey 对象。</p></li><li><p>对外层对象的集合属性进行特殊处理。如果外层对象中用于记录当前嵌套对象的属性为 Collection 类型，且该属性未初始化，则这里会初始化该集合。</p></li><li><p>调用 getRowValue() 方法完成嵌套映射，得到嵌套对象。嵌套映射是支持嵌套多层的，这也就是产生 getRowValue() 方法递归的原因。</p></li><li><p>通过 linkObjects() 方法，将步骤 6 中映射得到的嵌套对象保存到外层对象的对应属性中，底层会依赖外层对象的 MetaObject 实现属性的设置。</p></li></ol><h3 id="延迟加载" tabindex="-1">延迟加载 <a class="header-anchor" href="#延迟加载" aria-label="Permalink to &quot;延迟加载&quot;">​</a></h3><p>MyBatis 中的&quot;延迟加载&quot;是指<strong>在查询数据库的时候，MyBatis 不会立即将完整的对象加载到服务内存中，而是在业务逻辑真正需要使用这个对象或使用到对象中某些属性的时候，才真正执行数据库查询操作，将完整的对象加载到内存中</strong>。</p><p>MyBatis 实现延迟加载的底层原理是<strong>动态代理</strong> ，但并不是<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6377" target="_blank" rel="noreferrer">《06 | 日志框架千千万，MyBatis 都能兼容的秘密是什么？》</a>中介绍的 JDK 动态代理，而是<strong>通过字节码生成方式实现的动态代理，底层依赖 cglib 和 javassit 两个库实现动态代码生成</strong>。</p><p>这里我们简单说明一下，之所以不用 JDK 动态代理是因为 JDK 动态代理在生成代理对象的时候，要求目标类必须实现接口，而通过 MyBatis 映射产生的结果对象基本都是 POJO 对象，没有实现任何接口，所以 JDK 动态代理不适用。</p><p>下面我们先简单了解一下 cglib 和 javassist 这两个库的基本使用，这样才能看懂 MyBatis 延迟加载的逻辑。</p><h4 id="_1-cglib" tabindex="-1">1. cglib <a class="header-anchor" href="#_1-cglib" aria-label="Permalink to &quot;1. cglib&quot;">​</a></h4><p>cglib 实现动态代理的底层原理是字节码生成技术，具体就是<strong>使用字节码生成技术生成一个目标类的子类，然后在这个子类中进行方法重写，并在重写的方法中进行拦截，实现代理对象的相关功能</strong>。</p><p>既然使用生成子类的方式来实现动态代理，那根据 Java 的语法规则，final 关键字修饰的方法无法被子类覆盖，自然也就无法通过 cglib 实现代理，所以我们可以将 cglib 与 JDK 动态代理作为互补的两个方案一起使用，在 Spring 等很多开源框架中，也都会同时使用这两个代理生成方式。</p><p>那如何使用 cglib 实现动态代理的功能呢？下面我们就来看看 cglib 的基础使用，在 cglib 中有一个关键的接口------ Callback 接口，它有很多子接口，如下图所示：</p>`,34),E=p(`<p>Callback 接口继承关系图</p><p>这里我们重点关注 MethodInterceptor 接口，它可以实现方法拦截的功能，可参考下面这个简单的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CglibProxyDemo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodInterceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// cglib中的Enhancer对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Enhancer enhancer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Enhancer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(Class </span><span style="color:#FFAB70;">clazz</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 代理类的父类</span></span>
<span class="line"><span style="color:#E1E4E8;">        enhancer.</span><span style="color:#B392F0;">setSuperclass</span><span style="color:#E1E4E8;">(clazz);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加Callback对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        enhancer.</span><span style="color:#B392F0;">setCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过cglib动态创建子类实例并返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> enhancer.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// intercept()方法中实现了方法拦截</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">, Method </span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            MethodProxy </span><span style="color:#FFAB70;">proxy</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;before operation...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用父类中的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proxy.</span><span style="color:#B392F0;">invokeSuper</span><span style="color:#E1E4E8;">(obj, args); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;after operation...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CglibProxyDemo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodInterceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// cglib中的Enhancer对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Enhancer enhancer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Enhancer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(Class </span><span style="color:#E36209;">clazz</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 代理类的父类</span></span>
<span class="line"><span style="color:#24292E;">        enhancer.</span><span style="color:#6F42C1;">setSuperclass</span><span style="color:#24292E;">(clazz);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加Callback对象</span></span>
<span class="line"><span style="color:#24292E;">        enhancer.</span><span style="color:#6F42C1;">setCallback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过cglib动态创建子类实例并返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> enhancer.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// intercept()方法中实现了方法拦截</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, Method </span><span style="color:#E36209;">method</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            MethodProxy </span><span style="color:#E36209;">proxy</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before operation...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用父类中的方法</span></span>
<span class="line"><span style="color:#24292E;">        Object result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> proxy.</span><span style="color:#6F42C1;">invokeSuper</span><span style="color:#24292E;">(obj, args); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after operation...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面我们创建一个目标类------ CglibMainDemo，这也是整个示例的入口类，这里使用 CglibProxyDemo 创建 CglibMainDemo 的代理对象，并执行 method() 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CglibMainDemo</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 父类，也是代理的目标类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 被代理的目标方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;CglibMainDemo:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> str;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CglibProxyDemo proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CglibProxyDemo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取CglibMainDemo的代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        CglibMainDemo proxyImp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (CglibMainDemo) proxy.</span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(CglibMainDemo.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 执行代理对象的method()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proxyImp.</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CglibMainDemo</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 父类，也是代理的目标类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">str</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 被代理的目标方法</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;CglibMainDemo:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        CglibProxyDemo proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CglibProxyDemo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取CglibMainDemo的代理对象</span></span>
<span class="line"><span style="color:#24292E;">        CglibMainDemo proxyImp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (CglibMainDemo) proxy.</span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(CglibMainDemo.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行代理对象的method()方法</span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> proxyImp.</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行 CglibMainDemo 的 main() 方法，我们可以看到控制台中，CglibMainDemo.method() 方法前后都出现了相应的拦截输出（即 &quot;before operation&quot; 和 &quot;after operation&quot;），这也就实现了代理的效果。</p><h4 id="_2-javassist" tabindex="-1">2. Javassist <a class="header-anchor" href="#_2-javassist" aria-label="Permalink to &quot;2. Javassist&quot;">​</a></h4><p>Javassist 是一个操纵 Java 字节码的类库，我们可以直接通过 Javassist 提供的 Java API 动态生成或修改类结构。Javassist 提供的 Java API 非常多，这里我们重点来看如何使用 javassist 创建动态代理。</p><p>首先创建 JavassistDemo 类，其中提供了一个属性和一个方法，它是代理的目标类，通过 javassist 创建的代理类会继承 JavassistDemo，如下示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JavassistDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String demoProperty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;demo-value&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// demoProperty字段对应的getter/setter方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getDemoProperty</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> demoProperty;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setDemoProperty</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">demoProperty</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.demoProperty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> demoProperty;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// JavassistDemo的成员方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">operation</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;operation():&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.demoProperty);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JavassistDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String demoProperty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;demo-value&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// demoProperty字段对应的getter/setter方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDemoProperty</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> demoProperty;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setDemoProperty</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">demoProperty</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.demoProperty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> demoProperty;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// JavassistDemo的成员方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">operation</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;operation():&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.demoProperty);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>javassist 本质上也是通过动态生成目标类的子类的方式实现动态代理的</strong>，下面我们就使用 javassist 库为 JavassistDemo 生成代理类，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JavassitMainDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建ProxyFactory工厂实例，它负责动态生成JavassistDemo的子类</span></span>
<span class="line"><span style="color:#E1E4E8;">        ProxyFactory factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProxyFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        factory.</span><span style="color:#B392F0;">setSuperclass</span><span style="color:#E1E4E8;">(JavassistDemo.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置Filter，用于确定哪些方法调用需要被代理</span></span>
<span class="line"><span style="color:#E1E4E8;">        factory.</span><span style="color:#B392F0;">setFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodFilter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isHandled</span><span style="color:#E1E4E8;">(Method </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (m.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;operation&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置拦截处理逻辑，被拦截的方法会执行MethodHandler中的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        factory.</span><span style="color:#B392F0;">setHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodHandler</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">self</span><span style="color:#E1E4E8;">, Method </span><span style="color:#FFAB70;">thisMethod</span><span style="color:#E1E4E8;">, Method </span><span style="color:#FFAB70;">proceed</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                 </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;before operation&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                Object result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proceed.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(self, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;after operation&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成代理类，并根据代理类创建代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">createClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        JavassistDemo javassistDemo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (JavassistDemo) c.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 执行operation()方法时会被拦截，进而执行代理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        javassistDemo.</span><span style="color:#B392F0;">operation</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(javassistDemo.</span><span style="color:#B392F0;">getDemoProperty</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JavassitMainDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建ProxyFactory工厂实例，它负责动态生成JavassistDemo的子类</span></span>
<span class="line"><span style="color:#24292E;">        ProxyFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProxyFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        factory.</span><span style="color:#6F42C1;">setSuperclass</span><span style="color:#24292E;">(JavassistDemo.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置Filter，用于确定哪些方法调用需要被代理</span></span>
<span class="line"><span style="color:#24292E;">        factory.</span><span style="color:#6F42C1;">setFilter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodFilter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isHandled</span><span style="color:#24292E;">(Method </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (m.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;operation&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置拦截处理逻辑，被拦截的方法会执行MethodHandler中的逻辑</span></span>
<span class="line"><span style="color:#24292E;">        factory.</span><span style="color:#6F42C1;">setHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodHandler</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">self</span><span style="color:#24292E;">, Method </span><span style="color:#E36209;">thisMethod</span><span style="color:#24292E;">, Method </span><span style="color:#E36209;">proceed</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before operation&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                Object result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> proceed.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(self, args);</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after operation&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成代理类，并根据代理类创建代理对象</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">createClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        JavassistDemo javassistDemo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (JavassistDemo) c.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行operation()方法时会被拦截，进而执行代理逻辑</span></span>
<span class="line"><span style="color:#24292E;">        javassistDemo.</span><span style="color:#6F42C1;">operation</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(javassistDemo.</span><span style="color:#6F42C1;">getDemoProperty</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行 JavassitMainDemo 的 main() 方法，我们可以看到控制台在 JavassistDemo.operation() 方法的输出前后，都添加了相应的拦截输出（即 &quot;before operation&quot; 和 &quot;after operation&quot;），这就是我们想要的代理效果。</p><h4 id="_3-辅助类" tabindex="-1">3. 辅助类 <a class="header-anchor" href="#_3-辅助类" aria-label="Permalink to &quot;3. 辅助类&quot;">​</a></h4><p>了解了 cglib 和 javassist 的基本原理之后，我们接下来再介绍一下 MyBatis 中与延迟加载相关的辅助类。</p><p>首先来看 ResultLoader 辅助类，它记录了一次延迟加载涉及的全部信息，其中包括延迟执行的 SQL 语句（boundSql 字段）、Sql 的实参（parameterObject 字段）、用于执行延迟 SQL 的线程池（executor 字段）以及延迟加载的对象类型（targetType 字段）等，这些信息在真正执行加载操作的时候，都是必要的信息。</p><p>ResultLoader 中核心的方法是 loadResult() 方法，其中会先通过 selectList() 方法执行 boundSql 这条延迟加载的 SQL 语句，得到的是一个 List<code>&lt;Object&gt;</code> 集合。在 selectList() 方法中会使用到 Executor 来执行 SQL 语句，这部分的核心内容我们将在后面的课时中详细分析。</p><p>接下来通过 ResultExtractor 从这个 List 集合中提取到延迟加载的真正对象，这里就涉及了 List 集合向 targetType 转换的一些逻辑：</p><ul><li><p>如果目标类型就是 List，那 ResultExtractor 无须进行任何转换，直接返回 List；</p></li><li><p>如果目标类型是 Collection 子类、数组类型，则 ResultExtractor 会创建一个元素为 targetType 类型的集合对象，并将 List<code>&lt;Object&gt;</code> 集合中元素项复制到其中；</p></li><li><p>如果目标类型是一个普通 Java 对象，且上面得到的 List 长度为 1，则从 List 中获取到唯一的元素，并转换成 targetType 类型的对象并返回。</p></li></ul><p>在一个 ResultMap 中，我们可以配置多个延迟加载的属性，这些属性与对应的 ResultLoader 的映射关系就记录在一个 ResultLoaderMap 对象中，ResultLoaderMap 中的 loaderMap 字段（HashMap<code>&lt;String, LoadPair&gt;</code>类型）就用来维护这一关系，LoadPair 对象就是用来维护 ResultLoader 对象以及一些配置信息的。</p><p>ResultLoaderMap 提供了一个 load(String) 方法，参数是触发加载的属性名称，在执行这个方法的时候，会从 loaderMap 中获取（并删除）指定属性对应的 ResultLoader 对象，并调用其 load() 方法执行延迟 SQL，完成延迟加载。这个方法是在 cglib 和 javassist 生成的代理对象中被调用的（如下图所示），从而实现在使用某个属性时触发延迟加载的效果。</p>`,21),i=s("p",null,"ResultLoaderMap.load() 方法的调用点",-1),u=s("p",null,"ResultLoaderMap 中还有一个 loadAll() 方法，这个方法会触发 loaderMap 中全部 ResultLoader 的 load() 方法，将所有延迟加载的对象都加载上来。",-1),d=s("h4",{id:"_4-代理工厂",tabindex:"-1"},[a("4. 代理工厂 "),s("a",{class:"header-anchor",href:"#_4-代理工厂","aria-label":'Permalink to "4. 代理工厂"'},"​")],-1),F=s("p",null,[a("为了同时接入 cglib 和 javassist 两种生成动态代理的方式，"),s("strong",null,"MyBatis 提供了一个抽象的 ProxyFactory 接口来抽象动态生成代理类的基本行为"),a("，同时提供了下图中的两个实现类来接入上述两种生成方式：")],-1),g=p(`<p>ProxyFactory 的实现类图</p><p>ProxyFactory 接口中定义的核心方法是 createProxy() 方法，从名字也能看出这个方法是用来生成代理对象的。</p><p>在 JavassistProxyFactory 实现中，createProxy() 方法通过调用 EnhancedResultObjectProxyImpl 这个内部类的 createProxy() 方法来创建代理对象，具体实现与前文介绍的 JavassitMainDemo 类似，其中先是创建 javassist.util.proxy.ProxyFactory 对象，然后设置父类以及 MethodHandler 等信息，最后通过 javassist.util.proxy.ProxyFactory 的 create() 方法创建代理对象。</p><p>这里使用到 MethodHandler 实现就是 EnhancedResultObjectProxyImpl 本身，在其 invoke() 方法中首先会在 loaderMap 集合上加锁防止并发，然后通过 lazyLoader 集合的长度，判断是否存在延迟加载的属性。</p><p>在存在延迟加载属性的时候，会执行如下延迟加载操作。</p><ul><li><p>首先，会优先检查全局的 aggressiveLazyLoading 配置和 lazyLoadTriggerMethods 配置。如果 aggressiveLazyLoading 配置为 true，或此次调用方法名称包含于 lazyLoadTriggerMethods 配置的方法名列表中，会立刻将该对象的全部延迟加载属性都加载上来，即触发 ResultLoaderMap.loadAll() 方法。</p></li><li><p>接下来，检查此次调用的方法是否为属性对应的 setter 方法，如果是，则该属性已经被赋值，无须再执行延迟加载操作，可以从 ResultLoaderMap 集合中删除该属性以及对应的 ResultLoader 对象。</p></li><li><p>最后，检测此次调用的方法是否为属性对应的 getter 方法，如果是，触发对应的 ResultLoader.load() 方法，完成延迟加载。</p></li></ul><p>完成上述延迟加载操作之后，会释放 loaderMap 集合上的锁，然后调用目标对象的方法，完成真正的属性读写操作。</p><p>CglibProxyFactory 与 JavassistProxyFactory 的核心实现非常类似。CglibProxyFactory 中也定义了一个 EnhancedResultObjectProxyImpl 内部类，但是该内部类继承的是 cglib 中的 MethodHandler 接口，并通过 cglib 库的 API 实现代理逻辑。CglibProxyFactory 的具体实现，我就不赘述了，就留给你类比着分析了。</p><h4 id="_5-延迟加载实现细节" tabindex="-1">5. 延迟加载实现细节 <a class="header-anchor" href="#_5-延迟加载实现细节" aria-label="Permalink to &quot;5. 延迟加载实现细节&quot;">​</a></h4><p>了解了 MyBatis 中延迟加载的底层原理和相关辅助类，我们回到 DefaultResultSetHandler 中，看一下映射处理流程中与延迟加载相关的实现细节。</p><p>在 DefaultResultSetHandler.getPropertyMappingValue() 方法处理单个 ResultMapping 映射规则时候，会调用 getNestedQueryMappingValue() 方法处理嵌套映射，其中会有这么一段逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建ResultLoader对象</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ResultLoader resultLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResultLoader</span><span style="color:#E1E4E8;">(configuration, executor, nestedQuery, nestedQueryParameterObject, targetType, key, nestedBoundSql);</span></span>
<span class="line"><span style="color:#6A737D;">// 根据是否延迟加载的配置决定value的值</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (propertyMapping.</span><span style="color:#B392F0;">isLazy</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    lazyLoader.</span><span style="color:#B392F0;">addLoader</span><span style="color:#E1E4E8;">(property, metaResultObject, resultLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">    value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DEFERRED;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resultLoader.</span><span style="color:#B392F0;">loadResult</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建ResultLoader对象</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ResultLoader resultLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResultLoader</span><span style="color:#24292E;">(configuration, executor, nestedQuery, nestedQueryParameterObject, targetType, key, nestedBoundSql);</span></span>
<span class="line"><span style="color:#6A737D;">// 根据是否延迟加载的配置决定value的值</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (propertyMapping.</span><span style="color:#6F42C1;">isLazy</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    lazyLoader.</span><span style="color:#6F42C1;">addLoader</span><span style="color:#24292E;">(property, metaResultObject, resultLoader);</span></span>
<span class="line"><span style="color:#24292E;">    value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DEFERRED;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resultLoader.</span><span style="color:#6F42C1;">loadResult</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以清晰地看到，这里会检测该嵌套映射是否开启了延迟加载特性。如果开启了，则在 ResultLoaderMap 中记录延迟加载属性以及对应的 ResultLoader 对象，并返回 DEFERED 这个公共的占位符对象；如果未开启延迟加载特性，则直接执行嵌套查询，完成相应映射操作得到相应的结果对象。</p><p>另一个延迟加载的实现细节是在 createResultObject() 方法中，其中有如下代码片段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ResultMapping propertyMapping </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> propertyMappings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测所有ResultMapping规则，是否开启了延迟加载特性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (propertyMapping.</span><span style="color:#B392F0;">getNestedQueryId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          propertyMapping.</span><span style="color:#B392F0;">isLazy</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        resultObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getProxyFactory</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">createProxy</span><span style="color:#E1E4E8;">(resultObject,</span></span>
<span class="line"><span style="color:#E1E4E8;">                lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ResultMapping propertyMapping </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> propertyMappings) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测所有ResultMapping规则，是否开启了延迟加载特性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (propertyMapping.</span><span style="color:#6F42C1;">getNestedQueryId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          propertyMapping.</span><span style="color:#6F42C1;">isLazy</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        resultObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getProxyFactory</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">createProxy</span><span style="color:#24292E;">(resultObject,</span></span>
<span class="line"><span style="color:#24292E;">                lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上面这段代码中我们可以看到，如果检测到了延迟加载的属性，则会通过前面介绍的 ProxyFactory 为结果对象创建代理对象，然后在真正使用到延迟加载属性（即调用其 getter 方法）的时候，触发代理对象完成该属性的真正加载。</p><h3 id="多结果集处理" tabindex="-1">多结果集处理 <a class="header-anchor" href="#多结果集处理" aria-label="Permalink to &quot;多结果集处理&quot;">​</a></h3><p>在了解了简单映射、嵌套映射以及延迟加载的处理逻辑之后，下面我们再来介绍一下 MyBatis 中多结果集的处理逻辑。</p><p>在 getPropertyMappingValue() 方法中处理某个属性的映射时，有下面这个代码片段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (propertyMapping.</span><span style="color:#B392F0;">getResultSet</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 指定了resultSet属性，则等待后续结果集解析</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addPendingChildRelation</span><span style="color:#E1E4E8;">(rs, metaResultObject, propertyMapping);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DEFERRED;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (propertyMapping.</span><span style="color:#6F42C1;">getResultSet</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 指定了resultSet属性，则等待后续结果集解析</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">addPendingChildRelation</span><span style="color:#24292E;">(rs, metaResultObject, propertyMapping);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DEFERRED;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码的含义是：这个属性的值来自后续的结果集（对应的结果集名称通过 resultSet 指定），后续结果集在这一时刻还未处理，所以会通过 addPendingChildRelation() 方法将该映射信息添加到 nextResultMaps 集合以及 pendingRelations 集合中暂存。</p><p>在 pendingRelations 集合中维护了 CacheKey 到 PendingRelation 对象之间的映射，PendingRelation 中维护了当前 ResultMapping 以及外层结果对象，nextResultMaps 集合中维护了 ResultSet 名称与当前 ResultMapping 对象的映射。</p><p>处理 nextResultMaps 集合的地方是在 handleResultSets() 方法中。在 handleResultSets() 方法完成全部 ResultMapping 映射之后，会开始遍历 nextResultMaps 集合，根据其中每个 ResultMapping 对象指定的 ResultMap 对后续的多个结果集进行映射，并将映射得到的结果对象设置到外层对象的相应属性中，相关的代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (rsw </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> resultSetCount </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> resultSets.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取nextResultMaps中的ResultMapping对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    ResultMapping parentMapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nextResultMaps.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(resultSets[resultSetCount]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parentMapping </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取ResultMapping中指定的ResultMap映射规则</span></span>
<span class="line"><span style="color:#E1E4E8;">        String nestedResultMapId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentMapping.</span><span style="color:#B392F0;">getNestedResultMapId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ResultMap resultMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getResultMap</span><span style="color:#E1E4E8;">(nestedResultMapId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 进行结果集映射，得到的结果对象会添加到外层结果对象的相应属性中</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">handleResultSet</span><span style="color:#E1E4E8;">(rsw, resultMap, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, parentMapping);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    rsw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNextResultSet</span><span style="color:#E1E4E8;">(stmt);     </span><span style="color:#6A737D;">// 继续获取下一个ResultSet</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cleanUpAfterHandlingResultSet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    resultSetCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (rsw </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> resultSetCount </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> resultSets.length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取nextResultMaps中的ResultMapping对象</span></span>
<span class="line"><span style="color:#24292E;">    ResultMapping parentMapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextResultMaps.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(resultSets[resultSetCount]);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parentMapping </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取ResultMapping中指定的ResultMap映射规则</span></span>
<span class="line"><span style="color:#24292E;">        String nestedResultMapId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentMapping.</span><span style="color:#6F42C1;">getNestedResultMapId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ResultMap resultMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getResultMap</span><span style="color:#24292E;">(nestedResultMapId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 进行结果集映射，得到的结果对象会添加到外层结果对象的相应属性中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">handleResultSet</span><span style="color:#24292E;">(rsw, resultMap, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, parentMapping);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    rsw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNextResultSet</span><span style="color:#24292E;">(stmt);     </span><span style="color:#6A737D;">// 继续获取下一个ResultSet</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cleanUpAfterHandlingResultSet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    resultSetCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>处理 pendingRelations 集合的地方是在 linkToParents() 方法中，该方法会从 pendingRelations 集合中获取结果对象所在外层对象，然后通过 linkObjects() 方法进行设置。</p><p>到此为止，MyBatis 中结果集映射的核心内容就介绍完了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>紧接着上一讲的内容，我们继续介绍了 MyBatis 中关于结果集映射的相关知识点。</p><ul><li><p>首先，重点讲解了 DefaultResultSetHandler 中嵌套映射的实现逻辑。</p></li><li><p>然后，介绍了 MyBatis 中延迟加载的实现细节，其中还详细说明了 MyBatis 实现延迟加载的两种方案以及 MyBatis 对这两种方案的封装和统一。</p></li><li><p>最后，简单分析了 MyBatis 对多结果集处理的实现。</p></li></ul><p>除了上面介绍的这些核心映射方式之外，MyBatis 还支持游标、存储过程中的输出参数等方式返回查询结果，相关的逻辑也是在 DefaultResultSetHandler 中实现的，相关的方法就作为课后作业留给你自己分析了。</p><p>下一讲，我们将开始介绍 StatementHandler 的内容，它是触发 SQL 参数填充、结果集映射的入口，记得按时来听课。</p><hr>`,32),D={href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},b=s("p",null,[s("strong",null,"《Java 工程师高薪训练营》")],-1),h=s("p",null,[a("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),a("！")],-1);function A(M,m,C,R,v,B){const n=e("Image");return t(),r("div",null,[y,l(n,{alt:"图片9.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/5C/Cgp9HWBLPxOAVTGAAADxvYPW-EI795.png"}),a(),E,l(n,{alt:"图片10.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/59/CioPOWBLPt6AAcONAAREOc3fRG0341.png"}),a(),i,u,d,F,l(n,{alt:"图片11.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/59/CioPOWBLPvuAEqGrAAD_fS5qAGA047.png"}),a(),g,s("p",null,[s("a",D,[l(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"})])]),b,h])}const _=o(c,[["render",A]]);export{j as __pageData,_ as default};
