import{_ as o,j as e,o as t,g as c,k as n,h as l,Q as a,s as p}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"性能守卫理论基础 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5957) 28  设计性能守卫系统：完善 CICD 流程.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5957) 28  设计性能守卫系统：完善 CICD 流程.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5957) 28  设计性能守卫系统：完善 CICD 流程.md"},E=a('<p>性能始终是宏大的话题，前面几讲我们或多或少都有涉及性能优化的各种方案。其实，除了传统的性能优化手段以外，我们还需要对性能进行把关，目的是在性能恶化时有所感知、有所防控。那么，一个性能守卫系统即性能监控系统究竟应该如何设计呢？</p><p>借助 Node.js 的能力，这一讲我们就下钻到 CI/CD 流程，设计一个性能守卫系统。希望通过这一讲的学习，你可以认识到：Node.js 除了同构直出、数据聚合以外，还能做一些重要的，且有趣的服务。</p><h3 id="性能守卫理论基础" tabindex="-1">性能守卫理论基础 <a class="header-anchor" href="#性能守卫理论基础" aria-label="Permalink to &quot;性能守卫理论基础&quot;">​</a></h3><p>性能守卫的含义是：对每次上线进行性能把关，对性能恶化做到提前预警。它包含了一个性能监控平台，同时也需要给出更多的性能建议和指标建设。</p><p>那么我们如何感知到性能的好坏呢？我们对于 Load/DOMContentLoaded 事件、FP/FCP 指标已经耳熟能详了，下面我们再扩充几个更加现代化的指标。</p><ul><li><strong>LCP（Largest Contentful Paint）</strong></li></ul><p>衡量页面的加载体验，它表示视口内可见的最大内容元素的渲染时间。相比 FCP，这个指标可以<strong>更加真实地反映具体内容加载速度</strong>。比如，如果页面渲染前有一个 loading 动画，那么 FCP 可能会以 loading 动画出现的时间为准，而 LCP 定义了 loading 动画加载后，真实渲染出内容的时间。</p><ul><li><strong>FID（First Input Delay）</strong></li></ul><p>衡量可交互性，它表示用户和页面进行首次交互操作所花费的时间。它比 TTI（Time to Interact）更加提前，这个阶段虽然页面已经显示出部分内容，但并不能完全具备可交互性，对于用户的响应可能会有较大的延迟。</p><ul><li><strong>CLS（Cumulative Layout Shift）</strong></li></ul><p>衡量视觉稳定性，表示页面的整个生命周期中，发生的每个意外的样式移动的所有单独布局更改得分的总和。所以这个分数当然<strong>越小越好</strong>。</p><p>以上是几个重要的、现代化的性能指标。结合我们传统的 FP/FCP/FMP 时间等，我们可以构建出一个相对完备的指标系统。这里我们就不再一一分析如何获取和收集这些性能指标了，相关内容社区上有不少文章。我们把目光放到更高层面，请你思考一下：如何从这些指标中，得到监控素材？</p><p>业界公认的监控素材主要由两方面提供：</p><ul><li><p>真实用户监控（Real User Monitoring，RUM）</p></li><li><p>合成监控（Synthetic Monitoring，SYN）</p></li></ul><p>真实用户监控是基于用户真实访问应用情况，在应用生命周期内计算产出性能指标，并进行上报。开发者拉取日志服务器上的指标数据，进行清洗加工，最终生成真实的访问监控报告。</p><p>真实用户监控一般搭配稳定的 SDK，会<strong>在一定程度上影响用户的访问性能</strong>，也给用户带来了额外的流量消耗。</p><p>合成监控是一种实验室数据，它指的是在某一个模拟场景中，通过工具，搭配规则和性能审计条目，得到一个合成的监控报告。</p><p>合成监控的优点比较明显，它的实现比较简单，有现成成熟的解决方案；如果搭配丰富的场景和规则，得到的数据类型也会较多。但它的缺点是<strong>数据量相对较小</strong> ，且<strong>模拟条件配置相对复杂</strong>，无法完全反映真实场景。</p><p>而在 CI/CD pipeline 上，我们需要设计的性能守卫方案就是一种合成监控方案。在方案设计上，我们需要做到扬长避短。</p><h3 id="lighthouse-原理介绍" tabindex="-1">Lighthouse 原理介绍 <a class="header-anchor" href="#lighthouse-原理介绍" aria-label="Permalink to &quot;Lighthouse 原理介绍&quot;">​</a></h3><p>前文提到，合成监控有成熟的方案，比如 Lighthouse。我们的方案也基于 Lighthouse 进行，这里对 Lighthouse 原理进行介绍。</p><p>Lighthouse 是一个开源的自动化工具，它提供了四种使用方式，分别是：</p><ul><li><p>Chrome DevTools</p></li><li><p>Chrome 插件</p></li><li><p>Node cli</p></li><li><p>Node module</p></li></ul><p>我们先通过 Chrome DevTools 来迅速体验一下 Lighthouse。在 Audits 面板下，进行相关测试，可以得到一个网址的相关测试报告，内容如下图：</p>',24),y=p("p",null,"这个报告是如何得出的呢？我们先来看 Lighthouse 的架构图：",-1),i=a(`<p>Lighthouse 架构图</p><p>图中的一些关键名词：</p><ul><li><p>Driver（驱动器），根据<a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noreferrer">Chrome Debugging Protocol</a>协议与浏览器交互的对象；</p></li><li><p>Gatherers（采集器），调用 Driver 运行浏览器命令后得到的网页基础信息，每个采集器都会收集自己的目标信息，并生成中间产物（Artifacts）；</p></li><li><p>Artifacts（中间产物），一系列 Gatherers 的集合，会被 Audits 使用，并计算得分；</p></li><li><p>Audits（审计项），以 Artifacts 作为输入，进行性能测试并评估分数后得到的 LHAR（LightHouse Audit Result Object）标准数据对象。</p></li></ul><p>我们结合上述名词，对 Lighthouse 架构原理进行分析：</p><ul><li><p>首先，Lighthouse 驱动 Driver，底层通过 Chrome DevTool Protocol 调用浏览器进行应用的加载和渲染；</p></li><li><p>然后通过 Gatherers 模块集合，获取收集到的 Artifacts 信息；</p></li><li><p>Artifacts 信息在 Auditing 阶段，通过对自定义指标的审计，得到 Audits 结果，并生成相关文件。</p></li></ul><p>从该流程中我们可以得到的关键信息：</p><ul><li><p>Lighthouse 会与浏览器建立连接，并通过 CDP 与浏览器进行交互；</p></li><li><p>通过 Lighthouse，我们可以自定义审计项并得到审计结果。</p></li></ul><p>在我们的性能守卫系统中，是采用 Lighthouse 的后两种使用方式（Node.js cli/ Node.js 模块）进行性能跑分的，下面代码给出一个基本的使用方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> fs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> lighthouse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lighthouse&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> chromeLauncher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;chrome-launcher&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 启动一个 chrome，</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> chrome </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await chromeLauncher.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;">({chromeFlags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--headless&#39;</span><span style="color:#E1E4E8;">]});</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {logLevel</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">, output</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;html&#39;</span><span style="color:#E1E4E8;">, onlyCategories</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;performance&#39;</span><span style="color:#E1E4E8;">], port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> chrome.port};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用 lighthouse 对目标页面进行跑分</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> runnerResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">lighthouse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com&#39;</span><span style="color:#E1E4E8;">, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// \`.report\` 是一个 html 类型的分析页面</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> reportHtml </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> runnerResult.report;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fs.</span><span style="color:#B392F0;">writeFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lhreport.html&#39;</span><span style="color:#E1E4E8;">, reportHtml);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// \`.lhr\` 是用于 lighthous-ci 的结果集合</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Report is done for&#39;</span><span style="color:#E1E4E8;">, runnerResult.lhr.finalUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Performance score was&#39;</span><span style="color:#E1E4E8;">, runnerResult.lhr.categories.performance.score </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  await chrome.</span><span style="color:#B392F0;">kill</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> lighthouse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lighthouse&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> chromeLauncher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;chrome-launcher&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 启动一个 chrome，</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> chrome </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await chromeLauncher.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;">({chromeFlags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--headless&#39;</span><span style="color:#24292E;">]});</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {logLevel</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">, output</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;html&#39;</span><span style="color:#24292E;">, onlyCategories</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;performance&#39;</span><span style="color:#24292E;">], port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> chrome.port};</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用 lighthouse 对目标页面进行跑分</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> runnerResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">lighthouse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://example.com&#39;</span><span style="color:#24292E;">, options);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// \`.report\` 是一个 html 类型的分析页面</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> reportHtml </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> runnerResult.report;</span></span>
<span class="line"><span style="color:#24292E;">  fs.</span><span style="color:#6F42C1;">writeFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lhreport.html&#39;</span><span style="color:#24292E;">, reportHtml);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// \`.lhr\` 是用于 lighthous-ci 的结果集合</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Report is done for&#39;</span><span style="color:#24292E;">, runnerResult.lhr.finalUrl);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Performance score was&#39;</span><span style="color:#24292E;">, runnerResult.lhr.categories.performance.score </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  await chrome.</span><span style="color:#6F42C1;">kill</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><p>上面的代码描述了一个简单的 Node.js 环境使用 Lighthouse 的场景。其中提到了 lighthous-ci，这是官方给出的 CI/CD 过程接入 Lighthouse 的方案。但一般在企业中，CI/CD 过程相对敏感，我们的性能守卫系统就需要<strong>在私有前提下，介入 CI/CD 流程</strong>，本质上来说是实现一个专有的 lighthous-ci。</p><h3 id="性能守卫系统-perf-patronus" tabindex="-1">性能守卫系统：Perf-patronus <a class="header-anchor" href="#性能守卫系统-perf-patronus" aria-label="Permalink to &quot;性能守卫系统：Perf-patronus&quot;">​</a></h3><p>我们暂且给性能守卫系统起名为 Perf-patronus，寓意为性能-护卫神。</p><p>预计 Perf-patronus 会默认监控以下性能指标：</p><ul><li><p>FCP</p></li><li><p>Total Blocking Time</p></li><li><p>First CPU Idle</p></li><li><p>TTI</p></li><li><p>Speed Index</p></li><li><p>LCP</p></li></ul><p>其工作架构和流程如下图所示：</p>`,15),F=a("<p>Perf-patronus 工作架构及流程图</p><ul><li><p>特定环境完成 MR 部署后，开始进行性能体检服务。</p></li><li><p>性能体检服务由消息队列 worker 消费完成。</p></li><li><p>每一次性能体检产出体检数据，根据数据内容是否达标，进行后续消息提醒；体检数据内容同时被性能守卫系统平台所消费，展现相关页面的性能情况。</p></li><li><p>性能数据由 Redis 存储。</p></li><li><p>性能体检相关富媒体资源（页面截图等）可以由容器持久化目录存储，或上传到 OSS 服务</p></li></ul><p>预计平台使用情况，如下图所示：</p>",3),u=a(`<p>技术架构流程相对清晰，但我们需要思考一个重要的问题：如何真实反映用户情况？并以此为出发点，完善性能守卫系统的相关设计。</p><p><strong>如何真实反映用户情况？</strong></p><p>真实用户访问页面的情况千变万化，即便我们的代码没有变化，其他可变因素也会大量存在。因此我们应该统一共识一个相对稳定可靠的性能评判标准，其中关键一环是分析可能出现的可变因素，对每一类可变因素进行不同针对性设计，保证每次性能服务产出结果的说服力和稳定性。</p><p><strong>常见不确定和波动因素</strong></p><ul><li><strong>页面不确定性</strong></li></ul><p>比如 A/B 实验情况。这种情况性能体检服务无法进行处理，需要接入者保证页面性能的可对比性。</p><ul><li><strong>用户侧网络情况不确定性</strong></li></ul><p>针对这种情况，性能体检服务应该设计有可靠的 Throttling 机制，以及较合理的请求等待时间。</p><ul><li><strong>终端设备不确定性</strong></li></ul><p>性能体检服务应该设计有可靠的 CPU Simulating 能力，并统一 CPU 能力测试范围标准。</p><ul><li><p><strong>页面服务器不稳定性</strong></p><p>这方面因素影响较小，应该不用过多考虑。对于服务挂掉的情况，反映出性能异常即可。</p></li><li><p><strong>性能体检服务的稳定性</strong></p></li></ul><p>在同一台机器上，如果不确定有其他应用服务，会影响性能体检服务的稳定性和一致性。不过预计该影响因素不大，可以通过模拟网络环境和 CPU 能力，来保障性能体检服务的稳定性和一致性。</p><p>在对性能服务的跑分设计时，都需要考虑上述可变因素，大体上我们可以通过以下手段，最大化地磨平差异：</p><ul><li><p>保证性能体检服务的硬件/容器能力；</p></li><li><p>需要接入者清楚代码或页面变动对页面性能可能产生的影响，并做好相应接入侧处理；</p></li><li><p><strong>自动化重复多次跑性能服务，取平均值</strong>；</p></li><li><p>模拟多种网络/终端情况，设计得分权重。</p></li></ul><p><strong>如何解决有&quot;用户态&quot;页面的鉴权问题？</strong></p><p>对于有登录状态的页面，我们提供以下几种方案进行登录状态的性能服务：</p><ul><li><p>通过<a href="https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagesetcookiecookies" target="_blank" rel="noreferrer">Puppeteer page.cookie</a>，测试时通过 script 实现登录态；</p></li><li><p>通过请求服务时，传递参数解决登录态问题。</p></li></ul><h4 id="整体流程" tabindex="-1">整体流程 <a class="header-anchor" href="#整体流程" aria-label="Permalink to &quot;整体流程&quot;">​</a></h4><p>下面我们通过代码来串联整个流程。入口任务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(runOptions</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> RunOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 检查相关数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用 Puppeteer 创建一个无头浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createPuppeteer</span><span style="color:#E1E4E8;">(runOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行必要的登录流程</span></span>
<span class="line"><span style="color:#E1E4E8;">    await </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Login</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 页面打开前的钩子函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    await </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">before</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 打开页面，获取 lighthouse 数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    await </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getLighthouseResult</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 页面打开后的钩子函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    await </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">after</span><span style="color:#E1E4E8;">(context, results);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 收集页面性能数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> await </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">collectArtifact</span><span style="color:#E1E4E8;">(context, results);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> error;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 关闭页面和无头浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">    await </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">disposeDriver</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">async </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(runOptions</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> RunOptions) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 检查相关数据</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用 Puppeteer 创建一个无头浏览器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createPuppeteer</span><span style="color:#24292E;">(runOptions);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行必要的登录流程</span></span>
<span class="line"><span style="color:#24292E;">    await </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Login</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 页面打开前的钩子函数</span></span>
<span class="line"><span style="color:#24292E;">    await </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">before</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 打开页面，获取 lighthouse 数据</span></span>
<span class="line"><span style="color:#24292E;">    await </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getLighthouseResult</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 页面打开后的钩子函数</span></span>
<span class="line"><span style="color:#24292E;">    await </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">after</span><span style="color:#24292E;">(context, results);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 收集页面性能数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> await </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">collectArtifact</span><span style="color:#24292E;">(context, results);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> error;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 关闭页面和无头浏览器</span></span>
<span class="line"><span style="color:#24292E;">    await </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">disposeDriver</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，创建一个 Puppeteer 无头浏览器的逻辑，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">createPuppeteer</span><span style="color:#E1E4E8;"> (runOptions</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> RunOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 启动配置项可以参考 [puppeteerlaunchoptions](https://zhaoqize.github.io/puppeteer-api-zh_CN/#?product=Puppeteer&amp;version=v5.3.0&amp;show=api-puppeteerlaunchoptions)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> launchOptions</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> puppeteer.LaunchOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    headless</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否采用无头模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultViewport</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1440</span><span style="color:#E1E4E8;">, height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">960</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// 指定页面视口宽高</span></span>
<span class="line"><span style="color:#E1E4E8;">    args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--no-sandbox&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;--disable-dev-shm-usage&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Chromium 安装路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    executablePath</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建一个浏览器对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> browser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await puppeteer.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;">(launchOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (await browser.</span><span style="color:#B392F0;">pages</span><span style="color:#E1E4E8;">())[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回浏览器和页面对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { browser, page };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">async </span><span style="color:#6F42C1;">createPuppeteer</span><span style="color:#24292E;"> (runOptions</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> RunOptions) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 启动配置项可以参考 [puppeteerlaunchoptions](https://zhaoqize.github.io/puppeteer-api-zh_CN/#?product=Puppeteer&amp;version=v5.3.0&amp;show=api-puppeteerlaunchoptions)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> launchOptions</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> puppeteer.LaunchOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    headless</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否采用无头模式</span></span>
<span class="line"><span style="color:#24292E;">    defaultViewport</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1440</span><span style="color:#24292E;">, height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">960</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// 指定页面视口宽高</span></span>
<span class="line"><span style="color:#24292E;">    args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--no-sandbox&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;--disable-dev-shm-usage&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Chromium 安装路径</span></span>
<span class="line"><span style="color:#24292E;">    executablePath</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建一个浏览器对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> browser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await puppeteer.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;">(launchOptions);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (await browser.</span><span style="color:#6F42C1;">pages</span><span style="color:#24292E;">())[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回浏览器和页面对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { browser, page };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>打开相关页面，并执行 Lighthouse 模块，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">getLighthouseResult</span><span style="color:#E1E4E8;">(context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 获取上下文信息，包括 browser 和页面地址</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { browser, url } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用 lighthouse 模块进行性能采集</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { artifacts, lhr } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">lighthouse</span><span style="color:#E1E4E8;">(url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(browser.</span><span style="color:#B392F0;">wsEndpoint</span><span style="color:#E1E4E8;">()).port,</span></span>
<span class="line"><span style="color:#E1E4E8;">    output</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;json&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    logLevel</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    emulatedFormFactor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;desktop&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    throttling</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      rttMs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      throughputKbps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      cpuSlowdownMultiplier</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      requestLatencyMs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      downloadThroughputKbps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      uploadThroughputKbps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    disableDeviceEmulation</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 只检测 performance 模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    onlyCategories</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;performance&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 回填数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  context.lhr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lhr;</span></span>
<span class="line"><span style="color:#E1E4E8;">  context.artifacts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> artifacts;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">async </span><span style="color:#6F42C1;">getLighthouseResult</span><span style="color:#24292E;">(context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Context) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 获取上下文信息，包括 browser 和页面地址</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { browser, url } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用 lighthouse 模块进行性能采集</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { artifacts, lhr } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">lighthouse</span><span style="color:#24292E;">(url, {</span></span>
<span class="line"><span style="color:#24292E;">    port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(browser.</span><span style="color:#6F42C1;">wsEndpoint</span><span style="color:#24292E;">()).port,</span></span>
<span class="line"><span style="color:#24292E;">    output</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;json&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    logLevel</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    emulatedFormFactor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;desktop&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    throttling</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      rttMs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">40</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      throughputKbps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      cpuSlowdownMultiplier</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      requestLatencyMs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      downloadThroughputKbps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      uploadThroughputKbps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    disableDeviceEmulation</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 只检测 performance 模块</span></span>
<span class="line"><span style="color:#24292E;">    onlyCategories</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;performance&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 回填数据</span></span>
<span class="line"><span style="color:#24292E;">  context.lhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lhr;</span></span>
<span class="line"><span style="color:#24292E;">  context.artifacts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> artifacts;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述流程都是常规启用 Lighthouse 模块，在 Node.js 环境中对相关页面执行 Lighthouse 的逻辑。</p><p>我们自定义的逻辑往往可以通过 Lighthouse 插件实现，一个 Lighthouse 插件就是一个 Node.js 模块，在插件中我们可以定义 Lighthouse 的检查项，并在产出报告中以一个新的 category 呈现。</p><p>举个例子，我们想要实现&quot;检查页面中是否含有大小超过 5MB 的 GIF 图片&quot;的任务，如以下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对应 audits</span></span>
<span class="line"><span style="color:#E1E4E8;">  audits</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{</span></span>
<span class="line"><span style="color:#E1E4E8;">    path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;lighthouse-plugin-cinememe/audits/cinememe.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 该 plugin 对应的 category</span></span>
<span class="line"><span style="color:#E1E4E8;">  category</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Obligatory Cinememes&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    description</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Modern webapps should have cinememes to ensure a positive &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;user experience.&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    auditRefs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cinememe&#39;</span><span style="color:#E1E4E8;">, weight</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对应 audits</span></span>
<span class="line"><span style="color:#24292E;">  audits</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#24292E;">    path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;lighthouse-plugin-cinememe/audits/cinememe.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 该 plugin 对应的 category</span></span>
<span class="line"><span style="color:#24292E;">  category</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Obligatory Cinememes&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    description</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Modern webapps should have cinememes to ensure a positive &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;user experience.&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    auditRefs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      {id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cinememe&#39;</span><span style="color:#24292E;">, weight</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>对应自定义 Audits，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> Audit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lighthouse&#39;</span><span style="color:#E1E4E8;">).Audit;</span></span>
<span class="line"><span style="color:#6A737D;">// 继承 Audit 类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CinememeAudit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Audit</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> get </span><span style="color:#B392F0;">meta</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cinememe&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Has cinememes&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      failureTitle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Does not have cinememes&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      description</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;This page should have a cinememe in order to be a modern &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;webapp.&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      requiredArtifacts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;ImageElements&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">audit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">artifacts</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 默认 hasCinememe 为 false（大小超过 5MB 的 GIF 图片）</span></span>
<span class="line"><span style="color:#E1E4E8;">    let hasCinememe </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 非 Cinememe 图片结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 过滤筛选相关图片</span></span>
<span class="line"><span style="color:#E1E4E8;">    artifacts.ImageElements.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(image </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">image.isCss </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        image.mimeType </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        image.mimeType </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;image/svg+xml&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        image.naturalHeight </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        image.naturalWidth </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        image.displayedWidth </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        image.displayedHeight;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(image </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (image.mimeType </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;image/gif&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> image.resourceSize </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5000000</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hasCinememe </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        results.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(image);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> headings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;src&#39;</span><span style="color:#E1E4E8;">, itemType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;thumbnail&#39;</span><span style="color:#E1E4E8;">, text</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">      {key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;src&#39;</span><span style="color:#E1E4E8;">, itemType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;url&#39;</span><span style="color:#E1E4E8;">, text</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;url&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">      {key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mimeType&#39;</span><span style="color:#E1E4E8;">, itemType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;text&#39;</span><span style="color:#E1E4E8;">, text</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;MIME type&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">      {key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;resourceSize&#39;</span><span style="color:#E1E4E8;">, itemType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;text&#39;</span><span style="color:#E1E4E8;">, text</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Resource Size&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    ];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      score</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hasCinememe </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      details</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Audit.</span><span style="color:#B392F0;">makeTableDetails</span><span style="color:#E1E4E8;">(headings, results),</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CinememeAudit;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;use strict&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Audit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lighthouse&#39;</span><span style="color:#24292E;">).Audit;</span></span>
<span class="line"><span style="color:#6A737D;">// 继承 Audit 类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CinememeAudit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Audit</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> get </span><span style="color:#6F42C1;">meta</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cinememe&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Has cinememes&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      failureTitle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Does not have cinememes&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      description</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;This page should have a cinememe in order to be a modern &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;webapp.&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      requiredArtifacts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;ImageElements&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">audit</span><span style="color:#24292E;">(</span><span style="color:#E36209;">artifacts</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 默认 hasCinememe 为 false（大小超过 5MB 的 GIF 图片）</span></span>
<span class="line"><span style="color:#24292E;">    let hasCinememe </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 非 Cinememe 图片结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 过滤筛选相关图片</span></span>
<span class="line"><span style="color:#24292E;">    artifacts.ImageElements.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(image </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">image.isCss </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        image.mimeType </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        image.mimeType </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;image/svg+xml&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        image.naturalHeight </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        image.naturalWidth </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        image.displayedWidth </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        image.displayedHeight;</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(image </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (image.mimeType </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;image/gif&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> image.resourceSize </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000000</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        hasCinememe </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        results.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(image);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> headings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      {key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">, itemType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;thumbnail&#39;</span><span style="color:#24292E;">, text</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">      {key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">, itemType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;url&#39;</span><span style="color:#24292E;">, text</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;url&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">      {key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mimeType&#39;</span><span style="color:#24292E;">, itemType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;text&#39;</span><span style="color:#24292E;">, text</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;MIME type&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">      {key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;resourceSize&#39;</span><span style="color:#24292E;">, itemType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;text&#39;</span><span style="color:#24292E;">, text</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Resource Size&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    ];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      score</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hasCinememe </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      details</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Audit.</span><span style="color:#6F42C1;">makeTableDetails</span><span style="color:#24292E;">(headings, results),</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CinememeAudit;</span></span></code></pre></div><p>通过上面插件，我们就可以在 Node.js 环境中，结合 CI/CD 流程，找出页面中大小超过 5MB 的 GIF 图片了。</p><p>由插件原理可知，一个性能守卫系统，是通过常规插件和自定义插件集合而成的，具有良好的扩展性。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们通过一个性能守卫系统，拓宽了 Node.js 的应用场景。我们需要对性能话题有一个更现代化的理论认知：传统的性能指标数据依然重要，但是现代化的性能指标数据也在很大程度上反映了用户体验。我们也应该通过学习，了解 Lighthouse 架构及其原理，并能通过 Lighthouse 插件进行自定义扩展，实现我们自主的性能指标考量。</p><p>本讲内容总结如下：</p>`,35),h=p("p",null,"一方面，性能知识把基于 Lighthouse 的 Node.js 相关模块搬上 CI/CD 系统，这样一来我们能够守卫每一次上线，分析每一次上线对性能产生的影响------这是非常重要的实践。任何能力和扩展如果只是在本地，或通过 Chrome 插件的形式尝鲜显然是不够的，借助于 Node.js，我们能做到更多。",-1),g=p("p",null,"下一讲，我们将深入讲解 Node.js 另外一个重要的应用场景：企业级 BFF 网关。网关这个话题可以和微服务、Serverless 等概念相结合，想象空间无限大；同时我们又要深入到网关实现代码，抽丝剥茧，请你做好准备。",-1);function m(d,A,C,D,B,_){const s=e("Image");return t(),c("div",null,[E,n(s,{alt:"2021316-164058.png",src:"https://s0.lgstatic.com/i/image6/M00/1E/30/Cgp9HWBQb2CADycKAAQtT4ZYeUw221.png"}),y,n(s,{alt:"2021316-16411.png",src:"https://s0.lgstatic.com/i/image6/M00/1E/30/Cgp9HWBQb2mAJMDKAAY-FB_Vr9U016.png"}),l(),i,n(s,{alt:"2021316-16414.png",src:"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb4SAdIJfAAJdsaoSFEo871.png"}),l(),F,n(s,{alt:"2021316-164050.png",src:"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb5CALjlnAAK6aSqJM3s808.png"}),u,n(s,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb6SAJRoFAAK5HjTcnpc020.png"}),h,g])}const v=o(r,[["render",m]]);export{b as __pageData,v as default};
