import{_ as p,j as e,o as t,g as c,k as l,h as n,s,Q as o}from"./chunks/framework.b3d8e22e.js";const j=JSON.parse('{"title":"策略模式 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(7016) 19  深入 MyBati 内核与业务逻辑的桥梁——接口层.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(7016) 19  深入 MyBati 内核与业务逻辑的桥梁——接口层.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(7016) 19  深入 MyBati 内核与业务逻辑的桥梁——接口层.md"},i=s("p",null,"在前面的课时中，我们已经详细介绍了 MyBatis 的内核，其中涉及了 MyBatis 的初始化、SQL 参数的绑定、SQL 语句的执行、各类结果集的映射等，MyBatis 为了简化业务代码调用内核功能的成本，就为我们封装了一个接口层。",-1),E=s("p",null,"这一讲我们就来重点看一下 MyBatis 接口层的实现以及其中涉及的设计模式。",-1),y=s("h3",{id:"策略模式",tabindex:"-1"},[n("策略模式 "),s("a",{class:"header-anchor",href:"#策略模式","aria-label":'Permalink to "策略模式"'},"​")],-1),S=s("p",null,"在 MyBatis 接口层中用到了经典设计模式中的策略模式，所以这里我们就先来介绍一下策略模式相关的知识点。",-1),u=s("p",null,'我们在编写业务逻辑的时候，可能有很多方式都可以实现某个具体的功能。例如，按照购买次数对一个用户购买的全部商品进行排序，从而粗略地得知该用户复购率最高的商品，我们可以使用多种排序算法来实现这个功能，例如，归并排序、插入排序、选择排序等。在不同的场景中，我们需要根据不同的输入条件、数据量以及运行时环境，选择不同的排序算法来完成这一个功能。很多同学可能在实现这个逻辑的时候，会用 if...else... 的硬编码方式来选择不同的算法，但这显然是不符合"开放-封闭"原则的，当需要添加新的算法时，只能修改这个 if...else...代码块，添加新的分支，这就破坏了代码原有的稳定性。',-1),F=s("p",null,[n("在策略模式中，我们会"),s("strong",null,"将每个算法单独封装成不同的算法实现类"),n("（这些算法实现类都实现了相同的接口），每个算法实现类就可以被认为是一种策略实现，我们只需选择不同的策略实现来解决业务问题即可，这样每种算法相对独立，算法内的变化边界也就明确了，新增或减少算法实现也不会影响其他算法。")],-1),q=s("p",null,"如下是策略模式的核心类图，其中 StrategyUser 是算法的调用方，维护了一个 Strategy 对象的引用，用来选择具体的算法实现。",-1),d=o("",5),g=s("p",null,"SqlSessionFactory 接口与 SqlSession 接口的实现类",-1),m=s("p",null,[n("默认情况下，"),s("strong",null,"我们在使用 MyBatis 的时候用的都是 DefaultSqlSession 这个默认的 SqlSession 实现"),n("。DefaultSqlSession 中维护了一个 Executor 对象，通过它来完成数据库操作以及事务管理。DefaultSqlSession 在选择使用哪种 Executor 实现的时候，使用到了策略模式：DefaultSqlSession 扮演了策略模式中的 StrategyUser 角色，Executor 接口扮演的是 Strategy 角色，Executor 接口的不同实现则对应 StrategyImpl 的角色。")],-1),D=s("p",null,"另外，DefaultSqlSession 还维护了一个 dirty 字段来标识缓存中是否有脏数据，它在执行 update() 方法修改数据时会被设置为 true，并在后续参与事务控制，决定当前事务是否需要提交或回滚。",-1),h=s("p",null,"下面接着来看 DefaultSqlSession 对 SqlSession 接口的实现。DefaultSqlSession 为每一类数据操作方法提供了多个重载，尤其是 select*() 操作，而且这些 select*() 方法的重载之间有相互依赖的关系，如下图所示：",-1),A=o("",27),_={href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},f=s("p",null,[s("strong",null,"《Java 工程师高薪训练营》")],-1),v=s("p",null,[n("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),n("！")],-1);function C(b,B,x,M,k,T){const a=e("Image");return t(),c("div",null,[i,E,y,S,u,F,q,l(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M01/27/B6/CioPOWBdmRKAZosJAAEAw6jnBB8920.png"}),n(),d,l(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/27/B6/CioPOWBdmQiAIatQAAFZND8WjFQ155.png"}),n(),g,m,D,h,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/24/72/Cgp9HWBYb-iAKkKeAADz5INxXLw311.png"}),n(),A,s("p",null,[s("a",_,[l(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"})])]),f,v])}const P=p(r,[["render",C]]);export{j as __pageData,P as default};
