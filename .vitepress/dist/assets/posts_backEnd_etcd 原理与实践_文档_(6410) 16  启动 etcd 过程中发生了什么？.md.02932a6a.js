import{_ as o,j as e,o as t,h as r,k as l,f as n,s,Q as p}from"./chunks/framework.d3daa342.js";const B=JSON.parse('{"title":"16启动etcd过程中发生了什么？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6410) 16  启动 etcd 过程中发生了什么？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6410) 16  启动 etcd 过程中发生了什么？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/etcd 原理与实践_文档/(6410) 16  启动 etcd 过程中发生了什么？.md"},E=s("h1",{id:"_16启动etcd过程中发生了什么",tabindex:"-1"},[n("16启动etcd过程中发生了什么？ "),s("a",{class:"header-anchor",href:"#_16启动etcd过程中发生了什么","aria-label":'Permalink to "16启动etcd过程中发生了什么？"'},"​")],-1),y=s("p",null,"etcd 服务端是一个综合的模块，整合了我们前面所讲的 Raft、存储、WAL 等功能。etcd 服务端启动时，需要经过初始化创建 etcdServer 实例，接着依次启动 Raft 和 rafthttp 模块，最后启动 etcd 服务端，实现集群内部通信，此时就可以处理客户端的请求了。这一讲我们就结合源码介绍 etcd 服务端启动的具体实现。",-1),i=s("h3",{id:"etcd-server-启动总览",tabindex:"-1"},[n("etcd Server 启动总览 "),s("a",{class:"header-anchor",href:"#etcd-server-启动总览","aria-label":'Permalink to "etcd Server 启动总览"'},"​")],-1),d=s("p",null,"我们使用分层的方式来描绘 etcd 的架构，etcd 可分为 Client 客户端层、API 网络接口层、etcd Raft 算法层、逻辑层和 etcd 存储层。如下图所示：",-1),F=p(`<p>etcd 分层架构图</p><p>etcd 服务端涉及的模块代码比较多，分析所有的代码，显然是不太可能的事情。为了帮你抓住重点，我将从 etcd Server 启动的流程开始，选取其中的重点步骤进行详细分析。</p><p>etcd 服务端对 EtcdServer 结构进行了抽象，其包含了 raftNode 属性，代表 Raft 集群中的一个节点，启动入口在 etcdmain 包中的主函数。其主要的逻辑在<code>startEtcdOrProxyV2</code>函数中：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 etcdmain/etcd.go:52</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startEtcdOrProxyV2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	grpc.EnableTracing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">	cfg </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newConfig</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	defaultInitialCluster </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cfg.ec.InitialCluster</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 异常日志处理</span></span>
<span class="line"><span style="color:#E1E4E8;">	defaultHost, dhErr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cfg.ec).</span><span style="color:#79B8FF;">UpdateDefaultClusterFromName</span><span style="color:#E1E4E8;">(defaultInitialCluster)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> stopped </span><span style="color:#F97583;">&lt;-chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> errc </span><span style="color:#F97583;">&lt;-chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// identifyDataDirOrDie 返回 data 目录的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">	which </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">identifyDataDirOrDie</span><span style="color:#E1E4E8;">(cfg.ec.</span><span style="color:#79B8FF;">GetLogger</span><span style="color:#E1E4E8;">(), cfg.ec.Dir)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> which </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> dirEmpty {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> which {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 以何种模式启动 etcd</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> dirMember:</span></span>
<span class="line"><span style="color:#E1E4E8;">			stopped, errc, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">startEtcd</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cfg.ec)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> dirProxy:</span></span>
<span class="line"><span style="color:#E1E4E8;">			err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">startProxy</span><span style="color:#E1E4E8;">(cfg)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			lg.</span><span style="color:#79B8FF;">Panic</span><span style="color:#E1E4E8;">(..)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		shouldProxy </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cfg.</span><span style="color:#79B8FF;">isProxy</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">shouldProxy {</span></span>
<span class="line"><span style="color:#E1E4E8;">			stopped, errc, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">startEtcd</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cfg.ec)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> derr, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> err.(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">etcdserver.DiscoveryError); ok </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> derr.Err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> v2discovery.ErrFullCluster {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cfg.</span><span style="color:#79B8FF;">shouldFallbackToProxy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">					shouldProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> shouldProxy {</span></span>
<span class="line"><span style="color:#E1E4E8;">			err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">startProxy</span><span style="color:#E1E4E8;">(cfg)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// ... 有省略</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 异常日志记录</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	osutil.</span><span style="color:#79B8FF;">HandleInterrupts</span><span style="color:#E1E4E8;">(lg)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">notifySystemd</span><span style="color:#E1E4E8;">(lg)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> lerr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">errc:</span></span>
<span class="line"><span style="color:#E1E4E8;">		lg.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;listener failed&quot;</span><span style="color:#E1E4E8;">, zap.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(lerr))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">stopped:</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	osutil.</span><span style="color:#79B8FF;">Exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 etcdmain/etcd.go:52</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startEtcdOrProxyV2</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	grpc.EnableTracing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">	cfg </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newConfig</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	defaultInitialCluster </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cfg.ec.InitialCluster</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 异常日志处理</span></span>
<span class="line"><span style="color:#24292E;">	defaultHost, dhErr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cfg.ec).</span><span style="color:#005CC5;">UpdateDefaultClusterFromName</span><span style="color:#24292E;">(defaultInitialCluster)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> stopped </span><span style="color:#D73A49;">&lt;-chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> errc </span><span style="color:#D73A49;">&lt;-chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// identifyDataDirOrDie 返回 data 目录的类型</span></span>
<span class="line"><span style="color:#24292E;">	which </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">identifyDataDirOrDie</span><span style="color:#24292E;">(cfg.ec.</span><span style="color:#005CC5;">GetLogger</span><span style="color:#24292E;">(), cfg.ec.Dir)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> which </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> dirEmpty {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> which {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 以何种模式启动 etcd</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> dirMember:</span></span>
<span class="line"><span style="color:#24292E;">			stopped, errc, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">startEtcd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cfg.ec)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> dirProxy:</span></span>
<span class="line"><span style="color:#24292E;">			err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">startProxy</span><span style="color:#24292E;">(cfg)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">			lg.</span><span style="color:#005CC5;">Panic</span><span style="color:#24292E;">(..)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		shouldProxy </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cfg.</span><span style="color:#005CC5;">isProxy</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">shouldProxy {</span></span>
<span class="line"><span style="color:#24292E;">			stopped, errc, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">startEtcd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cfg.ec)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> derr, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> err.(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">etcdserver.DiscoveryError); ok </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> derr.Err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> v2discovery.ErrFullCluster {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cfg.</span><span style="color:#005CC5;">shouldFallbackToProxy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">					shouldProxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> shouldProxy {</span></span>
<span class="line"><span style="color:#24292E;">			err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">startProxy</span><span style="color:#24292E;">(cfg)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// ... 有省略</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 异常日志记录</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	osutil.</span><span style="color:#005CC5;">HandleInterrupts</span><span style="color:#24292E;">(lg)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">notifySystemd</span><span style="color:#24292E;">(lg)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> lerr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">errc:</span></span>
<span class="line"><span style="color:#24292E;">		lg.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;listener failed&quot;</span><span style="color:#24292E;">, zap.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(lerr))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">stopped:</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	osutil.</span><span style="color:#005CC5;">Exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据上述实现，我们可以绘制出如下的 startEtcdOrProxyV2 调用流程图：</p>`,5),f=p(`<p>startEtcdOrProxyV2 调用流程图</p><p>我们来具体解释一下上图中的每一个步骤。</p><ul><li><p><code>cfg := newConfig()</code>用于初始化配置，<code>cfg.parse(os.Args[1:])</code>，随后从第二个参数开始解析命令行输入参数。</p></li><li><p><code>setupLogging()</code>，用于初始化日志配置。</p></li><li><p><code>identifyDataDirOrDie</code>，判断 data 目录的类型，有 dirMember、dirProxy、dirEmpty，分别对应 etcd 目录、Proxy 目录和空目录。etcd 首先根据 data 目录的类型，判断启动 etcd 还是启动代理。如果是 dirEmpty，再根据命令行参数是否指定了 proxy 模式来判断。</p></li><li><p>startEtcd，核心的方法，用于启动 etcd，我们将在下文讲解这部分内容。</p></li><li><p>osutil.HandleInterrupts(lg) 注册信号，包括 SIGINT、SIGTERM，用来终止程序，并清理系统。</p></li><li><p>notifySystemd(lg)，初始化完成，监听对外的连接。</p></li><li><p>select()，监听 channel 上的数据流动，异常捕获与等待退出。</p></li><li><p>osutil.Exit()，接收到异常或退出的命令。</p></li></ul><p>通过上述流程，我们可以看到 startEtcdOrProxyV2 的重点是 startEtcd。下面我们就来具体分析其启动的过程。</p><h4 id="startetcd-启动-etcd-服务" tabindex="-1">startEtcd 启动 etcd 服务 <a class="header-anchor" href="#startetcd-启动-etcd-服务" aria-label="Permalink to &quot;startEtcd 启动 etcd 服务&quot;">​</a></h4><p><code>startEtcd</code>启动 etcd 服务主要是通过调用<code>StartEtcd</code>方法，该方法的实现位于 embed 包，用于启动 etcd 服务器和 HTTP 处理程序，以进行客户端/服务器通信。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 embed/etcd.go:92</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StartEtcd</span><span style="color:#E1E4E8;">(inCfg </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Config) (e </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Etcd, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 校验 etcd 配置</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inCfg.</span><span style="color:#79B8FF;">Validate</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	serving </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据合法的配置，创建 etcd 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">	e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Etcd{cfg: </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">inCfg, stopc: </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{})}</span></span>
<span class="line"><span style="color:#E1E4E8;">	cfg </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">e.cfg</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 为每个 peer 创建一个 peerListener(rafthttp.NewListener)，用于接收 peer 的消息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e.Peers, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configurePeerListeners</span><span style="color:#E1E4E8;">(cfg); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 创建 client 的 listener(transport.NewKeepAliveListener) contexts 的 map，用于服务端处理客户端的请求</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e.sctxs, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configureClientListeners</span><span style="color:#E1E4E8;">(cfg); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, sctx </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> e.sctxs {</span></span>
<span class="line"><span style="color:#E1E4E8;">		e.Clients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(e.Clients, sctx.l)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 创建 etcdServer</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e.Server, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> etcdserver.</span><span style="color:#79B8FF;">NewServer</span><span style="color:#E1E4E8;">(srvcfg); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	e.Server.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 在 rafthttp 启动之后，配置 peer Handler</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.</span><span style="color:#79B8FF;">servePeers</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...有删减</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 embed/etcd.go:92</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StartEtcd</span><span style="color:#24292E;">(inCfg </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Config) (e </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Etcd, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 校验 etcd 配置</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inCfg.</span><span style="color:#005CC5;">Validate</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	serving </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据合法的配置，创建 etcd 实例</span></span>
<span class="line"><span style="color:#24292E;">	e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Etcd{cfg: </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">inCfg, stopc: </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{})}</span></span>
<span class="line"><span style="color:#24292E;">	cfg </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">e.cfg</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 为每个 peer 创建一个 peerListener(rafthttp.NewListener)，用于接收 peer 的消息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e.Peers, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configurePeerListeners</span><span style="color:#24292E;">(cfg); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 创建 client 的 listener(transport.NewKeepAliveListener) contexts 的 map，用于服务端处理客户端的请求</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e.sctxs, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configureClientListeners</span><span style="color:#24292E;">(cfg); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, sctx </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> e.sctxs {</span></span>
<span class="line"><span style="color:#24292E;">		e.Clients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(e.Clients, sctx.l)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 创建 etcdServer</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e.Server, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> etcdserver.</span><span style="color:#005CC5;">NewServer</span><span style="color:#24292E;">(srvcfg); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	e.Server.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 在 rafthttp 启动之后，配置 peer Handler</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#005CC5;">servePeers</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...有删减</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据上述代码，我们可以总结出如下的调用步骤：</p><ul><li><p><code>inCfg.Validate()</code>检查配置是否正确；</p></li><li><p><code>e = &amp;Etcd{cfg: *inCfg, stopc: make(chan struct{})}</code>创建一个 etcd 实例；</p></li><li><p>configurePeerListeners 为每个 peer 创建一个 peerListener(rafthttp.NewListener)，用于接收 peer 的消息；</p></li><li><p>configureClientListeners 创建 client 的 listener(transport.NewKeepAliveListener)，用于服务端处理客户端的请求；</p></li><li><p><code>etcdserver.NewServer(srvcfg)</code>创建一个 etcdServer 实例；</p></li><li><p>启动<code>etcdServer.Start()</code>；</p></li><li><p>配置 peer handler。</p></li></ul><p>其中<code>etcdserver.NewServer(srvcfg)</code>和</p><p><code>etcdServer.Start()</code>分别用于创建一个 etcdServer 实例和启动 etcd，下面我们就分别介绍一下这两个步骤。</p><h3 id="服务端初始化" tabindex="-1">服务端初始化 <a class="header-anchor" href="#服务端初始化" aria-label="Permalink to &quot;服务端初始化&quot;">​</a></h3><p>服务端初始化涉及比较多的业务操作，包括 etcdServer 的创建、启动 backend、启动 raftNode 等，下面我们具体介绍这些操作。</p><h4 id="newserver-创建实例" tabindex="-1">NewServer 创建实例 <a class="header-anchor" href="#newserver-创建实例" aria-label="Permalink to &quot;NewServer 创建实例&quot;">​</a></h4><p>NewServer 方法用于创建一个 etcdServer 实例，我们可以根据传递过来的配置创建一个新的 etcdServer，在 etcdServer 的生存期内，该配置被认为是<strong>静态</strong>的。</p><p>我们来总结一下 etcd Server 的初始化涉及的主要方法，如下内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">()                           </span></span>
<span class="line"><span style="color:#E1E4E8;"> |-v2store.New() // 创建 store，根据给定的命名空间来创建初始目录</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">|-wal.Exist</span><span style="color:#E1E4E8;">() //  判断 wal 文件是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;"> |-fileutil.TouchDirAll // 创建文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;"> |-openBackend // 使用当前的 etcd db 返回一个 backend</span></span>
<span class="line"><span style="color:#E1E4E8;"> |-restartNode()  // 已有 WAL，直接根据 SnapShot 启动，最常见的场景</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">|-startNode</span><span style="color:#E1E4E8;">()       // 在没有 WAL 的情况下，新建一个节点 </span></span>
<span class="line"><span style="color:#E1E4E8;"> |-tr.Start  // 启动 rafthttp</span></span>
<span class="line"><span style="color:#E1E4E8;"> |-time.NewTicker()  通过创建 &amp;</span><span style="color:#B392F0;">EtcdServer</span><span style="color:#E1E4E8;">{} </span><span style="color:#9ECBFF;">结构体时新建</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tick</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">时钟</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">()                           </span></span>
<span class="line"><span style="color:#24292E;"> |-v2store.New() // 创建 store，根据给定的命名空间来创建初始目录</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">|-wal.Exist</span><span style="color:#24292E;">() //  判断 wal 文件是否存在</span></span>
<span class="line"><span style="color:#24292E;"> |-fileutil.TouchDirAll // 创建文件夹</span></span>
<span class="line"><span style="color:#24292E;"> |-openBackend // 使用当前的 etcd db 返回一个 backend</span></span>
<span class="line"><span style="color:#24292E;"> |-restartNode()  // 已有 WAL，直接根据 SnapShot 启动，最常见的场景</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">|-startNode</span><span style="color:#24292E;">()       // 在没有 WAL 的情况下，新建一个节点 </span></span>
<span class="line"><span style="color:#24292E;"> |-tr.Start  // 启动 rafthttp</span></span>
<span class="line"><span style="color:#24292E;"> |-time.NewTicker()  通过创建 &amp;</span><span style="color:#6F42C1;">EtcdServer</span><span style="color:#24292E;">{} </span><span style="color:#032F62;">结构体时新建</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tick</span><span style="color:#24292E;"> </span><span style="color:#032F62;">时钟</span></span></code></pre></div><p>需要注意的是，我们要<strong>在 kv 键值对重建之前恢复租期</strong>。当恢复 mvcc.KV 时，重新将 key 绑定到租约上。如果先恢复 mvcc.KV，它有可能在恢复之前将 key 绑定到错误的 lease。</p><p>另外就是最后的清理逻辑，在没有先关闭 kv 的情况下关闭 backend，可能导致恢复的压缩失败，并出现 TX 错误。</p><h4 id="启动-backend" tabindex="-1">启动 backend <a class="header-anchor" href="#启动-backend" aria-label="Permalink to &quot;启动 backend&quot;">​</a></h4><p>创建好 etcdServer 实例之后，另一个重要的操作便是启动 backend。backend 是 etcd 的存储支撑，<code>openBackend</code>调用当前的 db 返回一个 backend。<code>openBackend</code>方法的具体实现如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 etcdserver/backend.go:68</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">openBackend</span><span style="color:#E1E4E8;">(cfg ServerConfig) backend.Backend {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// db 存储的路径</span></span>
<span class="line"><span style="color:#E1E4E8;">	fn </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cfg.</span><span style="color:#79B8FF;">backendPath</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	now, beOpened </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> time.</span><span style="color:#79B8FF;">Now</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> backend.Backend)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 单独协程启动 backend</span></span>
<span class="line"><span style="color:#E1E4E8;">		beOpened </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newBackend</span><span style="color:#E1E4E8;">(cfg)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 阻塞，等待 backend 启动，或者 10s 超时</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> be </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">beOpened:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> be</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">time.</span><span style="color:#79B8FF;">After</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 超时，db 文件被占用</span></span>
<span class="line"><span style="color:#E1E4E8;">		)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">beOpened</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 etcdserver/backend.go:68</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">openBackend</span><span style="color:#24292E;">(cfg ServerConfig) backend.Backend {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// db 存储的路径</span></span>
<span class="line"><span style="color:#24292E;">	fn </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cfg.</span><span style="color:#005CC5;">backendPath</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	now, beOpened </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> time.</span><span style="color:#005CC5;">Now</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> backend.Backend)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 单独协程启动 backend</span></span>
<span class="line"><span style="color:#24292E;">		beOpened </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newBackend</span><span style="color:#24292E;">(cfg)</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 阻塞，等待 backend 启动，或者 10s 超时</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> be </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">beOpened:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> be</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">time.</span><span style="color:#005CC5;">After</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 超时，db 文件被占用</span></span>
<span class="line"><span style="color:#24292E;">		)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">beOpened</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，我们在<code>openBackend</code>的实现中首先创建一个 backend.Backend 类型的 chan，并使用单独的协程启动 backend，设置启动的超时时间为 10s。<code>beOpened &lt;- newBackend(cfg)</code>主要用来配置 backend 启动参数，具体的实现则在 backend 包中。</p><p>etcd 底层的存储基于 boltdb，使用<code>newBackend</code>方法构建 boltdb 需要的参数，<code>bolt.Open(bcfg.Path, 0600, bopts)</code>在给定路径下创建并打开数据库，其中<strong>第二个参数为打开文件的权限</strong>。如果该文件不存在，将自动创建。传递 nil 参数将使 boltdb 使用默认选项打开数据库连接。</p><h3 id="启动-raft" tabindex="-1">启动 Raft <a class="header-anchor" href="#启动-raft" aria-label="Permalink to &quot;启动 Raft&quot;">​</a></h3><p>在<code>NewServer</code>的实现中，我们可以基于条件语句判断 Raft 的启动方式，具体实现如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">haveWAL </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cfg.NewCluster:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// startNode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">haveWAL </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> cfg.NewCluster:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// startNode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> haveWAL:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// restartAsStandaloneNode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// restartNode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unsupported Bootstrap config&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">haveWAL </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cfg.NewCluster:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// startNode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">haveWAL </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> cfg.NewCluster:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// startNode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> haveWAL:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// restartAsStandaloneNode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// restartNode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unsupported Bootstrap config&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>haveWAL</code>变量对应的表达式为<code>wal.Exist(cfg.WALDir())</code>，用来判断是否存在 WAL，<code>cfg.NewCluster</code>则对应 etcd 启动时的<code>--initial-cluster-state</code>，标识节点初始化方式，该配置默认为<code>new</code>，对应的变量 haveWAL 的值为 true。new 表示没有集群存在，所有成员以静态方式或 DNS 方式启动，创建新集群；existing 表示集群存在，节点将尝试加入集群。</p><p>在三种不同的条件下，raft 对应三种启动的方式，分别是：startNode、restartAsStandaloneNode 和 restartNode。下面我们将结合判断条件，具体介绍这三种启动方式。</p><h4 id="startnode" tabindex="-1">startNode <a class="header-anchor" href="#startnode" aria-label="Permalink to &quot;startNode&quot;">​</a></h4><p>在如下的两种条件下，raft 将会调用 raft 中的<code>startNode</code>方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">haveWAL </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> cfg.NewCluster</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">haveWAL </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cfg.NewCluster</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startNode</span><span style="color:#E1E4E8;">(cfg, cl, cl.</span><span style="color:#B392F0;">MemberIDs</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startNode</span><span style="color:#E1E4E8;">(cfg, cl, nil)</span></span>
<span class="line"><span style="color:#6A737D;">// startNode 的定义</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">startNode</span><span style="color:#E1E4E8;">(cfg ServerConfig, cl </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">membership.RaftCluster, ids []types.ID) (id types.ID, n raft.Node, s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">raft.MemoryStorage, w </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">wal.WAL) ;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">haveWAL </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> cfg.NewCluster</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">haveWAL </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cfg.NewCluster</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startNode</span><span style="color:#24292E;">(cfg, cl, cl.</span><span style="color:#6F42C1;">MemberIDs</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startNode</span><span style="color:#24292E;">(cfg, cl, nil)</span></span>
<span class="line"><span style="color:#6A737D;">// startNode 的定义</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">startNode</span><span style="color:#24292E;">(cfg ServerConfig, cl </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">membership.RaftCluster, ids []types.ID) (id types.ID, n raft.Node, s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">raft.MemoryStorage, w </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">wal.WAL) ;</span></span></code></pre></div><p>可以看到，这两个条件下都会调用 startNode 方法，只不过调用的参数有差异。在没有 WAL 日志，并且是新配置结点的场景下，需要传入集群的成员 ids，如果加入已有的集群则不需要。</p><p>我们以其中的一种 case，具体分析：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">haveWAL </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cfg.NewCluster:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 加入现有集群时检查初始配置，如有问题则返回错误</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cfg.</span><span style="color:#79B8FF;">VerifyJoinExisting</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用提供的地址映射创建一个新 raft 集群</span></span>
<span class="line"><span style="color:#E1E4E8;">  cl, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> membership.</span><span style="color:#79B8FF;">NewClusterFromURLsMap</span><span style="color:#E1E4E8;">(cfg.Logger, cfg.InitialClusterToken, cfg.InitialPeerURLsMap)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// GetClusterFromRemotePeers 采用一组表示 etcd peer 的 URL，并尝试通过访问其中一个 URL 上的成员端点来构造集群</span></span>
<span class="line"><span style="color:#E1E4E8;">  existingCluster, gerr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GetClusterFromRemotePeers</span><span style="color:#E1E4E8;">(cfg.Logger, </span><span style="color:#79B8FF;">getRemotePeerURLs</span><span style="color:#E1E4E8;">(cl, cfg.Name), prt)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> gerr </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cannot fetch cluster info from peer urls: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, gerr)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> membership.</span><span style="color:#79B8FF;">ValidateClusterAndAssignIDs</span><span style="color:#E1E4E8;">(cfg.Logger, cl, existingCluster); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error validating peerURLs </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, existingCluster, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 校验兼容性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">isCompatibleWithCluster</span><span style="color:#E1E4E8;">(cfg.Logger, cl, cl.</span><span style="color:#79B8FF;">MemberByName</span><span style="color:#E1E4E8;">(cfg.Name).ID, prt) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;incompatible with current running cluster&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  remotes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> existingCluster.</span><span style="color:#79B8FF;">Members</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  cl.</span><span style="color:#79B8FF;">SetID</span><span style="color:#E1E4E8;">(types.</span><span style="color:#79B8FF;">ID</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">), existingCluster.</span><span style="color:#79B8FF;">ID</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  cl.</span><span style="color:#79B8FF;">SetStore</span><span style="color:#E1E4E8;">(st)</span></span>
<span class="line"><span style="color:#E1E4E8;">  cl.</span><span style="color:#79B8FF;">SetBackend</span><span style="color:#E1E4E8;">(be)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 启动 raft Node</span></span>
<span class="line"><span style="color:#E1E4E8;">  id, n, s, w </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">startNode</span><span style="color:#E1E4E8;">(cfg, cl, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  cl.</span><span style="color:#79B8FF;">SetID</span><span style="color:#E1E4E8;">(id, existingCluster.</span><span style="color:#79B8FF;">ID</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">haveWAL </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cfg.NewCluster:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 加入现有集群时检查初始配置，如有问题则返回错误</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cfg.</span><span style="color:#005CC5;">VerifyJoinExisting</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用提供的地址映射创建一个新 raft 集群</span></span>
<span class="line"><span style="color:#24292E;">  cl, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> membership.</span><span style="color:#005CC5;">NewClusterFromURLsMap</span><span style="color:#24292E;">(cfg.Logger, cfg.InitialClusterToken, cfg.InitialPeerURLsMap)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// GetClusterFromRemotePeers 采用一组表示 etcd peer 的 URL，并尝试通过访问其中一个 URL 上的成员端点来构造集群</span></span>
<span class="line"><span style="color:#24292E;">  existingCluster, gerr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GetClusterFromRemotePeers</span><span style="color:#24292E;">(cfg.Logger, </span><span style="color:#005CC5;">getRemotePeerURLs</span><span style="color:#24292E;">(cl, cfg.Name), prt)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> gerr </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cannot fetch cluster info from peer urls: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, gerr)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> membership.</span><span style="color:#005CC5;">ValidateClusterAndAssignIDs</span><span style="color:#24292E;">(cfg.Logger, cl, existingCluster); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error validating peerURLs </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, existingCluster, err)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 校验兼容性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">isCompatibleWithCluster</span><span style="color:#24292E;">(cfg.Logger, cl, cl.</span><span style="color:#005CC5;">MemberByName</span><span style="color:#24292E;">(cfg.Name).ID, prt) {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;incompatible with current running cluster&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  remotes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> existingCluster.</span><span style="color:#005CC5;">Members</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  cl.</span><span style="color:#005CC5;">SetID</span><span style="color:#24292E;">(types.</span><span style="color:#005CC5;">ID</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), existingCluster.</span><span style="color:#005CC5;">ID</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  cl.</span><span style="color:#005CC5;">SetStore</span><span style="color:#24292E;">(st)</span></span>
<span class="line"><span style="color:#24292E;">  cl.</span><span style="color:#005CC5;">SetBackend</span><span style="color:#24292E;">(be)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 启动 raft Node</span></span>
<span class="line"><span style="color:#24292E;">  id, n, s, w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">startNode</span><span style="color:#24292E;">(cfg, cl, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  cl.</span><span style="color:#005CC5;">SetID</span><span style="color:#24292E;">(id, existingCluster.</span><span style="color:#005CC5;">ID</span><span style="color:#24292E;">())</span></span></code></pre></div><p>从上面的主流程来看，首先是做配置的校验，然后使用提供的地址映射创建一个新的 raft 集群，校验加入集群的兼容性，最后启动 raft Node。</p><p>StartNode 基于给定的配置和 raft 成员列表，返回一个新的节点，它将每个给定 peer 的 ConfChangeAddNode 条目附加到初始日志中。peers 的长度不能为零，如果长度为零将调用 RestartNode 方法。</p><p>RestartNode 与 StartNode 类似，但不<strong>包含 peers 列表</strong>，集群的当前成员关系将从存储中恢复。如果调用方存在状态机，则传入已应用到该状态机的最新一个日志索引值；否则直接使用零作为参数。</p><h4 id="重启-raft-node" tabindex="-1">重启 raft Node <a class="header-anchor" href="#重启-raft-node" aria-label="Permalink to &quot;重启 raft Node&quot;">​</a></h4><p>当已存在 WAL 文件时，raft Node 启动时首先需要检查响应文件夹的读写权限（当集群初始化之后，discovery token 将不会生效）；接着将会加载快照文件，并从 snapshot 恢复 backend 存储。</p><p><code>cfg.ForceNewCluster</code>对应 etcd 配置中的<code>--force-new-cluster</code>，如果为 true，则会强制创建一个新的单成员集群；否则重新启动 raft Node。</p><h4 id="restartasstandalonenode" tabindex="-1">restartAsStandaloneNode <a class="header-anchor" href="#restartasstandalonenode" aria-label="Permalink to &quot;restartAsStandaloneNode&quot;">​</a></h4><p>当<code>--force-new-cluster</code>配置为 true 时，则会调用 restartAsStandaloneNode，即强制创建一个新的单成员集群。该节点将会提交配置更新，强制删除集群中的所有成员，并添加自身作为集群的一个节点，同时我们需要将其备份设置进行还原。</p><p>restartAsStandaloneNode 的实现中，首先读取 WAL 文件，并且丢弃本地未提交的 entries。createConfigChangeEnts 创建一系列 Raft 条目（即 EntryConfChange），用于从集群中删除一组给定的 ID。如果当前节点<code>self</code>出现在条目中，也不会被删除；如果<code>self</code>不在给定的 ID 内，它将创建一个 Raft 条目以添加给定的<code>self</code>默认成员，随后强制追加新提交的 entries 到现有的数据存储中。</p><p>最后就是设置一些状态，构造 raftNode 的配置，重启 raft Node。</p><h4 id="restartnode" tabindex="-1">restartNode <a class="header-anchor" href="#restartnode" aria-label="Permalink to &quot;restartNode&quot;">​</a></h4><p>在已有 WAL 数据的情况中，除了<code>restartAsStandaloneNode</code>场景，当<code>--force-new-cluster</code>为默认的 false 时，直接重启 raftNode。这种操作相对来说比较简单，减少了丢弃本地未提交的 entries 以及强制追加新提交的 entries 的步骤。接下来要做的就是直接重启 raftNode 还原之前集群节点的状态，读取 WAL 和快照数据，最后启动并更新 raftStatus。</p><h3 id="rafthttp-启动" tabindex="-1">rafthttp 启动 <a class="header-anchor" href="#rafthttp-启动" aria-label="Permalink to &quot;rafthttp 启动&quot;">​</a></h3><p>分析完 raft Node 的启动，接下来我们看 rafthttp 的启动。Transport 实现了 Transporter 接口，它提供了将 raft 消息发送到 peer 并从 peer 接收 raft 消息的功能。我们需要调用 Handler 方法来获取处理程序，以处理从 peerURLs 接收到的请求。用户需要先调用 Start 才能调用其他功能，并在停止使用 Transport 时调用 Stop。</p><p>rafthttp 的启动过程中首先要构建 Transport，并将 m.PeerURLs 分别赋值到 Transport 中的 Remote 和 Peer 中，之后将 srv.r.transport 指向构建好的 Transport 即可。</p><h3 id="启动-etcd-服务端" tabindex="-1">启动 etcd 服务端 <a class="header-anchor" href="#启动-etcd-服务端" aria-label="Permalink to &quot;启动 etcd 服务端&quot;">​</a></h3><p>接下来就是 etcd 的真正启动了，我们来看主要调用步骤：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 embed/etcd.go:220</span></span>
<span class="line"><span style="color:#E1E4E8;">e.Server.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 接收 peer 消息</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.</span><span style="color:#79B8FF;">servePeers</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e, err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 接收客户端请求</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.</span><span style="color:#79B8FF;">serveClients</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e, err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 提供导出 metrics</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.</span><span style="color:#79B8FF;">serveMetrics</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e, err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">serving </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 embed/etcd.go:220</span></span>
<span class="line"><span style="color:#24292E;">e.Server.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 接收 peer 消息</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#005CC5;">servePeers</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e, err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 接收客户端请求</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#005CC5;">serveClients</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e, err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 提供导出 metrics</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#005CC5;">serveMetrics</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e, err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">serving </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre></div><p>启动 etcd Server，包括三个主要的步骤：首先<code>e.Server.Start</code>初始化 Server 启动的必要信息；接着实现集群内部通讯；最后开始接收 peer 和客户端的请求，包括 range、put 等请求。</p><h4 id="e-server-start" tabindex="-1"><strong>e.Server.Start</strong> <a class="header-anchor" href="#e-server-start" aria-label="Permalink to &quot;**e.Server.Start**&quot;">​</a></h4><p>在处理请求之前，<code>Start</code>方法初始化 Server 的必要信息，需要在<code>Do</code>和<code>Process</code>之前调用，且必须是<strong>非阻塞</strong> 的，任何耗时的函数都必须在单独的协程中运行。<code>Start</code>方法的实现中还启动了多个 goroutine，这些协程用于<strong>选举时钟设置以及注册自身信息到服务器</strong>等异步操作。</p><h4 id="集群内部通信" tabindex="-1"><strong>集群内部通信</strong> <a class="header-anchor" href="#集群内部通信" aria-label="Permalink to &quot;**集群内部通信**&quot;">​</a></h4><p>集群内部的通信主要由 Etcd.servePeers 实现，在 rafthttp.Transport 启动之后，配置集群成员的处理器。首先生成 http.Handler 来处理 etcd 集群成员的请求，并做一些配置校验。goroutine 读取 gRPC 请求，然后调用 srv.Handler 处理这些请求。<code>srv.Serve</code>总是返回非空的错误，当 Shutdown 或者 Close 时，返回的错误则是 ErrServerClosed。最后<code>srv.Serve</code>在独立协程启动对集群成员的监听。</p><h4 id="处理客户端请求" tabindex="-1">处理客户端请求 <a class="header-anchor" href="#处理客户端请求" aria-label="Permalink to &quot;处理客户端请求&quot;">​</a></h4><p><code>Etcd.serveClients</code>主要用来处理客户端请求，比如我们常见的 range、put 等请求。etcd 处理客户端的请求，每个客户端的请求对应一个 goroutine 协程，这也是 etcd 高性能的支撑，etcd Server 为每个监听的地址启动一个客户端服务协程，根据 v2、v3 版本进行不同的处理。在<code>serveClients</code>中，还设置了 gRPC 的属性，包括 GRPCKeepAliveMinTime 、GRPCKeepAliveInterval 以及 GRPCKeepAliveTimeout 等。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了 etcd 服务端启动涉及的一些细节。</p><p>etcd 服务端的启动包括两大块：</p><ul><li><p>etcdServer 主进程，直接或者间接包含了 raftNode、WAL、Snapshotter 等多个核心组件，可以理解为一个容器；</p></li><li><p>另一块则是 raftNode，对内部 Raft 协议实现的封装，暴露简单的接口，用来保证写事务的集群一致性。</p></li></ul><p>通过结合源码对 etcd 启动过程的分析，我们知道 etcd 启动时需要经历服务端配置的初始化、根据不同的场景选择合适的方式启动 raft 和 rafthttp，最后则是 etcd 服务器的启动，实现集群内部通信，之后才可以处理客户端的请求。</p><p>本讲内容总结如下：</p>`,66),g=s("p",null,"学习完这一讲，我想给大家留一个问题，你经历过哪些 etcd 启动时的异常场景，又是如何解决的它们呢？欢迎你在留言区和我分享你的经历。下一讲，我们将介绍服务端处理客户端请求的步骤和原理。",-1);function C(A,D,u,h,v,m){const a=e("Image");return t(),r("div",null,[E,y,i,d,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/69/CioPOWBR2CSAJizEAAA4DvAJkFg782.png"}),n(),F,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/1F/6C/Cgp9HWBR2C-AQGgaAABQ5Am9QKc164.png"}),n(),f,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/69/CioPOWBR2EmAOOQyAAFlIjNTnK0497.png"}),n(),g])}const k=o(c,[["render",C]]);export{B as __pageData,k as default};
