import{_ as o,j as e,o as t,h as r,k as n,f as a,Q as p,s as l}from"./chunks/framework.d3daa342.js";const f=JSON.parse('{"title":"20数据面：基于Go-Micro快速实现代理模块","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/微服务Service Mesh原理与实战_文档/(6013) 20  数据面：基于 Go-Micro 快速实现代理模块.md","filePath":"posts/backEnd/微服务Service Mesh原理与实战_文档/(6013) 20  数据面：基于 Go-Micro 快速实现代理模块.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/微服务Service Mesh原理与实战_文档/(6013) 20  数据面：基于 Go-Micro 快速实现代理模块.md"},y=p('<h1 id="_20数据面-基于go-micro快速实现代理模块" tabindex="-1">20数据面：基于Go-Micro快速实现代理模块 <a class="header-anchor" href="#_20数据面-基于go-micro快速实现代理模块" aria-label="Permalink to &quot;20数据面：基于Go-Micro快速实现代理模块&quot;">​</a></h1><p>今天我要和你分享的内容是：如何自研 Service Mesh 中的数据面，这里我们选择用 Go-Micro 框架实现 Sidecar 中最核心的代理模块。</p><p>在本讲中，我们选用了 Go 语言实现数据面。在常见的开源数据面中，Envoy 使用 C++ 实现，Linkerd 早期版本使用 Java，新版本使用 Rust 实现，而 MOSN 和 Maesh 都使用 Go 语言实现。从这些技术选型可以看出，Go 语言在数据面的实现中占有一席之地，主要是<strong>较高的性能和较少的内存占用</strong>，比较适合 Sidecar 的应用场景。</p><p>为了快速实现，我们使用了 Go-micro 框架，这个框架有非常好的抽象层，支持 MUCP、gRPC、HTTP 等协议的原生代理，后期也可以根据需求扩展协议层。</p><p>本文讲解的代码地址在：<a href="https://github.com/beck917/easymesh" target="_blank" rel="noreferrer">https://github.com/beck917/easymesh</a>，你可以配合代码阅读本文。</p><h3 id="环境安装-框架搭建" tabindex="-1">环境安装&amp;框架搭建 <a class="header-anchor" href="#环境安装-框架搭建" aria-label="Permalink to &quot;环境安装\\&amp;框架搭建&quot;">​</a></h3><p>首先进入 Go 语言官网，根据环境下载合适的版本<a href="https://golang.google.cn/dl/" target="_blank" rel="noreferrer">https://golang.google.cn/dl/</a>，因为 Go-Micro 的旧版本依赖问题，这里我们选择 Go 1.14 版本。</p>',7),E=p(`<p>代码中我们并没有使用最新的 v3 版本，因为 Go-Micro 框架的母公司转向云平台的开发模式，Go-Micro 的 v3 版本转移到了个人项目下，但这个版本还有诸多问题，缺少以前的很多特性，所以这里还是采用了 v1 版本。</p><h3 id="代码解析" tabindex="-1">代码解析 <a class="header-anchor" href="#代码解析" aria-label="Permalink to &quot;代码解析&quot;">​</a></h3><p>首先我们看一下 main 方法，这里创建了两个代理服务器，分别是监听 8082 端口的出流量代理和监听 8083 端口的 8083 服务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    http.</span><span style="color:#B392F0;">HandleFunc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, indexHandler)</span></span>
<span class="line"><span style="color:#E1E4E8;">    go http.</span><span style="color:#B392F0;">ListenAndServe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:6060&quot;</span><span style="color:#E1E4E8;">, nil)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// start the client proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">    go proxy.</span><span style="color:#B392F0;">Run</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">proxy.ServerOptions{</span></span>
<span class="line"><span style="color:#E1E4E8;">        Name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;Client Listener Proxy&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;:8082&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Endpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:8083&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Protocol</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.</span><span style="color:#B392F0;">Sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// start the server proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxy.</span><span style="color:#B392F0;">Run</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">proxy.ServerOptions{</span></span>
<span class="line"><span style="color:#E1E4E8;">        Name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;Server Listener Proxy&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;:8083&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Endpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:6060&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Protocol</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    http.</span><span style="color:#6F42C1;">HandleFunc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, indexHandler)</span></span>
<span class="line"><span style="color:#24292E;">    go http.</span><span style="color:#6F42C1;">ListenAndServe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:6060&quot;</span><span style="color:#24292E;">, nil)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// start the client proxy</span></span>
<span class="line"><span style="color:#24292E;">    go proxy.</span><span style="color:#6F42C1;">Run</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">proxy.ServerOptions{</span></span>
<span class="line"><span style="color:#24292E;">        Name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;Client Listener Proxy&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;:8082&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Endpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:8083&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Protocol</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    time.</span><span style="color:#6F42C1;">Sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// start the server proxy</span></span>
<span class="line"><span style="color:#24292E;">    proxy.</span><span style="color:#6F42C1;">Run</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">proxy.ServerOptions{</span></span>
<span class="line"><span style="color:#24292E;">        Name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;Server Listener Proxy&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;:8083&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Endpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:6060&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Protocol</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面解释下 proxy.Run 方法的几个参数。</p><ul><li><p>Name：代理服务器唯一标识。</p></li><li><p>Address：代理服务器监听地址。</p></li><li><p>Endpoint：代理服务器流量转发的地址，可以看到这里 Client Proxy 将 Endpoint 设置为 <a href="http://127.0.0.1:8083" target="_blank" rel="noreferrer">http://127.0.0.1:8083</a>，意思是将流量转发到 Server Proxy，而 Server Proxy 将流量转向了本地的 6060 端口，也就是服务端口，这样就形成了一个完成的 Mesh 链路。</p></li><li><p>Protocol：代理的协议，这里是 HTTP。</p></li></ul><p>下面我们进入 Run 方法看一下核心代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// new proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">    var p proxy.Proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">    var s server.Server</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// set endpoint</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(Endpoint) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#B392F0;">HasPrefix</span><span style="color:#E1E4E8;">(Endpoint, </span><span style="color:#9ECBFF;">&quot;grpc://&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            ep </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#B392F0;">TrimPrefix</span><span style="color:#E1E4E8;">(Endpoint, </span><span style="color:#9ECBFF;">&quot;grpc://&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            popts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(popts, proxy.</span><span style="color:#B392F0;">WithEndpoint</span><span style="color:#E1E4E8;">(ep))</span></span>
<span class="line"><span style="color:#E1E4E8;">            p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#B392F0;">NewProxy</span><span style="color:#E1E4E8;">(popts...)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#B392F0;">HasPrefix</span><span style="color:#E1E4E8;">(Endpoint, </span><span style="color:#9ECBFF;">&quot;http://&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// TODO: strip prefix?</span></span>
<span class="line"><span style="color:#E1E4E8;">            popts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(popts, proxy.</span><span style="color:#B392F0;">WithEndpoint</span><span style="color:#E1E4E8;">(Endpoint))</span></span>
<span class="line"><span style="color:#E1E4E8;">            p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">NewProxy</span><span style="color:#E1E4E8;">(popts...)</span></span>
<span class="line"><span style="color:#E1E4E8;">            s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> smucp.</span><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                server.</span><span style="color:#B392F0;">WrapHandler</span><span style="color:#E1E4E8;">(ratelimiter.</span><span style="color:#B392F0;">NewHandlerWrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">            )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// TODO: strip prefix?</span></span>
<span class="line"><span style="color:#E1E4E8;">            popts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(popts, proxy.</span><span style="color:#B392F0;">WithEndpoint</span><span style="color:#E1E4E8;">(Endpoint))</span></span>
<span class="line"><span style="color:#E1E4E8;">            p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mucp.</span><span style="color:#B392F0;">NewProxy</span><span style="color:#E1E4E8;">(popts...)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// new proxy</span></span>
<span class="line"><span style="color:#24292E;">    var p proxy.Proxy</span></span>
<span class="line"><span style="color:#24292E;">    var s server.Server</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// set endpoint</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(Endpoint) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">HasPrefix</span><span style="color:#24292E;">(Endpoint, </span><span style="color:#032F62;">&quot;grpc://&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            ep </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">TrimPrefix</span><span style="color:#24292E;">(Endpoint, </span><span style="color:#032F62;">&quot;grpc://&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            popts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(popts, proxy.</span><span style="color:#6F42C1;">WithEndpoint</span><span style="color:#24292E;">(ep))</span></span>
<span class="line"><span style="color:#24292E;">            p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grpc.</span><span style="color:#6F42C1;">NewProxy</span><span style="color:#24292E;">(popts...)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">HasPrefix</span><span style="color:#24292E;">(Endpoint, </span><span style="color:#032F62;">&quot;http://&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// TODO: strip prefix?</span></span>
<span class="line"><span style="color:#24292E;">            popts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(popts, proxy.</span><span style="color:#6F42C1;">WithEndpoint</span><span style="color:#24292E;">(Endpoint))</span></span>
<span class="line"><span style="color:#24292E;">            p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">NewProxy</span><span style="color:#24292E;">(popts...)</span></span>
<span class="line"><span style="color:#24292E;">            s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> smucp.</span><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                server.</span><span style="color:#6F42C1;">WrapHandler</span><span style="color:#24292E;">(ratelimiter.</span><span style="color:#6F42C1;">NewHandlerWrapper</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// TODO: strip prefix?</span></span>
<span class="line"><span style="color:#24292E;">            popts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(popts, proxy.</span><span style="color:#6F42C1;">WithEndpoint</span><span style="color:#24292E;">(Endpoint))</span></span>
<span class="line"><span style="color:#24292E;">            p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mucp.</span><span style="color:#6F42C1;">NewProxy</span><span style="color:#24292E;">(popts...)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>Run()方法根据传入的参数 Endpoint 会选择对应的协议，这里我传入的是 HTTP 协议的Endpoint，会创建一个 HTTP 的 Proxy。</p><p>这个 HTTP 的 Proxy 跟踪你可以参照 <a href="https://github.com/asim/go-micro" target="_blank" rel="noreferrer">Go-Micro 的代码</a>，也很简单，其实所有的 Proxy 都会通过 ServeRequest(ctx context.Context, req server.Request, rsp server.Response) 这个方法，这个方法对 Server 处理过后的 HTTP 进行转发操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// get data</span></span>
<span class="line"><span style="color:#E1E4E8;">        body, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> req.</span><span style="color:#B392F0;">Read</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> io.EOF {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nil</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// get the header</span></span>
<span class="line"><span style="color:#E1E4E8;">        hdr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> req.</span><span style="color:#B392F0;">Header</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// get method</span></span>
<span class="line"><span style="color:#E1E4E8;">        method </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMethod</span><span style="color:#E1E4E8;">(hdr)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// get endpoint</span></span>
<span class="line"><span style="color:#E1E4E8;">        endpoint </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEndpoint</span><span style="color:#E1E4E8;">(hdr)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// send to backend</span></span>
<span class="line"><span style="color:#E1E4E8;">        hreq, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">NewRequest</span><span style="color:#E1E4E8;">(method, endpoint, bytes.</span><span style="color:#B392F0;">NewReader</span><span style="color:#E1E4E8;">(body))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">InternalServerError</span><span style="color:#E1E4E8;">(req.</span><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;">(), err.</span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// set the headers</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> range hdr {</span></span>
<span class="line"><span style="color:#E1E4E8;">            hreq.Header.</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(k, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// make the call</span></span>
<span class="line"><span style="color:#E1E4E8;">        hrsp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> http.DefaultClient.</span><span style="color:#B392F0;">Do</span><span style="color:#E1E4E8;">(hreq)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">InternalServerError</span><span style="color:#E1E4E8;">(req.</span><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;">(), err.</span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// get data</span></span>
<span class="line"><span style="color:#24292E;">        body, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> req.</span><span style="color:#6F42C1;">Read</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> io.EOF {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nil</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// get the header</span></span>
<span class="line"><span style="color:#24292E;">        hdr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> req.</span><span style="color:#6F42C1;">Header</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// get method</span></span>
<span class="line"><span style="color:#24292E;">        method </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(hdr)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// get endpoint</span></span>
<span class="line"><span style="color:#24292E;">        endpoint </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEndpoint</span><span style="color:#24292E;">(hdr)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// send to backend</span></span>
<span class="line"><span style="color:#24292E;">        hreq, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">NewRequest</span><span style="color:#24292E;">(method, endpoint, bytes.</span><span style="color:#6F42C1;">NewReader</span><span style="color:#24292E;">(body))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> errors.</span><span style="color:#6F42C1;">InternalServerError</span><span style="color:#24292E;">(req.</span><span style="color:#6F42C1;">Service</span><span style="color:#24292E;">(), err.</span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// set the headers</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> range hdr {</span></span>
<span class="line"><span style="color:#24292E;">            hreq.Header.</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(k, v)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// make the call</span></span>
<span class="line"><span style="color:#24292E;">        hrsp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> http.DefaultClient.</span><span style="color:#6F42C1;">Do</span><span style="color:#24292E;">(hreq)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> errors.</span><span style="color:#6F42C1;">InternalServerError</span><span style="color:#24292E;">(req.</span><span style="color:#6F42C1;">Service</span><span style="color:#24292E;">(), err.</span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span></code></pre></div><p>这里先读取了 Server 获取到的请求 header 和 body，然后建立了 HTTP 客户端进行流量转发。你可以看到，这里的转发相对简单，因为相对于自定义协议，<strong>HTTP Golang 提供了现成的客户端</strong>，这里直接使用即可。</p><p>Go-Micro 的 HTTP 的代理实现相对简单，但是你要注意：这里的代码并没有进行优化和客户端的超时处理，无法直接用于生产环境。如果想用于生产环境，还需要一些改造，比如自己建立 HTTP Client，而不是直接用 http.DefaultClient。另外，hreq 对象也要携带 context，以确保可以<strong>控制超时</strong>，返回 504 Gateway Timetout 的错误。</p><p>创建完 Proxy 后，下面的代码基本上和 Go-Micro 创建一个新的 Server 没有什么区别了。只是这里的 Muxer 这个 router 将会直接绕过 Server 的 router 层，直接将流量转向 Proxy 层，因为 Server 的 router 其实已经没有用了，相当于被 Proxy 劫持了，毕竟这里我们不需要路由到 Server 的具体方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// new service</span></span>
<span class="line"><span style="color:#E1E4E8;">    service </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> micro.</span><span style="color:#B392F0;">NewService</span><span style="color:#E1E4E8;">(srvOpts...)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create a new proxy muxer which includes the debug handler</span></span>
<span class="line"><span style="color:#E1E4E8;">    muxer </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> mux.</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(Name, p)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// set the router</span></span>
<span class="line"><span style="color:#E1E4E8;">    service.</span><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        server.</span><span style="color:#B392F0;">WithRouter</span><span style="color:#E1E4E8;">(muxer),</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Run internal service</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> service.</span><span style="color:#B392F0;">Run</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">Fatal</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// new service</span></span>
<span class="line"><span style="color:#24292E;">    service </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> micro.</span><span style="color:#6F42C1;">NewService</span><span style="color:#24292E;">(srvOpts...)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create a new proxy muxer which includes the debug handler</span></span>
<span class="line"><span style="color:#24292E;">    muxer </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> mux.</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(Name, p)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// set the router</span></span>
<span class="line"><span style="color:#24292E;">    service.</span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        server.</span><span style="color:#6F42C1;">WithRouter</span><span style="color:#24292E;">(muxer),</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Run internal service</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">Run</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">Fatal</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>进入 mux 的代码也可以了解到，这里直接调用了proxy.ServeRequest()：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Server) </span><span style="color:#B392F0;">ServeRequest</span><span style="color:#E1E4E8;">(ctx context.Context, req server.Request, rsp server.Response) error {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> req.</span><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s.Name {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> server.DefaultRouter.</span><span style="color:#B392F0;">ServeRequest</span><span style="color:#E1E4E8;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.Proxy.</span><span style="color:#B392F0;">ServeRequest</span><span style="color:#E1E4E8;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Server) </span><span style="color:#6F42C1;">ServeRequest</span><span style="color:#24292E;">(ctx context.Context, req server.Request, rsp server.Response) error {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> req.</span><span style="color:#6F42C1;">Service</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s.Name {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> server.DefaultRouter.</span><span style="color:#6F42C1;">ServeRequest</span><span style="color:#24292E;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.Proxy.</span><span style="color:#6F42C1;">ServeRequest</span><span style="color:#24292E;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们回顾一下，刚才在创建 Proxy 的时候，同时创建了一个 Server 对象，这个 Server 同时创建了一个 Wrapper，Wrapper 其实就是 Go-Micro 的 Middleware 层。这里我们创建了一个限流的中间件，后面在讲解控制面的时候，还要创建路由和负载均衡中间件。</p><p>我们先通过一个简单的限流中间件学习一下这部分内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> smucp.</span><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                server.</span><span style="color:#B392F0;">WrapHandler</span><span style="color:#E1E4E8;">(ratelimiter.</span><span style="color:#B392F0;">NewHandlerWrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">            )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> smucp.</span><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                server.</span><span style="color:#6F42C1;">WrapHandler</span><span style="color:#24292E;">(ratelimiter.</span><span style="color:#6F42C1;">NewHandlerWrapper</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span></code></pre></div><p>RateLimit 中间件使用了 Uber 的库实现，达到限流值会产生阻塞，而不是返回错误。<strong>在生产中，还是建议使用返回错误的方式实现限流器</strong>，因为产生阻塞可能会进一步恶化并发情况。具体代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// NewHandlerWrapper creates a blocking server side rate limiter</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">NewHandlerWrapper</span><span style="color:#E1E4E8;">(rate </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) server.HandlerWrapper {</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ratelimit.</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(rate)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(h server.HandlerFunc) server.HandlerFunc {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(ctx context.Context, req server.Request, rsp interface{}) error {</span></span>
<span class="line"><span style="color:#E1E4E8;">            r.</span><span style="color:#B392F0;">Take</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// NewHandlerWrapper creates a blocking server side rate limiter</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">NewHandlerWrapper</span><span style="color:#24292E;">(rate </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) server.HandlerWrapper {</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ratelimit.</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(rate)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(h server.HandlerFunc) server.HandlerFunc {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(ctx context.Context, req server.Request, rsp interface{}) error {</span></span>
<span class="line"><span style="color:#24292E;">            r.</span><span style="color:#6F42C1;">Take</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，一个简单的 Sidecar Proxy 的代码实现部分就讲解完了。下面我们编译并启动这个简单的 Sidecar ，来看一下实际的运行效果。</p><p>对代码进行编译并启动：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">go run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">mod</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">vendor .\\main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">go run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">mod</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">vendor .\\main.go</span></span></code></pre></div><p>可以看到下面的启动信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">44.486504</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Proxy</span><span style="color:#E1E4E8;"> [http] serving endpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8083</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">44.490502</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Transport</span><span style="color:#E1E4E8;"> [http] Listening on [</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8082</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">44.502494</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Broker</span><span style="color:#E1E4E8;"> [http] Connected to [</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14393</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">44.695376</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Registry</span><span style="color:#E1E4E8;"> [mdns] Registering node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Client Listener Proxy</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">5512f579</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7eed</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4ef6</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">8c80</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4342650afc2d</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45.497904</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Proxy</span><span style="color:#E1E4E8;"> [http] serving endpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:6060</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45.498903</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Transport</span><span style="color:#E1E4E8;"> [http] Listening on [</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8083</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45.585850</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Broker</span><span style="color:#E1E4E8;"> [http] Connected to [</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14393</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45.758753</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Registry</span><span style="color:#E1E4E8;"> [mdns] Registering node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Server Listener Proxy</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">5512f579</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7eed</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4ef6</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">8c80</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4342650afc2d</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">46.606504</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Registry</span><span style="color:#E1E4E8;"> [mdns] Deregistering node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Client Listener Proxy</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">5512f579</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7eed</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4ef6</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">8c80</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4342650afc2d</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">46.609502</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [proxy] </span><span style="color:#F97583;">Registry</span><span style="color:#E1E4E8;"> [mdns] Deregistering node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Server Listener Proxy</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">5512f579</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7eed</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4ef6</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">8c80</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4342650afc2d</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">44.486504</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Proxy</span><span style="color:#24292E;"> [http] serving endpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8083</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">44.490502</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Transport</span><span style="color:#24292E;"> [http] Listening on [</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8082</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">44.502494</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Broker</span><span style="color:#24292E;"> [http] Connected to [</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14393</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">44.695376</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Registry</span><span style="color:#24292E;"> [mdns] Registering node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Client Listener Proxy</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">5512f579</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7eed</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4ef6</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">8c80</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4342650afc2d</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">45.497904</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Proxy</span><span style="color:#24292E;"> [http] serving endpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:6060</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">45.498903</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Transport</span><span style="color:#24292E;"> [http] Listening on [</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8083</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">45.585850</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Broker</span><span style="color:#24292E;"> [http] Connected to [</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14393</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">45.758753</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Registry</span><span style="color:#24292E;"> [mdns] Registering node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Server Listener Proxy</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">5512f579</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7eed</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4ef6</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">8c80</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4342650afc2d</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">46.606504</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Registry</span><span style="color:#24292E;"> [mdns] Deregistering node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Client Listener Proxy</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">5512f579</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7eed</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4ef6</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">8c80</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4342650afc2d</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">46.609502</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [proxy] </span><span style="color:#D73A49;">Registry</span><span style="color:#24292E;"> [mdns] Deregistering node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Server Listener Proxy</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">5512f579</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7eed</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4ef6</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">8c80</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4342650afc2d</span></span></code></pre></div><p>这里可以看到同时启动了两个端口 8082 和 8083，分别是 Sidecar 处理出流量和入流量的端口，同时有输出了两个 Server 代理的目的地。</p><p>我们先来请求 8083 端口，这个端口会将流量路由到本地的 6060 端口。为了调试，我们的 Sidecar 代码在 6060 端口启动了一个 HTTP 服务器，请求这个 Server 会返回 Hello World 的输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8083</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">StatusCode        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">StatusDescription </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> OK</span></span>
<span class="line"><span style="color:#E1E4E8;">Content           </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hello world</span></span>
<span class="line"><span style="color:#E1E4E8;">RawContent        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> OK</span></span>
<span class="line"><span style="color:#E1E4E8;">                    User</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Agent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Mozilla</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">5.0</span><span style="color:#E1E4E8;"> (Windows NT; Windows NT </span><span style="color:#79B8FF;">10.0</span><span style="color:#E1E4E8;">; zh</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">CN) WindowsPowerShell</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">5.1</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">18362</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1171</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Length</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> text</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">plain; charset</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">utf</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Date</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Sun, </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> Feb </span><span style="color:#79B8FF;">2021</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">2...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8083</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">StatusCode        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">StatusDescription </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> OK</span></span>
<span class="line"><span style="color:#24292E;">Content           </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hello world</span></span>
<span class="line"><span style="color:#24292E;">RawContent        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> OK</span></span>
<span class="line"><span style="color:#24292E;">                    User</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Agent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Mozilla</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">5.0</span><span style="color:#24292E;"> (Windows NT; Windows NT </span><span style="color:#005CC5;">10.0</span><span style="color:#24292E;">; zh</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">CN) WindowsPowerShell</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">5.1</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">18362</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1171</span></span>
<span class="line"><span style="color:#24292E;">                    Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Length</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span></span>
<span class="line"><span style="color:#24292E;">                    Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> text</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">plain; charset</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">utf</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">                    Date</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Sun, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> Feb </span><span style="color:#005CC5;">2021</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">2...</span></span></code></pre></div><p>可以看到这里返回了正常的请求，返回的内容为 Hello World，说明 8083 端口正常处理了代理的请求。为了验证内容返回是否正常，这里我们直接请求 6060 端口，查看返回的信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">6060</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">StatusCode        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">StatusDescription </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> OK</span></span>
<span class="line"><span style="color:#E1E4E8;">Content           </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hello world</span></span>
<span class="line"><span style="color:#E1E4E8;">RawContent        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> OK</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Length</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> text</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">plain; charset</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">utf</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Date</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Sun, </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> Feb </span><span style="color:#79B8FF;">2021</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">27</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;"> GMT</span></span>
<span class="line"><span style="color:#E1E4E8;">                    hello world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">6060</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">StatusCode        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">StatusDescription </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> OK</span></span>
<span class="line"><span style="color:#24292E;">Content           </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hello world</span></span>
<span class="line"><span style="color:#24292E;">RawContent        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> OK</span></span>
<span class="line"><span style="color:#24292E;">                    Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Length</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span></span>
<span class="line"><span style="color:#24292E;">                    Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> text</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">plain; charset</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">utf</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">                    Date</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Sun, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> Feb </span><span style="color:#005CC5;">2021</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">27</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">35</span><span style="color:#24292E;"> GMT</span></span>
<span class="line"><span style="color:#24292E;">                    hello world</span></span></code></pre></div><p>可以看到输出了相同的信息，表示 Sidecar 确实进行了正确的转发。</p><p>下面我们再请求 8082 端口，模拟一下完整的 Mesh 过程。整个过程如下图所示：</p>`,34),i=p(`<p>完整 Mesh 过程示意图</p><p>请求8082端口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8082</span><span style="color:#F97583;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">StatusCode        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">StatusDescription </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> OK</span></span>
<span class="line"><span style="color:#E1E4E8;">Content           </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hello world</span></span>
<span class="line"><span style="color:#E1E4E8;">RawContent        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> OK</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Accept</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Encoding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> gzip</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Connection</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Alive</span></span>
<span class="line"><span style="color:#E1E4E8;">                    User</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Agent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Mozilla</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">5.0</span><span style="color:#E1E4E8;"> (Windows NT; Windows NT </span><span style="color:#79B8FF;">10.0</span><span style="color:#E1E4E8;">; zh</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">CN) WindowsPowerShell</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">5.1</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">18362</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1171</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Length</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> text</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">pl...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8082</span><span style="color:#D73A49;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">StatusCode        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">StatusDescription </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> OK</span></span>
<span class="line"><span style="color:#24292E;">Content           </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hello world</span></span>
<span class="line"><span style="color:#24292E;">RawContent        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> OK</span></span>
<span class="line"><span style="color:#24292E;">                    Accept</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Encoding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> gzip</span></span>
<span class="line"><span style="color:#24292E;">                    Connection</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Alive</span></span>
<span class="line"><span style="color:#24292E;">                    User</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Agent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Mozilla</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">5.0</span><span style="color:#24292E;"> (Windows NT; Windows NT </span><span style="color:#005CC5;">10.0</span><span style="color:#24292E;">; zh</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">CN) WindowsPowerShell</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">5.1</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">18362</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1171</span></span>
<span class="line"><span style="color:#24292E;">                    Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Length</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span></span>
<span class="line"><span style="color:#24292E;">                    Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> text</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">pl...</span></span></code></pre></div><p>这里同样返回了正确的信息。结合上面的图片和代码解析可以发现，这里的流量经由 8082，被转发到了 8083 端口，经历了一个完整的 Mesh 代理过程。从客户端的正向代理，到服务端的反向代理，通过对出流量和入流量进行代理，完整掌控了整个微服务链路的流量。最后将流量转发到了真实的 Service，也就是 6060 端口启动的服务。</p><p>到这里，利用 Go-Micro 实现一个简单的 Sidecar 就完成了。你可以看到，Sidecar 本身就是一个代理程序，而利用 Go-Micro 实现一个 Sidecar 原型也并不复杂，但要做一个生产环境可用的 Sidecar 还有很多工作要完善，比如一些<strong>错误的处理、多种协议的支持、支持复杂的路由和负载均衡策略</strong> ，以及<strong>限流熔断</strong> 等基本的服务治理功能。另外，在复杂的线上流量环境保证<strong>Sidecar 自身的健壮性和稳定性</strong>，也不是一件容易的事情。</p><p>实际上，在 Go 语言中还有另外一种实现 HTTP 代理更简单、更稳定的方法，这里我们也简单做一下介绍。至于为什么没有着重介绍这种方法，而选择采用 Go-Micro 来实现，是因为 Go-Micro 方便扩展多种协议，以及统一的中间件层。</p><p>下面我们结合代码简单介绍一下 Go 原生的代理实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> main</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;log&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;math/rand&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;net/http&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;net/http/httputil&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;net/url&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#FDAEB7;font-style:italic;">N</span><span style="color:#E1E4E8;">ew</span><span style="color:#FDAEB7;font-style:italic;">M</span><span style="color:#E1E4E8;">ultiple</span><span style="color:#FDAEB7;font-style:italic;">H</span><span style="color:#E1E4E8;">osts</span><span style="color:#FDAEB7;font-style:italic;">R</span><span style="color:#E1E4E8;">everse</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">roxy(targets []*url.</span><span style="color:#FDAEB7;font-style:italic;">URL</span><span style="color:#E1E4E8;">) *httputil.</span><span style="color:#FDAEB7;font-style:italic;">R</span><span style="color:#E1E4E8;">everse</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">roxy {</span></span>
<span class="line"><span style="color:#E1E4E8;">        director := func(req *http.</span><span style="color:#FDAEB7;font-style:italic;">R</span><span style="color:#E1E4E8;">equest) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                target := targets[rand.</span><span style="color:#FDAEB7;font-style:italic;">I</span><span style="color:#E1E4E8;">nt()%len(targets)]</span></span>
<span class="line"><span style="color:#E1E4E8;">                req.</span><span style="color:#FDAEB7;font-style:italic;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">S</span><span style="color:#E1E4E8;">cheme = target.</span><span style="color:#FDAEB7;font-style:italic;">S</span><span style="color:#E1E4E8;">cheme</span></span>
<span class="line"><span style="color:#E1E4E8;">                req.</span><span style="color:#FDAEB7;font-style:italic;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">H</span><span style="color:#E1E4E8;">ost = target.</span><span style="color:#FDAEB7;font-style:italic;">H</span><span style="color:#E1E4E8;">ost</span></span>
<span class="line"><span style="color:#E1E4E8;">                req.</span><span style="color:#FDAEB7;font-style:italic;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">ath = target.</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">ath</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> &amp;httputil.</span><span style="color:#FDAEB7;font-style:italic;">R</span><span style="color:#E1E4E8;">everse</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">roxy{</span><span style="color:#FDAEB7;font-style:italic;">D</span><span style="color:#E1E4E8;">irector: director}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">func main() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        proxy := </span><span style="color:#FDAEB7;font-style:italic;">N</span><span style="color:#E1E4E8;">ew</span><span style="color:#FDAEB7;font-style:italic;">M</span><span style="color:#E1E4E8;">ultiple</span><span style="color:#FDAEB7;font-style:italic;">H</span><span style="color:#E1E4E8;">osts</span><span style="color:#FDAEB7;font-style:italic;">R</span><span style="color:#E1E4E8;">everse</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">roxy([]*url.</span><span style="color:#FDAEB7;font-style:italic;">URL</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">                {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#FDAEB7;font-style:italic;">S</span><span style="color:#E1E4E8;">cheme: &quot;http&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#FDAEB7;font-style:italic;">H</span><span style="color:#E1E4E8;">ost:   &quot;localhost:</span><span style="color:#FDAEB7;font-style:italic;">6060</span><span style="color:#E1E4E8;">&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#FDAEB7;font-style:italic;">F</span><span style="color:#E1E4E8;">atal(http.</span><span style="color:#FDAEB7;font-style:italic;">L</span><span style="color:#E1E4E8;">isten</span><span style="color:#FDAEB7;font-style:italic;">A</span><span style="color:#E1E4E8;">nd</span><span style="color:#FDAEB7;font-style:italic;">S</span><span style="color:#E1E4E8;">erve(&quot;:</span><span style="color:#FDAEB7;font-style:italic;">9090</span><span style="color:#E1E4E8;">&quot;, proxy))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> main</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        &quot;log&quot;</span></span>
<span class="line"><span style="color:#24292E;">        &quot;math/rand&quot;</span></span>
<span class="line"><span style="color:#24292E;">        &quot;net/http&quot;</span></span>
<span class="line"><span style="color:#24292E;">        &quot;net/http/httputil&quot;</span></span>
<span class="line"><span style="color:#24292E;">        &quot;net/url&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#B31D28;font-style:italic;">N</span><span style="color:#24292E;">ew</span><span style="color:#B31D28;font-style:italic;">M</span><span style="color:#24292E;">ultiple</span><span style="color:#B31D28;font-style:italic;">H</span><span style="color:#24292E;">osts</span><span style="color:#B31D28;font-style:italic;">R</span><span style="color:#24292E;">everse</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">roxy(targets []*url.</span><span style="color:#B31D28;font-style:italic;">URL</span><span style="color:#24292E;">) *httputil.</span><span style="color:#B31D28;font-style:italic;">R</span><span style="color:#24292E;">everse</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">roxy {</span></span>
<span class="line"><span style="color:#24292E;">        director := func(req *http.</span><span style="color:#B31D28;font-style:italic;">R</span><span style="color:#24292E;">equest) {</span></span>
<span class="line"><span style="color:#24292E;">                target := targets[rand.</span><span style="color:#B31D28;font-style:italic;">I</span><span style="color:#24292E;">nt()%len(targets)]</span></span>
<span class="line"><span style="color:#24292E;">                req.</span><span style="color:#B31D28;font-style:italic;">URL</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">S</span><span style="color:#24292E;">cheme = target.</span><span style="color:#B31D28;font-style:italic;">S</span><span style="color:#24292E;">cheme</span></span>
<span class="line"><span style="color:#24292E;">                req.</span><span style="color:#B31D28;font-style:italic;">URL</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">H</span><span style="color:#24292E;">ost = target.</span><span style="color:#B31D28;font-style:italic;">H</span><span style="color:#24292E;">ost</span></span>
<span class="line"><span style="color:#24292E;">                req.</span><span style="color:#B31D28;font-style:italic;">URL</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">ath = target.</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">ath</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> &amp;httputil.</span><span style="color:#B31D28;font-style:italic;">R</span><span style="color:#24292E;">everse</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">roxy{</span><span style="color:#B31D28;font-style:italic;">D</span><span style="color:#24292E;">irector: director}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">func main() {</span></span>
<span class="line"><span style="color:#24292E;">        proxy := </span><span style="color:#B31D28;font-style:italic;">N</span><span style="color:#24292E;">ew</span><span style="color:#B31D28;font-style:italic;">M</span><span style="color:#24292E;">ultiple</span><span style="color:#B31D28;font-style:italic;">H</span><span style="color:#24292E;">osts</span><span style="color:#B31D28;font-style:italic;">R</span><span style="color:#24292E;">everse</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">roxy([]*url.</span><span style="color:#B31D28;font-style:italic;">URL</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#B31D28;font-style:italic;">S</span><span style="color:#24292E;">cheme: &quot;http&quot;,</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#B31D28;font-style:italic;">H</span><span style="color:#24292E;">ost:   &quot;localhost:</span><span style="color:#B31D28;font-style:italic;">6060</span><span style="color:#24292E;">&quot;,</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#B31D28;font-style:italic;">F</span><span style="color:#24292E;">atal(http.</span><span style="color:#B31D28;font-style:italic;">L</span><span style="color:#24292E;">isten</span><span style="color:#B31D28;font-style:italic;">A</span><span style="color:#24292E;">nd</span><span style="color:#B31D28;font-style:italic;">S</span><span style="color:#24292E;">erve(&quot;:</span><span style="color:#B31D28;font-style:italic;">9090</span><span style="color:#24292E;">&quot;, proxy))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，Golang 本身提供了 ReverseProxy 的对象。直接创建这个对象，并传入 HTTP Server，就可以实现一个简单的 HTTP Proxy 功能。对于 HTTP 服务来说，这个 Proxy 实现比 Go-Micro 的实现相对高效，它并没有创建 HTTP Client，而是直接利用了更底层的 HTTP Transport 进行流量的转发，有兴趣的同学也可以直接去查看 Golang 的源码（<a href="https://github.com/golang/go/blob/master/src/net/http/httputil/reverseproxy.go" target="_blank" rel="noreferrer">https://github.com/golang/go/blob/master/src/net/http/httputil/reverseproxy.go</a>）。</p><p>整个 Sidecar 的代码实现和讲解到这里就结束了，下面我们做一个简单的总结。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>今天我们主要了解了 Sidecar 的代码实现，通过代码层的讲解，相信你已经了解 Sidecar 的底层原理和 Proxy 的实现原理。此外，我们通过手动运行 Demo 程序，清晰展示了整个 Mesh 数据面的运行过程，并利用这个最小化的运行环境，深入了解了 Mesh 数据面的架构。相信较于 Istio 的实战部分，今天的内容会帮助你对整个 Mesh 数据面有一个更清晰的认知。</p><p>本讲内容总结如下：</p>`,13),F=l("p",null,"结合今天内容的讲解，如果让你研发一个 Mesh 的数据面，你会用什么语言和框架呢。欢迎在留言区和我分享你的观点。",-1),d=l("p",null,"今天的内容到这里就结束了，下一讲我们开始讲解控制面：实现 xDS 配置管理。下一讲我会实现 Service Mesh 的控制面，并将本讲实现的 Sidecar 和控制面进行通信，用于展示完整的 Service Mesh 过程。我们下一讲再见。",-1);function D(C,A,u,h,B,g){const s=e("Image");return t(),r("div",null,[y,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/07/7C/Cgp9HWAzh5aAdgqCAAGppXYgA2M543.png"}),a(),E,n(s,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/08/FF/CioPOWA1hs6AX1jDAAB6NkWYyhA014.png"}),a(),i,n(s,{alt:"金句.png",src:"https://s0.lgstatic.com/i/image6/M00/09/02/Cgp9HWA1hrWAMQuCAAGBGu1j9ok772.png"}),a(),F,d])}const x=o(c,[["render",D]]);export{f as __pageData,x as default};
