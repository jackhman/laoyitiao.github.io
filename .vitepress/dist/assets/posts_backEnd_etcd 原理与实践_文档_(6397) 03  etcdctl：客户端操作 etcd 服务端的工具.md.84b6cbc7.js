import{_ as o,j as e,o as t,h as c,k as a,f as n,Q as l,s as p}from"./chunks/framework.d3daa342.js";const k=JSON.parse('{"title":"03etcdctl：客户端操作etcd服务端的工具","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6397) 03  etcdctl：客户端操作 etcd 服务端的工具.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6397) 03  etcdctl：客户端操作 etcd 服务端的工具.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6397) 03  etcdctl：客户端操作 etcd 服务端的工具.md"},E=l(`<h1 id="_03etcdctl-客户端操作etcd服务端的工具" tabindex="-1">03etcdctl：客户端操作etcd服务端的工具 <a class="header-anchor" href="#_03etcdctl-客户端操作etcd服务端的工具" aria-label="Permalink to &quot;03etcdctl：客户端操作etcd服务端的工具&quot;">​</a></h1><p>上一讲我们介绍了 etcd 的几种安装部署方式以及 TLS 安全加密等知识点。安装好 etcd 后，我们将开始体验如何使用 etcd。这一讲，我将会基于 etcd 自带的客户端工具------etcdctl 来演示 etcd 常用的一些操作，帮助你快速入手 etcd。</p><h3 id="etcdctl-客户端" tabindex="-1">etcdctl 客户端 <a class="header-anchor" href="#etcdctl-客户端" aria-label="Permalink to &quot;etcdctl 客户端&quot;">​</a></h3><p>etcdctl 是一个命令行客户端，便于我们进行<strong>服务测试或手动修改数据库内容</strong>，我们刚开始熟悉 etcd 功能时可以通过 etdctl 客户端熟悉相关操作。etcdctl 在两个不同的 etcd 版本（v2 和 v3）下的功能和使用方式也完全不同。一般通过如下方式来指定使用 etcd 的版本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export ETCDCTL_API</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">export ETCDCTL_API</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export ETCDCTL_API</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">export ETCDCTL_API</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span></span></code></pre></div><p>我们的专栏课程主要讲解 API 3。etcd 项目二进制发行包中已经包含了 etcdctl 工具，通过 etcd 安装包中的 etcdctl 可执行文件可以进行调用。下面我们先来看看 etcd 的常用命令有哪些，并进行实践应用。</p><h3 id="常用命令介绍" tabindex="-1">常用命令介绍 <a class="header-anchor" href="#常用命令介绍" aria-label="Permalink to &quot;常用命令介绍&quot;">​</a></h3><p>我们首先来看下 etcdctl 支持哪些命令，通过<code>etcdctl -h</code>命令查看：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">h</span></span>
<span class="line"><span style="color:#E1E4E8;">NAME</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	etcdctl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> A simple command line client </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> etcd3.</span></span>
<span class="line"><span style="color:#E1E4E8;">USAGE</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	etcdctl [flags]</span></span>
<span class="line"><span style="color:#E1E4E8;">VERSION</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">3.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">API VERSION</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">3.4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">h</span></span>
<span class="line"><span style="color:#24292E;">NAME</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">	etcdctl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> A simple command line client </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> etcd3.</span></span>
<span class="line"><span style="color:#24292E;">USAGE</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">	etcdctl [flags]</span></span>
<span class="line"><span style="color:#24292E;">VERSION</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">3.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">4</span></span>
<span class="line"><span style="color:#24292E;">API VERSION</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">3.4</span></span></code></pre></div><p>COMMANDS:</p>`,10),y=p("p",null,"OPTIONS:",-1),i=l(`<p>etcdctl 支持的命令大体上分为<strong>数据库操作和非数据库操作</strong>两类。其中数据库的操作命令是最常用的命令，我们将在下面具体介绍。其他的命令如用户、角色、授权、认证相关，你可以根据语法自己尝试一下。</p><h3 id="数据库操作" tabindex="-1">数据库操作 <a class="header-anchor" href="#数据库操作" aria-label="Permalink to &quot;数据库操作&quot;">​</a></h3><p>数据库操作基本围绕着对键值和目录的 CRUD 操作（即增删改查），及其对应的生命周期管理。我们上手这些操作其实很方便，因为这些操作是符合 REST 风格的一套 API 操作。</p><p>etcd 在键的组织上采用了类似文件系统中目录的概念，即<strong>层次化的空间结构</strong> ，我们指定的键可以作为键名，如：testkey，实际上，此时键值对放于根目录 / 下面。我们也可以为键的存储<strong>指定目录结构</strong>，如 /cluster/node/key；如果不存在 /cluster/node 目录，则 etcd Server 将会创建相应的目录结构。</p><p>下面我们基于键操作、watch、lease 三类分别介绍 etcdctl 的使用与实践。</p><h4 id="键操作" tabindex="-1">键操作 <a class="header-anchor" href="#键操作" aria-label="Permalink to &quot;键操作&quot;">​</a></h4><p>键操作包括最常用的增删改查操作，包括 PUT、GET、DELETE 等命令。</p><p><strong>PUT 设置或者更新某个键的值</strong>。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl put </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo1 </span><span style="color:#9ECBFF;">&quot;Hello world&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl put </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo2 </span><span style="color:#9ECBFF;">&quot;Hello world2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl put </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo3 </span><span style="color:#9ECBFF;">&quot;Hello world3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl put </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo1 </span><span style="color:#032F62;">&quot;Hello world&quot;</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl put </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo2 </span><span style="color:#032F62;">&quot;Hello world2&quot;</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl put </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo3 </span><span style="color:#032F62;">&quot;Hello world3&quot;</span></span></code></pre></div><p>成功写入三对键值，/test/foo1、/test/foo2 和 /test/foo3。</p><p><strong>GET 获取指定键的值</strong>。例如获取 /testdir/testkey 对应的值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">testdir</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">testkey</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">testdir</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">testkey</span></span>
<span class="line"><span style="color:#24292E;">Hello world</span></span></code></pre></div><p>除此之外， etcdctl 的 GET 命令还提供了根据指定的键（key），获取其对应的十六进制格式值，即以十六进制格式返回：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo1 </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">hex</span></span>
<span class="line"><span style="color:#E1E4E8;">\\x2f\\x74\\x65\\x73\\x74\\x64\\x69\\x72\\x2f\\x74\\x65\\x73\\x74\\x6b\\x65\\x79 #键</span></span>
<span class="line"><span style="color:#E1E4E8;">\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64 #值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo1 </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">hex</span></span>
<span class="line"><span style="color:#24292E;">\\x2f\\x74\\x65\\x73\\x74\\x64\\x69\\x72\\x2f\\x74\\x65\\x73\\x74\\x6b\\x65\\x79 #键</span></span>
<span class="line"><span style="color:#24292E;">\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64 #值</span></span></code></pre></div><p>加上<code>--print-value-only</code>可以读取对应的值。十六进制在 etcd 中有多处使用，如<strong>租约 ID</strong>也是十六进制。</p><p>GET 范围内的值：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/test/foo1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/test/foo3</span></span>
<span class="line"><span style="color:#B392F0;">/test/foo1</span></span>
<span class="line"><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world</span></span>
<span class="line"><span style="color:#B392F0;">/test/foo2</span></span>
<span class="line"><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/test/foo1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/test/foo3</span></span>
<span class="line"><span style="color:#6F42C1;">/test/foo1</span></span>
<span class="line"><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">world</span></span>
<span class="line"><span style="color:#6F42C1;">/test/foo2</span></span>
<span class="line"><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">world2</span></span></code></pre></div><p>可以看到，上述操作获取了大于等于 /test/foo1，且小于 /test/foo3 的键值对。foo3 不在范围之内，因为范围是半开区间 [foo1, foo3)，不包含 foo3。</p><p>获取某个前缀的所有键值对，通过 --prefix 可以指定前缀：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prefix </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo1</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello world</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo2</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello world2</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo3</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello world3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prefix </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo1</span></span>
<span class="line"><span style="color:#24292E;">Hello world</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo2</span></span>
<span class="line"><span style="color:#24292E;">Hello world2</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo3</span></span>
<span class="line"><span style="color:#24292E;">Hello world3</span></span></code></pre></div><p>这样就能获取所有以 /test/foo 开头的键值对，当前缀获取的结果过多时，还可以通过 --limit=2 限制获取的数量：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prefix </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">limit</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prefix </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">limit</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo</span></span></code></pre></div><p>读取键过往版本的值，应用可能想读取键的被替代的值。</p><p>例如，应用可能想<strong>通过访问键的过往版本回滚到旧的配置</strong> 。或者，应用可能想<strong>通过多个请求得到一个覆盖多个键的统一视图</strong>，而这些请求可以通过访问键历史记录而来。因为 etcd 集群上键值存储的每个修改都会增加 etcd 集群的全局修订版本，应用可以通过提供旧有的 etcd 修改版本来读取被替代的键。现有如下键值对：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bar         # revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">foo1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bar2       # revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bar_new     # revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">foo1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bar1_new   # revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar         # revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">foo1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar2       # revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar_new     # revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">foo1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar1_new   # revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span></code></pre></div><p>以下是访问以前版本 key 的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prefix foo # 访问最新版本的 key</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar_new</span></span>
<span class="line"><span style="color:#E1E4E8;">foo1</span></span>
<span class="line"><span style="color:#E1E4E8;">bar1_new</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prefix </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rev</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> foo # 访问第 </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> 个版本的 key</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar_new</span></span>
<span class="line"><span style="color:#E1E4E8;">foo1</span></span>
<span class="line"><span style="color:#E1E4E8;">bar1</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prefix </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rev</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> foo #  访问第 </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> 个版本的 key</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar</span></span>
<span class="line"><span style="color:#E1E4E8;">foo1</span></span>
<span class="line"><span style="color:#E1E4E8;">bar1</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prefix </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rev</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> foo #  访问第 </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> 个版本的 key</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prefix </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rev</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> foo #  访问第 </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> 个版本的 key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prefix foo # 访问最新版本的 key</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar_new</span></span>
<span class="line"><span style="color:#24292E;">foo1</span></span>
<span class="line"><span style="color:#24292E;">bar1_new</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prefix </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rev</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> foo # 访问第 </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> 个版本的 key</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar_new</span></span>
<span class="line"><span style="color:#24292E;">foo1</span></span>
<span class="line"><span style="color:#24292E;">bar1</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prefix </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rev</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> foo #  访问第 </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> 个版本的 key</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar</span></span>
<span class="line"><span style="color:#24292E;">foo1</span></span>
<span class="line"><span style="color:#24292E;">bar1</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prefix </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rev</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> foo #  访问第 </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> 个版本的 key</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prefix </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rev</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> foo #  访问第 </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> 个版本的 key</span></span></code></pre></div><p>应用可能想读取大于等于指定键的 byte 值的键。假设 etcd 集群已经有如下列键：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span></span>
<span class="line"><span style="color:#E1E4E8;">b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">456</span></span>
<span class="line"><span style="color:#E1E4E8;">z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">789</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">456</span></span>
<span class="line"><span style="color:#24292E;">z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">789</span></span></code></pre></div><p>读取大于等于键 b 的 byte 值的键的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">from</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">key b</span></span>
<span class="line"><span style="color:#E1E4E8;">b</span></span>
<span class="line"><span style="color:#79B8FF;">456</span></span>
<span class="line"><span style="color:#E1E4E8;">z</span></span>
<span class="line"><span style="color:#79B8FF;">789</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">from</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">key b</span></span>
<span class="line"><span style="color:#24292E;">b</span></span>
<span class="line"><span style="color:#005CC5;">456</span></span>
<span class="line"><span style="color:#24292E;">z</span></span>
<span class="line"><span style="color:#005CC5;">789</span></span></code></pre></div><p><strong>DELETE 键，应用可以从 etcd 集群中删除一个键或者特定范围的键</strong>。</p><p>假设 etcd 集群已经有下列键：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bar</span></span>
<span class="line"><span style="color:#E1E4E8;">foo1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bar1</span></span>
<span class="line"><span style="color:#E1E4E8;">foo3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bar3</span></span>
<span class="line"><span style="color:#E1E4E8;">zoo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#E1E4E8;">zoo1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val1</span></span>
<span class="line"><span style="color:#E1E4E8;">zoo2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val2</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span></span>
<span class="line"><span style="color:#E1E4E8;">b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">456</span></span>
<span class="line"><span style="color:#E1E4E8;">z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">789</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar</span></span>
<span class="line"><span style="color:#24292E;">foo1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar1</span></span>
<span class="line"><span style="color:#24292E;">foo3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar3</span></span>
<span class="line"><span style="color:#24292E;">zoo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val</span></span>
<span class="line"><span style="color:#24292E;">zoo1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val1</span></span>
<span class="line"><span style="color:#24292E;">zoo2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val2</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">456</span></span>
<span class="line"><span style="color:#24292E;">z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">789</span></span></code></pre></div><p>删除键 foo 的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl del foo</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> # 删除了一个键</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl del foo</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> # 删除了一个键</span></span></code></pre></div><p>删除从 foo 到 foo9 范围的键的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl del foo foo9</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> # 删除了两个键</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl del foo foo9</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> # 删除了两个键</span></span></code></pre></div><p>删除键 zoo 并返回被删除的键值对的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl del </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prev</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">kv zoo</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">   # 一个键被删除</span></span>
<span class="line"><span style="color:#E1E4E8;">zoo # 被删除的键</span></span>
<span class="line"><span style="color:#E1E4E8;">val # 被删除的键的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl del </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prev</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">kv zoo</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">   # 一个键被删除</span></span>
<span class="line"><span style="color:#24292E;">zoo # 被删除的键</span></span>
<span class="line"><span style="color:#24292E;">val # 被删除的键的值</span></span></code></pre></div><p>删除前缀为 zoo 的键的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl del </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prefix zoo</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> # 删除了两个键</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl del </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prefix zoo</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> # 删除了两个键</span></span></code></pre></div><p>删除大于等于键 b 的 byte 值的键的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl del </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">from</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">key b</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> # 删除了两个键</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl del </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">from</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">key b</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> # 删除了两个键</span></span></code></pre></div><h4 id="watch-键值对的改动" tabindex="-1">watch 键值对的改动 <a class="header-anchor" href="#watch-键值对的改动" aria-label="Permalink to &quot;watch 键值对的改动&quot;">​</a></h4><p>etcd 的 watch 功能是一个常用的功能，我们来看看通过 etcdctl 如何实现 watch 指定的键值对。</p><p>watch 监测一个键值的变化，一旦<strong>键值发生更新，就会输出最新的值并退出</strong>。例如：用户更新 testkey 键值为 Hello watch。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl watch testkey</span></span>
<span class="line"><span style="color:#E1E4E8;"># 在另外一个终端</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> etcdctl put testkey Hello watch</span></span>
<span class="line"><span style="color:#E1E4E8;">testkey</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello watch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl watch testkey</span></span>
<span class="line"><span style="color:#24292E;"># 在另外一个终端</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> etcdctl put testkey Hello watch</span></span>
<span class="line"><span style="color:#24292E;">testkey</span></span>
<span class="line"><span style="color:#24292E;">Hello watch</span></span></code></pre></div><p>从 foo to foo9 范围内键的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl watch foo foo9</span></span>
<span class="line"><span style="color:#E1E4E8;"># 在另外一个终端</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> etcdctl put foo bar</span></span>
<span class="line"><span style="color:#E1E4E8;">PUT</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar</span></span>
<span class="line"><span style="color:#E1E4E8;"># 在另外一个终端</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> etcdctl put foo1 bar1</span></span>
<span class="line"><span style="color:#E1E4E8;">PUT</span></span>
<span class="line"><span style="color:#E1E4E8;">foo1</span></span>
<span class="line"><span style="color:#E1E4E8;">bar1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl watch foo foo9</span></span>
<span class="line"><span style="color:#24292E;"># 在另外一个终端</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> etcdctl put foo bar</span></span>
<span class="line"><span style="color:#24292E;">PUT</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar</span></span>
<span class="line"><span style="color:#24292E;"># 在另外一个终端</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> etcdctl put foo1 bar1</span></span>
<span class="line"><span style="color:#24292E;">PUT</span></span>
<span class="line"><span style="color:#24292E;">foo1</span></span>
<span class="line"><span style="color:#24292E;">bar1</span></span></code></pre></div><p>以 16 进制格式在键 foo 上进行观察的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl watch foo </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">hex</span></span>
<span class="line"><span style="color:#E1E4E8;"># 在另外一个终端</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> etcdctl put foo bar</span></span>
<span class="line"><span style="color:#E1E4E8;">PUT</span></span>
<span class="line"><span style="color:#E1E4E8;">\\x66\\x6f\\x6f          # 键</span></span>
<span class="line"><span style="color:#E1E4E8;">\\x62\\x61\\x72          # 值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl watch foo </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">hex</span></span>
<span class="line"><span style="color:#24292E;"># 在另外一个终端</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> etcdctl put foo bar</span></span>
<span class="line"><span style="color:#24292E;">PUT</span></span>
<span class="line"><span style="color:#24292E;">\\x66\\x6f\\x6f          # 键</span></span>
<span class="line"><span style="color:#24292E;">\\x62\\x61\\x72          # 值</span></span></code></pre></div><p>观察多个键 foo 和 zoo 的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl watch </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i</span></span>
<span class="line"><span style="color:#E1E4E8;">$ watch foo</span></span>
<span class="line"><span style="color:#E1E4E8;">$ watch zoo</span></span>
<span class="line"><span style="color:#E1E4E8;"># 在另外一个终端</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> etcdctl put foo bar</span></span>
<span class="line"><span style="color:#E1E4E8;">PUT</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar</span></span>
<span class="line"><span style="color:#E1E4E8;"># 在另外一个终端</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> etcdctl put zoo val</span></span>
<span class="line"><span style="color:#E1E4E8;">PUT</span></span>
<span class="line"><span style="color:#E1E4E8;">zoo</span></span>
<span class="line"><span style="color:#E1E4E8;">val</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl watch </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i</span></span>
<span class="line"><span style="color:#24292E;">$ watch foo</span></span>
<span class="line"><span style="color:#24292E;">$ watch zoo</span></span>
<span class="line"><span style="color:#24292E;"># 在另外一个终端</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> etcdctl put foo bar</span></span>
<span class="line"><span style="color:#24292E;">PUT</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar</span></span>
<span class="line"><span style="color:#24292E;"># 在另外一个终端</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> etcdctl put zoo val</span></span>
<span class="line"><span style="color:#24292E;">PUT</span></span>
<span class="line"><span style="color:#24292E;">zoo</span></span>
<span class="line"><span style="color:#24292E;">val</span></span></code></pre></div><p>查看 key 的历史改动，应用可能想观察 etcd 中键的历史改动。</p><p>例如，应用服务想要获取某个键的所有修改。如果应用客户端一直与 etcd 服务端保持连接，使用 watch 命令就能够实现了。但是当应用或者 etcd 实例出现异常，该键的改动可能发生在出错期间，这样导致了应用客户端没能实时接收这个更新。因此，<strong>应用客户端必须观察键的历史变动</strong>，为了做到这点，应用客户端可以在观察时指定一个历史修订版本。</p><p>首先我们需要完成下述序列的操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl put foo bar         # revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">OK</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl put foo1 bar1       # revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">OK</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl put foo bar_new     # revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">OK</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl put foo1 bar1_new   # revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">OK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl put foo bar         # revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">OK</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl put foo1 bar1       # revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">OK</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl put foo bar_new     # revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">OK</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl put foo1 bar1_new   # revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">OK</span></span></code></pre></div><p>观察历史改动：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 从修订版本 </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> 开始观察键 \`foo\` 的改动</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl watch </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rev</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> foo</span></span>
<span class="line"><span style="color:#E1E4E8;">PUT</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar</span></span>
<span class="line"><span style="color:#E1E4E8;">PUT</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar_new</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 从修订版本 </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> 开始观察键 \`foo\` 的改动</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl watch </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rev</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> foo</span></span>
<span class="line"><span style="color:#24292E;">PUT</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar</span></span>
<span class="line"><span style="color:#24292E;">PUT</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar_new</span></span></code></pre></div><p>从上一次历史修改开始观察：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 在键 \`foo\` 上观察变更并返回被修改的值和上个修订版本的值</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl watch </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">prev</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">kv foo</span></span>
<span class="line"><span style="color:#E1E4E8;"># 在另外一个终端</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> etcdctl put foo bar_latest</span></span>
<span class="line"><span style="color:#E1E4E8;">PUT</span></span>
<span class="line"><span style="color:#E1E4E8;">foo         # 键</span></span>
<span class="line"><span style="color:#E1E4E8;">bar_new     # 在修改前键 foo 的上一个值</span></span>
<span class="line"><span style="color:#E1E4E8;">foo         # 键</span></span>
<span class="line"><span style="color:#E1E4E8;">bar_latest  # 修改后键 foo 的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 在键 \`foo\` 上观察变更并返回被修改的值和上个修订版本的值</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl watch </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">prev</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">kv foo</span></span>
<span class="line"><span style="color:#24292E;"># 在另外一个终端</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> etcdctl put foo bar_latest</span></span>
<span class="line"><span style="color:#24292E;">PUT</span></span>
<span class="line"><span style="color:#24292E;">foo         # 键</span></span>
<span class="line"><span style="color:#24292E;">bar_new     # 在修改前键 foo 的上一个值</span></span>
<span class="line"><span style="color:#24292E;">foo         # 键</span></span>
<span class="line"><span style="color:#24292E;">bar_latest  # 修改后键 foo 的值</span></span></code></pre></div><p>压缩修订版本。</p><p>参照上述内容，etcd 保存修订版本以便应用客户端可以读取键的历史版本。但是，为了避免积累无限数量的历史数据，需要对历史的修订版本进行压缩。<strong>经过压缩，etcd 删除历史修订版本，释放存储空间，且在压缩修订版本之前的数据将不可访问</strong>。</p><p>下述命令实现了压缩修订版本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl compact </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">compacted revision </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> #在压缩修订版本之前的任何修订版本都不可访问</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rev</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> foo</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;level&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;warn&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;2020-05-04T16:37:38.020+0800&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;caller&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;clientv3/retry_interceptor.go:62&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;retrying of unary invoker failed&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;target&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;endpoint://client-c0d35565-0584-4c07-bfeb-034773278656/127.0.0.1:2379&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;attempt&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;rpc error: code = OutOfRange desc = etcdserver: mvcc: required revision has been compacted&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Error</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> etcdserver</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mvcc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> required revision has been compacted</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl compact </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">compacted revision </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> #在压缩修订版本之前的任何修订版本都不可访问</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rev</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> foo</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;level&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;warn&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;2020-05-04T16:37:38.020+0800&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;caller&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;clientv3/retry_interceptor.go:62&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;retrying of unary invoker failed&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;target&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;endpoint://client-c0d35565-0584-4c07-bfeb-034773278656/127.0.0.1:2379&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;attempt&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;rpc error: code = OutOfRange desc = etcdserver: mvcc: required revision has been compacted&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Error</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> etcdserver</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mvcc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> required revision has been compacted</span></span></code></pre></div><h4 id="lease-租约" tabindex="-1">lease（租约） <a class="header-anchor" href="#lease-租约" aria-label="Permalink to &quot;lease（租约）&quot;">​</a></h4><p>lease 意为租约，类似于 Redis 中的 TTL(Time To Live)。etcd 中的键值对可以绑定到租约上，实现<strong>存活周期控制</strong>。在实际应用中，常用来实现服务的心跳，即服务在启动时获取租约，将租约与服务地址绑定，并写入 etcd 服务器，为了保持心跳状态，服务会定时刷新租约。</p><p><strong>授予租约</strong></p><p>应用客户端可以为 etcd 集群里面的键授予租约。当键被附加到租约时，它的存活时间被绑定到租约的存活时间，而租约的存活时间相应的被 TTL 管理。在授予租约时，每个租约的最小 TTL 值由应用客户端指定。<strong>一旦租约的 TTL 到期，租约就会过期并且所有附带的键都将被删除</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 授予租约，TTL 为 </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> 秒</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl lease grant </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">lease 694d71ddacfda227 granted with </span><span style="color:#B392F0;">TTL</span><span style="color:#E1E4E8;">(10s)</span></span>
<span class="line"><span style="color:#E1E4E8;"># 附加键 foo 到租约 694d71ddacfda227</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl put </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">lease</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">694d71ddacfda227 foo10 bar</span></span>
<span class="line"><span style="color:#E1E4E8;">OK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 授予租约，TTL 为 </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> 秒</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl lease grant </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">lease 694d71ddacfda227 granted with </span><span style="color:#6F42C1;">TTL</span><span style="color:#24292E;">(10s)</span></span>
<span class="line"><span style="color:#24292E;"># 附加键 foo 到租约 694d71ddacfda227</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl put </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">lease</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">694d71ddacfda227 foo10 bar</span></span>
<span class="line"><span style="color:#24292E;">OK</span></span></code></pre></div><p>在实际的操作中，<strong>建议 TTL 时间设置久一点</strong>，避免来不及操作而出现如下错误：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">&quot;level&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#B392F0;">&quot;warn&quot;</span><span style="color:#B392F0;">,</span><span style="color:#B392F0;">&quot;ts&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#B392F0;">&quot;2020-12-04T17:12:27.957+0800&quot;</span><span style="color:#B392F0;">,</span><span style="color:#B392F0;">&quot;caller&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#B392F0;">&quot;clientv3/retry_interceptor.go:62&quot;</span><span style="color:#B392F0;">,</span><span style="color:#B392F0;">&quot;msg&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#B392F0;">&quot;retrying of unary invoker failed&quot;</span><span style="color:#B392F0;">,</span><span style="color:#B392F0;">&quot;target&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#B392F0;">&quot;endpoint://client-f87e9b9e-a583-453b-8781-325f2984cef0/127.0.0.1:2379&quot;</span><span style="color:#B392F0;">,</span><span style="color:#B392F0;">&quot;attempt&quot;</span><span style="color:#B392F0;">:0,</span><span style="color:#B392F0;">&quot;error&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#B392F0;">&quot;rpc error: code = NotFound desc = etcdserver: requested lease not found&quot;</span><span style="color:#B392F0;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#6F42C1;">&quot;level&quot;</span><span style="color:#005CC5;">:</span><span style="color:#6F42C1;">&quot;warn&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#6F42C1;">&quot;ts&quot;</span><span style="color:#005CC5;">:</span><span style="color:#6F42C1;">&quot;2020-12-04T17:12:27.957+0800&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#6F42C1;">&quot;caller&quot;</span><span style="color:#005CC5;">:</span><span style="color:#6F42C1;">&quot;clientv3/retry_interceptor.go:62&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#6F42C1;">&quot;msg&quot;</span><span style="color:#005CC5;">:</span><span style="color:#6F42C1;">&quot;retrying of unary invoker failed&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#6F42C1;">&quot;target&quot;</span><span style="color:#005CC5;">:</span><span style="color:#6F42C1;">&quot;endpoint://client-f87e9b9e-a583-453b-8781-325f2984cef0/127.0.0.1:2379&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#6F42C1;">&quot;attempt&quot;</span><span style="color:#6F42C1;">:0,</span><span style="color:#6F42C1;">&quot;error&quot;</span><span style="color:#005CC5;">:</span><span style="color:#6F42C1;">&quot;rpc error: code = NotFound desc = etcdserver: requested lease not found&quot;</span><span style="color:#6F42C1;">}</span></span></code></pre></div><p><strong>撤销租约</strong></p><p>应用通过租约 ID 可以撤销租约。撤销租约将删除所有附带的 key。</p><p>我们进行下列操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl lease revoke 694d71ddacfda227</span></span>
<span class="line"><span style="color:#E1E4E8;">lease 694d71ddacfda227 revoked</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get foo10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl lease revoke 694d71ddacfda227</span></span>
<span class="line"><span style="color:#24292E;">lease 694d71ddacfda227 revoked</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get foo10</span></span></code></pre></div><p><strong>刷新租期</strong></p><p>应用程序可以通过刷新其 TTL 保持租约存活，因此不会过期。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl lease keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive 694d71ddacfda227</span></span>
<span class="line"><span style="color:#E1E4E8;">lease 694d71ddacfda227 keepalived with </span><span style="color:#B392F0;">TTL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">lease 694d71ddacfda227 keepalived with </span><span style="color:#B392F0;">TTL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl lease keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive 694d71ddacfda227</span></span>
<span class="line"><span style="color:#24292E;">lease 694d71ddacfda227 keepalived with </span><span style="color:#6F42C1;">TTL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">lease 694d71ddacfda227 keepalived with </span><span style="color:#6F42C1;">TTL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><p><strong>查询租期</strong></p><p>应用客户端可以查询租赁信息，检查续订或租赁的状态，是否存在或者是否已过期。应用客户端还可以查询特定租约绑定的 key。</p><p>我们进行下述操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl lease grant </span><span style="color:#79B8FF;">300</span></span>
<span class="line"><span style="color:#E1E4E8;">lease 694d71ddacfda22c granted with </span><span style="color:#B392F0;">TTL</span><span style="color:#E1E4E8;">(300s)</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl put </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">lease</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">694d71ddacfda22c foo10 bar</span></span>
<span class="line"><span style="color:#E1E4E8;">OK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl lease grant </span><span style="color:#005CC5;">300</span></span>
<span class="line"><span style="color:#24292E;">lease 694d71ddacfda22c granted with </span><span style="color:#6F42C1;">TTL</span><span style="color:#24292E;">(300s)</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl put </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">lease</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">694d71ddacfda22c foo10 bar</span></span>
<span class="line"><span style="color:#24292E;">OK</span></span></code></pre></div><p>获取有关租赁信息以及哪些 key 绑定了租赁信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl lease timetolive 694d71ddacfda22c</span></span>
<span class="line"><span style="color:#E1E4E8;">lease 694d71ddacfda22c granted with </span><span style="color:#B392F0;">TTL</span><span style="color:#E1E4E8;">(300s), </span><span style="color:#B392F0;">remaining</span><span style="color:#E1E4E8;">(282s)</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl lease timetolive </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">keys 694d71ddacfda22c</span></span>
<span class="line"><span style="color:#E1E4E8;">lease 694d71ddacfda22c granted with </span><span style="color:#B392F0;">TTL</span><span style="color:#E1E4E8;">(300s), </span><span style="color:#B392F0;">remaining</span><span style="color:#E1E4E8;">(220s), attached </span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">([foo10])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl lease timetolive 694d71ddacfda22c</span></span>
<span class="line"><span style="color:#24292E;">lease 694d71ddacfda22c granted with </span><span style="color:#6F42C1;">TTL</span><span style="color:#24292E;">(300s), </span><span style="color:#6F42C1;">remaining</span><span style="color:#24292E;">(282s)</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl lease timetolive </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">keys 694d71ddacfda22c</span></span>
<span class="line"><span style="color:#24292E;">lease 694d71ddacfda22c granted with </span><span style="color:#6F42C1;">TTL</span><span style="color:#24292E;">(300s), </span><span style="color:#6F42C1;">remaining</span><span style="color:#24292E;">(220s), attached </span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">([foo10])</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了 etcdctl 相关命令的说明以及数据库命令的使用实践。etcdctl 为用户提供一些简洁的命令，用户通过 etcdctl 可以直接与 etcd 服务端交互。etcdctl 客户端提供的操作与 HTTP API 基本上是对应的，甚至可以替代 HTTP API 的方式。通过 etcdctl 客户端工具的学习，对于我们快速熟悉 etcd 组件的功能和入门使用非常有帮助。</p><p>本讲内容如下：</p>`,89),d=p("p",null,"学完这一讲内容，想必你对 etcd 的常用功能已经有了一个整体的了解，但是如果在 etcd 集群信息变更的情况下，etcdctl 如何稳定地访问 etcd 服务实例，非 gRPC 客户端又该如何访问 etcd 服务端呢？这也是我们下一讲的主要内容，希望你能提前思考，也欢迎你在留言区和我交流，我们下一讲再见。",-1);function v(u,F,g,h,f,C){const s=e("Image");return t(),c("div",null,[E,a(s,{alt:"Lark20210201-172927.png",src:"https://s0.lgstatic.com/i/image/M00/94/3B/Ciqc1GAXykaAefV0AAoX29H6c7o817.png"}),n(),y,a(s,{alt:"Lark20210201-172932.png",src:"https://s0.lgstatic.com/i/image/M00/94/3C/Ciqc1GAXylSANvfVAAYmlJl-aDo653.png"}),n(),i,a(s,{alt:"Lark20210201-172935.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/36/CgpVE2AXynmAbZxPAAEoYddgUBM139.png"}),n(),d])}const A=o(r,[["render",v]]);export{k as __pageData,A as default};
