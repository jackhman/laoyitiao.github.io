import{_ as o,j as e,o as t,g as c,k as a,Q as l,s as n,h as p}from"./chunks/framework.e0c66c3f.js";const x=JSON.parse('{"title":"认识 Redux 中间件 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/046_深入浅出搞定 React/(4867) 20  从 Redux 中间件实现原理切入，理解“面向切面编程”.md","filePath":"posts/frontEnd/046_深入浅出搞定 React/(4867) 20  从 Redux 中间件实现原理切入，理解“面向切面编程”.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/046_深入浅出搞定 React/(4867) 20  从 Redux 中间件实现原理切入，理解“面向切面编程”.md"},E=l("",24),y=n("p",null,'若有多个中间件，那么 Redux 会结合它们被"安装"的先后顺序，依序调用这些中间件，这个过程如下图所示：',-1),i=l("",59),d=n("p",null,[p('此时考虑这样一个需求：要求在每个 Action 被派发之后，打出一个 console.log 记录"action 被派发了"这个动作，也就是我们常说的"日志追溯"。这个需求的'),n("strong",null,"通用性很强、业务属性很弱"),p(" ，因此不适合与任何的业务逻辑耦合在一起。那我们就可以以 "),n("strong",null,'"切面"这种形式，把它与业务逻辑剥离开来'),p('：扩展功能在工作流中的执行节点，可以视为一个单独"切点"；我们把扩展功能的逻辑放到这个"切点"上来，形成的就是一个可以拦截前序逻辑的"切面"，如下图所示：')],-1),u=l("",7);function h(g,A,F,D,f,m){const s=e("Image");return t(),c("div",null,[E,a(s,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image2/M01/01/67/Cip5yF_Yk0yAUFNqAABk6No-RiM734.png"}),y,a(s,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image2/M01/01/68/CgpVE1_Yk1aAA-MbAACcWI3Jg2Q249.png"}),i,a(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image2/M01/01/49/CgpVE1_YZC-AKwdJAACTdBArWEQ782.png"}),d,a(s,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image2/M01/01/49/CgpVE1_YZEGAPHOaAACpc9ZgOG0409.png"}),u])}const w=o(r,[["render",h]]);export{x as __pageData,w as default};
