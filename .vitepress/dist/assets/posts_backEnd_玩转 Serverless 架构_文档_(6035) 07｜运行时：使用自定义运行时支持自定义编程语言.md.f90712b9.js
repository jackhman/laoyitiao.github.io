import{_ as o,j as e,o as t,g as c,k as a,h as s,Q as l,s as p}from"./chunks/framework.cfb14fe0.js";const S=JSON.parse('{"title":"07｜运行时：使用自定义运行时支持自定义编程语言","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/玩转 Serverless 架构_文档/(6035) 07｜运行时：使用自定义运行时支持自定义编程语言.md","filePath":"posts/backEnd/玩转 Serverless 架构_文档/(6035) 07｜运行时：使用自定义运行时支持自定义编程语言.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/玩转 Serverless 架构_文档/(6035) 07｜运行时：使用自定义运行时支持自定义编程语言.md"},E=l('<h1 id="_07-运行时-使用自定义运行时支持自定义编程语言" tabindex="-1">07｜运行时：使用自定义运行时支持自定义编程语言 <a class="header-anchor" href="#_07-运行时-使用自定义运行时支持自定义编程语言" aria-label="Permalink to &quot;07｜运行时：使用自定义运行时支持自定义编程语言&quot;">​</a></h1><p>这一讲我将带你了解如何自定义函数运行时。</p><p>我们知道 Serverless 应用的函数代码是在 FaaS 中运行的，到目前为止，你也只能选择 FaaS 平台支持的编程语言开发应用，而 FaaS 平台支持的编程语言不但有限，还只支持极少数的特定版本，比如函数计算只支持 Node.js 12、Node.js 8、Java、Python 等 。这样一来，当你想用 FaaS 平台不支持的编程语言（比如 TypeScrip、Golang、Ruby ）或各种编程语言的小版本（比如最新的 Node.js）时，该怎么办呢？<strong>这就需要使用自定义运行时了。</strong></p><p>主流的 FaaS 平台都支持自定义运行时，实现原理也都大致相同。为了让你弄清楚自定义运行时的原理，并学会开发一个自定义运行时，这一讲我将分为原理和实现两部分。</p><ul><li><p><strong>自定义运行时的原理：</strong> 首先我会带你了解一个通用的 FaaS 自定义运行时原理，这样你使用任何 FaaS 平台都可以触类旁通了。</p></li><li><p><strong>自定义运行时的实现：</strong> 我会带你分别实现一个 TypeScript 运行时，和 Golang 的运行时，从易到难让你彻底掌握自定义运行时的实现。</p></li></ul><p>话不多说，我们进行今天的学习。</p><h3 id="自定义运行时的原理" tabindex="-1">自定义运行时的原理 <a class="header-anchor" href="#自定义运行时的原理" aria-label="Permalink to &quot;自定义运行时的原理&quot;">​</a></h3><p>运行时（Runtime）是程序运行时所依赖的环境（环境包括任何库、框架或平台）。FaaS 中的运行时，就是你创建函数时指定的运行环境，比如函数计算的 Node.js 运行时，就包括 Node.js 运行环境以及一些内置的模块，如 ali-oss、tablestore，此外还有 Java 运行时、Python 运行时等。那自定义运行时就是你可以在 FaaS 自定义一个运行环境，如 TypeScript，然后你就可以使用 TypeScript 来编写代码并部署到 FaaS 平台上运行。</p><p>在了解自定义运行时的原理前，咱们先来回顾 FaaS 的运行原理（我在&quot;04 | 运行原理：Serverless 应用是怎么运行的？&quot;讲中提到过）。在 FaaS 中，运行时被预先定义，比如在创建函数时可以指定 runtime:nodejs12 ，接下来，用户通过触发器驱动函数执行后，FaaS 就会以 Node.js 12 作为运行时来创建函数实例，函数代码也就在 Node.js 12 这个运行环境中执行。</p>',9),y=l("<p>FaaS 运行原理</p><p><strong>那怎么才能让函数在自己定义的运行环境中执行呢？</strong> 这就涉及&quot;06 | 依赖管理：Serverless 应用怎么安装依赖？&quot;的内容了。在这一讲中我讲了：安装依赖的本质就是要把函数运行所需要的依赖都打包上传到 FaaS 中，这些依赖既可以是代码依赖包，还可以是系统依赖库。那你能不能把函数的运行时也打包上传到 FaaS 中，让 FaaS 利用你上传的运行时来执行你的代码呢？</p><p>当然可以，并且 FaaS 平台的自定义运行时也是这样实现的。</p><p>比如你可以用 TypeScript 编写代码，然后将代码和 TypeScript 运行时都上传到 FaaS 中，然后通过特定的配置，让 FaaS 通过自定义的 TypeScript 运行时来运行你的代码。比如通过 <code>runtime:custom</code>配置告诉 FaaS 你使用的时自定义运行时，然后用 <code>bootstrap: ts-node index.ts</code>配置来告诉 FaaS 函数启动时，使用 ts-node 来运行 index.ts。</p><p>这样一来，我们就解决了使用自定义运行时运行自定义编程语言的代码问题。**但还存在一个问题：**FaaS 平台在运行函数时会有很多参数（比如事件信息、函数上下文等），这些参数怎么传递给自定义运行时呢？这本质上是远程数据通信问题，最简单的就是 HTTP 协议来实现：在自定义运行时中实现一个 HTTP 服务，FaaS 平台通过 HTTP 请求把数据传递给自定义运行时。</p><p>讲到这儿，一个自定义运行时的原理图就可以总结出来了：</p>",6),i=l(`<p>自定义运行时原理</p><p>简单来讲，自定义运行时就是一个使用自定义编程语言实现的 HTTP 服务。然后你需要为你的 HTTP 服务指定一个启动命令，通用的做法是将启动命令保存在名为 bootstrap 的文件中。bootstrap 文件示例：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#B392F0;">./node_modules/ts-node/dist/bin.js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6F42C1;">./node_modules/ts-node/dist/bin.js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.ts</span></span></code></pre></div><p>FaaS 平台在创建函数实例时，会执行 bootstrap 文件启动 HTTP 服务，然后将所有请求及参数都转发到你的 HTTP 服务中，由 HTTP 服务处理所有请求。</p><p>讲完自定义运行时的原理之后，我们接着来实现一个自定义运行时。</p><h3 id="自定义运行时的实现" tabindex="-1">自定义运行时的实现 <a class="header-anchor" href="#自定义运行时的实现" aria-label="Permalink to &quot;自定义运行时的实现&quot;">​</a></h3><p>我会从易到难，先讲解如何实现一个 TypeScript 运行时，然后再介绍如何实现 Golang 运行时，这是两个很典型的例子，并且你掌握了如何自定义 Golang 运行时之后，就可以轻松自定义其他编程语言的运行时了。为了方便你进行实践，我选择了用得比较多的函数计算进行演示，同时我也为你提供了<a href="https://github.com/nodejh/serverless-class/tree/master/07" target="_blank" rel="noreferrer">示例程序</a>，你可以直接下载使用。</p><h4 id="实现一个-typescript-运行时" tabindex="-1">实现一个 TypeScript 运行时 <a class="header-anchor" href="#实现一个-typescript-运行时" aria-label="Permalink to &quot;实现一个 TypeScript 运行时&quot;">​</a></h4><p>TypeScript 为 JS 代码增加了类型系统，可以大大提升代码的可读性和可维护性。然而现在大多数 FaaS 平台都不直接支持 TypeScript，要想使用 TypeScript 编写 Serverless 应用，通常需要把代码编译为 JavaScript 再运行。显然这没有直接使用部署并执行 TypeScript 代码高效。我们如果想要直接运行 TypeScript 代码，可以通过 ts-node 来实现。所以你可以基于 ts-node 实现一个 TypeScript 运行时，这样就可以直接使用 TypeScript 编写 Serverless 应用了。</p><p>那怎么实现呢？</p><p>首先在本地创建一个 TypeScript 项目，然后安装必要的依赖，为了将依赖都上传到 FaaS，我们需要将 ts-node 等相关依赖（ts-node、typescript 和 @types/node）都安装在项目的 node_modules 中，如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-S</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ts-node</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-S</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@types/node</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-S</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ts-node</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-S</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@types/node</span></span></code></pre></div><p>前面我们已经学习了自定义运行时需要实现一个 HTTP 服务来接收 FaaS 平台的请求，所以接下来我们就使用 TypeScript 编写一个 HTTP 服务：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> http </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 你可以在这里实现具体的业务逻辑</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`Hello, \${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建一个 HTTP 服务</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">IncomingMessage</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ServerResponse</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取 RequestId</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">requestId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.headers[</span><span style="color:#9ECBFF;">&quot;x-fc-request-id&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`FC Invoke Start RequestId: \${</span><span style="color:#E1E4E8;">requestId</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 拼接请求参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rawData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  req.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rawData </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> chunk;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  req.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;end&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理业务逻辑，比如这里是输出欢迎语</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(rawData);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置 HTTP 响应</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(body);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`FC Invoke End RequestId: \${</span><span style="color:#E1E4E8;">requestId</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">server.timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">server.keepAliveTimeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 启动 HTTP 服务并监听 9000 端口</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9000</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;FunctionCompute typescript runtime initialized.&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> http </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 你可以在这里实现具体的业务逻辑</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`Hello, \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建一个 HTTP 服务</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">IncomingMessage</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ServerResponse</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取 RequestId</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">requestId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.headers[</span><span style="color:#032F62;">&quot;x-fc-request-id&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`FC Invoke Start RequestId: \${</span><span style="color:#24292E;">requestId</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 拼接请求参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rawData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  req.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    rawData </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> chunk;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  req.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;end&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理业务逻辑，比如这里是输出欢迎语</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(rawData);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置 HTTP 响应</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(body);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`FC Invoke End RequestId: \${</span><span style="color:#24292E;">requestId</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">server.timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">server.keepAliveTimeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 启动 HTTP 服务并监听 9000 端口</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9000</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;0.0.0.0&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;FunctionCompute typescript runtime initialized.&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>这段代码启动了一个 HTTP 服务，监听 0.0.0.0:9000 端口（这也是函数计算要求的）。然后我们可以先在本地测试，通过安装在项目中的 ts-node 命令来运行上述代码：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 启动 HTTP 服务</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./node_modules/ts-node/dist/bin.js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 启动 HTTP 服务</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./node_modules/ts-node/dist/bin.js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.ts</span></span></code></pre></div><p>然后在另一个终端中使用 curl 命令进行测试：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.0</span><span style="color:#9ECBFF;">.0.0:9000</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Serverless&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-H</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;x-fc-request-id:abcde&quot;</span></span>
<span class="line"><span style="color:#B392F0;">Hello,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Serverless</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#032F62;">.0.0:9000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Serverless&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-H</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;x-fc-request-id:abcde&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">Hello,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Serverless</span></span></code></pre></div><p>HTTP 服务测试正常后，我们的自定义运行时就完成了。你可以在接收 HTTP 请求后处理业务逻辑，然后将处理结果再以 HTTP 响应返回给 FaaS 平台。</p><p>当然了，在将自定义运行时部署到 FaaS 之前还需要创建一个名为 bootstrap 的文件，在文件中添加启动命令，这样 FaaS 才知道如何启动你的自定义运行时，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">!/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bash</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">dist</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin.js server.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#</span><span style="color:#D73A49;">!/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bash</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ts</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">dist</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin.js server.ts</span></span></code></pre></div><p>接下来我们还需要添加函数计算的 template.yaml 配置，定义函数信息：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">ROSTemplateFormatVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Transform</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">custom-typescript-demo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;helloworld&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">typescript-demo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">custom</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">MemorySize</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">512</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">index.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">ROSTemplateFormatVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#22863A;">Transform</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#22863A;">Resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">custom-typescript-demo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;helloworld&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">typescript-demo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">custom</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">MemorySize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">512</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">index.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span></code></pre></div><p>你要注意一下，在这份 YAML 配置中，Runtime 的值必须为 custom，Handler 属性在这里没有实际意义但是必须填写。</p><p>接下来就可以使用 fun deploy 将自定义运行时部署到函数计算了。部署后可以使用 fun invoke 进行测试：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deploy</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-y</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Waiting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">service</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">custom-typescript-demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Waiting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript-demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Waiting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">packaging</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript-demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript-demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">has</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">been</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">packaged.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">363</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">files</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">were</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">compressed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">size</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">was</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MB</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">typescript-demo</span><span style="color:#E1E4E8;"> deploy success</span></span>
<span class="line"><span style="color:#E1E4E8;">service custom-typescript-demo deploy success</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deploy</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Waiting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">service</span><span style="color:#24292E;"> </span><span style="color:#032F62;">custom-typescript-demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deployed...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Waiting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript-demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deployed...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Waiting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">packaging</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript-demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript-demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">has</span><span style="color:#24292E;"> </span><span style="color:#032F62;">been</span><span style="color:#24292E;"> </span><span style="color:#032F62;">packaged.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">363</span><span style="color:#24292E;"> </span><span style="color:#032F62;">files</span><span style="color:#24292E;"> </span><span style="color:#032F62;">were</span><span style="color:#24292E;"> </span><span style="color:#032F62;">compressed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">final</span><span style="color:#24292E;"> </span><span style="color:#032F62;">size</span><span style="color:#24292E;"> </span><span style="color:#032F62;">was</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MB</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">typescript-demo</span><span style="color:#24292E;"> deploy success</span></span>
<span class="line"><span style="color:#24292E;">service custom-typescript-demo deploy success</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">invoke</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Serverless&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">FC</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Invoke</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Result:</span></span>
<span class="line"><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Serverless</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">invoke</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Serverless&quot;</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">FC</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Invoke</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Result:</span></span>
<span class="line"><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Serverless</span></span></code></pre></div><p>这时函数计算就是使用自定义的 TypeScript 运行环境直接运行我们的 TypeScript 代码。</p><p>TypeScript 的运行时比较简单，因为 ts-node 可以直接安装在 node_modules 中，那么其他无法直接安装在依赖目录中的编程语言，比如 Golang 或最新版 Node.js 的自定义运行时应该怎么实现呢？</p><h4 id="实现一个-golang-的运行时" tabindex="-1">实现一个 Golang 的运行时 <a class="header-anchor" href="#实现一个-golang-的运行时" aria-label="Permalink to &quot;实现一个 Golang 的运行时&quot;">​</a></h4><p>如果要沿用 TypeScript 这种自定义启动命令的方案，就需要将 Golang 和代码打包，但 Golang 是直接安装在操作系统上的，依赖系统环境，好像无从下手。</p><p><strong>但你思考一下，将运行环境和代码打包，这种思想是不是和容器技术很像？</strong> 容器技术就是将应用和运行所依赖环境打包为镜像，这样应用可以轻松迁移、部署。那能不能把 Golang 运行环境构建为 Docker 镜像，然后让 FaaS 平台使用你的 Docker 镜像去执行代码呢？这样只要 FaaS 平台能支持自定义容器，就能实现任意编程语言的运行时了。答案是肯定的，很多 FaaS 平台（比如 Lambda 和函数计算）也都提供了自定义容器的能力。</p><p>使用容器自定义运行时，你需要先构建一个容器镜像，然后通过函数的配置告诉 FaaS 平台使用你的容器镜像。在函数执行时，FaaS 平台就会拉取容器镜像并启动容器执行代码。与前面 TypeScript 运行时一样，在自定义容器镜像中你也需要实现一个 HTTP 服务，接收 FaaS 平台的所有请求。</p>`,33),F=l(`<p>自定义运行时使用流程</p><p>那我们就一起来实现一下吧！</p><p>还是以函数计算为例，首先你需要准备一个镜像仓库，用来存放你的镜像，函数计算目前只支持<a href="https://cr.console.aliyun.com/cn-beijing/instances/repositories" target="_blank" rel="noreferrer">容器镜像服务</a>中的镜像（大部分 FaaS 也都只支持自家的镜像仓库），所以你需要构建自定义运行时镜像然后上传到容器镜像服务中。你可以提前在容器服务中创建一个命名空间和镜像仓库，创建完毕后记住你的仓库地址，格式为registry.&lt;地域&gt;.aliyuncs.com/&lt;命名空间&gt;/&lt;仓库名&gt; ，例如 registry.cn-hangzhou.aliyuncs.com/serverless-image/nodejs15 。</p><p>接下来进入开发步骤。</p><p>首先我们使用 Golang 实现一个 HTTP 服务，代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/http</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">runtime</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloHandler</span><span style="color:#E1E4E8;">(w http.ResponseWriter, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Fprintf</span><span style="color:#E1E4E8;">(w, </span><span style="color:#9ECBFF;">&quot;Hello Serverless! This is Golang runtime, version: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, runtime.</span><span style="color:#79B8FF;">Version</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> main () {</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">HandleFunc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, HelloHandler)</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">ListenAndServe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:8080&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/http</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">runtime</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloHandler</span><span style="color:#24292E;">(w http.ResponseWriter, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) {</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Fprintf</span><span style="color:#24292E;">(w, </span><span style="color:#032F62;">&quot;Hello Serverless! This is Golang runtime, version: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, runtime.</span><span style="color:#005CC5;">Version</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> main () {</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">HandleFunc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, HelloHandler)</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">ListenAndServe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:8080&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个 HTTP 服务中我们定义了 / 这个路由，逻辑就是返回当前 Golang 的版本。当基于容器实现自定义运行时，函数计算会将 HTTP 触发器的请求转发到 / 路由，将事件触发器的请求转发到 /invoke 路由。</p><p>然后我们也可以先在本地测试，为了简单，可以直接通过 go run main.go 的命令启动 HTTP 服务，然后使用 curl 命令测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 启动 HTTP 服务</span></span>
<span class="line"><span style="color:#E1E4E8;">$ go run main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 启动 HTTP 服务</span></span>
<span class="line"><span style="color:#24292E;">$ go run main.go</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 新开一个终端，通过 curl 命令测试</span></span>
<span class="line"><span style="color:#E1E4E8;">$ curl localhost</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8080</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello Serverless</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> This is Golang runtime, version</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> go1.</span><span style="color:#FDAEB7;font-style:italic;">13</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 新开一个终端，通过 curl 命令测试</span></span>
<span class="line"><span style="color:#24292E;">$ curl localhost</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8080</span></span>
<span class="line"><span style="color:#24292E;">Hello Serverless</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> This is Golang runtime, version</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> go1.</span><span style="color:#B31D28;font-style:italic;">13</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">5</span></span></code></pre></div><p>（这里返回的 golang 版本是 1.3.15，这是因为我的电脑上安装的是该版本）。</p><p>接下来我们需要编写一个 Dockerfile，用来构建包含 Golang 运行时及代码的镜像：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># Dockerfile</span></span>
<span class="line"><span style="color:#E1E4E8;">FROM golang</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.15</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">6</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alpine3.</span><span style="color:#FDAEB7;font-style:italic;">12</span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">app</span></span>
<span class="line"><span style="color:#E1E4E8;"># 将代码复制到工作目录</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY . .</span></span>
<span class="line"><span style="color:#E1E4E8;"># 编译</span></span>
<span class="line"><span style="color:#E1E4E8;">RUN go build main.go</span></span>
<span class="line"><span style="color:#E1E4E8;"># 暴露 </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;"> 端口</span></span>
<span class="line"><span style="color:#E1E4E8;">EXPOSE </span><span style="color:#79B8FF;">8080</span></span>
<span class="line"><span style="color:#E1E4E8;"># 启动应用</span></span>
<span class="line"><span style="color:#F97583;">ENTRYPOINT</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;./main&quot;</span><span style="color:#E1E4E8;"> ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># Dockerfile</span></span>
<span class="line"><span style="color:#24292E;">FROM golang</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.15</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">6</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alpine3.</span><span style="color:#B31D28;font-style:italic;">12</span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">app</span></span>
<span class="line"><span style="color:#24292E;"># 将代码复制到工作目录</span></span>
<span class="line"><span style="color:#24292E;">COPY . .</span></span>
<span class="line"><span style="color:#24292E;"># 编译</span></span>
<span class="line"><span style="color:#24292E;">RUN go build main.go</span></span>
<span class="line"><span style="color:#24292E;"># 暴露 </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;"> 端口</span></span>
<span class="line"><span style="color:#24292E;">EXPOSE </span><span style="color:#005CC5;">8080</span></span>
<span class="line"><span style="color:#24292E;"># 启动应用</span></span>
<span class="line"><span style="color:#D73A49;">ENTRYPOINT</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;./main&quot;</span><span style="color:#24292E;"> ]</span></span></code></pre></div><p>在这个 Dockerfile 中，我们使用了 golang:1.15.6-alpine3.12 作为基础镜像，其中 alpine 是最小体积的 golang 运行环境。然后我们使用 go build 来编译代码，最后启动应用。</p><p>接下来就可以构建并上传镜像了，如果是第一次使用容器镜像服务，则需要先使用 docker login 登录。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 指定镜像名称，例如 registry.cn</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hangzhou.aliyuncs.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">serverless</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">image</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">golang</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">v0.</span><span style="color:#FDAEB7;font-style:italic;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">$ export IMAGE_NAME</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;你的镜像仓库:版本&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">$ docker build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t $IMAGE_NAME .</span></span>
<span class="line"><span style="color:#E1E4E8;">$ docker push $IMAGE_NAME</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 指定镜像名称，例如 registry.cn</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hangzhou.aliyuncs.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">serverless</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">image</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">golang</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">v0.</span><span style="color:#B31D28;font-style:italic;">1</span></span>
<span class="line"><span style="color:#24292E;">$ export IMAGE_NAME</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;你的镜像仓库:版本&quot;</span></span>
<span class="line"><span style="color:#24292E;">$ docker build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t $IMAGE_NAME .</span></span>
<span class="line"><span style="color:#24292E;">$ docker push $IMAGE_NAME</span></span></code></pre></div><p>镜像上传后，就可以创建一个 template.yaml 来定义函数配置了：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">ROSTemplateFormatVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Transform</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">serverless</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Policies</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">AliyunContainerRegistryReadOnlyAccess</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">InternetAccess</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">golang-runtime</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Golang Runtime&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">custom-container</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">60</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CAPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">8080</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">not-used</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">MemorySize</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1024</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">./</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CustomContainerConfig</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">Image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;registry.cn-hangzhou.aliyuncs.com/serverless-image/golang:v0.1&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">ROSTemplateFormatVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#22863A;">Transform</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#22863A;">Resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">serverless</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Policies</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">AliyunContainerRegistryReadOnlyAccess</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">InternetAccess</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">golang-runtime</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Golang Runtime&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">custom-container</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">60</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CAPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">8080</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">not-used</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">MemorySize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1024</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">./</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CustomContainerConfig</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">Image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;registry.cn-hangzhou.aliyuncs.com/serverless-image/golang:v0.1&#39;</span></span></code></pre></div><p>这份 YAML 配置中，Runtime 值为custom-container ，表示该函数是自定义容器，然后通过 CustomContainerConfig 配置容器镜像。示例中我直接使用的 registry.cn-hangzhou.aliyuncs.com 这个 endpoint，但通常为了更快拉取镜像，一般会使用 VPC 地址，如registry-vpc.cn-beijing.aliyuncs.com/serverless-image/golang:v0.1。</p><p>接下来就可以通过 fun deploy 进行部署，fun invoke 进行测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ fun deploy</span></span>
<span class="line"><span style="color:#E1E4E8;">$ fun invoke</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello Serverless</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> This is Golang runtime, version</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> go1.</span><span style="color:#FDAEB7;font-style:italic;">15</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ fun deploy</span></span>
<span class="line"><span style="color:#24292E;">$ fun invoke</span></span>
<span class="line"><span style="color:#24292E;">Hello Serverless</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> This is Golang runtime, version</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> go1.</span><span style="color:#B31D28;font-style:italic;">15</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">6</span></span></code></pre></div><p>可以看到，执行结果中 Golang 版本是 1.15.6，说明自定义运行时正常工作了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我首先为你讲解了自定义运行时的基本原理，然后以 TypeScript 运行时和 Golang 运行时为例，为你详细介绍了如何创建一个自定义运行时。关于这一讲的内容，我想要强调以下几点：</p><ul><li><p>FaaS 平台提供了有限的编程语言及版本的支持，使用自定义运行时，你可以自定义编程语言进行开发；</p></li><li><p>自定义运行时的原理是在函数中实现一个 HTTP 服务，FaaS 平台将触发器事件转发到你的 HTTP 服务；</p></li><li><p>你可以通过将运行时上传到 FaaS，在 bootstrap 中定义启动命令来实现自定义运行时，比如 TypeScript；</p></li><li><p>你也可以通过自定义容器镜像来实现任意编程语言的自定义运行时。</p></li></ul><p><strong>自定义运行时是 Serverless 应用开中非常重要的一个功能，</strong> 它可以让你突破 FaaS 平台运行环境的限制，可以让你使用 FaaS 平台不支持的编程语言进行开发。你应该也能发现，基于容器实现自定义运行时你可以很方便地安装依赖，因为依赖都打包到了镜像中。除此之外，基于自定义运行时，你还可以平滑地将原有系统或传统应用平滑迁移到 Serverless 架构。</p>`,26),d=p("p",null,"最后我留给你的作业就是：根据我所讲的内容，举一反三地实现一个最新版 Node.js 运行时。我们下一讲见。",-1),u=p("blockquote",null,[p("p",null,[s("本讲的代码地址："),p("a",{href:"https://github.com/nodejh/serverless-class/tree/master/07",target:"_blank",rel:"noreferrer"},"https://github.com/nodejh/serverless-class/tree/master/07")])],-1);function C(g,h,v,B,m,A){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/05/12/Cip5yF_7uYKAQkbBAAJKyufn9-8829.png"}),s(),y,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/05/14/CgpVE1_7uY6AJB5xAAF4dxbQVU0166.png"}),s(),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/05/14/CgpVE1_7uayAMv-5AATwsp__Ojw457.png"}),s(),F,a(n,{alt:"Lark20210111-155706.png",src:"https://s0.lgstatic.com/i/image/M00/8D/40/CgqCHl_8BQmAJmTXAAEfdIEkDno978.png"}),s(),d,u])}const T=o(r,[["render",C]]);export{S as __pageData,T as default};
