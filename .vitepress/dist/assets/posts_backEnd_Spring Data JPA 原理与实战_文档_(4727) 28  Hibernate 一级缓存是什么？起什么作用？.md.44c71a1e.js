import{_ as o,j as e,o as t,g as r,k as l,h as a,Q as p,s}from"./chunks/framework.a0d18f64.js";const N=JSON.parse('{"title":"28Hibernate一级缓存是什么？起什么作用？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4727) 28  Hibernate 一级缓存是什么？起什么作用？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4727) 28  Hibernate 一级缓存是什么？起什么作用？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4727) 28  Hibernate 一级缓存是什么？起什么作用？.md"},y=p(`<h1 id="_28hibernate一级缓存是什么-起什么作用" tabindex="-1">28Hibernate一级缓存是什么？起什么作用？ <a class="header-anchor" href="#_28hibernate一级缓存是什么-起什么作用" aria-label="Permalink to &quot;28Hibernate一级缓存是什么？起什么作用？&quot;">​</a></h1><p>如果你已经看完了之前的课时，相信你对 Hibernate 和 JPA 已经有一些深入的认识了，那么这一讲开始，我再对大家平时感到迷惑的概念做一下解释，帮助你更好地掌握 JPA。</p><p>这一讲我们来聊聊经常说的 Hibernate 的一级缓存是什么意思，Query Plan Cache 又和一级缓存是什么关系呢？</p><h3 id="一级缓存" tabindex="-1">一级缓存 <a class="header-anchor" href="#一级缓存" aria-label="Permalink to &quot;一级缓存&quot;">​</a></h3><p>什么是一级缓存？这个大家最容易存在疑惑，不知道你是否也在工作中遇见过这些问题：没有办法取到最新的数据、不知道一级缓存该如何释放、怎样关闭一级缓存？我们又为什么要用一级缓存呢？</p><h4 id="什么是一级缓存" tabindex="-1">什么是一级缓存？ <a class="header-anchor" href="#什么是一级缓存" aria-label="Permalink to &quot;什么是一级缓存？&quot;">​</a></h4><p>按照 Hibernate 和 JPA 协议里面的解释，我们经常说的 First Level Cache（一级缓存）也就是我在之前的课时中说过的 PersistenceContext，既然如此，那么就意味着一级缓存的载体是 Session 或者 EntityManager；而一级缓存的实体也就是数据库里面对应的实体。</p><p>在 SessionImpl 的实现过程中，我们会发现 PersistenceContext 的实现类 StatefulPersistenceContext 是通过 HashMap 来存储实体信息的，其关键源码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatefulPersistenceContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PersistenceContext</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//根据EntityUniqueKey作为key来储存Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">EntityUniqueKey</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; entitiesByUniqueKey;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//根据EntityUniqueKey作为key取当前实体</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getEntity</span><span style="color:#E1E4E8;">(EntityUniqueKey </span><span style="color:#FFAB70;">euk</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> entitiesByUniqueKey </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> entitiesByUniqueKey.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">( euk );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//储存实体，如果是第一次，那么创建HashMap&lt;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addEntity</span><span style="color:#E1E4E8;">(EntityUniqueKey </span><span style="color:#FFAB70;">euk</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( entitiesByUniqueKey </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        entitiesByUniqueKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;( INIT_COLL_SIZE );</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     entitiesByUniqueKey.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">( euk, entity );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">......}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatefulPersistenceContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersistenceContext</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//根据EntityUniqueKey作为key来储存Entity</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">EntityUniqueKey</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; entitiesByUniqueKey;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//根据EntityUniqueKey作为key取当前实体</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getEntity</span><span style="color:#24292E;">(EntityUniqueKey </span><span style="color:#E36209;">euk</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> entitiesByUniqueKey </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> entitiesByUniqueKey.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">( euk );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//储存实体，如果是第一次，那么创建HashMap&lt;&gt;</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addEntity</span><span style="color:#24292E;">(EntityUniqueKey </span><span style="color:#E36209;">euk</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( entitiesByUniqueKey </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">        entitiesByUniqueKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;( INIT_COLL_SIZE );</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     entitiesByUniqueKey.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">( euk, entity );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">......}</span></span></code></pre></div><p>其中 EntityUniqueKey 的核心源码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EntityUniqueKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String uniqueKeyName;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String entityName;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object key;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Type keyType;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EntityMode entityMode;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> hashCode;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">other</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     EntityUniqueKey that </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (EntityUniqueKey) other;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> that </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> that.entityName.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">( entityName )</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> that.uniqueKeyName.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">( uniqueKeyName )</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> keyType.</span><span style="color:#B392F0;">isEqual</span><span style="color:#E1E4E8;">( that.key, key );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EntityUniqueKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String uniqueKeyName;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String entityName;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object key;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Type keyType;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EntityMode entityMode;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hashCode;</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">other</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     EntityUniqueKey that </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (EntityUniqueKey) other;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> that </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> that.entityName.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">( entityName )</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> that.uniqueKeyName.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">( uniqueKeyName )</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> keyType.</span><span style="color:#6F42C1;">isEqual</span><span style="color:#24292E;">( that.key, key );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过源码可以看到，用 PersistenceContext 来判断实体是不是同一个，可以直接根据实体里面的主键进行。那么一级缓存的作用是什么呢？</p><h4 id="一级缓存的作用" tabindex="-1">一级缓存的作用 <a class="header-anchor" href="#一级缓存的作用" aria-label="Permalink to &quot;一级缓存的作用&quot;">​</a></h4><p>由于一级缓存就是 PersistenceContext，那么一级缓存的最大作用就是管理 Entity 的生命周期，详细的内容我已经在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=490#/detail/pc?id=4721" target="_blank" rel="noreferrer">21 | Persistence Context 所表达的核心概念是什么？</a>&quot;介绍过了，这里我就稍加总结。</p><ol><li><p>New（Transient）状态的，不在一级缓存管理之列，这是新创建的；</p></li><li><p>Detached 游离状态的，不在一级缓存里面，和 New 的唯一区别是它带有主键和 Version 信息；</p></li><li><p>Manager、Removed 状态的实体在一级缓存管理之列，所有对这两种状态的实体进行的更新操作，都不会立即更新到数据库里面，只有执行了 flush 之后才会同步到数据库里面。</p></li></ol><p>我们用一张图来表示，如下所示。</p>`,16),E=p(`<p>注：图片来源于网络</p><p>对于实体 1 来说，新增和更新操作都是先进行一级缓存，只有 flush 的时候才会同步到数据库里面。而当我们执行了 entityManager.clean() 或者是 entityManager.detach(entity1)，那么实体 1 就会变成游离状态，这时再对实体 1 进行修改，如果再执行 flush 的话，就不会同步到 DB 里面了。我们用代码来说明一下，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PersistenceContext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">properties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {@</span><span style="color:#F97583;">PersistenceProperty</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;org.hibernate.flushMode&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;MANUAL&quot;</span><span style="color:#6A737D;">//手动flush</span></span>
<span class="line"><span style="color:#E1E4E8;">    )})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EntityManager entityManager;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testLife</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserInfo userInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserInfo.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;new name&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//新增一个对象userInfo交给PersistenceContext管理，即一级缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        entityManager.</span><span style="color:#B392F0;">persist</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//此时没有detach和clear之前，flush的时候还会产生更新SQL</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfo.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;old name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        entityManager.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        entityManager.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//        entityManager.detach(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// entityManager已经clear，此时已经不会对UserInfo进行更新了</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfo.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;new name 11&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        entityManager.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//由于有cache机制，相同的对象查询只会触发一次查询SQL</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserInfo u1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//to do some thing</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserInfo u2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PersistenceContext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">properties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {@</span><span style="color:#D73A49;">PersistenceProperty</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org.hibernate.flushMode&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;MANUAL&quot;</span><span style="color:#6A737D;">//手动flush</span></span>
<span class="line"><span style="color:#24292E;">    )})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EntityManager entityManager;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testLife</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        UserInfo userInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserInfo.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new name&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//新增一个对象userInfo交给PersistenceContext管理，即一级缓存</span></span>
<span class="line"><span style="color:#24292E;">        entityManager.</span><span style="color:#6F42C1;">persist</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//此时没有detach和clear之前，flush的时候还会产生更新SQL</span></span>
<span class="line"><span style="color:#24292E;">        userInfo.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;old name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        entityManager.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        entityManager.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//        entityManager.detach(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// entityManager已经clear，此时已经不会对UserInfo进行更新了</span></span>
<span class="line"><span style="color:#24292E;">        userInfo.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new name 11&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        entityManager.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//由于有cache机制，相同的对象查询只会触发一次查询SQL</span></span>
<span class="line"><span style="color:#24292E;">        UserInfo u1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//to do some thing</span></span>
<span class="line"><span style="color:#24292E;">        UserInfo u2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>利用我们之前讲过的打印日志的方法，把 SQL 打印一下，输出到控制台的 SQL 如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;"> (create_time, create_user_id, last_modified_time, last_modified_user_id, version, ages, email_address, last_name, name, telephone, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> update user_info set create_time</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, create_user_id</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, last_modified_time</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, last_modified_user_id</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, ages</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, email_address</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, last_name</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, name</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, telephone</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> where id</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> and version</span><span style="color:#F97583;">=?</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select userinfo0_.id as id1_2_0_, userinfo0_.create_time as create_t2_2_0_, userinfo0_.create_user_id as create_u3_2_0_, userinfo0_.last_modified_time as last_mod4_2_0_, userinfo0_.last_modified_user_id as last_mod5_2_0_, userinfo0_.version as version6_2_0_, userinfo0_.ages as ages7_2_0_, userinfo0_.email_address as email_ad8_2_0_, userinfo0_.last_name as last_nam9_2_0_, userinfo0_.name as name10_2_0_, userinfo0_.telephone as telepho11_2_0_, rooms1_.user_info_id as user_inf1_3_1_, room2_.id as rooms_id2_3_1_, room2_.id as id1_1_2_, room2_.create_time as create_t2_1_2_, room2_.create_user_id as create_u3_1_2_, room2_.last_modified_time as last_mod4_1_2_, room2_.last_modified_user_id as last_mod5_1_2_, room2_.version as version6_1_2_, room2_.title as title7_1_2_ from user_info userinfo0_ left outer join user_info_rooms rooms1_ on userinfo0_.id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">rooms1_.user_info_id left outer join room room2_ on rooms1_.rooms_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">room2_.id where userinfo0_.id</span><span style="color:#F97583;">=?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;"> (create_time, create_user_id, last_modified_time, last_modified_user_id, version, ages, email_address, last_name, name, telephone, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> update user_info set create_time</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, create_user_id</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, last_modified_time</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, last_modified_user_id</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, ages</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, email_address</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, last_name</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, name</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, telephone</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> where id</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> and version</span><span style="color:#D73A49;">=?</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select userinfo0_.id as id1_2_0_, userinfo0_.create_time as create_t2_2_0_, userinfo0_.create_user_id as create_u3_2_0_, userinfo0_.last_modified_time as last_mod4_2_0_, userinfo0_.last_modified_user_id as last_mod5_2_0_, userinfo0_.version as version6_2_0_, userinfo0_.ages as ages7_2_0_, userinfo0_.email_address as email_ad8_2_0_, userinfo0_.last_name as last_nam9_2_0_, userinfo0_.name as name10_2_0_, userinfo0_.telephone as telepho11_2_0_, rooms1_.user_info_id as user_inf1_3_1_, room2_.id as rooms_id2_3_1_, room2_.id as id1_1_2_, room2_.create_time as create_t2_1_2_, room2_.create_user_id as create_u3_1_2_, room2_.last_modified_time as last_mod4_1_2_, room2_.last_modified_user_id as last_mod5_1_2_, room2_.version as version6_1_2_, room2_.title as title7_1_2_ from user_info userinfo0_ left outer join user_info_rooms rooms1_ on userinfo0_.id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">rooms1_.user_info_id left outer join room room2_ on rooms1_.rooms_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">room2_.id where userinfo0_.id</span><span style="color:#D73A49;">=?</span></span></code></pre></div><p>通过日志可以看到没有第二次更新。</p><p>除此之外，关于一级缓存还有其他问题你应该了解一下。</p><p>它的生命周期是怎么样的呢？可想而知，肯定和 Session 一样，这个问题你可以回过头仔细看看&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=490#/detail/pc?id=4722" target="_blank" rel="noreferrer">22 | Session 的 open-in-view 对事务的影响是什么？</a>&quot;。但同时实体在一级 Cache 里面的生命周期还受到的 entityManager.clear() 和 entityManger.detach() 两个方法的影响。</p><p>一级缓存的大小可以设置吗？这个肯定是不能的，我们从底层原理可以分析出：一级缓存依赖Java 内存堆的大小，所以受到最大堆和最小堆的限制，即清除一级缓存的机制就是利用 JVM 的 GC 机制，清理掉 GC 就会清理掉一级缓存。</p><p>所以当我们请求并发量大的时候，Session 的对象就会变得很多，此时就会需要更多内存。当请求结束之后，随着 GC 的回收，里面就会清除一级缓存留下来的对象。</p><p>一级缓存可以关闭吗？答案肯定是不能的，除非我们不用 Hibernate 或 JPA，改用 Mybatis，因为一级缓存是 JPA 的最大优势之一。</p><p>而在实际工作中，最容易被我们忽略的是和一级缓存差不多的 Query Plan Cache，我们来了解一下。</p><h3 id="query-plan-cache" tabindex="-1">Query Plan Cache <a class="header-anchor" href="#query-plan-cache" aria-label="Permalink to &quot;Query Plan Cache&quot;">​</a></h3><p>我们都知道 JPA 里面大部分的查询都是基于 JPQL 查询语法，从而会有一个过程把 JPQL 转化成真正的 SQL，而后到数据库里执行。而 JPQL 转化成原始的 SQL 时，就会消耗一定的性能，所以 Hibernate 设计了一个 QueryPlanCache 的机制，用来存储 JPQL 或者 Criteria Query 到 Native SQL 中转化的结果，也就是说 QueryPlanCache 里面存储了最终要执行的 SQL，以及参数和返回结果的类型。</p><h4 id="queryplancache-是什么" tabindex="-1">QueryPlanCache 是什么？ <a class="header-anchor" href="#queryplancache-是什么" aria-label="Permalink to &quot;QueryPlanCache 是什么？&quot;">​</a></h4><p>在 Hibernate 中，QueryPlanCache 就是指具体的某一个类。我们通过核心源码看一下它是什么，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> org.hibernate.engine.query.spi;</span></span>
<span class="line"><span style="color:#6A737D;">//存储query plan 和 query parameter metdata</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QueryPlanCache</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//queryPlanCache的存储结构为自定义的HashMap结构，用来存储JPQL到SQL的转化过程及其SQL的执行语句和参数，返回结果的metadata;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> BoundedConcurrentHashMap queryPlanCache;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//这个用来存储@Query的nativeQuery = true的query plan，即原始SQL的meta,包含参数和return type的 meta;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> BoundedConcurrentHashMap&lt;</span><span style="color:#F97583;">ParameterMetadataKey</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">ParameterMetadataImpl</span><span style="color:#E1E4E8;">&gt; parameterMetadataCache;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//QueryPlanCache的构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QueryPlanCache</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SessionFactoryImplementor </span><span style="color:#FFAB70;">factory</span><span style="color:#E1E4E8;">, QueryPlanCreator </span><span style="color:#FFAB70;">queryPlanCreator</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> factory;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.queryPlanCreator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queryPlanCreator;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//maxParameterMetadata的个数，计算逻辑，可以自定义配置，或者采用默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">       Integer maxParameterMetadataCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigurationHelper.</span><span style="color:#B392F0;">getInteger</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">             Environment.QUERY_PLAN_CACHE_PARAMETER_METADATA_MAX_SIZE,</span></span>
<span class="line"><span style="color:#E1E4E8;">             factory.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">       );</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( maxParameterMetadataCount </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          maxParameterMetadataCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigurationHelper.</span><span style="color:#B392F0;">getInt</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                Environment.QUERY_PLAN_CACHE_MAX_STRONG_REFERENCES,</span></span>
<span class="line"><span style="color:#E1E4E8;">                factory.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                DEFAULT_PARAMETER_METADATA_MAX_COUNT</span></span>
<span class="line"><span style="color:#E1E4E8;">          );</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//maxQueryPlan的个数，计算逻辑，可以自定义配置大小，或者采用默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">       Integer maxQueryPlanCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigurationHelper.</span><span style="color:#B392F0;">getInteger</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">             Environment.QUERY_PLAN_CACHE_MAX_SIZE,</span></span>
<span class="line"><span style="color:#E1E4E8;">             factory.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">       );</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( maxQueryPlanCount </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          maxQueryPlanCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigurationHelper.</span><span style="color:#B392F0;">getInt</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                Environment.QUERY_PLAN_CACHE_MAX_SOFT_REFERENCES,</span></span>
<span class="line"><span style="color:#E1E4E8;">                factory.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                DEFAULT_QUERY_PLAN_MAX_COUNT</span></span>
<span class="line"><span style="color:#E1E4E8;">          );</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//新建一个 BoundedConcurrentHashMap的queryPlanCache，用来存储JPQL和Criteria Query到SQL的转化过程</span></span>
<span class="line"><span style="color:#E1E4E8;">       queryPlanCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BoundedConcurrentHashMap</span><span style="color:#E1E4E8;">( maxQueryPlanCount, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, BoundedConcurrentHashMap.Eviction.LIRS );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//新建一个 BoundedConcurrentHashMap的parameterMetadataCache，用来存储Native SQL的转化过程</span></span>
<span class="line"><span style="color:#E1E4E8;">       parameterMetadataCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> BoundedConcurrentHashMap&lt;&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">             maxParameterMetadataCount,</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">             BoundedConcurrentHashMap.Eviction.LIRS</span></span>
<span class="line"><span style="color:#E1E4E8;">       );</span></span>
<span class="line"><span style="color:#E1E4E8;">       nativeQueryInterpreter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">getServiceRegistry</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getService</span><span style="color:#E1E4E8;">( NativeQueryInterpreter.class );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 默认的parameterMetadataCache的HashMap的存储空间大小，默认128条</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> DEFAULT_PARAMETER_METADATA_MAX_COUNT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//默认的queryPlanCache的HashMap存储空间大小，默认2048条</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> DEFAULT_QUERY_PLAN_MAX_COUNT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2048</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">......不重要的代码先省略</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> org.hibernate.engine.query.spi;</span></span>
<span class="line"><span style="color:#6A737D;">//存储query plan 和 query parameter metdata</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QueryPlanCache</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//queryPlanCache的存储结构为自定义的HashMap结构，用来存储JPQL到SQL的转化过程及其SQL的执行语句和参数，返回结果的metadata;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> BoundedConcurrentHashMap queryPlanCache;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//这个用来存储@Query的nativeQuery = true的query plan，即原始SQL的meta,包含参数和return type的 meta;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> BoundedConcurrentHashMap&lt;</span><span style="color:#D73A49;">ParameterMetadataKey</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">ParameterMetadataImpl</span><span style="color:#24292E;">&gt; parameterMetadataCache;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//QueryPlanCache的构造方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QueryPlanCache</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SessionFactoryImplementor </span><span style="color:#E36209;">factory</span><span style="color:#24292E;">, QueryPlanCreator </span><span style="color:#E36209;">queryPlanCreator</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.queryPlanCreator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queryPlanCreator;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//maxParameterMetadata的个数，计算逻辑，可以自定义配置，或者采用默认值</span></span>
<span class="line"><span style="color:#24292E;">       Integer maxParameterMetadataCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigurationHelper.</span><span style="color:#6F42C1;">getInteger</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">             Environment.QUERY_PLAN_CACHE_PARAMETER_METADATA_MAX_SIZE,</span></span>
<span class="line"><span style="color:#24292E;">             factory.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">       );</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( maxParameterMetadataCount </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">          maxParameterMetadataCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigurationHelper.</span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                Environment.QUERY_PLAN_CACHE_MAX_STRONG_REFERENCES,</span></span>
<span class="line"><span style="color:#24292E;">                factory.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                DEFAULT_PARAMETER_METADATA_MAX_COUNT</span></span>
<span class="line"><span style="color:#24292E;">          );</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//maxQueryPlan的个数，计算逻辑，可以自定义配置大小，或者采用默认值</span></span>
<span class="line"><span style="color:#24292E;">       Integer maxQueryPlanCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigurationHelper.</span><span style="color:#6F42C1;">getInteger</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">             Environment.QUERY_PLAN_CACHE_MAX_SIZE,</span></span>
<span class="line"><span style="color:#24292E;">             factory.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">       );</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( maxQueryPlanCount </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">          maxQueryPlanCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigurationHelper.</span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                Environment.QUERY_PLAN_CACHE_MAX_SOFT_REFERENCES,</span></span>
<span class="line"><span style="color:#24292E;">                factory.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                DEFAULT_QUERY_PLAN_MAX_COUNT</span></span>
<span class="line"><span style="color:#24292E;">          );</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//新建一个 BoundedConcurrentHashMap的queryPlanCache，用来存储JPQL和Criteria Query到SQL的转化过程</span></span>
<span class="line"><span style="color:#24292E;">       queryPlanCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BoundedConcurrentHashMap</span><span style="color:#24292E;">( maxQueryPlanCount, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, BoundedConcurrentHashMap.Eviction.LIRS );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//新建一个 BoundedConcurrentHashMap的parameterMetadataCache，用来存储Native SQL的转化过程</span></span>
<span class="line"><span style="color:#24292E;">       parameterMetadataCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> BoundedConcurrentHashMap&lt;&gt;(</span></span>
<span class="line"><span style="color:#24292E;">             maxParameterMetadataCount,</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">             BoundedConcurrentHashMap.Eviction.LIRS</span></span>
<span class="line"><span style="color:#24292E;">       );</span></span>
<span class="line"><span style="color:#24292E;">       nativeQueryInterpreter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">getServiceRegistry</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getService</span><span style="color:#24292E;">( NativeQueryInterpreter.class );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 默认的parameterMetadataCache的HashMap的存储空间大小，默认128条</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> DEFAULT_PARAMETER_METADATA_MAX_COUNT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//默认的queryPlanCache的HashMap存储空间大小，默认2048条</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> DEFAULT_QUERY_PLAN_MAX_COUNT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2048</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">......不重要的代码先省略</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>很好理解，通过源码和概念的分析你就大概知道 QueryPlanCache 是什么了，那么我们再来看一下它的里面具体会存储什么内容呢？</p><h4 id="queryplancache-存储的内容" tabindex="-1">QueryPlanCache 存储的内容 <a class="header-anchor" href="#queryplancache-存储的内容" aria-label="Permalink to &quot;QueryPlanCache 存储的内容&quot;">​</a></h4><p>我们新建一个 UserInfoRepository，来测试一下。假设 UserInfoRepository 里面有如下几个方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//没有用@Query，直接使用method name defining query</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByNameAndCreateTimeBetween</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, Instant </span><span style="color:#FFAB70;">begin</span><span style="color:#E1E4E8;">, Instant </span><span style="color:#FFAB70;">endTime</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//演示SpEL根据数组下标取参数，和根据普通的Parma的名字:name取参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from UserInfo u where u.lastName like %:#{[0]} and u.name like %:name%&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findContainingEscaped</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//SpEL取Parma的名字customer里面的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from UserInfo u where u.name = :#{#customer.name}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findUsersByCustomersFirstname</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;customer&quot;</span><span style="color:#E1E4E8;">) UserInfo </span><span style="color:#FFAB70;">customer</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//利用SpEL根据一个写死的&#39;jack&#39;字符串作为参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from UserInfo u where u.name = ?#{&#39;jack&#39;}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findOliverBySpELExpressionWithoutArgumentsWithQuestionmark</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;select * from user_info where name=:name&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">nativeQuery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByName</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//没有用@Query，直接使用method name defining query</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByNameAndCreateTimeBetween</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, Instant </span><span style="color:#E36209;">begin</span><span style="color:#24292E;">, Instant </span><span style="color:#E36209;">endTime</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//演示SpEL根据数组下标取参数，和根据普通的Parma的名字:name取参数</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from UserInfo u where u.lastName like %:#{[0]} and u.name like %:name%&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findContainingEscaped</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//SpEL取Parma的名字customer里面的属性</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from UserInfo u where u.name = :#{#customer.name}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findUsersByCustomersFirstname</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;customer&quot;</span><span style="color:#24292E;">) UserInfo </span><span style="color:#E36209;">customer</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//利用SpEL根据一个写死的&#39;jack&#39;字符串作为参数</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from UserInfo u where u.name = ?#{&#39;jack&#39;}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findOliverBySpELExpressionWithoutArgumentsWithQuestionmark</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;select * from user_info where name=:name&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">nativeQuery</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByName</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当项目启动成功之后你会发现，通过 @Query 定义的 nativeQuery=false 的 JPQL，会在启动成功之后预先放在 QueryPlanCache 里面，我们设置一个断点就可以看到如下内容。</p>`,22),i=s("p",null,"发现里面 parameterMetadataCache 是空的，也就是没有放置 nativeQuery=true 的 Query SQL，并且可以看到我们在方法里面定义的其他三个 @Query 的 JPQL 解析过程。那么我们打开第一个详细看一下，如下图所示。",-1),u=p(`<p>你会发现一个 QueryPlanCache 还是能存挺多东西的：navtive sql、参数、return 等各种 metadata。也可以看出一个简单的 JPQL 查询会有些占用堆内存，所以如果是复杂点的项目，各种查询的 JPQL 多一点的话，启动所需要的最小堆内存会占用 300M、400M 的空间，这是正常现象。</p><p>在 UserInfoRepository 的五个方法中，剩下的两个方法分别是 name defining query 和 nativeQuery=true。这两种情况是，当调用的时候发现 QueryPlanCache 里面没有它们，于是就会被增加进去，下次就可以直接从 QueryPlanCache 里面取了。那么我们在 Controller 里面执行这两个方法，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">userInfoRepository.</span><span style="color:#B392F0;">findByNameAndCreateTimeBetween</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JK&quot;</span><span style="color:#E1E4E8;">, Instant.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">(),Instant.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">userInfoRepository.</span><span style="color:#B392F0;">findByName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">userInfoRepository.</span><span style="color:#6F42C1;">findByNameAndCreateTimeBetween</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JK&quot;</span><span style="color:#24292E;">, Instant.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">(),Instant.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">userInfoRepository.</span><span style="color:#6F42C1;">findByName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>然后通过断点就会发现 QueryPlanCache 里面多了两个 Cache，如下图所示。</p>`,4),_=s("p",null,"同时，parameterMetadataCache 里面就会多一条 key/value的nativeQuery=true 的解析记录，如下图所示。",-1),d=s("p",null,"通过上面的案例讲解，相信你已经清楚了 QueryPlanCache 的概念，总结起来就是，QueryPlanCache 用来存储的 JQPL 或者 SQL 的 Metadata 信息，从而提升了 Hibernate 执行 JPQL 的性能，因为只有第一次需要把 JPQL 转化成 SQL，后面的每次操作就可以直接从 HashMap 中找到对应的 SQL，直接执行就可以了。",-1),F=s("p",null,"那么它和 Session 到底是什么关系呢？它是否在一级缓存里面？",-1),m=s("h4",{id:"queryplancache-和-session-是什么关系",tabindex:"-1"},[a("QueryPlanCache 和 Session 是什么关系？ "),s("a",{class:"header-anchor",href:"#queryplancache-和-session-是什么关系","aria-label":'Permalink to "QueryPlanCache 和 Session 是什么关系？"'},"​")],-1),h=s("p",null,"我们通过查看源码会发现，在 SessionFactoryImpl 的构造方法里面会 new QueryPlanCache(...)，关键源码如下。",-1),A=s("p",null,"说明这个 application 只需要创建一次 QueryPlanCache，整个项目周期是单例的，也就是可以被不同的 Session 共享，那么我们可以查看 Session 的关键源码，如下图所示。",-1),C=p('<p>也就是说，每一个 SessionImpl 的实例在获得 query plan 之前，都会去同一个 QueryPlanCache 里面查询一下 JPQL 对应的执行计划。所以我们可以看得出来 QueryPlanCache 和 Session 的关系有如下几点。</p><ol><li><p>QueryPlanCache 在整个 Spring Application 周期内就是一个实例；</p></li><li><p>不同的 Session 作用域，可以代表不同的 SessionImpl 实例共享 QueryPlanCache；</p></li><li><p>QueryPlanCache 和我们所说的一级缓存完全不是一个概念，这点你要分清楚。</p></li></ol><p>而实际工作中大部分场景 QueryPlanCache 都是没有问题的，只有在 In 的 SQL 查询的场景会引发内存泄漏的问题，我们看一下。</p><h3 id="queryplancache-中-in-查询引发的内存泄漏问题" tabindex="-1">QueryPlanCache 中 In 查询引发的内存泄漏问题 <a class="header-anchor" href="#queryplancache-中-in-查询引发的内存泄漏问题" aria-label="Permalink to &quot;QueryPlanCache 中 In 查询引发的内存泄漏问题&quot;">​</a></h3><p>我们在实际的工作中使用 JPA 的时候，会发现其内存越来越大，而不会被垃圾回收机制给回收掉，现象就是堆内存随着时间的推移使用量越来越大，如下图所示，很明显是内存泄漏的问题。</p>',5),g=s("p",null,"而我们把堆栈拿出来分析的话会发现，其实是 Hibernate 的 QueryPlanCache 占用了大量的内存，如下图所示。",-1),f=p(`<p>我们点开仔细看的话，发现大部分都是某些 In 相关的 SQL 语句。这就是我们常见的 In 查询引起的内存泄漏，那么为什么会发生这种现象呢？</p><h4 id="in-查询条件引发内存泄漏的原因" tabindex="-1">In 查询条件引发内存泄漏的原因 <a class="header-anchor" href="#in-查询条件引发内存泄漏的原因" aria-label="Permalink to &quot;In 查询条件引发内存泄漏的原因&quot;">​</a></h4><p>我们在 UserInfoRepository 里面新增一个 In 条件的查询方法，模拟一下实际工作中的 In 查询条件的场景，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">//测试In查询条件的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByNameAndUrlIn</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">urls</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">//测试In查询条件的情况</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByNameAndUrlIn</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">urls</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>假设有个需求，查询拥有个人博客地址的用户有哪些？那么我们的 Controller 里面有如下方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UserInfo</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUserInfos</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> urls) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//根据urls批量查询，我们模拟实际工作中的批量查询情况，实际工作中可能会有大量的根据不同的IDS批量查询的场景；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findByNameAndUrlIn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">,urls);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UserInfo</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUserInfos</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> urls) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//根据urls批量查询，我们模拟实际工作中的批量查询情况，实际工作中可能会有大量的根据不同的IDS批量查询的场景；</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findByNameAndUrlIn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">,urls);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们 debug 看一下 QueryPlanCache 里面的情况，会发现随着 In 查询条件的个数增加，会生成不同的 QueryPlanCache，如下图所示，分别是 1 个参数、3 个参数、6个参数的情况。</p>`,7),D=p(`<p>从图中我们可以想象一下，如果业务代码中有各种 In 的查询操作，不同的查询条件的个数肯定在大部分场景中也是不一样的，甚至有些场景我们能一下查询到几百个 ID 对应的数据，可想而知，那得生成多少个 In 相关的 QueryPlanCache 呀。</p><p>而依据 QueryPlanCache 的原理，整个工程都是单例的，放进去之后肯定不会进行内存垃圾回收，那么程序运行时间久了之后就会发生内存泄漏，甚至一段时间之后还会导致内存溢出的现象发生。那么该如何解决此类问题呢？</p><h4 id="解决-in-查询条件内存泄漏的方法" tabindex="-1">解决 In 查询条件内存泄漏的方法 <a class="header-anchor" href="#解决-in-查询条件内存泄漏的方法" aria-label="Permalink to &quot;解决 In 查询条件内存泄漏的方法&quot;">​</a></h4><p><strong>第一种方法：修改缓存的最大条数限制</strong></p><p>正如我们上面介绍的，默认 DEFAULT_QUERY_PLAN_MAX_COUNT = 2048，也就是 query plan 的最大条数限制是 2048。这样默认值可能有点大了，我们可以通过如下方式修改默认值，请看代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#修改 默认的plan_cache_max_size，太小会影响JPQL的执行性能，所以根据实际情况可以自由调整，不宜太小，也不宜太大，太大可能会引发内存溢出</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.jpa.properties.hibernate.query.plan_cache_max_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">512</span></span>
<span class="line"><span style="color:#E1E4E8;">#修改 默认的native query的cache大小</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">128</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#修改 默认的plan_cache_max_size，太小会影响JPQL的执行性能，所以根据实际情况可以自由调整，不宜太小，也不宜太大，太大可能会引发内存溢出</span></span>
<span class="line"><span style="color:#24292E;">spring.jpa.properties.hibernate.query.plan_cache_max_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">512</span></span>
<span class="line"><span style="color:#24292E;">#修改 默认的native query的cache大小</span></span>
<span class="line"><span style="color:#24292E;">spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">128</span></span></code></pre></div><p><strong>第二种方法：根据 max plan count 适当增加堆内存大小</strong></p><p>因为 QueryPlanMaxCount 是有限制的，那么肯定最大堆内存的使用也是有封顶限制的，我们找到临界值修改最小、最大堆内存即可。</p><p><strong>第三种方法：减少 In 的查询 SQL 生成条数</strong>，配置如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">### 默认情况下，不同的in查询条件的个数会生成不同的plan query cache，我们开启了in_clause_parameter_padding之后会减少in生成cache的个数，会根据参数的格式运用几何的算法生成QueryCache；</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.jpa.properties.hibernate.query.in_clause_parameter_padding</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">### 默认情况下，不同的in查询条件的个数会生成不同的plan query cache，我们开启了in_clause_parameter_padding之后会减少in生成cache的个数，会根据参数的格式运用几何的算法生成QueryCache；</span></span>
<span class="line"><span style="color:#24292E;">spring.jpa.properties.hibernate.query.in_clause_parameter_padding</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre></div><p>也就是说，当 In 的时候，参数个数会对应归并 QueryPlanCache 变成 1、2、4、8、16、32、64、128 个参数的 QueryPlanCache。那么我们再看一下刚才参数个数分别在 1、3、4、5、6、7、8 个的时候生成 QueryPlanCache 的情况，如下图所示。</p>`,11),P=s("p",null,"我们会发现，In 产生个数是 1 个的时候，它会共享参数为 1 个的 QueryPlanCache；而当参数是 3、4 个 In 参数的时候，它就会使用 4 个参数的 QueryPlanCache；以此类推，当参数是 5、6、7、8 个的时候，会使用 8 个参数的 QueryPlanCache......这种算法可以大大地减少 In 的不同查询参数生成的 QueryPlanCache 个数，占用的内存自然会减少很多。",-1),v=s("h3",{id:"总结",tabindex:"-1"},[a("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),q=s("p",null,"以上就是本讲介绍的全部内容，主要是帮助你理清工作中关于缓存的一些概念，其实一级缓存的原理我们在前面几讲都有详细介绍。其中你要重点了解一下 Query Plan Cache，因为实际工作中很多人会把它和一级缓存的概念混为一谈。",-1),B=s("p",null,"学习就是不断思考的过程，希望你能踊跃留言讨论。下个课时我会重点介绍二级缓存以及它的最佳实践，到时见。",-1),I=s("blockquote",null,[s("p",null,[a("点击下方链接查看源码（不定时更新）"),s("br"),s("a",{href:"https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa",target:"_blank",rel:"noreferrer"},"https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa")])],-1);function b(Q,M,S,U,L,k){const n=e("Image");return t(),r("div",null,[y,l(n,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/8B/04/Ciqc1F_bHCyAUu5UAACWL1LulDM631.png"}),a(),E,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2B/CgpVE1_Z3dOAL3LeAAQ5bROVfnw790.png"}),a(),i,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2B/CgpVE1_Z3dmAPB5bAAKvPbM8_1U786.png"}),a(),u,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2A/Cip5yF_Z3eCAeweyAAFrt_Cy4Fw449.png"}),a(),_,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2B/CgpVE1_Z3eaAOrDUAAJ8yCqnbQI709.png"}),a(),d,F,m,h,l(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2B/CgpVE1_Z3e6APucVAAH8SpvcdMQ168.png"}),a(),A,l(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2A/Cip5yF_Z3feAeEqeAAMBOQfm2s8156.png"}),a(),C,l(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2B/CgpVE1_Z3f6AJ3zkAAA0cwikRBI522.png"}),a(),g,l(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2A/Cip5yF_Z3gOAAypLAAH1VLcPqOU952.png"}),a(),f,l(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2B/CgpVE1_Z3guAcgqyAAILGhMwzQg748.png"}),a(),D,l(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image2/M01/02/2B/CgpVE1_Z3hWAGkLbAAH30LPJHmA137.png"}),a(),P,v,q,B,I])}const R=o(c,[["render",b]]);export{N as __pageData,R as default};
