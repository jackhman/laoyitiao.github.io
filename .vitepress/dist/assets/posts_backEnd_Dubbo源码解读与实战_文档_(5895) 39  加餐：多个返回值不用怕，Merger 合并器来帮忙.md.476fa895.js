import{_ as a,j as l,o as p,g as o,k as e,h as t,Q as s}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"MergerFactory ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5895) 39  加餐：多个返回值不用怕，Merger 合并器来帮忙.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5895) 39  加餐：多个返回值不用怕，Merger 合并器来帮忙.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(5895) 39  加餐：多个返回值不用怕，Merger 合并器来帮忙.md"},c=s(`<p>你好，我是杨四正，今天我和你分享的主题是 Merger 合并器。</p><p>在上一课时中，我们分析 MergeableClusterInvoker 的具体实现时讲解过这样的内容：MergeableClusterInvoker 中会读取 URL 中的 merger 参数值，如果 merger 参数以 &quot;.&quot; 开头，则表示 &quot;.&quot; 后的内容是一个方法名，这个方法名是远程目标方法的返回类型中的一个方法，MergeableClusterInvoker 在拿到所有 Invoker 返回的结果对象之后，会遍历每个返回结果，并调用 merger 参数指定的方法，合并这些结果值。</p><p>其实，除了上述指定 Merger 方法名称的合并方式之外，Dubbo 内部还提供了很多默认的 Merger 实现，这也就是本课时将要分析的内容。本课时将详细介绍 MergerFactory 工厂类、Merger 接口以及针对 Java 中常见数据类型的 Merger 实现。</p><h3 id="mergerfactory" tabindex="-1">MergerFactory <a class="header-anchor" href="#mergerfactory" aria-label="Permalink to &quot;MergerFactory&quot;">​</a></h3><p>在 MergeableClusterInvoker 使用默认 Merger 实现的时候，会<strong>通过 MergerFactory 以及服务接口返回值类型（returnType），选择合适的 Merger 实现</strong>。</p><p>在 MergerFactory 中维护了一个 ConcurrentHashMap 集合（即 MERGER_CACHE 字段），用来缓存服务接口返回值类型与 Merger 实例之间的映射关系。</p><p>MergerFactory.getMerger() 方法会根据传入的 returnType 类型，从 MERGER_CACHE 缓存中查找相应的 Merger 实现，下面我们来看该方法的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Merger</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMerger</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> returnType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (returnType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// returnType为空，直接抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;returnType is null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Merger result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (returnType.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// returnType为数组类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取数组中元素的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> returnType.</span><span style="color:#B392F0;">getComponentType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取元素类型对应的Merger实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MERGER_CACHE.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">loadMergers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MERGER_CACHE.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果Dubbo没有提供元素类型对应的Merger实现，则返回ArrayMerger</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">type.</span><span style="color:#B392F0;">isPrimitive</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ArrayMerger.INSTANCE;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果returnType不是数组类型，则直接从MERGER_CACHE缓存查找对应的Merger实例</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MERGER_CACHE.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(returnType);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">loadMergers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MERGER_CACHE.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(returnType);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Merger</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMerger</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> returnType) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (returnType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// returnType为空，直接抛出异常</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;returnType is null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Merger result;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (returnType.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// returnType为数组类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取数组中元素的类型</span></span>
<span class="line"><span style="color:#24292E;">        Class type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> returnType.</span><span style="color:#6F42C1;">getComponentType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取元素类型对应的Merger实现</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MERGER_CACHE.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">loadMergers</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MERGER_CACHE.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果Dubbo没有提供元素类型对应的Merger实现，则返回ArrayMerger</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">type.</span><span style="color:#6F42C1;">isPrimitive</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ArrayMerger.INSTANCE;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果returnType不是数组类型，则直接从MERGER_CACHE缓存查找对应的Merger实例</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MERGER_CACHE.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(returnType);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">loadMergers</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MERGER_CACHE.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(returnType);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>loadMergers() 方法会通过 Dubbo SPI 方式加载 Merger 接口全部扩展实现的名称，并填充到 MERGER_CACHE 集合中，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadMergers</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Merger接口的所有扩展名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; names </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Merger.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">getSupportedExtensions</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String name </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> names) { </span><span style="color:#6A737D;">// 遍历所有Merger扩展实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        Merger m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Merger.class).</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将Merger实例与对应returnType的映射关系记录到MERGER_CACHE集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        MERGER_CACHE.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(ReflectUtils.</span><span style="color:#B392F0;">getGenericClass</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()), m);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadMergers</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Merger接口的所有扩展名称</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Merger.class)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">getSupportedExtensions</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String name </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> names) { </span><span style="color:#6A737D;">// 遍历所有Merger扩展实现</span></span>
<span class="line"><span style="color:#24292E;">        Merger m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Merger.class).</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将Merger实例与对应returnType的映射关系记录到MERGER_CACHE集合中</span></span>
<span class="line"><span style="color:#24292E;">        MERGER_CACHE.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(ReflectUtils.</span><span style="color:#6F42C1;">getGenericClass</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()), m);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="arraymerger" tabindex="-1">ArrayMerger <a class="header-anchor" href="#arraymerger" aria-label="Permalink to &quot;ArrayMerger&quot;">​</a></h3><p>在 Dubbo 中提供了处理不同类型返回值的 Merger 实现，其中不仅有处理 boolean[]、byte[]、char[]、double[]、float[]、int[]、long[]、short[] 等<strong>基础类型数组</strong> 的 Merger 实现，还有处理 List、Set、Map 等<strong>集合类</strong>的 Merger 实现，具体继承关系如下图所示：</p>`,12),E=s(`<p>Merger 继承关系图</p><p>我们首先来看 ArrayMerger 实现：<strong>当服务接口的返回值为数组的时候，会使用 ArrayMerger 将多个数组合并成一个数组，也就是将二维数组拍平成一维数组</strong>。ArrayMerger.merge() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[]... items) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ArrayUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(items)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 传入的结果集合为空，则直接返回空数组</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查找第一个不为null的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> items.length </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> items[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 所有items数组中全部结果都为null，则直接返回空数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> items.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> items[i].</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getComponentType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> totalLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> items.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (items[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 忽略为null的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; itemType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> items[i].</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getComponentType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (itemType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> type) { </span><span style="color:#6A737D;">// 保证类型相同</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Arguments&#39; types are different&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        totalLen </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> items[i].length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (totalLen </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 确定最终数组的长度</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(type, totalLen);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历全部的结果数组，将items二维数组中的每个元素都加到result中，形成一维数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] array </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> items) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (array </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> array.length; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Array.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(result, index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">, array[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[]) result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[]... items) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ArrayUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(items)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 传入的结果集合为空，则直接返回空数组</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查找第一个不为null的结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> items.length </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> items[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 所有items数组中全部结果都为null，则直接返回空数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> items.length) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> items[i].</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getComponentType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> totalLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> items.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (items[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 忽略为null的结果</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; itemType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> items[i].</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getComponentType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (itemType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> type) { </span><span style="color:#6A737D;">// 保证类型相同</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Arguments&#39; types are different&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        totalLen </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> items[i].length;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (totalLen </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 确定最终数组的长度</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Object result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(type, totalLen);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历全部的结果数组，将items二维数组中的每个元素都加到result中，形成一维数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] array </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> items) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (array </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> array.length; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                Array.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(result, index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, array[j]);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[]) result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其他基础数据类型数组的 Merger 实现，与 ArrayMerger 的实现非常类似，都是将相应类型的二维数组拍平成同类型的一维数组，这里以 IntArrayMerger 为例进行分析：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[]... items) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ArrayUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(items)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检测传入的多个int[]不能为空</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 直接使用Stream的API将多个int[]数组拍平成一个int[]数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(items).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Objects</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">nonNull)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">flatMapToInt</span><span style="color:#E1E4E8;">(Arrays</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">stream)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[]... items) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ArrayUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(items)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检测传入的多个int[]不能为空</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 直接使用Stream的API将多个int[]数组拍平成一个int[]数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(items).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Objects</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">nonNull)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">flatMapToInt</span><span style="color:#24292E;">(Arrays</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">stream)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>剩余的其他基础类型的 Merger 实现类，例如，FloatArrayMerger、IntArrayMerger、LongArrayMerger、BooleanArrayMerger、ByteArrayMerger、CharArrayMerger、DoubleArrayMerger 等，这里就不再赘述，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><h3 id="mapmerger" tabindex="-1">MapMerger <a class="header-anchor" href="#mapmerger" aria-label="Permalink to &quot;MapMerger&quot;">​</a></h3><p>SetMerger、ListMerger 和 MapMerger 是针对 Set 、List 和 Map 返回值的 Merger 实现，它们会<strong>将多个 Set（或 List、Map）集合合并成一个 Set（或 List、Map）集合</strong>，核心原理与 ArrayMerger 的实现类似。这里我们先来看 MapMerger 的核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(Map</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?&gt;</span><span style="color:#E1E4E8;">... items) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ArrayUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(items)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 空结果集时，这就返回空Map</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptyMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将items中所有Map集合中的KV，添加到result这一个Map集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(items).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Objects</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">nonNull).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(result</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">putAll);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(Map</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?&gt;</span><span style="color:#24292E;">... items) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ArrayUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(items)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 空结果集时，这就返回空Map</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将items中所有Map集合中的KV，添加到result这一个Map集合中</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(items).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Objects</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">nonNull).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(result</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">putAll);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来再看 SetMerger 和 ListMerger 的核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(Set</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">... items) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ArrayUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(items)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 空结果集时，这就返回空Set集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptySet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建一个新的HashSet集合，传入的所有Set集合都添加到result中</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(items).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Objects</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">nonNull).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(result</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">addAll);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">... items) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ArrayUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(items)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 空结果集时，这就返回空Set集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过Stream API将传入的所有List集合拍平成一个List集合并返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(items).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Objects</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">nonNull)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(Collection</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">stream)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(Set</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">... items) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ArrayUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(items)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 空结果集时，这就返回空Set集合</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptySet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个新的HashSet集合，传入的所有Set集合都添加到result中</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(items).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Objects</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">nonNull).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(result</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">addAll);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">... items) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ArrayUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(items)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 空结果集时，这就返回空Set集合</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过Stream API将传入的所有List集合拍平成一个List集合并返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(items).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Objects</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">nonNull)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(Collection</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">stream)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="自定义-merger-扩展实现" tabindex="-1">自定义 Merger 扩展实现 <a class="header-anchor" href="#自定义-merger-扩展实现" aria-label="Permalink to &quot;自定义 Merger 扩展实现&quot;">​</a></h3><p>介绍完 Dubbo 自带的 Merger 实现之后，下面我们还可以尝试动手写一个自己的 Merger 实现，这里我们以 dubbo-demo-xml 中的 Provider 和 Consumer 为例进行修改。</p><p>首先我们在 dubbo-demo-xml-provider 示例模块中<strong>发布两个服务</strong>，分别属于 groupA 和 groupB，相应的 dubbo-provider.xml 配置如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">beans</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">xsi</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">dubbo</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">xmlns</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">xsi</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">schemaLocation</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span>
<span class="line"><span style="color:#9ECBFF;">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">metadata-type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;remote&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;demo-provider&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">metadata-report</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">address</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">registry</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">address</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 配置两个Spring Bean --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;demoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.provider.DemoServiceImpl&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;demoServiceB&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.provider.DemoServiceImpl&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 将demoService和demoServiceB两个Spring Bean作为服务发布出去，分别属于groupA和groupB--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">service</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interface</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;demoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">group</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;groupA&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">service</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interface</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;demoServiceB&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">group</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;groupB&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">beans</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">beans</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">xsi</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">dubbo</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xmlns</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xsi</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">schemaLocation</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span>
<span class="line"><span style="color:#032F62;">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#22863A;">application</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">metadata-type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;remote&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;demo-provider&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">metadata-report</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">address</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#22863A;">registry</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">address</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#22863A;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 配置两个Spring Bean --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;demoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.provider.DemoServiceImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;demoServiceB&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.provider.DemoServiceImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 将demoService和demoServiceB两个Spring Bean作为服务发布出去，分别属于groupA和groupB--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#22863A;">service</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interface</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;demoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">group</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;groupA&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#22863A;">service</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interface</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;demoServiceB&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">group</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;groupB&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">beans</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>接下来，在 dubbo-demo-xml-consumer 示例模块中<strong>进行服务引用</strong>，dubbo-consumer.xml 配置文件的具体内容如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">beans</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">xsi</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">dubbo</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">xmlns</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">xsi</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">schemaLocation</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span>
<span class="line"><span style="color:#9ECBFF;">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;demo-consumer&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">registry</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">address</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 引用DemoService，这里指定了group为*，即可以引用任何group的Provider，同时merger设置为true，即需要对结果进行合并--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">reference</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;demoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interface</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">group</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">merger</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">beans</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">beans</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">xsi</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">dubbo</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xmlns</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xsi</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">schemaLocation</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span>
<span class="line"><span style="color:#032F62;">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#22863A;">application</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;demo-consumer&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#22863A;">registry</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">address</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 引用DemoService，这里指定了group为*，即可以引用任何group的Provider，同时merger设置为true，即需要对结果进行合并--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span><span style="color:#22863A;">reference</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;demoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interface</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">group</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">merger</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">beans</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后，在 dubbo-demo-xml-consumer 示例模块的 /resources/META-INF/dubbo 目录下，添加一个名为 org.apache.dubbo.rpc.cluster.Merger 的 Dubbo SPI 配置文件，其内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.dubbo.demo.consumer.StringMerger</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.dubbo.demo.consumer.StringMerger</span></span></code></pre></div><p>StringMerger 实现了前面介绍的 Merger 接口，它<strong>会将多个 Provider 节点返回的 String 结果值拼接起来</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringMerger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Merger</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(String... </span><span style="color:#FFAB70;">items</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ArrayUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(items)) { </span><span style="color:#6A737D;">// 检测空返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String item </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> items) { </span><span style="color:#6A737D;">// 通过竖线将多个Provider的返回值拼接起来</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;|&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringMerger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Merger</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(String... </span><span style="color:#E36209;">items</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ArrayUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(items)) { </span><span style="color:#6A737D;">// 检测空返回值</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String item </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> items) { </span><span style="color:#6A737D;">// 通过竖线将多个Provider的返回值拼接起来</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;|&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们依次启动 Zookeeper、dubbo-demo-xml-provider 示例模块和 dubbo-demo-xml-consumer 示例模块。在控制台中我们会看到如下输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Hello world, response from provider</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">172.17</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">108</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">179</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">20880</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">Hello world, response from provider</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">172.17</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">108</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">179</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">20880</span><span style="color:#F97583;">|</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Hello world, response from provider</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">172.17</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">108</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">179</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">20880</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">Hello world, response from provider</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">172.17</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">108</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">179</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">20880</span><span style="color:#D73A49;">|</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们重点介绍了 MergeableCluster 中涉及的 Merger 合并器相关的知识点。</p><ul><li><p>首先，我们介绍了 MergerFactory 工厂类的核心功能，它可以配合远程方法调用的返回值，选择对应的 Merger 实现，完成结果的合并。</p></li><li><p>然后，我们深入分析了 Dubbo 自带的 Merger 实现类，涉及 Java 中各个基础类型数组的 Merger 合并器实现，例如，IntArrayMerger、LongArrayMerger 等，它们都是将多个特定类型的一维数组拍平成相同类型的一维数组。</p></li><li><p>除了这些基础类型数组的 Merger 实现，Dubbo 还提供了 List、Set、Map 等集合类的 Merger 实现，它们的核心是将多个集合中的元素整理到一个同类型的集合中。</p></li><li><p>最后，我们还以 StringMerger 为例，介绍了如何自定义 Merger 合并器。</p></li></ul><p>下一课时，我们将介绍 Dubbo 中 Mock 机制相关的内容，记得按时来听课。</p>`,27);function y(i,F,u,g,A,d){const n=l("Image");return p(),o("div",null,[c,e(n,{alt:"Lark20201208-135542.png",src:"https://s0.lgstatic.com/i/image/M00/7E/63/CgqCHl_PFWiAbmfPAAPxSnmLN4s499.png"}),t(),E])}const D=a(r,[["render",y]]);export{b as __pageData,D as default};
