import{_ as p,j as e,o as t,g as c,k as l,h as a,Q as o,s}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"19微服务网关如何作为服务端统一入口点？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3839) 19  微服务网关如何作为服务端统一入口点？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3839) 19  微服务网关如何作为服务端统一入口点？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3839) 19  微服务网关如何作为服务端统一入口点？.md"},y=o('<h1 id="_19微服务网关如何作为服务端统一入口点" tabindex="-1">19微服务网关如何作为服务端统一入口点？ <a class="header-anchor" href="#_19微服务网关如何作为服务端统一入口点" aria-label="Permalink to &quot;19微服务网关如何作为服务端统一入口点？&quot;">​</a></h1><p>在单体架构中，客户端在向服务端发起请求时，会通过类似 Nginx 的负载均衡组件获取到多个相同的应用程序实例中的一个。请求由该服务实例进行处理，服务端处理完之后返回响应给客户端。</p><p>而在微服务架构下，原来的单体应用拆分成了多个业务微服务。此时，直接对外暴露这些业务微服务，必然会存在一些问题。客户端直接向每个微服务发送请求，其问题主要如下：</p><ul><li><p>API 粒度的问题，客户端需求和每个微服务暴露的细粒度可能存在 API 不匹配的情况。</p></li><li><p>微服务之间的调用可能不仅仅基于 HTTP 的方式，还有可能使用 Thrift、gRPC 和 AMQP 消息传递协议，这些 API 无法暴露出去。</p></li><li><p>直接对外暴露接口，使得微服务难以重构，特别是服务数量达到一个量级，这类重构就非常困难了。</p></li></ul><p>如上问题，解决的方案是使用微服务网关。<strong>网关在一个 API 架构中的作用是保护、增强和控制外部请求对于 API 服务的访问</strong>。</p><h3 id="什么是微服务网关" tabindex="-1">什么是微服务网关 <a class="header-anchor" href="#什么是微服务网关" aria-label="Permalink to &quot;什么是微服务网关&quot;">​</a></h3><p>在微服务架构中，网关位于接入层之下和业务服务层之上。微服务网关是微服务架构中的一个基础服务，从面向对象设计的角度看，它与外观模式类似。</p>',7),E=s("p",null,"微服务架构图",-1),i=s("p",null,[a("微服务网关封装了系统内部架构，为每个客户端提供一个定制的 API，用来保护、增强和控制对于微服务的访问。换句话来讲，"),s("strong",null,"微服务网关就是一个处于应用程序或服务之前的系统，用来管理授权、访问控制和流量限制等"),a("，这样微服务就会被微服务网关保护起来，对所有的调用者透明。因此，隐藏在微服务网关后面的业务系统就可以更加专注于业务本身。")],-1),F=s("h3",{id:"微服务网关的功能特性",tabindex:"-1"},[a("微服务网关的功能特性 "),s("a",{class:"header-anchor",href:"#微服务网关的功能特性","aria-label":'Permalink to "微服务网关的功能特性"'},"​")],-1),u=s("p",null,"作为连接服务消费方和服务提供方的中间件系统，微服务网关将各自业务系统的演进和发展做了天然的隔离，使业务系统更加专注于业务服务本身，同时微服务网关还可以为服务提供和沉淀更多附加功能。",-1),g=s("p",null,"微服务网关的主要功能特性如下图所示：",-1),d=o(`<p>网关的功能特性示意图</p><p>结合该图，我们就来具体介绍下这四类功能。</p><ul><li><p><strong>请求接入</strong>。管理所有接入请求，作为所有 API 接口的请求入口。在生产环境中，为了保护内部系统的安全性，往往内网与外网都是隔离的，服务端应用都是运行在内网环境中，为了安全，一般不允许外部直接访问。网关可以通过校验规则和配置白名单，对外部请求进行初步过滤，这种方式更加动态灵活。</p></li><li><p><strong>统一管理</strong>。可以提供统一的监控工具、配置管理和接口的 API 文档管理等基础设施。例如，统一配置日志切面，并记录对应的日志文件。</p></li><li><p><strong>解耦</strong>。可以使得微服务系统的各方能够独立、自由、高效、灵活地调整，而不用担心给其他方面带来影响。软件系统的整个过程中包括不同的角色，有服务的开发提供方、服务的用户、运维人员、安全管理人员等，每个角色的职责和关注点都不同。微服务网关可以很好地解耦各方的相互依赖关系，让各个角色的用户更加专注自己的目标。</p></li><li><p><strong>拦截插件</strong>。服务网关层除了处理请求的路由转发外，还需要负责认证鉴权、限流熔断、监控和安全防范等，这些功能的实现方式，往往随着业务的变化不断调整。这就要求网关层提供一套机制，可以很好地支持这种动态扩展。拦截策略提供了一个扩展点，方便通过扩展机制对请求进行一系列加工和处理。同时还可以提供统一的安全、路由和流控等公共服务组件。</p></li></ul><h3 id="实战案例-自己动手实现一个网关" tabindex="-1">实战案例：自己动手实现一个网关 <a class="header-anchor" href="#实战案例-自己动手实现一个网关" aria-label="Permalink to &quot;实战案例：自己动手实现一个网关&quot;">​</a></h3><p>API 网关最基础的功能是对请求进行路由转发，根据配置的转发规则将请求动态地转发到指定的服务实例。动态是指与服务发现结合，如 Consul、ZooKeeper 等组件，我们在前面的&quot;服务注册与发现&quot;模块已详细讲解。本课时我们将会使用 Go 实现一个简易的 API 网关。</p><p>API 网关根据客户端 HTTP 请求，动态查询注册中心的服务实例，通过<strong>反向代理</strong>实现对后台服务的调用。</p><p>API 网关将符合规则的请求路由调用对应的后端服务。这里的规则可以有很多种，如 HTTP 请求的资源路径、方法、头部和参数等。这里我们以最简单的请求路径为例，规则为 <strong>：/{serviceName}/#</strong>。即：路径第一部分为注册中心服务实例名称，其余部分为服务实例的 REST 路径。如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cargo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cargos</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cargo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locations</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">cargo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cargos</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">cargo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locations</span></span></code></pre></div><p>其中：</p><ul><li><p>/cargo-service 为服务名称；</p></li><li><p>/locations 为 cargo-service 服务提供的接口。</p></li></ul><h4 id="_1-实现思路" tabindex="-1">1. 实现思路 <a class="header-anchor" href="#_1-实现思路" aria-label="Permalink to &quot;1. 实现思路&quot;">​</a></h4><p>客户端向网关发起请求，网关解析请求资源路径中的信息，根据服务名称查询注册中心的服务实例；然后使用反向代理技术把客户端请求转发至后端真实的服务实例，请求执行完毕后，再把响应信息返回客户端。</p>`,12),C=o(`<p>自定义网关的调用请求示意图</p><p>我们设计实现的网关的功能主要包含如下几点：</p><ul><li><p>HTTP请求的规则遵循 /{serviceName}/#，否则不予通过。</p></li><li><p>使用 Go 提供的反向代理包 httputil.ReverseProxy 实现一个简单的反向代理，它能够对请求实现负载均衡，随机地把请求发送给服务实例。</p></li><li><p>使用 Consul 客户端 API 动态查询服务实例。</p></li></ul><h4 id="_2-编写反向代理方法" tabindex="-1">2. 编写反向代理方法 <a class="header-anchor" href="#_2-编写反向代理方法" aria-label="Permalink to &quot;2. 编写反向代理方法&quot;">​</a></h4><p>创建目录 gateway，然后新建 main.go 文件。NewReverseProxy 方法接受<strong>两个参数：Consul 客户端对象 api.Client 和日志记录工具 log.Logger</strong>，返回反向代理对象。该方法的实现过程如下：</p><ul><li><p>获取请求路径，检查是否符合规则，不符合规则直接返回；</p></li><li><p>解析请求路径，获取服务名称（请求路径的第一部分）；</p></li><li><p>使用 Consul 客户端查询服务实例，若查询到结果，则随机选择一个作为目标实例；</p></li><li><p>根据选定的目标实例，设置反向代理参数 Schema、Host 和 Path。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 section19/gateway/main.go</span></span>
<span class="line"><span style="color:#6A737D;">// NewReverseProxy 创建反向代理处理方法</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">NewReverseProxy</span><span style="color:#E1E4E8;">(client </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">api.Client, logger log.Logger) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">httputil.ReverseProxy {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建 Director</span></span>
<span class="line"><span style="color:#E1E4E8;">    director </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(req </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//查询原始请求路径，如：/arithmetic/calculate</span></span>
<span class="line"><span style="color:#E1E4E8;">        reqPath </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> req.URL.Path</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> reqPath </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//按照分隔符&#39;/&#39;对路径进行分解，获取服务名称serviceName</span></span>
<span class="line"><span style="color:#E1E4E8;">        pathArray </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#B392F0;">Split</span><span style="color:#E1E4E8;">(reqPath, </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceName </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> pathArray[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//调用consul api查询serviceName的服务实例列表</span></span>
<span class="line"><span style="color:#E1E4E8;">        result, _, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">Catalog</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;">(serviceName, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, nil)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ReverseProxy failed&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;query service instace error&quot;</span><span style="color:#E1E4E8;">, err.</span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(result) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ReverseProxy failed&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;no such service instance&quot;</span><span style="color:#E1E4E8;">, serviceName)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//重新组织请求路径，去掉服务名称部分</span></span>
<span class="line"><span style="color:#E1E4E8;">        destPath </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#B392F0;">Join</span><span style="color:#E1E4E8;">(pathArray[</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//随机选择一个服务实例</span></span>
<span class="line"><span style="color:#E1E4E8;">        tgt </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> result[rand.</span><span style="color:#B392F0;">Int</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">%</span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(result)]</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;service id&quot;</span><span style="color:#E1E4E8;">, tgt.ServiceID)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//设置代理服务地址信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        req.URL.Scheme </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        req.URL.Host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#B392F0;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s:%d&quot;</span><span style="color:#E1E4E8;">, tgt.ServiceAddress, tgt.ServicePort)</span></span>
<span class="line"><span style="color:#E1E4E8;">        req.URL.Path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> destPath</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">httputil.ReverseProxy{Director</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> director}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 section19/gateway/main.go</span></span>
<span class="line"><span style="color:#6A737D;">// NewReverseProxy 创建反向代理处理方法</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">NewReverseProxy</span><span style="color:#24292E;">(client </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">api.Client, logger log.Logger) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">httputil.ReverseProxy {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建 Director</span></span>
<span class="line"><span style="color:#24292E;">    director </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(req </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//查询原始请求路径，如：/arithmetic/calculate</span></span>
<span class="line"><span style="color:#24292E;">        reqPath </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> req.URL.Path</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> reqPath </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//按照分隔符&#39;/&#39;对路径进行分解，获取服务名称serviceName</span></span>
<span class="line"><span style="color:#24292E;">        pathArray </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">Split</span><span style="color:#24292E;">(reqPath, </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        serviceName </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> pathArray[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//调用consul api查询serviceName的服务实例列表</span></span>
<span class="line"><span style="color:#24292E;">        result, _, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">Catalog</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Service</span><span style="color:#24292E;">(serviceName, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, nil)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ReverseProxy failed&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;query service instace error&quot;</span><span style="color:#24292E;">, err.</span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(result) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ReverseProxy failed&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;no such service instance&quot;</span><span style="color:#24292E;">, serviceName)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//重新组织请求路径，去掉服务名称部分</span></span>
<span class="line"><span style="color:#24292E;">        destPath </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">Join</span><span style="color:#24292E;">(pathArray[</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//随机选择一个服务实例</span></span>
<span class="line"><span style="color:#24292E;">        tgt </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> result[rand.</span><span style="color:#6F42C1;">Int</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(result)]</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;service id&quot;</span><span style="color:#24292E;">, tgt.ServiceID)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//设置代理服务地址信息</span></span>
<span class="line"><span style="color:#24292E;">        req.URL.Scheme </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http&quot;</span></span>
<span class="line"><span style="color:#24292E;">        req.URL.Host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fmt.</span><span style="color:#6F42C1;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s:%d&quot;</span><span style="color:#24292E;">, tgt.ServiceAddress, tgt.ServicePort)</span></span>
<span class="line"><span style="color:#24292E;">        req.URL.Path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> destPath</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">httputil.ReverseProxy{Director</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> director}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span></code></pre></div><p>在反向转发处理的时候，我们只是根据请求中的服务名直接转发，如果需要对外屏蔽服务名的话，这样的路由转发规则显然是不够的。为了增加路由配置的多样性，我们可以抽出路由配置层，根据指定的规则进行路由转发，如根据配置名称、头部的信息、请求的参数、请求的 body 等规则转发到指定的服务。</p><h4 id="_3-编写入口方法" tabindex="-1">3. 编写入口方法 <a class="header-anchor" href="#_3-编写入口方法" aria-label="Permalink to &quot;3. 编写入口方法&quot;">​</a></h4><p>main 方法的主要任务是创建 Consul 连接对象、创建日志记录对象和开启反向代理 HTTP 服务。整个过程与前面课时创建用户服务类似，代码如下（为了测试方便，直接指定了 Consul 服务地址信息）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 section19/gateway/main.go:65</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建环境变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        consulHost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> flag.</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;consul.host&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;consul server ip address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        consulPort </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> flag.</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;consul.port&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;8500&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;consul server port&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    flag.</span><span style="color:#B392F0;">Parse</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建日志组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    var logger log.Logger</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> log.</span><span style="color:#B392F0;">NewLogfmtLogger</span><span style="color:#E1E4E8;">(os.Stderr)</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> log.</span><span style="color:#B392F0;">With</span><span style="color:#E1E4E8;">(logger, </span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">, log.DefaultTimestampUTC)</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> log.</span><span style="color:#B392F0;">With</span><span style="color:#E1E4E8;">(logger, </span><span style="color:#9ECBFF;">&quot;caller&quot;</span><span style="color:#E1E4E8;">, log.DefaultCaller)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建consul api客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">    consulConfig </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> api.</span><span style="color:#B392F0;">DefaultConfig</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    consulConfig.Address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">consulHost </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">consulPort</span></span>
<span class="line"><span style="color:#E1E4E8;">    consulClient, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> api.</span><span style="color:#B392F0;">NewClient</span><span style="color:#E1E4E8;">(consulConfig)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;err&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        os.</span><span style="color:#B392F0;">Exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建反向代理</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxy </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewReverseProxy</span><span style="color:#E1E4E8;">(consulClient, logger)</span></span>
<span class="line"><span style="color:#E1E4E8;">    errc </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(chan error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    go </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        c </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">(chan os.Signal)</span></span>
<span class="line"><span style="color:#E1E4E8;">        signal.</span><span style="color:#B392F0;">Notify</span><span style="color:#E1E4E8;">(c, syscall.SIGINT, syscall.SIGTERM)</span></span>
<span class="line"><span style="color:#E1E4E8;">        errc </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#B392F0;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">c)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//开始监听</span></span>
<span class="line"><span style="color:#E1E4E8;">    go </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;transport&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;HTTP&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;addr&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;9099&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        errc </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">ListenAndServe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:9099&quot;</span><span style="color:#E1E4E8;">, proxy)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 开始运行，等待结束</span></span>
<span class="line"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;exit&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">errc)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 section19/gateway/main.go:65</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建环境变量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        consulHost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> flag.</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;consul.host&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;consul server ip address&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        consulPort </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> flag.</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;consul.port&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;8500&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;consul server port&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    flag.</span><span style="color:#6F42C1;">Parse</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建日志组件</span></span>
<span class="line"><span style="color:#24292E;">    var logger log.Logger</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> log.</span><span style="color:#6F42C1;">NewLogfmtLogger</span><span style="color:#24292E;">(os.Stderr)</span></span>
<span class="line"><span style="color:#24292E;">        logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> log.</span><span style="color:#6F42C1;">With</span><span style="color:#24292E;">(logger, </span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">, log.DefaultTimestampUTC)</span></span>
<span class="line"><span style="color:#24292E;">        logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> log.</span><span style="color:#6F42C1;">With</span><span style="color:#24292E;">(logger, </span><span style="color:#032F62;">&quot;caller&quot;</span><span style="color:#24292E;">, log.DefaultCaller)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建consul api客户端</span></span>
<span class="line"><span style="color:#24292E;">    consulConfig </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> api.</span><span style="color:#6F42C1;">DefaultConfig</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    consulConfig.Address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">consulHost </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">consulPort</span></span>
<span class="line"><span style="color:#24292E;">    consulClient, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> api.</span><span style="color:#6F42C1;">NewClient</span><span style="color:#24292E;">(consulConfig)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;err&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        os.</span><span style="color:#6F42C1;">Exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建反向代理</span></span>
<span class="line"><span style="color:#24292E;">    proxy </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewReverseProxy</span><span style="color:#24292E;">(consulClient, logger)</span></span>
<span class="line"><span style="color:#24292E;">    errc </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">(chan error)</span></span>
<span class="line"><span style="color:#24292E;">    go </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        c </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">(chan os.Signal)</span></span>
<span class="line"><span style="color:#24292E;">        signal.</span><span style="color:#6F42C1;">Notify</span><span style="color:#24292E;">(c, syscall.SIGINT, syscall.SIGTERM)</span></span>
<span class="line"><span style="color:#24292E;">        errc </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> fmt.</span><span style="color:#6F42C1;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">c)</span></span>
<span class="line"><span style="color:#24292E;">    }()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//开始监听</span></span>
<span class="line"><span style="color:#24292E;">    go </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;transport&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;HTTP&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;addr&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;9099&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        errc </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">ListenAndServe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:9099&quot;</span><span style="color:#24292E;">, proxy)</span></span>
<span class="line"><span style="color:#24292E;">    }()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 开始运行，等待结束</span></span>
<span class="line"><span style="color:#24292E;">    logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;exit&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">errc)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上的代码实现，为了创建反向代理，需要先创建日志组件和 Consul 连接对象。反向代理处理器一般还可以使用装饰者模式封装，如增加中间件 Hystrix 断路器、链路追踪 Tracer（Zipkin、Jaeger）组件等。</p><h4 id="_4-运行货运与网关服务" tabindex="-1">4. 运行货运与网关服务 <a class="header-anchor" href="#_4-运行货运与网关服务" aria-label="Permalink to &quot;4. 运行货运与网关服务&quot;">​</a></h4><p>做好如上的准备步骤之后，我们开始运行货运服务。为了测试负载均衡效果，启动两个实例。这里我们是在一台主机上测试，所以需要使用不同的端口。首先编译货运服务：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">$  go build -o cmd/cargo cmd/main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">$  go build -o cmd/cargo cmd/main.go</span></span></code></pre></div><p>在 cmd 目录下生成了 cargo 可执行文件，下面我们就分别来启动两个货运服务实例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cargo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cmd</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cargo </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consul.host localhost </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consul.port </span><span style="color:#79B8FF;">8500</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service.host </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service.port </span><span style="color:#79B8FF;">8000</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cargo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cmd</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cargo </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consul.host localhost </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consul.port </span><span style="color:#79B8FF;">8500</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service.host </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service.port </span><span style="color:#79B8FF;">8002</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cargo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cmd</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cargo </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consul.host localhost </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consul.port </span><span style="color:#005CC5;">8500</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service.host </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service.port </span><span style="color:#005CC5;">8000</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cargo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cmd</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cargo </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consul.host localhost </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consul.port </span><span style="color:#005CC5;">8500</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service.host </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service.port </span><span style="color:#005CC5;">8002</span></span></code></pre></div><p>启动成功并注册到 Consul，控制台输出如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">28T10</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">12.</span><span style="color:#FDAEB7;font-style:italic;">974789Z</span><span style="color:#E1E4E8;"> transport</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">http address</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8000</span><span style="color:#E1E4E8;"> msg</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">listening</span></span>
<span class="line"><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">28T10</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">13.</span><span style="color:#FDAEB7;font-style:italic;">006241Z</span><span style="color:#E1E4E8;"> service</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cargo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service tags</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;[cargo-service aoho]&quot;</span><span style="color:#E1E4E8;"> address</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">localhost action</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">register</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">07</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">28T10</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">12.</span><span style="color:#B31D28;font-style:italic;">974789Z</span><span style="color:#24292E;"> transport</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">http address</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8000</span><span style="color:#24292E;"> msg</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">listening</span></span>
<span class="line"><span style="color:#24292E;">ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">07</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">28T10</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">13.</span><span style="color:#B31D28;font-style:italic;">006241Z</span><span style="color:#24292E;"> service</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cargo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service tags</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;[cargo-service aoho]&quot;</span><span style="color:#24292E;"> address</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">localhost action</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">register</span></span></code></pre></div><p>再切换至目录 gateway，执行 go build 完成编译，最后启动网关服务。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gateway </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consul.host localhost </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consul.port </span><span style="color:#79B8FF;">8500</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">28T10</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">37.</span><span style="color:#FDAEB7;font-style:italic;">662124Z</span><span style="color:#E1E4E8;"> caller</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">main.go</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;"> transport</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">HTTP addr</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9099</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gateway </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consul.host localhost </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consul.port </span><span style="color:#005CC5;">8500</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">07</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">28T10</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">37.</span><span style="color:#B31D28;font-style:italic;">662124Z</span><span style="color:#24292E;"> caller</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">main.go</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">56</span><span style="color:#24292E;"> transport</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">HTTP addr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9099</span></span></code></pre></div><h4 id="_5-测试" tabindex="-1">5. 测试 <a class="header-anchor" href="#_5-测试" aria-label="Permalink to &quot;5. 测试&quot;">​</a></h4><p>网关服务和两个货运服务实例启动好之后，我们通过命令行请求货运服务的接口 /cargos，以获取指定 Id 的货运信息，请求如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">$ curl -X POST \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">http://localhost:9099/cargo-service/cargos/ \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">-H &#39;Content-Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">application/json&#39; \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">-d &#39;{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;Id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ABC123&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;cargo&quot;: {</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;arrival_deadline&quot;: &quot;2020-08-11T18:56:44.627+08:00&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;destination&quot;: &quot;CNHKG&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;misrouted&quot;: false,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;origin&quot;: &quot;SESTO&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;routed&quot;: false,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;tracking_id&quot;: &quot;ABC123&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">$ curl -X POST \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">http://localhost:9099/cargo-service/cargos/ \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">-H &#39;Content-Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">application/json&#39; \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">-d &#39;{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;Id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ABC123&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#032F62;">    &quot;cargo&quot;: {</span></span>
<span class="line"><span style="color:#032F62;">        &quot;arrival_deadline&quot;: &quot;2020-08-11T18:56:44.627+08:00&quot;,</span></span>
<span class="line"><span style="color:#032F62;">        &quot;destination&quot;: &quot;CNHKG&quot;,</span></span>
<span class="line"><span style="color:#032F62;">        &quot;misrouted&quot;: false,</span></span>
<span class="line"><span style="color:#032F62;">        &quot;origin&quot;: &quot;SESTO&quot;,</span></span>
<span class="line"><span style="color:#032F62;">        &quot;routed&quot;: false,</span></span>
<span class="line"><span style="color:#032F62;">        &quot;tracking_id&quot;: &quot;ABC123&quot;</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre></div><p>同时，在终端可以看到如下输出，说明多次请求访问了不同的服务实例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">28T10</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">51.</span><span style="color:#FDAEB7;font-style:italic;">108611Z</span><span style="color:#E1E4E8;"> caller</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">main.go</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">96</span><span style="color:#E1E4E8;"> serviceid</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cargo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service64ffdd53</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">9c66</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">43cb</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">9ada</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">0d48ebddc632</span></span>
<span class="line"><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">28T10</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">215364Z</span><span style="color:#E1E4E8;"> caller</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">main.go</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">96</span><span style="color:#E1E4E8;"> serviceid</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cargo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">servicee8c53e6f</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e4ff</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4737</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a3bd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f1b11b0b2e95</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">07</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">28T10</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">51.</span><span style="color:#B31D28;font-style:italic;">108611Z</span><span style="color:#24292E;"> caller</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">main.go</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">96</span><span style="color:#24292E;"> serviceid</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cargo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service64ffdd53</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">9c66</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">43cb</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">9ada</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">0d48ebddc632</span></span>
<span class="line"><span style="color:#24292E;">ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">07</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">28T10</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">215364Z</span><span style="color:#24292E;"> caller</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">main.go</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">96</span><span style="color:#24292E;"> serviceid</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cargo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">servicee8c53e6f</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e4ff</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4737</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a3bd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f1b11b0b2e95</span></span></code></pre></div><p>本案例我们使用反向代理技术，并结合注册中心 Consul 实现了简单的 API 网关。Go 提供了反向代理工具包，使得整个实现过程变得比较简单。实际项目中使用的产品，如 Zuul、Nginx 等，还包含了限流、请求过滤、身份认证等功能。该网关虽然仅仅实现了请求的代理，但重点在于帮助你了解了网关实现的基本原理，从而为后续网关功能的扩增打下基础。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本课时我们首先介绍了微服务网关产生的背景及其相关概念，然后还介绍了微服务网关在微服务架构中的职能。作为服务端的统一入口点，微服务网关主要用来实现接入请求、统一管理、解耦和配置拦截策略等功能。最后，为便于你更加详细地了解网关组件相关功能的实现原理，我们还自己动手实现了一个 Go 微服务网关，你可以跟着上手实操下。</p><p>学完本课时，你可以结合自己的实践经验，思考下我们实现的简易网关还需要承担哪些微服务架构中的职责。欢迎你在留言区积极发言和讨论。</p>`,31);function A(q,h,D,v,B,_){const n=e("Image");return t(),c("div",null,[y,l(n,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/49/51/Ciqc1F9PEWKAY5XRAAEa4_VCymc032.png"}),a(),E,i,F,u,g,l(n,{alt:"Lark20200902-114139.png",src:"https://s0.lgstatic.com/i/image/M00/49/5F/CgqCHl9PFI2AGA5BAADjWoNo2mw717.png"}),a(),d,l(n,{alt:"image (11).png",src:"https://s0.lgstatic.com/i/image/M00/49/5C/CgqCHl9PEZSAS2voAAETpEE9DGU705.png"}),a(),C])}const P=p(r,[["render",A]]);export{f as __pageData,P as default};
