import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.4e7d56ce.js";const u=JSON.parse('{"title":"42加餐：服务引用流程全解析","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5964) 42  加餐：服务引用流程全解析.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5964) 42  加餐：服务引用流程全解析.md","lastUpdated":1696338709000}'),p={name:"posts/backEnd/Dubbo源码解读与实战_文档/(5964) 42  加餐：服务引用流程全解析.md"},o=l(`<h1 id="_42加餐-服务引用流程全解析" tabindex="-1">42加餐：服务引用流程全解析 <a class="header-anchor" href="#_42加餐-服务引用流程全解析" aria-label="Permalink to &quot;42加餐：服务引用流程全解析&quot;">​</a></h1><p>Dubbo 作为一个 RPC 框架，暴露给用户最基本的功能就是服务发布和服务引用。在上一课时，我们已经分析了服务发布的核心流程。那么在本课时，我们就接着深入分析<strong>服务引用的核心流程</strong>。</p><p>Dubbo 支持两种方式引用远程的服务：</p><ul><li><p><strong>服务直连的方式</strong> ，仅适合在<strong>调试服务</strong>的时候使用；</p></li><li><p><strong>基于注册中心引用服务</strong> ，这是<strong>生产环境</strong>中使用的服务引用方式。</p></li></ul><h3 id="dubbobootstrap-入口" tabindex="-1">DubboBootstrap 入口 <a class="header-anchor" href="#dubbobootstrap-入口" aria-label="Permalink to &quot;DubboBootstrap 入口&quot;">​</a></h3><p>在上一课时介绍服务发布的时候，我们介绍了 DubboBootstrap.start() 方法的核心流程，其中除了会<strong>调用 exportServices() 方法完成服务发布</strong> 之外，还会<strong>调用 referServices() 方法完成服务引用</strong> ，这里就不再贴出 DubboBootstrap.start() 方法的具体代码，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>在 DubboBootstrap.referServices() 方法中，会从 ConfigManager 中获取所有 ReferenceConfig 列表，并根据 ReferenceConfig 获取对应的代理对象，入口逻辑如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">referServices</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cache </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 初始ReferenceConfigCache</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReferenceConfigCache.</span><span style="color:#B392F0;">getCache</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    configManager.</span><span style="color:#B392F0;">getReferences</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(rc </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 遍历ReferenceConfig列表</span></span>
<span class="line"><span style="color:#E1E4E8;">        ReferenceConfig referenceConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ReferenceConfig) rc;</span></span>
<span class="line"><span style="color:#E1E4E8;">        referenceConfig.</span><span style="color:#B392F0;">setBootstrap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rc.</span><span style="color:#B392F0;">shouldInit</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 检测ReferenceConfig是否已经初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (referAsync) { </span><span style="color:#6A737D;">// 异步</span></span>
<span class="line"><span style="color:#E1E4E8;">                CompletableFuture&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ScheduledCompletableFuture.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        executorRepository.</span><span style="color:#B392F0;">getServiceExporterExecutor</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                        () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(rc)</span></span>
<span class="line"><span style="color:#E1E4E8;">                );</span></span>
<span class="line"><span style="color:#E1E4E8;">                asyncReferringFutures.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(future);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 同步</span></span>
<span class="line"><span style="color:#E1E4E8;">                cache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(rc);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">referServices</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cache </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 初始ReferenceConfigCache</span></span>
<span class="line"><span style="color:#24292E;">        cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReferenceConfigCache.</span><span style="color:#6F42C1;">getCache</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    configManager.</span><span style="color:#6F42C1;">getReferences</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(rc </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 遍历ReferenceConfig列表</span></span>
<span class="line"><span style="color:#24292E;">        ReferenceConfig referenceConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ReferenceConfig) rc;</span></span>
<span class="line"><span style="color:#24292E;">        referenceConfig.</span><span style="color:#6F42C1;">setBootstrap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rc.</span><span style="color:#6F42C1;">shouldInit</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 检测ReferenceConfig是否已经初始化</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (referAsync) { </span><span style="color:#6A737D;">// 异步</span></span>
<span class="line"><span style="color:#24292E;">                CompletableFuture&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ScheduledCompletableFuture.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        executorRepository.</span><span style="color:#6F42C1;">getServiceExporterExecutor</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                        () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(rc)</span></span>
<span class="line"><span style="color:#24292E;">                );</span></span>
<span class="line"><span style="color:#24292E;">                asyncReferringFutures.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(future);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 同步</span></span>
<span class="line"><span style="color:#24292E;">                cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(rc);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 ReferenceConfig 是哪里来的呢？在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=4257" target="_blank" rel="noreferrer">第 01 课时</a>dubbo-demo-api-consumer 示例中，我们可以看到构造 ReferenceConfig 对象的逻辑，这些新建的 ReferenceConfig 对象会通过 DubboBootstrap.reference() 方法添加到 ConfigManager 中进行管理，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DubboBootstrap </span><span style="color:#B392F0;">reference</span><span style="color:#E1E4E8;">(ReferenceConfig</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> referenceConfig) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    configManager.</span><span style="color:#B392F0;">addReference</span><span style="color:#E1E4E8;">(referenceConfig);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DubboBootstrap </span><span style="color:#6F42C1;">reference</span><span style="color:#24292E;">(ReferenceConfig</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> referenceConfig) {</span></span>
<span class="line"><span style="color:#24292E;">    configManager.</span><span style="color:#6F42C1;">addReference</span><span style="color:#24292E;">(referenceConfig);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="referenceconfigcache" tabindex="-1">ReferenceConfigCache <a class="header-anchor" href="#referenceconfigcache" aria-label="Permalink to &quot;ReferenceConfigCache&quot;">​</a></h3><p><strong>服务引用的核心实现在 ReferenceConfig 之中</strong>，一个 ReferenceConfig 对象对应一个服务接口，每个 ReferenceConfig 对象中都封装了与注册中心的网络连接，以及与 Provider 的网络连接，这是一个非常重要的对象。</p><p><strong>为了避免底层连接泄漏造成性能问题，从 Dubbo 2.4.0 版本开始，Dubbo 提供了 ReferenceConfigCache 用于缓存 ReferenceConfig 实例。</strong></p><p>在 dubbo-demo-api-consumer 示例中，我们可以看到 ReferenceConfigCache 的基本使用方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ReferenceConfig&lt;</span><span style="color:#F97583;">DemoService</span><span style="color:#E1E4E8;">&gt; reference </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ReferenceConfig&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">reference.</span><span style="color:#B392F0;">setInterface</span><span style="color:#E1E4E8;">(DemoService.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">... </span></span>
<span class="line"><span style="color:#6A737D;">// 这一步在DubboBootstrap.start()方法中完成</span></span>
<span class="line"><span style="color:#E1E4E8;">ReferenceConfigCache cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReferenceConfigCache.</span><span style="color:#B392F0;">getCache</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">DemoService demoService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReferenceConfigCache.</span><span style="color:#B392F0;">getCache</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(reference);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ReferenceConfig&lt;</span><span style="color:#D73A49;">DemoService</span><span style="color:#24292E;">&gt; reference </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ReferenceConfig&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">reference.</span><span style="color:#6F42C1;">setInterface</span><span style="color:#24292E;">(DemoService.class);</span></span>
<span class="line"><span style="color:#24292E;">... </span></span>
<span class="line"><span style="color:#6A737D;">// 这一步在DubboBootstrap.start()方法中完成</span></span>
<span class="line"><span style="color:#24292E;">ReferenceConfigCache cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReferenceConfigCache.</span><span style="color:#6F42C1;">getCache</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">DemoService demoService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReferenceConfigCache.</span><span style="color:#6F42C1;">getCache</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(reference);</span></span></code></pre></div><p>在 ReferenceConfigCache 中维护了一个静态的 Map（CACHE_HOLDER）字段，其中 Key 是由 Group、服务接口和 version 构成，Value 是一个 ReferenceConfigCache 对象。在 ReferenceConfigCache 中可以传入一个 KeyGenerator 用来修改缓存 Key 的生成逻辑，KeyGenerator 接口的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KeyGenerator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">(ReferenceConfigBase&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">referenceConfig</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KeyGenerator</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">(ReferenceConfigBase&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">referenceConfig</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>默认的 KeyGenerator 实现是 ReferenceConfigCache 中的匿名内部类，其对象由 DEFAULT_KEY_GENERATOR 这个静态字段引用，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> KeyGenerator DEFAULT_KEY_GENERATOR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> referenceConfig </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String iName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> referenceConfig.</span><span style="color:#B392F0;">getInterface</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(iName)) { </span><span style="color:#6A737D;">// 获取服务接口名称</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; clazz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> referenceConfig.</span><span style="color:#B392F0;">getInterfaceClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        iName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clazz.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(iName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No interface info in ReferenceConfig&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> referenceConfig);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Key的格式是group/interface:version</span></span>
<span class="line"><span style="color:#E1E4E8;">    StringBuilder ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(referenceConfig.</span><span style="color:#B392F0;">getGroup</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ret.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(referenceConfig.</span><span style="color:#B392F0;">getGroup</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ret.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(iName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(referenceConfig.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ret.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(referenceConfig.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> KeyGenerator DEFAULT_KEY_GENERATOR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> referenceConfig </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String iName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> referenceConfig.</span><span style="color:#6F42C1;">getInterface</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(iName)) { </span><span style="color:#6A737D;">// 获取服务接口名称</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> referenceConfig.</span><span style="color:#6F42C1;">getInterfaceClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        iName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(iName)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No interface info in ReferenceConfig&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> referenceConfig);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Key的格式是group/interface:version</span></span>
<span class="line"><span style="color:#24292E;">    StringBuilder ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(referenceConfig.</span><span style="color:#6F42C1;">getGroup</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        ret.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(referenceConfig.</span><span style="color:#6F42C1;">getGroup</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ret.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(iName);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(referenceConfig.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        ret.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(referenceConfig.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在 ReferenceConfigCache 实例对象中，会维护下面两个 Map 集合。</p><ul><li><p>proxies（ConcurrentMap&lt;Class&lt;?&gt;, ConcurrentMap&lt;String, Object&gt;&gt;类型）：该集合用来存储服务接口的全部代理对象，其中第一层 Key 是服务接口的类型，第二层 Key 是上面介绍的 KeyGenerator 为不同服务提供方生成的 Key，Value 是服务的代理对象。</p></li><li><p>referredReferences（ConcurrentMap&lt;String, ReferenceConfigBase&lt;?&gt;&gt; 类型）：该集合用来存储已经被处理的 ReferenceConfig 对象。</p></li></ul><p>我们回到 DubboBootstrap.referServices() 方法中，看一下其中与 ReferenceConfigCache 相关的逻辑。</p><p>首先是 ReferenceConfigCache.getCache() 这个静态方法，会在 CACHE_HOLDER 集合中添加一个 Key 为&quot;<em>DEFAULT</em>&quot;的 ReferenceConfigCache 对象（使用默认的 KeyGenerator 实现），它将作为默认的 ReferenceConfigCache 对象。</p><p>接下来，无论是同步服务引用还是异步服务引用，都会调用 ReferenceConfigCache.get() 方法，创建并缓存代理对象。下面就是 ReferenceConfigCache.get() 方法的核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ReferenceConfigBase</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> referenceConfig) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 生成服务提供方对应的Key</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generator.</span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">(referenceConfig);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取接口类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> referenceConfig.</span><span style="color:#B392F0;">getInterfaceClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取该接口对应代理对象集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxies.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(type, _t </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConcurrentMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; proxiesOfType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proxies.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据Key获取服务提供方对应的代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxiesOfType.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(key, _k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 服务引用</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> referenceConfig.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将ReferenceConfig记录到referredReferences集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        referredReferences.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, referenceConfig);            </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> proxy;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) proxiesOfType.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ReferenceConfigBase</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> referenceConfig) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 生成服务提供方对应的Key</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> generator.</span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">(referenceConfig);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取接口类型</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> referenceConfig.</span><span style="color:#6F42C1;">getInterfaceClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取该接口对应代理对象集合</span></span>
<span class="line"><span style="color:#24292E;">    proxies.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(type, _t </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    ConcurrentMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; proxiesOfType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> proxies.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据Key获取服务提供方对应的代理对象</span></span>
<span class="line"><span style="color:#24292E;">    proxiesOfType.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(key, _k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 服务引用</span></span>
<span class="line"><span style="color:#24292E;">        Object proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> referenceConfig.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将ReferenceConfig记录到referredReferences集合</span></span>
<span class="line"><span style="color:#24292E;">        referredReferences.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, referenceConfig);            </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> proxy;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) proxiesOfType.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="referenceconfig" tabindex="-1">ReferenceConfig <a class="header-anchor" href="#referenceconfig" aria-label="Permalink to &quot;ReferenceConfig&quot;">​</a></h3><p>通过前面的介绍我们知道，<strong>ReferenceConfig 是服务引用的真正入口</strong>，其中会创建相关的代理对象。下面先来看 ReferenceConfig.get() 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (destroyed) { </span><span style="color:#6A737D;">// 检测当前ReferenceConfig状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ref </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span><span style="color:#6A737D;">// ref指向了服务的代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 初始化ref字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ref;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (destroyed) { </span><span style="color:#6A737D;">// 检测当前ReferenceConfig状态</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ref </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span><span style="color:#6A737D;">// ref指向了服务的代理对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 初始化ref字段</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ref;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ReferenceConfig.init() 方法中，首先会对服务引用的配置进行处理，以保证配置的正确性。这里的具体实现其实本身并不复杂，但由于涉及很多的配置解析和处理逻辑，代码就显得非常长，我们就不再一一展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p><strong>ReferenceConfig.init() 方法的核心逻辑是调用 createProxy() 方法</strong>，调用之前会从配置中获取 createProxy() 方法需要的参数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (initialized) { </span><span style="color:#6A737D;">// 检测ReferenceConfig的初始化状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bootstrap </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 检测DubboBootstrap的初始化状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        bootstrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DubboBootstrap.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        bootstrap.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略其他配置的检查</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(SIDE_KEY, CONSUMER_SIDE); </span><span style="color:#6A737D;">// 添加side参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加Dubbo版本、release参数、timestamp参数、pid参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReferenceConfigBase.</span><span style="color:#B392F0;">appendRuntimeParameters</span><span style="color:#E1E4E8;">(map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加interface参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(INTERFACE_KEY, interfaceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略其他参数的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    String hostToRegistry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigUtils.</span><span style="color:#B392F0;">getSystemProperty</span><span style="color:#E1E4E8;">(DUBBO_IP_TO_REGISTRY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(hostToRegistry)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostToRegistry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NetUtils.</span><span style="color:#B392F0;">getLocalHost</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isInvalidLocalHost</span><span style="color:#E1E4E8;">(hostToRegistry)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加ip参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(REGISTER_IP_KEY, hostToRegistry);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用createProxy()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    ref </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProxy</span><span style="color:#E1E4E8;">(map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span><span style="color:#6A737D;">// 省略其他代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    initialized </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发ReferenceConfigInitializedEvent事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReferenceConfigInitializedEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, invoker));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (initialized) { </span><span style="color:#6A737D;">// 检测ReferenceConfig的初始化状态</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bootstrap </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 检测DubboBootstrap的初始化状态</span></span>
<span class="line"><span style="color:#24292E;">        bootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DubboBootstrap.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        bootstrap.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略其他配置的检查</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(SIDE_KEY, CONSUMER_SIDE); </span><span style="color:#6A737D;">// 添加side参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加Dubbo版本、release参数、timestamp参数、pid参数</span></span>
<span class="line"><span style="color:#24292E;">    ReferenceConfigBase.</span><span style="color:#6F42C1;">appendRuntimeParameters</span><span style="color:#24292E;">(map);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加interface参数</span></span>
<span class="line"><span style="color:#24292E;">    map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(INTERFACE_KEY, interfaceName);</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略其他参数的处理</span></span>
<span class="line"><span style="color:#24292E;">    String hostToRegistry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigUtils.</span><span style="color:#6F42C1;">getSystemProperty</span><span style="color:#24292E;">(DUBBO_IP_TO_REGISTRY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(hostToRegistry)) {</span></span>
<span class="line"><span style="color:#24292E;">        hostToRegistry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NetUtils.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isInvalidLocalHost</span><span style="color:#24292E;">(hostToRegistry)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加ip参数</span></span>
<span class="line"><span style="color:#24292E;">    map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(REGISTER_IP_KEY, hostToRegistry);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用createProxy()方法</span></span>
<span class="line"><span style="color:#24292E;">    ref </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProxy</span><span style="color:#24292E;">(map);</span></span>
<span class="line"><span style="color:#24292E;">    ...</span><span style="color:#6A737D;">// 省略其他代码</span></span>
<span class="line"><span style="color:#24292E;">    initialized </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 触发ReferenceConfigInitializedEvent事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReferenceConfigInitializedEvent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, invoker));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ReferenceConfig.createProxy() 方法中处理了多种服务引用的场景，例如，直连单个/多个Provider、单个/多个注册中心。下面是 createProxy() 方法的核心流程，大致可以梳理出这么 5 个步骤。</p><ol><li><p>根据传入的参数集合判断协议是否为 injvm 协议，如果是，直接通过 InjvmProtocol 引用服务。</p></li><li><p>构造 urls 集合。Dubbo 支持<strong>直连 Provider</strong> 和<strong>依赖注册中心</strong>两种服务引用方式。如果是直连服务的模式，我们可以通过 url 参数指定一个或者多个 Provider 地址，会被解析并填充到 urls 集合；如果通过注册中心的方式进行服务引用，则会调用 AbstractInterfaceConfig.loadRegistries() 方法加载所有注册中心。</p></li><li><p>如果 urls 集合中只记录了一个 URL，通过 Protocol 适配器选择合适的 Protocol 扩展实现创建 Invoker 对象。如果是直连 Provider 的场景，则 URL 为 dubbo 协议，这里就会使用 DubboProtocol 这个实现；如果依赖注册中心，则使用 RegistryProtocol 这个实现。</p></li><li><p>如果 urls 集合中有多个注册中心，则使用 ZoneAwareCluster 作为 Cluster 的默认实现，生成对应的 Invoker 对象；如果 urls 集合中记录的是多个直连服务的地址，则使用 Cluster 适配器选择合适的扩展实现生成 Invoker 对象。</p></li><li><p>通过 ProxyFactory 适配器选择合适的 ProxyFactory 扩展实现，将 Invoker 包装成服务接口的代理对象。</p></li></ol><p>通过上面的流程我们可以看出<strong>createProxy() 方法中有两个核心</strong>：一是通过 Protocol 适配器选择合适的 Protocol 扩展实现创建 Invoker 对象；二是通过 ProxyFactory 适配器选择合适的 ProxyFactory 创建代理对象。</p><p>下面我们来看 createProxy() 方法的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">createProxy</span><span style="color:#E1E4E8;">(Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> map) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">shouldJvmRefer</span><span style="color:#E1E4E8;">(map)) { </span><span style="color:#6A737D;">// 根据url的协议、scope以及injvm等参数检测是否需要本地引用</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建injvm协议的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">        URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(LOCAL_PROTOCOL, LOCALHOST_VALUE, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, interfaceClass.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">addParameters</span><span style="color:#E1E4E8;">(map);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过Protocol的适配器选择对应的Protocol实现创建Invoker对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> REF_PROTOCOL.</span><span style="color:#B392F0;">refer</span><span style="color:#E1E4E8;">(interfaceClass, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isInfoEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Using injvm service &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> interfaceClass.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        urls.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (url </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] us </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SEMICOLON_SPLIT_PATTERN.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">// 配置多个URL的时候，会用分号进行切分</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (us </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> us.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// url不为空，表明用户可能想进行点对点调用</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String u </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> us) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URL.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(u);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">setPath</span><span style="color:#E1E4E8;">(interfaceName);  </span><span style="color:#6A737D;">// 设置接口完全限定名为URL Path</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (UrlUtils.</span><span style="color:#B392F0;">isRegistry</span><span style="color:#E1E4E8;">(url)) { </span><span style="color:#6A737D;">// 检测URL协议是否为registry，若是，说明用户想使用指定的注册中心</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 这里会将map中的参数整理成一个参数添加到refer参数中</span></span>
<span class="line"><span style="color:#E1E4E8;">                        urls.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">addParameterAndEncoded</span><span style="color:#E1E4E8;">(REFER_KEY, StringUtils.</span><span style="color:#B392F0;">toQueryString</span><span style="color:#E1E4E8;">(map)));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 将map中的参数添加到url中</span></span>
<span class="line"><span style="color:#E1E4E8;">                        urls.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(ClusterUtils.</span><span style="color:#B392F0;">mergeUrl</span><span style="color:#E1E4E8;">(url, map));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">LOCAL_PROTOCOL.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">checkRegistry</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 加载注册中心的地址RegistryURL</span></span>
<span class="line"><span style="color:#E1E4E8;">                List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; us </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigValidationUtils.</span><span style="color:#B392F0;">loadRegistries</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(us)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (URL u </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> us) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        URL monitorUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigValidationUtils.</span><span style="color:#B392F0;">loadMonitor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, u);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (monitorUrl </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(MONITOR_KEY, URL.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(monitorUrl.</span><span style="color:#B392F0;">toFullString</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 将map中的参数整理成refer参数，添加到RegistryURL中</span></span>
<span class="line"><span style="color:#E1E4E8;">                        urls.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(u.</span><span style="color:#B392F0;">addParameterAndEncoded</span><span style="color:#E1E4E8;">(REFER_KEY, StringUtils.</span><span style="color:#B392F0;">toQueryString</span><span style="color:#E1E4E8;">(map)));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (urls.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 既不是服务直连，也没有配置注册中心，抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (urls.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 在单注册中心或是直连单个服务提供方的时候，通过Protocol的适配器选择对应的Protocol实现创建Invoker对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> REF_PROTOCOL.</span><span style="color:#B392F0;">refer</span><span style="color:#E1E4E8;">(interfaceClass, urls.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 多注册中心或是直连多个服务提供方的时候，会根据每个URL创建Invoker对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;Invoker&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; invokers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;Invoker&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">            URL registryURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (URL url </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> urls) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                invokers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(REF_PROTOCOL.</span><span style="color:#B392F0;">refer</span><span style="color:#E1E4E8;">(interfaceClass, url));</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (UrlUtils.</span><span style="color:#B392F0;">isRegistry</span><span style="color:#E1E4E8;">(url)) { </span><span style="color:#6A737D;">// 确定是多注册中心，还是直连多个Provider</span></span>
<span class="line"><span style="color:#E1E4E8;">                    registryURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (registryURL </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 多注册中心的场景中，会使用ZoneAwareCluster作为Cluster默认实现，多注册中心之间的选择</span></span>
<span class="line"><span style="color:#E1E4E8;">                URL u </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registryURL.</span><span style="color:#B392F0;">addParameterIfAbsent</span><span style="color:#E1E4E8;">(CLUSTER_KEY, ZoneAwareCluster.NAME);</span></span>
<span class="line"><span style="color:#E1E4E8;">                invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CLUSTER.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaticDirectory</span><span style="color:#E1E4E8;">(u, invokers));</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 多个Provider直连的场景中，使用Cluster适配器选择合适的扩展实现</span></span>
<span class="line"><span style="color:#E1E4E8;">                invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CLUSTER.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaticDirectory</span><span style="color:#E1E4E8;">(invokers));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">shouldCheck</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">invoker.</span><span style="color:#B392F0;">isAvailable</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据check配置决定是否检测Provider的可用性</span></span>
<span class="line"><span style="color:#E1E4E8;">        invoker.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span><span style="color:#6A737D;">// 元数据处理相关的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过ProxyFactory适配器选择合适的ProxyFactory扩展实现，创建代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) PROXY_FACTORY.</span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(invoker, ProtocolUtils.</span><span style="color:#B392F0;">isGeneric</span><span style="color:#E1E4E8;">(generic));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">createProxy</span><span style="color:#24292E;">(Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> map) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">shouldJvmRefer</span><span style="color:#24292E;">(map)) { </span><span style="color:#6A737D;">// 根据url的协议、scope以及injvm等参数检测是否需要本地引用</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建injvm协议的URL</span></span>
<span class="line"><span style="color:#24292E;">        URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(LOCAL_PROTOCOL, LOCALHOST_VALUE, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, interfaceClass.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">addParameters</span><span style="color:#24292E;">(map);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过Protocol的适配器选择对应的Protocol实现创建Invoker对象</span></span>
<span class="line"><span style="color:#24292E;">        invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> REF_PROTOCOL.</span><span style="color:#6F42C1;">refer</span><span style="color:#24292E;">(interfaceClass, url);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isInfoEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Using injvm service &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> interfaceClass.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        urls.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (url </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] us </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SEMICOLON_SPLIT_PATTERN.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">// 配置多个URL的时候，会用分号进行切分</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (us </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> us.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// url不为空，表明用户可能想进行点对点调用</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String u </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> us) {</span></span>
<span class="line"><span style="color:#24292E;">                    URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> URL.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(u);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                        url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">setPath</span><span style="color:#24292E;">(interfaceName);  </span><span style="color:#6A737D;">// 设置接口完全限定名为URL Path</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (UrlUtils.</span><span style="color:#6F42C1;">isRegistry</span><span style="color:#24292E;">(url)) { </span><span style="color:#6A737D;">// 检测URL协议是否为registry，若是，说明用户想使用指定的注册中心</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 这里会将map中的参数整理成一个参数添加到refer参数中</span></span>
<span class="line"><span style="color:#24292E;">                        urls.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">addParameterAndEncoded</span><span style="color:#24292E;">(REFER_KEY, StringUtils.</span><span style="color:#6F42C1;">toQueryString</span><span style="color:#24292E;">(map)));</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 将map中的参数添加到url中</span></span>
<span class="line"><span style="color:#24292E;">                        urls.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(ClusterUtils.</span><span style="color:#6F42C1;">mergeUrl</span><span style="color:#24292E;">(url, map));</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">LOCAL_PROTOCOL.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">checkRegistry</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 加载注册中心的地址RegistryURL</span></span>
<span class="line"><span style="color:#24292E;">                List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; us </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigValidationUtils.</span><span style="color:#6F42C1;">loadRegistries</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(us)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (URL u </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> us) {</span></span>
<span class="line"><span style="color:#24292E;">                        URL monitorUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigValidationUtils.</span><span style="color:#6F42C1;">loadMonitor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, u);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (monitorUrl </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                            map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(MONITOR_KEY, URL.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(monitorUrl.</span><span style="color:#6F42C1;">toFullString</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 将map中的参数整理成refer参数，添加到RegistryURL中</span></span>
<span class="line"><span style="color:#24292E;">                        urls.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(u.</span><span style="color:#6F42C1;">addParameterAndEncoded</span><span style="color:#24292E;">(REFER_KEY, StringUtils.</span><span style="color:#6F42C1;">toQueryString</span><span style="color:#24292E;">(map)));</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (urls.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 既不是服务直连，也没有配置注册中心，抛出异常</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (urls.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 在单注册中心或是直连单个服务提供方的时候，通过Protocol的适配器选择对应的Protocol实现创建Invoker对象</span></span>
<span class="line"><span style="color:#24292E;">            invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> REF_PROTOCOL.</span><span style="color:#6F42C1;">refer</span><span style="color:#24292E;">(interfaceClass, urls.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 多注册中心或是直连多个服务提供方的时候，会根据每个URL创建Invoker对象</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;Invoker&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; invokers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;Invoker&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">            URL registryURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (URL url </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> urls) {</span></span>
<span class="line"><span style="color:#24292E;">                invokers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(REF_PROTOCOL.</span><span style="color:#6F42C1;">refer</span><span style="color:#24292E;">(interfaceClass, url));</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (UrlUtils.</span><span style="color:#6F42C1;">isRegistry</span><span style="color:#24292E;">(url)) { </span><span style="color:#6A737D;">// 确定是多注册中心，还是直连多个Provider</span></span>
<span class="line"><span style="color:#24292E;">                    registryURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (registryURL </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 多注册中心的场景中，会使用ZoneAwareCluster作为Cluster默认实现，多注册中心之间的选择</span></span>
<span class="line"><span style="color:#24292E;">                URL u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registryURL.</span><span style="color:#6F42C1;">addParameterIfAbsent</span><span style="color:#24292E;">(CLUSTER_KEY, ZoneAwareCluster.NAME);</span></span>
<span class="line"><span style="color:#24292E;">                invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CLUSTER.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticDirectory</span><span style="color:#24292E;">(u, invokers));</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 多个Provider直连的场景中，使用Cluster适配器选择合适的扩展实现</span></span>
<span class="line"><span style="color:#24292E;">                invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CLUSTER.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticDirectory</span><span style="color:#24292E;">(invokers));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">shouldCheck</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">invoker.</span><span style="color:#6F42C1;">isAvailable</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据check配置决定是否检测Provider的可用性</span></span>
<span class="line"><span style="color:#24292E;">        invoker.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ...</span><span style="color:#6A737D;">// 元数据处理相关的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过ProxyFactory适配器选择合适的ProxyFactory扩展实现，创建代理对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) PROXY_FACTORY.</span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(invoker, ProtocolUtils.</span><span style="color:#6F42C1;">isGeneric</span><span style="color:#24292E;">(generic));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="registryprotocol" tabindex="-1">RegistryProtocol <a class="header-anchor" href="#registryprotocol" aria-label="Permalink to &quot;RegistryProtocol&quot;">​</a></h3><p>在直连 Provider 的场景中，会使用 DubboProtocol.refer() 方法完成服务引用，DubboProtocol.refer() 方法的具体实现在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=4880" target="_blank" rel="noreferrer">第 25 课时</a>中已经详细介绍过了，这里我们重点来看存在注册中心的场景中，Dubbo Consumer 是如何通过 RegistryProtocol 完成服务引用的。</p><p>在 RegistryProtocol.refer() 方法中，会先根据 URL 获取注册中心的 URL，再调用 doRefer 方法生成 Invoker，在 refer() 方法中会使用 MergeableCluster 处理多 group 引用的场景。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refer</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type, URL url) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRegistryUrl</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">// 从URL中获取注册中心的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Registry实例，这里的RegistryFactory对象是通过Dubbo SPI的自动装载机制注入的</span></span>
<span class="line"><span style="color:#E1E4E8;">    Registry registry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registryFactory.</span><span style="color:#B392F0;">getRegistry</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (RegistryService.class.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(type)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> proxyFactory.</span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">((T) registry, type, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从注册中心URL的refer参数中获取此次服务引用的一些参数，其中就包括group</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; qs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">parseQueryString</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getParameterAndDecoded</span><span style="color:#E1E4E8;">(REFER_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">    String group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qs.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(GROUP_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (group </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> group.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((COMMA_SPLIT_PATTERN.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(group)).length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(group)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果此次可以引用多个group的服务，则Cluser实现使用MergeableCluster实现，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 这里的getMergeableCluster()方法就会通过Dubbo SPI方式找到MergeableCluster实例</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doRefer</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getMergeableCluster</span><span style="color:#E1E4E8;">(), registry, type, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果没有group参数或是只指定了一个group，则通过Cluster适配器选择Cluster实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doRefer</span><span style="color:#E1E4E8;">(cluster, registry, type, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refer</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type, URL url) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRegistryUrl</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">// 从URL中获取注册中心的URL</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Registry实例，这里的RegistryFactory对象是通过Dubbo SPI的自动装载机制注入的</span></span>
<span class="line"><span style="color:#24292E;">    Registry registry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registryFactory.</span><span style="color:#6F42C1;">getRegistry</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (RegistryService.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(type)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> proxyFactory.</span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">((T) registry, type, url);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从注册中心URL的refer参数中获取此次服务引用的一些参数，其中就包括group</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; qs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">parseQueryString</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getParameterAndDecoded</span><span style="color:#24292E;">(REFER_KEY));</span></span>
<span class="line"><span style="color:#24292E;">    String group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qs.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(GROUP_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (group </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> group.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((COMMA_SPLIT_PATTERN.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(group)).length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(group)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果此次可以引用多个group的服务，则Cluser实现使用MergeableCluster实现，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 这里的getMergeableCluster()方法就会通过Dubbo SPI方式找到MergeableCluster实例</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doRefer</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getMergeableCluster</span><span style="color:#24292E;">(), registry, type, url);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果没有group参数或是只指定了一个group，则通过Cluster适配器选择Cluster实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doRefer</span><span style="color:#24292E;">(cluster, registry, type, url);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 doRefer() 方法中，首先会根据 URL 初始化 RegistryDirectory 实例，然后生成 Subscribe URL 并进行注册，之后会通过 Registry 订阅服务，最后通过 Cluster 将多个 Invoker 合并成一个 Invoker 返回给上层，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doRefer</span><span style="color:#E1E4E8;">(Cluster cluster, Registry registry, Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type, URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建RegistryDirectory实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    RegistryDirectory&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; directory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> RegistryDirectory&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;(type, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    directory.</span><span style="color:#B392F0;">setRegistry</span><span style="color:#E1E4E8;">(registry);</span></span>
<span class="line"><span style="color:#E1E4E8;">    directory.</span><span style="color:#B392F0;">setProtocol</span><span style="color:#E1E4E8;">(protocol);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 生成SubscribeUrl，协议为consumer，具体的参数是RegistryURL中refer参数指定的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;(directory.</span><span style="color:#B392F0;">getConsumerUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL subscribeUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(CONSUMER_PROTOCOL, parameters.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(REGISTER_IP_KEY), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, type.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), parameters);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (directory.</span><span style="color:#B392F0;">isShouldRegister</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        directory.</span><span style="color:#B392F0;">setRegisteredConsumerUrl</span><span style="color:#E1E4E8;">(subscribeUrl); </span><span style="color:#6A737D;">// 在SubscribeUrl中添加category=consumers和check=false参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        registry.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(directory.</span><span style="color:#B392F0;">getRegisteredConsumerUrl</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 服务注册，在Zookeeper的consumers节点下，添加该Consumer对应的节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    directory.</span><span style="color:#B392F0;">buildRouterChain</span><span style="color:#E1E4E8;">(subscribeUrl); </span><span style="color:#6A737D;">// 根据SubscribeUrl创建服务路由</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 订阅服务，toSubscribeUrl()方法会将SubscribeUrl中category参数修改为&quot;providers,configurators,routers&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// RegistryDirectory的subscribe()在前面详细分析过了，其中会通过Registry订阅服务，同时还会添加相应的监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    directory.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toSubscribeUrl</span><span style="color:#E1E4E8;">(subscribeUrl));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注册中心中可能包含多个Provider，相应地，也就有多个Invoker，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里通过前面选择的Cluster将多个Invoker对象封装成一个Invoker对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cluster.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(directory);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据URL中的registry.protocol.listener参数加载相应的监听器实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">RegistryProtocolListener</span><span style="color:#E1E4E8;">&gt; listeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findRegistryProtocolListeners</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(listeners)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invoker;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为了方便在监听器中回调，这里将此次引用使用到的Directory对象、Cluster对象、Invoker对象以及SubscribeUrl</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 封装到一个RegistryInvokerWrapper中，传递给监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    RegistryInvokerWrapper&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; registryInvokerWrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> RegistryInvokerWrapper&lt;&gt;(directory, cluster, invoker, subscribeUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (RegistryProtocolListener listener </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> listeners) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        listener.</span><span style="color:#B392F0;">onRefer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, registryInvokerWrapper);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> registryInvokerWrapper;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doRefer</span><span style="color:#24292E;">(Cluster cluster, Registry registry, Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type, URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建RegistryDirectory实例</span></span>
<span class="line"><span style="color:#24292E;">    RegistryDirectory&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; directory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> RegistryDirectory&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;(type, url);</span></span>
<span class="line"><span style="color:#24292E;">    directory.</span><span style="color:#6F42C1;">setRegistry</span><span style="color:#24292E;">(registry);</span></span>
<span class="line"><span style="color:#24292E;">    directory.</span><span style="color:#6F42C1;">setProtocol</span><span style="color:#24292E;">(protocol);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 生成SubscribeUrl，协议为consumer，具体的参数是RegistryURL中refer参数指定的参数</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(directory.</span><span style="color:#6F42C1;">getConsumerUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    URL subscribeUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(CONSUMER_PROTOCOL, parameters.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(REGISTER_IP_KEY), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, type.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), parameters);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (directory.</span><span style="color:#6F42C1;">isShouldRegister</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        directory.</span><span style="color:#6F42C1;">setRegisteredConsumerUrl</span><span style="color:#24292E;">(subscribeUrl); </span><span style="color:#6A737D;">// 在SubscribeUrl中添加category=consumers和check=false参数</span></span>
<span class="line"><span style="color:#24292E;">        registry.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(directory.</span><span style="color:#6F42C1;">getRegisteredConsumerUrl</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 服务注册，在Zookeeper的consumers节点下，添加该Consumer对应的节点</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    directory.</span><span style="color:#6F42C1;">buildRouterChain</span><span style="color:#24292E;">(subscribeUrl); </span><span style="color:#6A737D;">// 根据SubscribeUrl创建服务路由</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 订阅服务，toSubscribeUrl()方法会将SubscribeUrl中category参数修改为&quot;providers,configurators,routers&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// RegistryDirectory的subscribe()在前面详细分析过了，其中会通过Registry订阅服务，同时还会添加相应的监听器</span></span>
<span class="line"><span style="color:#24292E;">    directory.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toSubscribeUrl</span><span style="color:#24292E;">(subscribeUrl));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注册中心中可能包含多个Provider，相应地，也就有多个Invoker，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里通过前面选择的Cluster将多个Invoker对象封装成一个Invoker对象</span></span>
<span class="line"><span style="color:#24292E;">    Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cluster.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(directory);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据URL中的registry.protocol.listener参数加载相应的监听器实现</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">RegistryProtocolListener</span><span style="color:#24292E;">&gt; listeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findRegistryProtocolListeners</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(listeners)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invoker;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为了方便在监听器中回调，这里将此次引用使用到的Directory对象、Cluster对象、Invoker对象以及SubscribeUrl</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 封装到一个RegistryInvokerWrapper中，传递给监听器</span></span>
<span class="line"><span style="color:#24292E;">    RegistryInvokerWrapper&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; registryInvokerWrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> RegistryInvokerWrapper&lt;&gt;(directory, cluster, invoker, subscribeUrl);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (RegistryProtocolListener listener </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> listeners) {</span></span>
<span class="line"><span style="color:#24292E;">        listener.</span><span style="color:#6F42C1;">onRefer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, registryInvokerWrapper);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> registryInvokerWrapper;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里涉及的 RegistryDirectory、Router 接口、Cluster 接口及其相关的扩展实现，我们都已经在前面的课时详细分析过了，这里不再重复。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时，我们重点介绍了 Dubbo 服务引用的整个流程。</p><ul><li><p>首先，我们介绍了 DubboBootStrap 这个入口门面类与服务引用相关的方法，其中涉及 referServices()、reference() 等核心方法。</p></li><li><p>接下来，我们分析了 ReferenceConfigCache 这个 ReferenceConfig 对象缓存，以及 ReferenceConfig 实现服务引用的核心流程。</p></li><li><p>最后，我们还讲解了 RegistryProtocol 从注册中心引用服务的核心实现。</p></li></ul><p>下一课时，我们将开始介绍 Dubbo 服务自省的相关内容，记得按时来听课。</p>`,47),e=[o];function r(t,c,E,y,i,g){return n(),a("div",null,e)}const C=s(p,[["render",r]]);export{u as __pageData,C as default};
