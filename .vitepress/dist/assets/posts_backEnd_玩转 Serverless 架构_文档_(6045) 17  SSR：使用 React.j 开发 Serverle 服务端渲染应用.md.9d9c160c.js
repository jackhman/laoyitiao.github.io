import{_ as o,j as e,o as t,g as c,k as a,h as p,Q as l,s}from"./chunks/framework.b3d8e22e.js";const N=JSON.parse('{"title":"基于 Serverless 的服务端渲染架构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/玩转 Serverless 架构_文档/(6045) 17  SSR：使用 React.j 开发 Serverle 服务端渲染应用.md","filePath":"posts/backEnd/玩转 Serverless 架构_文档/(6045) 17  SSR：使用 React.j 开发 Serverle 服务端渲染应用.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/玩转 Serverless 架构_文档/(6045) 17  SSR：使用 React.j 开发 Serverle 服务端渲染应用.md"},E=l('<p>今天我想和你聊一聊怎么用 Serverless 开发一个服务端渲染（SSR）应用。</p><p>对前端工程师来说，Serverless 最大的应用场景之一就是开发服务端渲染（SSR）应用。因为传统的服务端渲染应用要由前端工程师负责服务器的运维，但往往前端工程师并不擅长这一点，基于 Serverless 开发服务端渲染应用的话，就可以减轻这个负担。希望你学完今天的内容之后，能够学会如何去使用 Serverless 开发一个服务端渲染应用。</p><p>话不多说，我们开始今天的学习。</p><h3 id="基于-serverless-的服务端渲染架构" tabindex="-1">基于 Serverless 的服务端渲染架构 <a class="header-anchor" href="#基于-serverless-的服务端渲染架构" aria-label="Permalink to &quot;基于 Serverless 的服务端渲染架构&quot;">​</a></h3><p>现在的主流前端框架是 React.js、Vue.js 等，基于这些框架开发的都是单页应用，其渲染方式都是客户端渲染：代码开发完成后，构建出一个或多个 JS 资源，页面渲染时加载这些 JS 资源，然后再执行 JS 渲染页面。虽然这些框架可以极大提升前端开发效率，但也带来了一些新的问题。</p><ul><li><p><strong>不利于 SEO：</strong> 页面源码不再是HTML，而是渲染 HTML 的 JavaScript，这就导致搜索引擎爬虫难以解析其中的内容；</p></li><li><p><strong>初始化性能差：</strong> 通常单元应用的 JS 文件体积都比较大、加载耗时比较长，导致页面白屏。</p></li></ul><p>为了解决这些问题，很多框架和开发者就开始尝试服务端渲染的方式：页面加载时，由服务端先生成 HTML 返回给浏览器，浏览器直接渲染 HTML。在传统的服务端渲染架构中，通常需要前端同学使用 Node.js 去实现一个服务端的渲染应用。在应用内，每个请求的 path 对应着服务端的每个路由，由该路由实现对应 path 的 HTML 文档渲染：</p>',7),y=s("p",null,"传统服务端渲染架构",-1),i=s("p",null,"对前端工程师来说，要实现一个服务端渲染应用，通常面临着一些问题：",-1),d=s("ul",null,[s("li",null,[s("p",null,"部署服务端渲染应用需要购买服务器，并配置服务器环境，要对服务器进行运维；")]),s("li",null,[s("p",null,"需要关注业务量，考虑有没有高并发场景、服务器有没有扩容机制；")]),s("li",null,[s("p",null,"需要实现负载均衡、流量控制等复杂后端能力等。")])],-1),F=s("p",null,"开篇我也提到，而且是服务端的工作，很多前端同学都不擅长，好在有了 Serverless。",-1),u=s("p",null,"用 Serverless 做服务端渲染，就是将以往的每个路由，都拆分为一个个函数，再在 FaaS 上部署对应的函数，这样用户请求的 path，对应的就是每个单独的函数。通过这种方式，就将运维操作转移到了 FaaS 平台，前端同学开发服务端渲染应用，就再也不用关心服务端程序的运维部署了。并且在 FaaS 平台中运行的函数，天然具有弹性伸缩的能力，你也不用担心流量波峰波谷了。",-1),m=s("p",null,"基于 Serverless 的服务选渲染架构",-1),C=s("p",null,"如图所示，FaaS 函数接收请求后直接执行代码渲染出 HTML 并返回给浏览器，这是最基本的架构，虽然它可以满足大部分场景，但要追求极致的性能，你通常要加入缓存。",-1),g=s("p",null,"进阶版基于 Serverless 的服务端渲染架构",-1),D=s("p",null,"首先我们会使用 CDN 做缓存，基于 CDN 的缓存可以减少函数执行次数，进而避免函数冷启动带来的性能损耗。如果 CDN 中没有 SSR HTML 页面的缓存，则继续由网关处理请求，网关再去触发函数执行。",-1),A=s("p",null,"函数首先会判读缓存数据库中是否有 SSR HTML 的缓存，如果有直接返回；如果没有再渲染出 HTML 并返回。基于数据库的缓存，可以减少函数渲染 HTML 的时间，从而页面加载提升性能。",-1),v=s("p",null,"讲了这么多，具体怎么基于 Serverless 实现一个服务端渲染应用呢？",-1),h=s("h3",{id:"实现一个-serverless-的服务端渲染应用",tabindex:"-1"},[p("实现一个 Serverless 的服务端渲染应用 "),s("a",{class:"header-anchor",href:"#实现一个-serverless-的服务端渲染应用","aria-label":'Permalink to "实现一个 Serverless 的服务端渲染应用"'},"​")],-1),q=s("p",null,"在 16 讲中，我们实现了一个内容管理系统的 Restful API，但没有前端界面，所以今天我们的目标就基于 Serverless 实现一个内容管理系统的前端界面（如图所示）。",-1),B=l(`<p>该应用主要包含两个页面：</p><ul><li><p>首页，展示文章列表；</p></li><li><p>详情页，展示文章详情。</p></li></ul><p>为了方便你进行实践，我为你提供了一份示例代码，你可以直接下载并使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 下载代码</span></span>
<span class="line"><span style="color:#E1E4E8;">$ git clone https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/nodejh/serverless-class</span></span>
<span class="line"><span style="color:#E1E4E8;"># 进入服务端渲染应用目录</span></span>
<span class="line"><span style="color:#E1E4E8;">$ cd </span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">serverless</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ssr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 下载代码</span></span>
<span class="line"><span style="color:#24292E;">$ git clone https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/nodejh/serverless-class</span></span>
<span class="line"><span style="color:#24292E;"># 进入服务端渲染应用目录</span></span>
<span class="line"><span style="color:#24292E;">$ cd </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">serverless</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ssr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cms</span></span></code></pre></div><p>代码结构如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">├── config.js</span></span>
<span class="line"><span style="color:#E1E4E8;">├── f.yml</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#F97583;">package</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">lock.json</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#FDAEB7;font-style:italic;">package</span><span style="color:#E1E4E8;">.json</span></span>
<span class="line"><span style="color:#E1E4E8;">├── src</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── api.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── config</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   └── config.</span><span style="color:#FDAEB7;font-style:italic;">default</span><span style="color:#E1E4E8;">.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── configuration.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#FDAEB7;font-style:italic;">interface</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   ├── detail.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   └── index.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── mock</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   ├── detail.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   └── index.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── render.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── service</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── detail.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">│       └── index.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">├── tsconfig.json</span></span>
<span class="line"><span style="color:#E1E4E8;">├── tsconfig.lint.json</span></span>
<span class="line"><span style="color:#E1E4E8;">└── web</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── @types</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   └── global.d.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── common.less</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── components</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── layout</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   │   ├── index.less</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   │   └── index.tsx</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   └── title</span></span>
<span class="line"><span style="color:#E1E4E8;">    │       ├── index.less</span></span>
<span class="line"><span style="color:#E1E4E8;">    │       └── index.tsx</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── </span><span style="color:#FDAEB7;font-style:italic;">interface</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── detail</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">index.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── index.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   └── page</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">index.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── pages</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── detail</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   │   ├── fetch.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   │   ├── index.less</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   │   └── render$id.tsx</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   └── index</span></span>
<span class="line"><span style="color:#E1E4E8;">    │       ├── fetch.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    │       ├── index.less</span></span>
<span class="line"><span style="color:#E1E4E8;">    │       └── render.tsx</span></span>
<span class="line"><span style="color:#E1E4E8;">    └── tsconfig.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">├── config.js</span></span>
<span class="line"><span style="color:#24292E;">├── f.yml</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#D73A49;">package</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">lock.json</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#B31D28;font-style:italic;">package</span><span style="color:#24292E;">.json</span></span>
<span class="line"><span style="color:#24292E;">├── src</span></span>
<span class="line"><span style="color:#24292E;">│   ├── api.ts</span></span>
<span class="line"><span style="color:#24292E;">│   ├── config</span></span>
<span class="line"><span style="color:#24292E;">│   │   └── config.</span><span style="color:#B31D28;font-style:italic;">default</span><span style="color:#24292E;">.ts</span></span>
<span class="line"><span style="color:#24292E;">│   ├── configuration.ts</span></span>
<span class="line"><span style="color:#24292E;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#B31D28;font-style:italic;">interface</span></span>
<span class="line"><span style="color:#24292E;">│   │   ├── detail.ts</span></span>
<span class="line"><span style="color:#24292E;">│   │   └── index.ts</span></span>
<span class="line"><span style="color:#24292E;">│   ├── mock</span></span>
<span class="line"><span style="color:#24292E;">│   │   ├── detail.ts</span></span>
<span class="line"><span style="color:#24292E;">│   │   └── index.ts</span></span>
<span class="line"><span style="color:#24292E;">│   ├── render.ts</span></span>
<span class="line"><span style="color:#24292E;">│   └── service</span></span>
<span class="line"><span style="color:#24292E;">│       ├── detail.ts</span></span>
<span class="line"><span style="color:#24292E;">│       └── index.ts</span></span>
<span class="line"><span style="color:#24292E;">├── tsconfig.json</span></span>
<span class="line"><span style="color:#24292E;">├── tsconfig.lint.json</span></span>
<span class="line"><span style="color:#24292E;">└── web</span></span>
<span class="line"><span style="color:#24292E;">    ├── @types</span></span>
<span class="line"><span style="color:#24292E;">    │   └── global.d.ts</span></span>
<span class="line"><span style="color:#24292E;">    ├── common.less</span></span>
<span class="line"><span style="color:#24292E;">    ├── components</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── layout</span></span>
<span class="line"><span style="color:#24292E;">    │   │   ├── index.less</span></span>
<span class="line"><span style="color:#24292E;">    │   │   └── index.tsx</span></span>
<span class="line"><span style="color:#24292E;">    │   └── title</span></span>
<span class="line"><span style="color:#24292E;">    │       ├── index.less</span></span>
<span class="line"><span style="color:#24292E;">    │       └── index.tsx</span></span>
<span class="line"><span style="color:#24292E;">    ├── </span><span style="color:#B31D28;font-style:italic;">interface</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── detail</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">index.ts</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── index.ts</span></span>
<span class="line"><span style="color:#24292E;">    │   └── page</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">index.ts</span></span>
<span class="line"><span style="color:#24292E;">    ├── pages</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── detail</span></span>
<span class="line"><span style="color:#24292E;">    │   │   ├── fetch.ts</span></span>
<span class="line"><span style="color:#24292E;">    │   │   ├── index.less</span></span>
<span class="line"><span style="color:#24292E;">    │   │   └── render$id.tsx</span></span>
<span class="line"><span style="color:#24292E;">    │   └── index</span></span>
<span class="line"><span style="color:#24292E;">    │       ├── fetch.ts</span></span>
<span class="line"><span style="color:#24292E;">    │       ├── index.less</span></span>
<span class="line"><span style="color:#24292E;">    │       └── render.tsx</span></span>
<span class="line"><span style="color:#24292E;">    └── tsconfig.json</span></span></code></pre></div><p>文件很多，不过不用担心，你只需重点关注 web/pages/ 和 src/service 两个目录：</p><ul><li><p>web/ 目录中主要是前端页面的代码， web/pages/ 中的文件分别对应着我们要实现的 index（首页）和 detail（详情页）两个页面，这两个页面会使用到 components 目录中的公共组件；</p></li><li><p>src/ 目录中主要是后端代码，src/service 目录中的 index.ts 和 detail.ts 则定义了两个页面分别需要用到的接口，为了简单起见，接口数据我使用了 src/mock/ 目录中的 mock 数据。</p></li></ul><p>当我一个人又负责前端页面也负责后端接口的开发时，通常习惯先实现接口，再开发前端页面，这样方便调试。接下来就让我们看一下具体是怎么实现的。</p><h4 id="首页接口的实现" tabindex="-1">首页接口的实现 <a class="header-anchor" href="#首页接口的实现" aria-label="Permalink to &quot;首页接口的实现&quot;">​</a></h4><p>其源码在 src/service/index.ts 文件中，代码如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/service/index.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { provide } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@midwayjs/faas&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IApiService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../interface&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> mock </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../mock&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ApiService&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApiService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IApiService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(mock)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/service/index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { provide } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@midwayjs/faas&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IApiService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../interface&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mock </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../mock&#39;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ApiService&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IApiService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(mock)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码实现了一个 ApiService 类以及 index 方法，该方法会返回首页的文章列表。数据结构如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;data&quot;</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;3f8a198c-60a2-11eb-8932-9b95cd7afc2d&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;title&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;开篇词：Serverless 大热，程序员面临的新机遇与挑战&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;content&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;可能你会认为 Serverless 是最近两年兴起的技术......&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;date&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;2020-12-23&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;5158b100-5fee-11eb-9afa-9b5f85523067&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;title&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;基础入门：编写你的第一个 Serverless 应用&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;content&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;学习一门新技术，除了了解其基础概念，更重要的是把理论转化为实践...&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;date&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;2020-12-29&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;data&quot;</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;3f8a198c-60a2-11eb-8932-9b95cd7afc2d&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;title&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;开篇词：Serverless 大热，程序员面临的新机遇与挑战&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;content&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;可能你会认为 Serverless 是最近两年兴起的技术......&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;date&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;2020-12-23&quot;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;5158b100-5fee-11eb-9afa-9b5f85523067&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;title&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;基础入门：编写你的第一个 Serverless 应用&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;content&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;学习一门新技术，除了了解其基础概念，更重要的是把理论转化为实践...&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;date&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;2020-12-29&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在进行服务端渲染时，你可以通过 ctx 获取到 ApiService 实例，进而调用其中的方法，获取文章列表数据。此外，ApiService 也会被 src/api.ts 调用，src/api.ts 则直接对外提供了 HTTP 接口。</p><h4 id="首页页面的实现" tabindex="-1">首页页面的实现 <a class="header-anchor" href="#首页页面的实现" aria-label="Permalink to &quot;首页页面的实现&quot;">​</a></h4><p>有了接口后，我们就可以继续实现首页的前端页面了。首页页面的代码在 web/pages/ 目录中，该目录下有三个文件：</p><ul><li><p>fetch.ts，获取首页数据；</p></li><li><p>render.tsx 首页页面 UI 组件代码；</p></li><li><p>index.less 样式代码。</p></li></ul><p>首先来看一下 fetch.ts：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// web/pages/index/fetch.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IFaaSContext } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ssr-types&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IndexData } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/interface&#39;</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IApiService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">index</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">IndexData</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IFaaSContext</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">apiService</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IApiService</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __isBrowser__ </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/api/index&#39;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> ctx.apiService?.</span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    indexData: data</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// web/pages/index/fetch.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IFaaSContext } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ssr-types&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IndexData } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/interface&#39;</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IApiService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">index</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IndexData</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IFaaSContext</span><span style="color:#24292E;">&lt;{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">apiService</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IApiService</span></span>
<span class="line"><span style="color:#24292E;">}&gt;) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> __isBrowser__ </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/api/index&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> ctx.apiService?.</span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    indexData: data</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>这段代码的逻辑比较简单，核心点在第 10 行</strong> ，如果是浏览器，就用浏览器自带的 fetch 方法请求<code>/api/index</code>接口获取数据；如果不是浏览器，即服务端渲染，可以直接调用 apiService 中的 index 方法。获取到数据后，将其存入 state.indexData 中，这样在 UI 组件中就可以使用了。</p><p>首页的 UI 组件 render.tsx 代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// web/pages/index/render.tsx</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { useContext } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { SProps, IContext } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ssr-types&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Navbar </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/components/navbar&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Header </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/components/header&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Item </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/components/item&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IData } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/interface&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> styles </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./index.less&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SProps</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useContext</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">IContext</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">IData</span><span style="color:#E1E4E8;">&gt;&gt;(window.</span><span style="color:#79B8FF;">STORE_CONTEXT</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Navbar</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">props} </span><span style="color:#B392F0;">isHomePage</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}&gt;&lt;/</span><span style="color:#79B8FF;">Navbar</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{styles.container}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {state?.indexData?.data.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">Item</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">props}</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{item.id}</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{item.id}</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">title</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{item.title}</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">content</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{item.content}</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">date</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{item.date}</span></span>
<span class="line"><span style="color:#E1E4E8;">          &gt;&lt;/</span><span style="color:#79B8FF;">Item</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ))}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// web/pages/index/render.tsx</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { useContext } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { SProps, IContext } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ssr-types&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Navbar </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/components/navbar&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Header </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/components/header&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Item </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/components/item&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IData } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/interface&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> styles </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./index.less&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SProps</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useContext</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IContext</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IData</span><span style="color:#24292E;">&gt;&gt;(window.</span><span style="color:#005CC5;">STORE_CONTEXT</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Navbar</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">props} </span><span style="color:#6F42C1;">isHomePage</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}&gt;&lt;/</span><span style="color:#005CC5;">Navbar</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{styles.container}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {state?.indexData?.data.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">Item</span></span>
<span class="line"><span style="color:#24292E;">            {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">props}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{item.id}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{item.id}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">title</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{item.title}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">content</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{item.content}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">date</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{item.date}</span></span>
<span class="line"><span style="color:#24292E;">          &gt;&lt;/</span><span style="color:#005CC5;">Item</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        ))}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在 UI 组件中，我们可以通过 useContext 获取刚才由 fetch.ts 存入 state 的数据，然后利用数据渲染 UI。UI 组件主要由三部分组成。</p><ul><li><p>Navbar：导航条。</p></li><li><p>Header：页面标题。</p></li><li><p>Item：每篇文章的简介。</p></li></ul>`,25),f=l(`<h4 id="详情页接口的实现" tabindex="-1">详情页接口的实现 <a class="header-anchor" href="#详情页接口的实现" aria-label="Permalink to &quot;详情页接口的实现&quot;">​</a></h4><p>完成了首页后，就可以实现详情页了。详情页与首页整体类似，区别就在于详情页需要传入参数查询某条数据。</p><p>详情页接口在 src/service/detail.ts 中 ，代码如下所示：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/service/detail.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { provide } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@midwayjs/faas&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IApiDetailService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../interface/detail&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> mock </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../mock/detail&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ApiDetailService&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApiDetailService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IApiDetailService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(mock.data[id])</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/service/detail.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { provide } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@midwayjs/faas&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IApiDetailService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../interface/detail&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mock </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../mock/detail&#39;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ApiDetailService&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiDetailService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IApiDetailService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">id</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(mock.data[id])</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这段代码中，我们实现了一个 ApiDetailService 类以及 index 方法，index 方法的如参 id 即文章 ID，然后根据文章 ID 从 mock 数据中查询文章详情。</p><p>文章详情数据如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;title&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;Serverless 大热，程序员面临的新机遇与挑战&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;wordCount&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2540</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;readingTime&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;date&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;2020-12-23 12:00:00&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;content&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;可能你会认为 Serverless 是最近两年兴起的技术，实际上，Serverless 概念从 2012 年就提出来了，随后 AWS 在 2014 年推出了第一款 Serverless 产品 Lambda，开启了 Serverless 元年... &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;title&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;Serverless 大热，程序员面临的新机遇与挑战&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;wordCount&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2540</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;readingTime&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;date&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;2020-12-23 12:00:00&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;content&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;可能你会认为 Serverless 是最近两年兴起的技术，实际上，Serverless 概念从 2012 年就提出来了，随后 AWS 在 2014 年推出了第一款 Serverless 产品 Lambda，开启了 Serverless 元年... &quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="详情页页面的实现" tabindex="-1">详情页页面的实现 <a class="header-anchor" href="#详情页页面的实现" aria-label="Permalink to &quot;详情页页面的实现&quot;">​</a></h4><p>和首页一样，详情页也包含数据请求、UI 组件和样式代码三个文件。</p><p>数据请求代码文件的命名和首页一样，都是 fetch.ts。与首页不同的是，详情页我们需要从上下文（服务端渲染场景）或 URL 中（浏览器场景）获取到文章 ID，然后根据文章 ID 获取文章详情数据。代码如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { RouteComponentProps } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-router&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__isBrowser__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ctx </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RouteComponentProps</span><span style="color:#E1E4E8;">&lt;{ </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> }&gt;).match.params.id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`/api/detail/\${</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">detail</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">)(</span><span style="color:#85E89D;font-weight:bold;">\\?</span><span style="color:#F97583;">|</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(ctx.req.path)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> ctx.apiDeatilservice.</span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    detailData: data,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { RouteComponentProps } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-router&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__isBrowser__) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ctx </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RouteComponentProps</span><span style="color:#24292E;">&lt;{ </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> }&gt;).match.params.id;</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`/api/detail/\${</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /detail</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">)(</span><span style="color:#22863A;font-weight:bold;">\\?</span><span style="color:#D73A49;">|</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(ctx.req.path)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> ctx.apiDeatilservice.</span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    detailData: data,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>详情页的 UI 组件名称为<code>render$id.tsx</code>的文件，<code>$id</code>表示该组件的参数是 id，这样访问 /detail/ 这个路由（id 是变量）时，就会匹配到 web/pages/detail/render$id.tsx 这个页面了。</p><br><p><code>render$id.tsx</code>详细代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { useContext } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IContext, SProps } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ssr-types&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Data } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/interface&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Navbar </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/components/navbar&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Content </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/components/content&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Title </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/components/title&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Tip </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/components/tip&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> styles </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./index.less&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SProps</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useContext</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">IContext</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">&gt;&gt;(window.</span><span style="color:#79B8FF;">STORE_CONTEXT</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Navbar</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">props}&gt;&lt;/</span><span style="color:#79B8FF;">Navbar</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{styles.container}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">Title</span><span style="color:#E1E4E8;">&gt;{state?.detailData?.title}&lt;/</span><span style="color:#79B8FF;">Title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">Tip</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">date</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{state?.detailData?.date}</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">wordCount</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{state?.detailData?.wordCount}</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">readingTime</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{state?.detailData?.readingTime}</span></span>
<span class="line"><span style="color:#E1E4E8;">        /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">Content</span><span style="color:#E1E4E8;">&gt;{state?.detailData?.content}&lt;/</span><span style="color:#79B8FF;">Content</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { useContext } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IContext, SProps } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ssr-types&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Data } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/interface&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Navbar </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/components/navbar&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Content </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/components/content&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Title </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/components/title&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Tip </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/components/tip&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> styles </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./index.less&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SProps</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useContext</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IContext</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">&gt;&gt;(window.</span><span style="color:#005CC5;">STORE_CONTEXT</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Navbar</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">props}&gt;&lt;/</span><span style="color:#005CC5;">Navbar</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{styles.container}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">Title</span><span style="color:#24292E;">&gt;{state?.detailData?.title}&lt;/</span><span style="color:#005CC5;">Title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">Tip</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">date</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{state?.detailData?.date}</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">wordCount</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{state?.detailData?.wordCount}</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">readingTime</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{state?.detailData?.readingTime}</span></span>
<span class="line"><span style="color:#24292E;">        /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">Content</span><span style="color:#24292E;">&gt;{state?.detailData?.content}&lt;/</span><span style="color:#005CC5;">Content</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>详情页的 UI 组件由四部分组成。</p><ul><li><p>Navbar：导航条。</p></li><li><p>Title：文章标题。</p></li><li><p>Tip：文章发布时间、字数等提示。</p></li><li><p>Content：文章内容。</p></li></ul>`,17),_=l(`<h4 id="应用部署" tabindex="-1">应用部署 <a class="header-anchor" href="#应用部署" aria-label="Permalink to &quot;应用部署&quot;">​</a></h4><p>代码开发完成后，你可以通过下面的命令在本地启动应用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm start</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">[HPM] Proxy created</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">asset</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">manifest  </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8000</span></span>
<span class="line"><span style="color:#E1E4E8;"> Server is listening on http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm start</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">[HPM] Proxy created</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">asset</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">manifest  </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8000</span></span>
<span class="line"><span style="color:#24292E;"> Server is listening on http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3000</span></span></code></pre></div><p>应用启动后就可以打开浏览器输入 <a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a> 查看效果了。</p><p>在本地开发测试完成后，接下来就需要将其部署到函数计算。你可以运行 npm run deploy 命令进部署：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm run deploy</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">service  serverless</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ssr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cms deploy success</span></span>
<span class="line"><span style="color:#E1E4E8;">......</span></span>
<span class="line"><span style="color:#E1E4E8;">The assigned temporary domain is http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//41506101-1457216987974698.test.functioncompute.com，expired at 2021-02-04 00:35:01, limited by 1000 per day.</span></span>
<span class="line"><span style="color:#E1E4E8;">......</span></span>
<span class="line"><span style="color:#E1E4E8;">Deploy success</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm run deploy</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">service  serverless</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ssr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cms deploy success</span></span>
<span class="line"><span style="color:#24292E;">......</span></span>
<span class="line"><span style="color:#24292E;">The assigned temporary domain is http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//41506101-1457216987974698.test.functioncompute.com，expired at 2021-02-04 00:35:01, limited by 1000 per day.</span></span>
<span class="line"><span style="color:#24292E;">......</span></span>
<span class="line"><span style="color:#24292E;">Deploy success</span></span></code></pre></div><p><code>npm run deploy</code>其实是执行了构建代码和部署应用两个步骤，这两个步骤都是在本机执行的。但这就存在一个隐藏风险，如果团队同学本地开发环境不同，就可能导致构建产物不同，进而导致部署到线上的代码存在风险。<strong>所以更好的实践是：实现一个业务的持续集成流程，统一构建部署。</strong></p><p>应用部署成功后，会自动创建一个测试的域名，例如<a href="http://41506101-1457216987974698.test.functioncompute.com" target="_blank" rel="noreferrer">http://41506101-1457216987974698.test.functioncompute.com</a>，我们可以打开该域名查看最终效果。</p><p>讲到这儿，基于 Serverless 的服务端渲染应用就开发完成了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>总的来说，基于 Serverless 的服务端渲染应用实现也比较简单。如果你想要追求更好的用户体验，我也建议你对核心业务做服务端渲染的优化。基于 Serverless 的服务端渲染，可以让我们不用再像以前一样担心服务器的运维和扩容，大大提高了生产力。同时有了服务端渲染后，我也建议你完善业务的持续集成流程，将整个研发链路打通，降低代码构建发布的风险，提升从开发到测试再到部署的效率。</p>`,11),x=l("<p>当然，要达到页面的极致体验，我们还需要做很多工作，比如：</p><ul><li><p>将静态资源部署到 CDN，提升资源加载速度；</p></li><li><p>针对页面进行缓存，减少函数冷启动对性能的影响；</p></li><li><p>对服务端异常进行降级处理等等。</p></li></ul><p>但不管我们用不用 Serverless，都需要做这些工作。关于这一讲，我想要强调以下几点：</p><ul><li><p>基于 Serverless 的服务端渲染应用，可以让我们不用关心服务器的运维，应用也天然具有弹性；</p></li><li><p>基于 Serverless 开发服务端渲染应用，建议你完善业务的持续集成流程；</p></li><li><p>要达到页面的极致性能，还需要考虑将静态资源部署到 CDN、对页面进行缓存等技术；</p></li><li><p>对于服务端渲染应用，建议你完善业务的服务降级能力，进一步提高稳定性。</p></li></ul><p>最后，我给你的作业是，实现一个服务端渲染应用。 我们下一讲见。</p>",5);function S(b,k,T,w,I,P){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/94/3B/Ciqc1GAXxlCABEjhAAGFmUrRE68475.png"}),p(),y,i,d,F,u,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/94/46/CgqCHmAXxluARkcHAAF-S8PNwUE730.png"}),p(),m,C,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/94/3B/Ciqc1GAXxmOATGYqAAGjC4CgYTw981.png"}),p(),g,D,A,v,h,q,a(n,{alt:"ssr.gif",src:"https://s0.lgstatic.com/i/image/M00/94/3B/Ciqc1GAXxoiANTROADtU9yybMQY209.gif"}),B,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/94/46/CgqCHmAXx1WAV0BxAAM5rls-jc4377.png"}),f,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/94/3B/Ciqc1GAXx3GADE4AAAO-vJ2TBH0389.png"}),_,a(n,{alt:"玩转 Serverless 架构17金句.png",src:"https://s0.lgstatic.com/i/image6/M00/04/7F/CioPOWAsxEeANlL-AAEkPyzgS2s711.png"}),x])}const R=o(r,[["render",S]]);export{N as __pageData,R as default};
