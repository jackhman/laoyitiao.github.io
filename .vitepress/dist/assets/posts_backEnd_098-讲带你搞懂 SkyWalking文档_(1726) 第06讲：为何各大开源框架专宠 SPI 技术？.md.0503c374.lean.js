import{_ as p,j as o,o as e,g as t,k as a,s,h as c,Q as l}from"./chunks/framework.e0c66c3f.js";const I=JSON.parse('{"title":"JDK SPI 机制 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1726) 第06讲：为何各大开源框架专宠 SPI 技术？.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1726) 第06讲：为何各大开源框架专宠 SPI 技术？.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1726) 第06讲：为何各大开源框架专宠 SPI 技术？.md"},E=s("p",null,"在此前的课时中，已经详细介绍了 SkyWalking Agent 用到的多种基础技术，例如，Byte Buddy、Java Agent 以及 OpenTracing 中的核心概念。本课时将深入介绍 SkyWalking Agent 以及 OAP 中都会使用到的 SPI 技术。",-1),y=s("h3",{id:"jdk-spi-机制",tabindex:"-1"},[c("JDK SPI 机制 "),s("a",{class:"header-anchor",href:"#jdk-spi-机制","aria-label":'Permalink to "JDK SPI 机制"'},"​")],-1),i=s("p",null,"SPI（Service Provider Interface）主要是被框架开发人员使用的一种技术。例如，使用 Java 语言访问数据库时我们会使用到 java.sql.Driver 接口，每个数据库厂商使用的协议不同，提供的 java.sql.Driver 实现也不同，在开发 java.sql.Driver 接口时，开发人员并不清楚用户最终会使用哪个数据库，在这种情况下就可以使用 Java SPI 机制为 java.sql.Driver 接口寻找具体的实现。",-1),d=s("p",null,"当服务的提供者提供了一种接口的实现之后，需要在 Classpath 下的 META-INF/services/ 目录里创建一个以服务接口命名的文件，此文件记录了该 jar 包提供的服务接口的具体实现类。当某个应用引入了该 jar 包且需要使用该服务时，JDK SPI 机制就可以通过查找这个 jar 包的 META-INF/services/ 中的配置文件来获得具体的实现类名，进行实现类的加载和实例化，最终使用该实现类完成业务功能。",-1),F=s("p",null,"下面通过一个简单的示例演示 JDK SPI 的基本使用方式，示例如下：",-1),g=l("",11),D=l("",4),v=l("",35);function u(A,h,C,b,S,x){const n=o("Image");return e(),t("div",null,[E,y,i,d,F,a(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/7A/CD/Cgq2xl55wp-AB3-XAAAzU_GplFY907.png"}),g,a(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B7/Ciqah155wp-Af69RAABMERGHE0g472.png"}),D,a(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/7A/CD/Cgq2xl55wp-ADMceAABXf_a-pjQ712.png"}),v])}const m=p(r,[["render",u]]);export{I as __pageData,m as default};
