import{_ as o,j as e,o as t,g as c,k as p,h as n,s,Q as l}from"./chunks/framework.e0c66c3f.js";const I=JSON.parse('{"title":"dubbo-rpc-api ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4273) 23  核心接口介绍，RPC 层骨架梳理.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4273) 23  核心接口介绍，RPC 层骨架梳理.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4273) 23  核心接口介绍，RPC 层骨架梳理.md"},E=s("p",null,[n("在前面的课程中，我们深入介绍了 Dubbo 架构中的 Dubbo Remoting 层的相关内容，了解了 Dubbo 底层的网络模型以及线程模型。从本课时开始，我们就开始介绍 Dubbo Remoting 上面的一层------ Protocol 层（如下图所示），"),s("strong",null,"Protocol 层是 Remoting 层的使用者"),n("，会通过 Exchangers 门面类创建 ExchangeClient 以及 ExchangeServer，还会创建相应的 ChannelHandler 实现以及 Codec2 实现并交给 Exchange 层进行装饰。")],-1),y=s("p",null,"Dubbo 架构中 Protocol 层的位置图",-1),i=s("p",null,[s("strong",null,"Protocol 层在 Dubbo 源码中对应的是 dubbo-rpc 模块"),n("，该模块的结构如下图所示：")],-1),F=s("p",null,"dubbo-rpc 模块结构图",-1),g=s("p",null,[n("我们可以看到有很多模块，和 dubbo-remoting 模块类似，其中 "),s("strong",null,"dubbo-rpc-api 是对具体协议、服务暴露、服务引用、代理等的抽象，是整个 Protocol 层的核心"),n("。剩余的模块，例如，dubbo-rpc-dubbo、dubbo-rpc-grpc、dubbo-rpc-http 等，都是 Dubbo 支持的具体协议，可以看作dubbo-rpc-api 模块的具体实现。")],-1),A=s("h3",{id:"dubbo-rpc-api",tabindex:"-1"},[n("dubbo-rpc-api "),s("a",{class:"header-anchor",href:"#dubbo-rpc-api","aria-label":'Permalink to "dubbo-rpc-api"'},"​")],-1),v=s("p",null,"这里我们首先来看 dubbo-rpc-api 模块的包结构，如下图所示：",-1),d=l("",8),u=l("",33);function b(D,h,k,C,m,B){const a=e("Image");return t(),c("div",null,[E,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5D/C4/Ciqc1F-FS2eAdVorABDINpNLpXY061.png"}),n(),y,i,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/5D/C4/Ciqc1F-FS4aAMyvkAABpKhWTC9Q132.png"}),n(),F,g,A,v,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/5D/CF/CgqCHl-FS5CAP7kCAADYKrhf28A273.png"}),n(),d,p(a,{alt:"Lark20201013-153553.png",src:"https://s0.lgstatic.com/i/image/M00/5D/D2/Ciqc1F-FWQuAb1ypAAC0qPg0sWQ701.png"}),n(),u])}const x=o(r,[["render",b]]);export{I as __pageData,x as default};
