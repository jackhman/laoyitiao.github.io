import{_ as p,j as e,o as t,h as r,k as o,f as n,s,Q as l}from"./chunks/framework.d3daa342.js";const N=JSON.parse('{"title":"11功能组件：如何使用路由，支持多页面导航？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6664) 11  功能组件：如何使用路由，支持多页面导航？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6664) 11  功能组件：如何使用路由，支持多页面导航？.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/048_iOS开发进阶/(6664) 11  功能组件：如何使用路由，支持多页面导航？.md"},i=s("h1",{id:"_11功能组件-如何使用路由-支持多页面导航",tabindex:"-1"},[n("11功能组件：如何使用路由，支持多页面导航？ "),s("a",{class:"header-anchor",href:"#_11功能组件-如何使用路由-支持多页面导航","aria-label":'Permalink to "11功能组件：如何使用路由，支持多页面导航？"'},"​")],-1),y=s("p",null,"随着 App 功能的不断丰富，以内容和体验为导向的导航模式变得越来越流行。这种导航模式的特点是一个页面可以导航到任意一个其他的页面。",-1),E=s("p",null,"比如在 iOS 里使用 UIKit 来实现导航功能时，源 ViewController 需要知道目标 ViewController 的类型信息，换句话说就是源 ViewController 必须直接依赖目标 ViewController。这会导致什么问题呢？如果 App的多个模块之间需要相互导航，那么它们之间就会产生循环依赖，如下图所示。",-1),d=s("p",null,"假如随着 Moments App 不断发展，除了朋友圈功能以外，我们还可能新增商城功能和实时通讯功能。当用户点击朋友圈信息的时候可以打开商品信息页面，当点击朋友头像时可以进入实时通讯页面。而在商品信息页面里面，用户还可以打开朋友圈页面进行分享。",-1),g=s("p",null,"这种模块之间的循环依赖会引起一系列的问题，比如因为代码强耦合，导致代码变得难以维护。如果不同功能由不同产品研发团队负责开发与维护，循环依赖还会增加很多的沟通成本，每次一点小改动都需要通知其他团队进行更新。",-1),u=s("p",null,"那么，有没有什么好的办法解决这种问题呢？",-1),F=s("h3",{id:"路由方案的架构与实现",tabindex:"-1"},[n("路由方案的架构与实现 "),s("a",{class:"header-anchor",href:"#路由方案的架构与实现","aria-label":'Permalink to "路由方案的架构与实现"'},"​")],-1),C=s("p",null,"我们可以使用一套基于 URL 的路由方案来解决多个模块之间的导航问题。下面是这套路由方案的架构图。",-1),v=l('<p>这个架构分成三层，因为上层组件依赖于下层组件，我们从下往上来看。</p><ul><li><p>最底层是基础组件层，路由模块也属于基础组件，路由模块不依赖于任何其他组件。</p></li><li><p>中间层是功能业务层，各个功能都单独封装为一个模块，他们都依赖于基础组件层，但功能层内的各个模块彼此不相互依赖，这能有效保证多个功能研发团队并行开发。</p></li><li><p>最上层是 App 容器模块，它负责把所有功能模块整合起来，形成一个完整的产品。</p></li></ul><p><strong>这套路由方案主要由两大部分组成，独立的路由模块和嵌入功能模块里面的导航组件。</strong> 接下来，我们以 Moments App 为例子一起看看这套方案是怎样实现的吧。</p><h4 id="路由模块" tabindex="-1">路由模块 <a class="header-anchor" href="#路由模块" aria-label="Permalink to &quot;路由模块&quot;">​</a></h4><p>路由模块非常简单，主要有两个协议（Protocol）和一个类组成，如下图所示。</p>',5),A=l(`<p><strong>AppRouting 和 AppRouter</strong></p><p>我们先来看路由模块里的<code>AppRouting</code>和<code>AppRouter</code>。其中，<code>AppRouting</code>协议定义了路由模块的接口而<code>AppRouter</code>是<code>AppRouting</code>协议的实现类。</p><p><code>AppRouting</code>协议的代码如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppRouting</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">navigator</span><span style="color:#E1E4E8;">: Navigating)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> url: URL</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;"> routingSource: RoutingSource</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> transitionType: TransitionType)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppRouting</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">navigator</span><span style="color:#24292E;">: Navigating)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> url: URL</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">from</span><span style="color:#24292E;"> routingSource: RoutingSource</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">using</span><span style="color:#24292E;"> transitionType: TransitionType)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个协议只有两个方法：</p><ol><li><p>用于注册 Navigator（导航器）的<code>register(path: String, navigator: Navigating)</code>方法；</p></li><li><p>触发路由的<code>route(to url: URL?, from routingSource: RoutingSource?, using transitionType: TransitionType)</code>方法。</p></li></ol><p>其中<code>route(to:from:using)</code>方法接收三个参数。</p><p>第一个是 URL，我们整套路由系统都是基于 URL 的，因此需要把 URL 传递进来进行导航。</p><p>第二个是类型为<code>RoutingSource</code>的参数，该<code>RoutingSource</code>是一个协议，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingSource</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> { }</span></span>
<span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UIViewController</span><span style="color:#E1E4E8;">: RoutingSource { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingSource</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> { }</span></span>
<span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UIViewController</span><span style="color:#24292E;">: RoutingSource { }</span></span></code></pre></div><p>首先，我们定义一个名为<code>RoutingSource</code>的空协议，然后让<code>UIViewController</code>遵循该协议。这样就能让<code>route(to:from:using)</code>方法与<code>UIViewController</code>进行解耦。</p><p>第三个参数是<code>TransitionType</code>类型。代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransitionType</span><span style="color:#E1E4E8;">: String {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> show, present</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransitionType</span><span style="color:#24292E;">: String {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> show, present</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>TransitionType</code>是一个枚举（enum）类型，用于表示导航过程中的转场动作。<code>show</code>用于把新的目标 ViewController 推进（push）到当前的<code>UINavigationController</code>里面。而<code>present</code>会把新的目标 ViewController 通过模态窗口（modal）的方式来呈现。</p><p>至于<code>AppRouter</code>是<code>AppRouting</code>协议的实现类，其他的具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppRouter</span><span style="color:#E1E4E8;">: AppRouting {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shared: AppRouter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> navigators: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">: Navigating] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">() { }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">navigator</span><span style="color:#E1E4E8;">: Navigating) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        navigators[path.</span><span style="color:#79B8FF;">lowercased</span><span style="color:#E1E4E8;">()] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> navigator</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> url: URL</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;"> routingSource: RoutingSource</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> transitionType: TransitionType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .present) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url, </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sourceViewController </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> routingSource </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> UIViewController </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> UIApplication.shared.rootViewController </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.lastPathComponent.</span><span style="color:#79B8FF;">lowercased</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> urlComponents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URLComponents</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;">: url, </span><span style="color:#79B8FF;">resolvingAgainstBaseURL</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parameters: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (urlComponents.queryItems </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> []).</span><span style="color:#79B8FF;">reduce</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">into</span><span style="color:#E1E4E8;">: [</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">]) { params, queryItem </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">            params[queryItem.name.</span><span style="color:#79B8FF;">lowercased</span><span style="color:#E1E4E8;">()] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queryItem.</span><span style="color:#79B8FF;">value</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        navigators[path]</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">navigate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: sourceViewController, </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: transitionType, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: parameters)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppRouter</span><span style="color:#24292E;">: AppRouting {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> shared: AppRouter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> navigators: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">: Navigating] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">() { }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">navigator</span><span style="color:#24292E;">: Navigating) {</span></span>
<span class="line"><span style="color:#24292E;">        navigators[path.</span><span style="color:#005CC5;">lowercased</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> navigator</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> url: URL</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">from</span><span style="color:#24292E;"> routingSource: RoutingSource</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">using</span><span style="color:#24292E;"> transitionType: TransitionType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .present) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url, </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sourceViewController </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> routingSource </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> UIViewController </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> UIApplication.shared.rootViewController </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.lastPathComponent.</span><span style="color:#005CC5;">lowercased</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> urlComponents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URLComponents</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">url</span><span style="color:#24292E;">: url, </span><span style="color:#005CC5;">resolvingAgainstBaseURL</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parameters: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (urlComponents.queryItems </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> []).</span><span style="color:#005CC5;">reduce</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">into</span><span style="color:#24292E;">: [</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">]) { params, queryItem </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">            params[queryItem.name.</span><span style="color:#005CC5;">lowercased</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queryItem.</span><span style="color:#005CC5;">value</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        navigators[path]</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">navigate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: sourceViewController, </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: transitionType, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: parameters)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>AppRouter</code>首先定义了一个用于存储各个 Navigator 的私有属性<code>navigators</code>。<code>navigators</code>是一个字典类型，它的 Key 是字符串类型，用于保存 URL 的路径值。而所存储的值是具体的 Navigator 的实例。</p><p>然后，<code>AppRouter</code>实现了<code>register</code>和<code>route</code>两个方法。<code>register</code>方法的实现非常简单，就是把<code>path</code>和<code>navigator</code>存到私有属性<code>navigators</code>里面。接着我详细介绍一下<code>route</code>方法的实现。</p><p>因为整套路由方案都是基于 URL 进行导航，因此在该方法里面，首先需要检测<code>url</code>是否为空，如果为空就直接返回了，然后把<code>routingSource</code>向下转型 (downcast) 为<code>UIViewController</code>，如果为空就使用<code>rootViewController</code>作为<code>sourceViewController</code>来表示导航过程中的源 ViewController。</p><p>这些检验都通过以后，我们从<code>url</code>来取出<code>path</code>作为导航的 Key，同时从 Query String 里面取出<code>parameters</code>并作为参数传递给目标 ViewController。</p><p>最后一步是根据<code>path</code>从<code>navigators</code>属性中取出对应的 Navigator，然后调用其<code>navigate(from viewController: UIViewController, using transitionType: TransitionType, parameters: [String: String])</code>方法进行导航。</p><p><strong>Navigating 协议</strong></p><p>除了<code>AppRouting</code>和<code>AppRouter</code>以外，路由模块的核心还包含了一个叫作<code>Navigating</code>的协议。它负责具体的导航工作，下面我们一起看看这个协议的定义与实现吧。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Navigating</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;"> viewController: UIViewController, </span><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> transitionType: TransitionType, </span><span style="color:#B392F0;">parameters</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Navigating</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> destinationViewController: UIViewController, </span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;"> sourceViewController: UIViewController, </span><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> transitionType: TransitionType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> transitionType {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> .show</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            sourceViewController.</span><span style="color:#79B8FF;">show</span><span style="color:#E1E4E8;">(destinationViewController, </span><span style="color:#79B8FF;">sender</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> .present</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            sourceViewController.</span><span style="color:#79B8FF;">present</span><span style="color:#E1E4E8;">(destinationViewController, </span><span style="color:#79B8FF;">animated</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Navigating</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;"> viewController: UIViewController, </span><span style="color:#6F42C1;">using</span><span style="color:#24292E;"> transitionType: TransitionType, </span><span style="color:#6F42C1;">parameters</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Navigating</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> destinationViewController: UIViewController, </span><span style="color:#6F42C1;">from</span><span style="color:#24292E;"> sourceViewController: UIViewController, </span><span style="color:#6F42C1;">using</span><span style="color:#24292E;"> transitionType: TransitionType) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> transitionType {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> .show</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            sourceViewController.</span><span style="color:#005CC5;">show</span><span style="color:#24292E;">(destinationViewController, </span><span style="color:#005CC5;">sender</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> .present</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            sourceViewController.</span><span style="color:#005CC5;">present</span><span style="color:#24292E;">(destinationViewController, </span><span style="color:#005CC5;">animated</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>Navigating</code>协议负责桥接路由模块和其他功能模块，它只定义了一个名叫<code>navigate(from viewController: UIViewController, using transitionType: TransitionType, parameters: [String: String])</code>的方法供<code>AppRouter</code>来调用。</p><p>同时我们也给<code>Navigating</code>定义了一个叫作<code>navigate(to destinationViewController: UIViewController, from sourceViewController: UIViewController, using transitionType: TransitionType)</code>的扩展方法 (Extension method) 来统一封装导航的处理逻辑。</p><p>当<code>transitionType</code>为<code>.show</code>的时候，该方法会调用<code>UIViewController</code>的<code>show(_ vc: UIViewController, sender: Any?)</code>方法进行导航。在调用<code>show</code>方法的时候，iOS 系统会判断<code>sourceViewController</code>是存放在 NavigationController 还是 SplitViewController 里面，并触发相应的换场（Transition）动作。例如当<code>sourceViewController</code>存放在 NavigationController 里面的时候就会把<code>destinationViewController</code>推进 NavigationController 的栈（Stack）里面。</p><p>当<code>transitionType</code>为<code>.present</code>的时候，我们就调用<code>UIViewController</code>的<code>present(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -&gt; Void)? = nil)</code>方法进行导航。在调用<code>present</code>方法的时候，iOS 系统会把<code>destinationViewController</code>通过模态窗口的方式呈现。</p><p>有了<code>Navigating</code>协议以后，我们看看功能模块是怎样关联到路由模块的。</p><h4 id="导航组件" tabindex="-1">导航组件 <a class="header-anchor" href="#导航组件" aria-label="Permalink to &quot;导航组件&quot;">​</a></h4><p>所有功能模块都通过 Navigator 类型为路由模块提供导航功能。一个目标 ViewController 对应一个 Navigator。假如商城模块有商城主页和商品信息页面两个 ViewController，那么商城模块就需要提供两个 Navigtor 来分别导航到这两个 ViewController。</p><p>下面我们以 Moments App 中内部隐藏功能菜单模块为例子，看看 Navigator 是怎样实现的。</p>`,32),h=l(`<p>内部隐藏功能菜单模块有两个 ViewController，因此需要定义两个不同的 Navigator。它们都遵循了<code>Navigating</code>协议。</p><p><strong>InternalMenuNavigator</strong></p><p><code>InternalMenuNavigator</code>负责导航到<code>InternalMenuViewController</code>。下面是它的具体代码实现。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuNavigator</span><span style="color:#E1E4E8;">: Navigating {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;"> viewController: UIViewController, </span><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> transitionType: TransitionType, </span><span style="color:#B392F0;">parameters</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> navigationController </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UINavigationController</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">rootViewController</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">InternalMenuViewController</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">navigate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: navigationController, </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: viewController, </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: transitionType)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuNavigator</span><span style="color:#24292E;">: Navigating {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;"> viewController: UIViewController, </span><span style="color:#6F42C1;">using</span><span style="color:#24292E;"> transitionType: TransitionType, </span><span style="color:#6F42C1;">parameters</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> navigationController </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UINavigationController</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">rootViewController</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">InternalMenuViewController</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">navigate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: navigationController, </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: viewController, </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: transitionType)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从代码可以看到，<code>InternalMenuNavigator</code>的实现非常简单。首先，初始化<code>InternalMenuViewController</code>的实例，然后把该实例放置到一个<code>UINavigationController</code>里面。接下来我们调用<code>Navigating</code>的扩展方法<code>navigate(to destinationViewController: UIViewController, from sourceViewController: UIViewController, using transitionType: TransitionType)</code>来进行导航。</p><p><strong>DesignKitDemoNavigator</strong></p><p><code>DesignKitDemoNavigator</code>负责导航到<code>DesignKitDemoViewController</code>。下面是实现的代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DesignKitDemoNavigator</span><span style="color:#E1E4E8;">: Navigating {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;"> viewController: UIViewController, </span><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> transitionType: TransitionType, </span><span style="color:#B392F0;">parameters</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> productName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parameters[</span><span style="color:#9ECBFF;">&quot;productname&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> versionNumber </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parameters[</span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> destinationViewController </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DesignKitDemoViewController</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">productName</span><span style="color:#E1E4E8;">: productName, </span><span style="color:#79B8FF;">versionNumber</span><span style="color:#E1E4E8;">: versionNumber)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">navigate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: destinationViewController, </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: viewController, </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: transitionType)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DesignKitDemoNavigator</span><span style="color:#24292E;">: Navigating {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;"> viewController: UIViewController, </span><span style="color:#6F42C1;">using</span><span style="color:#24292E;"> transitionType: TransitionType, </span><span style="color:#6F42C1;">parameters</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> productName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parameters[</span><span style="color:#032F62;">&quot;productname&quot;</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> versionNumber </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parameters[</span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> destinationViewController </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DesignKitDemoViewController</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">productName</span><span style="color:#24292E;">: productName, </span><span style="color:#005CC5;">versionNumber</span><span style="color:#24292E;">: versionNumber)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">navigate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: destinationViewController, </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: viewController, </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: transitionType)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与<code>InternalMenuNavigator</code>不一样的地方是,<code>DesignKitDemoNavigator</code>从<code>parameters</code>中取出了<code>productName</code>和<code>versionNumber</code>两个参数的值，然后传递给<code>DesignKitDemoViewController</code>进行初始化。最后也是调用<code>Navigating</code>的扩展方法<code>navigate(to:from:using:)</code>进行导航。</p><h3 id="路由方案的使用" tabindex="-1">路由方案的使用 <a class="header-anchor" href="#路由方案的使用" aria-label="Permalink to &quot;路由方案的使用&quot;">​</a></h3><p>以上是有关路由方案的架构和实现，有了这个路由方案以后，那我们该如何使用它呢？接下来我将从它的注册与调用、Universal Links 的路由和验证来介绍下。</p><h4 id="路由的注册与调用" tabindex="-1">路由的注册与调用 <a class="header-anchor" href="#路由的注册与调用" aria-label="Permalink to &quot;路由的注册与调用&quot;">​</a></h4><p>因为<strong>App 容器模块</strong> 依赖所有的功能模块和路由模块，我们可以把路由注册的逻辑放在该模块的<code>AppDelegate</code>里面，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> router: AppRouting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AppRouter.shared</span></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#79B8FF;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;InternalMenu&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">navigator</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">InternalMenuNavigator</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#79B8FF;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;DesignKit&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">navigator</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">DesignKitDemoNavigator</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> router: AppRouting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AppRouter.shared</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#005CC5;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;InternalMenu&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">navigator</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">InternalMenuNavigator</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#005CC5;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;DesignKit&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">navigator</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">DesignKitDemoNavigator</span><span style="color:#24292E;">())</span></span></code></pre></div><p>从上面可以看到，我们通过传递<code>path</code>和<code>navigator</code>的实例来注册路由信息。注册完毕以后，各个功能模块就可以调用<code>route(to url: URL?, from routingSource: RoutingSource?, using transitionType: TransitionType)</code>方法进行路由。下面是如何路由到内部功能菜单页面的代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#79B8FF;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">\\(UniversalLinks.</span><span style="color:#E1E4E8;">baseURL</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">InternalMenu&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: rootViewController, </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: .present)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#005CC5;">route</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">\\(UniversalLinks.</span><span style="color:#24292E;">baseURL</span><span style="color:#032F62;">)</span><span style="color:#032F62;">InternalMenu&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: rootViewController, </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: .present)</span></span></code></pre></div><p>路由的过程中需要传入一个 URL，源 ViewController 以及换场的类型三个参数。</p><p>下面是路由到 DesignKit 范例页面的具体代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#79B8FF;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">\\(UniversalLinks.</span><span style="color:#E1E4E8;">baseURL</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">DesignKit?productName=DesignKit&amp;version=1.0.1&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">routingSourceProvider</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: .show)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#005CC5;">route</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">\\(UniversalLinks.</span><span style="color:#24292E;">baseURL</span><span style="color:#032F62;">)</span><span style="color:#032F62;">DesignKit?productName=DesignKit&amp;version=1.0.1&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">routingSourceProvider</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: .show)</span></span></code></pre></div><p>这个例子中，我们通过 Query String 的方式把<code>productName</code>和<code>version</code>参数传递给目标 ViewController。</p><h4 id="universal-links-的路由" tabindex="-1">Universal Links 的路由 <a class="header-anchor" href="#universal-links-的路由" aria-label="Permalink to &quot;Universal Links 的路由&quot;">​</a></h4><p>我们之所以选择基于 URL 的路由方案，其中的一个原因是对 Universal Links 的支持。当我们的 App 支持 Universal Links 以后，一旦用户在 iOS 设备上打开 Universal Links 所支持的 URL 时，就会自动打开我们的 App。</p><p>根据 App 是否支持 Scenes 来区分，目前在 UIKit 里面支持 Universal Links 有两种方式。如果 App 还不支持 Scenes 的话，我们需要在<code>AppDelegate</code>里面添加 Universal Links 的支持的代码，如下所示：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">application</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> application: UIApplication,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#B392F0;">continue</span><span style="color:#E1E4E8;"> userActivity: NSUserActivity,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#B392F0;">restorationHandler</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">@escaping</span><span style="color:#E1E4E8;"> ([UIUserActivityRestoring]</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> userActivity.activityType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> NSUserActivityTypeBrowsingWeb,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> incomingURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userActivity.webpageURL </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> router: AppRouting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AppRouter.shared</span></span>
<span class="line"><span style="color:#E1E4E8;">    router.</span><span style="color:#79B8FF;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: incomingURL, </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: .present)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">application</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> application: UIApplication,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#6F42C1;">continue</span><span style="color:#24292E;"> userActivity: NSUserActivity,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#6F42C1;">restorationHandler</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">@escaping</span><span style="color:#24292E;"> ([UIUserActivityRestoring]</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> userActivity.activityType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> NSUserActivityTypeBrowsingWeb,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> incomingURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userActivity.webpageURL </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> router: AppRouting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AppRouter.shared</span></span>
<span class="line"><span style="color:#24292E;">    router.</span><span style="color:#005CC5;">route</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: incomingURL, </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: .present)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们首先检查<code>userActivity.activityType</code>是否为<code>NSUserActivityTypeBrowsingWeb</code>，并把 URL 取出来。如果验证都通过，就可以调用<code>AppRouting</code>的<code>route(to url: URL?, from routingSource: RoutingSource?, using transitionType: TransitionType)</code>方法进行路由。</p><p>在调用<code>route</code>方法的时候，我们把<code>nil</code>传递给<code>routingSource</code>并指定换场方式为<code>.present</code>。这样路由模块就会通过模态窗口把目标 ViewController 呈现出来。</p><p>如果 App 已经使用 Scene，例如我们的 Moments App，那么我们需要修改<code>SceneDelegate</code>的<code>scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code>方法来支持 Universal Links，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> userActivity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connectionOptions.userActivities.</span><span style="color:#79B8FF;">first</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    userActivity.activityType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> NSUserActivityTypeBrowsingWeb,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> incomingURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userActivity.webpageURL {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> router: AppRouting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AppRouter.shared</span></span>
<span class="line"><span style="color:#E1E4E8;">    router.</span><span style="color:#79B8FF;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: incomingURL, </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: .present)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> userActivity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connectionOptions.userActivities.</span><span style="color:#005CC5;">first</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    userActivity.activityType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> NSUserActivityTypeBrowsingWeb,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> incomingURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userActivity.webpageURL {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> router: AppRouting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AppRouter.shared</span></span>
<span class="line"><span style="color:#24292E;">    router.</span><span style="color:#005CC5;">route</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: incomingURL, </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: .present)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从代码可见，当我们从<code>connectionOptions</code>取出<code>userActivity</code>以后，后面的处理逻辑和上面<code>AppDelegate</code>的实现方式一模一样，在这里我就不赘述了。</p><h4 id="路由的验证" tabindex="-1">路由的验证 <a class="header-anchor" href="#路由的验证" aria-label="Permalink to &quot;路由的验证&quot;">​</a></h4><p>当我们的 App 支持 Universal Links 以后，我们需要在 Navigator 里面增加一些验证的代码，否则可能会引起外部系统的攻击，例如 Moments App 的内部隐藏功能菜单不想给 App Store 用户使用，我们可以在<code>InternalMenuNavigator</code>里面添加以下的验证代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> togglesDataStore: TogglesDataStoreType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BuildTargetTogglesDataStore.shared</span></span>
<span class="line"><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> togglesDataStore.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(BuildTargetToggle.debug) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> togglesDataStore.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(BuildTargetToggle.internal) </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> togglesDataStore: TogglesDataStoreType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BuildTargetTogglesDataStore.shared</span></span>
<span class="line"><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> togglesDataStore.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(BuildTargetToggle.debug) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> togglesDataStore.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(BuildTargetToggle.internal) </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码会检查当前的 App 是否为开发环境或者测试环境的版本，如果&quot;不是&quot;，说明当前的 App 是 App Store 版本，我们就直接退出，不允许打开内部功能菜单。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲中我介绍了一个基于 URL 的通用路由方案的实现方式，有了这个路由方案，不但可以帮助所有功能模块的解耦，而且能很方便地支持 Universal Links。</p>`,35),m=s("p",null,"当我们的 App 支持 Universal Links 以后，需要特别注意对路由的 URL 进行验证，否则会很容易被外部系统进行攻击。这些验证的手段包括不应该允许 Universal Links 更新或者删除数据，不允许 Universal Links 访问任何敏感数据。",-1),B=s("p",null,"思考题：",-1),w=s("blockquote",null,[s("p",null,"在软件开发中，只有合适的方案，没有完美的方案。基于 URL 的路有方案也有一些需要处理的难题，例如如何传递数组和大对象，请问你是怎样处理这些问题的呢？")],-1),D=s("p",null,"可以把回答写到下面的留言区哦，我们一起探讨一下。下一讲将介绍如何设置多语言支持。",-1);function T(U,_,f,S,V,R){const a=e("Image");return t(),r("div",null,[i,y,E,o(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/29/B3/CioPOWBhjTiAan3AAAGv59UQhFU067.png"}),n(),d,g,u,F,C,o(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/29/B3/CioPOWBhjTGARlXPAAL0T-JWwPg795.png"}),n(),v,o(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/29/B3/CioPOWBhjSCAPa5mAANi15SVPxc603.png"}),n(),A,o(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M00/29/AB/Cgp9HWBhjQ6AQXGQAAOJFXHFOq8674.png"}),n(),h,o(a,{alt:"思维导图+二维码.png",src:"https://s0.lgstatic.com/i/image6/M00/29/B2/Cgp9HWBhlPqAUXPUAATzGVdjazs511.png"}),n(),m,B,w,D])}const k=p(c,[["render",T]]);export{N as __pageData,k as default};
