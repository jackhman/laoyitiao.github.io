import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.e0c66c3f.js";const F=JSON.parse('{"title":"路径和路由组件的渲染的映射 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7658) 27   Vue Router：如何实现一个前端路由？（下）.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7658) 27   Vue Router：如何实现一个前端路由？（下）.md","lastUpdated":null}'),p={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7658) 27   Vue Router：如何实现一个前端路由？（下）.md"},o=l(`<p>上节课我们学习了 Vue Router 的基本用法，并且开始探究它的实现原理，今天我们继续未完的原理，一起来看路径是如何和路由组件映射的。</p><h3 id="路径和路由组件的渲染的映射" tabindex="-1">路径和路由组件的渲染的映射 <a class="header-anchor" href="#路径和路由组件的渲染的映射" aria-label="Permalink to &quot;路径和路由组件的渲染的映射&quot;">​</a></h3><p>通过前面的示例我们了解到，路由组件就是通过 RouterView 组件渲染的，那么 RouterView 是怎么渲染的呢，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> RouterView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;RouterView&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    route</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Object,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">(props, { attrs, slots }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warnDeprecatedUsage</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> injectedRoute </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">inject</span><span style="color:#E1E4E8;">(routeLocationKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> depth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">inject</span><span style="color:#E1E4E8;">(viewDepthKey, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> matchedRouteRef </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (props.route </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> injectedRoute).matched[depth])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(viewDepthKey, depth </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(matchedRouteKey, matchedRouteRef)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> viewRef </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (to) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        to.instances[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (from </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> oldInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          to.leaveGuards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> from.leaveGuards</span></span>
<span class="line"><span style="color:#E1E4E8;">          to.updateGuards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> from.updateGuards</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        to </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">from </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isSameRouteRecord</span><span style="color:#E1E4E8;">(to, from) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">oldInstance)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        (to.enterCallbacks[name] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(callback </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(instance))</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> route </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props.route </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> injectedRoute</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> matchedRoute </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matchedRouteRef.value</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ViewComponent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matchedRoute </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> matchedRoute.components[props.name]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> currentName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props.name</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ViewComponent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> slots.default</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">({ Component</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ViewComponent, route })</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> routePropsOption </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matchedRoute.props[props.name]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> routeProps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> routePropsOption</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> routePropsOption </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> route.params</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> typeof routePropsOption </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">routePropsOption</span><span style="color:#E1E4E8;">(route)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> routePropsOption</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> onVnodeUnmounted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnode.component.isUnmounted) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          matchedRoute.instances[currentName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> component </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(ViewComponent, </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({}, routeProps, attrs, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        onVnodeUnmounted,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ref</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> viewRef,</span></span>
<span class="line"><span style="color:#E1E4E8;">      }))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        slots.default</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">({ Component</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> component, route })</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> component)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> RouterView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineComponent</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;RouterView&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;default&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    route</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Object,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(props, { attrs, slots }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warnDeprecatedUsage</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> injectedRoute </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inject</span><span style="color:#24292E;">(routeLocationKey)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> depth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inject</span><span style="color:#24292E;">(viewDepthKey, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> matchedRouteRef </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (props.route </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> injectedRoute).matched[depth])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(viewDepthKey, depth </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(matchedRouteKey, matchedRouteRef)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> viewRef </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (to) {</span></span>
<span class="line"><span style="color:#24292E;">        to.instances[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (from </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> oldInstance) {</span></span>
<span class="line"><span style="color:#24292E;">          to.leaveGuards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from.leaveGuards</span></span>
<span class="line"><span style="color:#24292E;">          to.updateGuards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from.updateGuards</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        to </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">from </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isSameRouteRecord</span><span style="color:#24292E;">(to, from) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">oldInstance)) {</span></span>
<span class="line"><span style="color:#24292E;">        (to.enterCallbacks[name] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(callback </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(instance))</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> route </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props.route </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> injectedRoute</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> matchedRoute </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matchedRouteRef.value</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ViewComponent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matchedRoute </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> matchedRoute.components[props.name]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> currentName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props.name</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ViewComponent) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> slots.default</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> slots.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">({ Component</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ViewComponent, route })</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> routePropsOption </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matchedRoute.props[props.name]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> routeProps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> routePropsOption</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> routePropsOption </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> route.params</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> typeof routePropsOption </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">routePropsOption</span><span style="color:#24292E;">(route)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> routePropsOption</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> onVnodeUnmounted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vnode.component.isUnmounted) {</span></span>
<span class="line"><span style="color:#24292E;">          matchedRoute.instances[currentName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> component </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(ViewComponent, </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, routeProps, attrs, {</span></span>
<span class="line"><span style="color:#24292E;">        onVnodeUnmounted,</span></span>
<span class="line"><span style="color:#24292E;">        ref</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> viewRef,</span></span>
<span class="line"><span style="color:#24292E;">      }))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        slots.default</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> slots.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">({ Component</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> component, route })</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> component)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>RouterView 组件也是基于 composition API 实现的，我们重点看它的渲染部分，由于 setup 函数的返回值是一个函数，那这个函数就是它的渲染函数。</p><p>我们从后往前看，通常不带插槽的情况下，会返回 component 变量，它是根据 ViewComponent 渲染出来的，而ViewComponent 是根据matchedRoute.components[props.name] 求得的，而matchedRoute 是 matchedRouteRef对应的 value。</p><p>matchedRouteRef 一个计算属性，在不考虑 prop 传入 route 的情况下，它的 getter 是由 injectedRoute.matched[depth] 求得的，而 injectedRoute，就是我们在前面在安装路由时候，注入的响应式 currentRoute 对象，而 depth 就是表示这个 RouterView 的嵌套层级。</p><p>所以我们可以看到，RouterView 的渲染的路由组件和当前路径 currentRoute 的 matched 对象相关，也和 RouterView 自身的嵌套层级相关。</p><p>那么接下来，我们就来看路径对象中的 matched 的值是怎么在路径切换的情况下更新的。</p><p>我们还是通过示例的方式来说明，我们对前面的示例稍做修改，加上嵌套路由的场景：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createRouter, createWebHashHistory } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Home</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { template: </span><span style="color:#9ECBFF;">&#39;&lt;div&gt;Home&lt;/div&gt;&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">About</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  template: </span><span style="color:#9ECBFF;">\`&lt;div&gt;About</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;router-link to=&quot;/about/user&quot;&gt;Go User&lt;/router-link&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;router-view&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;/div&gt;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  template: </span><span style="color:#9ECBFF;">&#39;&lt;div&gt;User&lt;/div&gt;,&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">routes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  { path: </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, component: Home },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: </span><span style="color:#9ECBFF;">&#39;/about&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    component: About,</span></span>
<span class="line"><span style="color:#E1E4E8;">    children: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        path: </span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        component: User</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouter</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  history: </span><span style="color:#B392F0;">createWebHashHistory</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(router)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createApp } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createRouter, createWebHashHistory } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Home</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { template: </span><span style="color:#032F62;">&#39;&lt;div&gt;Home&lt;/div&gt;&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">About</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">\`&lt;div&gt;About</span></span>
<span class="line"><span style="color:#032F62;">  &lt;router-link to=&quot;/about/user&quot;&gt;Go User&lt;/router-link&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;router-view&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;/div&gt;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">&#39;&lt;div&gt;User&lt;/div&gt;,&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { path: </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, component: Home },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    path: </span><span style="color:#032F62;">&#39;/about&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    component: About,</span></span>
<span class="line"><span style="color:#24292E;">    children: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        component: User</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  history: </span><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  routes</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createApp</span><span style="color:#24292E;">({})</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(router)</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>它和前面示例的区别在于，我们在 About 路由组件中又嵌套了一个 RouterView 组件，然后对 routes 数组中 path 为 /about 的路径配置扩展了 children 属性，对应的就是 About 组件嵌套路由的配置。</p><p>当我们执行 createRouter 函数创建路由的时候，内部会执行如下代码来创建一个 matcher 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouterMatcher</span><span style="color:#E1E4E8;">(options.routes, options)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouterMatcher</span><span style="color:#24292E;">(options.routes, options)</span></span></code></pre></div><p>执行了createRouterMatcher 函数，并传入 routes 路径配置数组，它的目的就是根据路径配置对象创建一个路由的匹配对象，再来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createRouterMatcher</span><span style="color:#E1E4E8;">(routes, globalOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> matchers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> matcherMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  globalOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeOptions</span><span style="color:#E1E4E8;">({ strict</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, end</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, sensitive</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> }, globalOptions)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">addRoute</span><span style="color:#E1E4E8;">(record, parent, originalRecord) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    let isRootAdd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">originalRecord</span></span>
<span class="line"><span style="color:#E1E4E8;">    let mainNormalizedRecord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeRouteRecord</span><span style="color:#E1E4E8;">(record)</span></span>
<span class="line"><span style="color:#E1E4E8;">    mainNormalizedRecord.aliasOf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> originalRecord </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> originalRecord.record</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeOptions</span><span style="color:#E1E4E8;">(globalOptions, record)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> normalizedRecords </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      mainNormalizedRecord,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    let matcher</span></span>
<span class="line"><span style="color:#E1E4E8;">    let originalMatcher</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> normalizedRecord of normalizedRecords) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      let { path } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> normalizedRecord</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> path[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        let parentPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.record.path</span></span>
<span class="line"><span style="color:#E1E4E8;">        let connectingSlash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentPath[parentPath.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        normalizedRecord.path </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">          parent.record.path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (path </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> connectingSlash </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouteRecordMatcher</span><span style="color:#E1E4E8;">(normalizedRecord, parent, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( parent </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> path[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">checkMissingParamsInAbsolutePath</span><span style="color:#E1E4E8;">(matcher, parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (originalRecord) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        originalRecord.alias.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">checkSameParams</span><span style="color:#E1E4E8;">(originalRecord, matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        originalMatcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> originalMatcher </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> matcher</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (originalMatcher </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">          originalMatcher.alias.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isRootAdd </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> record.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isAliasRecord</span><span style="color:#E1E4E8;">(matcher))</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">removeRoute</span><span style="color:#E1E4E8;">(record.name)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;children&#39;</span><span style="color:#E1E4E8;"> in mainNormalizedRecord) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        let children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mainNormalizedRecord.children</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> children.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">addRoute</span><span style="color:#E1E4E8;">(children[i], matcher, originalRecord </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> originalRecord.children[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      originalRecord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> originalRecord </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> matcher</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">insertMatcher</span><span style="color:#E1E4E8;">(matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> originalMatcher</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">removeRoute</span><span style="color:#E1E4E8;">(originalMatcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> noop</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">insertMatcher</span><span style="color:#E1E4E8;">(matcher) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> matchers.length </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">comparePathParserScore</span><span style="color:#E1E4E8;">(matcher, matchers[i]) </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      i</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">    matchers.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(i, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (matcher.record.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isAliasRecord</span><span style="color:#E1E4E8;">(matcher))</span></span>
<span class="line"><span style="color:#E1E4E8;">      matcherMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(matcher.record.name, matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义其它一些辅助函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 添加初始路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(route </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addRoute</span><span style="color:#E1E4E8;">(route))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createRouterMatcher</span><span style="color:#24292E;">(routes, globalOptions) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> matchers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> matcherMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  globalOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeOptions</span><span style="color:#24292E;">({ strict</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, end</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, sensitive</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }, globalOptions)</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">(record, parent, originalRecord) {</span></span>
<span class="line"><span style="color:#24292E;">    let isRootAdd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">originalRecord</span></span>
<span class="line"><span style="color:#24292E;">    let mainNormalizedRecord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeRouteRecord</span><span style="color:#24292E;">(record)</span></span>
<span class="line"><span style="color:#24292E;">    mainNormalizedRecord.aliasOf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> originalRecord </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> originalRecord.record</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeOptions</span><span style="color:#24292E;">(globalOptions, record)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> normalizedRecords </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      mainNormalizedRecord,</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">    let matcher</span></span>
<span class="line"><span style="color:#24292E;">    let originalMatcher</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> normalizedRecord of normalizedRecords) {</span></span>
<span class="line"><span style="color:#24292E;">      let { path } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> normalizedRecord</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> path[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        let parentPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.record.path</span></span>
<span class="line"><span style="color:#24292E;">        let connectingSlash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentPath[parentPath.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span></span>
<span class="line"><span style="color:#24292E;">        normalizedRecord.path </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">          parent.record.path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (path </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> connectingSlash </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouteRecordMatcher</span><span style="color:#24292E;">(normalizedRecord, parent, options)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( parent </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> path[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">checkMissingParamsInAbsolutePath</span><span style="color:#24292E;">(matcher, parent)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (originalRecord) {</span></span>
<span class="line"><span style="color:#24292E;">        originalRecord.alias.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(matcher)</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">checkSameParams</span><span style="color:#24292E;">(originalRecord, matcher)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        originalMatcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> originalMatcher </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> matcher</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (originalMatcher </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> matcher)</span></span>
<span class="line"><span style="color:#24292E;">          originalMatcher.alias.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(matcher)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isRootAdd </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> record.name </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isAliasRecord</span><span style="color:#24292E;">(matcher))</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">removeRoute</span><span style="color:#24292E;">(record.name)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;children&#39;</span><span style="color:#24292E;"> in mainNormalizedRecord) {</span></span>
<span class="line"><span style="color:#24292E;">        let children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mainNormalizedRecord.children</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> children.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">(children[i], matcher, originalRecord </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> originalRecord.children[i])</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      originalRecord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> originalRecord </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> matcher</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">insertMatcher</span><span style="color:#24292E;">(matcher)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> originalMatcher</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">removeRoute</span><span style="color:#24292E;">(originalMatcher)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> noop</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">insertMatcher</span><span style="color:#24292E;">(matcher) {</span></span>
<span class="line"><span style="color:#24292E;">    let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> matchers.length </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">comparePathParserScore</span><span style="color:#24292E;">(matcher, matchers[i]) </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      i</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">    matchers.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(i, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, matcher)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (matcher.record.name </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isAliasRecord</span><span style="color:#24292E;">(matcher))</span></span>
<span class="line"><span style="color:#24292E;">      matcherMap.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(matcher.record.name, matcher)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义其它一些辅助函数</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 添加初始路径</span></span>
<span class="line"><span style="color:#24292E;">  routes.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(route </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">(route))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>createRouterMatcher 函数内部定义了一个 matchers 数组和一些辅助函数，我们先重点关注 addRoute 函数的实现，我们只关注核心流程。</p><p>在 createRouterMatcher 函数的最后，会遍历 routes 路径数组调用 addRoute 方法添加初始路径。</p><p>在 addRoute 函数内部，首先会把 route 对象标准化成一个 record，其实就是给路径对象添加更丰富的属性。</p><p>然后再执行createRouteRecordMatcher 函数，传入标准化的 record 对象，我们再来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createRouteRecordMatcher</span><span style="color:#E1E4E8;">(record, parent, options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tokensToParser</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tokenizePath</span><span style="color:#E1E4E8;">(record.path), options)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> existingKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    for (const key of parser.keys) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (existingKeys.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(key.name))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(\`Found duplicated params with name </span><span style="color:#9ECBFF;">&quot;\${key.name}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> path </span><span style="color:#9ECBFF;">&quot;\${record.path}&quot;</span><span style="color:#E1E4E8;">. Only the last one will be available on </span><span style="color:#9ECBFF;">&quot;$route.params&quot;</span><span style="color:#E1E4E8;">.\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">      existingKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key.name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(parser, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    record,</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent,</span></span>
<span class="line"><span style="color:#E1E4E8;">    children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">matcher.record.aliasOf </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">parent.record.aliasOf)</span></span>
<span class="line"><span style="color:#E1E4E8;">      parent.children.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> matcher</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createRouteRecordMatcher</span><span style="color:#24292E;">(record, parent, options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tokensToParser</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tokenizePath</span><span style="color:#24292E;">(record.path), options)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> existingKeys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    for (const key of parser.keys) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (existingKeys.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(key.name))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(\`Found duplicated params with name </span><span style="color:#032F62;">&quot;\${key.name}&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> path </span><span style="color:#032F62;">&quot;\${record.path}&quot;</span><span style="color:#24292E;">. Only the last one will be available on </span><span style="color:#032F62;">&quot;$route.params&quot;</span><span style="color:#24292E;">.\`)</span></span>
<span class="line"><span style="color:#24292E;">      existingKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key.name)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(parser, {</span></span>
<span class="line"><span style="color:#24292E;">    record,</span></span>
<span class="line"><span style="color:#24292E;">    parent,</span></span>
<span class="line"><span style="color:#24292E;">    children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    alias</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">matcher.record.aliasOf </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parent.record.aliasOf)</span></span>
<span class="line"><span style="color:#24292E;">      parent.children.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(matcher)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> matcher</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其实 createRouteRecordMatcher 创建的 matcher 对象不仅仅拥有 record 属性来存储 record，还扩展了一些其他属性，需要注意，如果存在 parent matcher，那么会把当前 matcher 添加到 parent.children 中去，这样就维护了父子关系，构造了树形结构。</p><p>那么什么情况下会有 parent matcher 呢？让我们先回到 addRoute 函数，在创建了 matcher 对象后，接着判断 record 中是否有 children 属性，如果有则遍历 children，递归执行 addRoute 方法添加路径，并把创建 matcher 作为第二个参数 parent 传入，这也就是 parent matcher 存在的原因。</p><p>所有 children 处理完毕后，再执行 insertMatcher 函数，把创建的 matcher 存入到 matchers 数组中。</p><p>至此，我们就根据用户配置的 routes 路径数组，初始化好了 matchers 数组。</p><p>那么再回到我们前面的问题，分析路径对象中的 matched 的值是怎么在路径切换的情况下更新的。</p><p>之前我们提到过，切换路径会执行 pushWithRedirect 方法，内部会执行一段代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> targetLocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (pendingLocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(to))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> targetLocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (pendingLocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(to))</span></span></code></pre></div><p>这里会执行 resolve 函数解析生成 targetLocation，这个 targetLocation 最后也会在 finalizeNavigation 的时候赋值 currentRoute 更新当前路径。我们来看 resolve 函数的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(location, currentLocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let matcher</span></span>
<span class="line"><span style="color:#E1E4E8;">  let params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  let path</span></span>
<span class="line"><span style="color:#E1E4E8;">  let name</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> in location </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> location.name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcherMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(location.name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouterError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* MATCHER_NOT_FOUND */</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        location,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher.record.name</span></span>
<span class="line"><span style="color:#E1E4E8;">    params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">paramsFromLocation</span><span style="color:#E1E4E8;">(currentLocation.params,</span></span>
<span class="line"><span style="color:#E1E4E8;">        matcher.keys.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(k </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">k.optional).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(k </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> k.name)), location.params)</span></span>
<span class="line"><span style="color:#E1E4E8;">    path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(params)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;"> in location) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> location.path</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(\`The Matcher cannot resolve relative paths but received </span><span style="color:#9ECBFF;">&quot;\${path}&quot;</span><span style="color:#E1E4E8;">. Unless you directly called \\\`matcher.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${path}&quot;</span><span style="color:#E1E4E8;">)\\\`, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> is probably a bug in vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">router. Please open an issue at https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//new-issue.vuejs.org/?repo=vuejs/vue-router-next.\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matchers.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(m </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> m.re.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(path))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (matcher) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(path)</span></span>
<span class="line"><span style="color:#E1E4E8;">      name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher.record.name</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentLocation.name</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> matcherMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(currentLocation.name)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> matchers.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(m </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> m.re.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(currentLocation.path))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">matcher)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouterError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* MATCHER_NOT_FOUND */</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        location,</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentLocation,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher.record.name</span></span>
<span class="line"><span style="color:#E1E4E8;">    params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({}, currentLocation.params, location.params)</span></span>
<span class="line"><span style="color:#E1E4E8;">    path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(params)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> matched </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  let parentMatcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (parentMatcher) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    matched.</span><span style="color:#B392F0;">unshift</span><span style="color:#E1E4E8;">(parentMatcher.record)</span></span>
<span class="line"><span style="color:#E1E4E8;">    parentMatcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentMatcher.parent</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name,</span></span>
<span class="line"><span style="color:#E1E4E8;">    path,</span></span>
<span class="line"><span style="color:#E1E4E8;">    params,</span></span>
<span class="line"><span style="color:#E1E4E8;">    matched,</span></span>
<span class="line"><span style="color:#E1E4E8;">    meta</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeMetaFields</span><span style="color:#E1E4E8;">(matched),</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(location, currentLocation) {</span></span>
<span class="line"><span style="color:#24292E;">  let matcher</span></span>
<span class="line"><span style="color:#24292E;">  let params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  let path</span></span>
<span class="line"><span style="color:#24292E;">  let name</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> in location </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> location.name) {</span></span>
<span class="line"><span style="color:#24292E;">    matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcherMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(location.name)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">matcher)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouterError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* MATCHER_NOT_FOUND */</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        location,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.record.name</span></span>
<span class="line"><span style="color:#24292E;">    params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">paramsFromLocation</span><span style="color:#24292E;">(currentLocation.params,</span></span>
<span class="line"><span style="color:#24292E;">        matcher.keys.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(k </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">k.optional).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(k </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> k.name)), location.params)</span></span>
<span class="line"><span style="color:#24292E;">    path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(params)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;"> in location) {</span></span>
<span class="line"><span style="color:#24292E;">    path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> location.path</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(\`The Matcher cannot resolve relative paths but received </span><span style="color:#032F62;">&quot;\${path}&quot;</span><span style="color:#24292E;">. Unless you directly called \\\`matcher.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${path}&quot;</span><span style="color:#24292E;">)\\\`, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> is probably a bug in vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">router. Please open an issue at https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//new-issue.vuejs.org/?repo=vuejs/vue-router-next.\`)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matchers.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(m </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> m.re.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(path))</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (matcher) {</span></span>
<span class="line"><span style="color:#24292E;">      params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(path)</span></span>
<span class="line"><span style="color:#24292E;">      name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.record.name</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentLocation.name</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> matcherMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(currentLocation.name)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> matchers.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(m </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> m.re.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(currentLocation.path))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">matcher)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouterError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* MATCHER_NOT_FOUND */</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        location,</span></span>
<span class="line"><span style="color:#24292E;">        currentLocation,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.record.name</span></span>
<span class="line"><span style="color:#24292E;">    params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, currentLocation.params, location.params)</span></span>
<span class="line"><span style="color:#24292E;">    path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(params)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> matched </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  let parentMatcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (parentMatcher) {</span></span>
<span class="line"><span style="color:#24292E;">    matched.</span><span style="color:#6F42C1;">unshift</span><span style="color:#24292E;">(parentMatcher.record)</span></span>
<span class="line"><span style="color:#24292E;">    parentMatcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentMatcher.parent</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name,</span></span>
<span class="line"><span style="color:#24292E;">    path,</span></span>
<span class="line"><span style="color:#24292E;">    params,</span></span>
<span class="line"><span style="color:#24292E;">    matched,</span></span>
<span class="line"><span style="color:#24292E;">    meta</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeMetaFields</span><span style="color:#24292E;">(matched),</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>resolve 函数主要做的事情就是根据 location 的 name 或者 path 从我们前面创建的 matchers 数组中找到对应的 matcher，然后再顺着 matcher 的 parent 一直找到链路上所有匹配的 matcher，然后获取其中的 record 属性构造成一个 matched 数组，最终返回包含 matched 属性的新的路径对象。</p><p>这么做的目的就是让 matched 数组完整记录 record 路径，它的顺序和嵌套的 RouterView 组件顺序一致，也就是 matched 数组中的第 n 个元素就代表着 RouterView 嵌套的第 n 层。</p><p>因此 targetLocation 和 to 相比，其实就是多了一个 matched 对象，这样再回到我们的 RouterView 组件，就可以从<code>injectedRoute.matched[depth] [props.name]</code>中拿到对应的组件对象定义，去渲染对应的组件了。</p><p>至此，我们就搞清楚路径和路由组件的渲染是如何映射的了。</p><p>前面的分析过程中，我们提到过在路径切换过程中，会执行 navigate 方法，它包含了一系列的导航守卫钩子函数的执行，接下来我们就来分析这部分的实现原理。</p><h3 id="导航守卫的实现" tabindex="-1">导航守卫的实现 <a class="header-anchor" href="#导航守卫的实现" aria-label="Permalink to &quot;导航守卫的实现&quot;">​</a></h3><p>导航守卫主要是让用户在路径切换的生命周期中可以注入钩子函数，执行一些自己的逻辑，也可以取消和重定向导航，举个应用的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">beforeEach</span><span style="color:#E1E4E8;">((to, from, next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (to.name </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Login&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isAuthenticated) </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">({ name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Login&#39;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">((to, from, next) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (to.name </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Login&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isAuthenticated) </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">({ name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Login&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>这里大致含义就是进入路由前检查用户是否登录，如果没有则跳转到登录的视图组件，否则继续。</p><p>router.beforeEach 传入的参数是一个函数，我们把这类函数就称为导航守卫。</p><p>那么这些导航守卫是怎么执行的呢？这里我并不打算去详细讲 navigate 实现的完整流程，而是讲清楚它的执行原理，关于导航守卫的执行顺序建议你去对照<a href="https://next.router.vuejs.org/guide/advanced/navigation-guards.html" target="_blank" rel="noreferrer">官网文档</a>，然后再来看实现细节。</p><p>接下来，我们来看 navigate 函数的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">(to, from) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let guards</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [leavingRecords, updatingRecords, enteringRecords,] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractChangingRecords</span><span style="color:#E1E4E8;">(to, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">  guards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractComponentsGuards</span><span style="color:#E1E4E8;">(leavingRecords.</span><span style="color:#B392F0;">reverse</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&#39;beforeRouteLeave&#39;</span><span style="color:#E1E4E8;">, to, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (const record of leavingRecords) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">record</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">leaveGuards</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">guardToPromiseFn</span><span style="color:#E1E4E8;">(guard, to, from))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> canceledNavigationCheck </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> checkCanceledNavigationAndReject.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, to, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">  guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">runGuardQueue</span><span style="color:#E1E4E8;">(guards)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> guard of beforeGuards.</span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">guardToPromiseFn</span><span style="color:#E1E4E8;">(guard, to, from))</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runGuardQueue</span><span style="color:#E1E4E8;">(guards)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractComponentsGuards</span><span style="color:#E1E4E8;">(updatingRecords, </span><span style="color:#9ECBFF;">&#39;beforeRouteUpdate&#39;</span><span style="color:#E1E4E8;">, to, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (const record of updatingRecords) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">record</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">updateGuards</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">guardToPromiseFn</span><span style="color:#E1E4E8;">(guard, to, from))</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runGuardQueue</span><span style="color:#E1E4E8;">(guards)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (const record of to.matched) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">record</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">beforeEnter</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">matched</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">indexOf</span><span style="color:#E1E4E8;">(record) &lt; 0) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(record.beforeEnter)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> beforeEnter of record.beforeEnter)</span></span>
<span class="line"><span style="color:#E1E4E8;">              guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">guardToPromiseFn</span><span style="color:#E1E4E8;">(beforeEnter, to, from))</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">guardToPromiseFn</span><span style="color:#E1E4E8;">(record.beforeEnter, to, from))</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">guards</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">push</span><span style="color:#E1E4E8;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">runGuardQueue</span><span style="color:#E1E4E8;">(guards)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      to.matched.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(record </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (record.enterCallbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}))</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractComponentsGuards</span><span style="color:#E1E4E8;">(enteringRecords, </span><span style="color:#9ECBFF;">&#39;beforeRouteEnter&#39;</span><span style="color:#E1E4E8;">, to, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runGuardQueue</span><span style="color:#E1E4E8;">(guards)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> guard of beforeResolveGuards.</span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">guardToPromiseFn</span><span style="color:#E1E4E8;">(guard, to, from))</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      guards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runGuardQueue</span><span style="color:#E1E4E8;">(guards)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(err </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNavigationFailure</span><span style="color:#E1E4E8;">(err, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_CANCELLED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(err)))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">(to, from) {</span></span>
<span class="line"><span style="color:#24292E;">  let guards</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [leavingRecords, updatingRecords, enteringRecords,] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractChangingRecords</span><span style="color:#24292E;">(to, from)</span></span>
<span class="line"><span style="color:#24292E;">  guards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractComponentsGuards</span><span style="color:#24292E;">(leavingRecords.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&#39;beforeRouteLeave&#39;</span><span style="color:#24292E;">, to, from)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (const record of leavingRecords) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">for</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">guard</span><span style="color:#24292E;"> </span><span style="color:#E36209;">of</span><span style="color:#24292E;"> </span><span style="color:#E36209;">record</span><span style="color:#24292E;">.</span><span style="color:#E36209;">leaveGuards</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">guardToPromiseFn</span><span style="color:#24292E;">(guard, to, from))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> canceledNavigationCheck </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> checkCanceledNavigationAndReject.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, to, from)</span></span>
<span class="line"><span style="color:#24292E;">  guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">runGuardQueue</span><span style="color:#24292E;">(guards)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      guards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> guard of beforeGuards.</span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">guardToPromiseFn</span><span style="color:#24292E;">(guard, to, from))</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runGuardQueue</span><span style="color:#24292E;">(guards)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      guards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractComponentsGuards</span><span style="color:#24292E;">(updatingRecords, </span><span style="color:#032F62;">&#39;beforeRouteUpdate&#39;</span><span style="color:#24292E;">, to, from)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (const record of updatingRecords) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">for</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">guard</span><span style="color:#24292E;"> </span><span style="color:#E36209;">of</span><span style="color:#24292E;"> </span><span style="color:#E36209;">record</span><span style="color:#24292E;">.</span><span style="color:#E36209;">updateGuards</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">guardToPromiseFn</span><span style="color:#24292E;">(guard, to, from))</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runGuardQueue</span><span style="color:#24292E;">(guards)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      guards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (const record of to.matched) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">record</span><span style="color:#24292E;">.</span><span style="color:#E36209;">beforeEnter</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#E36209;">from</span><span style="color:#24292E;">.</span><span style="color:#E36209;">matched</span><span style="color:#24292E;">.</span><span style="color:#E36209;">indexOf</span><span style="color:#24292E;">(record) &lt; 0) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(record.beforeEnter)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> beforeEnter of record.beforeEnter)</span></span>
<span class="line"><span style="color:#24292E;">              guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">guardToPromiseFn</span><span style="color:#24292E;">(beforeEnter, to, from))</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">guardToPromiseFn</span><span style="color:#24292E;">(record.beforeEnter, to, from))</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">guards</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">push</span><span style="color:#24292E;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">runGuardQueue</span><span style="color:#24292E;">(guards)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#D73A49;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      to.matched.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(record </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (record.enterCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}))</span></span>
<span class="line"><span style="color:#24292E;">      guards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractComponentsGuards</span><span style="color:#24292E;">(enteringRecords, </span><span style="color:#032F62;">&#39;beforeRouteEnter&#39;</span><span style="color:#24292E;">, to, from)</span></span>
<span class="line"><span style="color:#24292E;">      guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runGuardQueue</span><span style="color:#24292E;">(guards)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#D73A49;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      guards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> guard of beforeResolveGuards.</span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">guardToPromiseFn</span><span style="color:#24292E;">(guard, to, from))</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      guards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(canceledNavigationCheck)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runGuardQueue</span><span style="color:#24292E;">(guards)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(err </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(err, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_CANCELLED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(err)))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到 navigate 执行导航守卫的方式是先构造 guards 数组，数组中每个元素都是一个返回 Promise 对象的函数。</p><p>然后通过 runGuardQueue 去执行这些 guards，来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">runGuardQueue</span><span style="color:#E1E4E8;">(guards) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> guards.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((promise, guard) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> promise.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">guard</span><span style="color:#E1E4E8;">()), Promise.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">runGuardQueue</span><span style="color:#24292E;">(guards) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> guards.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((promise, guard) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> promise.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">guard</span><span style="color:#24292E;">()), Promise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其实就是通过数组的 reduce 方法，链式执行 guard 函数，每个 guard 函数都会返回一个 Promise对象。</p><p>但是从我们的例子看，我们添加的是一个普通函数，并不是一个返回 Promise对象的函数，那是怎么做的呢？</p><p>原来在把 guard 添加到 guards 数组前，都会执行 guardToPromiseFn 函数把普通函数 Promise化，来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { warn as warn$</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> } from &quot;vue/dist/vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">function guardToPromiseFn(guard, to, from, record, name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> enterCallbackArray = record &amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    (record.enterCallbacks[name] = record.enterCallbacks[name] || [])</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> () =&gt; </span><span style="color:#FDAEB7;font-style:italic;">new</span><span style="color:#E1E4E8;"> Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> next = (valid) =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (valid === </span><span style="color:#FDAEB7;font-style:italic;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        reject(createRouterError(</span><span style="color:#FDAEB7;font-style:italic;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_ABORTED */</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">          from,</span></span>
<span class="line"><span style="color:#E1E4E8;">          to,</span></span>
<span class="line"><span style="color:#E1E4E8;">        }))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (valid </span><span style="color:#FDAEB7;font-style:italic;">instanceof</span><span style="color:#E1E4E8;"> Error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        reject(valid)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (isRouteLocation(valid)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        reject(createRouterError(</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_GUARD_REDIRECT */</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">          from: to,</span></span>
<span class="line"><span style="color:#E1E4E8;">          to: valid</span></span>
<span class="line"><span style="color:#E1E4E8;">        }))</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (enterCallbackArray &amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">          record.enterCallbacks[name] === enterCallbackArray &amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">          typeof valid === &#39;function&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">          enterCallbackArray.push(valid)</span></span>
<span class="line"><span style="color:#E1E4E8;">        resolve()</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> guardReturn = guard.call(record &amp;&amp; record.instances[name], to, from, next )</span></span>
<span class="line"><span style="color:#E1E4E8;">    let guardCall = Promise.resolve(guardReturn)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (guard.length &lt; </span><span style="color:#FDAEB7;font-style:italic;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      guardCall = guardCall.then(next)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (guard.length &gt; </span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> message = \`The &quot;next&quot; callback was never called inside of \${guard.name ? &#39;&quot;&#39; + guard.name + &#39;&quot;&#39; : &#39;&#39;}:\\n\${guard.toString()}\\n. If you are returning a value instead of calling &quot;next&quot;, make sure to remove the &quot;next&quot; parameter from your function.\`</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (typeof guardReturn === &#39;object&#39; &amp;&amp; &#39;then&#39; in guardReturn) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        guardCall = guardCall.then(resolvedValue =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// @ts-ignore: _called is added at canOnlyBeCalledOnce</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (!next._called) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            warn$</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">(message)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> Promise.reject(</span><span style="color:#FDAEB7;font-style:italic;">new</span><span style="color:#E1E4E8;"> Error(&#39;Invalid navigation guard&#39;))</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> resolvedValue</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (guardReturn !== undefined) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (!next._called) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          warn$</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">(message)</span></span>
<span class="line"><span style="color:#E1E4E8;">          reject(</span><span style="color:#FDAEB7;font-style:italic;">new</span><span style="color:#E1E4E8;"> Error(&#39;Invalid navigation guard&#39;))</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#FDAEB7;font-style:italic;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    guardCall.</span><span style="color:#FDAEB7;font-style:italic;">catch</span><span style="color:#E1E4E8;">(err =&gt; reject(err))</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { warn as warn$</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> } from &quot;vue/dist/vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">function guardToPromiseFn(guard, to, from, record, name) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> enterCallbackArray = record &amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    (record.enterCallbacks[name] = record.enterCallbacks[name] || [])</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> () =&gt; </span><span style="color:#B31D28;font-style:italic;">new</span><span style="color:#24292E;"> Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> next = (valid) =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (valid === </span><span style="color:#B31D28;font-style:italic;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        reject(createRouterError(</span><span style="color:#B31D28;font-style:italic;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_ABORTED */</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">          from,</span></span>
<span class="line"><span style="color:#24292E;">          to,</span></span>
<span class="line"><span style="color:#24292E;">        }))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">else</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (valid </span><span style="color:#B31D28;font-style:italic;">instanceof</span><span style="color:#24292E;"> Error) {</span></span>
<span class="line"><span style="color:#24292E;">        reject(valid)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">else</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (isRouteLocation(valid)) {</span></span>
<span class="line"><span style="color:#24292E;">        reject(createRouterError(</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_GUARD_REDIRECT */</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">          from: to,</span></span>
<span class="line"><span style="color:#24292E;">          to: valid</span></span>
<span class="line"><span style="color:#24292E;">        }))</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (enterCallbackArray &amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          record.enterCallbacks[name] === enterCallbackArray &amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          typeof valid === &#39;function&#39;)</span></span>
<span class="line"><span style="color:#24292E;">          enterCallbackArray.push(valid)</span></span>
<span class="line"><span style="color:#24292E;">        resolve()</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> guardReturn = guard.call(record &amp;&amp; record.instances[name], to, from, next )</span></span>
<span class="line"><span style="color:#24292E;">    let guardCall = Promise.resolve(guardReturn)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (guard.length &lt; </span><span style="color:#B31D28;font-style:italic;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      guardCall = guardCall.then(next)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (guard.length &gt; </span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> message = \`The &quot;next&quot; callback was never called inside of \${guard.name ? &#39;&quot;&#39; + guard.name + &#39;&quot;&#39; : &#39;&#39;}:\\n\${guard.toString()}\\n. If you are returning a value instead of calling &quot;next&quot;, make sure to remove the &quot;next&quot; parameter from your function.\`</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (typeof guardReturn === &#39;object&#39; &amp;&amp; &#39;then&#39; in guardReturn) {</span></span>
<span class="line"><span style="color:#24292E;">        guardCall = guardCall.then(resolvedValue =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// @ts-ignore: _called is added at canOnlyBeCalledOnce</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (!next._called) {</span></span>
<span class="line"><span style="color:#24292E;">            warn$</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">(message)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> Promise.reject(</span><span style="color:#B31D28;font-style:italic;">new</span><span style="color:#24292E;"> Error(&#39;Invalid navigation guard&#39;))</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> resolvedValue</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">else</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (guardReturn !== undefined) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (!next._called) {</span></span>
<span class="line"><span style="color:#24292E;">          warn$</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">(message)</span></span>
<span class="line"><span style="color:#24292E;">          reject(</span><span style="color:#B31D28;font-style:italic;">new</span><span style="color:#24292E;"> Error(&#39;Invalid navigation guard&#39;))</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#B31D28;font-style:italic;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    guardCall.</span><span style="color:#B31D28;font-style:italic;">catch</span><span style="color:#24292E;">(err =&gt; reject(err))</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>guardToPromiseFn 函数返回一个新的函数，这个函数内部会执行 guard 函数。</p><p>这里我们要注意 next 方法的设计，当我们在导航守卫中执行 next 时，实际上就是执行这里定义的 next 函数。</p><p>在执行 next 函数时，如果不传参数，那么则直接 resolve，执行下一个导航守卫；如果参数是 false，则创建一个导航取消的错误 reject 出去；如果参数是一个 Error 实例，则直接执行 reject，并把错误传递出去；如果参数是一个路径对象，则创建一个导航重定向的错误传递出去。</p><p>有些时候我们写导航守卫不使用 next 函数，而是直接返回 true 或 false，这种情况则先执行如下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">guardCall </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(guardReturn)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">guardCall </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(guardReturn)</span></span></code></pre></div><p>把导航守卫的返回值 Promise化，然后再执行 guardCall.then(next)，把导航守卫的返回值传给 next 函数。</p><p>当然，如果你在导航守卫中定义了第三个参数 next，但是你没有在函数中调用它，这种情况也会报警告。</p><p>所以，对于导航守卫而言，经过 Promise化后添加到 guards 数组中，然后再通过 runGuards 以及 Promise 的方式链式调用，最终依次顺序执行这些导航守卫。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该要了解 Vue Router 的基本实现原理，知道路径是如何管理的，路径和路由组件的渲染是如何映射的，导航守卫是如何执行的。</p><p>当然，路由实现的细节是非常多的，我希望你学完之后，可以对照着官网的文档的 feature，自行去分析它们的实现原理。</p><p>最后，给你留一道思考题目，如果我们想给路由组件传递数据，有几种方式，分别都怎么做呢？欢迎你在留言区与我分享。</p>`,62),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const m=s(p,[["render",t]]);export{F as __pageData,m as default};
