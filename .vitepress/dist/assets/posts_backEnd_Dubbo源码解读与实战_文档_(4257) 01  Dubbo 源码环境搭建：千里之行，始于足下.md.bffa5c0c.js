import{_ as l,j as e,o as t,g as r,k as a,h as o,Q as p,s}from"./chunks/framework.b3d8e22e.js";const R=JSON.parse('{"title":"Dubbo 架构简介 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4257) 01  Dubbo 源码环境搭建：千里之行，始于足下.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4257) 01  Dubbo 源码环境搭建：千里之行，始于足下.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4257) 01  Dubbo 源码环境搭建：千里之行，始于足下.md"},E=p('<p><strong>好的开始是成功的一半，阅读源码也是一样。</strong> 很多同学在下定决心阅读一个开源框架之后，就一头扎进去，迷失在代码&quot;迷宫&quot;中。此时，有同学意识到，需要一边 Debug 一边看；然后又有一批同学在搭建源码环境的时候兜兜转转，走上了放弃之路；最后剩下为数不多的同学，搭建完了源码环境，却又不知道如何模拟请求让源码执行到自己想要 Debug 的地方。</p><p>以上这些痛点问题你是不是很熟悉？是不是也曾遇到过？没关系，本课时我就来手把手带领你搭建 Dubbo 源码环境。</p><ul><li><p>在开始搭建源码环境之前，我们会先整体过一下 Dubbo 的架构，这可以帮助你了解 Dubbo 的基本功能以及核心角色。</p></li><li><p>之后我们再动手搭建 Dubbo 源码环境，构建一个 Demo 示例可运行的最简环境。</p></li><li><p>完成源码环境搭建之后，我们还会深入介绍 Dubbo 源码中各个核心模块的功能，这会为后续分析各个模块的实现做铺垫。</p></li><li><p>最后，我们再详细分析下 Dubbo 源码自带的三个 Demo 示例，简单回顾一下 Dubbo 的基本用法，这三个示例也将是我们后续 Debug 源码的入口。</p></li></ul><h3 id="dubbo-架构简介" tabindex="-1">Dubbo 架构简介 <a class="header-anchor" href="#dubbo-架构简介" aria-label="Permalink to &quot;Dubbo 架构简介&quot;">​</a></h3><p>为便于你更好理解和学习，在开始搭建 Dubbo 源码环境之前，我们先来简单介绍一下 Dubbo 架构中的核心角色，帮助你简单回顾一下 Dubbo 的架构，也帮助不熟悉 Dubbo 的小伙伴快速了解 Dubbo。下图展示了 Dubbo 核心架构：</p>',5),i=p('<p>Dubbo 核心架构图</p><ul><li><p><strong>Registry：注册中心。</strong> 负责服务地址的注册与查找，服务的 Provider 和 Consumer 只在启动时与注册中心交互。注册中心通过长连接感知 Provider 的存在，在 Provider 出现宕机的时候，注册中心会立即推送相关事件通知 Consumer。</p></li><li><p><strong>Provider：服务提供者。</strong> 在它启动的时候，会向 Registry 进行注册操作，将自己服务的地址和相关配置信息封装成 URL 添加到 ZooKeeper 中。</p></li><li><p><strong>Consumer：服务消费者。</strong> 在它启动的时候，会向 Registry 进行订阅操作。订阅操作会从 ZooKeeper 中获取 Provider 注册的 URL，并在 ZooKeeper 中添加相应的监听器。获取到 Provider URL 之后，Consumer 会根据负载均衡算法从多个 Provider 中选择一个 Provider 并与其建立连接，最后发起对 Provider 的 RPC 调用。 如果 Provider URL 发生变更，Consumer 将会通过之前订阅过程中在注册中心添加的监听器，获取到最新的 Provider URL 信息，进行相应的调整，比如断开与宕机 Provider 的连接，并与新的 Provider 建立连接。Consumer 与 Provider 建立的是长连接，且 Consumer 会缓存 Provider 信息，所以一旦连接建立，即使注册中心宕机，也不会影响已运行的 Provider 和 Consumer。</p></li><li><p><strong>Monitor：监控中心。</strong> 用于统计服务的调用次数和调用时间。Provider 和 Consumer 在运行过程中，会在内存中统计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。监控中心在上面的架构图中并不是必要角色，监控中心宕机不会影响 Provider、Consumer 以及 Registry 的功能，只会丢失监控数据而已。</p></li></ul><h3 id="搭建dubbo源码环境" tabindex="-1">搭建Dubbo源码环境 <a class="header-anchor" href="#搭建dubbo源码环境" aria-label="Permalink to &quot;搭建Dubbo源码环境&quot;">​</a></h3><p>当然，要搭建Dubbo 源码环境，你首先需要下载源码。这里你可以直接从官方仓库 <a href="https://github.com/apache/dubbo" target="_blank" rel="noreferrer">https://github.com/apache/dubbo</a>Fork 到自己的仓库，直接执行下面的命令去下载代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git clone git@</span><span style="color:#F97583;">github</span><span style="color:#E1E4E8;">.com</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">xxxxxxxx</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">dubbo.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git clone git@</span><span style="color:#D73A49;">github</span><span style="color:#24292E;">.com</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">xxxxxxxx</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">dubbo.git</span></span></code></pre></div><p>然后切换分支，因为目前最新的是 Dubbo 2.7.7 版本，所以这里我们就用这个新版本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git checkout </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b dubbo</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2.7</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">7</span><span style="color:#E1E4E8;"> dubbo</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2.7</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git checkout </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b dubbo</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2.7</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">7</span><span style="color:#24292E;"> dubbo</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2.7</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">7</span></span></code></pre></div><p>接下来，执行 mvn 命令进行编译：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mvn clean install </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dmaven.test.skip</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mvn clean install </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dmaven.test.skip</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre></div><p>最后，执行下面的命令转换成 IDEA 项目：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mvn idea</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">idea </span><span style="color:#6A737D;">// 要是执行报错，就执行这个 mvn idea:workspace</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mvn idea</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">idea </span><span style="color:#6A737D;">// 要是执行报错，就执行这个 mvn idea:workspace</span></span></code></pre></div><p>然后，在 IDEA 中导入源码，因为这个导入过程中会下载所需的依赖包，所以会耗费点时间。</p><h3 id="dubbo源码核心模块" tabindex="-1">Dubbo源码核心模块 <a class="header-anchor" href="#dubbo源码核心模块" aria-label="Permalink to &quot;Dubbo源码核心模块&quot;">​</a></h3><p>在 IDEA 成功导入 Dubbo 源码之后，你看到的项目结构如下图所示：</p>',14),y=s("p",null,"下面我们就来简单介绍一下这些核心模块的功能，至于详细分析，在后面的课时中我们还会继续讲解。",-1),u=s("ul",null,[s("li",null,[s("strong",null,"dubbo-common 模块："),o(" Dubbo 的一个公共模块，其中有很多工具类以及公共逻辑，例如课程后面紧接着要介绍的 Dubbo SPI 实现、时间轮实现、动态编译器等。")])],-1),d=s("ul",null,[s("li",null,[s("strong",null,"dubbo-remoting 模块："),o(" Dubbo 的远程通信模块，其中的子模块依赖各种开源组件实现远程通信。在 dubbo-remoting-api 子模块中定义该模块的抽象概念，在其他子模块中依赖其他开源组件进行实现，例如，dubbo-remoting-netty4 子模块依赖 Netty 4 实现远程通信，dubbo-remoting-zookeeper 通过 Apache Curator 实现与 ZooKeeper 集群的交互。")])],-1),b=s("ul",null,[s("li",null,[s("strong",null,"dubbo-rpc 模块："),o(" Dubbo 中对远程调用协议进行抽象的模块，其中抽象了各种协议，依赖于 dubbo-remoting 模块的远程调用功能。dubbo-rpc-api 子模块是核心抽象，其他子模块是针对具体协议的实现，例如，dubbo-rpc-dubbo 子模块是对 Dubbo 协议的实现，依赖了 dubbo-remoting-netty4 等 dubbo-remoting 子模块。 dubbo-rpc 模块的实现中只包含一对一的调用，不关心集群的相关内容。")])],-1),g=s("ul",null,[s("li",null,[s("p",null,[s("strong",null,"dubbo-cluster 模块："),o(" Dubbo 中负责管理集群的模块，提供了负载均衡、容错、路由等一系列集群相关的功能，最终的目的是将多个 Provider 伪装为一个 Provider，这样 Consumer 就可以像调用一个 Provider 那样调用 Provider 集群了。")])]),s("li",null,[s("p",null,[s("strong",null,"dubbo-registry 模块："),o(" Dubbo 中负责与多种开源注册中心进行交互的模块，提供注册中心的能力。其中， dubbo-registry-api 子模块是顶层抽象，其他子模块是针对具体开源注册中心组件的具体实现，例如，dubbo-registry-zookeeper 子模块是 Dubbo 接入 ZooKeeper 的具体实现。")])])],-1),D=s("ul",null,[s("li",null,[s("p",null,[s("strong",null,"dubbo-monitor 模块："),o(" Dubbo 的监控模块，主要用于统计服务调用次数、调用时间以及实现调用链跟踪的服务。")])]),s("li",null,[s("p",null,[s("strong",null,"dubbo-config 模块："),o(" Dubbo 对外暴露的配置都是由该模块进行解析的。例如，dubbo-config-api 子模块负责处理 API 方式使用时的相关配置，dubbo-config-spring 子模块负责处理与 Spring 集成使用时的相关配置方式。有了 dubbo-config 模块，用户只需要了解 Dubbo 配置的规则即可，无须了解 Dubbo 内部的细节。")])])],-1),m=s("ul",null,[s("li",null,[s("strong",null,"dubbo-metadata 模块："),o(" Dubbo 的元数据模块（本课程后续会详细介绍元数据的内容）。dubbo-metadata 模块的实现套路也是有一个 api 子模块进行抽象，然后其他子模块进行具体实现。")])],-1),F=s("ul",null,[s("li",null,[s("strong",null,"dubbo-configcenter 模块："),o(" Dubbo 的动态配置模块，主要负责外部化配置以及服务治理规则的存储与通知，提供了多个子模块用来接入多种开源的服务发现组件。")])],-1),v=p(`<h3 id="dubbo-源码中的-demo-示例" tabindex="-1">Dubbo 源码中的 Demo 示例 <a class="header-anchor" href="#dubbo-源码中的-demo-示例" aria-label="Permalink to &quot;Dubbo 源码中的 Demo 示例&quot;">​</a></h3><p>在 Dubbo 源码中我们可以看到一个 dubbo-demo 模块，共包括三个非常基础 的 Dubbo 示例项目，分别是： <strong>使用 XML 配置的 Demo 示例、使用注解配置的 Demo 示例</strong> 以及 <strong>直接使用 API 的 Demo 示例</strong> 。下面我们将从这三个示例的角度，简单介绍 Dubbo 的基本使用。同时，这三个项目也将作为后续 Debug Dubbo 源码的入口，我们会根据需要在其之上进行修改 。不过在这儿之前，你需要先启动 ZooKeeper 作为注册中心，然后编写一个业务接口作为 Provider 和 Consumer 的公约。</p><h4 id="启动-zookeeper" tabindex="-1">启动 ZooKeeper <a class="header-anchor" href="#启动-zookeeper" aria-label="Permalink to &quot;启动 ZooKeeper&quot;">​</a></h4><p>在前面 Dubbo 的架构图中，你可以看到 Provider 的地址以及配置信息是通过注册中心传递给 Consumer 的。 Dubbo 支持的注册中心尽管有很多， 但在生产环境中， <strong>基本都是用 ZooKeeper 作为注册中心</strong> 。因此，在调试 Dubbo 源码时，自然需要在本地启动 ZooKeeper。</p><p>那怎么去启动 ZooKeeper 呢？</p><p>首先，你得下载 zookeeper-3.4.14.tar.gz 包（下载地址： <a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/" target="_blank" rel="noreferrer">https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/</a>）。下载完成之后执行如下命令解压缩：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zxf zookeeper</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">14</span><span style="color:#E1E4E8;">.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zxf zookeeper</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">14</span><span style="color:#24292E;">.tar.gz</span></span></code></pre></div><p>解压完成之后，进入 zookeeper-3.4.14 目录，复制 conf/zoo_sample.cfg 文件并重命名为 conf/zoo.cfg，之后执行如下命令就可以启动 ZooKeeper了。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">zkServer.sh start </span></span>
<span class="line"><span style="color:#E1E4E8;"># 下面为输出内容 </span></span>
<span class="line"><span style="color:#79B8FF;">ZooKeeper</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JMX</span><span style="color:#E1E4E8;"> enabled by </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">Using</span><span style="color:#E1E4E8;"> config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">Users</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">xxx</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">zookeeper</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3.4</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">conf</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">zoo.cfg # 配置文件 </span></span>
<span class="line"><span style="color:#79B8FF;">Starting</span><span style="color:#E1E4E8;"> zookeeper ... </span><span style="color:#79B8FF;">STARTED</span><span style="color:#E1E4E8;"> # 启动成功</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">zkServer.sh start </span></span>
<span class="line"><span style="color:#24292E;"># 下面为输出内容 </span></span>
<span class="line"><span style="color:#005CC5;">ZooKeeper</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JMX</span><span style="color:#24292E;"> enabled by </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">Using</span><span style="color:#24292E;"> config</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">Users</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">xxx</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">zookeeper</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3.4</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">conf</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">zoo.cfg # 配置文件 </span></span>
<span class="line"><span style="color:#005CC5;">Starting</span><span style="color:#24292E;"> zookeeper ... </span><span style="color:#005CC5;">STARTED</span><span style="color:#24292E;"> # 启动成功</span></span></code></pre></div><h4 id="业务接口" tabindex="-1">业务接口 <a class="header-anchor" href="#业务接口" aria-label="Permalink to &quot;业务接口&quot;">​</a></h4><p>在使用 Dubbo 之前，你还需要一个业务接口，这个业务接口可以认为是 Dubbo Provider 和 Dubbo Consumer 的公约，反映出很多信息：</p><ul><li><p>Provider ，如何提供服务、提供的服务名称是什么、需要接收什么参数、需要返回什么响应；</p></li><li><p>Consumer ，如何使用服务、使用的服务名称是什么、需要传入什么参数、会得到什么响应。</p></li></ul><p>dubbo-demo-interface 模块就是定义业务接口的地方，如下图所示：</p>`,13),C=p(`<p>其中，DemoService 接口中定义了两个方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoService</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 同步调用 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 异步调用 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> CompletableFuture&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">sayHelloAsync</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">completedFuture</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(name)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoService</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 同步调用 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 异步调用 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> CompletableFuture&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">sayHelloAsync</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">completedFuture</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(name)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="demo-1-基于-xml-配置" tabindex="-1">Demo 1：基于 XML 配置 <a class="header-anchor" href="#demo-1-基于-xml-配置" aria-label="Permalink to &quot;Demo 1：基于 XML 配置&quot;">​</a></h4><p>在 dubbo-demo 模块下的 dubbo-demo-xml 模块，提供了基于 Spring XML 的 Provider 和 Consumer。</p><p>我们先来看 dubbo-demo-xml-provider 模块，其结构如下图所示：</p>`,5),A=p(`<p>在其 pom.xml 中除了一堆 dubbo 的依赖之外，还有依赖了 DemoService 这个公共接口：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.dubbo&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;dubbo-demo-interface&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;\${project.parent.version}&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.dubbo&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;dubbo-demo-interface&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;\${project.parent.version}&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>DemoServiceImpl 实现了 DemoService 接口，sayHello() 方法直接返回一个字符串，sayHelloAsync() 方法返回一个 CompletableFuture 对象。</p><p>在 dubbo-provider.xml 配置文件中，会将 DemoServiceImpl 配置成一个 Spring Bean，并作为 DemoService 服务暴露出去：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 配置为 Spring Bean --&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;demoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.provider.DemoServiceImpl&quot;</span><span style="color:#E1E4E8;">/&gt; </span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 作为 Dubbo 服务暴露出去 --&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:service</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interface</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;demoService&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 配置为 Spring Bean --&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;demoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.provider.DemoServiceImpl&quot;</span><span style="color:#24292E;">/&gt; </span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 作为 Dubbo 服务暴露出去 --&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:service</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interface</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;demoService&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>还有就是指定注册中心地址（就是前面 ZooKeeper 的地址），这样 Dubbo 才能把暴露的 DemoService 服务注册到 ZooKeeper 中：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Zookeeper 地址 --&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:registry</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Zookeeper 地址 --&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:registry</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>最后，在 Application 中写个 main() 方法，指定 Spring 配置文件并启动 ClassPathXmlApplicationContext 即可。</p><p>接下来再看 dubbo-demo-xml-consumer 模块，结构如下图所示：</p>`,9),h=p(`<p>在 pom.xml 中同样依赖了 dubbo-demo-interface 这个公共模块。</p><p>在 dubbo-consumer.xml 配置文件中，会指定注册中心地址（就是前面 ZooKeeper 的地址），这样 Dubbo 才能从 ZooKeeper 中拉取到 Provider 暴露的服务列表信息：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Zookeeper地址 --&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:registry</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Zookeeper地址 --&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:registry</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>还会使用 <a href="dubbo:reference" target="_blank" rel="noreferrer">dubbo:reference</a> 引入 DemoService 服务，后面可以作为 Spring Bean 使用：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--引入DemoService服务，并配置成Spring Bean--&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:reference</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;demoService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#B392F0;">interface</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--引入DemoService服务，并配置成Spring Bean--&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:reference</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;demoService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#6F42C1;">interface</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.DemoService&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>最后，在 Application 中写个 main() 方法，指定 Spring 配置文件并启动 ClassPathXmlApplicationContext 之后，就可以远程调用 Provider 端的 DemoService 的 sayHello() 方法了。</p><h4 id="demo-2-基于注解配置" tabindex="-1">Demo 2：基于注解配置 <a class="header-anchor" href="#demo-2-基于注解配置" aria-label="Permalink to &quot;Demo 2：基于注解配置&quot;">​</a></h4><p>dubbo-demo-annotation 模块是基于 Spring 注解配置的示例，无非就是将 XML 的那些配置信息转移到了注解上。</p><p>我们先来看 dubbo-demo-annotation-provider 这个示例模块：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Application</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">// 使用AnnotationConfigApplicationContext初始化Spring容器， </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从ProviderConfiguration这个类的注解上拿相关配置信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">        AnnotationConfigApplicationContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnnotationConfigApplicationContext</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">                  ProviderConfiguration.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.in.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 配置类 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// @EnableDubbo注解指定包下的Bean都会被扫描，并做Dubbo服务暴露出去 </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">EnableDubbo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">scanBasePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;org.apache.dubbo.demo.provider&quot;</span><span style="color:#E1E4E8;">)      </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// @PropertySource注解指定了其他配置信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PropertySource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:/spring/dubbo-provider.properties&quot;</span><span style="color:#E1E4E8;">)      </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProviderConfiguration</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RegistryConfig </span><span style="color:#B392F0;">registryConfig</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">            RegistryConfig registryConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegistryConfig</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            registryConfig.</span><span style="color:#B392F0;">setAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> registryConfig; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Application</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">// 使用AnnotationConfigApplicationContext初始化Spring容器， </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从ProviderConfiguration这个类的注解上拿相关配置信息 </span></span>
<span class="line"><span style="color:#24292E;">        AnnotationConfigApplicationContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationConfigApplicationContext</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">                  ProviderConfiguration.class); </span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        System.in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 配置类 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// @EnableDubbo注解指定包下的Bean都会被扫描，并做Dubbo服务暴露出去 </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">EnableDubbo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">scanBasePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org.apache.dubbo.demo.provider&quot;</span><span style="color:#24292E;">)      </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// @PropertySource注解指定了其他配置信息 </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PropertySource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;classpath:/spring/dubbo-provider.properties&quot;</span><span style="color:#24292E;">)      </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProviderConfiguration</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RegistryConfig </span><span style="color:#6F42C1;">registryConfig</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">            RegistryConfig registryConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegistryConfig</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            registryConfig.</span><span style="color:#6F42C1;">setAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> registryConfig; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里，同样会有一个 DemoServiceImpl 实现了 DemoService 接口，并且在 org.apache.dubbo.demo.provider 目录下，能被扫描到，暴露成 Dubbo 服务。</p><p>接着再来看 dubbo-demo-annotation-consumer 模块，其中 Application 中也是通过 AnnotationConfigApplicationContext 初始化 Spring 容器，也会扫描指定目录下的 Bean，会扫到 DemoServiceComponent 这个 Bean，其中就通过 @Reference 注解注入 Dubbo 服务相关的 Bean：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demoServiceComponent&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoServiceComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoService</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Reference</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 注入Dubbo服务 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DemoService demoService; </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> demoService.</span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(name); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#6A737D;">// 其他方法 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demoServiceComponent&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoServiceComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoService</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Reference</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 注入Dubbo服务 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DemoService demoService; </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> demoService.</span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(name); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6A737D;">// 其他方法 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="demo-3-基于-api-配置" tabindex="-1">Demo 3：基于 API 配置 <a class="header-anchor" href="#demo-3-基于-api-配置" aria-label="Permalink to &quot;Demo 3：基于 API 配置&quot;">​</a></h4><p>在有的场景中，不能依赖于 Spring 框架，只能使用 API 来构建 Dubbo Provider 和 Consumer，比较典型的一种场景就是在写 SDK 的时候。</p><p>先来看 dubbo-demo-api-provider 模块，其中 Application.main() 方法是入口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建一个ServiceConfig的实例，泛型参数是业务接口实现类， </span></span>
<span class="line"><span style="color:#6A737D;">// 即DemoServiceImpl </span></span>
<span class="line"><span style="color:#E1E4E8;">ServiceConfig&lt;</span><span style="color:#F97583;">DemoServiceImpl</span><span style="color:#E1E4E8;">&gt; service </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ServiceConfig&lt;&gt;(); </span></span>
<span class="line"><span style="color:#6A737D;">// 指定业务接口 </span></span>
<span class="line"><span style="color:#E1E4E8;">service.</span><span style="color:#B392F0;">setInterface</span><span style="color:#E1E4E8;">(DemoService.class); </span></span>
<span class="line"><span style="color:#6A737D;">// 指定业务接口的实现，由该对象来处理Consumer的请求 </span></span>
<span class="line"><span style="color:#E1E4E8;">service.</span><span style="color:#B392F0;">setRef</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoServiceImpl</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#6A737D;">// 获取DubboBootstrap实例，这是个单例的对象 </span></span>
<span class="line"><span style="color:#E1E4E8;">DubboBootstrap bootstrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DubboBootstrap.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#6A737D;">//生成一个 ApplicationConfig 的实例、指定ZK地址以及ServiceConfig实例 </span></span>
<span class="line"><span style="color:#E1E4E8;">bootstrap.</span><span style="color:#B392F0;">application</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApplicationConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dubbo-demo-api-provider&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegistryConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">service</span><span style="color:#E1E4E8;">(service) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个ServiceConfig的实例，泛型参数是业务接口实现类， </span></span>
<span class="line"><span style="color:#6A737D;">// 即DemoServiceImpl </span></span>
<span class="line"><span style="color:#24292E;">ServiceConfig&lt;</span><span style="color:#D73A49;">DemoServiceImpl</span><span style="color:#24292E;">&gt; service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ServiceConfig&lt;&gt;(); </span></span>
<span class="line"><span style="color:#6A737D;">// 指定业务接口 </span></span>
<span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">setInterface</span><span style="color:#24292E;">(DemoService.class); </span></span>
<span class="line"><span style="color:#6A737D;">// 指定业务接口的实现，由该对象来处理Consumer的请求 </span></span>
<span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">setRef</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoServiceImpl</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#6A737D;">// 获取DubboBootstrap实例，这是个单例的对象 </span></span>
<span class="line"><span style="color:#24292E;">DubboBootstrap bootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DubboBootstrap.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#6A737D;">//生成一个 ApplicationConfig 的实例、指定ZK地址以及ServiceConfig实例 </span></span>
<span class="line"><span style="color:#24292E;">bootstrap.</span><span style="color:#6F42C1;">application</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApplicationConfig</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dubbo-demo-api-provider&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegistryConfig</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">service</span><span style="color:#24292E;">(service) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这里，同样会有一个 DemoServiceImpl 实现了 DemoService 接口，并且在 org.apache.dubbo.demo.provider 目录下，能被扫描到，暴露成 Dubbo 服务。</p><p>再来看 dubbo-demo-api-consumer 模块，其中 Application 中包含一个普通的 main() 方法入口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 创建ReferenceConfig,其中指定了引用的接口DemoService </span></span>
<span class="line"><span style="color:#E1E4E8;"> ReferenceConfig&lt;</span><span style="color:#F97583;">DemoService</span><span style="color:#E1E4E8;">&gt; reference </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ReferenceConfig&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;"> reference.</span><span style="color:#B392F0;">setInterface</span><span style="color:#E1E4E8;">(DemoService.class); </span></span>
<span class="line"><span style="color:#E1E4E8;"> reference.</span><span style="color:#B392F0;">setGeneric</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 创建DubboBootstrap，指定ApplicationConfig以及RegistryConfig </span></span>
<span class="line"><span style="color:#E1E4E8;"> DubboBootstrap bootstrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DubboBootstrap.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;"> bootstrap.</span><span style="color:#B392F0;">application</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApplicationConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dubbo-demo-api-consumer&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegistryConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">reference</span><span style="color:#E1E4E8;">(reference) </span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 获取DemoService实例并调用其方法 </span></span>
<span class="line"><span style="color:#E1E4E8;"> DemoService demoService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReferenceConfigCache.</span><span style="color:#B392F0;">getCache</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(reference); </span></span>
<span class="line"><span style="color:#E1E4E8;"> String message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> demoService.</span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(message);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 创建ReferenceConfig,其中指定了引用的接口DemoService </span></span>
<span class="line"><span style="color:#24292E;"> ReferenceConfig&lt;</span><span style="color:#D73A49;">DemoService</span><span style="color:#24292E;">&gt; reference </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ReferenceConfig&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;"> reference.</span><span style="color:#6F42C1;">setInterface</span><span style="color:#24292E;">(DemoService.class); </span></span>
<span class="line"><span style="color:#24292E;"> reference.</span><span style="color:#6F42C1;">setGeneric</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 创建DubboBootstrap，指定ApplicationConfig以及RegistryConfig </span></span>
<span class="line"><span style="color:#24292E;"> DubboBootstrap bootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DubboBootstrap.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;"> bootstrap.</span><span style="color:#6F42C1;">application</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApplicationConfig</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dubbo-demo-api-consumer&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegistryConfig</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">reference</span><span style="color:#24292E;">(reference) </span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 获取DemoService实例并调用其方法 </span></span>
<span class="line"><span style="color:#24292E;"> DemoService demoService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReferenceConfigCache.</span><span style="color:#6F42C1;">getCache</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(reference); </span></span>
<span class="line"><span style="color:#24292E;"> String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> demoService.</span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(message);</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在本课时，我们首先介绍了 Dubbo 的核心架构以及各核心组件的功能，接下来又搭建了 Dubbo 源码环境，并详细介绍了 Dubbo 核心模块的功能，为后续分析 Dubbo 源码打下了基础。最后我们还深入分析了 Dubbo 源码中自带的三个 Demo 示例，现在你就可以以这三个 Demo 示例为入口 Debug Dubbo 源码了。</p><p>在后面的课时中，我们将解决几个问题：Dubbo 是如何与 ZooKeeper 等注册中心进行交互的？Provider 与 Consumer 之间是如何交互的？为什么我们在编写业务代码的时候，感受不到任何网络交互？Dubbo Provider 发布到注册中心的数据是什么？Consumer 为何能正确识别？两者的统一契约是什么？这个契约是如何做到可扩展的？这个契约还会用在 Dubbo 的哪些地方？这些问题你也可以提前思考一下，在后面的课程中我会一一为你解答。</p>`,23);function f(_,S,B,k,q,P){const n=e("Image");return t(),r("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/38/AD/CgqCHl8eRaCAW4-LAAB7_C-aKWA601.png"}),o(),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/38/A2/Ciqc1F8eRcOAdzNmAADHxcenG7I722.png"}),y,u,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/38/AD/CgqCHl8eRfWANQSTAAHowsC6F8s134.png"}),d,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/38/A2/Ciqc1F8eRgCAR30EAABc4PYop3w206.png"}),b,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/38/A2/Ciqc1F8eRguAA8jOAABqHomePJk138.png"}),g,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/38/AD/CgqCHl8eRhWANEiTAAB2ATuQ2vc619.png"}),D,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/38/AD/CgqCHl8eRhyAVJ43AAAaPAwMeQ4525.png"}),m,a(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/38/AD/CgqCHl8eRiSAPFIYAABXCRqgsNA891.png"}),F,a(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/38/AD/CgqCHl8eRiuAM7LfAAA9BmMR2zY483.png"}),v,a(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/38/AE/CgqCHl8eRlWAPwvCAACx42Xn9Dk409.png"}),C,a(n,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/38/AE/CgqCHl8eRmKAT8LjAADV8C5fM8E391.png"}),A,a(n,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/38/A3/Ciqc1F8eRnuAWnTAAAE7eBUfEoA405.png"}),h])}const I=l(c,[["render",f]]);export{R as __pageData,I as default};
