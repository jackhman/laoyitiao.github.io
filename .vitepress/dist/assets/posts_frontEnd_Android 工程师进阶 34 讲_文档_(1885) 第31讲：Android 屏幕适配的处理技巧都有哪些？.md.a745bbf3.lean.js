import{_ as o,j as i,o as l,g as p,k as s,s as a,h as e,Q as n}from"./chunks/framework.b3d8e22e.js";const K=JSON.parse('{"title":"ConstraintLayout ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1885) 第31讲：Android 屏幕适配的处理技巧都有哪些？.md","filePath":"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1885) 第31讲：Android 屏幕适配的处理技巧都有哪些？.md","lastUpdated":1696417798000}'),c={name:"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1885) 第31讲：Android 屏幕适配的处理技巧都有哪些？.md"},r=a("p",null,"在几年前，屏幕适配一直是困扰 Android 开发工程师的一大问题，但是随着近几年各种屏幕适配方案的诞生，以及谷歌各种适配控件的推出，屏幕适配也显得越来越容易，这节课我们就来总结一下关于屏幕适配的那些技巧。",-1),d=a("h3",{id:"constraintlayout",tabindex:"-1"},[e("ConstraintLayout "),a("a",{class:"header-anchor",href:"#constraintlayout","aria-label":'Permalink to "ConstraintLayout"'},"​")],-1),_=a("p",null,"很多工程师不太喜欢使用 ConstraintLayout，感觉 ConstraintLayout 的使用很烦琐，要设置各种上下左右的约束条件。但是请相信我，前期你在代码里付出的越多，后期你需要解决的 bug 就越少！ConstraintLayout 是我个人最喜欢的 Android 控件之一，它的前身是 PercentLayout(百分比布局)，当年 PercentLayout 被推出时也是火爆一时，但是它只延续了很短的一段时间就被 ConstraintLayout 替代了。",-1),u=a("p",null,"ConstraintLayout 的常见属性有以下几个：",-1),h=a("p",null,"说明：",-1),g=a("ul",null,[a("li",null,[a("p",null,"红框 1 中属性相当于 RelativeLayout 的 layout_align 相关属性，能够确定各个 View 之间边对齐特征。")]),a("li",null,[a("p",null,"红框 2 中的属性相当于 RelativeLayout 的 layout_to 相关属性，能够确定各个 View 之间的相对位置。")])],-1),A=a("p",null,"通过这几个属性，基本能够确立 View 的相对位置，并且还能够实现其他 View 容器较难实现的效果。比如有两个 Button 分别是 Button1 和 Button2，需求是将 Button1 置位于屏幕中间，并且始终覆盖 Button2 的左上半角，UI 效果如下：",-1),y=a("p",null,"上述效果就可以使用以下代码实现：",-1),m=a("p",null,"ConstraintLayout 还有几个其他特殊属性，通过它们可以帮助我们更好地做出适配。",-1),E=a("h4",{id:"bias",tabindex:"-1"},[e("Bias "),a("a",{class:"header-anchor",href:"#bias","aria-label":'Permalink to "Bias"'},"​")],-1),C=a("p",null,"ConstraintLayout 提供了水平和垂直方向的 bias 属性，这个属性的取值范围是 0~1。主要作用是确立 View 在水平方向或者垂直方向的位置百分比。比如以下示例代码：",-1),w=a("p",null,"图中的 horizontal_bias 和 vertical_bias 分别指定 TextView 显示在水平方向的 30% 位置和垂直方向上 50% 的位置，最终显示效果如下：",-1),b=a("h4",{id:"weight",tabindex:"-1"},[e("weight "),a("a",{class:"header-anchor",href:"#weight","aria-label":'Permalink to "weight"'},"​")],-1),v=a("p",null,"LinearLayout 可以很方便地实现将多个 UI 控件按照某一方向进行排列，并且设置一定的权重规则。而 ConstraintLayout 也能够实现类似的效果。",-1),V=a("p",null,"以下代码可以使 3 个 TextView 横向依次按照相等的权重来排列。",-1),k=a("p",null,"显示效果如下：",-1),q=n("",6),T=n("",3),I=n("",4),x=a("blockquote",null,[a("p",null,"注意："),a("p",null,"使用 ConstraintLayout 时，需要特别主要 UI 控件的可见属性。因为 ConstraintLayout 内部控件的 visibility，设置为 GONE 和 INVISIBLE 对其他控件的约束是不一样的。")],-1),S=a("h3",{id:"多-dimens-基于-dp-的适配方案",tabindex:"-1"},[e("多 dimens 基于 dp 的适配方案 "),a("a",{class:"header-anchor",href:"#多-dimens-基于-dp-的适配方案","aria-label":'Permalink to "多 dimens 基于 dp 的适配方案"'},"​")],-1),L=a("p",null,"在 ConstraintLayout 的基础上，我们还可以在 res 文件夹中创建多套 values 文件夹，如下所示：",-1),D=n("",8),F=a("p",null,'上图中的 TextView 在 AS 的预览界面会显示"这是一段超长的调试文本内容"，但是当安装到手机上时，显示的是"文本内容"。',-1),f=a("h4",{id:"图片imageview",tabindex:"-1"},[e("图片ImageView "),a("a",{class:"header-anchor",href:"#图片imageview","aria-label":'Permalink to "图片ImageView"'},"​")],-1),P=a("p",null,"对于 ImageView 不建议统一使用 wrap_content，因为有时我们的图片是从服务器上下载到本地显示的，图片的宽高并不一定是完全相等的，这样会造成图片的显示大小不一致，这种情况我们一般是将 ImageView 的宽高设置为某一固定 dp 值。还有另外一种做法就是在 Java 代码中动态设置 ImageView 的大小，一个比较常见的使用场景就是 RecyclerView Item 分屏显示，比如需求是 RecyclerView 中每一个 item 大小为屏幕的 1/3，这种情况我们就可以考虑在代码中动态设置 item view 的大小，如下所示：",-1),H=a("blockquote",null,[a("p",null,"实际上这种对 ImageView 的做法，同样也适应于其他控件的显示。")],-1),N=a("h3",{id:"总结",tabindex:"-1"},[e("总结 "),a("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),R=a("p",null,"这节课主要介绍了几个 Android 屏幕适配的技巧，其中主要包含以下几点：",-1),B=a("ul",null,[a("li",null,[a("p",null,"使用 ConstraintLayout 能够完美实现布局内部控件之间的约束条件，并且能够代替 LinearLayout 和 RelativeLayout 等布局。")]),a("li",null,[a("p",null,"在 ConstraintLayout 基础上，再加上多 dimens 适配方案基本就能实现所有的屏幕适配。")]),a("li",null,[a("p",null,"最后对于特殊 UI 控件的适配再做针对性适配即可，主要介绍了 TextVIew 和 ImageView 的几个适配技巧。")])],-1);function M(U,j,z,O,J,W){const t=i("Image");return l(),p("div",null,[r,d,_,u,s(t,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/2E/14/CgqCHl8ER0-ANaZyAAHN9robYHc458.png"}),h,g,A,s(t,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/2E/14/CgqCHl8ER4iAJpF2AAAi8OaOm8k002.png"}),y,s(t,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/2E/09/Ciqc1F8ER5OAOgVWAAPSdoHNkXQ676.png"}),m,E,C,s(t,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/2E/09/Ciqc1F8ER5uAMIRxAAJTD6eBEJE983.png"}),w,s(t,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/2E/14/CgqCHl8ER6SAWsnAAAAstbWlAxg123.png"}),b,v,V,s(t,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/2E/14/CgqCHl8ER66ACC_tAANXA1pJemc381.png"}),k,s(t,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/2E/09/Ciqc1F8ER7WAaYnMAAAZnK_F_k8484.png"}),q,s(t,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/2E/15/CgqCHl8ESC6Ab3mZAAAZ1OHWxzs982.png"}),T,s(t,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/2E/09/Ciqc1F8ESEqADf1uAAAbkek1NMc770.png"}),I,s(t,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/2E/15/CgqCHl8ESFmAOi1lAAAZeKbtjXw455.png"}),x,S,L,s(t,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/2E/15/CgqCHl8ESGiAKQJMAADlPulV000757.png"}),D,s(t,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/2E/0A/Ciqc1F8ESHWASh-xAAB96AYyKEU294.png"}),F,f,P,s(t,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/2E/0A/Ciqc1F8ESH-AfEshAADopjF1-H4322.png"}),H,N,R,B])}const $=o(c,[["render",M]]);export{K as __pageData,$ as default};
