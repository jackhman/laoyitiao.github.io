import{_ as o,j as e,o as t,h as c,k as p,f as s,Q as l,s as n}from"./chunks/framework.d3daa342.js";const b=JSON.parse('{"title":"30实现高可用：使用Puppeteer生成性能最优的海报系统","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5959) 30  实现高可用：使用 Puppeteer 生成性能最优的海报系统.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5959) 30  实现高可用：使用 Puppeteer 生成性能最优的海报系统.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5959) 30  实现高可用：使用 Puppeteer 生成性能最优的海报系统.md"},E=l("",38),y=n("p",null,[s("一般来说，生成海报可以使用"),n("a",{href:"https://github.com/niklasvh/html2canvas?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"html2canvas"),s("这样的类库完成，这里面的技术难点主要有跨域处理、分页处理、页面截图时机处理等。整体来说，并不难实现，但是稳定性一般。另一种生成海报的方式就是使用 Puppeteer，构建一个 Node.js 服务来做页面截图。")],-1),i=n("p",null,"下面我们来实现一个名叫 posterMan 的海报服务，整体技术链路如下图：",-1),F=n("p",null,"核心技术无外乎使用 Puppeteer，访问页面并截图，这与前面几个场景是一样的，如下图所示：",-1),u=n("p",null,[s("这里需要特别强调的是，为了实现最好的性能，我们"),n("strong",null,"设计了一个链接池来存储 Puppeteer 实例"),s("，以备所需，如下图所示：")],-1),g=l("",12),A=n("p",null,"通过这几讲的学习，希望你能够从实践出发，对 Node.js 落地应用有一个更全面的认知。这里我也给大家留一个思考题，你平时开发中使用过 Puppeteer 吗？你还能基于 Puppeteer 想到哪些使用场景呢？欢迎在留言区和我分享你的经验。",-1);function D(d,h,C,m,B,f){const a=e("Image");return t(),c("div",null,[E,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/21/5C/CioPOWBURyGAdWWfAAVd4uI0v5k453.png"}),s(),y,i,p(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M01/25/41/Cgp9HWBZg66ADjAJAAJBHVTqmKw043.png"}),s(),F,p(a,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M01/25/3D/CioPOWBZg8GAX2qJAALAFyJ2lc8362.png"}),s(),u,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/21/5F/Cgp9HWBUR3WAUmueAAEA26Dx-54108.png"}),s(),g,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/21/60/Cgp9HWBUR8mAUFYXAALdEMP1LzI390.png"}),s(),A])}const q=o(r,[["render",D]]);export{b as __pageData,q as default};
