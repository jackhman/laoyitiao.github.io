import{_ as e,j as o,o as t,g as r,k as n,h as s,s as p,Q as l}from"./chunks/framework.cfb14fe0.js";const U=JSON.parse('{"title":"46加餐：深入服务自省方案中的服务发布订阅（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(6100) 46  加餐：深入服务自省方案中的服务发布订阅（下）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(6100) 46  加餐：深入服务自省方案中的服务发布订阅（下）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(6100) 46  加餐：深入服务自省方案中的服务发布订阅（下）.md"},E=p("h1",{id:"_46加餐-深入服务自省方案中的服务发布订阅-下",tabindex:"-1"},[s("46加餐：深入服务自省方案中的服务发布订阅（下） "),p("a",{class:"header-anchor",href:"#_46加餐-深入服务自省方案中的服务发布订阅-下","aria-label":'Permalink to "46加餐：深入服务自省方案中的服务发布订阅（下）"'},"​")],-1),y=p("p",null,[s("在课程第二部分（13~15 课时）中介绍 Dubbo 传统框架中的注册中心部分实现时，我们提到了 Registry、RegistryFactory 等与注册中心交互的接口。"),p("strong",null,"为了将 ServiceDiscovery 接口的功能与 Registry 融合，Dubbo 提供了一个 ServiceDiscoveryRegistry 实现"),s("，继承关系如下所示：")],-1),i=l(`<p>ServiceDiscoveryRegistry 、ServiceDiscoveryRegistryFactory 继承关系图</p><p>由图我们可以看到：ServiceDiscoveryRegistryFactory（扩展名称是 service-discovery-registry）是 ServiceDiscoveryRegistry 对应的工厂类，继承了 AbstractRegistryFactory 提供的公共能力。</p><p><strong>ServiceDiscoveryRegistry 是一个面向服务实例（ServiceInstance）的注册中心实现</strong>，其底层依赖前面两个课时介绍的 ServiceDiscovery、WritableMetadataService 等组件。</p><p>ServiceDiscoveryRegistry 中的核心字段有如下几个。</p><ul><li><p>serviceDiscovery（ServiceDiscovery 类型）：用于 ServiceInstance 的发布和订阅。</p></li><li><p>subscribedServices（Set 类型）：记录了当前订阅的服务名称。</p></li><li><p>serviceNameMapping（ServiceNameMapping 类型）：用于 Service ID 与 Service Name 之间的转换。</p></li><li><p>writableMetadataService（WritableMetadataService 类型）：用于发布和查询元数据。</p></li><li><p>registeredListeners（Set 类型）：记录了注册的 ServiceInstancesChangedListener 的唯一标识。</p></li><li><p>subscribedURLsSynthesizers（List 类型）：将 ServiceInstance 的信息与元数据进行合并，得到订阅服务的完整 URL。</p></li></ul><p>在 ServiceDiscoveryRegistry 的构造方法中，会初始化上述字段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceDiscoveryRegistry</span><span style="color:#E1E4E8;">(URL registryURL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化父类，其中包括FailbackRegistry中的时间轮和重试定时任务以及AbstractRegistry中的本地文件缓存等</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(registryURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化ServiceDiscovery对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.serviceDiscovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createServiceDiscovery</span><span style="color:#E1E4E8;">(registryURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从registryURL中解析出subscribed-services参数，并按照逗号切分，得到subscribedServices集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.subscribedServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseServices</span><span style="color:#E1E4E8;">(registryURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SUBSCRIBED_SERVICE_NAMES_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取DefaultServiceNameMapping对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.serviceNameMapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ServiceNameMapping.</span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化WritableMetadataService对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    String metadataStorageType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMetadataStorageType</span><span style="color:#E1E4E8;">(registryURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.writableMetadataService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WritableMetadataService.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(metadataStorageType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取目前支持的全部SubscribedURLsSynthesizer实现，并初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.subscribedURLsSynthesizers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initSubscribedURLsSynthesizers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceDiscoveryRegistry</span><span style="color:#24292E;">(URL registryURL) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化父类，其中包括FailbackRegistry中的时间轮和重试定时任务以及AbstractRegistry中的本地文件缓存等</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(registryURL);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化ServiceDiscovery对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceDiscovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createServiceDiscovery</span><span style="color:#24292E;">(registryURL);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从registryURL中解析出subscribed-services参数，并按照逗号切分，得到subscribedServices集合</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.subscribedServices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseServices</span><span style="color:#24292E;">(registryURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SUBSCRIBED_SERVICE_NAMES_KEY));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取DefaultServiceNameMapping对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceNameMapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceNameMapping.</span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化WritableMetadataService对象</span></span>
<span class="line"><span style="color:#24292E;">    String metadataStorageType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMetadataStorageType</span><span style="color:#24292E;">(registryURL);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.writableMetadataService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WritableMetadataService.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(metadataStorageType);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取目前支持的全部SubscribedURLsSynthesizer实现，并初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.subscribedURLsSynthesizers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initSubscribedURLsSynthesizers</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 createServiceDiscovery() 方法中，不仅会加载 ServiceDiscovery 的相应实现，还会在外层添加 EventPublishingServiceDiscovery 装饰器，在 register()、initialize() 等方法前后触发相应的事件，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> ServiceDiscovery </span><span style="color:#B392F0;">createServiceDiscovery</span><span style="color:#E1E4E8;">(URL registryURL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据registryURL获取对应的ServiceDiscovery实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceDiscovery originalServiceDiscovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getServiceDiscovery</span><span style="color:#E1E4E8;">(registryURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ServiceDiscovery外层添加一层EventPublishingServiceDiscovery修饰器，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// EventPublishingServiceDiscovery会在register()、initialize()等方法前后触发相应的事件，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 例如，在register()方法的前后分别会触发ServiceInstancePreRegisteredEvent和ServiceInstanceRegisteredEvent</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceDiscovery serviceDiscovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enhanceEventPublishing</span><span style="color:#E1E4E8;">(originalServiceDiscovery);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 初始化ServiceDiscovery</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceDiscovery.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(registryURL.</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(INTERFACE_KEY, ServiceDiscovery.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">removeParameter</span><span style="color:#E1E4E8;">(REGISTRY_TYPE_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> serviceDiscovery;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> ServiceDiscovery </span><span style="color:#6F42C1;">createServiceDiscovery</span><span style="color:#24292E;">(URL registryURL) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据registryURL获取对应的ServiceDiscovery实现</span></span>
<span class="line"><span style="color:#24292E;">    ServiceDiscovery originalServiceDiscovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getServiceDiscovery</span><span style="color:#24292E;">(registryURL);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ServiceDiscovery外层添加一层EventPublishingServiceDiscovery修饰器，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// EventPublishingServiceDiscovery会在register()、initialize()等方法前后触发相应的事件，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 例如，在register()方法的前后分别会触发ServiceInstancePreRegisteredEvent和ServiceInstanceRegisteredEvent</span></span>
<span class="line"><span style="color:#24292E;">    ServiceDiscovery serviceDiscovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enhanceEventPublishing</span><span style="color:#24292E;">(originalServiceDiscovery);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 初始化ServiceDiscovery</span></span>
<span class="line"><span style="color:#24292E;">        serviceDiscovery.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(registryURL.</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(INTERFACE_KEY, ServiceDiscovery.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">removeParameter</span><span style="color:#24292E;">(REGISTRY_TYPE_KEY));</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> serviceDiscovery;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Registry 接口的核心是服务发布和订阅，ServiceDiscoveryRegistry 既然实现了 Registry 接口，必然也要实现了服务注册和发布的功能。</p><h3 id="服务注册" tabindex="-1">服务注册 <a class="header-anchor" href="#服务注册" aria-label="Permalink to &quot;服务注册&quot;">​</a></h3><p>在 ServiceDiscoveryRegistry 的 register() 中，首先会检测待发布 URL 中的 side 参数，然后调用父类的 register() 方法。我们知道 FailbackRegistry.register() 方法会回调子类的 doRegister() 方法，而 ServiceDiscoveryRegistry.doRegister() 方法直接依赖 WritableMetadataService 的 exportURL() 方法，完成元数据的发布。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">shouldRegister</span><span style="color:#E1E4E8;">(url)) { </span><span style="color:#6A737D;">// 检测URL中的side参数是否为provider</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doRegister</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将元数据发布到MetadataService</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (writableMetadataService.</span><span style="color:#B392F0;">exportURL</span><span style="color:#E1E4E8;">(url)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 输出INFO日志</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 输出WARN日志</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">shouldRegister</span><span style="color:#24292E;">(url)) { </span><span style="color:#6A737D;">// 检测URL中的side参数是否为provider</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doRegister</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将元数据发布到MetadataService</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (writableMetadataService.</span><span style="color:#6F42C1;">exportURL</span><span style="color:#24292E;">(url)) {</span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 输出INFO日志</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 输出WARN日志</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ServiceDiscoveryRegistry.unregister() 方法的实现逻辑也是类似的，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><h3 id="服务订阅" tabindex="-1">服务订阅 <a class="header-anchor" href="#服务订阅" aria-label="Permalink to &quot;服务订阅&quot;">​</a></h3><p>接下来看 ServiceDiscoveryRegistry.subscribe() 方法的实现，其中也是首先会检测待发布 URL 中的 side 参数，然后调用父类的 subscribe() 方法。我们知道 FailbackRegistry.subscribe() 方法会回调子类的 doSubscribe() 方法。在 ServiceDiscoveryRegistry 的 doSubscribe() 方法中，会执行如下完整的订阅流程：</p><ol><li><p>调用 WriteMetadataService.subscribeURL() 方法在 subscribedServiceURLs 集合中记录当前订阅的 URL；</p></li><li><p>通过订阅的 URL 获取 Service Name；</p></li><li><p>根据 Service Name 获取 ServiceInstance 集合；</p></li><li><p>根据 ServiceInstance 调用相应的 MetadataService 服务，获取元数据，其中涉及历史数据的清理和缓存更新等操作；</p></li><li><p>将 ServiceInstance 信息以及对应的元数据信息进行合并，得到完整的 URL；</p></li><li><p>触发 NotifyListener 监听器；</p></li><li><p>添加 ServiceInstancesChangedListener 监听器。</p></li></ol><p>下面来看 ServiceDiscoveryRegistry.doSubscribe() 方法的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subscribeURLs</span><span style="color:#E1E4E8;">(URL url, NotifyListener listener) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录该订阅的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    writableMetadataService.</span><span style="color:#B392F0;">subscribeURL</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取订阅的Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; serviceNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getServices</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(serviceNames)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行后续的订阅操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    serviceNames.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(serviceName </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subscribeURLs</span><span style="color:#E1E4E8;">(url, listener, serviceName));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subscribeURLs</span><span style="color:#24292E;">(URL url, NotifyListener listener) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录该订阅的URL</span></span>
<span class="line"><span style="color:#24292E;">    writableMetadataService.</span><span style="color:#6F42C1;">subscribeURL</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取订阅的Service Name</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; serviceNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getServices</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(serviceNames)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行后续的订阅操作</span></span>
<span class="line"><span style="color:#24292E;">    serviceNames.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(serviceName </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subscribeURLs</span><span style="color:#24292E;">(url, listener, serviceName));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们这就展开一步步来解析上面的这个流程。</p><h4 id="_1-获取-service-name" tabindex="-1">1. 获取 Service Name <a class="header-anchor" href="#_1-获取-service-name" aria-label="Permalink to &quot;1. 获取 Service Name&quot;">​</a></h4><p>首先来看 getServices() 方法的具体实现：它会首先根据 subscribeURL 的 provided-by 参数值获取订阅的 Service Name 集合，如果获取失败，则根据 Service ID 获取对应的 Service Name 集合；如果此时依旧获取失败，则尝试从 registryURL 中的 subscribed-services 参数值获取 Service Name 集合。下面来看 getServices() 方法的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getServices</span><span style="color:#E1E4E8;">(URL subscribedURL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; subscribedServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 首先尝试从subscribeURL中获取provided-by参数值，其中封装了全部Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> subscribedURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(PROVIDED_BY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(serviceNames)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 解析provided-by参数值，得到全部的Service Name集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        subscribedServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseServices</span><span style="color:#E1E4E8;">(serviceNames);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(subscribedServices)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果没有指定provided-by参数，则尝试通过subscribedURL构造Service ID，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 然后通过ServiceNameMapping的get()方法查找Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">        subscribedServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findMappedServices</span><span style="color:#E1E4E8;">(subscribedURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(subscribedServices)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果subscribedServices依旧为空，则返回registryURL中的subscribed-services参数值</span></span>
<span class="line"><span style="color:#E1E4E8;">            subscribedServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSubscribedServices</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> subscribedServices;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getServices</span><span style="color:#24292E;">(URL subscribedURL) {</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; subscribedServices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 首先尝试从subscribeURL中获取provided-by参数值，其中封装了全部Service Name</span></span>
<span class="line"><span style="color:#24292E;">    String serviceNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> subscribedURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(PROVIDED_BY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(serviceNames)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 解析provided-by参数值，得到全部的Service Name集合</span></span>
<span class="line"><span style="color:#24292E;">        subscribedServices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseServices</span><span style="color:#24292E;">(serviceNames);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(subscribedServices)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果没有指定provided-by参数，则尝试通过subscribedURL构造Service ID，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 然后通过ServiceNameMapping的get()方法查找Service Name</span></span>
<span class="line"><span style="color:#24292E;">        subscribedServices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findMappedServices</span><span style="color:#24292E;">(subscribedURL);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(subscribedServices)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果subscribedServices依旧为空，则返回registryURL中的subscribed-services参数值</span></span>
<span class="line"><span style="color:#24292E;">            subscribedServices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSubscribedServices</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> subscribedServices;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-查找-service-instance" tabindex="-1">2. 查找 Service Instance <a class="header-anchor" href="#_2-查找-service-instance" aria-label="Permalink to &quot;2. 查找 Service Instance&quot;">​</a></h4><p>接下来看 subscribeURLs(url, listener, serviceName) 这个重载的具体实现，其中会根据 Service Name 从 ServiceDiscovery 中查找对应的 ServiceInstance 集合，以及注册ServiceInstancesChangedListener 监听。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subscribeURLs</span><span style="color:#E1E4E8;">(URL url, NotifyListener listener, String serviceName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据Service Name获取ServiceInstance对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; serviceInstances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceDiscovery.</span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用另一个subscribeURLs()方法重载</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">subscribeURLs</span><span style="color:#E1E4E8;">(url, listener, serviceName, serviceInstances);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加ServiceInstancesChangedListener监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">registerServiceInstancesChangedListener</span><span style="color:#E1E4E8;">(url, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceInstancesChangedListener</span><span style="color:#E1E4E8;">(serviceName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onEvent</span><span style="color:#E1E4E8;">(ServiceInstancesChangedEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">subscribeURLs</span><span style="color:#E1E4E8;">(url, listener, event.</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(event.</span><span style="color:#B392F0;">getServiceInstances</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subscribeURLs</span><span style="color:#24292E;">(URL url, NotifyListener listener, String serviceName) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据Service Name获取ServiceInstance对象</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; serviceInstances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceDiscovery.</span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceName);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用另一个subscribeURLs()方法重载</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">subscribeURLs</span><span style="color:#24292E;">(url, listener, serviceName, serviceInstances);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加ServiceInstancesChangedListener监听器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">registerServiceInstancesChangedListener</span><span style="color:#24292E;">(url, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceInstancesChangedListener</span><span style="color:#24292E;">(serviceName) {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onEvent</span><span style="color:#24292E;">(ServiceInstancesChangedEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">subscribeURLs</span><span style="color:#24292E;">(url, listener, event.</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(event.</span><span style="color:#6F42C1;">getServiceInstances</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 subscribeURLs(url, listener, serviceName, serviceInstances) 这个重载中，主要是根据前面获取的 ServiceInstance 实例集合，构造对应的、完整的 subscribedURL 集合，并触发传入的 NotifyListener 监听器，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subscribeURLs</span><span style="color:#E1E4E8;">(URL subscribedURL, NotifyListener listener, String serviceName,</span></span>
<span class="line"><span style="color:#E1E4E8;">                             Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ServiceInstance</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> serviceInstances) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; subscribedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 尝试通过MetadataService获取subscribedURL集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    subscribedURLs.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(subscribedURL, serviceInstances));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (subscribedURLs.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 如果上面的尝试失败</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 尝试通过SubscribedURLsSynthesizer获取subscribedURL集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        subscribedURLs.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">synthesizeSubscribedURLs</span><span style="color:#E1E4E8;">(subscribedURL, serviceInstances));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发NotifyListener监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    listener.</span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(subscribedURLs);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subscribeURLs</span><span style="color:#24292E;">(URL subscribedURL, NotifyListener listener, String serviceName,</span></span>
<span class="line"><span style="color:#24292E;">                             Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ServiceInstance</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> serviceInstances) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; subscribedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 尝试通过MetadataService获取subscribedURL集合</span></span>
<span class="line"><span style="color:#24292E;">    subscribedURLs.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(subscribedURL, serviceInstances));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (subscribedURLs.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 如果上面的尝试失败</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 尝试通过SubscribedURLsSynthesizer获取subscribedURL集合</span></span>
<span class="line"><span style="color:#24292E;">        subscribedURLs.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">synthesizeSubscribedURLs</span><span style="color:#24292E;">(subscribedURL, serviceInstances));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 触发NotifyListener监听器</span></span>
<span class="line"><span style="color:#24292E;">    listener.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(subscribedURLs);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里构造完整 subscribedURL 可以分为两个分支。</p><ul><li><p>第一个分支：结合传入的 subscribedURL 以及从元数据中获取每个 ServiceInstance 的对应参数，组装成每个 ServiceInstance 对应的完整 subscribeURL。<strong>该部分实现在 getExportedURLs() 方法中，也是订阅操作的核心</strong>。</p></li><li><p>第二个分支：当上述操作无法获得完整的 subscribeURL 集合时，会使用 SubscribedURLsSynthesizer，基于 subscribedURL 拼凑出每个 ServiceInstance 对应的完整的 subscribedURL。<strong>该部分实现在 synthesizeSubscribedURLs() 方法中，目前主要针对 rest 协议</strong>。</p></li></ul><h4 id="_3-getexportedurls-方法核心实现" tabindex="-1">3. getExportedURLs() 方法核心实现 <a class="header-anchor" href="#_3-getexportedurls-方法核心实现" aria-label="Permalink to &quot;3. getExportedURLs() 方法核心实现&quot;">​</a></h4><p>getExportedURLs() 方法主要围绕 serviceRevisionExportedURLsCache 这个集合展开的，它是一个 Map&lt;String, Map&lt;String, List &gt;&gt; 类型的集合，其中第一层 Key 是 Service Name，第二层 Key 是 Revision，最终的 Value 值是 Service Name 对应的最新的 URL 集合。</p><h5 id="_1-清理过期-url" tabindex="-1">（1）清理过期 URL <a class="header-anchor" href="#_1-清理过期-url" aria-label="Permalink to &quot;（1）清理过期 URL&quot;">​</a></h5><p>在 getExportedURLs() 方法中，首先会调用 expungeStaleRevisionExportedURLs() 方法销毁全部已过期的 URL 信息，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expungeStaleRevisionExportedURLs</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ServiceInstance</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> serviceInstances) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从第一个ServiceInstance即可获取Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstances.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取该Service Name当前在serviceRevisionExportedURLsCache中对应的URL集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt;&gt; revisionExportedURLsMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceRevisionExportedURLsCache</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(serviceName, s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LinkedHashMap</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (revisionExportedURLsMap.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 没有缓存任何URL，则无须后续清理操作，直接返回即可</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Service Name在serviceRevisionExportedURLsCache中缓存的修订版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; existedRevisions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> revisionExportedURLsMap.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从ServiceInstance中获取当前最新的修订版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; currentRevisions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstances.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(ServiceInstanceMetadataUtils</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getExportedServicesRevision)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toSet</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取要删除的陈旧修订版本：staleRevisions = existedRevisions(copy) - currentRevisions</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; staleRevisions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;(existedRevisions);</span></span>
<span class="line"><span style="color:#E1E4E8;">    staleRevisions.</span><span style="color:#B392F0;">removeAll</span><span style="color:#E1E4E8;">(currentRevisions);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从revisionExportedURLsMap中删除staleRevisions集合中所有Key对应的URL集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    staleRevisions.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(revisionExportedURLsMap</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">remove);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expungeStaleRevisionExportedURLs</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ServiceInstance</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> serviceInstances) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从第一个ServiceInstance即可获取Service Name</span></span>
<span class="line"><span style="color:#24292E;">    String serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstances.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取该Service Name当前在serviceRevisionExportedURLsCache中对应的URL集合</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt;&gt; revisionExportedURLsMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceRevisionExportedURLsCache</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(serviceName, s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedHashMap</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (revisionExportedURLsMap.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 没有缓存任何URL，则无须后续清理操作，直接返回即可</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Service Name在serviceRevisionExportedURLsCache中缓存的修订版本</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; existedRevisions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> revisionExportedURLsMap.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从ServiceInstance中获取当前最新的修订版本</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; currentRevisions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstances.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(ServiceInstanceMetadataUtils</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getExportedServicesRevision)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toSet</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取要删除的陈旧修订版本：staleRevisions = existedRevisions(copy) - currentRevisions</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; staleRevisions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;(existedRevisions);</span></span>
<span class="line"><span style="color:#24292E;">    staleRevisions.</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(currentRevisions);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从revisionExportedURLsMap中删除staleRevisions集合中所有Key对应的URL集合</span></span>
<span class="line"><span style="color:#24292E;">    staleRevisions.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(revisionExportedURLsMap</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">remove);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到这里是通过 ServiceInstanceMetadataUtils 工具类从每个 ServiceInstance 的 metadata 集合中获取最新的修订版本（Key 为 dubbo.exported-services.revision），那么该修订版本的信息是在哪里写入的呢？我们来看一个新接口------ ServiceInstanceCustomizer，具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceInstanceCustomizer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Prioritized</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customize</span><span style="color:#E1E4E8;">(ServiceInstance </span><span style="color:#FFAB70;">serviceInstance</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceInstanceCustomizer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Prioritized</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customize</span><span style="color:#24292E;">(ServiceInstance </span><span style="color:#E36209;">serviceInstance</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>关于 ServiceInstanceCustomizer 接口，这里需要关注三个点：①该接口被 @SPI 注解修饰，是一个扩展点；②该接口继承了 Prioritized 接口；③该接口中定义的 customize() 方法可以用来自定义 ServiceInstance 信息，其中就包括控制 metadata 集合中的数据。</p><p>也就说，<strong>ServiceInstanceCustomizer 的多个实现可以按序调用，实现 ServiceInstance 的自定义</strong>。下图展示了 ServiceInstanceCustomizer 接口的所有实现类：</p>`,39),d=l(`<p>ServiceInstanceCustomizer 继承关系图</p><p>我们首先来看 ServiceInstanceMetadataCustomizer 这个抽象类，它主要是对 ServiceInstance 中 metadata 这个 KV 集合进行自定义修改，这部分逻辑在 customize() 方法中，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customize</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取ServiceInstance对象的metadata字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; metadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 生成要添加到metadata集合的KV值</span></span>
<span class="line"><span style="color:#E1E4E8;">    String propertyName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveMetadataPropertyName</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String propertyValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveMetadataPropertyValue</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断待添加的KV值是否为空</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(propertyName) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(propertyValue)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String existedValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> metadata.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(propertyName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> put </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> existedValue </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isOverride</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (put) { </span><span style="color:#6A737D;">// 是否覆盖原值</span></span>
<span class="line"><span style="color:#E1E4E8;">            metadata.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(propertyName, propertyValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customize</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取ServiceInstance对象的metadata字段</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; metadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 生成要添加到metadata集合的KV值</span></span>
<span class="line"><span style="color:#24292E;">    String propertyName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveMetadataPropertyName</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    String propertyValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveMetadataPropertyValue</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断待添加的KV值是否为空</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(propertyName) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(propertyValue)) {</span></span>
<span class="line"><span style="color:#24292E;">        String existedValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> metadata.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(propertyName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> put </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> existedValue </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isOverride</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (put) { </span><span style="color:#6A737D;">// 是否覆盖原值</span></span>
<span class="line"><span style="color:#24292E;">            metadata.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(propertyName, propertyValue);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>生成 KV 值的 resolveMetadataPropertyName()、resolveMetadataPropertyValue() 方法以及 isOverride() 方法都是抽象方法，在 ServiceInstanceMetadataCustomizer 子类中实现。</p><p>在 ExportedServicesRevisionMetadataCustomizer 这个实现中，resolveMetadataPropertyName() 方法返回 &quot;dubbo.exported-services.revision&quot; 固定字符串，resolveMetadataPropertyValue() 方法会通过 WritableMetadataService 获取当前 ServiceInstance 对象发布的全部 URL，然后计算 revision 值。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">resolveMetadataPropertyValue</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从ServiceInstance对象的metadata集合中获取当前ServiceInstance存储元数据的方式（local还是remote）</span></span>
<span class="line"><span style="color:#E1E4E8;">    String metadataStorageType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMetadataStorageType</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取相应的WritableMetadataService对象，并获取当前ServiceInstance发布的全部元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    WritableMetadataService writableMetadataService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(metadataStorageType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; exportedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> writableMetadataService.</span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 计算整个exportedURLs集合的revision值</span></span>
<span class="line"><span style="color:#E1E4E8;">    URLRevisionResolver resolver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLRevisionResolver</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resolver.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(exportedURLs);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">resolveMetadataPropertyValue</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从ServiceInstance对象的metadata集合中获取当前ServiceInstance存储元数据的方式（local还是remote）</span></span>
<span class="line"><span style="color:#24292E;">    String metadataStorageType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMetadataStorageType</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取相应的WritableMetadataService对象，并获取当前ServiceInstance发布的全部元数据</span></span>
<span class="line"><span style="color:#24292E;">    WritableMetadataService writableMetadataService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(metadataStorageType);</span></span>
<span class="line"><span style="color:#24292E;">    SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; exportedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> writableMetadataService.</span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 计算整个exportedURLs集合的revision值</span></span>
<span class="line"><span style="color:#24292E;">    URLRevisionResolver resolver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLRevisionResolver</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resolver.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(exportedURLs);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里需要说明下计算 revision 值的核心实现：首先获取每个服务接口的方法签名以及对应 URL 参数集合，然后计算 hashCode 并加和返回，如果通过上述方式没有拿到 revision 值，则返回 &quot;N/A&quot; 占位符字符串。URLRevisionResolver.resolve() 方法的具体实现比较简单，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>在 SubscribedServicesRevisionMetadataCustomizer 这个实现中，resolveMetadataPropertyName() 方法返回的是 &quot;dubbo.subscribed-services.revision&quot; 固定字符串，resolveMetadataPropertyValue() 方法会通过 WritableMetadataService 获取当前 ServiceInstance 对象引用的全部 URL，然后计算 revision 值并返回。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">resolveMetadataPropertyValue</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String metadataStorageType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMetadataStorageType</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    WritableMetadataService writableMetadataService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(metadataStorageType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取subscribedServiceURLs集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; subscribedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> writableMetadataService.</span><span style="color:#B392F0;">getSubscribedURLs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    URLRevisionResolver resolver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLRevisionResolver</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 计算revision值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resolver.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(subscribedURLs);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">resolveMetadataPropertyValue</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    String metadataStorageType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMetadataStorageType</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    WritableMetadataService writableMetadataService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(metadataStorageType);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取subscribedServiceURLs集合</span></span>
<span class="line"><span style="color:#24292E;">    SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; subscribedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> writableMetadataService.</span><span style="color:#6F42C1;">getSubscribedURLs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    URLRevisionResolver resolver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLRevisionResolver</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 计算revision值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resolver.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(subscribedURLs);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 MetadataServiceURLParamsMetadataCustomizer 这个实现中，resolveMetadataPropertyName() 方法返回 &quot;dubbo.metadata-service.url-params&quot; 固定字符串，resolveMetadataPropertyValue() 方法返回 MetadataService 服务 URL 的参数。</p><p>对于 RefreshServiceMetadataCustomizer 这个实现，我们首先关注其执行顺序， 它覆盖了 getPriority() 方法，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPriority</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> MIN_PRIORITY; </span><span style="color:#6A737D;">// 执行优先级最低</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPriority</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> MIN_PRIORITY; </span><span style="color:#6A737D;">// 执行优先级最低</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这就保证了 RefreshServiceMetadataCustomizer 在前面介绍的 ServiceInstanceMetadataCustomizer 实现之后执行（ServiceInstanceMetadataCustomizer 的优先级为 NORMAL_PRIORITY）。</p><p>customize() 方法的实现中，RefreshServiceMetadataCustomizer 会分别获取该 ServiceInstance 发布服务的 URL revision 以及引用服务的 URL revision，并更新到元数据中心。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customize</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String metadataStoredType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMetadataStorageType</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    WritableMetadataService writableMetadataService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(metadataStoredType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从ServiceInstance.metadata集合中获取两个revision，并调用refreshMetadata()方法进行更新</span></span>
<span class="line"><span style="color:#E1E4E8;">    writableMetadataService.</span><span style="color:#B392F0;">refreshMetadata</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getExportedServicesRevision</span><span style="color:#E1E4E8;">(serviceInstance),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">getSubscribedServicesRevision</span><span style="color:#E1E4E8;">(serviceInstance));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customize</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    String metadataStoredType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMetadataStorageType</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    WritableMetadataService writableMetadataService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(metadataStoredType);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从ServiceInstance.metadata集合中获取两个revision，并调用refreshMetadata()方法进行更新</span></span>
<span class="line"><span style="color:#24292E;">    writableMetadataService.</span><span style="color:#6F42C1;">refreshMetadata</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getExportedServicesRevision</span><span style="color:#24292E;">(serviceInstance),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">getSubscribedServicesRevision</span><span style="color:#24292E;">(serviceInstance));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 WritableMetadataService 接口的实现中，只有 RemoteWritableMetadataService 实现了 refreshMetadata() 方法，其中会判断两个 revision 值是否发生变化，如果发生了变化，则将相应的 URL 集合更新到元数据中心。如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refreshMetadata</span><span style="color:#E1E4E8;">(String exportedRevision, String subscribedRevision) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 比较当前ServiceInstance的exportedRevision是否发生变化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(exportedRevision) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">exportedRevision.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.exportedRevision)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发生变化的话，会更新exportedRevision字段，同时将exportedServiceURLs集合中的URL更新到元数据中心</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.exportedRevision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exportedRevision;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> executeResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveServiceMetadata</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">executeResult) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 比较当前ServiceInstance的subscribedRevision是否发生变化 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(subscribedRevision) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">subscribedRevision.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.subscribedRevision)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(writableMetadataService.</span><span style="color:#B392F0;">getSubscribedURLs</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发生变化的话，会更新subscribedRevision字段，同时将subscribedServiceURLs集合中的URL更新到元数据中心</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.subscribedRevision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> subscribedRevision;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SubscriberMetadataIdentifier metadataIdentifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubscriberMetadataIdentifier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        metadataIdentifier.</span><span style="color:#B392F0;">setApplication</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">serviceName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        metadataIdentifier.</span><span style="color:#B392F0;">setRevision</span><span style="color:#E1E4E8;">(subscribedRevision);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> executeResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throwableAction</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getMetadataReport</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">saveSubscribedData, metadataIdentifier,</span></span>
<span class="line"><span style="color:#E1E4E8;">                writableMetadataService.</span><span style="color:#B392F0;">getSubscribedURLs</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">executeResult) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refreshMetadata</span><span style="color:#24292E;">(String exportedRevision, String subscribedRevision) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 比较当前ServiceInstance的exportedRevision是否发生变化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(exportedRevision) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">exportedRevision.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.exportedRevision)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发生变化的话，会更新exportedRevision字段，同时将exportedServiceURLs集合中的URL更新到元数据中心</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.exportedRevision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exportedRevision;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> executeResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveServiceMetadata</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">executeResult) {</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 比较当前ServiceInstance的subscribedRevision是否发生变化 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(subscribedRevision) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">subscribedRevision.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.subscribedRevision)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(writableMetadataService.</span><span style="color:#6F42C1;">getSubscribedURLs</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发生变化的话，会更新subscribedRevision字段，同时将subscribedServiceURLs集合中的URL更新到元数据中心</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.subscribedRevision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> subscribedRevision;</span></span>
<span class="line"><span style="color:#24292E;">        SubscriberMetadataIdentifier metadataIdentifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubscriberMetadataIdentifier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        metadataIdentifier.</span><span style="color:#6F42C1;">setApplication</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">serviceName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        metadataIdentifier.</span><span style="color:#6F42C1;">setRevision</span><span style="color:#24292E;">(subscribedRevision);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> executeResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throwableAction</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getMetadataReport</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">saveSubscribedData, metadataIdentifier,</span></span>
<span class="line"><span style="color:#24292E;">                writableMetadataService.</span><span style="color:#6F42C1;">getSubscribedURLs</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">executeResult) {</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 EventListener 接口的实现中有一个名为 CustomizableServiceInstanceListener 的实现，它会监听 ServiceInstancePreRegisteredEvent，在其 onEvent() 方法中，加载全部 ServiceInstanceCustomizer 实现，并调用全部 customize() 方法完成 ServiceInstance 的自定义。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onEvent</span><span style="color:#E1E4E8;">(ServiceInstancePreRegisteredEvent event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载全部ServiceInstanceCustomizer实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExtensionLoader&lt;</span><span style="color:#F97583;">ServiceInstanceCustomizer</span><span style="color:#E1E4E8;">&gt; loader </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(ServiceInstanceCustomizer.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 按序实现ServiceInstance自定义</span></span>
<span class="line"><span style="color:#E1E4E8;">    loader.</span><span style="color:#B392F0;">getSupportedExtensionInstances</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(customizer </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        customizer.</span><span style="color:#B392F0;">customize</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getServiceInstance</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onEvent</span><span style="color:#24292E;">(ServiceInstancePreRegisteredEvent event) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载全部ServiceInstanceCustomizer实现</span></span>
<span class="line"><span style="color:#24292E;">    ExtensionLoader&lt;</span><span style="color:#D73A49;">ServiceInstanceCustomizer</span><span style="color:#24292E;">&gt; loader </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(ServiceInstanceCustomizer.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 按序实现ServiceInstance自定义</span></span>
<span class="line"><span style="color:#24292E;">    loader.</span><span style="color:#6F42C1;">getSupportedExtensionInstances</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(customizer </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        customizer.</span><span style="color:#6F42C1;">customize</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getServiceInstance</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="_2-更新-revision-缓存" tabindex="-1">（2）更新 Revision 缓存 <a class="header-anchor" href="#_2-更新-revision-缓存" aria-label="Permalink to &quot;（2）更新 Revision 缓存&quot;">​</a></h5><p>介绍完 ServiceInstanceMetadataCustomizer 的内容之后，下面我们回到 ServiceDiscoveryRegistry 继续分析。</p><p>在清理完过期的修订版本 URL 之后，接下来会<strong>检测所有 ServiceInstance 的 revision 值是否已经存在于 serviceRevisionExportedURLsCache 缓存中</strong>，如果某个 ServiceInstance 的 revision 值没有在该缓存中，则会调用该 ServiceInstance 发布的 MetadataService 接口进行查询，这部分逻辑在 initializeRevisionExportedURLs() 方法中实现。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initializeRevisionExportedURLs</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (serviceInstance </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 判空</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取该ServiceInstance.metadata中携带的revision值</span></span>
<span class="line"><span style="color:#E1E4E8;">    String revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExportedServicesRevision</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从serviceRevisionExportedURLsCache集合中获取该revision值对应的URL集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt;&gt; revisionExportedURLsMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRevisionExportedURLsMap</span><span style="color:#E1E4E8;">(serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; revisionExportedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> revisionExportedURLsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(revision);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (revisionExportedURLs </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// serviceRevisionExportedURLsCache缓存没有命中        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用该ServiceInstance对应的MetadataService服务，获取其发布的URL集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        revisionExportedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (revisionExportedURLs </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 调用MetadataService服务成功之后，更新到serviceRevisionExportedURLsCache缓存中</span></span>
<span class="line"><span style="color:#E1E4E8;">            revisionExportedURLsMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(revision, revisionExportedURLs);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 命中serviceRevisionExportedURLsCache缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 打印日志</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> revisionExportedURLs;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initializeRevisionExportedURLs</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (serviceInstance </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 判空</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Service Name</span></span>
<span class="line"><span style="color:#24292E;">    String serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取该ServiceInstance.metadata中携带的revision值</span></span>
<span class="line"><span style="color:#24292E;">    String revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExportedServicesRevision</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从serviceRevisionExportedURLsCache集合中获取该revision值对应的URL集合</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt;&gt; revisionExportedURLsMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRevisionExportedURLsMap</span><span style="color:#24292E;">(serviceName);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; revisionExportedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> revisionExportedURLsMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(revision);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (revisionExportedURLs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// serviceRevisionExportedURLsCache缓存没有命中        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用该ServiceInstance对应的MetadataService服务，获取其发布的URL集合</span></span>
<span class="line"><span style="color:#24292E;">        revisionExportedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (revisionExportedURLs </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 调用MetadataService服务成功之后，更新到serviceRevisionExportedURLsCache缓存中</span></span>
<span class="line"><span style="color:#24292E;">            revisionExportedURLsMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(revision, revisionExportedURLs);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 命中serviceRevisionExportedURLsCache缓存</span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 打印日志</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> revisionExportedURLs;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="_3-请求-metadataservice-服务" tabindex="-1">（3）请求 MetadataService 服务 <a class="header-anchor" href="#_3-请求-metadataservice-服务" aria-label="Permalink to &quot;（3）请求 MetadataService 服务&quot;">​</a></h5><p>这里我们可以看到，请求某个 ServiceInstance 的 MetadataService 接口的实现是在 getExportedURLs() 方法中实现的，与我们前面整个课程介绍的请求普通业务接口的原理类似。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(ServiceInstance providerServiceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; exportedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取指定ServiceInstance实例存储元数据的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    String metadataStorageType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMetadataStorageType</span><span style="color:#E1E4E8;">(providerServiceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建MetadataService接口的本地代理</span></span>
<span class="line"><span style="color:#E1E4E8;">        MetadataService metadataService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MetadataServiceProxyFactory.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(metadataStorageType)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(providerServiceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (metadataService </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 通过本地代理，请求该ServiceInstance的MetadataService服务</span></span>
<span class="line"><span style="color:#E1E4E8;">            SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; urls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> metadataService.</span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            exportedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toURLs</span><span style="color:#E1E4E8;">(urls);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        exportedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 置空exportedURLs</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exportedURLs;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(ServiceInstance providerServiceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; exportedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取指定ServiceInstance实例存储元数据的类型</span></span>
<span class="line"><span style="color:#24292E;">    String metadataStorageType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMetadataStorageType</span><span style="color:#24292E;">(providerServiceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建MetadataService接口的本地代理</span></span>
<span class="line"><span style="color:#24292E;">        MetadataService metadataService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MetadataServiceProxyFactory.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(metadataStorageType)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(providerServiceInstance);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (metadataService </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 通过本地代理，请求该ServiceInstance的MetadataService服务</span></span>
<span class="line"><span style="color:#24292E;">            SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; urls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> metadataService.</span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            exportedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toURLs</span><span style="color:#24292E;">(urls);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        exportedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 置空exportedURLs</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exportedURLs;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里涉及一个新的接口------<strong>MetadataServiceProxyFactory，它是用来创建 MetadataService 本地代理的工厂类</strong>，继承关系如下所示：</p>`,27),v=l(`<p>MetadataServiceProxyFactory 继承关系图</p><p>在 BaseMetadataServiceProxyFactory 中提供了缓存 MetadataService 本地代理的公共功能，其中维护了一个 proxies 集合（HashMap&lt;String, MetadataService&gt; 类型），Key 是 Service Name 与一个 ServiceInstance 的 revision 值的组合，Value 是该 ServiceInstance 对应的 MetadataService 服务的本地代理对象。创建 MetadataService 本地代理的功能是在 createProxy() 抽象方法中实现的，这个方法由 BaseMetadataServiceProxyFactory 的子类具体实现。</p><p><strong>下面来看 BaseMetadataServiceProxyFactory 的两个实现------DefaultMetadataServiceProxyFactory 和 RemoteMetadataServiceProxyFactory。</strong></p><p>DefaultMetadataServiceProxyFactory 在其 createProxy() 方法中，会先通过 MetadataServiceURLBuilder 获取 MetadataService 接口的 URL，然后通过 Protocol 接口引用指定 ServiceInstance 发布的 MetadataService 服务，得到对应的 Invoker 对象，最后通过 ProxyFactory 在 Invoker 对象的基础上创建 MetadataService 本地代理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> MetadataService </span><span style="color:#B392F0;">createProxy</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    MetadataServiceURLBuilder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExtensionLoader</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">MetadataServiceURLBuilder</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> loader</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(MetadataServiceURLBuilder.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; metadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在使用Spring Cloud的时候，metadata集合中会包含METADATA_SERVICE_URLS_PROPERTY_NAME整个Key</span></span>
<span class="line"><span style="color:#E1E4E8;">    String dubboURLsJSON </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> metadata.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(METADATA_SERVICE_URLS_PROPERTY_NAME);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(dubboURLsJSON)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(SpringCloudMetadataServiceURLBuilder.NAME);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(StandardMetadataServiceURLBuilder.NAME);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 构造MetadataService服务对应的URL集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; urls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(serviceInstance); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 引用服务，创建Invoker，注意，即使MetadataService接口使用了多种协议，这里也只会使用第一种协议</span></span>
<span class="line"><span style="color:#E1E4E8;">    Invoker&lt;</span><span style="color:#F97583;">MetadataService</span><span style="color:#E1E4E8;">&gt; invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> protocol.</span><span style="color:#B392F0;">refer</span><span style="color:#E1E4E8;">(MetadataService.class, urls.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建MetadataService的本地代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> proxyFactory.</span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(invoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> MetadataService </span><span style="color:#6F42C1;">createProxy</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    MetadataServiceURLBuilder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    ExtensionLoader</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">MetadataServiceURLBuilder</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> loader</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(MetadataServiceURLBuilder.class);</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; metadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在使用Spring Cloud的时候，metadata集合中会包含METADATA_SERVICE_URLS_PROPERTY_NAME整个Key</span></span>
<span class="line"><span style="color:#24292E;">    String dubboURLsJSON </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> metadata.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(METADATA_SERVICE_URLS_PROPERTY_NAME);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(dubboURLsJSON)) {</span></span>
<span class="line"><span style="color:#24292E;">        builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(SpringCloudMetadataServiceURLBuilder.NAME);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(StandardMetadataServiceURLBuilder.NAME);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构造MetadataService服务对应的URL集合</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; urls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(serviceInstance); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 引用服务，创建Invoker，注意，即使MetadataService接口使用了多种协议，这里也只会使用第一种协议</span></span>
<span class="line"><span style="color:#24292E;">    Invoker&lt;</span><span style="color:#D73A49;">MetadataService</span><span style="color:#24292E;">&gt; invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> protocol.</span><span style="color:#6F42C1;">refer</span><span style="color:#24292E;">(MetadataService.class, urls.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建MetadataService的本地代理对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> proxyFactory.</span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(invoker);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们来看 MetadataServiceURLBuilder 接口中创建 MetadataService 服务对应的 URL 的逻辑，下图展示了 MetadataServiceURLBuilder 接口的实现：</p>`,6),F=l(`<p>MetadataServiceURLBuilder 继承关系图</p><p>其中，SpringCloudMetadataServiceURLBuilder 是兼容 Spring Cloud 的实现，这里就不深入分析了。我们重点来看 StandardMetadataServiceURLBuilder 的实现，其中会根据 ServiceInstance.metadata 携带的 URL 参数、Service Name、ServiceInstance 的 host 等信息构造 MetadataService 服务对应 URL，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从metadata集合中获取&quot;dubbo.metadata-service.url-params&quot;这个Key对应的Value值，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这个Key是在MetadataServiceURLParamsMetadataCustomizer中写入的</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; paramsMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMetadataServiceURLsParams</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; urls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(paramsMap.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取ServiceInstance监听的host</span></span>
<span class="line"><span style="color:#E1E4E8;">    String host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// MetadataService接口可能被发布成多种协议，遍历paramsMap集合，为每种协议都生成对应的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> paramsMap.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(params.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(PORT_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">        URLBuilder urlBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setHost</span><span style="color:#E1E4E8;">(host)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(port)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setProtocol</span><span style="color:#E1E4E8;">(protocol)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setPath</span><span style="color:#E1E4E8;">(MetadataService.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        params.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((name, value) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> urlBuilder.</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(name, </span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(value)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        urlBuilder.</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(GROUP_KEY, serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        urls.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(urlBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> urls;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从metadata集合中获取&quot;dubbo.metadata-service.url-params&quot;这个Key对应的Value值，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这个Key是在MetadataServiceURLParamsMetadataCustomizer中写入的</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; paramsMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMetadataServiceURLsParams</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; urls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(paramsMap.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Service Name</span></span>
<span class="line"><span style="color:#24292E;">    String serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取ServiceInstance监听的host</span></span>
<span class="line"><span style="color:#24292E;">    String host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// MetadataService接口可能被发布成多种协议，遍历paramsMap集合，为每种协议都生成对应的URL</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> paramsMap.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        String protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(params.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(PORT_KEY));</span></span>
<span class="line"><span style="color:#24292E;">        URLBuilder urlBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setHost</span><span style="color:#24292E;">(host)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(port)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setProtocol</span><span style="color:#24292E;">(protocol)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setPath</span><span style="color:#24292E;">(MetadataService.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        params.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((name, value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> urlBuilder.</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(name, </span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(value)));</span></span>
<span class="line"><span style="color:#24292E;">        urlBuilder.</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(GROUP_KEY, serviceName);</span></span>
<span class="line"><span style="color:#24292E;">        urls.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(urlBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> urls;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来我们看 RemoteMetadataServiceProxyFactory 这个实现类，其中的 createProxy() 方法会直接创建一个 RemoteMetadataServiceProxy 对象并返回。在前面第 44 课时介绍 MetadataService 接口的时候，我们重点介绍的是 WritableMetadataService 这个子接口下的实现，并没有提及 RemoteMetadataServiceProxy 这个实现。下图是 RemoteMetadataServiceProxy 在继承体系中的位置：</p>`,4),g=l(`<p>RemoteMetadataServiceProxy 继承关系图</p><p>RemoteMetadataServiceProxy 作为 RemoteWritableMetadataService 的本地代理，其 getExportedURLs()、getServiceDefinition() 等方法的实现，完全依赖于 MetadataReport 进行实现。这里以 getExportedURLs() 方法为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SortedSet</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(String serviceInterface, String group, String version, String protocol) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过getMetadataReport()方法获取MetadataReport实现对象，并通过其getExportedURLs()方法进行查询，查询条件封装成ServiceMetadataIdentifier传入，其中包括服务接口、group、version以及revision等一系列信息，以ZookeeperMetadataReport实现为例真正有用的信息是revision和protocol</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toSortedStrings</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getMetadataReport</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceMetadataIdentifier</span><span style="color:#E1E4E8;">(serviceInterface, group, version, PROVIDER_SIDE, revision, protocol)));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SortedSet</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(String serviceInterface, String group, String version, String protocol) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过getMetadataReport()方法获取MetadataReport实现对象，并通过其getExportedURLs()方法进行查询，查询条件封装成ServiceMetadataIdentifier传入，其中包括服务接口、group、version以及revision等一系列信息，以ZookeeperMetadataReport实现为例真正有用的信息是revision和protocol</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toSortedStrings</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getMetadataReport</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceMetadataIdentifier</span><span style="color:#24292E;">(serviceInterface, group, version, PROVIDER_SIDE, revision, protocol)));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到此为止，serviceRevisionExportedURLsCache 缓存中各个修订版本的 URL 已经更新到最新数据。</p><h4 id="_4-生成-subcribedurl" tabindex="-1">（4）生成 SubcribedURL <a class="header-anchor" href="#_4-生成-subcribedurl" aria-label="Permalink to &quot;（4）生成 SubcribedURL&quot;">​</a></h4><p>在拿到最新修订版本的 URL 集合之后，接下来会调用 cloneExportedURLs() 方法，结合模板 URL（也就是 subscribedURL）以及各个 ServiceInstance 发布出来的元数据，生成要订阅服务的最终 subscribedURL 集合。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cloneExportedURLs</span><span style="color:#E1E4E8;">(URL subscribedURL, Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ServiceInstance</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> serviceInstances) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(serviceInstances)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; clonedExportedURLs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    serviceInstances.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(serviceInstance </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取该ServiceInstance的host</span></span>
<span class="line"><span style="color:#E1E4E8;">        String host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取该ServiceInstance的模板URL集合，getTemplateExportedURLs()方法会根据Service Name以及当前ServiceInstance的revision</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从serviceRevisionExportedURLsCache缓存中获取对应的URL集合，另外，还会根据subscribedURL的protocol、group、version等参数进行过滤</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getTemplateExportedURLs</span><span style="color:#E1E4E8;">(subscribedURL, serviceInstance)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 删除timestamp、pid等参数</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(templateURL </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> templateURL.</span><span style="color:#B392F0;">removeParameter</span><span style="color:#E1E4E8;">(TIMESTAMP_KEY))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(templateURL </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> templateURL.</span><span style="color:#B392F0;">removeParameter</span><span style="color:#E1E4E8;">(PID_KEY))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(templateURL </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 从ServiceInstance.metadata集合中获取该protocol对应的端口号</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> templateURL.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getProtocolPort</span><span style="color:#E1E4E8;">(serviceInstance, protocol);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Objects.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(templateURL.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">(), host)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Objects.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(templateURL.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">(), port)) { </span><span style="color:#6A737D;">// use templateURL if equals</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> templateURL;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 覆盖host、port参数</span></span>
<span class="line"><span style="color:#E1E4E8;">                    URLBuilder clonedURLBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(templateURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#B392F0;">setHost</span><span style="color:#E1E4E8;">(host) </span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(port);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> clonedURLBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                })</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(clonedExportedURLs</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">add); </span><span style="color:#6A737D;">// 记录新生成的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> clonedExportedURLs;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cloneExportedURLs</span><span style="color:#24292E;">(URL subscribedURL, Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ServiceInstance</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> serviceInstances) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(serviceInstances)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; clonedExportedURLs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    serviceInstances.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(serviceInstance </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取该ServiceInstance的host</span></span>
<span class="line"><span style="color:#24292E;">        String host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取该ServiceInstance的模板URL集合，getTemplateExportedURLs()方法会根据Service Name以及当前ServiceInstance的revision</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从serviceRevisionExportedURLsCache缓存中获取对应的URL集合，另外，还会根据subscribedURL的protocol、group、version等参数进行过滤</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getTemplateExportedURLs</span><span style="color:#24292E;">(subscribedURL, serviceInstance)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 删除timestamp、pid等参数</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(templateURL </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> templateURL.</span><span style="color:#6F42C1;">removeParameter</span><span style="color:#24292E;">(TIMESTAMP_KEY))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(templateURL </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> templateURL.</span><span style="color:#6F42C1;">removeParameter</span><span style="color:#24292E;">(PID_KEY))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(templateURL </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 从ServiceInstance.metadata集合中获取该protocol对应的端口号</span></span>
<span class="line"><span style="color:#24292E;">                    String protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> templateURL.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getProtocolPort</span><span style="color:#24292E;">(serviceInstance, protocol);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Objects.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(templateURL.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">(), host)</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Objects.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(templateURL.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">(), port)) { </span><span style="color:#6A737D;">// use templateURL if equals</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> templateURL;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 覆盖host、port参数</span></span>
<span class="line"><span style="color:#24292E;">                    URLBuilder clonedURLBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(templateURL)</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#6F42C1;">setHost</span><span style="color:#24292E;">(host) </span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(port);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> clonedURLBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                })</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(clonedExportedURLs</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">add); </span><span style="color:#6A737D;">// 记录新生成的URL</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> clonedExportedURLs;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 getProtocolPort() 方法中会从 ServiceInstance.metadata 集合中获取 endpoints 列表（Key 为 dubbo.endpoints），具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Integer </span><span style="color:#B392F0;">getProtocolPort</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance, String protocol) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; metadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从metadata集合中进行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">    String rawEndpoints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> metadata.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dubbo.endpoints&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(rawEndpoints)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将JSON格式的数据进行反序列化，这里的Endpoint是ServiceDiscoveryRegistry的内部类，只有port和protocol两个字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Endpoint</span><span style="color:#E1E4E8;">&gt; endpoints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JSON.</span><span style="color:#B392F0;">parseArray</span><span style="color:#E1E4E8;">(rawEndpoints, Endpoint.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Endpoint endpoint </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> endpoints) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 根据Protocol获取对应的port</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (endpoint.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(protocol)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> endpoint.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Integer </span><span style="color:#6F42C1;">getProtocolPort</span><span style="color:#24292E;">(ServiceInstance serviceInstance, String protocol) {</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; metadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从metadata集合中进行查询</span></span>
<span class="line"><span style="color:#24292E;">    String rawEndpoints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> metadata.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dubbo.endpoints&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(rawEndpoints)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将JSON格式的数据进行反序列化，这里的Endpoint是ServiceDiscoveryRegistry的内部类，只有port和protocol两个字段</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Endpoint</span><span style="color:#24292E;">&gt; endpoints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JSON.</span><span style="color:#6F42C1;">parseArray</span><span style="color:#24292E;">(rawEndpoints, Endpoint.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Endpoint endpoint </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> endpoints) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 根据Protocol获取对应的port</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (endpoint.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(protocol)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> endpoint.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ServiceInstance.metadata 集合中设置 Endpoint 集合的 ServiceInstanceCustomizer 接口的另一个实现------ ProtocolPortsMetadataCustomizer，主要是为了将不同 Protocol 监听的不同端口通知到 Consumer 端。ProtocolPortsMetadataCustomizer.customize() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customize</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取WritableMetadataService</span></span>
<span class="line"><span style="color:#E1E4E8;">    String metadataStoredType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMetadataStorageType</span><span style="color:#E1E4E8;">(serviceInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    WritableMetadataService writableMetadataService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(metadataStoredType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; protocols </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 先获取将当前ServiceInstance发布的各种Protocol对应的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    writableMetadataService.</span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(URL</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">valueOf)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 过滤掉MetadataService接口</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(url </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">MetadataService.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getServiceInterface</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(url </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 记录Protocol与port之间的映射关系</span></span>
<span class="line"><span style="color:#E1E4E8;">                protocols.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">(), url.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将protocols这个Map中的映射关系转换成Endpoint对象，然后再序列化成JSON字符串，并设置到该ServiceInstance的metadata集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setEndpoints</span><span style="color:#E1E4E8;">(serviceInstance, protocols);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customize</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取WritableMetadataService</span></span>
<span class="line"><span style="color:#24292E;">    String metadataStoredType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMetadataStorageType</span><span style="color:#24292E;">(serviceInstance);</span></span>
<span class="line"><span style="color:#24292E;">    WritableMetadataService writableMetadataService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(metadataStoredType);</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; protocols </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 先获取将当前ServiceInstance发布的各种Protocol对应的URL</span></span>
<span class="line"><span style="color:#24292E;">    writableMetadataService.</span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(URL</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">valueOf)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 过滤掉MetadataService接口</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(url </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">MetadataService.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getServiceInterface</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(url </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 记录Protocol与port之间的映射关系</span></span>
<span class="line"><span style="color:#24292E;">                protocols.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">(), url.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将protocols这个Map中的映射关系转换成Endpoint对象，然后再序列化成JSON字符串，并设置到该ServiceInstance的metadata集合中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setEndpoints</span><span style="color:#24292E;">(serviceInstance, protocols);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到此为止，整个 getExportedURLs() 方法的核心流程就介绍完了。</p><h4 id="_4-subscribedurlssynthesizer" tabindex="-1">4. SubscribedURLsSynthesizer <a class="header-anchor" href="#_4-subscribedurlssynthesizer" aria-label="Permalink to &quot;4. SubscribedURLsSynthesizer&quot;">​</a></h4><p>最后，我们再来看看 synthesizeSubscribedURLs() 方法的相关实现，其中使用到 SubscribedURLsSynthesizer 这个接口，具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubscribedURLsSynthesizer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Prioritized</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 是否支持该类型的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">supports</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">subscribedURL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据subscribedURL以及ServiceInstance的信息，合成完整subscribedURL集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">synthesize</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">subscribedURL</span><span style="color:#E1E4E8;">, Collection&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serviceInstances</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubscribedURLsSynthesizer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Prioritized</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是否支持该类型的URL</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">supports</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">subscribedURL</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据subscribedURL以及ServiceInstance的信息，合成完整subscribedURL集合</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">synthesize</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">subscribedURL</span><span style="color:#24292E;">, Collection&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serviceInstances</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>目前 Dubbo 只提供了 rest 协议的实现------ RestProtocolSubscribedURLsSynthesizer，其中会根据 subscribedURL 中的服务接口以及 ServiceInstance 的 host、port、Service Name 等合成完整的 URL，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">synthesize</span><span style="color:#E1E4E8;">(URL subscribedURL, Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ServiceInstance</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> serviceInstances) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Protocol</span></span>
<span class="line"><span style="color:#E1E4E8;">    String protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> subscribedURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(PROTOCOL_KEY); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> serviceInstances.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(serviceInstance </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        URLBuilder urlBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setProtocol</span><span style="color:#E1E4E8;">(protocol)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 使用ServiceInstance的host、port</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setHost</span><span style="color:#E1E4E8;">(serviceInstance.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(serviceInstance.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 设置业务接口</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setPath</span><span style="color:#E1E4E8;">(subscribedURL.</span><span style="color:#B392F0;">getServiceInterface</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(SIDE_KEY, PROVIDER)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 设置Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(APPLICATION_KEY, serviceInstance.</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(REGISTER_KEY, TRUE.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> urlBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">synthesize</span><span style="color:#24292E;">(URL subscribedURL, Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ServiceInstance</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> serviceInstances) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Protocol</span></span>
<span class="line"><span style="color:#24292E;">    String protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> subscribedURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(PROTOCOL_KEY); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> serviceInstances.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(serviceInstance </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        URLBuilder urlBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setProtocol</span><span style="color:#24292E;">(protocol)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 使用ServiceInstance的host、port</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setHost</span><span style="color:#24292E;">(serviceInstance.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(serviceInstance.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 设置业务接口</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setPath</span><span style="color:#24292E;">(subscribedURL.</span><span style="color:#6F42C1;">getServiceInterface</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(SIDE_KEY, PROVIDER)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 设置Service Name</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(APPLICATION_KEY, serviceInstance.</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(REGISTER_KEY, TRUE.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> urlBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，关于整个 ServiceDiscoveryRegistry 的内容，我们就介绍完了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们重点介绍了 Dubbo 服务自省架构中服务发布、服务订阅功能与传统 Dubbo 架构中Registry 接口的兼容实现，也就是 ServiceDiscoveryRegistry 的核心实现。</p><p>首先我们讲解了 ServiceDiscoveryRegistry 对服务注册的核心实现，然后详细介绍了 ServiceDiscoveryRegistry 对服务订阅功能的实现，其中涉及 Service Instance 和 Service Name 的查询、MetadataService 服务调用等操作，最终得到 SubcribedURL。</p><p>下一课时，我们将开始介绍 Dubbo 服务自省架构中配置中心的相关内容，记得按时来听课。</p>`,22);function S(u,R,b,D,A,L){const a=o("Image");return t(),r("div",null,[E,y,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8C/35/Ciqc1F_pe3KAQs8SAAPkHLoWbUM655.png"}),s(),i,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/04/1A/CgpVE1_pe6SAT90SAAC2xP9_c7c171.png"}),s(),d,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/04/1A/CgpVE1_pe72AFUTPAADh6TOy_Ak061.png"}),s(),v,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/8C/35/Ciqc1F_pe8eARHUJAACyQ5kof-I149.png"}),s(),F,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/8C/35/Ciqc1F_pe9GAEnNjAAA4bEzwZzw039.png"}),s(),g])}const C=e(c,[["render",S]]);export{U as __pageData,C as default};
