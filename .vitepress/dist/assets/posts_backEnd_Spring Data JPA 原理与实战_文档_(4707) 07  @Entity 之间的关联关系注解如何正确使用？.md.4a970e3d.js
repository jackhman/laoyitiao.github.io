import{_ as p,j as o,o as e,g as t,k as n,h as l,Q as s}from"./chunks/framework.a0d18f64.js";const h=JSON.parse('{"title":"07@Entity之间的关联关系注解如何正确使用？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4707) 07  @Entity 之间的关联关系注解如何正确使用？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4707) 07  @Entity 之间的关联关系注解如何正确使用？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4707) 07  @Entity 之间的关联关系注解如何正确使用？.md"},c=s(`<h1 id="_07-entity之间的关联关系注解如何正确使用" tabindex="-1">07@Entity之间的关联关系注解如何正确使用？ <a class="header-anchor" href="#_07-entity之间的关联关系注解如何正确使用" aria-label="Permalink to &quot;07@Entity之间的关联关系注解如何正确使用？&quot;">​</a></h1><p>你好，欢迎来到第 07 课时的学习，这一课时我们讲一下实体与实体之间的关联关系，这和数据的表与表之间的外键关系类似，我们为之为映射。</p><p>实体与实体之间的关联关系一共分为四种，分别为 OneToOne、OneToMany、ManyToOne 和 ManyToMany；而实体之间的关联关系又分为双向的和单向的。实体之间的关联关系是在 JPA 使用中最容易发生问题的地方，接下来我将一一揭晓并解释。我们先看一下 OneToOne，即一对一的关联关系。</p><h3 id="onetoone-关联关系" tabindex="-1">@OneToOne 关联关系 <a class="header-anchor" href="#onetoone-关联关系" aria-label="Permalink to &quot;@OneToOne 关联关系&quot;">​</a></h3><p>@OneToOne 一般表示对象之间一对一的关联关系，它可以放在 field 上面，也可以放在 get/set 方法上面。其中 JPA 协议有规定，如果是配置双向关联，维护关联关系的是拥有外键的一方，而另一方必须配置 mappedBy；如果是单项关联，直接配置在拥有外键的一方即可。</p><p>举个例子：user 表是用户的主信息，user_info 是用户的扩展信息，两者之间是一对一的关系。user_info 表里面有一个 user_id 作为关联关系的外键，如果是单项关联，我们的写法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.AllArgsConstructor;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.Builder;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.Data;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.NoArgsConstructor;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.AllArgsConstructor;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.Builder;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.Data;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.NoArgsConstructor;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String sex;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String address;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>User 实体里面什么都没变化，不需要添加 @OneToOne 注解。我们只需要在拥有外键的一方配置就可以，所以 UserInfo 的代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToOne</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//维护user的外键关联关系，配置一对一</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer ages;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToOne</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//维护user的外键关联关系，配置一对一</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到，UserInfo 实体对象里面添加了 @OneToOne 注解，这时我们写一个测试用例跑一下看看有什么效果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, address </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), email </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), name </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), sex </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, ages integer, telephone </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), user_id bigint, primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (user_id) references user</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, address </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), email </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), name </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), sex </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, ages integer, telephone </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), user_id bigint, primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (user_id) references user</span></span></code></pre></div><p>因为我们新建了两个实体，跑任何一个 @SpringDataTest 就会看到上面有三个 sql 在执行，分别创建了两张表，而在 user_info 表上面还创建了一个外键索引。</p><p>上面我们说了单项关联关系，那么双向关联应该怎么配置呢？我们保持 UserInfo 不变，在 User 实体对象里面添加这一段代码即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">OneToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfo userInfo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">OneToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfo userInfo;</span></span></code></pre></div><p>完整的 User 实体对象就会变成如下模样。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfo userInfo;</span><span style="color:#6A737D;">//变化之处</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfo userInfo;</span><span style="color:#6A737D;">//变化之处</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String sex;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String address;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们跑任何一个测试用例，就会看到运行结果是一样的，还是上面三条 sql。那么我们再查看一下 @OneToOne 源码，看看其支持的配置都有哪些。</p><h4 id="interface-onetoone-源码解读" tabindex="-1">@interface OneToOne 源码解读 <a class="header-anchor" href="#interface-onetoone-源码解读" aria-label="Permalink to &quot;@interface OneToOne 源码解读&quot;">​</a></h4><p>下面我列举了@OneToOne 的源码，并加以解读。通过这些你可以了解 @OneToOne 的用法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">OneToOne</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//表示关系目标实体，默认该注解标识的返回值的类型的类。</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class </span><span style="color:#B392F0;">targetEntity</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> void.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//cascade 级联操作策略，就是我们常说的级联操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">CascadeType</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">cascade</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//数据获取方式EAGER(立即加载)/LAZY(延迟加载)</span></span>
<span class="line"><span style="color:#E1E4E8;">    FetchType </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> EAGER;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否允许为空，默认是可选的，也就表示可以为空；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">optional</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//关联关系被谁维护的一方对象里面的属性名字。 双向关联的时候必填</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">mappedBy</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//当被标识的字段发生删除或者置空操作之后，是否同步到关联关系的一方，即进行通过删除操作，默认flase，注意与CascadeType.REMOVE 级联删除的区别</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">orphanRemoval</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">OneToOne</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//表示关系目标实体，默认该注解标识的返回值的类型的类。</span></span>
<span class="line"><span style="color:#24292E;">    Class </span><span style="color:#6F42C1;">targetEntity</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> void.class;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//cascade 级联操作策略，就是我们常说的级联操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">CascadeType</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">cascade</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//数据获取方式EAGER(立即加载)/LAZY(延迟加载)</span></span>
<span class="line"><span style="color:#24292E;">    FetchType </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> EAGER;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否允许为空，默认是可选的，也就表示可以为空；</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">optional</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//关联关系被谁维护的一方对象里面的属性名字。 双向关联的时候必填</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">mappedBy</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//当被标识的字段发生删除或者置空操作之后，是否同步到关联关系的一方，即进行通过删除操作，默认flase，注意与CascadeType.REMOVE 级联删除的区别</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">orphanRemoval</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="mappedby-注意事项" tabindex="-1">mappedBy 注意事项 <a class="header-anchor" href="#mappedby-注意事项" aria-label="Permalink to &quot;mappedBy 注意事项&quot;">​</a></h4><p>只有关联关系的维护方才能操作两个实体之间外键的关系。被维护方即使设置了维护方属性进行存储也不会更新外键关联。</p><p>mappedBy 不能与 @JoinColumn 或者 @JoinTable 同时使用，因为没有意义，关联关系不在这里面维护。</p><p>此外，mappedBy 的值是指另一方的实体里面属性的字段，而不是数据库字段，也不是实体的对象的名字。也就是维护关联关系的一方属性字段名称，或者加了 @JoinColumn / @JoinTable 注解的属性字段名称。如上面的 User 例子 user 里面 mappedBy 的值，就是 UserInfo 里面的 user 字段的名字。</p><h4 id="cascadetype用法" tabindex="-1">CascadeType用法 <a class="header-anchor" href="#cascadetype用法" aria-label="Permalink to &quot;CascadeType用法&quot;">​</a></h4><p>在 CascadeType 的用法中，CascadeType 的枚举值只有五个，分别如下：</p><ol><li><p>CascadeType.PERSIST 级联新建</p></li><li><p>CascadeType.REMOVE 级联删除</p></li><li><p>CascadeType.REFRESH 级联刷新</p></li><li><p>CascadeType.MERGE 级联更新</p></li><li><p>CascadeType.ALL 四项全选</p></li></ol><p>其中，默认是没有级联操作的，关系表不会产生任何影响。此外，JPA 2.0 还新增了 CascadeType.DETACH，即级联实体到 Detach 状态。</p><p>了解了枚举值，下面我们来测试一下级联新建和级联删除。</p><p>首先，修改 UserInfo 里面的关键代码如下，并在 @OneToOne 上面添加<br><code>cascade ={CascadeType.PERSIST,CascadeType.REMOVE}</code>，如下：</p>`,30),E=s(`<p>其次，我们新增一个测试方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testUserRelationships</span><span style="color:#E1E4E8;">() throws JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jackxx&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserInfo userInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserInfo.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">ages</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">telephone</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;12345678&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//保存userInfo的同上也会保存User信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfoRepository.</span><span style="color:#B392F0;">saveAndFlush</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//删除userInfo，同时也会级联的删除user记录</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfoRepository.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testUserRelationships</span><span style="color:#24292E;">() throws JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jackxx&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        UserInfo userInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserInfo.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">ages</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">telephone</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12345678&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//保存userInfo的同上也会保存User信息</span></span>
<span class="line"><span style="color:#24292E;">        userInfoRepository.</span><span style="color:#6F42C1;">saveAndFlush</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//删除userInfo，同时也会级联的删除user记录</span></span>
<span class="line"><span style="color:#24292E;">        userInfoRepository.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，运行一下看看效果。</p>`,3),y=s(`<p>从上面的运行结果可以看到，上面的测试在执行了 insert 的时候，会执行两条 insert 的sql 和两条 delete 的 sql，这就体现出了 CascadeType.PERSIST 和 CascadeType.REMOVE 的作用。</p><p>上面讲了级联删除的场景，下面我们再说一下关联关系的删除场景该怎么做。</p><h4 id="orphanremoval-属性用法" tabindex="-1">orphanRemoval 属性用法 <a class="header-anchor" href="#orphanremoval-属性用法" aria-label="Permalink to &quot;orphanRemoval 属性用法&quot;">​</a></h4><p>orphanRemoval 表示当关联关系被删除的时候，是否应用级联删除，默认 false。什么意思呢？测试一下你就会明白。</p><p>首先，还沿用上面的例子，当我们删除 userInfo 的时候，把 User 置空，作如下改动。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">userInfo.</span><span style="color:#B392F0;">setUser</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">userInfoRepository.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(userInfo);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">userInfo.</span><span style="color:#6F42C1;">setUser</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">userInfoRepository.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(userInfo);</span></span></code></pre></div><p>其次，我们再运行测试，看看效果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> delete from user_info where id</span><span style="color:#F97583;">=?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> delete from user_info where id</span><span style="color:#D73A49;">=?</span></span></code></pre></div><p>这时候你就会发现，少了一条删除 user 的 sql，说明没有进行级联删除。那我们再把 UserInfo 做一下调整。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {CascadeType.PERSIST},</span><span style="color:#79B8FF;">orphanRemoval</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">   ....其他没变的代码省了</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {CascadeType.PERSIST},</span><span style="color:#005CC5;">orphanRemoval</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">   ....其他没变的代码省了</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们把 CascadeType.Remove 删除了，不让它进行级联删除，但是我们把 orphanRemoval 设置成 true，即当关联关系变化的时候级联更新。我们看下完整的测试用例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testUserRelationships</span><span style="color:#E1E4E8;">() throws JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jackxx&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserInfo userInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserInfo.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">ages</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">telephone</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;12345678&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfoRepository.</span><span style="color:#B392F0;">saveAndFlush</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfo.</span><span style="color:#B392F0;">setAges</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfo.</span><span style="color:#B392F0;">setUser</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//还是通过这个设置user数据为空</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfoRepository.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testUserRelationships</span><span style="color:#24292E;">() throws JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jackxx&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        UserInfo userInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserInfo.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">ages</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">telephone</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12345678&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        userInfoRepository.</span><span style="color:#6F42C1;">saveAndFlush</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">        userInfo.</span><span style="color:#6F42C1;">setAges</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        userInfo.</span><span style="color:#6F42C1;">setUser</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//还是通过这个设置user数据为空</span></span>
<span class="line"><span style="color:#24292E;">        userInfoRepository.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个时候我们看一下运行结果。</p>`,13),i=s(`<p>从中我们可以看到，结果依然是两个 inser 和两个 delete，但是中间多了一个 update。我来解释一下，因为去掉了 CascadeType.REMOVE，这个时候不会进行级联删除了。当我们把 user 对象更新成空的时候，就会执行一条 update 语句把关联关系去掉了。</p><p>而为什么又出现了级联删除 user 呢？因为我们修改了集合关联关系，orphanRemoval 设置为 true，所以又执行了级联删除的操作。这一点你可以仔细体会一下 orphanRemoval 和 CascadeType.REMOVE 的区别。</p><p>到这里，@OneToOne 关联关系介绍完了，接下来我们看一下日常工作常见的场景，先看场景一：主键和外键都是同一个字段的情况。</p><h4 id="主键和外键都是同一个字段" tabindex="-1">主键和外键都是同一个字段 <a class="header-anchor" href="#主键和外键都是同一个字段" aria-label="Permalink to &quot;主键和外键都是同一个字段&quot;">​</a></h4><p>我们假设 user 表是主表，user_info 的主键是 user_id，并且 user_id=user 是表里面的 id，那我们应该怎么写？</p><p>继续沿用上面的例子，User 实体不变，我们看看 UserInfo 变成什么样了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long userId;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">MapsId</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {CascadeType.PERSIST},</span><span style="color:#79B8FF;">orphanRemoval</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long userId;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer ages;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">MapsId</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {CascadeType.PERSIST},</span><span style="color:#005CC5;">orphanRemoval</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的做法很简单，我们直接把 userId 设置为主键，在 @OneToOne 上面添加 @MapsId 注解即可。@MapsId 注解的作用是把关联关系实体里面的 ID（默认）值 copy 到 @MapsId 标注的字段上面（这里指的是 user_id 字段）。</p><p>接着，上面的测试用例我们跑一下，看一下效果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, address </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), email </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), name </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), sex </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;"> (ages integer, telephone </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), user_id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (user_id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (user_id) references user</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, address </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), email </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), name </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), sex </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;"> (ages integer, telephone </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), user_id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (user_id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (user_id) references user</span></span></code></pre></div><p>在启动的时候，我们直接创建了 user 表和 user_info 表，其中 user_info 的主键是 user_id，并且通过外键关联到了 user 表的 ID 字段，那么我们同时看一下 inser 的 sql，也发生了变化。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (address, email, name, sex, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;"> (ages, telephone, user_id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (address, email, name, sex, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;"> (ages, telephone, user_id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span></code></pre></div><p>上面就是我们讲的实战场景一，主键和外键都是同一个字段。接下来我们再说一个场景，就是在查 user_info 的时候，我们只想知道 user_id 的值就行了，不需要查 user 的其他信息，具体我们应该怎么做呢？</p><h4 id="onetoone-延迟加载-我们只需要-id-值" tabindex="-1">@OneToOne 延迟加载，我们只需要 ID 值 <a class="header-anchor" href="#onetoone-延迟加载-我们只需要-id-值" aria-label="Permalink to &quot;@OneToOne 延迟加载，我们只需要 ID 值&quot;">​</a></h4><p>在 @OneToOne 延迟加载的情况下，我们假设只想查下 user_id，而不想查看 user 表其他的信息，因为当前用不到，可以有以下几种做法。</p><p>第一种做法：还是 User 实体不变，我们改一下 UserInfo 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">MapsId</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {CascadeType.PERSIST},</span><span style="color:#79B8FF;">orphanRemoval</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer ages;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">MapsId</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {CascadeType.PERSIST},</span><span style="color:#005CC5;">orphanRemoval</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上面这段代码中，可以看到做的更改如下：</p><ul><li><p>id 字段我们先用原来的</p></li><li><p>@OneToOne 上面我们添加 @MapsId 注解</p></li><li><p>@OneToOne 里面的 fetch = FetchType.LAZY 设置延迟加载</p></li></ul><p>接着，我们改造一下测试类，完整代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestInstance</span><span style="color:#E1E4E8;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">BeforeAll</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jackxx&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserInfo userInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserInfo.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">ages</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">telephone</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;12345678&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        userInfoRepository.</span><span style="color:#B392F0;">saveAndFlush</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试用User关联关系操作</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">JsonProcessingException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testUserRelationships</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserInfo userInfo1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(userInfo1);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(userInfo1.</span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestInstance</span><span style="color:#24292E;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">BeforeAll</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jackxx&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        UserInfo userInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserInfo.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">ages</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">telephone</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12345678&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        userInfoRepository.</span><span style="color:#6F42C1;">saveAndFlush</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试用User关联关系操作</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">JsonProcessingException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testUserRelationships</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">        UserInfo userInfo1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(userInfo1);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(userInfo1.</span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们跑一下测试用例，看看测试结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (address, email, name, sex, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (address, email, name, sex, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">两条inser照旧，而只有一个select</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select userinfo0_.user_id as user_id3_6_0_, userinfo0_.ages as ages1_6_0_, userinfo0_.telephone as telephon2_6_0_ from user_info userinfo0_ where userinfo0_.user_id</span><span style="color:#F97583;">=?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (address, email, name, sex, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (address, email, name, sex, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">两条inser照旧，而只有一个select</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select userinfo0_.user_id as user_id3_6_0_, userinfo0_.ages as ages1_6_0_, userinfo0_.telephone as telephon2_6_0_ from user_info userinfo0_ where userinfo0_.user_id</span><span style="color:#D73A49;">=?</span></span></code></pre></div><p>最后你会发现，打印的结果符合预期。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, ages</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, telephone</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">12345678</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, ages</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, telephone</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">12345678</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">1</span></span></code></pre></div><p>接下来介绍第二种做法，这种做法很简单，只要在 UserInfo 对象里面直接去掉 @OneToOne 关联关系，新增下面的字段即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long userId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long userId;</span></span></code></pre></div><p>第三做法是利用 Hibernate，它给我们提供了一种字节码增强技术，通过编译器改变 class 解决了延迟加载问题。这种方式有点复杂，需要在编译器引入 hibernateEnhance 的相关 jar 包，以及编译器需要改变 class 文件并添加 lazy 代理来解决延迟加载。我不太推荐这种方式，因为太复杂，你知道有这回事就行了。</p><p>以上我们掌握了这么多用法，那么最佳实践是什么？双向关联更好还是单向关联更好？根据最近几年的应用，我总结出了一些最佳实践，我们来看一下。</p><h4 id="onetoone-的最佳实践是什么" tabindex="-1">@OneToOne 的最佳实践是什么？ <a class="header-anchor" href="#onetoone-的最佳实践是什么" aria-label="Permalink to &quot;@OneToOne 的最佳实践是什么？&quot;">​</a></h4><p><strong>第一，我要说一种 Java 面向对象的设计原则：开闭原则。</strong></p><p>即对扩展开放，对修改关闭。如果我们一直使用双向关联，两个实体的对象耦合太严重了。想象一下，随着业务的发展，User 对象可能是原始对象，围绕着 User 可能会扩展出各种关联对象。难道 User 里面每次都要修改，去添加双向关联关系吗？肯定不是，否则时间长了，对象与对象之间的关联关系就是一团乱麻。</p><p>所以，我们尽量、甚至不要用双向关联，如果非要用关联关系的话，只用单向关联就够了。双向关联正是 JPA 的强大之处，但同时也是问题最多，最被人诟病之处。所以我们要用它的优点，而不是学会了就一定要使用。</p><p><strong>第二，我想说 CascadeType 很强大，但是我也建议保持默认。</strong></p><p>即没有级联更新动作，没有级联删除动作。还有 orphanRemoval 也要尽量保持默认 false，不做级联删除。因为这两个功能很强大，但是我个人觉得这违背了面向对象设计原则里面的&quot;职责单一原则&quot;，除非你非常非常熟悉，否则你在用的时候会时常感到惊讶------数据什么时间被更新了？数据被谁删除了？遇到这种问题查起来非常麻烦，因为是框架处理，有的时候并非预期的效果。</p><p>一旦生产数据被莫名更新或者删除，那是一件非常糟糕的事情。因为这些级联操作会使你的方法名字没办法命名，而且它不是跟着业务逻辑变化的，而是跟着实体变化的，这就会使方法和对象的职责不单一。</p><p><strong>第三，我想告诉你，所有用到关联关系的地方，能用 Lazy 的绝对不要用 EAGER，否则会有 SQL 性能问题，会出现不是预期的 SQL。</strong></p><p>以上三点是我总结的避坑指南，有经验的同学这时候会有个疑问：外键约束不是不推荐使用的吗？如果我的外键字段名不是约定的怎么办？别着急，我们再看一下 @JoinColumn 注解和 @JoinColumns 注解。</p><h3 id="joincloumns-joincolumn" tabindex="-1">@JoinCloumns &amp; JoinColumn <a class="header-anchor" href="#joincloumns-joincolumn" aria-label="Permalink to &quot;@JoinCloumns \\&amp; JoinColumn&quot;">​</a></h3><p>这两个注解是集合关系，他们可以同时使用，@JoinColumn 表示单字段，@JoinCloumns 表示多个 @JoinColumn，我们来一一看一下。</p><p>我们还是先直接看一下 @JoinColumn 源码，了解下这一注解都有哪些配置项。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">JoinColumn</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//关键的字段名,默认注解上的字段名，在@OneToOne代表本表的外键字段名字；</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//与name相反关联对象的字段，默认主键字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">referencedColumnName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//外键字段是否唯一</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unique</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//外键字段是否允许为空</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nullable</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否跟随一起新增</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insertable</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否跟随一起更新</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updatable</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//JPA2.1新增，外键策略</span></span>
<span class="line"><span style="color:#E1E4E8;">    ForeignKey </span><span style="color:#B392F0;">foreignKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">ForeignKey</span><span style="color:#E1E4E8;">(PROVIDER_DEFAULT);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">JoinColumn</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//关键的字段名,默认注解上的字段名，在@OneToOne代表本表的外键字段名字；</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//与name相反关联对象的字段，默认主键字段</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">referencedColumnName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//外键字段是否唯一</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//外键字段是否允许为空</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nullable</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否跟随一起新增</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insertable</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否跟随一起更新</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updatable</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//JPA2.1新增，外键策略</span></span>
<span class="line"><span style="color:#24292E;">    ForeignKey </span><span style="color:#6F42C1;">foreignKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">ForeignKey</span><span style="color:#24292E;">(PROVIDER_DEFAULT);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其次，我们看一下 @ForeignKey(PROVIDER_DEFAULT) 里面枚举值有几个。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConstraintMode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建外键约束</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">CONSTRAINT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//不创建外键约束</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">NO_CONSTRAINT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//采用默认行为</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">PROVIDER_DEFAULT</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConstraintMode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建外键约束</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">CONSTRAINT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//不创建外键约束</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">NO_CONSTRAINT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//采用默认行为</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">PROVIDER_DEFAULT</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们看看这个注解的语法，就可以解答我们上面的两个问题。修改一下 UserInfo，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {CascadeType.PERSIST},</span><span style="color:#79B8FF;">orphanRemoval</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JoinColumn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">foreignKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">ForeignKey</span><span style="color:#E1E4E8;">(ConstraintMode.NO_CONSTRAINT),</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;my_user_id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">...其他不变}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer ages;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {CascadeType.PERSIST},</span><span style="color:#005CC5;">orphanRemoval</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JoinColumn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">foreignKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">ForeignKey</span><span style="color:#24292E;">(ConstraintMode.NO_CONSTRAINT),</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;my_user_id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">...其他不变}</span></span></code></pre></div><p>可以看到，我们在其中指定了字段的名字：my_user_id，并且指定 NO_CONSTRAINT 不生成外键。而测试用例不变，我们看下运行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, address </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), email </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), name </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), sex </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, ages integer, telephone </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), my_user_id bigint, primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, address </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), email </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), name </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), sex </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, ages integer, telephone </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), my_user_id bigint, primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span></code></pre></div><p>这时我们看到 user_info 表里面新增了一个字段 my_user_id，insert 的时候也能正确 inser my_user_id 的值等于 user.id。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;"> (ages, telephone, my_user_id, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;"> (ages, telephone, my_user_id, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span></code></pre></div><p>而 @JoinColumns 是 JoinColumns 的复数形式，就是通过两个字段进行的外键关联，这个不常用，我们看一个 demo 了解一下就好。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompanyOffice</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JoinColumns</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">         @</span><span style="color:#F97583;">JoinColumn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ADDR_ID&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">referencedColumnName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ID&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">         @</span><span style="color:#F97583;">JoinColumn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ADDR_ZIP&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">referencedColumnName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ZIP&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   })</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Address address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompanyOffice</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JoinColumns</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">         @</span><span style="color:#D73A49;">JoinColumn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ADDR_ID&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">referencedColumnName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">         @</span><span style="color:#D73A49;">JoinColumn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ADDR_ZIP&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">referencedColumnName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ZIP&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   })</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Address address;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的实例中，CompanyOffice 通过 ADDR_ID 和 ADDR_ZIP 两个字段对应一条 address 信息，解释了一下@JoinColumns的用法。</p><p>如果你了解了 @OneToOne 的详细用法，后面要讲的几个注解就很好理解了，因为他们有点类似，那么我们接下来看看 @ManyToOne 和 @OneToMany 的用法。</p><h3 id="manytoone-onetomany" tabindex="-1">@ManyToOne&amp; @OneToMany <a class="header-anchor" href="#manytoone-onetomany" aria-label="Permalink to &quot;@ManyToOne\\&amp; @OneToMany&quot;">​</a></h3><p>@ManyToOne 代表多对一的关联关系，而 @OneToMany 代表一对多，一般两个成对使用表示双向关联关系。而 JPA 协议中也是明确规定：维护关联关系的是拥有外键的一方，而另一方必须配置 mappedBy。看下面的代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ManyToOne</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class </span><span style="color:#B392F0;">targetEntity</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> void.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">CascadeType</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">cascade</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    FetchType </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> EAGER;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">optional</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class </span><span style="color:#B392F0;">targetEntity</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> void.class;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//cascade 级联操作策略：(CascadeType.PERSIST、CascadeType.REMOVE、CascadeType.REFRESH、CascadeType.MERGE、CascadeType.ALL)</span></span>
<span class="line"><span style="color:#E1E4E8;">如果不填，默认关系表不会产生任何影响。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">CascadeType</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">cascade</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">//数据获取方式EAGER(立即加载)/LAZY(延迟加载)</span></span>
<span class="line"><span style="color:#E1E4E8;">    FetchType </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> LAZY;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//关系被谁维护，单项的。注意：只有关系维护方才能操作两者的关系。</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">mappedBy</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//是否级联删除。和CascadeType.REMOVE的效果一样。两种配置了一个就会自动级联删除</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">orphanRemoval</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ManyToOne</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Class </span><span style="color:#6F42C1;">targetEntity</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> void.class;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">CascadeType</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">cascade</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    FetchType </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> EAGER;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">optional</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Class </span><span style="color:#6F42C1;">targetEntity</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> void.class;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//cascade 级联操作策略：(CascadeType.PERSIST、CascadeType.REMOVE、CascadeType.REFRESH、CascadeType.MERGE、CascadeType.ALL)</span></span>
<span class="line"><span style="color:#24292E;">如果不填，默认关系表不会产生任何影响。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">CascadeType</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">cascade</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">//数据获取方式EAGER(立即加载)/LAZY(延迟加载)</span></span>
<span class="line"><span style="color:#24292E;">    FetchType </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> LAZY;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//关系被谁维护，单项的。注意：只有关系维护方才能操作两者的关系。</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">mappedBy</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//是否级联删除。和CascadeType.REMOVE的效果一样。两种配置了一个就会自动级联删除</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">orphanRemoval</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到上面的字段和 @OneToOne 里面的基本一样，用法是一样的，不过需要注意以下几点：</p><ol><li><p>@ManyToOne 一定是维护外键关系的一方，所以没有 mappedBy 字段；</p></li><li><p>@ManyToOne 删除的时候一定不能把 One 的一方删除了，所以也没有 orphanRemoval 的选项；</p></li><li><p>@ManyToOne 的 Lazy 效果和 @OneToOne 的一样，所以和上面的用法基本一致；</p></li><li><p>@OneToMany 的 Lazy 是有效果的。</p></li></ol><p>我们看个例子，假设 User 有多个地址 Address，我们看看实体应该如何建立。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String sex;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; address;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码我们可以看到，@OneToMany 双向关联并且采用 LAZY 的机制；这时我们新建一个 UserAddress 实体维护关联关系如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddress</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.ALL)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddress</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String address;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.ALL)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再新建一个测试用例，完整代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.assertj.core.util.Lists;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.BeforeAll;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.TestInstance;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.test.annotation.Rollback;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.transaction.Transactional;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestInstance</span><span style="color:#E1E4E8;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddressRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserAddressRepository userAddressRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 负责添加数据</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">BeforeAll</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jackxx&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserAddress userAddress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserAddress.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserAddress userAddress2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserAddress.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai2&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      userAddressRepository.</span><span style="color:#B392F0;">saveAll</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(userAddress,userAddress2));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 测试用User关联关系操作</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">JsonProcessingException</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testUserRelationships</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">      User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.assertj.core.util.Lists;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.BeforeAll;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.TestInstance;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.test.annotation.Rollback;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.transaction.Transactional;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestInstance</span><span style="color:#24292E;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddressRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserAddressRepository userAddressRepository;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 负责添加数据</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">BeforeAll</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jackxx&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      UserAddress userAddress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserAddress.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      UserAddress userAddress2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserAddress.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai2&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      userAddressRepository.</span><span style="color:#6F42C1;">saveAll</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(userAddress,userAddress2));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 测试用User关联关系操作</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">JsonProcessingException</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testUserRelationships</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">      User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们看一下运行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, email </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), name </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), sex </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user_address</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, address </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), user_id bigint, primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table user_address add constraint FKk2ox3w9jm7yd6v1m5f68xibry foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (user_id) references user</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, email </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), name </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), sex </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user_address</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, address </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), user_id bigint, primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table user_address add constraint FKk2ox3w9jm7yd6v1m5f68xibry foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (user_id) references user</span></span></code></pre></div><p>接着我们创建两张表，并且创建外键。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (email, name, sex, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user_address</span><span style="color:#E1E4E8;"> (address, user_id, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user_address</span><span style="color:#E1E4E8;"> (address, user_id, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (email, name, sex, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user_address</span><span style="color:#24292E;"> (address, user_id, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user_address</span><span style="color:#24292E;"> (address, user_id, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span></code></pre></div><p>这时我们得到了符合预期的三条 inser 语句，可以看到 lazy 起作用了，说明了只有用到 address 的时候才会取重新加载 SQL。</p>`,70),F=s(`<p>综上，@ManyToOne 的 lazy 机制和用法，与 @OneToOne 的一样，我们就不过多介绍了。而 @ManyToOne 和 @OneToMany 的最佳实践，与 @OneToOne 的完全一样，也是尽量避免双向关联，一切级联更新和 orphanRemoval 都保持默认规则，并且 fetch 采用 lazy 延迟加载。</p><p>以上就是关于 @ManyToOne 和 @OneToMan 的讲解，实际开发过程中可以详细体会一下上面老师讲的用法。接下来我们介绍一下 @ManyToMany 多对多关联关系的用法。</p><h3 id="manytomany" tabindex="-1">@ManyToMany <a class="header-anchor" href="#manytomany" aria-label="Permalink to &quot;@ManyToMany&quot;">​</a></h3><p>@ManyToMany 代表多对多的关联关系，这种关联关系任何一方都可以维护关联关系。我们还是先看个例子感受一下。</p><p>我们假设 user 表和 room 表是多对多的关系，看看两个实体怎么写。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.Serializable;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Room</span><span style="color:#E1E4E8;">&gt; rooms;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.Serializable;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Room</span><span style="color:#24292E;">&gt; rooms;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着，我们让 Room 维护关联关系。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Room</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String title;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToMany</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Room</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String title;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToMany</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们跑一下测试用例，可以看到如下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">room</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, title </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">room_users</span><span style="color:#E1E4E8;"> (rooms_id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, users_id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, email </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), name </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), sex </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table room_users add constraint FKld9phr4qt71ve3gnen43qxxb8 foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (users_id) references user</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table room_users add constraint FKtjvf84yquud59juxileusukvk foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (rooms_id) references room</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">room</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, title </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">room_users</span><span style="color:#24292E;"> (rooms_id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, users_id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, email </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), name </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), sex </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table room_users add constraint FKld9phr4qt71ve3gnen43qxxb8 foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (users_id) references user</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table room_users add constraint FKtjvf84yquud59juxileusukvk foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (rooms_id) references room</span></span></code></pre></div><p>从结果上我们看到 JPA 帮我们创建的三张表中，room_users 表维护了 user 和 room 的多对多关联关系。其实这个情况还告诉我们一个道理：当用到 @ManyToMany 的时候一定是三张表，不要想着建两张表，两张表肯定是违背表的设计原则的。</p><p>那么我们看下 @ManyToMany 的语法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ManyToMany</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class </span><span style="color:#B392F0;">targetEntity</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> void.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">CascadeType</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">cascade</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    FetchType </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> LAZY;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">mappedBy</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ManyToMany</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Class </span><span style="color:#6F42C1;">targetEntity</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> void.class;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">CascadeType</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">cascade</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    FetchType </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> LAZY;</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">mappedBy</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>源码里面字段就这么多，基本和上面雷同，我就不多介绍了。这个时候有的同学可能会问，我们怎么去掉外键索引？怎么改中间表的表名？怎么指定外键字段的名字呢？我们继续引入另外一个注解------@JoinTable。</p><p>我先看一下例子，修改一下 Room 里面的内容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Room</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String title;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToMany</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JoinTable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user_room_ref&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">joinColumns</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">JoinColumn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;room_id_x&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">inverseJoinColumns</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">JoinColumn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user_id_x&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Room</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String title;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToMany</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JoinTable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user_room_ref&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">joinColumns</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">JoinColumn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;room_id_x&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">inverseJoinColumns</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">JoinColumn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user_id_x&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着，我们在 Room 里面添加了 @JoinTable 注解，看一下 junit 的运行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">room</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, title </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, email </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), name </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), sex </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user_room_ref</span><span style="color:#E1E4E8;"> (room_id_x bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, user_id_x bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table user_room_ref add constraint FKoxolr1eyfiu69o45jdb6xdule foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (user_id_x) references user</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table user_room_ref add constraint FK2sl9rtuxo9w130d83e19f3dd9 foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (room_id_x) references room</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">room</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, title </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, email </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), name </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), sex </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user_room_ref</span><span style="color:#24292E;"> (room_id_x bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, user_id_x bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table user_room_ref add constraint FKoxolr1eyfiu69o45jdb6xdule foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (user_id_x) references user</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table user_room_ref add constraint FK2sl9rtuxo9w130d83e19f3dd9 foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (room_id_x) references room</span></span></code></pre></div><p>到这里可以看到，我们创建了一张中间表，并且添加了两个在预想之内的外键关系。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">JoinTable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//中间关联关系表明</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//表的catalog</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">catalog</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//表的schema</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">schema</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//维护关联关系一方的外键字段的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">JoinColumn</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">joinColumns</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//另一方的表外键字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">JoinColumn</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">inverseJoinColumns</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//指定维护关联关系一方的外键创建规则</span></span>
<span class="line"><span style="color:#E1E4E8;">    ForeignKey </span><span style="color:#B392F0;">foreignKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">ForeignKey</span><span style="color:#E1E4E8;">(PROVIDER_DEFAULT);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//指定另一方的外键创建规则</span></span>
<span class="line"><span style="color:#E1E4E8;">    ForeignKey </span><span style="color:#B392F0;">inverseForeignKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Forei</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gnKey</span><span style="color:#E1E4E8;">(PROVIDER_DEFAULT);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">JoinTable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//中间关联关系表明</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//表的catalog</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">catalog</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//表的schema</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">schema</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//维护关联关系一方的外键字段的名字</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">JoinColumn</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">joinColumns</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//另一方的表外键字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">JoinColumn</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">inverseJoinColumns</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//指定维护关联关系一方的外键创建规则</span></span>
<span class="line"><span style="color:#24292E;">    ForeignKey </span><span style="color:#6F42C1;">foreignKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">ForeignKey</span><span style="color:#24292E;">(PROVIDER_DEFAULT);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//指定另一方的外键创建规则</span></span>
<span class="line"><span style="color:#24292E;">    ForeignKey </span><span style="color:#6F42C1;">inverseForeignKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Forei</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gnKey</span><span style="color:#24292E;">(PROVIDER_DEFAULT);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么通过上面的介绍，你知道了 @ManyToMany 的用法，然而实际开发者对 @ManyToMany 用得比较少，一般我们会用成对的 @ManyToOne 和 @OneToMany 代替，因为我们的中间表可能还有一些约定的公共字段，如 ID、update_time、create_time等其他字段。</p><h4 id="利用-manytoone-和-onetomany-表达多对多的关联关系" tabindex="-1">利用 @ManyToOne 和 @OneToMany 表达多对多的关联关系 <a class="header-anchor" href="#利用-manytoone-和-onetomany-表达多对多的关联关系" aria-label="Permalink to &quot;利用 @ManyToOne 和 @OneToMany 表达多对多的关联关系&quot;">​</a></h4><p>我们修改一下上面的 Demo，来看一下通过 @ManyToOne 和 @OneToMany 如何表达多对多的关联关系。</p><p>我们新建一张表 user_room_relation 来存储双方的关联关系和额外字段，实体如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Date;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRoomRelation</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Date createTime,udpateTime;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToOne</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Room room;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToOne</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Date;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRoomRelation</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Date createTime,udpateTime;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToOne</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Room room;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToOne</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而 User 变化如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">UserRoomRelation</span><span style="color:#E1E4E8;">&gt; userRoomRelations;</span></span>
<span class="line"><span style="color:#E1E4E8;">....}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Room 变化如下：</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Room</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;room&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">UserRoomRelation</span><span style="color:#E1E4E8;">&gt; userRoomRelations;</span></span>
<span class="line"><span style="color:#E1E4E8;">...}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">UserRoomRelation</span><span style="color:#24292E;">&gt; userRoomRelations;</span></span>
<span class="line"><span style="color:#24292E;">....}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Room 变化如下：</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Room</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;room&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">UserRoomRelation</span><span style="color:#24292E;">&gt; userRoomRelations;</span></span>
<span class="line"><span style="color:#24292E;">...}</span></span></code></pre></div><p>到这里我们再看一下 JUnit 运行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user_room_relation</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, create_time timestamp, udpate_time timestamp, room_id bigint, user_id bigint, primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">room</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, title </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, email </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), name </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), sex </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user_room_relation</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, create_time timestamp, udpate_time timestamp, room_id bigint, user_id bigint, primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">room</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, title </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, email </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), name </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), sex </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))</span></span></code></pre></div><p>可以看到，上面我们依然创建了三张表，唯一不同的是 user_room_relation 里面多了很多字段，而外键索引也是如约创建，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table user_room_relation add constraint FKaesy2rg60vtaxxv73urprbuwb foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (room_id) references room</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> alter table user_room_relation add constraint FK45gha85x63026r8q8hs03uhwm foreign </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (user_id) references user</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table user_room_relation add constraint FKaesy2rg60vtaxxv73urprbuwb foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (room_id) references room</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> alter table user_room_relation add constraint FK45gha85x63026r8q8hs03uhwm foreign </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (user_id) references user</span></span></code></pre></div><p>好了，跑一下测试是不是就很容易理解了。下面我总结了关于 @ManyToMany 的最佳实践和你分享。</p><h4 id="manytomany-的最佳实践" tabindex="-1">@ManyToMany 的最佳实践 <a class="header-anchor" href="#manytomany-的最佳实践" aria-label="Permalink to &quot;@ManyToMany 的最佳实践&quot;">​</a></h4><ol><li><p>上面我们介绍的 @OneToMany 的最佳实践同样适用，我为了说明方便，采用的是双向关联，而实际生产一般是在中间表对象里面做单向关联，这样会让实体之间的关联关系简单很多。</p></li><li><p>与 @OneToMany 一样的道理，不要用级联删除和 orphanRemoval=true。</p></li><li><p>FetchType 采用默认方式：fetch = FetchType.LAZY 的方式。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过本课时内容，我们基本上能理解 @OneToOne、@ManyToOne、@OneToMany、@ManyToMany 分别表示的是什么关联关系，各自解决的应用场景是什么，以及生产中我们推荐的最佳实践是什么。我们所说的&quot;如何才算正确使用&quot;，重点是要将原理和解决的场景理解透彻，参考最佳实践，做出符合自己业务场景的最好办法。</p><p>其实细心的同学还会看出我分享的学习思路，即看协议规定、看源码，然后实际动手写个最小环境进行测试，一看就明白是怎么回事了。在这节课中还涉及了 N+1SQL 的问题，我们在第 25 课时将会详细介绍。</p><p>此处给你留一道作业题：仔细去查一下 @OrderColumn 和 @OrderBy 这两个注解是干什么用的，他们的最佳实践是什么？</p><p>点击下方链接查看源码（不定时更新）<a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p>`,39);function d(u,A,C,g,D,v){const a=o("Image");return e(),t("div",null,[c,n(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/59/95/Ciqc1F9xtZeAOQV4AACTEuTNOao100.png"}),l(),E,n(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/59/A0/CgqCHl9xtbmAP4vcAAEKnyVM6Ig708.png"}),l(),y,n(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/59/A1/CgqCHl9xthOAHALuAAFaT_9YXuM848.png"}),l(),i,n(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/59/96/Ciqc1F9xt6qADqg2AAHww7pd2q4555.png"}),l(),F])}const b=p(r,[["render",d]]);export{h as __pageData,b as default};
