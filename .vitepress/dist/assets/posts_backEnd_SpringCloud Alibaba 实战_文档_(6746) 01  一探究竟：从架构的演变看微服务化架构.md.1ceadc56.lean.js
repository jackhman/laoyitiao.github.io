import{_ as o,D as a,o as i,g as n,J as _,h as l,Q as p,m as t}from"./chunks/framework.f67d7268.js";const j=JSON.parse('{"title":"01一探究竟：从架构的演变看微服务化架构","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6746) 01  一探究竟：从架构的演变看微服务化架构.md","filePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6746) 01  一探究竟：从架构的演变看微服务化架构.md","lastUpdated":1696682708000}'),e={name:"posts/backEnd/SpringCloud Alibaba 实战_文档/(6746) 01  一探究竟：从架构的演变看微服务化架构.md"},c=p("",10),r=p("",6),h=t("p",null,"强一致性的跨进程通信方式",-1),g=t("p",null,[t("strong",null,"其次，是系统的内部复杂度对外暴露。"),l(" 假如信审系统目前需要访问贷后系统，贷后系统为了高可用的要求，提供了 IP 为 10 和 11 的两个节点，作为信审系统客户端持有了这两个静态的 IP 地址。但随着业务的发展，贷后系统的负载越来越大，此时作为贷后系统集群加入了额外的两个节点，它们分别是 12 和 13。如何通知信审系统额外扩展这两个新加入的节点呢？因为在原始并没有设计这样的动态扩展的机制，所以我们必须手动配置信审系统的 IP 列表，以及重启应用才可以做到。这就相当于信审系统必须了解贷后系统每一台服务器的实际运行情况，这显然就增加了两个系统之间的耦合，提高了项目维护的难度。")],-1),u=t("p",null,"缺少动态发现机制",-1),d=t("p",null,[t("strong",null,"第三，系统间的调用关系复杂。"),l(" 假设我们有 6 个不同的应用，如果没有提前规划，软件工程师想梳理清系统间的调用关系会非常困难。这里我们急需一种技术帮助我们梳理清系统间的调用关系。")],-1),A=t("p",null,"难以梳理的调用关系",-1),m=t("p",null,[t("strong",null,"第四，过度的重复建设。"),l(" 在公司进行项目开发时，因为是每一个团队负责独立的系统，而这些系统往往需要一些通用的底层设施。例如：用户认证与权限控制、黑名单白名单、流量控制与系统异常的处理以及系统参数的配置管理等模块。而这些模块在每一个子系统中都要重复的进行开发，这显然是一件费时费力的事情，不利于数据的集中管理。")],-1),T=t("p",null,[t("strong",null,'第五，"大一统"的架构设计。'),l(" 所谓大一统架构设计，是指很多公司希望采用一套统一的架构来适应公司各个不同职能的子系统。比如，之前所有的系统是将数据统一存放在性能强大的 Oracle 数据库集群中。但这里有一个弊端，作为借款人门户系统，需要对用户开放大量的全文检索。如果你对数据检索技术有了解，会明白Oracle这种关系型数据库并不擅长全文检索功能，实际应交给Elasticsearch全文检索引擎进行处理。")],-1),P=t("p",null,"对于借款人门户网站的需求，需要额外引入 Elasticsearch 集群。因为新的集群是借款人门户网站专用的，所以理应由借款人门户的团队来独立管理与维护。此时你会发现，Elasticsearch对于其他的子系统是没有意义的，但因为大一统的架构设计约束，其他系统也必须要支持 Elasticsearch，这显然是不合理的。",-1),C=p("",8),b=t("p",null,"微服务架构",-1),S=t("p",null,"我们将原有的各个子系统中的核心的服务进行了抽象形成服务层，而在服务层中又可以按照是否与业务相关，分为业务服务层和基础服务层。",-1),O=t("p",null,"其中业务服务层是原有各个子系统中抽象出来的可以被充分重用的服务模块，原有借款人门户中普惠金融的业务逻辑可以剥离为普惠金融服务，同时由专门的团队对其进行维护。作为服务，它有着独立的 Oracle 数据库进行存储，相类似的贷后催收也都有相应的服务来进行支撑，拥有独立的团队以及独立的数据存储。",-1),E=t("p",null,"而在最下方的基础服务层，则是抽象出一个与业务无关的底层的基础设施。例如数据同步服务、配置中心服务、全文检索服务它都是面向所有服务对外暴露的。",-1),W=t("p",null,"以上就是改造后的微服务架构。那么，分布式系统传统的问题是如何通过微服务架构解决的，咱们分别来看。",-1),f=t("p",null,"首先，微服务架构提供了轻松而统一的进程间通信标准。以信审与贷后系统的通信为例，之前采用 WebService，要求客户端和服务端必须持有相同的通信对象。在改为 RESTful 通信后，RESTful 是基于 HTTP 协议的轻量级通信方式。它并不强制要求客户端一定持有通信对象，可以使用 Java 中的 HttpClient或者 OkHttp 组件，发起标准的 HTTP 请求就可以通信，返回的数据也是标准的 JSON 结构。对于这样的通信形式，在我们实际使用时，如果单纯由服务端进行了响应数据的扩展，在后续通信时是并不强制要求调用端必须对代码进行升级，服务端与调用端是彼此兼容的。",-1),I=t("p",null,"RESTful 消息通信",-1),q=t("p",null,"其次，屏蔽分布式应用的应用复杂度，假设贷后服务额外增加了两个节点，对于微服务架构来说，它有一个关键组件名为注册中心，下面是具体的执行顺序：",-1),N=t("ol",null,[t("li",null,[t("p",null,"信审服务和贷后服务，它在启动时会将服务可用的节点的 IP 以及相应状态在注册中心中进行登记。")]),t("li",null,[t("p",null,"当信审服务向贷后服务发起调用通知之前，首先信审服务从注册中心中获取贷后服务可用的 IP 列表。")]),t("li",null,[t("p",null,"信审服务根据某种负载均衡规则，向具体的节点发起 HTTP 请求来完成业务的处理。")])],-1),k=t("p",null,"因为所有的 IP 地址以及节点的状态都是由注册中心来维护的，所以信审服务作为使用者，是不需要了解贷后服务有具体哪些节点的。这就有效地降低了分布式应用之间的耦合，提高了程序的可维护性。",-1),V=t("p",null,'基于"注册中心"的动态发现机制',-1),x=t("p",null,"第三，内建链路跟踪体系。在传统的分布式应用中，要梳理服务间的调用关系，实际是一件很烦琐的事情。到了微服务体系下，这个问题就很好解决。因为微服务标准中提供了链路跟踪的技术实现。以当前为例，有三个服务 A、B、C，如图所示，ABC 三个服务之间的调用顺序以及调用时长一目了然。通过可视化的形式，可以直观了解服务间的通信过程以及通信的状态，帮助我们对程序进行进一步的管理。",-1),F=t("p",null,"内建链路跟踪体系",-1),D=t("p",null,"第四，是减少重复建设，基础数据管理更加集中。在微服务体系中，这里有一个用户认证中心的服务，其本意在前端应用实际发起请求前，对用户的身份和权限来进行判断。不同系统用户认证的过程都是类似的，我们把它抽象出一个通用的用户认证中心，这样做不但可以减少每一个子系统的重复建设，还可以将用户这个信息来进行集中的统一存储。",-1),H=t("p",null,"第五，更有弹性的架构设计。假如借款人门户需要全文检索的支持，那么与之对应的普惠金融服务中，便可以为其专门增加 Elasticsearch 来进行支持。对于某一个服务加入新的特性，并不影响其他服务的运行。",-1),M=t("p",null,'"专物专用"的弹性架构',-1),R=t("p",null,'之后随着业务的不断演化，其他服务假如也需要 Elasticsearch 全文检索的话，这时我们便可以进行进一步抽象。剥离出"全文检索服务"基础服务，来为其他服务提供支撑。因为在微服务架构中，我们采用了统一的标准来进行开发，所以它的升级改造工作难度比较小。',-1),v=p("",8);function J(L,B,U,$,w,X){const s=a("Image");return i(),n("div",null,[c,_(s,{alt:"图1.png",src:"https://s0.lgstatic.com/i/image6/M01/10/F9/Cgp9HWA_OW-AZJbhAAGZWbtCuSQ943.png"}),l(),r,_(s,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/10/F4/CioPOWA_N2OAc95sAACj_UNwcrw681.png"}),l(),h,g,_(s,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/10/F8/Cgp9HWA_N3SATerXAADi8b-0LtA082.png"}),l(),u,d,_(s,{alt:"图片44.png",src:"https://s0.lgstatic.com/i/image6/M01/10/F9/Cgp9HWA_OTuAT5ihAAHZoAL3Uxk197.png"}),l(),A,m,T,P,_(s,{alt:"图片55.png",src:"https://s0.lgstatic.com/i/image6/M01/10/F6/CioPOWA_OemAcGCOAAI92RtDt9A848.png"}),l(),C,_(s,{alt:"图片66.png",src:"https://s0.lgstatic.com/i/image6/M01/10/F6/CioPOWA_Oi2AJ7oiAAL95Nq2PtE806.png"}),l(),b,S,O,E,W,f,_(s,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image6/M01/10/F8/Cgp9HWA_ODyAV1VUAABaLpR_z64885.png"}),l(),I,q,N,k,_(s,{alt:"图片8.png",src:"https://s0.lgstatic.com/i/image6/M00/10/F5/CioPOWA_OEuAcWRPAADA0Dabxj4550.png"}),l(),V,x,_(s,{alt:"图片99.png",src:"https://s0.lgstatic.com/i/image6/M01/10/F5/CioPOWA_OJuAKPe5AAXrNxdJPCw112.png"}),l(),F,D,H,_(s,{alt:"图片1010.png",src:"https://s0.lgstatic.com/i/image6/M01/10/F5/CioPOWA_OOuAWpniAALL5r1FvmE743.png"}),l(),M,R,_(s,{alt:"图片1111.png",src:"https://s0.lgstatic.com/i/image6/M01/10/F9/Cgp9HWA_OPiAcNzeAAL1emX2qEE826.png"}),l(),v])}const z=o(e,[["render",J]]);export{j as __pageData,z as default};
