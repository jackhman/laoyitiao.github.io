import{_ as l,j as t,o as e,g as c,k as o,s,h as n,Q as p}from"./chunks/framework.4e7d56ce.js";const Z=JSON.parse('{"title":"进化的生命周期方法：React 16 生命周期工作流详解 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/046_深入浅出搞定 React/(4852) 03  为什么 React 16 要更改组件的生命周期？（下）.md","filePath":"posts/frontEnd/046_深入浅出搞定 React/(4852) 03  为什么 React 16 要更改组件的生命周期？（下）.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/046_深入浅出搞定 React/(4852) 03  为什么 React 16 要更改组件的生命周期？（下）.md"},E=s("p",null,'通过对上一个课时的学习，你已经对 React 15 的生命周期有了系统的掌握和理解。本课时，我将在此基础上，对 React 16 以来的生命周期进行剖析。在理解"是什么"的基础上，我将带你对比新旧两个版本生命周期之间的差异，并探寻变化背后的原因。',-1),y=s("p",null,'通过本课时的学习，你将明白 React 团队"动作频频"背后的思量与野心，同时也将对时下大热的 Fiber 架构形成初步的认知。',-1),i=s("h3",{id:"进化的生命周期方法-react-16-生命周期工作流详解",tabindex:"-1"},[n("进化的生命周期方法：React 16 生命周期工作流详解 "),s("a",{class:"header-anchor",href:"#进化的生命周期方法-react-16-生命周期工作流详解","aria-label":'Permalink to "进化的生命周期方法：React 16 生命周期工作流详解"'},"​")],-1),u=s("p",null,[n("关于 React 16 以来的生命周期，"),s("a",{href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"_blank",rel:"noreferrer"},"这个民间开源项目"),n("为我们提供了目前公认的比较优秀的流程大图（在下不才，自己动手画了半天仍然自觉无法超越下图，所以这里就直接引用过来辅助讲解）。我们先来看 React 16.3 的大图：")],-1),g=p(`<p>这里之所以特意将版本号精确到了小数点后面一位，是因为在<strong>React 16.4</strong>之后，React 生命周期在之前版本的基础上又经历了一次微调。不过你先不用着急，在理解 16.3 生命周期的基础上，掌握这个&quot;微调&quot;对你来说将易如反掌。</p><p>接下来，我会先把上面这张 React 16.3 生命周期大图中所涉及的内容讲清楚，然后再对 16.4 的改动进行介绍。还是老规矩，这里我先提供一个 Demo，它将辅助你理解新的生命周期。Demo 代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ReactDOM </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 定义子组件</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LifeCycle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;进入constructor&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// state 可以在 constructor 里初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { text: </span><span style="color:#9ECBFF;">&quot;子组件的文本&quot;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化/更新时调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDerivedStateFromProps</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getDerivedStateFromProps方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fatherText: props.text</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化渲染时调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;componentDidMount方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件更新时调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">shouldComponentUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prevProps</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">nextState</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shouldComponentUpdate方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件更新时调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getSnapshotBeforeUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prevProps</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prevState</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getSnapshotBeforeUpdate方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;haha&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件更新后调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">componentDidUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">preProps</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">preState</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">valueFromSnapshot</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;componentDidUpdate方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;从 getSnapshotBeforeUpdate 获取到的值是&quot;</span><span style="color:#E1E4E8;">, valueFromSnapshot);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件卸载时调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">componentWillUnmount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;子组件的componentWillUnmount方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 点击按钮，修改子组件文本内容的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">changeText</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      text: </span><span style="color:#9ECBFF;">&quot;修改后的子组件文本&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;render方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;container&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.changeText} </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;changeText&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          修改子组件文本内容</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;textContent&quot;</span><span style="color:#E1E4E8;">&gt;{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.text}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;fatherContent&quot;</span><span style="color:#E1E4E8;">&gt;{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.text}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 定义 LifeCycle 组件的父组件</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LifeCycleContainer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// state 也可以像这样用属性声明的形式初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    text: </span><span style="color:#9ECBFF;">&quot;父组件的文本&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    hideChild: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 点击按钮，修改父组件文本的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">changeText</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      text: </span><span style="color:#9ECBFF;">&quot;修改后的父组件文本&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 点击按钮，隐藏（卸载）LifeCycle 组件的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hideChild</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      hideChild: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;fatherContainer&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.changeText} </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;changeText&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          修改父组件文本内容</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hideChild} </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hideChild&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          隐藏子组件</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.hideChild </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">LifeCycle</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">text</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.text} /&gt;}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">LifeCycleContainer</span><span style="color:#E1E4E8;"> /&gt;, document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ReactDOM </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 定义子组件</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LifeCycle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;进入constructor&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(props);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// state 可以在 constructor 里初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { text: </span><span style="color:#032F62;">&quot;子组件的文本&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化/更新时调用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDerivedStateFromProps</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">, </span><span style="color:#E36209;">state</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getDerivedStateFromProps方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      fatherText: props.text</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化渲染时调用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;componentDidMount方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件更新时调用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">shouldComponentUpdate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">prevProps</span><span style="color:#24292E;">, </span><span style="color:#E36209;">nextState</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shouldComponentUpdate方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件更新时调用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getSnapshotBeforeUpdate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">prevProps</span><span style="color:#24292E;">, </span><span style="color:#E36209;">prevState</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getSnapshotBeforeUpdate方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;haha&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件更新后调用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">componentDidUpdate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">preProps</span><span style="color:#24292E;">, </span><span style="color:#E36209;">preState</span><span style="color:#24292E;">, </span><span style="color:#E36209;">valueFromSnapshot</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;componentDidUpdate方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;从 getSnapshotBeforeUpdate 获取到的值是&quot;</span><span style="color:#24292E;">, valueFromSnapshot);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件卸载时调用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">componentWillUnmount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;子组件的componentWillUnmount方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 点击按钮，修改子组件文本内容的方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">changeText</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      text: </span><span style="color:#032F62;">&quot;修改后的子组件文本&quot;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;render方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;container&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.changeText} </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;changeText&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          修改子组件文本内容</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;textContent&quot;</span><span style="color:#24292E;">&gt;{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.text}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;fatherContent&quot;</span><span style="color:#24292E;">&gt;{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.text}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 定义 LifeCycle 组件的父组件</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LifeCycleContainer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// state 也可以像这样用属性声明的形式初始化</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    text: </span><span style="color:#032F62;">&quot;父组件的文本&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    hideChild: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 点击按钮，修改父组件文本的方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">changeText</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      text: </span><span style="color:#032F62;">&quot;修改后的父组件文本&quot;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 点击按钮，隐藏（卸载）LifeCycle 组件的方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hideChild</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      hideChild: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;fatherContainer&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.changeText} </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;changeText&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          修改父组件文本内容</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hideChild} </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hideChild&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          隐藏子组件</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.hideChild </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">LifeCycle</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">text</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.text} /&gt;}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(&lt;</span><span style="color:#005CC5;">LifeCycleContainer</span><span style="color:#24292E;"> /&gt;, document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>React 16 以来的生命周期也可以按照&quot;挂载&quot;&quot;更新&quot;和&quot;卸载&quot;三个阶段来看，所以接下来我们要做的事情仍然是分阶段拆解工作流程。在这个过程中，我将把 React 16 新增的生命周期方法，以及流程上相对于 React 15 产生的一些差异，作为我们学习的重点。对于和 React 15 保持一致的部分，这里不再重复讲解。</p><h4 id="mounting-阶段-组件的初始化渲染-挂载" tabindex="-1">Mounting 阶段：组件的初始化渲染（挂载） <a class="header-anchor" href="#mounting-阶段-组件的初始化渲染-挂载" aria-label="Permalink to &quot;Mounting 阶段：组件的初始化渲染（挂载）&quot;">​</a></h4><p>为了凸显 16 和 15 两个版本生命周期之间的差异，我将两个流程绘制到了同一张大图里，请看下面这张图：</p>`,6),F=s("p",null,"你现在可以打开开篇我给出的 Demo，将你的 React 版本更新到 16.3，然后运行这个项目，你就可以在控制台看到新的生命周期执行过程了。控制台的输出如图所示：",-1),d=p('<h5 id="消失的-componentwillmount-新增的-getderivedstatefromprops" tabindex="-1">消失的 componentWillMount，新增的 getDerivedStateFromProps <a class="header-anchor" href="#消失的-componentwillmount-新增的-getderivedstatefromprops" aria-label="Permalink to &quot;消失的 componentWillMount，新增的 getDerivedStateFromProps&quot;">​</a></h5><p>从上图中不难看出，React 15 生命周期和 React 16.3 生命周期在挂载阶段的主要差异在于，<strong>废弃了 componentWillMount，新增了 getDerivedStateFromProps</strong>。</p><blockquote><p>注：细心的你可能记得，React 16 对 render 方法也进行了一些改进。React 16 之前，render方法必须返回单个元素，而 React 16 允许我们返回元素数组和字符串。但本课时我们更加侧重讨论的是生命周期升级过程中的&quot;主要矛盾&quot;，也就是&quot;工作流&quot;层面的改变，故对现有方法的迭代细节，以及不在主要工作流里的<a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidcatch" target="_blank" rel="noreferrer">componentDidCatch</a> 等生命周期不再予以赘述。</p></blockquote><p>一些同学在初次发现这个改变的时候，倾向于认为是 React 16.3 在试图用 getDerivedStateFromProps代替componentWillMount，这种想法是不严谨的。</p><h5 id="getderivedstatefromprops-不是-componentwillmount-的替代品" tabindex="-1">getDerivedStateFromProps 不是 componentWillMount 的替代品 <a class="header-anchor" href="#getderivedstatefromprops-不是-componentwillmount-的替代品" aria-label="Permalink to &quot;getDerivedStateFromProps 不是 componentWillMount 的替代品&quot;">​</a></h5><p>事实上，<strong>componentWillMount 的存在不仅&quot;鸡肋&quot;而且危险，因此它并不值得被&quot;代替&quot;，它就应该被废弃。</strong> 为了证明这点，我将在本文后续的&quot;透过现象看本质&quot;环节为大家细数 componentWillMount 的几宗&quot;罪&quot;。</p><p>而 getDerivedStateFromProps 这个 API，其设计的初衷不是试图替换掉 <strong>componentWillMount</strong> ，而是试图替换掉 <strong>componentWillReceiveProps</strong> ，因此它有且仅有一个用途：<strong>使用 props 来派生/更新 state</strong>。</p><p>React 团队为了确保 getDerivedStateFromProps 这个生命周期的纯洁性，直接从命名层面约束了它的用途（getDerivedStateFromProps 直译过来就是&quot;从 Props 里派生 State&quot;）。所以，如果你不是出于这个目的来使用 getDerivedStateFromProps，原则上来说都是不符合规范的。</p><p>值得一提的是，getDerivedStateFromProps 在更新和挂载两个阶段都会&quot;出镜&quot;（这点不同于仅在更新阶段出现的 componentWillReceiveProps）。这是因为&quot;派生 state&quot;这种诉求不仅在 props 更新时存在，<strong>在 props 初始化的时候也是存在的</strong>。React 16 以提供特定生命周期的形式，对这类诉求提供了更直接的支持。</p><p>由此看来，挂载阶段的生命周期改变，并不是一个简单的&quot;替换&quot;逻辑，而是一个雄心勃勃的&quot;进化&quot;逻辑。</p><h5 id="认识-getderivedstatefromprops" tabindex="-1">认识 getDerivedStateFromProps <a class="header-anchor" href="#认识-getderivedstatefromprops" aria-label="Permalink to &quot;认识 getDerivedStateFromProps&quot;">​</a></h5><p>这个新生命周期方法的调用规则如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDerivedStateFromProps</span><span style="color:#E1E4E8;">(props, state)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDerivedStateFromProps</span><span style="color:#24292E;">(props, state)</span></span></code></pre></div><p>在使用层面，你需要把握三个重点。</p><p>第一个重点是最特别的一点：<strong>getDerivedStateFromProps 是一个静态方法</strong> 。静态方法不依赖组件实例而存在，因此你在这个方法内部是<strong>访问不到 this</strong> 的。若你偏要尝试这样做，必定报错，报错形式如下图所示：</p>',15),h=s("p",null,"第二个重点，该方法可以接收两个参数：props 和 state，它们分别代表当前组件接收到的来自父组件的 props 和当前组件自身的 state。我们可以尝试在 Demo 中输出这两个参数看一看，输出效果如下图所示：",-1),m=s("p",null,"可以看出，挂载阶段输出的 props 正是初始化阶段父组件传进来的 this.props 对象；而 state 是 LifeCycle 组件自身的 state 对象。",-1),q=s("p",null,"第三个重点，getDerivedStateFromProps 需要一个对象格式的返回值。如果你没有指定这个返回值，那么大概率会被 React 警告一番，警告内容如下图所示：",-1),C=p(`<p><strong>getDerivedStateFromProps 的返回值之所以不可或缺，是因为 React 需要用这个返回值来更新（派生）组件的 state</strong>。因此当你确实不存在&quot;使用 props 派生 state &quot;这个需求的时候，最好是直接省略掉这个生命周期方法的编写，否则一定记得给它 return 一个 null。</p><p>注意，<strong>getDerivedStateFromProps 方法对 state 的更新动作并非&quot;覆盖&quot;式的更新</strong> ，<strong>而是针对某个属性的定向更新</strong>。比如这里我们在 getDerivedStateFromProps 里返回的是这样一个对象，对象里面有一个 fatherText 属性用于表示&quot;父组件赋予的文本&quot;：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fatherText</span><span style="color:#E1E4E8;">: props.text</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fatherText</span><span style="color:#24292E;">: props.text</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该对象并不会替换掉组件原始的这个 state：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { text</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;子组件的文本&quot;</span><span style="color:#E1E4E8;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { text</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;子组件的文本&quot;</span><span style="color:#24292E;"> };</span></span></code></pre></div><p>而是仅仅针对 fatherText 这个属性作更新（这里原有的 state 里没有 fatherText，因此直接新增）。更新后，原有属性与新属性是共存的，如下图所示：</p>`,6),D=s("h4",{id:"updating-阶段-组件的更新",tabindex:"-1"},[n("Updating 阶段：组件的更新 "),s("a",{class:"header-anchor",href:"#updating-阶段-组件的更新","aria-label":'Permalink to "Updating 阶段：组件的更新"'},"​")],-1),_=s("p",null,"React 15 与 React 16.3 的更新流程对比如下图所示：",-1),A=s("p",null,[n('注意，咱们前面提到 React 16.4 对生命周期流程进行了"微调"，其实就调在了更新过程的getDerivedStateFromProps 这个生命周期上。先来看一张 React 16.4+ 的生命周期大图（出处仍然是'),s("a",{href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"_blank",rel:"noreferrer"},"Wojciech Maj 的 react-lifecycle-methods-diagram"),n("）：")],-1),v=p(`<p>React 16.4 的挂载和卸载流程都是与 React 16.3 保持一致的，差异在于更新流程上：</p><ul><li><p>在 React 16.4 中，<strong>任何因素触发的组件更新流程</strong>（包括由 this.setState 和 forceUpdate 触发的更新流程）都会触发 getDerivedStateFromProps；</p></li><li><p>而在 v 16.3 版本时，<strong>只有父组件的更新</strong>会触发该生命周期。</p></li></ul><p>到这里，你已经对 getDerivedStateFromProps 相关的改变有了充分的了解。接下来，我们就基于这层了解，问出生命周期改变背后的第一个&quot;Why&quot;。</p><h5 id="改变背后的第一个-why-为什么要用-getderivedstatefromprops-代替-componentwillreceiveprops" tabindex="-1">改变背后的第一个&quot;Why&quot;：为什么要用 getDerivedStateFromProps 代替 componentWillReceiveProps？ <a class="header-anchor" href="#改变背后的第一个-why-为什么要用-getderivedstatefromprops-代替-componentwillreceiveprops" aria-label="Permalink to &quot;改变背后的第一个&quot;Why&quot;：为什么要用 getDerivedStateFromProps 代替 componentWillReceiveProps？&quot;">​</a></h5><p>对于 getDerivedStateFromProps 这个 API，React 官方曾经给出过这样的描述：</p><blockquote><p>与 componentDidUpdate 一起，这个新的生命周期涵盖过时componentWillReceiveProps 的所有用例。</p></blockquote><p>在这里，请你细细品味这句话，这句话里蕴含了下面两个关键信息：</p><ul><li><p>getDerivedStateFromProps 是作为一个<strong>试图代替 componentWillReceiveProps</strong> 的 API 而出现的；</p></li><li><p>getDerivedStateFromProps<strong>不能完全和 componentWillReceiveProps 画等号</strong>，其特性决定了我们曾经在 componentWillReceiveProps 里面做的事情，不能够百分百迁移到getDerivedStateFromProps 里。</p></li></ul><p>接下来我们就展开说说这两点。</p><ul><li><p>关于 getDerivedStateFromProps 是如何代替componentWillReceiveProps 的，在&quot;挂载&quot;环节已经讨论过：getDerivedStateFromProps 可以代替 componentWillReceiveProps 实现<strong>基于 props 派生 state</strong>。</p></li><li><p>至于它为何不能完全和 componentWillReceiveProps 画等号，则是因为它过于&quot;专注&quot;了。这一点，单单从getDerivedStateFromProps 这个 API 名字上也能够略窥一二。原则上来说，它能做且只能做这一件事。</p></li></ul><p>乍一看，原来的 API 能做的事情更多，现在的 API 却限制重重，难道是 React 16 的生命周期方法&quot;退化&quot;了？</p><p>当然不是。如果你对设计模式有所了解的话，就会知道，<strong>一个 API 并非越庞大越复杂才越优秀</strong>。或者说得更直接一点，庞大和复杂的 API 往往会带来维护层面的&quot;灾难&quot;。</p><p>说回 getDerivedStateFromProps 这个 API，它相对于早期的 componentWillReceiveProps 来说，正是做了&quot;<strong>合理的减法</strong>&quot;。而做这个减法的决心之强烈，从 getDerivedStateFromProps 直接被定义为 static 方法这件事上就可见一斑------ static 方法内部拿不到组件实例的 this，这就导致你无法在 getDerivedStateFromProps 里面做任何类似于 this.fetch()、不合理的 this.setState（会导致死循环的那种）这类可能会产生副作用的操作。</p><p>因此，getDerivedStateFromProps 生命周期替代 componentWillReceiveProps 的背后，<strong>是 React 16 在强制推行&quot;只用 getDerivedStateFromProps 来完成 props 到 state 的映射&quot;这一最佳实践</strong>。意在确保生命周期函数的行为更加可控可预测，从根源上帮开发者避免不合理的编程方式，避免生命周期的滥用；同时，也是在为新的 Fiber 架构铺路。</p><p>到这里，相信你已经对 getDerivedStateFromProps 吃得透透的了。至于什么是 Fiber 架构，这条路该怎么铺，你将在本课时后续的内容中找到答案。现在，我们得回到&quot;更新&quot;这条工作流里来，一起去看看getSnapshotBeforeUpdate 是怎么一回事儿。</p><h5 id="消失的-componentwillupdate-与新增的-getsnapshotbeforeupdate" tabindex="-1">消失的 componentWillUpdate 与新增的 getSnapshotBeforeUpdate <a class="header-anchor" href="#消失的-componentwillupdate-与新增的-getsnapshotbeforeupdate" aria-label="Permalink to &quot;消失的 componentWillUpdate 与新增的 getSnapshotBeforeUpdate&quot;">​</a></h5><p>咱们先来看看 getSnapshotBeforeUpdate 是什么：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getSnapshotBeforeUpdate</span><span style="color:#E1E4E8;">(prevProps, prevState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getSnapshotBeforeUpdate</span><span style="color:#24292E;">(prevProps, prevState) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个方法和 getDerivedStateFromProps 颇有几分神似，它们都强调了&quot;我需要一个返回值&quot;这回事。区别在于 <strong>getSnapshotBeforeUpdate 的返回值会作为第三个参数给到 componentDidUpdate</strong> 。<strong>它的执行时机是在 render 方法之后，真实 DOM 更新之前</strong> 。在这个阶段里，我们可以<strong>同时获取到更新前的真实 DOM 和更新前后的 state&amp;props 信息</strong>。</p><p>尽管在实际工作中，需要用到这么多信息的场景并不多，但在对于实现一些特殊的需求来说，没它还真的挺难办。这里我举一个非常有代表性的例子：实现一个内容会发生变化的滚动列表，要求根据滚动列表的内容是否发生变化，来决定是否要记录滚动条的当前位置。</p><p>这个需求的前半截要求我们对比更新前后的数据（感知变化），后半截则需要获取真实的 DOM 信息（获取位置），这时用 getSnapshotBeforeUpdate 来解决就再合适不过了。</p><p>对于这个生命周期，需要重点把握的是它与 componentDidUpdate 间的通信过程。在 Demo 中我给出了一个使用示例，它将帮助你更加具体地认知这个过程。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 组件更新时调用</span></span>
<span class="line"><span style="color:#B392F0;">getSnapshotBeforeUpdate</span><span style="color:#E1E4E8;">(prevProps, prevState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getSnapshotBeforeUpdate方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;haha&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 组件更新后调用</span></span>
<span class="line"><span style="color:#B392F0;">componentDidUpdate</span><span style="color:#E1E4E8;">(prevProps, prevState, valueFromSnapshot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;componentDidUpdate方法执行&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;从 getSnapshotBeforeUpdate 获取到的值是&quot;</span><span style="color:#E1E4E8;">, valueFromSnapshot);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 组件更新时调用</span></span>
<span class="line"><span style="color:#6F42C1;">getSnapshotBeforeUpdate</span><span style="color:#24292E;">(prevProps, prevState) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getSnapshotBeforeUpdate方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;haha&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 组件更新后调用</span></span>
<span class="line"><span style="color:#6F42C1;">componentDidUpdate</span><span style="color:#24292E;">(prevProps, prevState, valueFromSnapshot) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;componentDidUpdate方法执行&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;从 getSnapshotBeforeUpdate 获取到的值是&quot;</span><span style="color:#24292E;">, valueFromSnapshot);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在我们点击 Demo 界面上&quot;修改子组件文本内容&quot;按钮，就可以看到这两个生命周期的通信效果，如下图所示：</p>`,24),B=s("p",null,[n('值得一提的是，这个生命周期的设计初衷，是为了"与 componentDidUpdate 一起，涵盖过时的 componentWillUpdate 的所有用例"（引用自 React 官网）。'),s("strong",null,"getSnapshotBeforeUpdate 要想发挥作用，离不开 componentDidUpdate 的配合"),n("。")],-1),S=s("p",null,[n("那么换个角度想想，"),s("strong",null,"为什么 componentWillUpdate 就非死不可呢"),n('？说到底，还是因为它"挡了 Fiber 的路"。各位莫慌，咱们离真相越来越近了~')],-1),P=s("h4",{id:"unmounting-阶段-组件的卸载",tabindex:"-1"},[n("Unmounting 阶段：组件的卸载 "),s("a",{class:"header-anchor",href:"#unmounting-阶段-组件的卸载","aria-label":'Permalink to "Unmounting 阶段：组件的卸载"'},"​")],-1),f=s("p",null,"我们先继续把完整的生命周期流程走完，以下是组件卸载阶段的示意图：",-1),b=s("p",null,"卸载阶段的生命周期与 React 15 完全一致，只涉及 componentWillUnmount 这一个生命周期，此处不再重复讲解。",-1),R=s("p",null,'接下来，就让一切变化背后的"始作俑者" Fiber 架构来和大家打个招呼吧！',-1),x=s("h3",{id:"透过现象看本质-react-16-缘何两次求变",tabindex:"-1"},[n("透过现象看本质：React 16 缘何两次求变？ "),s("a",{class:"header-anchor",href:"#透过现象看本质-react-16-缘何两次求变","aria-label":'Permalink to "透过现象看本质：React 16 缘何两次求变？"'},"​")],-1),U=s("h5",{id:"fiber-架构简析",tabindex:"-1"},[n("Fiber 架构简析 "),s("a",{class:"header-anchor",href:"#fiber-架构简析","aria-label":'Permalink to "Fiber 架构简析"'},"​")],-1),k=s("p",null,[n('Fiber 是 React 16 对 React 核心算法的一次重写。关于 Fiber，我将在"模块二：核心原理"花大量的篇幅来介绍它的原理和细节。在本课时，你只需要 get 到这一个点：'),s("strong",null,"Fiber 会使原本同步的渲染过程变成异步的"),n("。")],-1),T=s("p",null,"在 React 16 之前，每当我们触发一次组件的更新，React 都会构建一棵新的虚拟 DOM 树，通过与上一次的虚拟 DOM 树进行 diff，实现对 DOM 的定向更新。这个过程，是一个递归的过程。下面这张图形象地展示了这个过程的特征：",-1),M=p("<p>如图所示，<strong>同步渲染的递归调用栈是非常深的</strong> ，只有最底层的调用返回了，整个渲染过程才会开始逐层返回。<strong>这个漫长且不可打断的更新过程，将会带来用户体验层面的巨大风险：<strong>同步渲染一旦开始，便会牢牢抓住主线程不放，直到递归彻底完成。在这个过程中，浏览器没有办法处理任何渲染之外的事情，会进入一种</strong>无法处理用户交互</strong>的状态。因此若渲染时间稍微长一点，页面就会面临卡顿甚至卡死的风险。</p><p>而 React 16 引入的 Fiber 架构，恰好能够解决掉这个风险：<strong>Fiber 会将一个大的更新任务拆解为许多个小任务</strong> 。每当执行完一个小任务时，<strong>渲染线程都会把主线程交回去</strong> ，看看有没有优先级更高的工作要处理，确保不会出现其他任务被&quot;饿死&quot;的情况，进而避免同步渲染带来的卡顿。在这个过程中，<strong>渲染线程不再&quot;一去不回头&quot;，而是可以被打断的</strong>，这就是所谓的&quot;异步渲染&quot;，它的执行过程如下图所示：</p>",2),W=s("p",null,'如果你初学 Fiber，对上面的两段描述感到陌生或者说"吃不透"，这都是正常的。在本课时，你大可不必如此苛求自己，只需对"同步渲染"和"异步渲染"这两个概念有一个大致的印象，同时把握住 Fiber 架构下"任务拆解"和"可打断"这两个特性即可。接下来，我们继续往下走，看看"同步"变"异步"这个过程，是如何对生命周期构成影响的。',-1),I=s("h5",{id:"换个角度看生命周期工作流",tabindex:"-1"},[n("换个角度看生命周期工作流 "),s("a",{class:"header-anchor",href:"#换个角度看生命周期工作流","aria-label":'Permalink to "换个角度看生命周期工作流"'},"​")],-1),V=s("p",null,[n("Fiber 架构的重要特征就是"),s("strong",null,"可以被打断的"),n(' 异步渲染模式。但这个"打断"是有原则的，根据"'),s("strong",null,"能否被打断"),n('"这一标准，React 16 的生命周期被划分为了 render 和 commit 两个阶段，而 commit 阶段又被细分为了 pre-commit 和 commit。每个阶段所涵盖的生命周期如下图所示：')],-1),w=p('<p>我们先来看下三个阶段各自有哪些特征（以下特征翻译自上图）。</p><ul><li><p>render 阶段：纯净且没有副作用，可能会被 React 暂停、终止或重新启动。</p></li><li><p>pre-commit 阶段：可以读取 DOM。</p></li><li><p>commit 阶段：可以使用 DOM，运行副作用，安排更新。</p></li></ul><p><strong>总的来说，render 阶段在执行过程中允许被打断，而 commit 阶段则总是同步执行的。</strong></p><p>为什么这样设计呢？简单来说，由于 render 阶段的操作对用户来说其实是&quot;不可见&quot;的，所以就算打断再重启，对用户来说也是零感知。而 commit 阶段的操作则涉及真实 DOM 的渲染，再狂的框架也不敢在用户眼皮子底下胡乱更改视图，所以这个过程必须用同步渲染来求稳。</p><h5 id="细说生命周期-废旧立新-背后的思考" tabindex="-1">细说生命周期&quot;废旧立新&quot;背后的思考 <a class="header-anchor" href="#细说生命周期-废旧立新-背后的思考" aria-label="Permalink to &quot;细说生命周期&quot;废旧立新&quot;背后的思考&quot;">​</a></h5><p>在 Fiber 机制下，<strong>render 阶段是允许暂停、终止和重启的</strong> 。当一个任务执行到一半被打断后，下一次渲染线程抢回主动权时，这个任务被重启的形式是&quot;重复执行一遍整个任务&quot;而非&quot;接着上次执行到的那行代码往下走&quot;。<strong>这就导致 render 阶段的生命周期都是有可能被重复执行的</strong>。</p><p>带着这个结论，我们再来看看 React 16 打算废弃的是哪些生命周期：</p><ul><li><p>componentWillMount；</p></li><li><p>componentWillUpdate；</p></li><li><p>componentWillReceiveProps。</p></li></ul><p>这些生命周期的共性，<strong>就是它们都处于 render 阶段，都可能重复被执行</strong>，而且由于这些 API 常年被滥用，它们在重复执行的过程中都存在着不可小觑的风险。</p><p>别的不说，说说我自己在团队 code review 中见过的&quot;骚操作&quot;吧。在&quot;componentWill&quot;开头的生命周期里，你习惯于做的事情可能包括但不限于:</p><ul><li><p>setState()；</p></li><li><p>fetch 发起异步请求；</p></li><li><p>操作真实 DOM。</p></li></ul><p>这些操作的问题（或不必要性）包括但不限于以下 3 点：</p><p><strong>（1）完全可以转移到其他生命周期（尤其是 componentDidxxx）里去做</strong>。</p><p>比如在 componentWillMount 里发起异步请求。很多同学因为太年轻，以为这样做就可以让异步请求回来得&quot;早一点&quot;，从而避免首次渲染白屏。</p><p>可惜你忘了，异步请求再怎么快也快不过（React 15 下）同步的生命周期。componentWillMount 结束后，render 会迅速地被触发，所以说<strong>首次渲染依然会在数据返回之前执行</strong>。这样做不仅没有达到你预想的目的，还会导致服务端渲染场景下的冗余请求等额外问题，得不偿失。</p><p><strong>（2）在 Fiber 带来的异步渲染机制下，可能会导致非常严重的 Bug</strong>。</p><p>试想，假如你在 componentWillxxx 里发起了一个付款请求。由于 render 阶段里的生命周期都可以重复执行，在 componentWillxxx 被<strong>打断 + 重启多次</strong>后，就会发出多个付款请求。</p><p>比如说，这件商品单价只要 10 块钱，用户也只点击了一次付款。但实际却可能因为 componentWillxxx 被<strong>打断 + 重启多次</strong>而多次调用付款接口，最终付了 50 块钱；又或者你可能会习惯在 componentWillReceiveProps 里操作 DOM（比如说删除符合某个特征的元素），那么 componentWillReceiveProps 若是执行了两次，你可能就会一口气删掉两个符合该特征的元素。</p><p>结合上面的分析，我们再去思考 getDerivedStateFromProps 为何会在设计层面直接被约束为一个触碰不到 this 的静态方法，其背后的原因也就更加充分了------避免开发者触碰 this，就是在避免各种危险的骚操作。</p><p><strong>（3）即使你没有开启异步，React 15 下也有不少人能把自己&quot;玩死&quot;。</strong></p><p>比如在 componentWillReceiveProps 和 componentWillUpdate 里滥用 setState 导致重复渲染死循环的，大家都懂哈（邪魅一笑）。</p><p>总的来说，<strong>React 16 改造生命周期的主要动机是为了配合 Fiber 架构带来的异步渲染机制</strong> 。在这个改造的过程中，React 团队精益求精，<strong>针对生命周期中长期被滥用的部分推行了具有强制性的最佳实践</strong> 。这一系列的工作做下来，首先是<strong>确保了 Fiber 机制下数据和视图的安全性</strong> ，同时也<strong>确保了生命周期方法的行为更加纯粹、可控、可预测</strong>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过 02 和 03 两个课时的学习，大家已经对 React 15、16 两个版本的生命周期有了深入的掌握，同时对 React 生命周期的一系列的变化以及其背后的原因都有了深刻而健全的理解。</p><p>生命周期看似简单，但要想真正吃透，竟然需要挑战这么长的一个知识链路，实在不简单！在使用 React 进行项目开发的 5 年里，我曾不止一次地为各路合作伙伴在生命周期里&quot;为所欲为&quot;而感到痛苦，也曾不止一次地为 React 基础知识结构摇摇欲坠的候选人感到可惜。若你能够耐下心来彻底消化掉这两个课时，相信这世上定能多出一个靠谱的前端！</p><p>话说回来，现有的生命周期，虽然已经对方法的最佳实践做了强约束，但是仍然无法覆盖所有的&quot;误操作&quot;，其中最为典型的，就是对 getDerivedStateFromProps 的滥用。关于这点，社区的讨论不是很多，但是 <a href="https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html" target="_blank" rel="noreferrer">React 团队给出的这篇文章</a>就帮助大家规避&quot;误操作&quot;来说是绰绰有余的。</p><p>经过了漫长的两个课时的学习，我们终于征服了生命周期这座小山包。一个组件的一生如何度过，我们已经领教过了。那么，多个组件之间如何&quot;心意相通&quot;呢？在下个课时，将围绕&quot;数据在组件间的流动&quot;展开讲解，探索&quot;心意相通&quot;的艺术。</p>',27);function N(j,O,L,K,H,X){const a=t("Image");return e(),c("div",null,[E,y,i,u,o(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5D/D9/CgqCHl-FVVeAaMJvAAKXOyLlUwM592.png"}),g,o(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/5F/B0/Ciqc1F-Klv6AIeOPAADAZZgLu7U105.png"}),F,o(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/5D/CE/Ciqc1F-FVW6AAX_PAADMEGvjdFI487.png"}),d,o(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5D/DA/CgqCHl-FVZSAX16PAAK3atPnbSg411.png"}),h,o(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/5D/DA/CgqCHl-FVZqAJnD-AAQlZUXOgq0760.png"}),m,q,o(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/5D/CE/Ciqc1F-FVaCAOOnzAALVyD02cdg817.png"}),C,o(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/5D/DA/CgqCHl-FVbiAR1FtAABja-0bwL0578.png"}),D,_,o(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/5F/BB/CgqCHl-KlxyAB5MpAAFaH-Kgggo887.png"}),A,o(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/5D/CF/Ciqc1F-FVcSALRwNAAIomWwVcQU231.png"}),v,o(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/5D/CF/Ciqc1F-FVlOAX7VMAAE_3SdYf2M700.png"}),B,S,P,f,o(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/5F/B0/Ciqc1F-KlzqACUOPAABE6JqN9E0200.png"}),b,R,x,U,k,T,o(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image/M00/5F/B0/Ciqc1F-Kl0WAO2mzAABxddWHnXI121.png"}),M,o(a,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image/M00/5F/B0/Ciqc1F-Kl1CAA6pwAADpyi-xSnM494.png"}),W,I,V,o(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/5D/CF/Ciqc1F-FVn6AEtlxAAIomWwVcQU485.png"}),w])}const J=l(r,[["render",N]]);export{Z as __pageData,J as default};
