import{_ as o,j as e,o as t,g as c,k as n,h as l,Q as p,s}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"17 消息队列：基于RocketMQ实现服务异步通信","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6762) 17  消息队列：基于 RocketMQ 实现服务异步通信.md","filePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6762) 17  消息队列：基于 RocketMQ 实现服务异步通信.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/SpringCloud Alibaba 实战_文档/(6762) 17  消息队列：基于 RocketMQ 实现服务异步通信.md"},y=p('<h1 id="_17-消息队列-基于rocketmq实现服务异步通信" tabindex="-1">17 消息队列：基于RocketMQ实现服务异步通信 <a class="header-anchor" href="#_17-消息队列-基于rocketmq实现服务异步通信" aria-label="Permalink to &quot;17 消息队列：基于RocketMQ实现服务异步通信&quot;">​</a></h1><p>上一讲，我们讲解了分布式事务的解决方案以及 Seata 分布式事务中间件AT模式的实现原理，在后面的实战篇，我们还将围绕 Seata 进行进一步的学习。本讲我们先来介绍分布式架构下另外一块重要拼图：消息队列 RocketMQ。</p><p>本讲咱们将学习以下三方面内容：</p><ul><li><p>介绍消息队列与 Alibaba RocketMQ；</p></li><li><p>掌握 RocketMQ 的部署方式；</p></li><li><p>讲解微服务接入 RocketMQ 的开发技巧；</p></li></ul><p>首先咱们先来认识什么是消息队列 MQ 呢？</p><h3 id="消息队列与-rocketmq" tabindex="-1">消息队列与 RocketMQ <a class="header-anchor" href="#消息队列与-rocketmq" aria-label="Permalink to &quot;消息队列与 RocketMQ&quot;">​</a></h3><h4 id="消息队列-mq" tabindex="-1">消息队列 MQ <a class="header-anchor" href="#消息队列-mq" aria-label="Permalink to &quot;消息队列 MQ&quot;">​</a></h4><p>消息队列（Message Queue）简称 MQ，是一种跨进程的通信机制，通常用于应用程序间进行数据的异步传输，MQ 产品在架构中通常也被叫作&quot;消息中间件&quot;。它的最主要职责就是保证服务间进行可靠的数据传输，同时实现服务间的解耦。</p><p>这么说太过学术，我们看一个项目的实际案例，假设市级税务系统向省级税务系统上报本年度税务汇总数据，按以往的设计市级税务系统作为数据的生产者需要了解省级税务系统的 IP、端口、接口等诸多细节，然后通过 RPC、RESTful 等方式同步向省级税务系统发送数据，省级税务系统作为数据的消费者接受后响应&quot;数据已接收&quot;。</p>',9),E=s("p",null,"系统间跨进程通信",-1),i=s("p",null,"虽然从逻辑上是没有问题的，但是从技术层面却衍生出三个新问题：",-1),F=s("ul",null,[s("li",null,[s("p",null,"假如上报时省级税务系统正在升级维护，市级税务系统就必须设计额外的重发机制保证数据的完整性；")]),s("li",null,[s("p",null,"假如省级税务系统接收数据需要 1 分钟处理时间，市级税务系统采用同步通信，则市级税务系统传输线程就要阻塞 1 分钟，在高并发场景下如此长时间的阻塞很容易造成系统的崩溃；")]),s("li",null,[s("p",null,"假如省级税务系统接口的调用方式、接口、IP、端口有任何改变，都必须立即通知市级税务系统进行调整，否则就会出现通信失败。")])],-1),u=s("p",null,"从以上三个问题可以看出，省级系统产生的变化直接影响到市级税务系统的执行，两者产生了强耦合，如果问题放在互联网的微服务架构中，几十个服务进行串联调用，每个服务间如果都产生类似的强耦合，系统必然难以维护。",-1),d=s("p",null,"为了解决这种情况，我们需要在架构中部署消息中间件，这个组件应提供可靠的、稳定的、与业务无关的特性，使进程间通信解耦，而这一类消息中间件的代表产品就是 MQ 消息队列。当引入 MQ 消息队列后，消息传递过程会产生以下变化。",-1),A=p('<p>引入 MQ 后通信过程</p><p>可以看到，引入消息队列后，生产者与消费者都只面向消息队列进行数据处理，数据生产者根本不需要了解具体消费者的信息，只要把数据按事先约定放在指定的队列中即可。而消费者也是一样的，消费者端监听消息队列，如果队列中产生新的数据，MQ 就会通过&quot;推送 PUSH&quot;或者&quot;抽取 PULL&quot;的方式让消费者获取到新数据进行后续处理。</p><p>通过示意图可以看到，只要消息队列产品是稳定可靠的，那消息通信的过程就是有保障的。在架构领域，很多厂商都开发了自己的 MQ 产品，最具代表性的开源产品有：</p><ul><li><p>Kafka</p></li><li><p>ActiveMQ</p></li><li><p>ZeroMQ</p></li><li><p>RabbitMQ</p></li><li><p>RocketMQ</p></li></ul><p>每一种产品都有自己不同的设计与实现原理，但根本的目标都是相同的：为进程间通信提供可靠的异步传输机制。RocketMQ 作为阿里系产品天然被整合进 Spring Cloud Alibaba 生态，在经历过多次双 11 的考验后，RocketMQ 在性能、可靠性、易用性方面都是非常优秀的，下面咱们来了解下 RocketMQ 吧。</p><h4 id="rocketmq" tabindex="-1">RocketMQ <a class="header-anchor" href="#rocketmq" aria-label="Permalink to &quot;RocketMQ&quot;">​</a></h4><p>RocketMQ 是一款分布式消息队列中间件，官方地址为<a href="http://rocketmq.apache.org/?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://rocketmq.apache.org/</a>，目前最新版本为4.8.0。RocketMQ 最初设计是为了满足阿里巴巴自身业务对异步消息传递的需要，在 3.X 版本后正式开源并捐献给 Apache，目前已孵化为 Apache 顶级项目，同时也是国内使用最广泛、使用人数最多的 MQ 产品之一。</p>',7),C=p("<p>RocketMQ 有很多优秀的特性，在可用性方面，RocketMQ 强调集群无单点，任意一点高可用，客户端具备负载均衡能力，可以轻松实现水平扩容；在性能方面，在天猫双 11 大促背后的亿级消息处理就是通过 RocketMQ 提供的保障；在 API 方面，提供了丰富的功能，可以实现异步消息、同步消息、顺序消息、事务消息等丰富的功能，能满足大多数应用场景；在可靠性方面，提供了消息持久化、失败重试机制、消息查询追溯的功能，进一步为可靠性提供保障。</p><p>了解 RocketMQ 的诸多特性后，咱们来理解 RocketMQ 几个重要的概念：</p><ul><li><p>消息 Message：消息在广义上就是进程间传递的业务数据，在狭义上不同的 MQ 产品对消息又附加了额外属性如：Topic（主题）、Tags（标签）等；</p></li><li><p>消息生产者 Producer：指代负责生产数据的角色，在前面案例中市级税务系统就充当了消息生产者的角色；</p></li><li><p>消息消费者 Consumer：指代使用数据的角色，前面案例的省级税务系统就是消息消费者；</p></li><li><p>MQ消息服务 Broker：MQ 消息服务器的统称，用于消息存储与消息转发；</p></li><li><p>生产者组 Producer Group：对于发送同一类消息的生产者，RocketMQ 对其分组，成为生产者组；</p></li><li><p>消费者组 Consumer Group：对于消费同一类消息的消费者，RocketMQ 对其分组，成为消费者组。</p></li></ul>",3),g=p('<p>RocketMQ 组成示意图</p><p>在理解这些基本概念后，咱们正式进入 RocketMQ 的部署与使用环节，通过案例代码理解 RocketMQ 的执行过程。对于 RocketMQ 来说，使用它需要两个阶段：搭建 RocketMQ 服务器集群与应用接入 RocketMQ 队列，首先咱们来部署 RocketMQ 集群。</p><h3 id="部署-rocketmq-集群" tabindex="-1">部署 RocketMQ 集群 <a class="header-anchor" href="#部署-rocketmq-集群" aria-label="Permalink to &quot;部署 RocketMQ 集群&quot;">​</a></h3><p>RocketMQ 天然采用集群模式，常见的 RocketMQ 集群有三种形式：<strong>多 Master 模式</strong> 、<strong>多 Master 多 Slave- 异步复制模式</strong> 、<strong>多 Master 多 Slave- 同步双写模式</strong>，这三种模式各自的优缺点如下。</p><ul><li><p>多 Master 模式是配置最简单的模式，同时也是使用最多的形式。优点是单个 Master 宕机或重启维护对应用无影响，在磁盘配置为 RAID10 时，即使机器宕机不可恢复情况下，由于 RAID10 磁盘非常可靠，同步刷盘消息也不会丢失，性能也是最高的；缺点是单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响。</p></li><li><p>多 Master 多 Slave 异步复制模式。每个 Master 配置一个 Slave，有多对 Master-Slave，HA 采用异步复制方式，主备有短暂消息毫秒级延迟，即使磁盘损坏只会丢失少量消息，且消息实时性不会受影响。同时 Master 宕机后，消费者仍然可以从 Slave 消费，而且此过程对应用透明，不需要人工干预，性能同多 Master 模式几乎一样；缺点是 Master 宕机，磁盘损坏情况下会丢失少量消息。</p></li><li><p>多 Master 多 Slave 同步双写模式，HA 采用同步双写方式，即只有主备都写成功，才向应用返回成功，该模式数据与服务都无单点故障，Master 宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；缺点是性能比异步复制模式低 10% 左右，发送单个消息的执行时间会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。</p></li></ul><p>本讲我们将搭建一个双 Master 服务器集群，首先来看一下部署架构图：</p>',6),D=p(`<p>双 Master 架构图</p><p>在双 Master 架构中，出现了一个新角色 NameServer（命名服务器），NameServer 是 RocketMQ 自带的轻量级路由注册中心，支持 Broker 的动态注册与发现。在 Broker 启动后会自动向 NameServer 发送心跳包，通知 Broker 上线。当 Provider 向 NameServer 获取路由信息，然后向指定 Broker 建立长连接完成数据发送。</p><p>为了避免单节点瓶颈，通常 NameServer 会部署两台以上作为高可用冗余。NameServer 本身是无状态的，各实例间不进行通信，因此在 Broker 集群配置时要配置所有 NameServer 节点以保证状态同步。</p><p>部署 RocketMQ 集群要分两步：部署 NameServer 与部署 Broker 集群。</p><h4 id="第一步-部署-nameserver-集群。" tabindex="-1">第一步，部署 NameServer 集群。 <a class="header-anchor" href="#第一步-部署-nameserver-集群。" aria-label="Permalink to &quot;第一步，部署 NameServer 集群。&quot;">​</a></h4><p>我们创建两台 CentOS7 虚拟机，IP 地址分别为 192.168.31.200 与 192.168.31.201，要求这两台虚拟机内存大于 2G，并安装好 64 位 JDK1.8，具体过程不再演示。</p><p>之后访问 Apache RocketMQ 下载页：</p><p><a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip</a></p><p>获取 RocketMQ 最新版 rocketmq-all-4.8.0-bin-release.zip，解压后编辑 rocketmq-all-4.8.0-bin-release/bin/runserver.sh 文件，因为 RocketMQ 是服务器软件，默认为其配置 8G 内存，这是 PC 机及或者笔记本吃不消的，所以在 82 行附近将 JVM 内存缩小到 1GB 以方便演示。</p><p>修改前：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">JAVA_OPT</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;\${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">JAVA_OPT</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;\${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span></code></pre></div><p>修改后：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">JAVA_OPT</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;\${JAVA_OPT} -server -Xms1g -Xmx1g -Xmn512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">JAVA_OPT</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;\${JAVA_OPT} -server -Xms1g -Xmx1g -Xmn512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span></code></pre></div><p>修改完毕，将 rocketmq-all-4.8.0-bin-release 上传到两台 NameServer 虚拟机的 /usr/local 目录下，执行 bin 目录下的 mqnamesrv 命令。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cd </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rocketmq</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">all</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4.8</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">release</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">sh mqnamesrv</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cd </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rocketmq</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">all</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4.8</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">release</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">sh mqnamesrv</span></span></code></pre></div><p>mqnamesrv 是 RocketMQ 自带 NameServer 的启动命令，执行后看到 The Name Server boot success. serializeType=JSON 就代表 NameServer 启动成功，NameServer 将占用 9876 端口提供服务，不要忘记在防火墙设置放行。之后如法炮制在另一台 201 设备上部署 NameServer，构成 NameServer 集群。</p><h4 id="第二步-部署-broker-集群。" tabindex="-1">第二步，部署 Broker 集群。 <a class="header-anchor" href="#第二步-部署-broker-集群。" aria-label="Permalink to &quot;第二步，部署 Broker 集群。&quot;">​</a></h4><p>我们再额外创建两台 CentOS7 虚拟机，IP 地址分别为 192.168.31.210 与 192.168.31.211，同样要求这两台虚拟机内存大于 2G，并安装好 64 位 JDK1.8。</p><p>打开 rocketmq-all-4.8.0-bin-release 目录，编辑 /bin/runbroker.sh 文件，同样将启动 Broker 默认占用内存从 8G 缩小到 1G，将 64 行调整为以下内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">JAVA_OPT</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;\${JAVA_OPT} -server -Xms1g -Xmx1g -Xmn512m&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">JAVA_OPT</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;\${JAVA_OPT} -server -Xms1g -Xmx1g -Xmn512m&quot;</span></span></code></pre></div><p>在 conf 目录下，RocketMQ 已经给我们贴心的准备好三组集群配置模板：</p><ul><li><p>2m-2s-async 代表双主双从异步复制模式；</p></li><li><p>2m-2s-sync 代表双主双从同步双写模式；</p></li><li><p>2m-noslave 代表双主模式。</p></li></ul><p>我们在 2m-noslave 双主模式目录中，在 broker-a.properties 与 broker-b.properties 末尾追加 NameServer 集群的地址，为了方便理解我也将模板里面每一项的含义进行注释，首先是 broker-a.properties 的完整内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#集群名称，同一个集群下的 broker 要求统一</span></span>
<span class="line"><span style="color:#E1E4E8;">brokerClusterName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DefaultCluster</span></span>
<span class="line"><span style="color:#E1E4E8;">#broker 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a</span></span>
<span class="line"><span style="color:#E1E4E8;">#brokerId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 代表主节点，大于零代表从节点</span></span>
<span class="line"><span style="color:#E1E4E8;">brokerId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">#删除日志文件时间点，默认凌晨 </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> 点</span></span>
<span class="line"><span style="color:#E1E4E8;">deleteWhen</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">04</span></span>
<span class="line"><span style="color:#E1E4E8;">#日志文件保留时间，默认 </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> 小时</span></span>
<span class="line"><span style="color:#E1E4E8;">fileReservedTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">48</span></span>
<span class="line"><span style="color:#E1E4E8;">#Broker 的角色</span></span>
<span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> ASYNC_MASTER 异步复制Master</span></span>
<span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> SYNC_MASTER 同步双写Master</span></span>
<span class="line"><span style="color:#E1E4E8;">brokerRole</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ASYNC_MASTER</span></span>
<span class="line"><span style="color:#E1E4E8;">#刷盘方式</span></span>
<span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> ASYNC_FLUSH 异步刷盘，性能好宕机会丢数</span></span>
<span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> SYNC_FLUSH 同步刷盘，性能较差不会丢数</span></span>
<span class="line"><span style="color:#E1E4E8;">flushDiskType</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ASYNC_FLUSH</span></span>
<span class="line"><span style="color:#E1E4E8;">#末尾追加，NameServer 节点列表，使用分号分割</span></span>
<span class="line"><span style="color:#E1E4E8;">namesrvAddr</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">200</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span><span style="color:#E1E4E8;">;</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">201</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#集群名称，同一个集群下的 broker 要求统一</span></span>
<span class="line"><span style="color:#24292E;">brokerClusterName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DefaultCluster</span></span>
<span class="line"><span style="color:#24292E;">#broker 名称</span></span>
<span class="line"><span style="color:#24292E;">brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a</span></span>
<span class="line"><span style="color:#24292E;">#brokerId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 代表主节点，大于零代表从节点</span></span>
<span class="line"><span style="color:#24292E;">brokerId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">#删除日志文件时间点，默认凌晨 </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> 点</span></span>
<span class="line"><span style="color:#24292E;">deleteWhen</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">04</span></span>
<span class="line"><span style="color:#24292E;">#日志文件保留时间，默认 </span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> 小时</span></span>
<span class="line"><span style="color:#24292E;">fileReservedTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">48</span></span>
<span class="line"><span style="color:#24292E;">#Broker 的角色</span></span>
<span class="line"><span style="color:#24292E;">#</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> ASYNC_MASTER 异步复制Master</span></span>
<span class="line"><span style="color:#24292E;">#</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> SYNC_MASTER 同步双写Master</span></span>
<span class="line"><span style="color:#24292E;">brokerRole</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ASYNC_MASTER</span></span>
<span class="line"><span style="color:#24292E;">#刷盘方式</span></span>
<span class="line"><span style="color:#24292E;">#</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> ASYNC_FLUSH 异步刷盘，性能好宕机会丢数</span></span>
<span class="line"><span style="color:#24292E;">#</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> SYNC_FLUSH 同步刷盘，性能较差不会丢数</span></span>
<span class="line"><span style="color:#24292E;">flushDiskType</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ASYNC_FLUSH</span></span>
<span class="line"><span style="color:#24292E;">#末尾追加，NameServer 节点列表，使用分号分割</span></span>
<span class="line"><span style="color:#24292E;">namesrvAddr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">200</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span><span style="color:#24292E;">;</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">201</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span></span></code></pre></div><p>broker-b.properties 只有 brokerName 不同，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">brokerClusterName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DefaultCluster</span></span>
<span class="line"><span style="color:#E1E4E8;">brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b</span></span>
<span class="line"><span style="color:#E1E4E8;">brokerId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">deleteWhen</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">04</span></span>
<span class="line"><span style="color:#E1E4E8;">fileReservedTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">48</span></span>
<span class="line"><span style="color:#E1E4E8;">brokerRole</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ASYNC_MASTER</span></span>
<span class="line"><span style="color:#E1E4E8;">flushDiskType</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ASYNC_FLUSH</span></span>
<span class="line"><span style="color:#E1E4E8;">#末尾追加，NameServer 节点列表，使用分号分割</span></span>
<span class="line"><span style="color:#E1E4E8;">namesrvAddr</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">200</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span><span style="color:#E1E4E8;">;</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">201</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">brokerClusterName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DefaultCluster</span></span>
<span class="line"><span style="color:#24292E;">brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b</span></span>
<span class="line"><span style="color:#24292E;">brokerId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">deleteWhen</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">04</span></span>
<span class="line"><span style="color:#24292E;">fileReservedTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">48</span></span>
<span class="line"><span style="color:#24292E;">brokerRole</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ASYNC_MASTER</span></span>
<span class="line"><span style="color:#24292E;">flushDiskType</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ASYNC_FLUSH</span></span>
<span class="line"><span style="color:#24292E;">#末尾追加，NameServer 节点列表，使用分号分割</span></span>
<span class="line"><span style="color:#24292E;">namesrvAddr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">200</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span><span style="color:#24292E;">;</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">201</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span></span></code></pre></div><p>之后将 rocketmq-all-4.8.0-bin-release 目录上传到 /usr/local 目录，运行下面命令启动 broker 节点 a。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cd </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rocketmq</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">all</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4.8</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">release</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">sh bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mqbroker </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">conf</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">2m</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">noslave</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cd </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rocketmq</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">all</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4.8</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">release</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">sh bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mqbroker </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">conf</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">2m</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">noslave</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a.properties</span></span></code></pre></div><p>在 mqbroker 启动命令后增加 c 参数说明要加载哪个 Broker 配置文件。</p><p>启动成功会看到下面的日志，Broker 将占用 10911 端口提供服务，请设置防火墙放行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">The broker[broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a, </span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">210</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10911</span><span style="color:#E1E4E8;">] boot success. serializeType</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">JSON and name server is </span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">200</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span><span style="color:#E1E4E8;">;</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">201</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">The broker[broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a, </span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">210</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10911</span><span style="color:#24292E;">] boot success. serializeType</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">JSON and name server is </span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">200</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span><span style="color:#24292E;">;</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">201</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span></span></code></pre></div><p>同样的，在另一台 Master 执行下面命令，启动并加载 broker-b 配置文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cd </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rocketmq</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">all</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4.8</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">release</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">sh bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mqbroker </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">conf</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">2m</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">noslave</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cd </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rocketmq</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">all</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4.8</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">release</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">sh bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mqbroker </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">conf</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">2m</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">noslave</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b.properties</span></span></code></pre></div><p>到这里 NameServer 集群与 Broker 集群就部署好了，下面执行两个命令验证下。</p><p>第一个，使用 mqadmin 命令查看集群状态。</p><p>在 bin 目录下存在 mqadmin 命令用于管理 RocketMQ 集群，我们可以使用 clusterList 查看集群节点，命令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sh mqadmin clusterList </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">200</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sh mqadmin clusterList </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">200</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span></span></code></pre></div><p>通过查询 NameServer 上的注册信息，得到以下结果。</p>`,38),m=p(`<p>Broker 集群信息</p><p>可以看到在 DefaultCluster 集群中存在两个 Broker，因为 BID 编号为 0，代表它们都是 Master 主节点。</p><p>第二个，利用 RocketMQ 自带的 tools.sh 工具通过生成演示数据来测试 MQ 实际的运行情况。在 bin 目录下使用下面命令。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export NAMESRV_ADDR</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">200</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span></span>
<span class="line"><span style="color:#E1E4E8;">sh tools.sh org.apache.rocketmq.example.quickstart.Producer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export NAMESRV_ADDR</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">200</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span></span>
<span class="line"><span style="color:#24292E;">sh tools.sh org.apache.rocketmq.example.quickstart.Producer</span></span></code></pre></div><p>你会看到屏幕输出日志：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SendResult</span><span style="color:#E1E4E8;"> [sendStatus</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SEND_OK, msgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">7F0000010B664DC639969F28CF540000, offsetMsgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">C0A81FD200002A9F00000000000413B6, messageQueue</span><span style="color:#F97583;">=MessageQueue</span><span style="color:#E1E4E8;"> [topic</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TopicTest, brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a, queueId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], queueOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">SendResult</span><span style="color:#E1E4E8;"> [sendStatus</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SEND_OK, msgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">7F0000010B664DC639969F28CF9B0001, offsetMsgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">C0A81FD200002A9F000000000004147F, messageQueue</span><span style="color:#F97583;">=MessageQueue</span><span style="color:#E1E4E8;"> [topic</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TopicTest, brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a, queueId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], queueOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">SendResult</span><span style="color:#E1E4E8;"> [sendStatus</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SEND_OK, msgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">7F0000010B664DC639969F28CFA30002, offsetMsgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">C0A81FD200002A9F0000000000041548, messageQueue</span><span style="color:#F97583;">=MessageQueue</span><span style="color:#E1E4E8;"> [topic</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TopicTest, brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a, queueId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], queueOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">SendResult</span><span style="color:#E1E4E8;"> [sendStatus</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SEND_OK, msgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">7F0000010B664DC639969F28CFA70003, offsetMsgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">C0A81FD300002A9F0000000000033C56, messageQueue</span><span style="color:#F97583;">=MessageQueue</span><span style="color:#E1E4E8;"> [topic</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TopicTest, brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b, queueId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], queueOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">SendResult</span><span style="color:#E1E4E8;"> [sendStatus</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SEND_OK, msgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">7F0000010B664DC639969F28CFD60004, offsetMsgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">C0A81FD300002A9F0000000000033D1F, messageQueue</span><span style="color:#F97583;">=MessageQueue</span><span style="color:#E1E4E8;"> [topic</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TopicTest, brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b, queueId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], queueOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">SendResult</span><span style="color:#E1E4E8;"> [sendStatus</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SEND_OK, msgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">7F0000010B664DC639969F28CFDB0005, offsetMsgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">C0A81FD300002A9F0000000000033DE8, messageQueue</span><span style="color:#F97583;">=MessageQueue</span><span style="color:#E1E4E8;"> [topic</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TopicTest, brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b, queueId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], queueOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SendResult</span><span style="color:#24292E;"> [sendStatus</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SEND_OK, msgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">7F0000010B664DC639969F28CF540000, offsetMsgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">C0A81FD200002A9F00000000000413B6, messageQueue</span><span style="color:#D73A49;">=MessageQueue</span><span style="color:#24292E;"> [topic</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TopicTest, brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a, queueId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], queueOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">SendResult</span><span style="color:#24292E;"> [sendStatus</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SEND_OK, msgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">7F0000010B664DC639969F28CF9B0001, offsetMsgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">C0A81FD200002A9F000000000004147F, messageQueue</span><span style="color:#D73A49;">=MessageQueue</span><span style="color:#24292E;"> [topic</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TopicTest, brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a, queueId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], queueOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">SendResult</span><span style="color:#24292E;"> [sendStatus</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SEND_OK, msgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">7F0000010B664DC639969F28CFA30002, offsetMsgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">C0A81FD200002A9F0000000000041548, messageQueue</span><span style="color:#D73A49;">=MessageQueue</span><span style="color:#24292E;"> [topic</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TopicTest, brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a, queueId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], queueOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">SendResult</span><span style="color:#24292E;"> [sendStatus</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SEND_OK, msgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">7F0000010B664DC639969F28CFA70003, offsetMsgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">C0A81FD300002A9F0000000000033C56, messageQueue</span><span style="color:#D73A49;">=MessageQueue</span><span style="color:#24292E;"> [topic</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TopicTest, brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b, queueId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], queueOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">SendResult</span><span style="color:#24292E;"> [sendStatus</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SEND_OK, msgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">7F0000010B664DC639969F28CFD60004, offsetMsgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">C0A81FD300002A9F0000000000033D1F, messageQueue</span><span style="color:#D73A49;">=MessageQueue</span><span style="color:#24292E;"> [topic</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TopicTest, brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b, queueId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], queueOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">SendResult</span><span style="color:#24292E;"> [sendStatus</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SEND_OK, msgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">7F0000010B664DC639969F28CFDB0005, offsetMsgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">C0A81FD300002A9F0000000000033DE8, messageQueue</span><span style="color:#D73A49;">=MessageQueue</span><span style="color:#24292E;"> [topic</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TopicTest, brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b, queueId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], queueOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><p>其中<strong>broker-a、broker-b 交替出现</strong>说明集群生效了。</p><p>前面测试的是服务提供者，下面测试消费者，运行下面命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export NAMESRV_ADDR</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">200</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9876</span></span>
<span class="line"><span style="color:#E1E4E8;">sh tools.sh org.apache.rocketmq.example.quickstart.Consumer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export NAMESRV_ADDR</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">200</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9876</span></span>
<span class="line"><span style="color:#24292E;">sh tools.sh org.apache.rocketmq.example.quickstart.Consumer</span></span></code></pre></div><p>会看到消费者也获取到数据，到这里 RocketMQ 双 Master 集群的搭建就完成了，至于多 Master 多 Slave 的配置也是相似的，大家查阅官方文档相信也能很快上手。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ConsumeMessageThread_11 Receive New Messages</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">MessageExt</span><span style="color:#E1E4E8;"> [brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b, queueId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, storeSize</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">203</span><span style="color:#E1E4E8;">, queueOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">157</span><span style="color:#E1E4E8;">, sysFlag</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, bornTimestamp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1612100880154</span><span style="color:#E1E4E8;">, bornHost</span><span style="color:#F97583;">=/</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">210</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54104</span><span style="color:#E1E4E8;">, storeTimestamp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1612100880159</span><span style="color:#E1E4E8;">, storeHost</span><span style="color:#F97583;">=/</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">211</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10911</span><span style="color:#E1E4E8;">, msgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">C0A81FD300002A9F0000000000053509, commitLogOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">341257</span><span style="color:#E1E4E8;">, bodyCRC</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1116443590</span><span style="color:#E1E4E8;">, reconsumeTimes</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, preparedTransactionOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Message{topic</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;TopicTest&#39;</span><span style="color:#E1E4E8;">, flag</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, properties</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{MIN_OFFSET</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, MAX_OFFSET</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">158</span><span style="color:#E1E4E8;">, CONSUME_START_TIME</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1612100880161</span><span style="color:#E1E4E8;">, UNIQ_KEY</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">7F0000010DA64DC639969F2C4B1A0314, CLUSTER</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DefaultCluster, WAIT</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, TAGS</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TagA}, body</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">72</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">82</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">107</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">116</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">77</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">81</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;">], transactionId</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;null&#39;</span><span style="color:#E1E4E8;">}]] </span></span>
<span class="line"><span style="color:#E1E4E8;">ConsumeMessageThread_12 Receive New Messages</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">MessageExt</span><span style="color:#E1E4E8;"> [brokerName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b, queueId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, storeSize</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">203</span><span style="color:#E1E4E8;">, queueOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">157</span><span style="color:#E1E4E8;">, sysFlag</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, bornTimestamp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1612100880161</span><span style="color:#E1E4E8;">, bornHost</span><span style="color:#F97583;">=/</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">210</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54104</span><span style="color:#E1E4E8;">, storeTimestamp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1612100880162</span><span style="color:#E1E4E8;">, storeHost</span><span style="color:#F97583;">=/</span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">211</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10911</span><span style="color:#E1E4E8;">, msgId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">C0A81FD300002A9F00000000000535D4, commitLogOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">341460</span><span style="color:#E1E4E8;">, bodyCRC</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">898409296</span><span style="color:#E1E4E8;">, reconsumeTimes</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, preparedTransactionOffset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Message{topic</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;TopicTest&#39;</span><span style="color:#E1E4E8;">, flag</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, properties</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{MIN_OFFSET</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, MAX_OFFSET</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">158</span><span style="color:#E1E4E8;">, CONSUME_START_TIME</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1612100880164</span><span style="color:#E1E4E8;">, UNIQ_KEY</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">7F0000010DA64DC639969F2C4B210315, CLUSTER</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DefaultCluster, WAIT</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, TAGS</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TagA}, body</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">72</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">82</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">107</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">116</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">77</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">81</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">57</span><span style="color:#E1E4E8;">], transactionId</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;null&#39;</span><span style="color:#E1E4E8;">}]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ConsumeMessageThread_11 Receive New Messages</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">MessageExt</span><span style="color:#24292E;"> [brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b, queueId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, storeSize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">203</span><span style="color:#24292E;">, queueOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">157</span><span style="color:#24292E;">, sysFlag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, bornTimestamp</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1612100880154</span><span style="color:#24292E;">, bornHost</span><span style="color:#D73A49;">=/</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">210</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54104</span><span style="color:#24292E;">, storeTimestamp</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1612100880159</span><span style="color:#24292E;">, storeHost</span><span style="color:#D73A49;">=/</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">211</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10911</span><span style="color:#24292E;">, msgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">C0A81FD300002A9F0000000000053509, commitLogOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">341257</span><span style="color:#24292E;">, bodyCRC</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1116443590</span><span style="color:#24292E;">, reconsumeTimes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, preparedTransactionOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Message{topic</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;TopicTest&#39;</span><span style="color:#24292E;">, flag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, properties</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{MIN_OFFSET</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, MAX_OFFSET</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">158</span><span style="color:#24292E;">, CONSUME_START_TIME</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1612100880161</span><span style="color:#24292E;">, UNIQ_KEY</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">7F0000010DA64DC639969F2C4B1A0314, CLUSTER</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DefaultCluster, WAIT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, TAGS</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TagA}, body</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">72</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">108</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">108</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">82</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">107</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">116</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">77</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">81</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">55</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">56</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">56</span><span style="color:#24292E;">], transactionId</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;null&#39;</span><span style="color:#24292E;">}]] </span></span>
<span class="line"><span style="color:#24292E;">ConsumeMessageThread_12 Receive New Messages</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">MessageExt</span><span style="color:#24292E;"> [brokerName</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b, queueId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, storeSize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">203</span><span style="color:#24292E;">, queueOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">157</span><span style="color:#24292E;">, sysFlag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, bornTimestamp</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1612100880161</span><span style="color:#24292E;">, bornHost</span><span style="color:#D73A49;">=/</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">210</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54104</span><span style="color:#24292E;">, storeTimestamp</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1612100880162</span><span style="color:#24292E;">, storeHost</span><span style="color:#D73A49;">=/</span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">211</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10911</span><span style="color:#24292E;">, msgId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">C0A81FD300002A9F00000000000535D4, commitLogOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">341460</span><span style="color:#24292E;">, bodyCRC</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">898409296</span><span style="color:#24292E;">, reconsumeTimes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, preparedTransactionOffset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Message{topic</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;TopicTest&#39;</span><span style="color:#24292E;">, flag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, properties</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{MIN_OFFSET</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, MAX_OFFSET</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">158</span><span style="color:#24292E;">, CONSUME_START_TIME</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1612100880164</span><span style="color:#24292E;">, UNIQ_KEY</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">7F0000010DA64DC639969F2C4B210315, CLUSTER</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DefaultCluster, WAIT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, TAGS</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TagA}, body</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">72</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">108</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">108</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">82</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">107</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">116</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">77</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">81</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">55</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">56</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">57</span><span style="color:#24292E;">], transactionId</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;null&#39;</span><span style="color:#24292E;">}]]</span></span></code></pre></div><p>集群部署好，那如何使用 RocketMQ 进行消息收发呢？我们结合 Spring Boot 代码进行讲解。</p><h3 id="应用接入-rocketmq-集群" tabindex="-1">应用接入 RocketMQ 集群 <a class="header-anchor" href="#应用接入-rocketmq-集群" aria-label="Permalink to &quot;应用接入 RocketMQ 集群&quot;">​</a></h3>`,13),k=p(`<p>案例说明</p><p>我们以前面的报税为例，利用 Spring Boot 集成 MQ 客户端实现消息收发，首先咱们模拟生产者 Producer。</p><h4 id="生产者-producer-发送消息" tabindex="-1">生产者 Producer 发送消息 <a class="header-anchor" href="#生产者-producer-发送消息" aria-label="Permalink to &quot;生产者 Producer 发送消息&quot;">​</a></h4><p>第一步，利用 Spring Initializr 向导创建 rocketmq-provider 工程，确保 pom.xml 引入以下依赖。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- RocketMQ客户端，版本与Broker保持一致 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.rocketmq&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;rocketmq-client&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.8.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- RocketMQ客户端，版本与Broker保持一致 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.rocketmq&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;rocketmq-client&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.8.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>第二步，配置应用 application.yml。</p><p>rocketmq-client 主要通过编码实现通信，因此无须在 application.yml 做额外配置。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">8000</span></span>
<span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">rocketmq-producer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">8000</span></span>
<span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">rocketmq-producer</span></span></code></pre></div><p>第三步，创建 Controller，生产者发送消息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProviderController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(ProviderController.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/send_s1_tax&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">send1</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> MQClientException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建DefaultMQProducer消息生产者对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        DefaultMQProducer producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultMQProducer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;producer-group&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//设置NameServer节点地址，多个节点间用分号分割</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">setNamesrvAddr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;192.168.31.200:9876;192.168.31.201:9876&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//与NameServer建立长连接</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//发送一百条数据</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ; i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> ; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//数据正文</span></span>
<span class="line"><span style="color:#E1E4E8;">                String data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">title</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">X市2021年度第一季度税务汇总数据</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">/*创建消息</span></span>
<span class="line"><span style="color:#6A737D;">                    Message消息三个参数</span></span>
<span class="line"><span style="color:#6A737D;">                    topic 代表消息主题，自定义为tax-data-topic说明是税务数据</span></span>
<span class="line"><span style="color:#6A737D;">                    tags 代表标志，用于消费者接收数据时进行数据筛选。2021S1代表2021年第一季度数据</span></span>
<span class="line"><span style="color:#6A737D;">                    body 代表消息内容</span></span>
<span class="line"><span style="color:#6A737D;">                */</span></span>
<span class="line"><span style="color:#E1E4E8;">                Message message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tax-data-topic&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;2021S1&quot;</span><span style="color:#E1E4E8;">, data.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//发送消息，获取发送结果</span></span>
<span class="line"><span style="color:#E1E4E8;">                SendResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//将发送结果对象打印在控制台</span></span>
<span class="line"><span style="color:#E1E4E8;">                logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;消息已发送：MsgId:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getMsgId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;，发送状态:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getSendStatus</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (RemotingException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (MQBrokerException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            producer.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProviderController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Logger logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(ProviderController.class);</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/send_s1_tax&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">send1</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> MQClientException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建DefaultMQProducer消息生产者对象</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQProducer producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQProducer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;producer-group&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//设置NameServer节点地址，多个节点间用分号分割</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;192.168.31.200:9876;192.168.31.201:9876&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//与NameServer建立长连接</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//发送一百条数据</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> ; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//数据正文</span></span>
<span class="line"><span style="color:#24292E;">                String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">title</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">X市2021年度第一季度税务汇总数据</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">/*创建消息</span></span>
<span class="line"><span style="color:#6A737D;">                    Message消息三个参数</span></span>
<span class="line"><span style="color:#6A737D;">                    topic 代表消息主题，自定义为tax-data-topic说明是税务数据</span></span>
<span class="line"><span style="color:#6A737D;">                    tags 代表标志，用于消费者接收数据时进行数据筛选。2021S1代表2021年第一季度数据</span></span>
<span class="line"><span style="color:#6A737D;">                    body 代表消息内容</span></span>
<span class="line"><span style="color:#6A737D;">                */</span></span>
<span class="line"><span style="color:#24292E;">                Message message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tax-data-topic&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2021S1&quot;</span><span style="color:#24292E;">, data.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//发送消息，获取发送结果</span></span>
<span class="line"><span style="color:#24292E;">                SendResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//将发送结果对象打印在控制台</span></span>
<span class="line"><span style="color:#24292E;">                logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;消息已发送：MsgId:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getMsgId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;，发送状态:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getSendStatus</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (RemotingException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (MQBrokerException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            producer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在程序运行后，访问<a href="http://localhost:8000/send_s1_tax?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost:8000/send_s1_tax</a>，在控制台会看到如下输出说明数据已被 Broker 接收，Broker 接收后 Producer 端任务已完成。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">消息已发送：MsgId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">7F00000144E018B4AAC29F3B7B280062，发送状态</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">SEND_OK</span></span>
<span class="line"><span style="color:#E1E4E8;">消息已发送：MsgId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">7F00000144E018B4AAC29F3B7B2A0063，发送状态</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">SEND_OK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">消息已发送：MsgId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">7F00000144E018B4AAC29F3B7B280062，发送状态</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">SEND_OK</span></span>
<span class="line"><span style="color:#24292E;">消息已发送：MsgId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">7F00000144E018B4AAC29F3B7B2A0063，发送状态</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">SEND_OK</span></span></code></pre></div><p>下面咱们开发消费者 Consumer。</p><h4 id="消费者-consumer-接收消息" tabindex="-1">消费者 Consumer 接收消息 <a class="header-anchor" href="#消费者-consumer-接收消息" aria-label="Permalink to &quot;消费者 Consumer 接收消息&quot;">​</a></h4><p>第一步，利用 Spring Initializr 向导创建 rocketmq-consumer 工程，确保 pom.xml 引入以下依赖。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- RocketMQ客户端，版本与Broker保持一致 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.rocketmq&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;rocketmq-client&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.8.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- RocketMQ客户端，版本与Broker保持一致 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.rocketmq&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;rocketmq-client&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.8.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>第二步，application.yml 同样无须做额外设置。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9000</span></span>
<span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">rocketmq-consumer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9000</span></span>
<span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">rocketmq-consumer</span></span></code></pre></div><p>第三步，在应用启动入口 RocketmqConsumerApplication 增加消费者监听代码，关键的代码都已做好注释。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RocketmqConsumerApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(RocketmqConsumerApplication.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> MQClientException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(RocketmqConsumerApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建消费者对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        DefaultMQPushConsumer consumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultMQPushConsumer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;consumer-group&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//设置NameServer节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">setNamesrvAddr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;192.168.31.200:9876;192.168.31.201:9876&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/*订阅主题，</span></span>
<span class="line"><span style="color:#6A737D;">        consumer.subscribe包含两个参数：</span></span>
<span class="line"><span style="color:#6A737D;">        topic: 说明消费者从Broker订阅哪一个主题，这一项要与Provider保持一致。</span></span>
<span class="line"><span style="color:#6A737D;">        subExpression: 子表达式用于筛选tags。</span></span>
<span class="line"><span style="color:#6A737D;">            同一个主题下可以包含很多不同的tags，subExpression用于筛选符合条件的tags进行接收。</span></span>
<span class="line"><span style="color:#6A737D;">            例如：设置为*，则代表接收所有tags数据。</span></span>
<span class="line"><span style="color:#6A737D;">            例如：设置为2020S1，则Broker中只有tags=2020S1的消息会被接收，而2020S2就会被排除在外。</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tax-data-topic&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建监听，当有新的消息监听程序会及时捕捉并加以处理。</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">registerMessageListener</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageListenerConcurrently</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ConsumeConcurrentlyStatus </span><span style="color:#B392F0;">consumeMessage</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    List&lt;</span><span style="color:#F97583;">MessageExt</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">msgs</span><span style="color:#E1E4E8;">, ConsumeConcurrentlyContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//批量数据处理</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (MessageExt msg </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> msgs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;消费者消费数据:&quot;</span><span style="color:#F97583;">+new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(msg.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//返回数据已接收标识</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//启动消费者，与Broker建立长连接，开始监听。</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RocketmqConsumerApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Logger logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(RocketmqConsumerApplication.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> MQClientException {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(RocketmqConsumerApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建消费者对象</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQPushConsumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPushConsumer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;consumer-group&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//设置NameServer节点</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;192.168.31.200:9876;192.168.31.201:9876&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/*订阅主题，</span></span>
<span class="line"><span style="color:#6A737D;">        consumer.subscribe包含两个参数：</span></span>
<span class="line"><span style="color:#6A737D;">        topic: 说明消费者从Broker订阅哪一个主题，这一项要与Provider保持一致。</span></span>
<span class="line"><span style="color:#6A737D;">        subExpression: 子表达式用于筛选tags。</span></span>
<span class="line"><span style="color:#6A737D;">            同一个主题下可以包含很多不同的tags，subExpression用于筛选符合条件的tags进行接收。</span></span>
<span class="line"><span style="color:#6A737D;">            例如：设置为*，则代表接收所有tags数据。</span></span>
<span class="line"><span style="color:#6A737D;">            例如：设置为2020S1，则Broker中只有tags=2020S1的消息会被接收，而2020S2就会被排除在外。</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tax-data-topic&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建监听，当有新的消息监听程序会及时捕捉并加以处理。</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">registerMessageListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageListenerConcurrently</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConsumeConcurrentlyStatus </span><span style="color:#6F42C1;">consumeMessage</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    List&lt;</span><span style="color:#D73A49;">MessageExt</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">msgs</span><span style="color:#24292E;">, ConsumeConcurrentlyContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//批量数据处理</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (MessageExt msg </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> msgs) {</span></span>
<span class="line"><span style="color:#24292E;">                    logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;消费者消费数据:&quot;</span><span style="color:#D73A49;">+new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//返回数据已接收标识</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//启动消费者，与Broker建立长连接，开始监听。</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当应用启动后，Provider 产生新消息的同时，Consumer 端就会立即消费掉，控制台产生输出。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14.212</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">17328</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [MessageThread_3] c.l.r.RocketmqConsumerApplication        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 消费者消费数据</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;X市2021年度第一季度税务汇总数据&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14.217</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">17328</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [MessageThread_2] c.l.r.RocketmqConsumerApplication        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 消费者消费数据</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;X市2021年度第一季度税务汇总数据&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14.212</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">17328</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [MessageThread_3] c.l.r.RocketmqConsumerApplication        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 消费者消费数据</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;X市2021年度第一季度税务汇总数据&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14.217</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">17328</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [MessageThread_2] c.l.r.RocketmqConsumerApplication        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 消费者消费数据</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;X市2021年度第一季度税务汇总数据&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>以上便是 Spring Boot 接入 RocketMQ 集群的过程。对于当前的案例我们是通过代码方式控制消息收发，在 Spring Cloud 生态中还提供了 Spring Cloud Stream 模块，允许程序员采用&quot;声明式&quot;的开发方式实现与 MQ 更轻松的接入，但 Spring Cloud Stream 本身封装度太高，很多 RocketMQ 的细节也被隐藏了，这对于入门来说并不是一件好事。在掌握 RocketMQ 的相关内容后再去学习 Spring Cloud Stream 你会理解得更加透彻。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本讲咱们学习了三方面内容，首先介绍了什么是 MQ 以及 Alibaba RocketMQ 的特性；其次详细讲解了 RocketMQ 双主集群的部署过程；最后通过 Spring Boot 应用中引入 RocketMQ-Client 实现消息的收发。</p><p>这里为你留一道思考题：目前主流的 MQ 产品有 RocketMQ、RabbitMQ、Kafka、ActiveMQ、ZeroMQ......不同的产品有不同的设计，假设在银行的金融交易基于 MQ 实现，对 MQ 的可靠性与一致性要求较高，但对数据的响应时间不敏感。如果你是架构师该如何选型，欢迎你把自己的思考写在评论区和大家一起分享。</p><p>下一讲我们将开始一个新的篇章，将之前学过的 Spring Cloud Alibaba 综合运用，看在实际项目中有哪些成熟的经验可以为我所用。</p>`,27);function B(b,h,v,M,S,_){const a=e("Image");return t(),c("div",null,[y,n(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/33/1C/Cgp9HWBu2EuANOnqAAEJZsgHoCk159.png"}),l(),E,i,F,u,d,n(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/33/24/CioPOWBu2FaAD6pQAAEtpzXgzW8765.png"}),l(),A,n(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/33/1C/Cgp9HWBu2GKABJW5AAPatFf4EbA571.png"}),l(),C,n(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M00/33/1C/Cgp9HWBu2G-ASqw3AAELZIiTELk603.png"}),l(),g,n(a,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M00/33/24/CioPOWBu2HyAJB6-AACJ2Or_yLg890.png"}),l(),D,n(a,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M00/33/1C/Cgp9HWBu2J6APWfJAAH7nUt8GHs198.png"}),l(),m,n(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/33/24/CioPOWBu2KuAeQ6nAAEtpzXgzW8352.png"}),l(),k])}const T=o(r,[["render",B]]);export{f as __pageData,T as default};
