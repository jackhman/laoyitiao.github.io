import{_ as a,j as l,o as p,g as o,k as e,h as t,Q as s}from"./chunks/framework.a0d18f64.js";const d=JSON.parse('{"title":"12模板解析：构造AST的完整流程是怎样的？（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7639) 12  模板解析：构造 AST 的完整流程是怎样的？（上）.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7639) 12  模板解析：构造 AST 的完整流程是怎样的？（上）.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7639) 12  模板解析：构造 AST 的完整流程是怎样的？（上）.md"},E=s(`<h1 id="_12模板解析-构造ast的完整流程是怎样的-上" tabindex="-1">12模板解析：构造AST的完整流程是怎样的？（上） <a class="header-anchor" href="#_12模板解析-构造ast的完整流程是怎样的-上" aria-label="Permalink to &quot;12模板解析：构造AST的完整流程是怎样的？（上）&quot;">​</a></h1><p>Vue.js 3.0 的编译场景分<strong>服务端 SSR 编译</strong> 和 <strong>web 编译</strong>，本文我们只分析 web 的编译。</p><p>我们先来看 web 编译的入口 compile 函数，分析它的实现原理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(template, options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">baseCompile</span><span style="color:#E1E4E8;">(template, </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({}, parserOptions, options, { </span></span>
<span class="line"><span style="color:#E1E4E8;">    nodeTransforms</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [...DOMNodeTransforms, ...(options.nodeTransforms </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> [])], </span></span>
<span class="line"><span style="color:#E1E4E8;">    directiveTransforms</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({}, DOMDirectiveTransforms, options.directiveTransforms </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}), </span></span>
<span class="line"><span style="color:#E1E4E8;">    transformHoist</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  })) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(template, options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">baseCompile</span><span style="color:#24292E;">(template, </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({}, parserOptions, options, { </span></span>
<span class="line"><span style="color:#24292E;">    nodeTransforms</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [...DOMNodeTransforms, ...(options.nodeTransforms </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> [])], </span></span>
<span class="line"><span style="color:#24292E;">    directiveTransforms</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({}, DOMDirectiveTransforms, options.directiveTransforms </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}), </span></span>
<span class="line"><span style="color:#24292E;">    transformHoist</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  })) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>compile 函数支持两个参数，第一个参数 template 是待编译的模板字符串，第二个参数 options 是编译的一些配置信息。</p><p>compile 内部通过执行 baseCompile 方法完成编译工作，可以看到 baseCompile 在参数 options 的基础上又扩展了一些配置。对于这些编译相关的配置，我们后面会在具体的场景具体分析。</p><p>接下来，我们来看一下 baseCompile 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">baseCompile</span><span style="color:#E1E4E8;">(template,  options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> prefixIdentifiers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 解析 template 生成 AST </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isString</span><span style="color:#E1E4E8;">(template) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">baseParse</span><span style="color:#E1E4E8;">(template, options) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> template </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [nodeTransforms, directiveTransforms] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBaseTransformPreset</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// AST 转换 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({}, options, { </span></span>
<span class="line"><span style="color:#E1E4E8;">    prefixIdentifiers, </span></span>
<span class="line"><span style="color:#E1E4E8;">    nodeTransforms</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [ </span></span>
<span class="line"><span style="color:#E1E4E8;">      ...nodeTransforms, </span></span>
<span class="line"><span style="color:#E1E4E8;">      ...(options.nodeTransforms </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []) </span></span>
<span class="line"><span style="color:#E1E4E8;">    ], </span></span>
<span class="line"><span style="color:#E1E4E8;">    directiveTransforms</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({}, directiveTransforms, options.directiveTransforms </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {} </span></span>
<span class="line"><span style="color:#E1E4E8;">    ) </span></span>
<span class="line"><span style="color:#E1E4E8;">  })) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 生成代码 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({}, options, { </span></span>
<span class="line"><span style="color:#E1E4E8;">    prefixIdentifiers </span></span>
<span class="line"><span style="color:#E1E4E8;">  })) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">baseCompile</span><span style="color:#24292E;">(template,  options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> prefixIdentifiers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 解析 template 生成 AST </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isString</span><span style="color:#24292E;">(template) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">baseParse</span><span style="color:#24292E;">(template, options) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> template </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [nodeTransforms, directiveTransforms] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBaseTransformPreset</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// AST 转换 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(ast, </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({}, options, { </span></span>
<span class="line"><span style="color:#24292E;">    prefixIdentifiers, </span></span>
<span class="line"><span style="color:#24292E;">    nodeTransforms</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [ </span></span>
<span class="line"><span style="color:#24292E;">      ...nodeTransforms, </span></span>
<span class="line"><span style="color:#24292E;">      ...(options.nodeTransforms </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []) </span></span>
<span class="line"><span style="color:#24292E;">    ], </span></span>
<span class="line"><span style="color:#24292E;">    directiveTransforms</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({}, directiveTransforms, options.directiveTransforms </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {} </span></span>
<span class="line"><span style="color:#24292E;">    ) </span></span>
<span class="line"><span style="color:#24292E;">  })) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 生成代码 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(ast, </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({}, options, { </span></span>
<span class="line"><span style="color:#24292E;">    prefixIdentifiers </span></span>
<span class="line"><span style="color:#24292E;">  })) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，baseCompile 函数主要做三件事情：<strong>解析 template 生成 AST</strong> ，<strong>AST 转换</strong> 和<strong>生成代码</strong>。</p><p>这一节课我们的目标就是<strong>解析 template 生成 AST 背后的实现原理</strong>。</p><h3 id="生成-ast-抽象语法树" tabindex="-1">生成 AST 抽象语法树 <a class="header-anchor" href="#生成-ast-抽象语法树" aria-label="Permalink to &quot;生成 AST 抽象语法树&quot;">​</a></h3><p>你可以在百度百科中看到 <a href="https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/6129952?fr=aladdin" target="_blank" rel="noreferrer">AST 的定义</a>，这里我就不赘述啦，对应到我们的 template，也可以用 AST 去描述它，比如我们有如下 template：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;!-- 这是一段注释 --&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;{ { msg }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;This is an app&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;!-- 这是一段注释 --&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">hello</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;{ { msg }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">hello</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;This is an app&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>它经过第一步解析后，生成相应的 AST 对象：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;children&quot;</span><span style="color:#E1E4E8;">: [ </span></span>
<span class="line"><span style="color:#E1E4E8;">    { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;ns&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;tag&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;tagType&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;props&quot;</span><span style="color:#E1E4E8;">: [ </span></span>
<span class="line"><span style="color:#E1E4E8;">        { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;value&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;content&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              }, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              }, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">app</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">          }, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            }, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            }, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;class=</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">app</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">      ], </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;isSelfClosing&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;children&quot;</span><span style="color:#E1E4E8;">: [ </span></span>
<span class="line"><span style="color:#E1E4E8;">        { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;content&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot; 这是一段注释 &quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            }, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            }, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&lt;!-- 这是一段注释 --&gt;&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span></span>
<span class="line"><span style="color:#E1E4E8;">        { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;ns&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;tag&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;tagType&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;props&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;isSelfClosing&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;children&quot;</span><span style="color:#E1E4E8;">: [ </span></span>
<span class="line"><span style="color:#E1E4E8;">            { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;ns&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;tag&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;tagType&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;props&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;isSelfClosing&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;children&quot;</span><span style="color:#E1E4E8;">: [ </span></span>
<span class="line"><span style="color:#E1E4E8;">                { </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;content&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">&quot;isStatic&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">&quot;isConstant&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">&quot;content&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                      }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">59</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                      }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span></span>
<span class="line"><span style="color:#E1E4E8;">                  }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                    }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">62</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                    }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{ { msg }}&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                  } </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">              ], </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&lt;p&gt;{ { msg }}&lt;/p&gt;&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              } </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">          ], </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">38</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            }, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">77</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            }, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&lt;hello&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">    &lt;p&gt;{ { msg }}&lt;/p&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;/hello&gt;&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span></span>
<span class="line"><span style="color:#E1E4E8;">        { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;ns&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;tag&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;tagType&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;props&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;isSelfClosing&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;children&quot;</span><span style="color:#E1E4E8;">: [ </span></span>
<span class="line"><span style="color:#E1E4E8;">            { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;content&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;This is an app&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">83</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">97</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                }, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;This is an app&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              } </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">          ], </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            }, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            }, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&lt;p&gt;This is an app&lt;/p&gt;&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">      ], </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&lt;div class=</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">app</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;!-- 这是一段注释 --&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;hello&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">    &lt;p&gt;{ { msg }}&lt;/p&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;/hello&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;p&gt;This is an app&lt;/p&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&lt;/div&gt;&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  ], </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;helpers&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;components&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;directives&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;hoists&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;imports&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;cached&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;temps&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;loc&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;column&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;offset&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;source&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&lt;div class=</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">app</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;!-- 这是一段注释 --&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;hello&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">    &lt;p&gt;{ { msg }}&lt;/p&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;/hello&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &lt;p&gt;This is an app&lt;/p&gt;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&lt;/div&gt;&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;children&quot;</span><span style="color:#24292E;">: [ </span></span>
<span class="line"><span style="color:#24292E;">    { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;ns&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;tag&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;tagType&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;props&quot;</span><span style="color:#24292E;">: [ </span></span>
<span class="line"><span style="color:#24292E;">        { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;value&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;content&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              }, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              }, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">app</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">          }, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            }, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            }, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;class=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">app</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">      ], </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;isSelfClosing&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;children&quot;</span><span style="color:#24292E;">: [ </span></span>
<span class="line"><span style="color:#24292E;">        { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;content&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot; 这是一段注释 &quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            }, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">35</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            }, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&lt;!-- 这是一段注释 --&gt;&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">        }, </span></span>
<span class="line"><span style="color:#24292E;">        { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;ns&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;tag&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;tagType&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;props&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;isSelfClosing&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;children&quot;</span><span style="color:#24292E;">: [ </span></span>
<span class="line"><span style="color:#24292E;">            { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;ns&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;tag&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;tagType&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;props&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;isSelfClosing&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;children&quot;</span><span style="color:#24292E;">: [ </span></span>
<span class="line"><span style="color:#24292E;">                { </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;content&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">&quot;isStatic&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">&quot;isConstant&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">&quot;content&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">56</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                      }, </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">14</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">59</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                      }, </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                    } </span></span>
<span class="line"><span style="color:#24292E;">                  }, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">53</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                    }, </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">62</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                    }, </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{ { msg }}&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                  } </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">              ], </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                }, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">66</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                }, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&lt;p&gt;{ { msg }}&lt;/p&gt;&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              } </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">          ], </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">38</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            }, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">77</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            }, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&lt;hello&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">    &lt;p&gt;{ { msg }}&lt;/p&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;/hello&gt;&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">        }, </span></span>
<span class="line"><span style="color:#24292E;">        { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;ns&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;tag&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;tagType&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;props&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;isSelfClosing&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;children&quot;</span><span style="color:#24292E;">: [ </span></span>
<span class="line"><span style="color:#24292E;">            { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;content&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;This is an app&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">83</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                }, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">97</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                }, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;This is an app&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              } </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">          ], </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            }, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">101</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            }, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&lt;p&gt;This is an app&lt;/p&gt;&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">      ], </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        }, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">108</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        }, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&lt;div class=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">app</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;!-- 这是一段注释 --&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;hello&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">    &lt;p&gt;{ { msg }}&lt;/p&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;/hello&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;p&gt;This is an app&lt;/p&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&lt;/div&gt;&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  ], </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;helpers&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;components&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;directives&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;hoists&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;imports&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;cached&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;temps&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;loc&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    }, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;column&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;offset&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">108</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    }, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;source&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&lt;div class=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">app</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;!-- 这是一段注释 --&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;hello&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">    &lt;p&gt;{ { msg }}&lt;/p&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;/hello&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  &lt;p&gt;This is an app&lt;/p&gt;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&lt;/div&gt;&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，AST 是树状结构，对于树中的每个节点，会有 type 字段描述节点的类型，tag 字段描述节点的标签，props 描述节点的属性，loc 描述节点对应代码相关信息，children 指向它的子节点对象数组。</p><p>当然 AST 中的节点还包含其他的一些属性，我在这里就不一一介绍了，你现在要理解的是 <strong>AST 中的节点是可以完整地描述它在模板中映射的节点信息</strong>。</p><p>注意，<strong>AST 对象根节点其实是一个虚拟节点</strong> ，<strong>它并不会映射到一个具体节点</strong>，另外它还包含了其他的一些属性，这些属性在后续的 AST 转换的过程中会赋值，并在生成代码阶段用到。</p><p>那么，为什么要设计一个虚拟节点呢？</p><p>因为 Vue.js 3.0 和 Vue.js 2.x 有一个很大的不同------Vue.js 3.0 支持了 Fragment 的语法，即组件可以有多个根节点，比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;./logo.jpg&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:msg=&quot;msg&quot;&gt;&lt;/hello&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;./logo.jpg&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">hello</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:msg=&quot;msg&quot;&gt;&lt;/hello&gt;</span></span></code></pre></div><p>这种写法在 Vue.js 2.x 中会报错，提示模板只能有一个根节点，而 Vue.js 3.0 允许了这种写法。但是对于一棵树而言，必须有一个根节点，所以虚拟节点在这种场景下就非常有用了，它可以作为 AST 的根节点，然后其 children 包含了 img 和 hello 的节点。</p><p>好了，到这里你已经大致了解了 AST，那么接下来我们看一下如何根据模板字符串来构建这个 AST 对象吧。</p><p>先来看一下 baseParse 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">baseParse</span><span style="color:#E1E4E8;">(content, options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建解析上下文 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> createPa  </span><span style="color:#B392F0;">rserContext</span><span style="color:#E1E4E8;">(content, options) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCursor</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析子节点，并创建 AST  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseChildren</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DATA */</span><span style="color:#E1E4E8;">, []), </span><span style="color:#B392F0;">getSelection</span><span style="color:#E1E4E8;">(context, start)) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">baseParse</span><span style="color:#24292E;">(content, options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建解析上下文 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> createPa  </span><span style="color:#6F42C1;">rserContext</span><span style="color:#24292E;">(content, options) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCursor</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析子节点，并创建 AST  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseChildren</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DATA */</span><span style="color:#24292E;">, []), </span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">(context, start)) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>baseParse 主要就做三件事情：<strong>创建解析上下文</strong> ，<strong>解析子节点</strong> ，<strong>创建 AST 根节点</strong>。</p><h4 id="创建解析上下文" tabindex="-1">创建解析上下文 <a class="header-anchor" href="#创建解析上下文" aria-label="Permalink to &quot;创建解析上下文&quot;">​</a></h4><p>首先，我们来分析创建解析上下文的过程，先来看 createParserContext 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 默认解析配置 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> defaultParserOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  delimiters</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [\`{ {\`, \`}}\`], </span></span>
<span class="line"><span style="color:#E1E4E8;">  getNamespace</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HTML */</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  getTextMode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DATA */</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  isVoidTag</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> NO, </span></span>
<span class="line"><span style="color:#E1E4E8;">  isPreTag</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> NO, </span></span>
<span class="line"><span style="color:#E1E4E8;">  isCustomElement</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> NO, </span></span>
<span class="line"><span style="color:#E1E4E8;">  decodeEntities</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (rawText) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> rawText.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(decodeRE, (_, p1) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> decodeMap[p1]), </span></span>
<span class="line"><span style="color:#E1E4E8;">  onError</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> defaultOnError </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createParserContext</span><span style="color:#E1E4E8;">(content, options) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({}, defaultParserOptions, options), </span></span>
<span class="line"><span style="color:#E1E4E8;">    column</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    line</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    offset</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    originalSource</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> content, </span></span>
<span class="line"><span style="color:#E1E4E8;">    source</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> content, </span></span>
<span class="line"><span style="color:#E1E4E8;">    inPre</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    inVPre</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 默认解析配置 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> defaultParserOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  delimiters</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [\`{ {\`, \`}}\`], </span></span>
<span class="line"><span style="color:#24292E;">  getNamespace</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HTML */</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  getTextMode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DATA */</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  isVoidTag</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> NO, </span></span>
<span class="line"><span style="color:#24292E;">  isPreTag</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> NO, </span></span>
<span class="line"><span style="color:#24292E;">  isCustomElement</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> NO, </span></span>
<span class="line"><span style="color:#24292E;">  decodeEntities</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (rawText) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> rawText.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(decodeRE, (_, p1) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> decodeMap[p1]), </span></span>
<span class="line"><span style="color:#24292E;">  onError</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> defaultOnError </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createParserContext</span><span style="color:#24292E;">(content, options) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({}, defaultParserOptions, options), </span></span>
<span class="line"><span style="color:#24292E;">    column</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    line</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    offset</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    originalSource</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> content, </span></span>
<span class="line"><span style="color:#24292E;">    source</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> content, </span></span>
<span class="line"><span style="color:#24292E;">    inPre</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    inVPre</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>解析上下文实际上就是一个 JavaScript 对象，它维护着解析过程中的上下文，其中 options 表示解析相关配置 ，column 表示当前代码的列号，line 表示当前代码的行号，originalSource 表示最初的原始代码，source 表示当前代码，offset 表示当前代码相对于原始代码的偏移量，inPre 表示当前代码是否在 pre 标签内，inVPre 表示当前代码是否在 v-pre 指令的环境下。</p><p>在后续解析的过程中，会始终维护和更新这个解析上下文，它能够表示当前解析的状态。</p><p>创建完解析上下文，接下来就开始解析子节点了。</p><h4 id="解析子节点" tabindex="-1">解析子节点 <a class="header-anchor" href="#解析子节点" aria-label="Permalink to &quot;解析子节点&quot;">​</a></h4><p>我们先来看一下 parseChildren 函数的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseChildren</span><span style="color:#E1E4E8;">(context, mode, ancestors) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">last</span><span style="color:#E1E4E8;">(ancestors) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> parent.ns </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HTML */</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [] </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 自顶向下分析代码，生成 nodes </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  let removedWhitespace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 空白字符管理 </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> removedWhitespace </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> nodes.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Boolean) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nodes </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseChildren</span><span style="color:#24292E;">(context, mode, ancestors) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">last</span><span style="color:#24292E;">(ancestors) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> parent.ns </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HTML */</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 自顶向下分析代码，生成 nodes </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  let removedWhitespace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 空白字符管理 </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> removedWhitespace </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> nodes.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Boolean) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nodes </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>parseChildren 的目的就是解析并创建 AST 节点数组。它有两个主要流程，第一个是自顶向下分析代码，生成 AST 节点数组 nodes；第二个是空白字符管理，用于提高编译的效率。</p><p>首先，我们来看<strong>生成 AST 节点数组</strong>的流程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseChildren</span><span style="color:#E1E4E8;">(context, mode, ancestors) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 父节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">last</span><span style="color:#E1E4E8;">(ancestors) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> parent.ns </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HTML */</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [] </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断是否遍历结束 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isEnd</span><span style="color:#E1E4E8;">(context, mode, ancestors)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source </span></span>
<span class="line"><span style="color:#E1E4E8;">    let node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> undefined </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DATA */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* RCDATA */</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">context.inVPre </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(s, context.options.delimiters[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理 { { 插值代码 </span></span>
<span class="line"><span style="color:#E1E4E8;">        node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInterpolation</span><span style="color:#E1E4E8;">(context, mode) </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DATA */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> s[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理 &lt; 开头的代码 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s.length </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// s 长度为 1，说明代码结尾是 &lt;，报错 </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* EOF_BEFORE_TAG_NAME */</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;!&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 处理 &lt;! 开头的代码 </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(s, </span><span style="color:#9ECBFF;">&#39;&lt;!--&#39;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理注释节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">            node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseComment</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(s, </span><span style="color:#9ECBFF;">&#39;&lt;!DOCTYPE&#39;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理 &lt;!DOCTYPE 节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">            node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseBogusComment</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(s, </span><span style="color:#9ECBFF;">&#39;&lt;![CDATA[&#39;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理 &lt;![CDATA[ 节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ns </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HTML */</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">              node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseCDATA</span><span style="color:#E1E4E8;">(context, ancestors) </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* CDATA_IN_HTML_CONTENT */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">              node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseBogusComment</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* INCORRECTLY_OPENED_COMMENT */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseBogusComment</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 处理 &lt;/ 结束标签 </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s.length </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// s 长度为 2，说明代码结尾是 &lt;/，报错 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* EOF_BEFORE_TAG_NAME */</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// &lt;/&gt; 缺少结束标签，报错 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* MISSING_END_TAG_NAME */</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">[a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">z]</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">i.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(s[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">])) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 多余的结束标签 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* X_INVALID_END_TAG */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">parseTag</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* End */</span><span style="color:#E1E4E8;">, parent) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseBogusComment</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">[a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">z]</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">i.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(s[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 解析标签元素节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">          node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseElement</span><span style="color:#E1E4E8;">(context, ancestors) </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;?&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">          node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseBogusComment</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">node) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 解析普通文本节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">      node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseText</span><span style="color:#E1E4E8;">(context, mode) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(node)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果 node 是数组，则遍历添加 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> node.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pushNode</span><span style="color:#E1E4E8;">(nodes, node[i]) </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 添加单个 node </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">pushNode</span><span style="color:#E1E4E8;">(nodes, node) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseChildren</span><span style="color:#24292E;">(context, mode, ancestors) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 父节点 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">last</span><span style="color:#24292E;">(ancestors) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> parent.ns </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HTML */</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断是否遍历结束 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isEnd</span><span style="color:#24292E;">(context, mode, ancestors)) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source </span></span>
<span class="line"><span style="color:#24292E;">    let node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> undefined </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DATA */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* RCDATA */</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">context.inVPre </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(s, context.options.delimiters[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理 { { 插值代码 </span></span>
<span class="line"><span style="color:#24292E;">        node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInterpolation</span><span style="color:#24292E;">(context, mode) </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DATA */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> s[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理 &lt; 开头的代码 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s.length </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// s 长度为 1，说明代码结尾是 &lt;，报错 </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* EOF_BEFORE_TAG_NAME */</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;!&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 处理 &lt;! 开头的代码 </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(s, </span><span style="color:#032F62;">&#39;&lt;!--&#39;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理注释节点 </span></span>
<span class="line"><span style="color:#24292E;">            node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseComment</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(s, </span><span style="color:#032F62;">&#39;&lt;!DOCTYPE&#39;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理 &lt;!DOCTYPE 节点 </span></span>
<span class="line"><span style="color:#24292E;">            node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseBogusComment</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(s, </span><span style="color:#032F62;">&#39;&lt;![CDATA[&#39;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理 &lt;![CDATA[ 节点 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ns </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HTML */</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">              node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseCDATA</span><span style="color:#24292E;">(context, ancestors) </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* CDATA_IN_HTML_CONTENT */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">              node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseBogusComment</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* INCORRECTLY_OPENED_COMMENT */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseBogusComment</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 处理 &lt;/ 结束标签 </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s.length </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// s 长度为 2，说明代码结尾是 &lt;/，报错 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* EOF_BEFORE_TAG_NAME */</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// &lt;/&gt; 缺少结束标签，报错 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* MISSING_END_TAG_NAME */</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">[a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">z]</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">i.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(s[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">])) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 多余的结束标签 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* X_INVALID_END_TAG */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">parseTag</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* End */</span><span style="color:#24292E;">, parent) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseBogusComment</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">[a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">z]</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">i.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(s[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 解析标签元素节点 </span></span>
<span class="line"><span style="color:#24292E;">          node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseElement</span><span style="color:#24292E;">(context, ancestors) </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;?&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">          node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseBogusComment</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">node) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 解析普通文本节点 </span></span>
<span class="line"><span style="color:#24292E;">      node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseText</span><span style="color:#24292E;">(context, mode) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(node)) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果 node 是数组，则遍历添加 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> node.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pushNode</span><span style="color:#24292E;">(nodes, node[i]) </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 添加单个 node </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">pushNode</span><span style="color:#24292E;">(nodes, node) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这些代码看起来很复杂，但它的思路就是自顶向下地去遍历代码，然后根据不同的情况尝试去解析代码，然后把生成的 node 添加到 AST nodes 数组中。在解析的过程中，解析上下文 context 的状态也是在不断发生变化的，我们可以通过 context.source 拿到当前解析剩余的代码 s，然后根据 s 不同的情况走不同的分支处理逻辑。在解析的过程中，可能会遇到各种错误，都会通过 emitError 方法报错。</p><p>我们没有必要去了解所有代码的分支细节，只需要知道大致的解析思路即可，因此我们这里只分析四种情况：注释节点的解析、插值的解析、普通文本的解析，以及元素节点的解析。</p><ul><li>注释节点的解析</li></ul><p>首先，我们来看注释节点的解析过程，它会解析模板中的注释节点，比如 <code>&lt;!-- 这是一段注释 --&gt;，</code> 即当前代码 s 是以 <code>&lt;!--</code> 开头的字符串，则走到注释节点的解析处理逻辑。</p><p>我们来看 parseComment 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseComment</span><span style="color:#E1E4E8;">(context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCursor</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">  let content </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 常规注释的结束符 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/--</span><span style="color:#E1E4E8;">(\\</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?&gt;/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(context.source) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">match) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 没有匹配的注释结束符 </span></span>
<span class="line"><span style="color:#E1E4E8;">    content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, context.source.length) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* EOF_IN_COMMENT */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (match.index </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 非法的注释符号 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ABRUPT_CLOSING_OF_EMPTY_COMMENT */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (match[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 注释结束符不正确 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* INCORRECTLY_CLOSED_COMMENT */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取注释的内容 </span></span>
<span class="line"><span style="color:#E1E4E8;">    content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, match.index) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 截取到注释结尾之间的代码，用于后续判断嵌套注释 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, match.index) </span></span>
<span class="line"><span style="color:#E1E4E8;">    let prevIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, nestedIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断嵌套注释符的情况，存在即报错 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((nestedIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;!--&#39;</span><span style="color:#E1E4E8;">, prevIndex)) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, nestedIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> prevIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nestedIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> s.length) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NESTED_COMMENT */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">      prevIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nestedIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 前进代码到注释结束符后 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, match.index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> match[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> prevIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMMENT */</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    content, </span></span>
<span class="line"><span style="color:#E1E4E8;">    loc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSelection</span><span style="color:#E1E4E8;">(context, start) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseComment</span><span style="color:#24292E;">(context) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCursor</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">  let content </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 常规注释的结束符 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> match </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/--</span><span style="color:#24292E;">(\\</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?&gt;/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(context.source) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">match) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 没有匹配的注释结束符 </span></span>
<span class="line"><span style="color:#24292E;">    content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, context.source.length) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* EOF_IN_COMMENT */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (match.index </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 非法的注释符号 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ABRUPT_CLOSING_OF_EMPTY_COMMENT */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (match[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 注释结束符不正确 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* INCORRECTLY_CLOSED_COMMENT */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取注释的内容 </span></span>
<span class="line"><span style="color:#24292E;">    content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, match.index) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 截取到注释结尾之间的代码，用于后续判断嵌套注释 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, match.index) </span></span>
<span class="line"><span style="color:#24292E;">    let prevIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, nestedIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断嵌套注释符的情况，存在即报错 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((nestedIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;!--&#39;</span><span style="color:#24292E;">, prevIndex)) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, nestedIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> prevIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nestedIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> s.length) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NESTED_COMMENT */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">      prevIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nestedIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 前进代码到注释结束符后 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, match.index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> match[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> prevIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMMENT */</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    content, </span></span>
<span class="line"><span style="color:#24292E;">    loc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">(context, start) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其实，parseComment 的实现很简单，首先它会利用注释结束符的正则表达式去匹配代码，找出注释结束符。如果没有匹配到或者注释结束符不合法，都会报错。</p><p>如果找到合法的注释结束符，则获取它中间的注释内容 content，然后截取注释开头到结尾之间的代码，并判断是否有嵌套注释，如果有嵌套注释也会报错。</p><p>接着就是通过调用 advanceBy 前进代码到注释结束符后，这个函数在整个模板解析过程中经常被调用，它的目的是用来前进代码，更新 context 解析上下文，我们来看一下它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, numberOfCharacters) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { source } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新 context 的 offset、line、column </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">advancePositionWithMutation</span><span style="color:#E1E4E8;">(context, source, numberOfCharacters) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新 context 的 source </span></span>
<span class="line"><span style="color:#E1E4E8;">  context.source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(numberOfCharacters) </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">advancePositionWithMutation</span><span style="color:#E1E4E8;">(pos, source, numberOfCharacters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source.length) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  let linesCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  let lastNewLinePos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> numberOfCharacters; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (source.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* newline char code */</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      linesCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      lastNewLinePos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  pos.offset </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> numberOfCharacters </span></span>
<span class="line"><span style="color:#E1E4E8;">  pos.line </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> linesCount </span></span>
<span class="line"><span style="color:#E1E4E8;">  pos.column </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    lastNewLinePos </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> pos.column </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> numberOfCharacters </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> numberOfCharacters </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> lastNewLinePos </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> pos </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, numberOfCharacters) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { source } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新 context 的 offset、line、column </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">advancePositionWithMutation</span><span style="color:#24292E;">(context, source, numberOfCharacters) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新 context 的 source </span></span>
<span class="line"><span style="color:#24292E;">  context.source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(numberOfCharacters) </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">advancePositionWithMutation</span><span style="color:#24292E;">(pos, source, numberOfCharacters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source.length) { </span></span>
<span class="line"><span style="color:#24292E;">  let linesCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  let lastNewLinePos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> numberOfCharacters; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (source.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* newline char code */</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      linesCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      lastNewLinePos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  pos.offset </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> numberOfCharacters </span></span>
<span class="line"><span style="color:#24292E;">  pos.line </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> linesCount </span></span>
<span class="line"><span style="color:#24292E;">  pos.column </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    lastNewLinePos </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> pos.column </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> numberOfCharacters </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> numberOfCharacters </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lastNewLinePos </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pos </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>advanceBy 的实现很简单，主要就是更新解析上下文 context 中的 source 来前进代码，同时更新 offset、line、column 等和代码位置相关的属性。</p><p>为了更直观地说明 advanceBy 的作用，前面的示例可以通过下图表示：</p>`,50),r=s(`<p>经过 advanceBy 前进代码到注释结束符后，表示注释部分代码处理完毕，可以继续解析后续代码了。</p><p>parseComment 最终返回的值就是一个描述注释节点的对象，其中 type 表示它是一个注释节点，content 表示注释的内容，loc 表示注释的代码开头和结束的位置信息。</p><ul><li>插值的解析</li></ul><p>接下来，我们来看插值的解析过程，它会解析模板中的插值，比如 <code>{ { msg }}</code> ，即当前代码 s 是以 { { 开头的字符串，且不在 v-pre 指令的环境下（v-pre 会跳过插值的解析），则会走到插值的解析处理逻辑 parseInterpolation 函数，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseInterpolation</span><span style="color:#E1E4E8;">(context, mode) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从配置中获取插值开始和结束分隔符，默认是 { { 和 }} </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [open, close] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.options.delimiters </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> closeIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(close, open.length) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (closeIndex </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* X_MISSING_INTERPOLATION_END */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> undefined </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCursor</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 代码前进到插值开始分隔符后 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, open.length) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 内部插值开始位置 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> innerStart </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCursor</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 内部插值结束位置 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> innerEnd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCursor</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 插值原始内容的长度 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> rawContentLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> closeIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> open.length </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 插值原始内容 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> rawContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, rawContentLength) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取插值的内容，并前进代码到插值的内容后 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> preTrimContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseTextData</span><span style="color:#E1E4E8;">(context, rawContentLength, mode) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preTrimContent.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 内容相对于插值开始分隔符的头偏移 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> startOffset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preTrimContent.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(content) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (startOffset </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新内部插值开始位置 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">advancePositionWithMutation</span><span style="color:#E1E4E8;">(innerStart, rawContent, startOffset) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 内容相对于插值结束分隔符的尾偏移 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> endOffset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rawContentLength </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> (preTrimContent.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> content.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> startOffset) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新内部插值结束位置 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">advancePositionWithMutation</span><span style="color:#E1E4E8;">(innerEnd, rawContent, endOffset); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 前进代码到插值结束分隔符后 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, close.length) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* INTERPOLATION */</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    content</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      isStatic</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      isConstant</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      content, </span></span>
<span class="line"><span style="color:#E1E4E8;">      loc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSelection</span><span style="color:#E1E4E8;">(context, innerStart, innerEnd) </span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span></span>
<span class="line"><span style="color:#E1E4E8;">    loc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSelection</span><span style="color:#E1E4E8;">(context, start) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseInterpolation</span><span style="color:#24292E;">(context, mode) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从配置中获取插值开始和结束分隔符，默认是 { { 和 }} </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [open, close] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.options.delimiters </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> closeIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(close, open.length) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (closeIndex </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* X_MISSING_INTERPOLATION_END */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> undefined </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCursor</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 代码前进到插值开始分隔符后 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, open.length) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 内部插值开始位置 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> innerStart </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCursor</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 内部插值结束位置 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> innerEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCursor</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 插值原始内容的长度 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> rawContentLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> closeIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> open.length </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 插值原始内容 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> rawContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, rawContentLength) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取插值的内容，并前进代码到插值的内容后 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> preTrimContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseTextData</span><span style="color:#24292E;">(context, rawContentLength, mode) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preTrimContent.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 内容相对于插值开始分隔符的头偏移 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> startOffset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preTrimContent.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(content) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (startOffset </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新内部插值开始位置 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">advancePositionWithMutation</span><span style="color:#24292E;">(innerStart, rawContent, startOffset) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 内容相对于插值结束分隔符的尾偏移 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> endOffset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rawContentLength </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (preTrimContent.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> content.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startOffset) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新内部插值结束位置 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">advancePositionWithMutation</span><span style="color:#24292E;">(innerEnd, rawContent, endOffset); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 前进代码到插值结束分隔符后 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, close.length) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* INTERPOLATION */</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    content</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      isStatic</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      isConstant</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      content, </span></span>
<span class="line"><span style="color:#24292E;">      loc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">(context, innerStart, innerEnd) </span></span>
<span class="line"><span style="color:#24292E;">    }, </span></span>
<span class="line"><span style="color:#24292E;">    loc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">(context, start) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>parseInterpolation 的实现也很简单，首先它会尝试找插值的结束分隔符，如果找不到则报错。</p><p>如果找到，先前进代码到插值开始分隔符后，然后通过 parseTextData 获取插值中间的内容并前进代码到插值内容后，除了普通字符串，parseTextData 内部会处理一些 HTML 实体符号比如 <code>&amp;nbsp</code> 。由于插值的内容可能是前后有空白字符的，所以最终返回的 content 需要执行一下 trim 函数。</p><p>为了准确地反馈插值内容的代码位置信息，我们使用了 innerStart 和 innerEnd 去记录插值内容（不包含空白字符）的代码开头和结束位置。</p><p>接着就是前进代码到插值结束分隔符后，表示插值部分代码处理完毕，可以继续解析后续代码了。</p><p>parseInterpolation 最终返回的值就是一个描述插值节点的对象，其中 type 表示它是一个插值节点，loc 表示插值的代码开头和结束的位置信息，而 content 又是一个描述表达式节点的对象，其中 type 表示它是一个表达式节点，loc 表示内容的代码开头和结束的位置信息，content 表示插值的内容。</p><ul><li>普通文本的解析</li></ul><p>接下来，我们来看普通文本的解析过程，它会解析模板中的普通文本，比如 <code>This is an app</code> ，即当前代码 s 既不是以 { { 插值分隔符开头的字符串，也不是以 &lt; 开头的字符串，则走到普通文本的解析处理逻辑，我们来看 parseText 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseText</span><span style="color:#E1E4E8;">(context, mode) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 文本结束符 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> endTokens </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, context.options.delimiters[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]] </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* CDATA */</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// CDATA 标记 XML 中的纯文本 </span></span>
<span class="line"><span style="color:#E1E4E8;">    endTokens.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;]]&gt;&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  let endIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source.length </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 遍历文本结束符，匹配找到结束的位置 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> endTokens.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(endTokens[i], </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> endIndex </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> index) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      endIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCursor</span><span style="color:#E1E4E8;">(context) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取文本的内容，并前进代码到文本的内容后 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseTextData</span><span style="color:#E1E4E8;">(context, endIndex, mode) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    content, </span></span>
<span class="line"><span style="color:#E1E4E8;">    loc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSelection</span><span style="color:#E1E4E8;">(context, start) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseText</span><span style="color:#24292E;">(context, mode) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 文本结束符 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> endTokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, context.options.delimiters[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]] </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* CDATA */</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// CDATA 标记 XML 中的纯文本 </span></span>
<span class="line"><span style="color:#24292E;">    endTokens.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;]]&gt;&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  let endIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source.length </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 遍历文本结束符，匹配找到结束的位置 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> endTokens.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(endTokens[i], </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> endIndex </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> index) { </span></span>
<span class="line"><span style="color:#24292E;">      endIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCursor</span><span style="color:#24292E;">(context) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取文本的内容，并前进代码到文本的内容后 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseTextData</span><span style="color:#24292E;">(context, endIndex, mode) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    content, </span></span>
<span class="line"><span style="color:#24292E;">    loc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">(context, start) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样，parseText 的实现很简单。对于一段文本来说，都是在遇到 &lt; 或者插值分隔符 { { 结束，所以会遍历这些结束符，匹配并找到文本结束的位置，然后执行 parseTextData 获取文本的内容，并前进代码到文本的内容后。</p><p>parseText 最终返回的值就是一个描述文本节点的对象，其中 type 表示它是一个文本节点，content 表示文本的内容，loc 表示文本的代码开头和结束的位置信息。</p><p>这部分内容比较多，所以本课时的内容就先到这。下节课中，我们接着分析元素节点，继续解析 template 生成 AST 的背后实现原理。</p><blockquote><p><strong>本节课的相关代码在源代码中的位置如下：</strong></p><p>packages/compiler-core/src/compile.ts</p><p>packages/compiler-core/src/parse.ts</p></blockquote>`,17);function y(i,F,u,C,q,A){const n=l("Image");return p(),o("div",null,[E,e(n,{alt:"22.png",src:"https://s0.lgstatic.com/i/image/M00/43/D2/Ciqc1F88z3mACHOrAAFRdAq-Jxw187.png"}),t(),r])}const D=a(c,[["render",y]]);export{d as __pageData,D as default};
