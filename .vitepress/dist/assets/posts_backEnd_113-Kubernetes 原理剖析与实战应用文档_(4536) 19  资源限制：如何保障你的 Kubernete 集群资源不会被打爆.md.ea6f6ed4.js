import{_ as n,j as p,o as l,g as o,k as e,Q as s}from"./chunks/framework.4e7d56ce.js";const C=JSON.parse('{"title":"设置 Requests 和 Limits ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4536) 19  资源限制：如何保障你的 Kubernete 集群资源不会被打爆.md","filePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4536) 19  资源限制：如何保障你的 Kubernete 集群资源不会被打爆.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4536) 19  资源限制：如何保障你的 Kubernete 集群资源不会被打爆.md"},c=s(`<p>你好，我是正范。</p><p>前面的课时中，我们曾提到通过 HPA 控制业务的资源水位，通过 ClusterAutoscaler 自动扩充集群的资源。但如果集群资源本身就是受限的情况下，或者一时无法短时间内扩容，那么我们该如何控制集群的整体资源水位，保障集群资源不会被&quot;打爆&quot;？</p><p>今天我们就来看看 Kubernetes 中都有哪些能力可以帮助我们保障集群资源？</p><h3 id="设置-requests-和-limits" tabindex="-1">设置 Requests 和 Limits <a class="header-anchor" href="#设置-requests-和-limits" aria-label="Permalink to &quot;设置 Requests 和 Limits&quot;">​</a></h3><p>Kubernetes 中对容器的资源限制实际上是通过 <a href="https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html" target="_blank" rel="noreferrer">CGroup</a> 来实现的。CGroup 是 <a href="https://baike.baidu.com/item/Linux%E5%86%85%E6%A0%B8/10142820" target="_blank" rel="noreferrer">Linux 内核</a>的一个功能，用来限制、控制与分离一个<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B%E7%BB%84/1910809" target="_blank" rel="noreferrer">进程组</a>的资源（如 CPU、内存、磁盘输入输出等）。每一种资源比如 CPU、内存等，都有对应的 CGroup 。如果我们没有给 Pod 设置任何的 CPU 和 内存限制，这就意味着 Pod 可以消耗宿主机节点上足够多的 CPU 和 内存。</p><p>所以一般来说，我们都会对 Pod 进行资源限制， Kubernetes 通过给 Pod 设置资源请求（Requests）和资源限制（Limits）来实现这个资源限制。</p><ul><li><p>Requests 表示容器可以得到的资源，或者可以理解为 Pod 运行的最低资源要求。</p></li><li><p>Limits 表示着容器最多可以得到的资源。Pod 运行过程中，比如 CPU 使用量会增加，那么最多能使用多少内存，这就是资源限制。</p></li></ul><p>这里有一点需要注意的就是，Limits 永远不要低于 Requests，如果设置不对，Kubernetes 也会拒绝 Pod 的创建。</p><p>通过设置 Requests 和 Limits，我们既保证了 Pod 可以运行，又限制 Pod 能使用多少资源。这样能避免某些恶意的容器&quot;吞噬&quot;宿主机的资源，也可以避免某些容器异常导致宿主机 <a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA?fromtitle=out+of+memory&amp;fromid=16247440" target="_blank" rel="noreferrer">OOM</a>，从而引起该节点上的所有 Pod 异常，甚至导致整个集群&quot;雪崩&quot;。</p><p>我们来看看个 Requests 和 Limits 的例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-resource-demo</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo-container-1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:1.19</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">requests</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;64Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;250m&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;128Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;500m&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo-container-2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:1.19</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">requests</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;64Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;250m&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;128Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;500m&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-resource-demo</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo-container-1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:1.19</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">requests</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;64Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;250m&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;128Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;500m&quot;</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo-container-2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:1.19</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">requests</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;64Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;250m&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;128Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;500m&quot;</span></span></code></pre></div><p>如上所示，Pod 中的每个容器都可以设置自己的 Requests 和 Limits，每个容器使用的资源都不能超过各自的限制。当 Pod 在调度时，会把这些容器的 Requests 和 Limits 进行相加，当作整个 Pod 的资源申请量。因此在上面的示例中，Pod 的总 Requests 为 500 mCPU，128 MiB 内存，总 Limits 为 1 CPU和 256 MiB。关于单位的含义，<a href="https://kubernetes.io/zh/docs/concepts/configuration/manage-resources-containers/#pod-%E5%92%8C-%E5%AE%B9%E5%99%A8%E7%9A%84%E8%B5%84%E6%BA%90%E8%AF%B7%E6%B1%82%E5%92%8C%E7%BA%A6%E6%9D%9F" target="_blank" rel="noreferrer">官方文档</a>有更详细的说明。</p><p>一旦 Pod 成功被调度后，Kubernetes 会将其调度到可以为其提供该资源的节点上。</p><p>而根据设置的 Requests 和 Limit，Kubernetes 又将其分为不同的 QoS (Quality of Service)级别。Kubernetes 中 Pod 是最小的单元，所以 QoS 是对整个 Pod 而言而非某个容器。</p><p>Kubernetes 支持了三种 QoS 级别，分别为BestEffort、Burstable 和 Guranteed，当资源紧张时 Kubernetes 会根据它们的分级决定调度和驱逐策略（这个我会在后面的课程中单独说明，在此略过），这三个分级分别代表：</p><ul><li><p>BestEffort表示 Pod 中没有一个容器设置了 Requests 或 Limits，它的优先级最低；</p></li><li><p>Burstable表示 Pod 中每个容器至少定义了 CPU 或 Memory 的 Requests，或者 Requests 和 Limits 不相等，它属于中等优先级；</p></li><li><p>Guranteed则表示 Pod 中每个容器 Requests 和 Limits 都相等，这类 Pod 的运行优先级最高。简单来说就是cpu.limits = cpu.requests，memory.limits = memory.requests。</p></li></ul><p>你可以通过 QoS 的代码来研究下 Kubernetes 是如何确定 Pod 对应的 QoS 的。这里，我们通过一个 Burstable Pod 的例子，来直观感受下 Kubernetes 的资源限制能力。</p><h4 id="一个-burstable-pod-的例子" tabindex="-1">一个 Burstable Pod 的例子 <a class="header-anchor" href="#一个-burstable-pod-的例子" aria-label="Permalink to &quot;一个 Burstable Pod 的例子&quot;">​</a></h4><p>这是一个 Burstable Pod 的 YAML 文件，该 Pod 内只有一个容器，且为容器的内存设置了 Requests 和 Limits，分别为 50 Mi 和 100 Mi。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">memory-burstable-demo</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">memory-demo</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">polinux/stress</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">requests</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;50Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;100Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;stress&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">args</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;--vm&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;--vm-bytes&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;250M&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;--vm-hang&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">memory-burstable-demo</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">memory-demo</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">polinux/stress</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">requests</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;50Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;100Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;stress&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">args</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;--vm&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;--vm-bytes&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;250M&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;--vm-hang&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>我们通过<code>kubectl create</code>创建好了以后，来查看该 Pod 的状态：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">po</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                                  </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">memory-burstable-demo</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">OOMKilled</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">po</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                                  </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">     </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">        </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">memory-burstable-demo</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">       </span><span style="color:#032F62;">OOMKilled</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">s</span></span></code></pre></div><p>可以看到该 Pod 被 OOM 杀掉了，因为限制使用100M，而实际使用 250M。那么如果是 CPU 使用超过了 Limits 呢？</p><p>这是一个为容器的 CPU 资源设置了 Requests 和 Limits 的 Pod YAML 文件：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">cpu-burstable-demo</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">cpu-demo</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">vish/stress</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">requests</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0.5&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">args</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">-cpus</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">&quot;2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">cpu-burstable-demo</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">cpu-demo</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">vish/stress</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">requests</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0.5&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">args</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">-cpus</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">&quot;2&quot;</span></span></code></pre></div><p>这里我们同样先用<code>kubectl create</code>创建，然后用<code>kubectl top</code>来查看容器 cpu-demo 的资源使用情况：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">top</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu-burstable-demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu-demo</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">CPU</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">cores</span><span style="color:#E1E4E8;">)   </span><span style="color:#9ECBFF;">MEMORY</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">bytes</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">cpu-demo</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1000</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">Mi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">top</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu-burstable-demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu-demo</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">       </span><span style="color:#032F62;">CPU</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">cores</span><span style="color:#24292E;">)   </span><span style="color:#032F62;">MEMORY</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">bytes</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">cpu-demo</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1000</span><span style="color:#032F62;">m</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">Mi</span></span></code></pre></div><p>可以看到 Pod 的内存使用虽然超过了 Limits，实际使用的 CPU 被限制只有 1000 m，但是不会被 OOM 掉，这是因为 CPU 不同于内存，CPU 是可压缩资源（<a href="https://www.bmc.com/blogs/kubernetes-compute-resources/" target="_blank" rel="noreferrer">Compressible Resource</a>），而内存是不可压缩资源(Incompressible Resource)。</p><p>如果只是为了限制资源，用 Requests 和 Limits 就足够了，那么为何 Kubernetes 还要单独引入 QoS 的概念呢？要回答这个问题，我们就要来看看 QoS 的主要作用。</p><h4 id="qos-的主要作用" tabindex="-1">QoS 的主要作用 <a class="header-anchor" href="#qos-的主要作用" aria-label="Permalink to &quot;QoS 的主要作用&quot;">​</a></h4><p>集群运行一段时间以后，Node 上会有很多 Running 的 Pod。当 Node 上的资源紧张时，可能由于某些BestEffort的 Pod 使用的 CPU 和 Memory 越来越多，或者宿主机某些进程（例如 Kubelet、Docker）占用了 CPU 和 Memory，这个时候Kubernetes 就会根据 QoS 的优先级来选择 Kill 掉一部分 Pod，哪些会先被 Kill 掉呢？</p><p>当然是优先级最低的，即BestEffort类型的 Pod，占用的资源越多越优先被 Kill 掉。如果所有BestEffort的 Pod 都被杀死了但是资源依旧紧张，那么接下来会选择 Kill 中等优先级的，即Burstable类型的，之后以此类推。</p><p>这里 QoS 的一个作用就是跟<a href="https://www.baidu.com/s?ie=utf-8&amp;tn=baidu&amp;wd=oom%20score" target="_blank" rel="noreferrer">oom_score</a>进行挂钩。Kubernetes 会根据 QoS 设置 OOM 的评分调整参数oom_score_adj，有兴趣可以阅读<a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/qos/policy.go#L34" target="_blank" rel="noreferrer">详细的计算代码</a>。当发生 OOM 时，oom_score_adj数值越高就越优先被 Kill。这里我给你展示了三个 QoS 对应的oom_score_adj计算公式。</p>`,33),r=s(`<p>除此之外，QoS 还与 Pod 驱逐有关系。当节点的内存、CPU 资源不足时，Kubelet 会开始驱逐节点上的 Pod，它会依据 QoS 的优先级确定驱逐的顺序，跟上面 OOM kill 的次序一样。我们会在后续的课程中单独讲这部分。</p><p>在实际使用的时候，我们可能会担心某些 Pod 申请了过大的资源，恶意占用，那么我们又该如何避免呢？</p><h3 id="通过-limitrange-设置资源防线" tabindex="-1">通过 LimitRange 设置资源防线 <a class="header-anchor" href="#通过-limitrange-设置资源防线" aria-label="Permalink to &quot;通过 LimitRange 设置资源防线&quot;">​</a></h3><p>Kubernetes 提供了 LimitRange 可以帮助你限定 CPU 和 Memory 的申请范围。</p><p>这是一个完整的 LimitRange 定义，你可以根据需要按需选择进行配置。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">LimitRange</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mem-limit-range</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">example</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">default</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;"># 默认 limit</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">512Mi</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">defaultRequest</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;"># 默认 request</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">256Mi</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.5</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">max</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;"># 最大 limit</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">800Mi</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">min</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;"># 最小 request</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">100Mi</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.3</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">maxLimitRequestRatio</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;"># limit/request 的最大比率</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Container</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 支持 Container / Pod / PersistentVolumeClaim 三种类型</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">LimitRange</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mem-limit-range</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">example</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">default</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;"># 默认 limit</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">512Mi</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">defaultRequest</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;"># 默认 request</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">256Mi</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.5</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">max</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;"># 最大 limit</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">800Mi</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">min</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;"># 最小 request</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">100Mi</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">maxLimitRequestRatio</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;"># limit/request 的最大比率</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Container</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 支持 Container / Pod / PersistentVolumeClaim 三种类型</span></span></code></pre></div><ul><li><p>default 字段可以设置 Pod 中容器的默认 Limits；</p></li><li><p>defaulRequest 字段可以设置 Pod 中容器的默认 Requests；</p></li><li><p>max 字段可以设置 Pod 中容器可以设置的最大 Limits，default 字段不能高于此值。同样，在容器上设置的 Limits 也不能高于此值。在使用的时候需要注意的是，如果设置了该字段而又没有设置 default，那么所有未显式设置这些值的容器都将使用此处的最大值作为 Limits。</p></li><li><p>min 字段可以设置 Pod 中容器可以设置的最小 Requests。defaulRequest 字段不能低于此值。同样，在容器上设置的 Requests 也不能低于此值。同样需要注意的是，如果设置了该字段而又没有设置 defaulRequest，那么所有未显式设置这些值的容器都将使用此处的最小值作为 Requests。</p></li></ul><p>LimitRange 会设置默认的申请、限制的值，它会自动在 Pod 创建时就注入 Container 中。</p><blockquote><p>你可以参照如下几个官方文档中的详细例子学习体会一下：<br><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/manage-resources/cpu-constraint-namespace/" target="_blank" rel="noreferrer">如何配置每个命名空间最小和最大的 CPU 约束</a><br><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/manage-resources/memory-constraint-namespace/" target="_blank" rel="noreferrer">如何配置每个命名空间最小和最大的内存约束</a><br><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/" target="_blank" rel="noreferrer">如何配置每个命名空间默认的 CPU 申请值和限制值</a><br><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/" target="_blank" rel="noreferrer">如何配置每个命名空间默认的内存申请值和限制值</a><br><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/limit-storage-consumption/#limitrange-to-limit-requests-for-storage" target="_blank" rel="noreferrer">如何配置每个命名空间最小和最大存储使用量</a></p></blockquote><p>除了对单个 Pod、Container、PVC 做资源限制外，我们还可以对某个 namespace 下的资源总量进行限制。</p><h3 id="resourcequota-设置资源总量限制" tabindex="-1">ResourceQuota 设置资源总量限制 <a class="header-anchor" href="#resourcequota-设置资源总量限制" aria-label="Permalink to &quot;ResourceQuota 设置资源总量限制&quot;">​</a></h3><p>我们可以使用 ResourceQuota 对 namespace 内的资源总量进行限制，比如这个例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ResourceQuota</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">compute-resources</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">#在demo空间下</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">hard</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">requests.cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;">#cpu预配置10</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">requests.memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">100Gi</span><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">#内存预配置100Gi</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">limits.cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;40&quot;</span><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">#cpu最大不超过40</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">limits.memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">200Gi</span><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">#内存最大不超过200Gi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ResourceQuota</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">compute-resources</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">#在demo空间下</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">hard</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">requests.cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">             </span><span style="color:#6A737D;">#cpu预配置10</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">requests.memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">100Gi</span><span style="color:#24292E;">         </span><span style="color:#6A737D;">#内存预配置100Gi</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">limits.cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;40&quot;</span><span style="color:#24292E;">               </span><span style="color:#6A737D;">#cpu最大不超过40</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">limits.memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">200Gi</span><span style="color:#24292E;">           </span><span style="color:#6A737D;">#内存最大不超过200Gi</span></span></code></pre></div><p>你可以看到它有四个部分，每个部分都是可选的，你可以根据自己的需要进行组合。</p><ul><li><p>requests.cpu 是该命名空间中所有容器的 CPU Requests 总和。在上面的例子中，你可以拥有10 个具有 1 个 CPU 请求的容器，或者 5 个具有 2 个 CPU 请求的容器。只要命名空间 demo 中所有容器的 CPU Requests 总和小于 10 即可。</p></li><li><p>requests.memory 是该命名空间中所有容器的 Memory Requests 总和。同 CPU 一样，只要该命名空间中内存的总请求小于100Gi 即可。</p></li><li><p>limits.cpu 是命名空间中所有容器的 CPU Limits 的总和。和 requests.cpu 一样，只不过这里是 Limits。</p></li><li><p>limits.memory 是命名空间中所有容器的内存 Limits 的总和。和 requests.memory 一样，这里也是指 Limits。</p></li></ul><p>除了 CPU 和内存这类资源以外，ResourceQuota 还支持扩展资源，详见<a href="https://kubernetes.io/zh/docs/concepts/policy/resource-quotas/#%E6%89%A9%E5%B1%95%E8%B5%84%E6%BA%90%E7%9A%84%E8%B5%84%E6%BA%90%E9%85%8D%E9%A2%9D" target="_blank" rel="noreferrer">官方文档的说明</a>。</p><p>ResourceQuota 的功能非常强大，还可以对对象的数量进行限制。比如这个例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ResourceQuota</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">object-counts</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">#在demo命名空间下</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">hard</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">configmaps</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">#最多10个configmap</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">pods</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;20&quot;</span><span style="color:#E1E4E8;">                     </span><span style="color:#6A737D;">#最多20个pod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">persistentvolumeclaims</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;4&quot;</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#最多10个pvc</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">replicationcontrollers</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;20&quot;</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">#最多20个rc</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">secrets</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">#最多10个secrets</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;">#最多10个service</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">services.loadbalancers</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#最多10个lb类型的service</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">requests.nvidia.com/gpu</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">#最多10个GPU</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ResourceQuota</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">object-counts</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">#在demo命名空间下</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">hard</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">configmaps</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">               </span><span style="color:#6A737D;">#最多10个configmap</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">pods</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;20&quot;</span><span style="color:#24292E;">                     </span><span style="color:#6A737D;">#最多20个pod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">persistentvolumeclaims</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#最多10个pvc</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">replicationcontrollers</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;20&quot;</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">#最多20个rc</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">secrets</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">#最多10个secrets</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">services</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;">#最多10个service</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">services.loadbalancers</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#最多10个lb类型的service</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">requests.nvidia.com/gpu</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">#最多10个GPU</span></span></code></pre></div><p>我们就可以限制该命名空间下最多可以创建 20 个 Pod，10 个 Configmap 等。</p><h3 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h3><p>对于一些重要的线上应用，我们要合理地设置 Requests 和 Limits，且最好使两者的设置相等，当节点资源不足时，Kubernetes 会优先保证这些 Pod 的正常运行。</p><p>此外，你可以用 ResourceQuota 限制命名空间中所有容器的内存请求总量、内存限制总量、CPU 请求总量、CPU 限制总量等。而如果你想对单个容器而不是所有容器进行限制，就可以使用 LimitRange。</p><p>到这里这节课就结束了，如果你对本节课有什么想法或者疑问，欢迎你在留言区留言，我们一起讨论。</p>`,23);function E(y,i,u,m,d,F){const a=p("Image");return l(),o("div",null,[c,e(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/64/34/Ciqc1F-X4kSAWDiXAABGicJIZQU816.png"}),r])}const A=n(t,[["render",E]]);export{C as __pageData,A as default};
