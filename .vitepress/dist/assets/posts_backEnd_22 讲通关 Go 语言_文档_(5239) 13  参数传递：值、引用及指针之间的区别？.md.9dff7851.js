import{_ as o,j as e,o as t,g as c,k as p,h as n,Q as l,s}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"修改参数 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5239) 13  参数传递：值、引用及指针之间的区别？.md","filePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5239) 13  参数传递：值、引用及指针之间的区别？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/22 讲通关 Go 语言_文档/(5239) 13  参数传递：值、引用及指针之间的区别？.md"},y=l(`<p>上节课我留了一个思考题，关于指向接口的指针的思考。在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=536#/detail/pc?id=5232" target="_blank" rel="noreferrer">&quot;第 6 讲| struct 和 interface：结构体与接口都实现了哪些功能？&quot;</a>中，你已经知道了如何实现一个接口，并且也知道如果值接收者实现了接口，那么值的指针也就实现了该接口。现在我们再一起来复习一下接口实现的知识，然后再解答关于指向接口的指针的思考题。</p><p>在下面的代码中，值类型 address 作为接收者实现了接口 fmt.Stringer，那么它的指针类型 *address 也就实现了接口 fmt.Stringer。</p><p><em><strong>ch13/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   province </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">   city </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (addr address) </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">()  </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;the addr is </span><span style="color:#79B8FF;">%s%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,addr.province,addr.city)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   province </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">   city </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (addr address) </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">()  </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;the addr is </span><span style="color:#005CC5;">%s%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,addr.province,addr.city)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在下面的代码示例中，我定义了值类型的变量 add，然后把它和它的指针 &amp;add 都作为参数传给函数 printString，发现都是可以的，并且代码可以成功运行。这也证明了当值类型作为接收者实现了某接口时，它的指针类型也同样实现了该接口。</p><p><em><strong>ch13/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   add </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> address{province: </span><span style="color:#9ECBFF;">&quot;北京&quot;</span><span style="color:#E1E4E8;">, city: </span><span style="color:#9ECBFF;">&quot;北京&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">printString</span><span style="color:#E1E4E8;">(add)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">printString</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">add)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printString</span><span style="color:#E1E4E8;">(s fmt.Stringer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(s.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   add </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> address{province: </span><span style="color:#032F62;">&quot;北京&quot;</span><span style="color:#24292E;">, city: </span><span style="color:#032F62;">&quot;北京&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">printString</span><span style="color:#24292E;">(add)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">printString</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">add)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printString</span><span style="color:#24292E;">(s fmt.Stringer) {</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(s.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>基于以上结论，我们继续分析，看是否可以定义一个指向接口的指针。如下所示：</p><p><em><strong>ch13/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> si fmt.Stringer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">address{province: </span><span style="color:#9ECBFF;">&quot;上海&quot;</span><span style="color:#E1E4E8;">,city: </span><span style="color:#9ECBFF;">&quot;上海&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">printString</span><span style="color:#E1E4E8;">(si)</span></span>
<span class="line"><span style="color:#E1E4E8;">sip</span><span style="color:#F97583;">:=&amp;</span><span style="color:#E1E4E8;">si</span></span>
<span class="line"><span style="color:#79B8FF;">printString</span><span style="color:#E1E4E8;">(sip)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> si fmt.Stringer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">address{province: </span><span style="color:#032F62;">&quot;上海&quot;</span><span style="color:#24292E;">,city: </span><span style="color:#032F62;">&quot;上海&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">printString</span><span style="color:#24292E;">(si)</span></span>
<span class="line"><span style="color:#24292E;">sip</span><span style="color:#D73A49;">:=&amp;</span><span style="color:#24292E;">si</span></span>
<span class="line"><span style="color:#005CC5;">printString</span><span style="color:#24292E;">(sip)</span></span></code></pre></div><p>在这个示例中，因为类型 address 已经实现了接口 fmt.Stringer，所以它的值可以被赋予变量 si，而且 si 也可以作为参数传递给函数 printString。</p><p>接着你可以使用 sip:=&amp;si 这样的操作获得一个指向接口的指针，这是没有问题的。不过最终你无法把指向接口的指针 sip 作为参数传递给函数 printString，Go 语言的编译器会提示你如下错误信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">main.go</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">42</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cannot use </span><span style="color:#B392F0;">sip</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">fmt.Stringer) as type fmt.Stringer in argument to printString</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">fmt.Stringer is pointer to interface, not interface</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">main.go</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">42</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cannot use </span><span style="color:#6F42C1;">sip</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">fmt.Stringer) as type fmt.Stringer in argument to printString</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">fmt.Stringer is pointer to interface, not interface</span></span></code></pre></div><p>于是可以总结为：虽然指向具体类型的指针可以实现一个接口，但是指向接口的指针永远不可能实现该接口。</p><p>所以你几乎从不需要一个指向接口的指针，把它忘掉吧，不要让它在你的代码中出现。</p><p>通过这个思考题，相信你也对 Go 语言的值类型、引用类型和指针等概念有了一定的了解，但可能也存在一些迷惑。这节课我将更深入地分析这些概念。</p><h3 id="修改参数" tabindex="-1">修改参数 <a class="header-anchor" href="#修改参数" aria-label="Permalink to &quot;修改参数&quot;">​</a></h3><p>假设你定义了一个函数，并在函数里对参数进行修改，想让调用者可以通过参数获取你最新修改的值。我仍然以前面课程用到的 person 结构体举例，如下所示：</p><p><em><strong>ch13/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{name: </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">,age: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">modifyPerson</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;person name:&quot;</span><span style="color:#E1E4E8;">,p.name,</span><span style="color:#9ECBFF;">&quot;,age:&quot;</span><span style="color:#E1E4E8;">,p.age)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modifyPerson</span><span style="color:#E1E4E8;">(p person)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;李四&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   name </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">   age </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{name: </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">modifyPerson</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;person name:&quot;</span><span style="color:#24292E;">,p.name,</span><span style="color:#032F62;">&quot;,age:&quot;</span><span style="color:#24292E;">,p.age)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyPerson</span><span style="color:#24292E;">(p person)  {</span></span>
<span class="line"><span style="color:#24292E;">   p.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;李四&quot;</span></span>
<span class="line"><span style="color:#24292E;">   p.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">   age </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个示例中，我期望通过 modifyPerson 函数把参数 p 中的 name 修改为李四，把 age 修改为 20 。代码没有错误，但是运行一下，你会看到如下打印输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">person name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 张三 ,age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">person name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 张三 ,age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span></code></pre></div><p>怎么还是张三与 18 呢？我换成指针参数试试，因为在上节课中我们已经知道可以通过指针修改指向的对象数据，如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">modifyPerson</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">p)</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modifyPerson</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">person)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;李四&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">modifyPerson</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyPerson</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">person)  {</span></span>
<span class="line"><span style="color:#24292E;">   p.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;李四&quot;</span></span>
<span class="line"><span style="color:#24292E;">   p.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这些代码用于满足指针参数的修改，把接收的参数改为指针参数，以及在调用 modifyPerson 函数时，通过&amp;取地址符传递一个指针。现在再运行程序，就可以看到期望的输出了，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">person name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 李四 ,age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">person name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 李四 ,age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span></code></pre></div><h3 id="值类型" tabindex="-1">值类型 <a class="header-anchor" href="#值类型" aria-label="Permalink to &quot;值类型&quot;">​</a></h3><p>在上面的小节中，我定义的普通变量 p 是 person 类型的。在 Go 语言中，person 是一个值类型，而 &amp;p 获取的指针是 *person 类型的，即指针类型。那么为什么值类型在参数传递中无法修改呢？这也要从内存讲起。</p><p>在上节课中，我们已经知道变量的值是存储在内存中的，而内存都有一个编号，称为内存地址。所以要想修改内存中的数据，就要找到这个内存地址。现在，我来对比值类型变量在函数内外的内存地址，如下所示：</p><p><em><strong>ch13/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{name: </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">,age: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;main函数：p的内存地址为</span><span style="color:#79B8FF;">%p\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">modifyPerson</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;person name:&quot;</span><span style="color:#E1E4E8;">,p.name,</span><span style="color:#9ECBFF;">&quot;,age:&quot;</span><span style="color:#E1E4E8;">,p.age)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modifyPerson</span><span style="color:#E1E4E8;">(p person)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;modifyPerson函数：p的内存地址为</span><span style="color:#79B8FF;">%p\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;李四&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{name: </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main函数：p的内存地址为</span><span style="color:#005CC5;">%p\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">modifyPerson</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;person name:&quot;</span><span style="color:#24292E;">,p.name,</span><span style="color:#032F62;">&quot;,age:&quot;</span><span style="color:#24292E;">,p.age)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyPerson</span><span style="color:#24292E;">(p person)  {</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;modifyPerson函数：p的内存地址为</span><span style="color:#005CC5;">%p\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#24292E;">   p.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;李四&quot;</span></span>
<span class="line"><span style="color:#24292E;">   p.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，我把原来的示例代码做了更改，分别打印出在 main 函数中变量 p 的内存地址，以及在 modifyPerson 函数中参数 p 的内存地址。运行以上程序，可以看到如下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">main函数：p的内存地址为0xc0000a6020</span></span>
<span class="line"><span style="color:#E1E4E8;">modifyPerson函数：p的内存地址为0xc0000a6040</span></span>
<span class="line"><span style="color:#E1E4E8;">person name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 张三 ,age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">main函数：p的内存地址为0xc0000a6020</span></span>
<span class="line"><span style="color:#24292E;">modifyPerson函数：p的内存地址为0xc0000a6040</span></span>
<span class="line"><span style="color:#24292E;">person name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 张三 ,age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span></code></pre></div><p>你会发现它们的内存地址都不一样，这就意味着，在 modifyPerson 函数中修改的参数 p 和 main 函数中的变量 p 不是同一个，这也是我们在 modifyPerson 函数中修改参数 p，但是在 main 函数中打印后发现并没有修改的原因。</p><p>导致这种结果的原因是 <strong>Go 语言中的函数传参都是值传递。</strong> 值传递指的是传递原来数据的一份拷贝，而不是原来的数据本身。</p>`,35),E=l(`<p>（main 函数调用 modifyPerson 函数传参内存示意图）</p><p>以 modifyPerson 函数来说，在调用 modifyPerson 函数传递变量 p 的时候，Go 语言会拷贝一个 p 放在一个新的内存中，这样新的 p 的内存地址就和原来不一样了，但是里面的 name 和 age 是一样的，还是张三和 18。这就是副本的意思，变量里的数据一样，但是存放的内存地址不一样。</p><p>除了 struct 外，还有浮点型、整型、字符串、布尔、数组，这些都是值类型。</p><h3 id="指针类型" tabindex="-1">指针类型 <a class="header-anchor" href="#指针类型" aria-label="Permalink to &quot;指针类型&quot;">​</a></h3><p>指针类型的变量保存的值就是数据对应的内存地址，所以在函数参数传递是传值的原则下，拷贝的值也是内存地址。现在对以上示例稍做修改，修改后的代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{name: </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">,age: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;main函数：p的内存地址为</span><span style="color:#79B8FF;">%p\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">modifyPerson</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;person name:&quot;</span><span style="color:#E1E4E8;">,p.name,</span><span style="color:#9ECBFF;">&quot;,age:&quot;</span><span style="color:#E1E4E8;">,p.age)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modifyPerson</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">person)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;modifyPerson函数：p的内存地址为</span><span style="color:#79B8FF;">%p\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;李四&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{name: </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main函数：p的内存地址为</span><span style="color:#005CC5;">%p\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">modifyPerson</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;person name:&quot;</span><span style="color:#24292E;">,p.name,</span><span style="color:#032F62;">&quot;,age:&quot;</span><span style="color:#24292E;">,p.age)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyPerson</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">person)  {</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;modifyPerson函数：p的内存地址为</span><span style="color:#005CC5;">%p\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,p)</span></span>
<span class="line"><span style="color:#24292E;">   p.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;李四&quot;</span></span>
<span class="line"><span style="color:#24292E;">   p.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行这个示例，你会发现打印出的内存地址一致，并且数据也被修改成功了，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">main函数：p的内存地址为0xc0000a6020</span></span>
<span class="line"><span style="color:#E1E4E8;">modifyPerson函数：p的内存地址为0xc0000a6020</span></span>
<span class="line"><span style="color:#E1E4E8;">person name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 李四 ,age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">main函数：p的内存地址为0xc0000a6020</span></span>
<span class="line"><span style="color:#24292E;">modifyPerson函数：p的内存地址为0xc0000a6020</span></span>
<span class="line"><span style="color:#24292E;">person name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 李四 ,age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span></code></pre></div><p>所以指针类型的参数是永远可以修改原数据的，因为在参数传递时，传递的是内存地址。</p><blockquote><p>小提示：值传递的是指针，也是内存地址。通过内存地址可以找到原数据的那块内存，所以修改它也就等于修改了原数据。</p></blockquote><h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h3><p>下面要介绍的是引用类型，包括 map 和 chan。</p><h4 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map&quot;">​</a></h4><p>对于上面的例子，假如我不使用自定义的 person 结构体和指针，能不能用 map 达到修改的目的呢？</p><p>下面我来试验一下，如下所示：</p><p><em><strong>ch13/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   m</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   m[</span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;飞雪无情的年龄为&quot;</span><span style="color:#E1E4E8;">,m[</span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">modifyMap</span><span style="color:#E1E4E8;">(m)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;飞雪无情的年龄为&quot;</span><span style="color:#E1E4E8;">,m[</span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modifyMap</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p[</span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   m</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   m[</span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;飞雪无情的年龄为&quot;</span><span style="color:#24292E;">,m[</span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">modifyMap</span><span style="color:#24292E;">(m)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;飞雪无情的年龄为&quot;</span><span style="color:#24292E;">,m[</span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyMap</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)  {</span></span>
<span class="line"><span style="color:#24292E;">   p[</span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我定义了一个 map[string]int 类型的变量 m，存储一个 Key 为飞雪无情、Value 为 18 的键值对，然后把这个变量 m 传递给函数 modifyMap。modifyMap 函数所做的事情就是把对应的值修改为 20。现在运行这段代码，通过打印输出来看是否修改成功，结果如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">飞雪无情的年龄为 </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">飞雪无情的年龄为 </span><span style="color:#79B8FF;">20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">飞雪无情的年龄为 </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">飞雪无情的年龄为 </span><span style="color:#005CC5;">20</span></span></code></pre></div><p>确实修改成功了。你是不是有不少疑惑？没有使用指针，只是用了 map 类型的参数，按照 Go 语言值传递的原则，modifyMap 函数中的 map 是一个副本，怎么会修改成功呢？</p><p>要想解答这个问题，就要从 make 这个 Go 语言内建的函数说起。在 Go 语言中，任何创建 map 的代码（不管是字面量还是 make 函数）最终调用的都是 runtime.makemap 函数。</p><blockquote><p>小提示：用字面量或者 make 函数的方式创建 map，并转换成 makemap 函数的调用，这个转换是 Go 语言编译器自动帮我们做的。</p></blockquote><p>从下面的代码可以看到，makemap 函数返回的是一个 *hmap 类型，也就是说返回的是一个指针，所以我们创建的 map 其实就是一个 *hmap。</p><p><em><strong>src/runtime/map.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// makemap implements Go map creation for make(map[k]v, hint).</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makemap</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">maptype, hint </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, h </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">hmap) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">hmap{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//省略无关代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// makemap implements Go map creation for make(map[k]v, hint).</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makemap</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">maptype, hint </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, h </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">hmap) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">hmap{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//省略无关代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为 Go 语言的 map 类型本质上就是 *hmap，所以根据替换的原则，我刚刚定义的 modifyMap(p map) 函数其实就是 modifyMap(p *hmap)。这是不是和上一小节讲的指针类型的参数调用一样了？这也是通过 map 类型的参数可以修改原始数据的原因，因为它本质上就是个指针。</p><p>为了进一步验证创建的 map 就是一个指针，我修改上述示例，打印 map 类型的变量和参数对应的内存地址，如下面的代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//省略其他没有修改的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;main函数：m的内存地址为</span><span style="color:#79B8FF;">%p\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,m)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modifyMap</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;modifyMap函数：p的内存地址为</span><span style="color:#79B8FF;">%p\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//省略其他没有修改的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//省略其他没有修改的代码</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main函数：m的内存地址为</span><span style="color:#005CC5;">%p\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,m)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyMap</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)  {</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;modifyMap函数：p的内存地址为</span><span style="color:#005CC5;">%p\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,p)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//省略其他没有修改的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>例子中的两句打印代码是新增的，其他代码没有修改，这里就不再贴出来了。运行修改后的程序，你可以看到如下输出：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">飞雪无情的年龄为 </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">main函数：m的内存地址为0xc000060180</span></span>
<span class="line"><span style="color:#E1E4E8;">modifyMap函数：p的内存地址为0xc000060180</span></span>
<span class="line"><span style="color:#E1E4E8;">飞雪无情的年龄为 </span><span style="color:#79B8FF;">20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">飞雪无情的年龄为 </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">main函数：m的内存地址为0xc000060180</span></span>
<span class="line"><span style="color:#24292E;">modifyMap函数：p的内存地址为0xc000060180</span></span>
<span class="line"><span style="color:#24292E;">飞雪无情的年龄为 </span><span style="color:#005CC5;">20</span></span></code></pre></div><p>从输出结果可以看到，它们的内存地址一模一样，所以才可以修改原始数据，得到年龄是 20 的结果。而且我在打印指针的时候，直接使用的是变量 m 和 p，并没有用到取地址符 &amp;，这是因为它们本来就是指针，所以就没有必要再使用 &amp; 取地址了。</p><p>所以在这里，Go 语言通过 make 函数或字面量的包装为我们省去了指针的操作，让我们可以更容易地使用 map。其实就是语法糖，这是编程界的老传统了。</p><blockquote><p>注意：这里的 map 可以理解为引用类型，但是它本质上是个指针，只是可以叫作引用类型而已。在参数传递时，它还是值传递，并不是其他编程语言中所谓的引用传递。</p></blockquote><h4 id="chan" tabindex="-1">chan <a class="header-anchor" href="#chan" aria-label="Permalink to &quot;chan&quot;">​</a></h4><p>还记得我们在 Go 语言并发模块中学的 channel 吗？它也可以理解为引用类型，而它本质上也是个指针。</p><p>通过下面的源代码可以看到，所创建的 chan 其实是个 *hchan，所以它在参数传递中也和 map 一样。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makechan</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">chantype, size </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">hchan {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//省略无关代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makechan</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">chantype, size </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">hchan {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//省略无关代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>严格来说，Go 语言没有引用类型</strong>，但是我们可以把 map、chan 称为引用类型，这样便于理解。除了 map、chan 之外，Go 语言中的函数、接口、slice 切片都可以称为引用类型。</p><blockquote><p>小提示：指针类型也可以理解为是一种引用类型。</p></blockquote><h3 id="类型的零值" tabindex="-1">类型的零值 <a class="header-anchor" href="#类型的零值" aria-label="Permalink to &quot;类型的零值&quot;">​</a></h3><p>在 Go 语言中，定义变量要么通过声明、要么通过 make 和 new 函数，不一样的是 make 和 new 函数属于显式声明并初始化。如果我们声明的变量没有显式声明初始化，那么该变量的默认值就是对应类型的零值。</p><p>从下面的表格可以看到，可以称为引用类型的零值都是 nil。</p>`,42),i=s("p",null,"(各种类型的零值)",-1),d=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),m=s("p",null,[n("在 Go 语言中，"),s("strong",null,"函数的参数传递只有值传递"),n("，而且传递的实参都是原始数据的一份拷贝。如果拷贝的内容是值类型的，那么在函数中就无法修改原始数据；如果拷贝的内容是指针（或者可以理解为引用类型 map、chan 等），那么就可以在函数中修改原始数据。")],-1),F=s("p",null,"所以我们在创建一个函数的时候，要根据自己的真实需求决定参数的类型，以便更好地服务于我们的业务。",-1),u=s("p",null,"这节课中，我讲解 chan 的时候没有举例，你自己可以自定义一个有 chan 参数的函数，作为练习题。",-1),g=s("p",null,'下节课我将介绍"内存分配：new 还是 make？什么情况下该用谁？"记得来听课！',-1);function h(C,f,q,v,k,B){const a=e("Image");return t(),c("div",null,[y,p(a,{alt:"go语言13金句.png",src:"https://s0.lgstatic.com/i/image2/M01/04/33/Cip5yF_q72OAUnC-AACn4vk4lVU354.png"}),n(),E,p(a,{alt:"112.png",src:"https://s0.lgstatic.com/i/image/M00/80/61/Ciqc1F_QqlyAItQJAABQMWd6pSU650.png"}),n(),i,d,m,p(a,{alt:"Lark20201209-184447.png",src:"https://s0.lgstatic.com/i/image/M00/80/6C/CgqCHl_QqryAEqYQAAVkYmbnDIM013.png"}),F,u,g])}const D=o(r,[["render",h]]);export{b as __pageData,D as default};
