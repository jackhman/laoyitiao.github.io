import{_ as p,j as t,o as e,g as c,k as n,h as s,Q as l,s as o}from"./chunks/framework.4e7d56ce.js";const k=JSON.parse('{"title":"21从React-Router切入，系统学习前端路由解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/046_深入浅出搞定 React/(5894) 21  从 React-Router 切入，系统学习前端路由解决方案.md","filePath":"posts/frontEnd/046_深入浅出搞定 React/(5894) 21  从 React-Router 切入，系统学习前端路由解决方案.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/046_深入浅出搞定 React/(5894) 21  从 React-Router 切入，系统学习前端路由解决方案.md"},E=l(`<h1 id="_21从react-router切入-系统学习前端路由解决方案" tabindex="-1">21从React-Router切入，系统学习前端路由解决方案 <a class="header-anchor" href="#_21从react-router切入-系统学习前端路由解决方案" aria-label="Permalink to &quot;21从React-Router切入，系统学习前端路由解决方案&quot;">​</a></h1><p>React-Router 是 React 场景下的路由解决方案，本讲我们将学习 React-Router 的实现机制，并基于此提取和探讨通用的前端路由解决方案。</p><blockquote><p>注：没有使用过 React-Router 的同学，可以点击<a href="https://reactrouter.com/web/guides/quick-start" target="_blank" rel="noreferrer">这里</a>完成快速上手。</p></blockquote><h3 id="认识-react-router" tabindex="-1">认识 React-Router <a class="header-anchor" href="#认识-react-router" aria-label="Permalink to &quot;认识 React-Router&quot;">​</a></h3><p>本着尽快进入主题的原则，这里我用一个尽可能简单的 Demo 作为引子，帮助你快速地把握 React-Router 的核心功能。请看下面代码（解析在注释里）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 引入 React-Router 中的相关组件</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { BrowserRouter </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> Router, Route, Link } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-router-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 导出目标组件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BasicExample</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件最外层用 Router 包裹</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">Router</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          // 具体的标签用 Link 包裹</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">Link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">&gt;Home&lt;/</span><span style="color:#79B8FF;">Link</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          // 具体的标签用 Link 包裹</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">Link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/about&quot;</span><span style="color:#E1E4E8;">&gt;About&lt;/</span><span style="color:#79B8FF;">Link</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          // 具体的标签用 Link 包裹</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">Link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/dashboard&quot;</span><span style="color:#E1E4E8;">&gt;Dashboard&lt;/</span><span style="color:#79B8FF;">Link</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">hr</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      // Route 是用于声明路由映射到应用程序的组件层</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exact</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">component</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{Home} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/about&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">component</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{About} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/dashboard&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">component</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{Dashboard} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">Router</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Home 组件的定义</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Home</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;Home&lt;/</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// About 组件的定义</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">About</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;About&lt;/</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Dashboard 的定义</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dashboard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;Dashboard&lt;/</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> BasicExample;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 引入 React-Router 中的相关组件</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { BrowserRouter </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> Router, Route, Link } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-router-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 导出目标组件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BasicExample</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件最外层用 Router 包裹</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Router</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          // 具体的标签用 Link 包裹</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">Link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">&gt;Home&lt;/</span><span style="color:#005CC5;">Link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          // 具体的标签用 Link 包裹</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">Link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/about&quot;</span><span style="color:#24292E;">&gt;About&lt;/</span><span style="color:#005CC5;">Link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          // 具体的标签用 Link 包裹</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">Link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/dashboard&quot;</span><span style="color:#24292E;">&gt;Dashboard&lt;/</span><span style="color:#005CC5;">Link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">hr</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      // Route 是用于声明路由映射到应用程序的组件层</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exact</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">component</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{Home} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/about&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">component</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{About} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/dashboard&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">component</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{Dashboard} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">Router</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Home 组件的定义</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Home</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;Home&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// About 组件的定义</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">About</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;About&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Dashboard 的定义</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dashboard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;Dashboard&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> BasicExample;</span></span></code></pre></div><p>这个 Demo 渲染出的页面效果如下图所示：</p>`,7),y=o("p",null,'当我点击不同的链接时，ul 元素内部就会展示不同的组件内容。比如当我点击"About"链接时，就会展示 About 组件的内容，效果如下图所示：',-1),i=o("p",null,"注意，点击 About 后，界面中发生变化的地方有两处（见下图标红处），除了 ul 元素的内容改变了之外，路由信息也改变了。",-1),h=l('<p>在 React-Router 中，各种细碎的功能点有不少，但作为 React 框架的前端路由解决方案，它最基本也是最核心的能力，其实正是你刚刚所见到的这一幕------<strong>路由的跳转</strong>。这也是我们接下来讨论的重点。</p><p>接下来我们就结合 React-Router 的源码，一起来看看&quot;跳转&quot;这个动作是如何实现的。</p><h3 id="react-router-是如何实现路由跳转的" tabindex="-1">React-Router 是如何实现路由跳转的？ <a class="header-anchor" href="#react-router-是如何实现路由跳转的" aria-label="Permalink to &quot;React-Router 是如何实现路由跳转的？&quot;">​</a></h3><p>首先需要回顾下 Demo 中的第一行代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { BrowserRouter as Router, Route, Link } from &quot;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">router</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">dom&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { BrowserRouter as Router, Route, Link } from &quot;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">router</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">dom&quot;;</span></span></code></pre></div><p>这行代码告诉我们，为了实现一个简单的路由跳转效果，一共从 React-Router 中引入了以下 3 个组件：</p><ul><li><p>BrowserRouter</p></li><li><p>Route</p></li><li><p>Link</p></li></ul><p>这 3 个组件也就代表了 React-Router 中的 3 个核心角色：</p><ul><li><p><strong>路由器</strong>，比如 BrowserRouter 和 HashRouter</p></li><li><p><strong>路由</strong>，比如 Route 和 Switch</p></li><li><p><strong>导航</strong>，比如 Link、NavLink、Redirect</p></li></ul><p>路由（以 Route 为代表）负责定义路径与组件之间的映射关系，而导航（以 Link 为代表）负责触发路径的改变，路由器（包括 BrowserRouter 和 HashRouter）则会根据 Route 定义出来的映射关系，为新的路径匹配它对应的逻辑。</p><p>以上便是 3 个角色&quot;打配合&quot;的过程。这其中，最需要你注意的是路由器这个角色，React Router 曾在说明文档中官宣它是&quot;React Router 应用程序的核心&quot;。因此学习 React Router，最要紧的是搞明白路由器的工作机制。</p><h4 id="路由器-browserrouter-和-hashrouter" tabindex="-1">路由器：BrowserRouter 和 HashRouter <a class="header-anchor" href="#路由器-browserrouter-和-hashrouter" aria-label="Permalink to &quot;路由器：BrowserRouter 和 HashRouter&quot;">​</a></h4><p><strong>路由器负责感知路由的变化并作出反应，它是整个路由系统中最为重要的一环</strong>。React-Router 支持我们使用 hash（对应 HashRouter）和 browser（对应 BrowserRouter） 两种路由规则，这里我们把两种规则都讲一下。</p><p>HashRouter、BrowserRouter，这俩人名字这么像，该不会底层逻辑区别也不大吧？别说，还真是如此。我们首先来瞟一眼 HashRouter 的源码：</p>',14),u=o("p",null,"再瞟一眼 BrowserRouter 的源码：",-1),d=l('<p>我们会发现这两个文件惊人的相似，而最关键的区别我也已经在图中分别标出，即它们调用的 history 实例化方法不同：HashRouter 调用了 <a href="https://github.com/ReactTraining/history/blob/v4.7.2/modules/createHashHistory.js" target="_blank" rel="noreferrer">createHashHistory</a>，BrowserRouter 调用了 <a href="https://github.com/ReactTraining/history/blob/v4.7.2/modules/createBrowserHistory.js" target="_blank" rel="noreferrer">createBrowserHistory</a>。</p><p>这两个 history 的实例化方法均来源于 <a href="https://github.com/ReactTraining/history" target="_blank" rel="noreferrer">history</a> 这个独立的代码库，关于它的实现细节，你倒不必纠结。对于 <a href="https://github.com/ReactTraining/history/blob/v4.7.2/modules/createHashHistory.js" target="_blank" rel="noreferrer">createHashHistory</a> 和 <a href="https://github.com/ReactTraining/history/blob/v4.7.2/modules/createBrowserHistory.js" target="_blank" rel="noreferrer">createBrowserHistory</a> 这两个 API，我们最要紧的是掌握它们各自的特征。</p><ul><li><code>createBrowserHistory</code>：它将在浏览器中使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noreferrer">HTML5 history API</a> 来处理 URL（见下图标红处的说明），它能够处理形如这样的 URL，example.com/some/path。由此可得，<strong>BrowserRouter 是使用 HTML 5 的 history API 来控制路由跳转的。</strong></li></ul>',3),g=o("ul",null,[o("li",null,[o("code",null,"createHashHistory"),s("：它是使用 hash tag (#) 处理 URL 的方法，能够处理形如这样的 URL，example.com/#/some/path。我们可以看到"),o("a",{href:"https://github.com/ReactTraining/history/blob/v4.7.2/modules/createHashHistory.js",target:"_blank",rel:"noreferrer"},"它的源码中"),s("对各种方法的定义基本都围绕 hash 展开（如下图所示），由此可得，"),o("strong",null,"HashRouter 是通过 URL 的 hash 属性来控制路由跳转的"),s("。")])],-1),A=l(`<blockquote><p>注：关于 hash 和 history 这两种模式，我们在下文中还会持续探讨。</p></blockquote><p>现在，见识了表面现象，了解了背后机制。我们不妨回到故事的原点，再多问自己一个问题：为什么我们需要 React-Router？</p><p>或者把这个问题稍微拔高一点：<strong>为什么我们需要前端路由</strong>？</p><p>这一切的一切，都要从很久以前说起。</p><h3 id="理解前端路由-是什么-解决什么问题" tabindex="-1">理解前端路由------是什么？解决什么问题？ <a class="header-anchor" href="#理解前端路由-是什么-解决什么问题" aria-label="Permalink to &quot;理解前端路由------是什么？解决什么问题？&quot;">​</a></h3><h4 id="背景-问题的产生" tabindex="-1">背景------问题的产生 <a class="header-anchor" href="#背景-问题的产生" aria-label="Permalink to &quot;背景------问题的产生&quot;">​</a></h4><p>在前端技术早期，一个 URL 对应一个页面，如果你要从 A 页面切换到 B 页面，那么必然伴随着页面的刷新。这个体验并不好，不过在最初也是无奈之举------毕竟用户只有在刷新页面的情况下，才可以重新去请求数据。</p><p>后来，改变发生了------Ajax 出现了，它允许人们在不刷新页面的情况下发起请求；与之共生的，还有&quot;不刷新页面即可更新页面内容&quot;这种需求。在这样的背景下，出现了<strong>SPA（单页面应用</strong>）。</p><p>SPA 极大地提升了用户体验，它允许页面在不刷新的情况下更新页面内容，使内容的切换更加流畅。但是在 SPA 诞生之初，人们并没有考虑到&quot;定位&quot;这个问题------在内容切换前后，页面的 URL 都是一样的，这就带来了两个问题：</p><ul><li><p>SPA 其实并不知道当前的页面&quot;进展到了哪一步&quot;，可能你在一个站点下经过了反复的&quot;前进&quot;才终于唤出了某一块内容，但是此时只要刷新一下页面，一切就会被清零，你必须重复之前的操作才可以重新对内容进行定位------SPA 并不会&quot;记住&quot;你的操作；</p></li><li><p>由于有且仅有一个 URL 给页面做映射，这对 SEO 也不够友好，搜索引擎无法收集全面的信息。</p></li></ul><p>为了解决这个问题，前端路由出现了。</p><h4 id="前端路由-spa-定位-解决方案" tabindex="-1">前端路由------SPA&quot;定位&quot;解决方案 <a class="header-anchor" href="#前端路由-spa-定位-解决方案" aria-label="Permalink to &quot;前端路由------SPA&quot;定位&quot;解决方案&quot;">​</a></h4><p>前端路由可以帮助我们在仅有一个页面的情况下，&quot;记住&quot;用户当前走到了哪一步------为 SPA 中的各个视图匹配一个唯一标识。这意味着用户前进、后退触发的新内容，都会映射到不同的 URL 上去。此时即便他刷新页面，因为当前的 URL 可以标识出他所处的位置，因此内容也不会丢失。</p><p>那么如何实现这个目的呢？首先我们要解决以下两个问题。</p><ul><li><p>当用户刷新页面时，浏览器会默认根据当前 URL 对资源进行重新定位（发送请求）。这个动作对 SPA 是不必要的，因为 SPA 作为单页面，无论如何也只会有一个资源与之对应。此时若走正常的请求-刷新流程，反而会使用户的前进后退操作无法被记录。</p></li><li><p>单页面应用对服务端来说，就是一个 URL、一套资源，那么如何做到用&quot;不同的 URL&quot;来映射不同的视图内容呢？</p></li></ul><p>从这两个问题来看，服务端已经救不了 SPA 这个场景了。所以要靠咱们前端自力更生，不然怎么叫&quot;前端路由&quot;呢？作为前端，我们可以提供以下这样的解决思路。</p><ul><li><p><strong>拦截用户的刷新操作，避免服务端盲目响应、返回不符合预期的资源内容</strong>，把刷新这个动作完全放到前端逻辑里消化掉；</p></li><li><p><strong>感知 URL 的变化</strong>。这里不是说要改造 URL、凭空制造出 N 个 URL 来。而是说 URL 还是那个 URL，只不过我们可以给它做一些微小的处理，这些处理并不会影响 URL 本身的性质，不会影响服务器对它的识别，只有我们前端能感知到。一旦我们感知到了，我们就根据这些变化、用 JS 去给它生成不同的内容。</p></li></ul><h3 id="实践思路-hash-与-history" tabindex="-1">实践思路------hash 与 history <a class="header-anchor" href="#实践思路-hash-与-history" aria-label="Permalink to &quot;实践思路------hash 与 history&quot;">​</a></h3><p>接下来重点就来了，现在前端界对前端路由有哪些实现思路？这里需要掌握的两个实践就是 hash 与 history。</p><h4 id="hash-模式" tabindex="-1">hash 模式 <a class="header-anchor" href="#hash-模式" aria-label="Permalink to &quot;hash 模式&quot;">​</a></h4><p>hash 模式是指通过改变 URL 后面以&quot;#&quot;分隔的字符串（这货其实就是 URL 上的哈希值），从而让页面感知到路由变化的一种实现方式。举个例子，比如这样的一个 URL：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//www.imooc.com/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//www.imooc.com/</span></span></code></pre></div><p>我就可以通过增加和改变哈希值，来让这个 URL 变得有那么一点点不一样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 主页</span></span>
<span class="line"><span style="color:#E1E4E8;">https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//www.imooc.com/#index</span></span>
<span class="line"><span style="color:#6A737D;">// 活动页</span></span>
<span class="line"><span style="color:#E1E4E8;">https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//www.imooc.com/#activePage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 主页</span></span>
<span class="line"><span style="color:#24292E;">https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//www.imooc.com/#index</span></span>
<span class="line"><span style="color:#6A737D;">// 活动页</span></span>
<span class="line"><span style="color:#24292E;">https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//www.imooc.com/#activePage</span></span></code></pre></div><p>这个&quot;不一样&quot;是前端完全可感知的------JS 可以帮我们捕获到哈希值的内容。在 hash 模式下，我们实现路由的思路可以概括如下：</p><p>（1）hash 的改变：我们可以通过 location 暴露出来的属性，直接去修改当前 URL 的 hash 值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.location.hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.location.hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;index&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>（2）hash 的感知：通过监听 &quot;hashchange&quot;事件，可以用 JS 来捕捉 hash 值的变化，进而决定我们页面内容是否需要更新：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 监听hash变化，点击浏览器的前进后退会触发</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hashchange&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(event){ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据 hash 的变化更新内容</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 监听hash变化，点击浏览器的前进后退会触发</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hashchange&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(event){ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据 hash 的变化更新内容</span></span>
<span class="line"><span style="color:#24292E;">},</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="history-模式" tabindex="-1">history 模式 <a class="header-anchor" href="#history-模式" aria-label="Permalink to &quot;history 模式&quot;">​</a></h4><p>大家知道，在我们浏览器的左上角，往往有这样的操作点：</p>`,31),F=l(`<p>通过点击前进后退箭头，就可以实现页面间的跳转。这样的行为，其实是可以通过 API 来实现的。</p><p>浏览器的 history API 赋予了我们这样的能力，在 HTML 4 时，就可以通过下面的接口来操作浏览历史、实现跳转动作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#B392F0;">forward</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// 前进到下一页</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// 前进到下一页</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#B392F0;">back</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 后退到上一页</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#6F42C1;">back</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 后退到上一页</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 前进两页</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 前进两页</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 后退两页</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 后退两页</span></span></code></pre></div><p>很有趣吧？遗憾的是，在这个阶段，我们能做的只是&quot;切换&quot;，而不能&quot;改变&quot;。好在从 HTML 5 开始，浏览器支持了 pushState 和 replaceState 两个 API，允许我们对浏览历史进行修改和新增：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">pushState</span><span style="color:#E1E4E8;">(data[,title][,url]); </span><span style="color:#6A737D;">// 向浏览历史中追加一条记录</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">(data[,title][,url]); </span><span style="color:#6A737D;">// 向浏览历史中追加一条记录</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">replaceState</span><span style="color:#E1E4E8;">(data[,title][,url]); </span><span style="color:#6A737D;">// 修改（替换）当前页在浏览历史中的信息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">(data[,title][,url]); </span><span style="color:#6A737D;">// 修改（替换）当前页在浏览历史中的信息</span></span></code></pre></div><p>这样一来，修改动作就齐活了。</p><p>有修改，就要有对修改的感知能力。在 history 模式下，我们可以通过监听 popstate 事件来达到我们的目的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;popstate&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;popstate&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(e) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>每当浏览历史发生变化，popstate 事件都会被触发。</p><p><strong>注</strong> ：go、forward 和 back 等方法的调用确实会触发 popstate，但是<strong>pushState 和 replaceState 不会</strong>。不过这一点问题不大，我们可以通过自定义事件和全局事件总线来手动触发事件。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本讲我们以 React-Router 为切入点，结合源码剖析了 React-Router 中&quot;跳转&quot;这一动作的实现原理，由此牵出了针对&quot;前端路由方案&quot;这个知识点相对系统的探讨。行文至此，React 周边生态所涉及的重难点知识，相信已经深深地烙印在了你的脑海里。</p><p>下一讲开始，我们将围绕&quot;React 设计模式与最佳实践&quot;以及&quot;React 性能优化&quot;两条主线展开学习。彼时，站在&quot;生产实践&quot;这个全新的视角去认识 React 后，相信各位对它的理解定会更上一层楼。大家加油！</p>`,17);function R(b,_,v,D,m,C){const a=t("Image");return e(),c("div",null,[E,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8B/20/CgqCHl_bOA2AfagHAAAwif17aiI096.png"}),s(),y,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/02/F3/CgpVE1_bOBOAQTs_AAAuMzu6RbY087.png"}),s(),i,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/02/F2/Cip5yF_bOBmAfCOxAAA2a1pswj4899.png"}),s(),h,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/02/F2/Cip5yF_bOCSAErIlAAEU7gTEf-c538.png"}),s(),u,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/8B/15/Ciqc1F_bOCyAFB9oAADQnB3x2AY718.png"}),s(),d,n(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image2/M01/03/78/Cip5yF_cKqmATWf8AAN3hb7gX3k493.png"}),s(),g,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/8B/15/Ciqc1F_bOFaAWDI8AAD_FnBQsTc850.png"}),s(),A,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/8B/20/CgqCHl_bOGeAQW2AAACAaTKsTyM327.png"}),s(),F])}const B=p(r,[["render",R]]);export{k as __pageData,B as default};
