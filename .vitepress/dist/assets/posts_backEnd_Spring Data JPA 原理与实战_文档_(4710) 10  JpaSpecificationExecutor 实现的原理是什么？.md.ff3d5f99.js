import{_ as l,j as o,o as e,g as t,k as n,Q as p,s,h as c}from"./chunks/framework.4e7d56ce.js";const P=JSON.parse('{"title":"JpaSpecificationExecutor 使用案例 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4710) 10  JpaSpecificationExecutor 实现的原理是什么？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4710) 10  JpaSpecificationExecutor 实现的原理是什么？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4710) 10  JpaSpecificationExecutor 实现的原理是什么？.md"},E=p(`<p>通过上一课时，我们了解到 JpaSpecificationExecutor 给我们提供了动态查询或者写框架的一种思路，那么这节课我们来看一下 JpaSpecificationExecutor 的详细用法和原理，及其实战应用场景中如何实现自己的框架。</p><p>在开始讲解之前，请先思考几个问题：</p><ol><li><p>JpaSpecificationExecutor 如何创建？</p></li><li><p>它的使用方法有哪些？</p></li><li><p>toPredicate 方法如何实现？</p></li></ol><p>带着这些问题，我们开始探索。先看一个例子感受一下 JpaSpecificationExecutor 具体的用法。</p><h3 id="jpaspecificationexecutor-使用案例" tabindex="-1">JpaSpecificationExecutor 使用案例 <a class="header-anchor" href="#jpaspecificationexecutor-使用案例" aria-label="Permalink to &quot;JpaSpecificationExecutor 使用案例&quot;">​</a></h3><p>我们假设一个后台管理页面根据 name 模糊查询、sex 精准查询、age 范围查询、时间区间查询、address 的 in 查询这样一个场景，来查询 user 信息，我们看看这个例子应该怎么写。</p><p><strong>第一步：创建 User 和 UserAddress 两个实体。</strong> 代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.annotation.JsonIgnore;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.Serializable;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Date;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* 用户基本信息表</span></span>
<span class="line"><span style="color:#6A737D;">**/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;addresses&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Enumerated</span><span style="color:#E1E4E8;">(EnumType.STRING)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SexEnum sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer age;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Instant createDate;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Date updateDate;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonIgnore</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; addresses;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SexEnum</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">BOY</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">GIRL</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 用户地址表</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddress</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.ALL)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.annotation.JsonIgnore;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.Serializable;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Date;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* 用户基本信息表</span></span>
<span class="line"><span style="color:#6A737D;">**/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;addresses&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Enumerated</span><span style="color:#24292E;">(EnumType.STRING)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SexEnum sex;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer age;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Instant createDate;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Date updateDate;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonIgnore</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; addresses;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SexEnum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">BOY</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">GIRL</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 用户地址表</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddress</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String address;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.ALL)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第二步：创建 UserRepository 继承 JpaSpecificationExecutor 接口。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">JpaSpecificationExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">JpaSpecificationExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第三步：创建一个测试用例进行测试。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestInstance</span><span style="color:#E1E4E8;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserJpeTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserAddressRepository userAddressRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Date now </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 提前创建一些数据</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">BeforeAll</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(SexEnum.BOY)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">createDate</span><span style="color:#E1E4E8;">(Instant.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">updateDate</span><span style="color:#E1E4E8;">(now)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        userAddressRepository.</span><span style="color:#B392F0;">saveAll</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(UserAddress.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                UserAddress.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;beijing&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testSPE</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//模拟请求参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        User userQuery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(SexEnum.BOY)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">addresses</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(UserAddress.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//假设的时间范围参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        Instant beginCreateDate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Instant.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">plus</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, ChronoUnit.HOURS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Instant endCreateDate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Instant.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">plus</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, ChronoUnit.HOURS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//利用Specification进行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">        Page&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Specification&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Predicate </span><span style="color:#B392F0;">toPredicate</span><span style="color:#E1E4E8;">(Root&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, CriteriaQuery&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">query</span><span style="color:#E1E4E8;">, CriteriaBuilder </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                List&lt;</span><span style="color:#F97583;">Predicate</span><span style="color:#E1E4E8;">&gt; ps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">Predicate</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotBlank</span><span style="color:#E1E4E8;">(userQuery.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//我们模仿一下like查询，根据name模糊查询</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">like</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#9ECBFF;">&quot;%&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">userQuery.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;%&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (userQuery.</span><span style="color:#B392F0;">getSex</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//equal查询条件，这里需要注意，直接传递的是枚举</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">equal</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#E1E4E8;">),userQuery.</span><span style="color:#B392F0;">getSex</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (userQuery.</span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//greaterThan大于等于查询条件</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">greaterThan</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">),userQuery.</span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (beginCreateDate</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">endCreateDate</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//根据时间区间去查询创建</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">between</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;createDate&quot;</span><span style="color:#E1E4E8;">),beginCreateDate,endCreateDate));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ObjectUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(userQuery.</span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//联表查询，利用root的join方法，根据关联关系表里面的字段进行查询。</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">in</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;addresses&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">(userQuery.</span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(a</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">())));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> query.</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(ps.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Predicate</span><span style="color:#E1E4E8;">[ps.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()])).</span><span style="color:#B392F0;">getRestriction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(users);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestInstance</span><span style="color:#24292E;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserJpeTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserAddressRepository userAddressRepository;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Date now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 提前创建一些数据</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">BeforeAll</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(SexEnum.BOY)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">createDate</span><span style="color:#24292E;">(Instant.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">updateDate</span><span style="color:#24292E;">(now)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        userAddressRepository.</span><span style="color:#6F42C1;">saveAll</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(UserAddress.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                UserAddress.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;beijing&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testSPE</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//模拟请求参数</span></span>
<span class="line"><span style="color:#24292E;">        User userQuery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(SexEnum.BOY)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">addresses</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(UserAddress.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//假设的时间范围参数</span></span>
<span class="line"><span style="color:#24292E;">        Instant beginCreateDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Instant.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">plus</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, ChronoUnit.HOURS);</span></span>
<span class="line"><span style="color:#24292E;">        Instant endCreateDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Instant.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">plus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, ChronoUnit.HOURS);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//利用Specification进行查询</span></span>
<span class="line"><span style="color:#24292E;">        Page&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Specification&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Predicate </span><span style="color:#6F42C1;">toPredicate</span><span style="color:#24292E;">(Root&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">root</span><span style="color:#24292E;">, CriteriaQuery&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">query</span><span style="color:#24292E;">, CriteriaBuilder </span><span style="color:#E36209;">cb</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                List&lt;</span><span style="color:#D73A49;">Predicate</span><span style="color:#24292E;">&gt; ps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">Predicate</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotBlank</span><span style="color:#24292E;">(userQuery.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//我们模仿一下like查询，根据name模糊查询</span></span>
<span class="line"><span style="color:#24292E;">                    ps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">like</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">),</span><span style="color:#032F62;">&quot;%&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">userQuery.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;%&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (userQuery.</span><span style="color:#6F42C1;">getSex</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//equal查询条件，这里需要注意，直接传递的是枚举</span></span>
<span class="line"><span style="color:#24292E;">                    ps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#24292E;">),userQuery.</span><span style="color:#6F42C1;">getSex</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (userQuery.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//greaterThan大于等于查询条件</span></span>
<span class="line"><span style="color:#24292E;">                    ps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">greaterThan</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">),userQuery.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (beginCreateDate</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">endCreateDate</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//根据时间区间去查询创建</span></span>
<span class="line"><span style="color:#24292E;">                    ps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">between</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;createDate&quot;</span><span style="color:#24292E;">),beginCreateDate,endCreateDate));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ObjectUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(userQuery.</span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//联表查询，利用root的join方法，根据关联关系表里面的字段进行查询。</span></span>
<span class="line"><span style="color:#24292E;">                    ps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">in</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;addresses&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">(userQuery.</span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(a</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">())));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> query.</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(ps.</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Predicate</span><span style="color:#24292E;">[ps.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()])).</span><span style="color:#6F42C1;">getRestriction</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(users);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看一下执行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user0_.id as id1_1_, user0_.age as age2_1_, user0_.create_date as create_d3_1_, user0_.email as email4_1_, user0_.name as name5_1_, user0_.sex as sex6_1_, user0_.update_date as update_d7_1_ from user user0_ inner join user_address addresses1_ on user0_.id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">addresses1_.user_id </span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;"> (user0_.name like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) and user0_.sex</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> and user0_.age</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (user0_.create_date between </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> and </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (addresses1_.address </span><span style="color:#B392F0;">in</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)) limit </span><span style="color:#F97583;">?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user0_.id as id1_1_, user0_.age as age2_1_, user0_.create_date as create_d3_1_, user0_.email as email4_1_, user0_.name as name5_1_, user0_.sex as sex6_1_, user0_.update_date as update_d7_1_ from user user0_ inner join user_address addresses1_ on user0_.id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">addresses1_.user_id </span><span style="color:#6F42C1;">where</span><span style="color:#24292E;"> (user0_.name like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) and user0_.sex</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> and user0_.age</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (user0_.create_date between </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> and </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (addresses1_.address </span><span style="color:#6F42C1;">in</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)) limit </span><span style="color:#D73A49;">?</span></span></code></pre></div><p>此 SQL 的参数如下：</p>`,15),y=p(`<p>此 SQL 就是查询 User inner Join user_address 之后组合成的查询 SQL，基本符合我们的预期，即不同的查询条件。我们通过这个例子大概知道了 JpaSpecificationExecutor 的用法，那么它具体是什么呢？</p><h3 id="jpaspecificationexecutor-语法详解" tabindex="-1">JpaSpecificationExecutor 语法详解 <a class="header-anchor" href="#jpaspecificationexecutor-语法详解" aria-label="Permalink to &quot;JpaSpecificationExecutor 语法详解&quot;">​</a></h3><p>我们依然通过看 JpaSpecificationExecutor 的源码，来了解一下它的几个使用方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaSpecificationExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据 Specification 条件查询单个对象，要注意的是，如果条件能查出来多个会报错</span></span>
<span class="line"><span style="color:#E1E4E8;">   T </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">spec</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据 Specification 条件，查询 List 结果</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">spec</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据 Specification 条件，分页查询</span></span>
<span class="line"><span style="color:#E1E4E8;">   Page&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">spec</span><span style="color:#E1E4E8;">, Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据 Specification 条件，带排序的查询结果</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">spec</span><span style="color:#E1E4E8;">, Sort </span><span style="color:#FFAB70;">sort</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据 Specification 条件，查询数量</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">spec</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaSpecificationExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据 Specification 条件查询单个对象，要注意的是，如果条件能查出来多个会报错</span></span>
<span class="line"><span style="color:#24292E;">   T </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">spec</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据 Specification 条件，查询 List 结果</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">spec</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据 Specification 条件，分页查询</span></span>
<span class="line"><span style="color:#24292E;">   Page&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">spec</span><span style="color:#24292E;">, Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据 Specification 条件，带排序的查询结果</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">spec</span><span style="color:#24292E;">, Sort </span><span style="color:#E36209;">sort</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据 Specification 条件，查询数量</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">spec</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其返回结果和 Pageable、Sort，我们在前面课时都有介绍过，这里我们重点关注一下 Specification。看一下 Specification 接口的代码。</p>`,5),i=p(`<p>通过看其源码就会发现里面提供的方法很简单。其中，下面一段代码表示组合的 and 关系的查询条件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Specification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">composed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, other, (builder, left, rhs) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(left, rhs));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Specification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">composed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, other, (builder, left, rhs) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(left, rhs));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面是静态方法，创建 where 后面的 Predicate 集合。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Specification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> spec)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Specification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> spec)</span></span></code></pre></div><p>下面是默认方法，创建 or 条件的查询参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Specification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Specification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other)</span></span></code></pre></div><p>这是静态方法，创建 Not 的查询条件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Specification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">not</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Specification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> spec)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Specification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">not</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Specification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> spec)</span></span></code></pre></div><p>上面这几个方法比较简单，我就不一一细说了，我们主要看一下需要实现的方法：toPredicate。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Predicate </span><span style="color:#B392F0;">toPredicate</span><span style="color:#E1E4E8;">(Root</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> root, CriteriaQuery</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> query, CriteriaBuilder criteriaBuilder);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Predicate </span><span style="color:#6F42C1;">toPredicate</span><span style="color:#24292E;">(Root</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> root, CriteriaQuery</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> query, CriteriaBuilder criteriaBuilder);</span></span></code></pre></div><p>toPredicate 这个方法是我们用到的时候需要自己去实现的，接下来我们详细介绍一下。</p><p>首先我们在刚才的 Demo 里面设置一个断点，看到如下界面。</p>`,12),F=p(`<p>这里可以分别看到 Root 的实现类是 RootImpl，CriteriaQuery 的实现类是 CriteriaQueryImpl，CriteriaBuilder 的实现类是 CriteriaBuilderImpl。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">javax.persistence.criteria.Root</span></span>
<span class="line"><span style="color:#E1E4E8;">javax.persistence.criteria.CriteriaQuery</span></span>
<span class="line"><span style="color:#E1E4E8;">javax.persistence.criteria.CriteriaBuilder</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">javax.persistence.criteria.Root</span></span>
<span class="line"><span style="color:#24292E;">javax.persistence.criteria.CriteriaQuery</span></span>
<span class="line"><span style="color:#24292E;">javax.persistence.criteria.CriteriaBuilder</span></span></code></pre></div><p>其中，上面三个接口是 Java Persistence API 定义的接口。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">org.hibernate.query.criteria.internal.path.RootImpl</span></span>
<span class="line"><span style="color:#E1E4E8;">rg.hibernate.query.criteria.internal.CriteriaQueryImpl</span></span>
<span class="line"><span style="color:#E1E4E8;">org.hibernate.query.criteria.internal.CriteriaBuilderImpl</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">org.hibernate.query.criteria.internal.path.RootImpl</span></span>
<span class="line"><span style="color:#24292E;">rg.hibernate.query.criteria.internal.CriteriaQueryImpl</span></span>
<span class="line"><span style="color:#24292E;">org.hibernate.query.criteria.internal.CriteriaBuilderImpl</span></span></code></pre></div><p>而这个三个实现类都是由 Hibernate 进行实现的，也就是说 JpaSpecificationExecutor 封装了原本需要我们直接操作 Hibernate 中 Criteria 的 API 方法。</p><p>下面分别解释上述三个参数。</p><h4 id="root-user-root" tabindex="-1">Root<code>&lt;User&gt;</code> root <a class="header-anchor" href="#root-user-root" aria-label="Permalink to &quot;Root\`&lt;User&gt;\` root&quot;">​</a></h4><p>代表了可以查询和操作的实体对象的根，如果将实体对象比喻成表名，那 root 里面就是这张表里面的字段，而这些字段只是 JPQL 的实体字段而已。我们可以通过里面的 Path get（String attributeName），来获得我们想要操作的字段。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">类似于我们上面的：root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;createDate&quot;</span><span style="color:#E1E4E8;">)等操作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">类似于我们上面的：root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;createDate&quot;</span><span style="color:#24292E;">)等操作</span></span></code></pre></div><h4 id="criteriaquery-query" tabindex="-1">CriteriaQuery&lt;?&gt; query <a class="header-anchor" href="#criteriaquery-query" aria-label="Permalink to &quot;CriteriaQuery\\&lt;?\\&gt; query&quot;">​</a></h4><p>代表一个 specific 的顶层查询对象，它包含着查询的各个部分，比如 select 、from、where、group by、order by 等。CriteriaQuery 对象只对实体类型或嵌入式类型的 Criteria 查询起作用。简单理解为，它提供了查询 ROOT 的方法。常用的方法有如下几种：</p>`,11),u=p('<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">正如我们上面where的用法：query.</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(.....）一样</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">正如我们上面where的用法：query.</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(.....）一样</span></span></code></pre></div><p>这个语法比较简单，我们在其方法后面加上相应的参数即可。下面看一个 group by 的例子。</p>',2),d=s("p",null,"如上图所示，我们加入 groupyBy 某个字段，SQL 也会有相应的变化。那么我们再来看第三个参数。",-1),g=s("h4",{id:"criteriabuilder-cb",tabindex:"-1"},[c("CriteriaBuilder cb "),s("a",{class:"header-anchor",href:"#criteriabuilder-cb","aria-label":'Permalink to "CriteriaBuilder cb"'},"​")],-1),A=s("p",null,"CriteriaBuilder 是用来构建 CritiaQuery 的构建器对象，其实就相当于条件或者条件组合，并以 Predicate 的形式返回。它基本上提供了所有常用的方法，如下所示：",-1),D=s("p",null,"我们直接通过此类的 Structure 视图就可以看到都有哪些方法。其中，and、any 等用来做查询条件的组合；类似 between、equal、exist、ge、gt、isEmpty、isTrue、in 等用来做查询条件的查询，类似下图的一些方法。",-1),C=p(`<p>而其中 Expression 很简单，都是通过 root.get(...) 某些字段即可返回，正如下面的用法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Predicate p1</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cb.</span><span style="color:#B392F0;">like</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">as</span><span style="color:#E1E4E8;">(String.class), </span><span style="color:#9ECBFF;">&quot;%&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">uqm.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;%&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Predicate p2</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cb.</span><span style="color:#B392F0;">equal</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;uuid&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">as</span><span style="color:#E1E4E8;">(Integer.class), uqm.</span><span style="color:#B392F0;">getUuid</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">Predicate p3</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cb.</span><span style="color:#B392F0;">gt</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">as</span><span style="color:#E1E4E8;">(Integer.class), uqm.</span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Predicate p1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cb.</span><span style="color:#6F42C1;">like</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">as</span><span style="color:#24292E;">(String.class), </span><span style="color:#032F62;">&quot;%&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">uqm.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;%&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Predicate p2</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cb.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;uuid&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">as</span><span style="color:#24292E;">(Integer.class), uqm.</span><span style="color:#6F42C1;">getUuid</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">Predicate p3</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cb.</span><span style="color:#6F42C1;">gt</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">as</span><span style="color:#24292E;">(Integer.class), uqm.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">());</span></span></code></pre></div><p>我们利用 like、equal、gt 可以生产 Predicate，而 Predicate 可以组合查询。比如我们预定它们之间是 and 或 or 的关系：<code>Predicate p = cb.and(p3,cb.or(p1,p2));</code></p><p>我们让 p1 和 p2 是 or 的关系，并且得到的 Predicate 和 p3 又构成了 and 的关系。你可以发现它的用法还是比较简单的，正如我们开篇所说的 Junit 中 test 里面一样的写法。</p><p>关于 JpaSpecificationExecutor 的语法我们就介绍完了，其实它里面的功能相当强大，只是我们发现 Spring Data JPA 介绍得并不详细，只是一笔带过，可能他们认为写框架的人才能用到，所以介绍得不多。</p><p>如果你想了解更多语法的话，可以参考 Hibernate 的文档：<a href="https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#criteria" target="_blank" rel="noreferrer">https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#criteria</a>。我们再来看看 JpaSpecificationExecutor 的实现原理。</p><h3 id="jpaspecificationexecutor-原理分析" tabindex="-1">JpaSpecificationExecutor 原理分析 <a class="header-anchor" href="#jpaspecificationexecutor-原理分析" aria-label="Permalink to &quot;JpaSpecificationExecutor 原理分析&quot;">​</a></h3><p>我们先看一下 JpaSpecificationExecutor 的类图。</p>`,8),m=s("p",null,"从图中我们可以看得出来：",-1),h=s("ol",null,[s("li",null,[s("p",null,"JpaSpecificationExecutor 和 JpaRepository 是平级接口，而它们对应的实现类都是 SimpleJpaRepository；")]),s("li",null,[s("p",null,"Specification 被 ExampleSpecification 和 JpaSpecificationExector 使用，用来创建查询；")]),s("li",null,[s("p",null,"Predicate 是 JPA 协议里面提供的查询条件的根基；")]),s("li",null,[s("p",null,"SimpleJpaRepository 利用 EntityManager 和 criteria 来实现由 JpaSpecificationExector 组合的 query。")])],-1),B=s("p",null,"那么我们再直观地看一下 JpaSpecificationExecutor 接口里面的方法 findAll 对应的 SimpleJpaRepository 里面的实现方法 findAl，我们通过工具可以很容易地看到相应的实现方法，如下所示：",-1),b=s("p",null,"你要知道，得到 TypeQuery 就可以直接操作JPA协议里面相应的方法了，那么我们看下 getQuery（spec，pageable）的实现过程。",-1),S=s("p",null,"之后一步一步 debug 就可以了。",-1),f=p(`<p>到了上图所示这里，就可以看到：</p><ol><li><p>Specification<code>&lt;S&gt;</code> spec 是我们测试用例写的 specification 的匿名实现类；</p></li><li><p>由于是方法传递，所以到第 693 行断点的时候，才会执行我们在测试用里面写的 Specification；</p></li><li><p>我们可以看到这个方法最后是调用的 EntityManager，而 EntitytManger 是 JPA 操作实体的核心原理，我在下一课时讲自定义 Repsitory 的时候再详细介绍；</p></li><li><p>从上面的方法实现过程中我们可以看得出来，所谓的JpaSpecificationExecutor原理，用一句话概况，就是利用Java Persistence API定义的接口和Hibernate的实现，做了一个简单的封装，方便我们操作JPA协议中 criteria 的相关方法。</p></li></ol><p>到这里，原理和使用方法，我们基本介绍完了。你可能会有疑问：这个感觉有点重要，但是一般用不到吧？那么接下来我们看看 JpaSpecificationExecutor 的实战应用场景是什么样的。</p><h3 id="jpaspecificationexecutor-实战应用场景" tabindex="-1">JpaSpecificationExecutor 实战应用场景 <a class="header-anchor" href="#jpaspecificationexecutor-实战应用场景" aria-label="Permalink to &quot;JpaSpecificationExecutor 实战应用场景&quot;">​</a></h3><p>其实JpaSpecificationExecutor 的目的不是让我们做日常的业务查询，而是给我们提供了一种自定义 Query for rest 的架构思路，如果做日常的增删改查，肯定不如我们前面介绍的 Defining Query Methods 和 @Query 方便。</p><p>那么来看下，实战过程中如何利用 JpaSpecificationExecutor 写一个框架。</p><h4 id="myspecification-自定义" tabindex="-1">MySpecification 自定义 <a class="header-anchor" href="#myspecification-自定义" aria-label="Permalink to &quot;MySpecification 自定义&quot;">​</a></h4><p>我们可以自定义一个Specification 的实现类，它可以实现任何实体的动态查询和各种条件的组合。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.spe;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.criteria.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MySpecification</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Entity</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Specification</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Entity</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SearchCriteria criteria;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MySpecification</span><span style="color:#E1E4E8;"> (SearchCriteria </span><span style="color:#FFAB70;">criteria</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.criteria </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> criteria;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 实现实体根据不同的字段、不同的Operator组合成不同的Predicate条件</span></span>
<span class="line"><span style="color:#6A737D;">    *</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">root</span><span style="color:#6A737D;">            must not be {@literal null}.</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">query</span><span style="color:#6A737D;">           must not be {@literal null}.</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">builder</span><span style="color:#6A737D;">  must not be {@literal null}.</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> a {@link Predicate}, may be {@literal null}.</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Predicate </span><span style="color:#B392F0;">toPredicate</span><span style="color:#E1E4E8;">(Root&lt;</span><span style="color:#F97583;">Entity</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, CriteriaQuery&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">query</span><span style="color:#E1E4E8;">, CriteriaBuilder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (criteria.</span><span style="color:#B392F0;">getOperation</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(Operator.GT)</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">greaterThanOrEqualTo</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">               root.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(criteria.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()), criteria.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (criteria.</span><span style="color:#B392F0;">getOperation</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(Operator.LT)</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">lessThanOrEqualTo</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">               root.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(criteria.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()), criteria.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (criteria.</span><span style="color:#B392F0;">getOperation</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(Operator.LK)</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(criteria.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getJavaType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> String.class) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">like</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                  root.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(criteria.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()), </span><span style="color:#9ECBFF;">&quot;%&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> criteria.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;%&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">equal</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(criteria.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()), criteria.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.spe;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.criteria.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MySpecification</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Entity</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Specification</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Entity</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SearchCriteria criteria;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MySpecification</span><span style="color:#24292E;"> (SearchCriteria </span><span style="color:#E36209;">criteria</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.criteria </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> criteria;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 实现实体根据不同的字段、不同的Operator组合成不同的Predicate条件</span></span>
<span class="line"><span style="color:#6A737D;">    *</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">root</span><span style="color:#6A737D;">            must not be {@literal null}.</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">query</span><span style="color:#6A737D;">           must not be {@literal null}.</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">builder</span><span style="color:#6A737D;">  must not be {@literal null}.</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> a {@link Predicate}, may be {@literal null}.</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Predicate </span><span style="color:#6F42C1;">toPredicate</span><span style="color:#24292E;">(Root&lt;</span><span style="color:#D73A49;">Entity</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">root</span><span style="color:#24292E;">, CriteriaQuery&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">query</span><span style="color:#24292E;">, CriteriaBuilder </span><span style="color:#E36209;">builder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (criteria.</span><span style="color:#6F42C1;">getOperation</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Operator.GT)</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">greaterThanOrEqualTo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">               root.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(criteria.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()), criteria.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (criteria.</span><span style="color:#6F42C1;">getOperation</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Operator.LT)</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">lessThanOrEqualTo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">               root.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(criteria.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()), criteria.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (criteria.</span><span style="color:#6F42C1;">getOperation</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Operator.LK)</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(criteria.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getJavaType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> String.class) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">like</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                  root.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(criteria.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()), </span><span style="color:#032F62;">&quot;%&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> criteria.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;%&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(criteria.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()), criteria.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过 <code>&lt;Entity&gt;</code> 泛型，解决不同实体的动态查询（当然了，我只是举个例子，这个方法可以进行无限扩展）。我们通过 SearchCriteria 可以知道不同的字段是什么、值是什么、如何操作的，看一下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.spe;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@author</span><span style="color:#6A737D;"> jack，实现不同的查询条件，不同的操作，针对Value;</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SearchCriteria</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String key;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Operator operation;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Object value;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.spe;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@author</span><span style="color:#6A737D;"> jack，实现不同的查询条件，不同的操作，针对Value;</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SearchCriteria</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String key;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Operator operation;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Object value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中的 Operator 也是我们自定义的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.spe;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Operator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 等于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">EQ</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 等于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">LK</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 不等于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">NE</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;!=&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 大于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">GT</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&gt;&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 小于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">LT</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&lt;&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 大于等于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">GE</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&gt;=&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">Operator</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">operator</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.operator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> operator;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String operator;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.spe;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Operator</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 等于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">EQ</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 等于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">LK</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 不等于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">NE</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;!=&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 大于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">GT</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&gt;&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 小于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">LT</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&lt;&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 大于等于</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">GE</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&gt;=&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">Operator</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">operator</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.operator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> operator;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String operator;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Operator 枚举里面定义了逻辑操作符（大于、小于、不等于、等于、大于等于......也可以自己扩展），并在 MySpecification 里面进行实现。那么我们来看看它是怎么用的，写一个测试用例试一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 测试自定义的Specification语法</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">givenLast_whenGettingListOfUsers_thenCorrect</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    MySpecification&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; name </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> MySpecification&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SearchCriteria</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, Operator.LK, </span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">MySpecification&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; age </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> MySpecification&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SearchCriteria</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">, Operator.GT, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Specification.</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(name).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(age));</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(results.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 测试自定义的Specification语法</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">givenLast_whenGettingListOfUsers_thenCorrect</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    MySpecification&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; name </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MySpecification&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SearchCriteria</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, Operator.LK, </span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">MySpecification&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; age </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MySpecification&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SearchCriteria</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">, Operator.GT, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Specification.</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(age));</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(results.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你就会发现，我们在调用findAll 组合 Predicate 的时候就会非常简单，省去了各种条件的判断和组合，而省去的这些逻辑可以全部在我们的框架代码 MySpecification 里面实现。</p><p>那么如果把这个扩展到 API 接口层面会是什么样的结果呢？我们来看下。</p><h4 id="利用-specification-创建-search-为查询条件的-rest-api-接口" tabindex="-1">利用 Specification 创建 search 为查询条件的 Rest API 接口 <a class="header-anchor" href="#利用-specification-创建-search-为查询条件的-rest-api-接口" aria-label="Permalink to &quot;利用 Specification 创建 search 为查询条件的 Rest API 接口&quot;">​</a></h4><p>先创建一个 Controller，用来接收 search 这样的查询条件：类似 userssearch=lastName:doe,age&gt;25 的参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.web;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.jpa.example1.UserRepository;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.jpa.example1.spe.SpecificationsBuilder;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.web.bind.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository repo;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RequestMethod.GET, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">search</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Specification&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; spec </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> SpecificationsBuilder&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt;().</span><span style="color:#B392F0;">buildSpecification</span><span style="color:#E1E4E8;">(search);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repo.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(spec);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.web;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.jpa.example1.UserRepository;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.jpa.example1.spe.SpecificationsBuilder;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.web.bind.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository repo;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">search</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Specification&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; spec </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> SpecificationsBuilder&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt;().</span><span style="color:#6F42C1;">buildSpecification</span><span style="color:#24292E;">(search);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repo.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(spec);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Controller 里面非常简单，利用 SpecificationsBuilder 生成我们需要的 Specification 即可。那么我们看看 SpecificationsBuilder 里面是怎么写的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.spe;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.Matcher;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.Pattern;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.Collectors;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 处理请求参数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">&lt;Entity&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpecificationsBuilder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Entity</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">SearchCriteria</span><span style="color:#E1E4E8;">&gt; params;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//初始化params，保证每次实例都是一个新的ArrayList</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpecificationsBuilder</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">SearchCriteria</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//利用正则表达式取我们search参数里面的值，解析成SearchCriteria对象</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Specification&lt;</span><span style="color:#F97583;">Entity</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">buildSpecification</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">search</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Pattern pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w+?)(:|&lt;|&gt;)(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w+?),&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      Matcher matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(search </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (matcher.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(matcher.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), Operator.</span><span style="color:#B392F0;">fromOperator</span><span style="color:#E1E4E8;">(matcher.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)), matcher.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据参数返回我们刚才创建的SearchCriteria</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SpecificationsBuilder </span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, Operator </span><span style="color:#FFAB70;">operation</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      params.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SearchCriteria</span><span style="color:#E1E4E8;">(key, operation, value));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据我们刚才创建的MySpecification返回所需要的Specification</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Specification&lt;</span><span style="color:#F97583;">Entity</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (params.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;</span><span style="color:#F97583;">Specification</span><span style="color:#E1E4E8;">&gt; specs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(MySpecification</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;::new</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      Specification result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> specs.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Specification.</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(result)</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(specs.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.spe;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.Matcher;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.Pattern;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.Collectors;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 处理请求参数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;Entity&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpecificationsBuilder</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Entity</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">SearchCriteria</span><span style="color:#24292E;">&gt; params;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//初始化params，保证每次实例都是一个新的ArrayList</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpecificationsBuilder</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">SearchCriteria</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//利用正则表达式取我们search参数里面的值，解析成SearchCriteria对象</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Specification&lt;</span><span style="color:#D73A49;">Entity</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">buildSpecification</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">search</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      Pattern pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+?)(:|&lt;|&gt;)(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+?),&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      Matcher matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(search </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (matcher.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">(matcher.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), Operator.</span><span style="color:#6F42C1;">fromOperator</span><span style="color:#24292E;">(matcher.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)), matcher.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据参数返回我们刚才创建的SearchCriteria</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SpecificationsBuilder </span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, Operator </span><span style="color:#E36209;">operation</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      params.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SearchCriteria</span><span style="color:#24292E;">(key, operation, value));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据我们刚才创建的MySpecification返回所需要的Specification</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Specification&lt;</span><span style="color:#D73A49;">Entity</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (params.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;</span><span style="color:#D73A49;">Specification</span><span style="color:#24292E;">&gt; specs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> params.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(MySpecification</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;::new</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      Specification result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> specs.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> params.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Specification.</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(result)</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(specs.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i));</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过上面的代码，我们可以看到通过自定义的 SpecificationsBuilder，来处理请求参数 search 里面的值，然后转化成我们上面写的 SearchCriteria 对象，再调用 MySpecification 生成我们需要的 Specification，从而利用 JpaSpecificationExecutor 实现查询效果。是不是学起来并不困难了，你学会了吗？</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时，我们通过实例学习了 JpaSpecificationExecutor 的用法，并且通过源码了解了 JpaSpecificationExecutor 的实现原理，最后我举了一个实战场景的例子，使我们可以利用 Spring Data JPA and Specifications 很轻松地创建一个基于 Search 的 Rest API。虽然我介绍的这个例子还有很多可以扩展的地方，但是希望你根据实际情况再进行相应的扩展。</p><p>这里顺带留一个思考题：怎么查询 UserAddress？提示你可以利用我上面提到的 SpecificationsBuilder 进行解决。</p><p>本课时到这就结束了，欢迎你在下面留言讨论或分享。下节课，我会为你讲解如何自定义 Repository。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,28);function v(q,_,k,x,T,j){const a=o("Image");return e(),t("div",null,[E,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5E/C7/Ciqc1F-Hw4GAVwjvAACBlHuTFN0497.png"}),y,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/5E/C7/Ciqc1F-Hw4uAGaD2AADHMlVN_q0440.png"}),i,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/5E/C7/Ciqc1F-Hw5SAeoXKAAMzN3mF_8I181.png"}),F,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5E/C7/Ciqc1F-Hw6uAJmdyAALVLoSlnLQ418.png"}),u,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/5E/D2/CgqCHl-Hw7SAYWLnAAEIg0u_SOc872.png"}),d,g,A,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/5E/C7/Ciqc1F-Hw7yAZgOYAASXGLn8fS0352.png"}),D,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/5E/D3/CgqCHl-Hw8KAS41dAAKQ7MNjups722.png"}),C,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/5E/C7/Ciqc1F-Hw9KAPLUnAAEGAy5X1Y8192.png"}),m,h,B,n(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/5E/D3/CgqCHl-Hw9uAHAiHAAFZTdcBw2Y564.png"}),b,n(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/5E/C7/Ciqc1F-Hw-qAcTArAACqAeHRq3M302.png"}),S,n(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/5E/D3/CgqCHl-Hw_KAU1wCAAW1BokuNt8728.png"}),f])}const U=l(r,[["render",v]]);export{P as __pageData,U as default};
