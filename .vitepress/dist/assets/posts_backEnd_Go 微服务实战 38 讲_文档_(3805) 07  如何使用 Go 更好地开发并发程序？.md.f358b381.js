import{_ as o,j as e,o as t,g as c,k as a,h as l,Q as p,s}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"07如何使用Go更好地开发并发程序？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3805) 07  如何使用 Go 更好地开发并发程序？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3805) 07  如何使用 Go 更好地开发并发程序？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3805) 07  如何使用 Go 更好地开发并发程序？.md"},E=p('<h1 id="_07如何使用go更好地开发并发程序" tabindex="-1">07如何使用Go更好地开发并发程序？ <a class="header-anchor" href="#_07如何使用go更好地开发并发程序" aria-label="Permalink to &quot;07如何使用Go更好地开发并发程序？&quot;">​</a></h1><p>我们都知道计算机的核心为 CPU，它是计算机的运算和控制核心，承载了所有的计算任务。最近半个世纪以来，由于半导体技术的高速发展，集成电路中晶体管的数量也在大幅度增长，这大大提升了 CPU 的性能。著名的摩尔定律------&quot;集成电路芯片上所集成的电路的数目，每隔18个月就翻一番&quot;，描述的就是该种情形。</p><p>过于密集的晶体管虽然提高了 CPU 的处理性能，但也带来了单个芯片发热过高和成本过高的问题，与此同时，受限于材料技术的发展，芯片中晶体管数量密度的增加速度已经放缓。也就是说，程序已经无法简单地依赖硬件的提升而提升运行速度。这时，多核 CPU 的出现让我们看到了提升程序运行速度的另一个方向：将程序的执行过程分为多个可并行或并发执行的步骤，让它们分别在不同的 CPU 核心中同时执行，最后将各部分的执行结果进行合并得到最终结果。</p><p>并行和并发是计算机程序执行的常见概念，它们的区别在于：</p><ul><li><p><strong>并行</strong> ，指两个或多个程序在<strong>同一个时刻</strong>执行；</p></li><li><p><strong>并发</strong> ，指两个或多个程序在<strong>同一个时间段内</strong>执行。</p></li></ul><p><strong>并行执行的程序</strong>，无论从宏观还是微观的角度观察，同一时刻内都有多个程序在 CPU 中执行。这就要求 CPU 提供多核计算能力，多个程序被分配到 CPU 的不同的核中被同时执行。</p><p>而<strong>并发执行的程序</strong>，仅需要在宏观角度观察到多个程序在 CPU 中同时执行。即使是单核 CPU 也可以通过分时复用的方式，给多个程序分配一定的执行时间片，让它们在 CPU 上被快速轮换执行，从而在宏观上模拟出多个程序同时执行的效果。但从微观角度来看，这些程序其实是在 CPU 中被串行执行。</p><h3 id="go-的-mpg-线程模型" tabindex="-1">Go 的 MPG 线程模型 <a class="header-anchor" href="#go-的-mpg-线程模型" aria-label="Permalink to &quot;Go 的 MPG 线程模型&quot;">​</a></h3><p>Go 被认为是一门高性能并发语言，得益于它在原生态支持<strong>协程并发</strong>。这里我们首先了解进程、线程和协程这三者的联系和区别。</p><p>在多道程序系统中，<strong>进程</strong>是一个具有独立功能的程序关于某个数据集合的一次动态执行过程，是操作系统进行资源分配和调度的基本单位，是应用程序运行的载体。</p><p>而<strong>线程</strong> 则是程序执行过程中一个单一的顺序控制流程，是 CPU 调度和分派的基本单位。<strong>线程是比进程更小的独立运行基本单位</strong>，一个进程中可以拥有一个或者以上的线程，这些线程共享进程所持有的资源，在 CPU 中被调度执行，共同完成进程的执行任务。</p><p>在 Linux 系统中，根据资源访问权限的不同，操作系统会把内存空间分为内核空间和用户空间：内核空间的代码能够直接访问计算机的底层资源，如 CPU 资源、I/O 资源等，为用户空间的代码提供计算机底层资源访问能力；用户空间为上层应用程序的活动空间，无法直接访问计算机底层资源，需要借助&quot;系统调用&quot;&quot;库函数&quot;等方式调用内核空间提供的资源。</p><p>同样，线程也可以分为内核线程和用户线程。<strong>内核线程</strong> 由操作系统管理和调度，是内核调度实体，它能够直接操作计算机底层资源，可以充分利用 CPU 多核并行计算的优势，但是线程切换时需要 CPU 切换到内核态，存在一定的开销，可创建的线程数量也受到操作系统的限制。<strong>用户线程</strong>由用户空间的代码创建、管理和调度，无法被操作系统感知。用户线程的数据保存在用户空间中，切换时无须切换到内核态，切换开销小且高效，可创建的线程数量理论上只与内存大小相关。</p><p><strong>协程是一种用户线程，属于轻量级线程</strong>。协程的调度，完全由用户空间的代码控制；协程拥有自己的寄存器上下文和栈，并存储在用户空间；协程切换时无须切换到内核态访问内核空间，切换速度极快。但这也给开发人员带来较大的技术挑战：开发人员需要在用户空间处理协程切换时上下文信息的保存和恢复、栈空间大小的管理等问题。</p><p>Go 是为数不多在语言层次实现协程并发的语言，它采用了一种特殊的两级线程模型：MPG 线程模型（如下图）。</p>',15),y=s("ul",null,[s("li",null,[s("p",null,"M，即 machine，相当于内核线程在 Go 进程中的映射，它与内核线程一一对应，代表真正执行计算的资源。在 M 的生命周期内，它只会与一个内核线程关联。")]),s("li",null,[s("p",null,"P，即 processor，代表 Go 代码片段执行所需的上下文环境。M 和 P 的结合能够为 G 提供有效的运行环境，它们之间的结合关系不是固定的。P 的最大数量决定了 Go 程序的并发规模，由 runtime.GOMAXPROCS 变量决定。")]),s("li",null,[s("p",null,"G，即 goroutine，是一种轻量级的用户线程，是对代码片段的封装，拥有执行时的栈、状态和代码片段等信息。")])],-1),i=s("p",null,"在实际执行过程中，M 和 P 共同为 G 提供有效的运行环境（如下图），多个可执行的 G 顺序挂载在 P 的可执行 G 队列下面，等待调度和执行。当 G 中存在一些 I/O 系统调用阻塞了 M 时，P 将会断开与 M 的联系，从调度器空闲 M 队列中获取一个 M 或者创建一个新的 M 组合执行， 保证 P 中可执行 G 队列中其他 G 得到执行，且由于程序中并行执行的 M 数量没变，保证了程序 CPU 的高利用率。",-1),F=p(`<p>当 G 中系统调用执行结束返回时，M 会为 G 捕获一个 P 上下文，如果捕获失败，就把 G 放到全局可执行 G 队列等待其他 P 的获取。新创建的 G 会被放置到全局可执行 G 队列中，等待调度器分发到合适的 P 的可执行 G 队列中。M 和 P 结合后，会从 P 的可执行 G 队列中无锁获取 G 执行。当 P 的可执行 G 队列为空时，P 才会加锁从全局可执行 G 队列获取 G。当全局可执行 G 队列中也没有 G 时，P 会尝试从其他 P 的可执行 G 队列中&quot;剽窃&quot; G 执行。</p><h3 id="goroutine-和-channel" tabindex="-1">goroutine 和 channel <a class="header-anchor" href="#goroutine-和-channel" aria-label="Permalink to &quot;goroutine 和 channel&quot;">​</a></h3><p>并发程序中的多个线程同时在 CPU 执行，由于资源之间的相互依赖和竞态条件，需要一定的并发模型协作不同线程之间的任务执行。Go 中倡导使用 <strong>CSP 并发模型</strong>来控制线程之间的任务协作，CSP 倡导使用通信的方式来进行线程之间的内存共享。</p><p>Go 是通过 goroutine 和 channel 来实现 CSP 并发模型的：</p><ul><li><p><strong>goroutine，即协程</strong>，Go 中的并发实体，是一种轻量级的用户线程，是消息的发送和接收方；</p></li><li><p><strong>channel，即通道</strong>， goroutine 使用通道发送和接收消息。</p></li></ul><p>CSP 并发模型类似常用的同步队列，它更加关注消息的传输方式，解耦了发送消息的 goroutine 和接收消息的 goroutine，channel 可以独立创建和存取，在不同的 goroutine 中传递使用。</p><p>使用关键字 go 即可使用 goroutine 并发执行代码片段，形式如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> expression</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> expression</span></span></code></pre></div><p>而 channel 作为一种引用类型，声明时需要指定传输数据类型，声明形式如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> T </span><span style="color:#6A737D;">// 双向 channel</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name chan</span><span style="color:#FDAEB7;font-style:italic;"> </span><span style="color:#E1E4E8;">&lt;- T </span><span style="color:#6A737D;">// 只能发送消息的 channel</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name T &lt;-</span><span style="color:#FDAEB7;font-style:italic;"> </span><span style="color:#E1E4E8;">chan </span><span style="color:#6A737D;">// 只能接收消息的 channel</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> T </span><span style="color:#6A737D;">// 双向 channel</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name chan</span><span style="color:#B31D28;font-style:italic;"> </span><span style="color:#24292E;">&lt;- T </span><span style="color:#6A737D;">// 只能发送消息的 channel</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name T &lt;-</span><span style="color:#B31D28;font-style:italic;"> </span><span style="color:#24292E;">chan </span><span style="color:#6A737D;">// 只能接收消息的 channel</span></span></code></pre></div><p>其中，T 即为 channel 可传输的数据类型。channel 作为队列，遵循消息先进先出的顺序，同时保证同一时刻只能有一个 goroutine 发送或者接收消息。</p><p>使用 channel 发送和接收消息形式如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">channel </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> val </span><span style="color:#6A737D;">// 发送消息</span></span>
<span class="line"><span style="color:#E1E4E8;">val </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> channel </span><span style="color:#6A737D;">// 接收消息</span></span>
<span class="line"><span style="color:#E1E4E8;">val, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> channel </span><span style="color:#6A737D;">// 非阻塞接收消息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">channel </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> val </span><span style="color:#6A737D;">// 发送消息</span></span>
<span class="line"><span style="color:#24292E;">val </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> channel </span><span style="color:#6A737D;">// 接收消息</span></span>
<span class="line"><span style="color:#24292E;">val, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> channel </span><span style="color:#6A737D;">// 非阻塞接收消息</span></span></code></pre></div><p>goroutine 向已经填满信息的 channel 发送信息或从没有数据的 channel 接收信息会阻塞自身。goroutine 接收消息时可以使用非阻塞的方式，无论 channel 中是否存在消息都会立即返回，通过 ok 布尔值判断是否接收成功。</p><p>创建一个 channel 需要使用 make 函数对 channel 进行初始化，形式如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ch </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> T, sizeOfChan)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ch </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> T, sizeOfChan)</span></span></code></pre></div><p>初始化 channel 时可以指定 channel 的长度，表示 channel 最多可以缓存多少条信息。下面我们通过一个简单例子演示 goroutine 和 channel 的使用：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//生产者</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Producer</span><span style="color:#E1E4E8;">(begin, end </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, queue </span><span style="color:#F97583;">chan&lt;-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> begin ; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end ; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;produce:&quot;</span><span style="color:#E1E4E8;">, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">		queue </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//消费者</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Consumer</span><span style="color:#E1E4E8;">(queue </span><span style="color:#F97583;">&lt;-chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> queue  { </span><span style="color:#6A737D;">//当前的消费者循环消费</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;consume:&quot;</span><span style="color:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	queue </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">close</span><span style="color:#E1E4E8;">(queue)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Producer</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, (i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, queue) </span><span style="color:#6A737D;">//多个生产者</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Consumer</span><span style="color:#E1E4E8;">(queue) </span><span style="color:#6A737D;">//单个消费者</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(time.Second) </span><span style="color:#6A737D;">// 避免主 goroutine 结束程序</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//生产者</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Producer</span><span style="color:#24292E;">(begin, end </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, queue </span><span style="color:#D73A49;">chan&lt;-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> begin ; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end ; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;produce:&quot;</span><span style="color:#24292E;">, i)</span></span>
<span class="line"><span style="color:#24292E;">		queue </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> i</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//消费者</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Consumer</span><span style="color:#24292E;">(queue </span><span style="color:#D73A49;">&lt;-chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> queue  { </span><span style="color:#6A737D;">//当前的消费者循环消费</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;consume:&quot;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	queue </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">close</span><span style="color:#24292E;">(queue)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Producer</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, (i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, queue) </span><span style="color:#6A737D;">//多个生产者</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Consumer</span><span style="color:#24292E;">(queue) </span><span style="color:#6A737D;">//单个消费者</span></span>
<span class="line"><span style="color:#24292E;">	time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(time.Second) </span><span style="color:#6A737D;">// 避免主 goroutine 结束程序</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是一个简单的多生产者和单消费的代码例子，生产 goroutine 将生产的数字通过 channel 发送给消费 goroutine。上述例子中，消费 goroutine 使用 for:range 从 channel 中循环接收消息，只有当相应的 channel 被内置函数 close 后，该循环才会结束。channel 在关闭之后不可以再用于发送消息，但是可以继续用于接收消息，从关闭的 channel 中接收消息或者正在被阻塞的 goroutine 将会接收零值并返回。还有一个需要注意的点是，main 函数由主 goroutine 启动，当主 goroutine 即 main 函数执行结束，整个 Go 程序也会直接执行结束，无论是否存在其他未执行完的 goroutine。</p><h4 id="_1-select-多路复用" tabindex="-1">1. select 多路复用 <a class="header-anchor" href="#_1-select-多路复用" aria-label="Permalink to &quot;1. select 多路复用&quot;">​</a></h4><p>当需要从多个 channel 中接收消息时，可以使用 Go 提供的 select 关键字，它提供类似多路复用的能力，使得 goroutine 可以同时等待多个 channel 的读写操作。select 的形式与 switch 类似，但是要求 case 语句后面必须为 channel 的收发操作，一个简单的例子如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(ch </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, begin </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> )  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 循环向 channel 发送消息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">begin ; i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> begin </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> ;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		ch </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">receive</span><span style="color:#E1E4E8;">(ch </span><span style="color:#F97583;">&lt;-chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	val </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> ch</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;receive:&quot;</span><span style="color:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ch1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	ch2 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">send</span><span style="color:#E1E4E8;">(ch1, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">receive</span><span style="color:#E1E4E8;">(ch2)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 主 goroutine 休眠 1s，保证调度成功</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> ch1: </span><span style="color:#6A737D;">// 从 ch1 读取数据</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get value </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> from ch1</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ch2 </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> : </span><span style="color:#6A737D;">// 使用 ch2 发送消息</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;send value by ch2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">time.</span><span style="color:#79B8FF;">After</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second): </span><span style="color:#6A737D;">// 超时设置</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Time out&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(ch </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, begin </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> )  {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 循环向 channel 发送消息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">begin ; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> begin </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> ;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		ch </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> i</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">(ch </span><span style="color:#D73A49;">&lt;-chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)  {</span></span>
<span class="line"><span style="color:#24292E;">	val </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> ch</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;receive:&quot;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">	ch1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	ch2 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">send</span><span style="color:#24292E;">(ch1, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">receive</span><span style="color:#24292E;">(ch2)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 主 goroutine 休眠 1s，保证调度成功</span></span>
<span class="line"><span style="color:#24292E;">	time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(time.Second)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> ch1: </span><span style="color:#6A737D;">// 从 ch1 读取数据</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get value </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> from ch1</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ch2 </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> : </span><span style="color:#6A737D;">// 使用 ch2 发送消息</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;send value by ch2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">time.</span><span style="color:#005CC5;">After</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second): </span><span style="color:#6A737D;">// 超时设置</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Time out&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述例子中，我们使用 select 关键字同时从 ch1 中接收数据和使用 ch2 发送数据，输出的一种可能结果为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">send value by ch2</span></span>
<span class="line"><span style="color:#E1E4E8;">receive</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">get value </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> from ch1</span></span>
<span class="line"><span style="color:#E1E4E8;">Time out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">send value by ch2</span></span>
<span class="line"><span style="color:#24292E;">receive</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">get value </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> from ch1</span></span>
<span class="line"><span style="color:#24292E;">Time out</span></span></code></pre></div><p>由于 ch2 中的消息仅被接收一次，所以仅出现一次&quot;send value by ch2&quot;，后续消息的发送将被阻塞。select 语句分别从 3 个 case 中选取返回的 case 进行处理，当有多个 case 语句同时返回时，select 将会随机选择一个 case 进行处理。如果 select 语句的最后包含 default 语句，该 select 语句将会变为非阻塞型，即当其他所有的 case 语句都被阻塞无法返回时，select 语句将直接执行 default 语句返回结果。在上述例子中，我们在最后的 case 语句使用了 &lt;-time.After(2 * time.Second) 的方式指定了定时返回的 channel，这是一种有效从阻塞的 channel 中超时返回的小技巧。</p><h4 id="_2-context-上下文" tabindex="-1">2. Context 上下文 <a class="header-anchor" href="#_2-context-上下文" aria-label="Permalink to &quot;2. Context 上下文&quot;">​</a></h4><p>当需要在多个 goroutine 中传递上下文信息时，可以使用 Context 实现。Context 除了用来传递上下文信息，还可以用于传递终结执行子任务的相关信号，中止多个执行子任务的 goroutine。Context 中提供以下接口：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Context</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Deadline</span><span style="color:#E1E4E8;">() (deadline time.Time, ok </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;-chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Err</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Deadline</span><span style="color:#24292E;">() (deadline time.Time, ok </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;-chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Err</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>Deadline 方法，返回 Context 被取消的时间，也就是完成工作的截止日期；</p></li><li><p>Done，返回一个 channel，这个 channel 会在当前工作完成或者上下文被取消之后关闭，多次调用 Done 方法会返回同一个 channel；</p></li><li><p>Err 方法，返回 Context 结束的原因，它只会在 Done 返回的 channel 被关闭时才会返回非空的值，如果 Context 被取消，会返回 Canceled 错误；如果 Context 超时，会返回 DeadlineExceeded 错误。</p></li><li><p>Value 方法，可用于从 Context 中获取传递的键值信息。</p></li></ul><p>在 Web 请求的处理过程中，一个请求可能启动多个 goroutine 协同工作，这些 goroutine 之间可能需要共享请求的信息，且当请求被取消或者执行超时时，该请求对应的所有 goroutine 都需要快速结束，释放资源。Context 就是为了解决上述场景而开发的，我们通过下面一个例子来演示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> DB_ADDRESS  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db_address&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> CALCULATE_VALUE  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;calculate_value&quot;</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readDB</span><span style="color:#E1E4E8;">(ctx context.Context, cost time.Duration)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db address is&quot;</span><span style="color:#E1E4E8;">, ctx.</span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(DB_ADDRESS))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> time.</span><span style="color:#79B8FF;">After</span><span style="color:#E1E4E8;">(cost): </span><span style="color:#6A737D;">//  模拟数据库读取</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;read data from db&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">ctx.</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(ctx.</span><span style="color:#79B8FF;">Err</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 任务取消的原因</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 一些清理工作</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calculate</span><span style="color:#E1E4E8;">(ctx context.Context, cost time.Duration)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;calculate value is&quot;</span><span style="color:#E1E4E8;">, ctx.</span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(CALCULATE_VALUE))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> time.</span><span style="color:#79B8FF;">After</span><span style="color:#E1E4E8;">(cost): </span><span style="color:#6A737D;">//  模拟数据计算</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;calculate finish&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">ctx.</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(ctx.</span><span style="color:#79B8FF;">Err</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 任务取消的原因</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 一些清理工作</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 创建一个空的上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 添加上下文信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithValue</span><span style="color:#E1E4E8;">(ctx, DB_ADDRESS, </span><span style="color:#9ECBFF;">&quot;localhost:10086&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithValue</span><span style="color:#E1E4E8;">(ctx, CALCULATE_VALUE, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 设定子 Context 2s 后执行超时返回</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx, cancel </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithTimeout</span><span style="color:#E1E4E8;">(ctx, time.Second </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 设定执行时间为 4 s</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">readDB</span><span style="color:#E1E4E8;">(ctx, time.Second </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">calculate</span><span style="color:#E1E4E8;">(ctx, time.Second </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 充分执行</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(time.Second </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> DB_ADDRESS  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db_address&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> CALCULATE_VALUE  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;calculate_value&quot;</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readDB</span><span style="color:#24292E;">(ctx context.Context, cost time.Duration)  {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db address is&quot;</span><span style="color:#24292E;">, ctx.</span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(DB_ADDRESS))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> time.</span><span style="color:#005CC5;">After</span><span style="color:#24292E;">(cost): </span><span style="color:#6A737D;">//  模拟数据库读取</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;read data from db&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">ctx.</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(ctx.</span><span style="color:#005CC5;">Err</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 任务取消的原因</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 一些清理工作</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calculate</span><span style="color:#24292E;">(ctx context.Context, cost time.Duration)  {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;calculate value is&quot;</span><span style="color:#24292E;">, ctx.</span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(CALCULATE_VALUE))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> time.</span><span style="color:#005CC5;">After</span><span style="color:#24292E;">(cost): </span><span style="color:#6A737D;">//  模拟数据计算</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;calculate finish&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">ctx.</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(ctx.</span><span style="color:#005CC5;">Err</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 任务取消的原因</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 一些清理工作</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">	ctx </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 创建一个空的上下文</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 添加上下文信息</span></span>
<span class="line"><span style="color:#24292E;">	ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithValue</span><span style="color:#24292E;">(ctx, DB_ADDRESS, </span><span style="color:#032F62;">&quot;localhost:10086&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithValue</span><span style="color:#24292E;">(ctx, CALCULATE_VALUE, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 设定子 Context 2s 后执行超时返回</span></span>
<span class="line"><span style="color:#24292E;">	ctx, cancel </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithTimeout</span><span style="color:#24292E;">(ctx, time.Second </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 设定执行时间为 4 s</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">readDB</span><span style="color:#24292E;">(ctx, time.Second </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">calculate</span><span style="color:#24292E;">(ctx, time.Second </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 充分执行</span></span>
<span class="line"><span style="color:#24292E;">    time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(time.Second </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述例子中，我们模拟了一个请求中同时进行数据库访问和逻辑计算的操作，在请求执行超时时，及时关闭尚未执行结束 goroutine。我们首先通过 context.WithValue 方法为 context 添加上下文信息，Context 在多个 goroutine 中是并发安全的，可以安全地在多个 goroutine 中对 Context 中的上下文数据进行读取。接着使用 context.WithTimeout 方法设定了 Context 的超时时间为 2s，并传递给 readDB 和 calculate 两个 goroutine 执行子任务。在 readDB 和 calculate 方法中，使用 select 语句对 Context 的 Done 通道进行监控。由于我们设定了子 Context 将在 2s 之后超时，所以它将在 2s 之后关闭 Done 通道；然而预设的子任务执行时间为 4s，对应的 case 语句尚未返回，执行被取消，进入到清理工作的 case 语句中，结束掉当前的 goroutine 所执行的任务。预期的输出结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">calculate value is </span><span style="color:#79B8FF;">1234</span></span>
<span class="line"><span style="color:#E1E4E8;">db address is localhost</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10086</span></span>
<span class="line"><span style="color:#E1E4E8;">context deadline exceeded</span></span>
<span class="line"><span style="color:#E1E4E8;">context deadline exceeded</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">calculate value is </span><span style="color:#005CC5;">1234</span></span>
<span class="line"><span style="color:#24292E;">db address is localhost</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10086</span></span>
<span class="line"><span style="color:#24292E;">context deadline exceeded</span></span>
<span class="line"><span style="color:#24292E;">context deadline exceeded</span></span></code></pre></div><p>使用 Context，能够有效地在一组 goroutine 中传递共享值、取消信号、deadline 等信息，及时关闭不需要的 goroutine。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本节课我们介绍了 Go 语言并发特性，主要包含：</p><ul><li><p>Go 的 MPG 线程模型；</p></li><li><p>goroutine 和 channel；</p></li><li><p>select 多路复用；</p></li><li><p>Context 上下文。</p></li></ul><p>除了支持 CSP 的并发模型，Go 同样支持传统的线程与锁并发模型，提供了互斥锁、读写锁、并发等待组、同步等待条件等一系列同步工具，这些同步工具的结构体位于 sync 包中，与其他语言的同步工具使用方式相差无几。Go 在语言层次支持协程并发，在并发性能上表现卓越，能够充分挖掘多核 CPU 的运算性能。希望本节课的学习，能够有效提升你对 Go 并发设计和编程的认知。</p><p>最后，欢迎在留言区和我交流分享。</p>`,39);function u(C,d,h,g,D,A){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/36/9A/Ciqc1F8X5ymAf7NvAAE_PDbjFtw120.png"}),l(),y,i,a(n,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/36/9A/Ciqc1F8X5zuAQrDLAAEpRhFm8n4546.png"}),l(),F])}const v=o(r,[["render",u]]);export{B as __pageData,v as default};
