import{_ as o,D as e,o as t,g as r,J as l,h as n,m as s,Q as p}from"./chunks/framework.f67d7268.js";const Q=JSON.parse('{"title":"第31讲：OAL语言，原来定义创造一门新语言如此轻松（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1748) 第31讲：OAL 语言，原来定义创造一门新语言如此轻松（上）.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1748) 第31讲：OAL 语言，原来定义创造一门新语言如此轻松（上）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1748) 第31讲：OAL 语言，原来定义创造一门新语言如此轻松（上）.md"},E=s("h1",{id:"第31讲-oal语言-原来定义创造一门新语言如此轻松-上",tabindex:"-1"},[n("第31讲：OAL语言，原来定义创造一门新语言如此轻松（上） "),s("a",{class:"header-anchor",href:"#第31讲-oal语言-原来定义创造一门新语言如此轻松-上","aria-label":'Permalink to "第31讲：OAL语言，原来定义创造一门新语言如此轻松（上）"'},"​")],-1),y=s("p",null,"在前文介绍 Metrics 实现以及对应的 DIspatcher 实现的时候，会发现有一部分实现类位于 generated-analysis 模块的 target/generated-sources 目录中，这些类的开头都会有下图所示的注释：",-1),i=s("p",null,"通过这行注释我们知道，这些类是通过 OAL（Observability Analysis Language）生成的。OAL 是 SkyWalking 后端自定义的一种脚本，在 SkyWalking 编译阶段会通过 Antlr4 解析 OAL 脚本，并与 freemarker 配合使用，生成上述 Metrics 实现类以及对应的 Dispatcher 实现类。生成的结果如下图所示：",-1),g=p(`<p>在生成上述代码的过程主要涉及的模块有：generate-tool、generate-tool-grammar、generated-analysis 三个模块。本课时将详细介绍生成上述代码过程中使用到的基础知识以及这三个模块的核心实现。</p><h3 id="antlr4-基础入门" tabindex="-1">Antlr4 基础入门 <a class="header-anchor" href="#antlr4-基础入门" aria-label="Permalink to &quot;Antlr4 基础入门&quot;">​</a></h3><p>Antlr4（Another Tool for Language Recognition）是一款强大的语法生成器工具，它可以根据输入的字节流自动生成语法树，作为一款开源语法分析器，可用于读取、处理、执行和翻译结构化的文本或二进制文件。基本上是当前 Java 语言中使用最为广泛的语法生成器工具，下面简单列举了 Antlr4 出现的场景：</p><ul><li><p>在很多大数据系统中都使用 Antlr4 ，例如，Hadoop 生态系统中的 Hive、Spark 数据仓库和分析系统所使用的语言，都用到了 Antlr4；</p></li><li><p>Hibernate 对象-关系映射框架（ORM）使用 Antlr 来处理 HQL 语言；</p></li><li><p>Oracle 公司在 SQL 开发者 IDE 和迁移工具中使用了 Antlr4；</p></li><li><p>NetBeans 使用 Antlr4 来解析 C++。</p></li></ul><p>本课时将通过 Antlr4 实现一个简单的计算器功能，在开始之前，我们需要先了解 Antlr4 的一些基础知识。</p><p><strong>词法分析器（Lexer）</strong></p><p>我们的编程语言通常由一系列关键字以及一套严格定义的语法结构组成。编译的目的是将程序员日常使用的高级编程语言翻译成物理机或是虚拟机可以执行的二进制指令。词法分析器的工作是读取、解析程序员写出来的代码文件，这些文件基本都是文本文件。词法分析器通过读取代码文件中的字节流，就可以将其翻译成一个一个连续的、编程语言预先定义好的 Token 。一个 Token 可以是关键字、标识符、符号（symbols）和操作符等等，下面的语法分析器将通过这些 Token 构造抽象语法树（Abstract Syntax Tree，AST）。</p><p><strong>语法分析器（Parser）</strong></p><p>在分析读取到的字符流时，词法分析器（Lexer）并不关心所生成的单个 Token 的语法意义及其与上下文之间的关系。语法分析器（Parser）将收到的所有 Token 组织起来，并转换成为目标语言语法定义所允许的序列。</p><p>无论是 Lexer 还是 Parser 都是一种识别器，Lexer 是字符序列识别器，而 Parser 是 Token 序列识别器。它们在本质上是类似的东西，而只是在分工上有所不同而已。例如以一条赋值语句</p><pre><code>sp = 100;
</code></pre><p>为例来看它在词法分析器（Lexer）以及语法分析器（Parser）中的处理流程，如下图所示：</p>`,12),F=p(`<p>Antlr4 允许我们定义识别字符流的词法规则以及用于解释 Token 流的语法分析规则。Antlr4 将会根据用户提供的语法（grammer）文件自动生成相应的词法/语法分析器。用户可以利用它们将输入的文本进行编译，并转换成其他形式，比如前面提到的抽象的语法树（AST）。</p><p>下面开始进入我们的&quot;计算器&quot;示例，为了告诉 Antlr4 计算器的词法分析规则和语法分析规则，我们需要定义语法（grammar）文件（&quot;.g4&quot;后缀文件），这就使用到了 Antlr4 的元语言。下面结合计算器示例的 grammar 文件 ------ Calculator.g4，介绍一下 Antlr4 元语言的基本内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">grammar Calculator; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">expr </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;"> expr </span><span style="color:#9ECBFF;">&#39;)&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expr</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">) expr</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expr</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">) expr</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> FLOAT</span></span>
<span class="line"><span style="color:#E1E4E8;">     ;</span></span>
<span class="line"><span style="color:#E1E4E8;">line </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> expr EOF ;</span></span>
<span class="line"><span style="color:#E1E4E8;">WS </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [ \\t\\n\\r]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> skip;</span></span>
<span class="line"><span style="color:#E1E4E8;">FLOAT </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> DIGIT</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> DIGIT</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> EXPONET</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> DIGIT</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> EXPONET</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> DIGIT</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> EXPONET</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">      ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fragment DIGIT </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">..</span><span style="color:#9ECBFF;">&#39;9&#39;</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">fragment EXPONENT </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;E&#39;</span><span style="color:#E1E4E8;">) (</span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> DIGIT</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">grammar Calculator; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">expr </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;"> expr </span><span style="color:#032F62;">&#39;)&#39;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expr</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">) expr</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expr</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;+&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">) expr</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> FLOAT</span></span>
<span class="line"><span style="color:#24292E;">     ;</span></span>
<span class="line"><span style="color:#24292E;">line </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> expr EOF ;</span></span>
<span class="line"><span style="color:#24292E;">WS </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [ \\t\\n\\r]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> skip;</span></span>
<span class="line"><span style="color:#24292E;">FLOAT </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> DIGIT</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> DIGIT</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> EXPONET</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> DIGIT</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> EXPONET</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> DIGIT</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> EXPONET</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">      ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fragment DIGIT </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">..</span><span style="color:#032F62;">&#39;9&#39;</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">fragment EXPONENT </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;E&#39;</span><span style="color:#24292E;">) (</span><span style="color:#032F62;">&#39;+&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> DIGIT</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ;</span></span></code></pre></div><p>第 1 行：定义了 grammar 的名字，这个名字必须要与文件名相同。</p><p>第 3~8 行：expr 和 line 就是我们定义的&quot;Calculator&quot;语言的语法规则。Antlr4 约定词法规则名字以大写字母开头，例如这里的 FLOAT。语法规则名字以小写字母开头，例如这里的 expr、line。 这里的规则定义都是以分号（;）结束。Antlr4 的语法是基于 C 的, 也有很多像正则表达式的地方。</p><p>expr 由 4 个备选分支，不同的备选分支由&quot;|&quot;分割，expr 规则的含义分别是：</p><ul><li><p>第一个备选分支表示 expr 语句可以由另一个 expr 加上左右两个括号构成。</p></li><li><p>第二个备选分支表示 expr 语句可以是 expr * expr 或是 expr / expr 格式。</p></li><li><p>第三个备选分支表示 xpr 语句可以是 expr + expr 或是 expr - expr 格式。</p></li><li><p>第四个备选分支表示 expr 语句可以是 FLOAT。</p></li></ul><p>多个备选分支的前后顺序还决定了歧义的问题，例如这里的 expr 规则在处理 1 + 2 * 3 这个表达式的时候，因为 expr * expr 的分支在前，生产的语法树如下图所示：</p>`,8),A=s("p",null,"这也就满足了四则运算中，括号优先级高于乘除，乘除优先级高于加减的要求。",-1),C=s("p",null,"line 规则比较简单，可以匹配一个 expr 语句与结束符。",-1),d=s("p",null,"第 9~13 行是词法定义。其中，第 9 行的 WS 定义了空白字符，后面的 skip 是一个特殊的标记，表示空白字符会被忽略。",-1),D=s("p",null,'第 10~13 行的 FLOAT 是定义的浮点数，这里使用的"+""*"等符号是正则表达式中的含义，而不是四则运算中的加号和乘号。',-1),u=s("p",null,"第 15~16 行 fragment 定义了两个词法定义中使用到的公共部分，DIGIT 表示的是整数，EXPONENT 表示的是科学计数法。fragment 类似于一种内联函数（或别名），只是为了简化词法规则的定义以及可读性，并不会被识别为 Token。",-1),m=s("p",null,"了解了 Antlr4 基本的语法以及 .g4 文件的编写方式之后，我们将其添加到 maven 项目的 src/main/antlr4 目录下，如下图所示：",-1),_=p(`<p>接下来要在 pom.xml 文件中添加 Antlr4 依赖 jar 包以及相应版本的 maven 插件，如下所示，这里与 SkyWalking 6.2 版本使用 antlr4.jar 版本相同：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.antlr&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;antlr4&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.7.1&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.antlr&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;antlr4-maven-plugin&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.7.1&lt;/version &lt;!-- 与jar包版本相同--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;antlr&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    &lt;</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        &lt;</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt;antlr4&lt;/</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    &lt;/</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;/</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.antlr&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;antlr4&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.7.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.antlr&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;antlr4-maven-plugin&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.7.1&lt;/version &lt;!-- 与jar包版本相同--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                    &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;antlr&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                    &lt;</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                        &lt;</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt;antlr4&lt;/</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                    &lt;/</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;/</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>执行 mvn package 命令即可在项目的 target/generated-sources 目录下看到 Antlr4 为我们生成 Lexer、Parser 类。为了让 IDEA 能够发现这些生成的 Java 类，我们需要将 target/generated-sources/antlr4 目录标记为 Generated Source Root，如下图所示：</p>`,3),B=s("p",null,"接下来要做的就是使用这些生成的 Lexer 类以及 Parser 类实现解析输入的字节流。Antlr4 提供了 Visitor 和 Listener 两种模式，通过这两种模式可以很轻松地把 Parser 的结果做各种处理。Antlr4 默认会生成 Listener 模式的相关代码（如果需要生成 Visitor 模式的相关代码，需要调整 maven 插件的配置），这里与 SkyWalking 保持一致，使用 Listener 模式。",-1),x=s("p",null,"相信你已经对 Listener 模式都比较熟悉了，简单来说就是在代码中预先定义一系列的事件，然后开发人员可以编写这些事件的 Listener。在程序运行的过程中，如果某些事件被触发了，则程序会根据事件类型调用相应的 Listener 进行处理。",-1),h=s("p",null,"Antlr4 中的定义的 ParseTreeListener 接口就是我们要实现的 Listener 接口，在计算机示例中生成的代码中，CalculatorListener 接口继承了 ParseTreeListener 接口并对其进行了扩展，CalculatorBaseListener 是 CalculatorListener 接口的空实现，具体方法如下：",-1),v=p(`<p>我们这里提供一个简单的 CalculatorListener 实现类 ------ PrintListener，它继承了 CalculatorBaseListener 并覆盖它全部的方法，所有方法实现只会输出当前涉及的节点信息，例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PrintListener</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> com.xxx.</span><span style="color:#B392F0;">CalculatorBaseListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enterLine</span><span style="color:#E1E4E8;">(com.xxx.CalculatorParser.LineContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;enterLine:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">getText</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ... </span><span style="color:#6A737D;">// 省略其他方法的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrintListener</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> com.xxx.</span><span style="color:#6F42C1;">CalculatorBaseListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enterLine</span><span style="color:#24292E;">(com.xxx.CalculatorParser.LineContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;enterLine:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getText</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... ... </span><span style="color:#6A737D;">// 省略其他方法的实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，通过 CalculatorBaseListener 的输出内容来帮助我们明确各个方法的回调时机，同时可以了解 Antlr4 API 的基本使用方式，main() 方法的相关实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里处理的是&quot;1+2&quot;这一行计算器语言，读取得到字节流</span></span>
<span class="line"><span style="color:#E1E4E8;">        ANTLRInputStream input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ANTLRInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1+2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建CalculatorLexer，词法分析器(Lexer)识别字节流得到 Token流</span></span>
<span class="line"><span style="color:#E1E4E8;">        CalculatorLexer lexer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CalculatorLexer</span><span style="color:#E1E4E8;">(input);</span></span>
<span class="line"><span style="color:#E1E4E8;">        CommonTokenStream tokens </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CommonTokenStream</span><span style="color:#E1E4E8;">(lexer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建CalculatorParser，语法分析器(Parser)识别 Token流得到 AST</span></span>
<span class="line"><span style="color:#E1E4E8;">        CalculatorParser parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CalculatorParser</span><span style="color:#E1E4E8;">(tokens);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ParseTree tree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">line</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 遍历 AST中各个节点回调 PrintListener中相应的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        ParseTreeWalker walker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParseTreeWalker</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        walker.</span><span style="color:#B392F0;">walk</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PrintListener</span><span style="color:#E1E4E8;">(), tree);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将整个 AST转换成字符串输出</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(tree.</span><span style="color:#B392F0;">toStringTree</span><span style="color:#E1E4E8;">(parser));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里处理的是&quot;1+2&quot;这一行计算器语言，读取得到字节流</span></span>
<span class="line"><span style="color:#24292E;">        ANTLRInputStream input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ANTLRInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1+2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建CalculatorLexer，词法分析器(Lexer)识别字节流得到 Token流</span></span>
<span class="line"><span style="color:#24292E;">        CalculatorLexer lexer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CalculatorLexer</span><span style="color:#24292E;">(input);</span></span>
<span class="line"><span style="color:#24292E;">        CommonTokenStream tokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CommonTokenStream</span><span style="color:#24292E;">(lexer);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建CalculatorParser，语法分析器(Parser)识别 Token流得到 AST</span></span>
<span class="line"><span style="color:#24292E;">        CalculatorParser parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CalculatorParser</span><span style="color:#24292E;">(tokens);</span></span>
<span class="line"><span style="color:#24292E;">        ParseTree tree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">line</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 遍历 AST中各个节点回调 PrintListener中相应的方法</span></span>
<span class="line"><span style="color:#24292E;">        ParseTreeWalker walker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParseTreeWalker</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        walker.</span><span style="color:#6F42C1;">walk</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrintListener</span><span style="color:#24292E;">(), tree);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将整个 AST转换成字符串输出</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(tree.</span><span style="color:#6F42C1;">toStringTree</span><span style="color:#24292E;">(parser));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后来看具体的输出内容：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">enterEveryRule</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">EOF</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">enterLine</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">EOF</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">   # 开始遍历 line</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">enterEveryRule</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">enterExpr</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">   # 开始遍历 expr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">enterEveryRule</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">enterExpr</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  # 开始遍历 expr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">visitTerminal</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">exitExpr</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">   # 结束遍历 expr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">exitEveryRule</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">visitTerminal</span><span style="color:#F97583;">:+</span></span>
<span class="line"><span style="color:#E1E4E8;">enterEveryRule</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">enterExpr</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">   # 开始遍历 expr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">visitTerminal</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">exitExpr</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">    # 结束遍历 expr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">exitEveryRule</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">exitExpr</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">  # 结束遍历 expr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">exitEveryRule</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">visitTerminal</span><span style="color:#F97583;">:&lt;</span><span style="color:#79B8FF;">EOF</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">exitEveryRule</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">EOF</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">(line (expr (expr </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (expr </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">EOF</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">enterEveryRule</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">EOF</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">enterLine</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">EOF</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">   # 开始遍历 line</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">enterEveryRule</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">enterExpr</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">   # 开始遍历 expr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">enterEveryRule</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">enterExpr</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  # 开始遍历 expr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">visitTerminal</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">exitExpr</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">   # 结束遍历 expr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">exitEveryRule</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">visitTerminal</span><span style="color:#D73A49;">:+</span></span>
<span class="line"><span style="color:#24292E;">enterEveryRule</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">enterExpr</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">   # 开始遍历 expr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">visitTerminal</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">exitExpr</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">    # 结束遍历 expr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">exitEveryRule</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">exitExpr</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">  # 结束遍历 expr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">exitEveryRule</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">visitTerminal</span><span style="color:#D73A49;">:&lt;</span><span style="color:#005CC5;">EOF</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">exitEveryRule</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">EOF</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">(line (expr (expr </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (expr </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">EOF</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>下图是 IDEA 中 Antlr4 插件展示的 AST，如果你感兴趣可以去尝试一下：</p>`,7),T=s("p",null,"在后面分析 SkyWalking OAL 语言的时候，还会再次看到 Antlr4 Listener 模式的实践，这里就不再继续深入了。",-1),k=s("h3",{id:"freemarker-基础入门",tabindex:"-1"},[n("FreeMarker 基础入门 "),s("a",{class:"header-anchor",href:"#freemarker-基础入门","aria-label":'Permalink to "FreeMarker 基础入门"'},"​")],-1),f=s("p",null,[n("SkyWalking OAL 语言在生成 Java 代码时除了使用到 Antlr4，还会使用到 FreeMarker 模板引擎，即一种基于"),s("strong",null,"模板"),n(" 和"),s("strong",null,"要改变的数据"),n("用来生成文本的通用工具。")],-1),L=s("p",null,'FreeMarker 使用专门的模板语言 ------ FreeMarker Template Language 来编写模板文件（后缀为".ftl"）。在模板文件中，我们只需要专注于如何展现数据，而在模板之外的逻辑则需要专注于要展示哪些数据，如下图所示，这种模式也被称为 MVC 模式。',-1),S=s("p",null,"下面将通过一个简单的宠物店示例帮助你快速入门 FreeMarker 的基础使用，首先我们定义一个 Animal 抽象类以及多个实现类，如下图所示：",-1),b=p(`<p>接下来，准备 test.ftl 模板文件。FreeMarker Template Language 的语法与 JSP 中的 EL 表达式非常类似，具体实现如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 使用 \${</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}展示一个变量 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Welcome, \${user}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 使用 &lt;#if&gt;&lt;#else&gt;标签实现条件分支 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;#if user == &quot;freemarker-user&quot;&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    our leader&lt;#else&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    out user&lt;/#if&gt;!</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;We have these animals:</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">border</span><span style="color:#FDAEB7;font-style:italic;">=1&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;tr&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">&lt;td&gt;Animal</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">Name&lt;/td&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">&lt;td&gt;Price&lt;/td&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">&lt;td&gt;Size&lt;/td&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&lt;!--</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">使用</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">&lt;#list</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">as</span><span style="color:#E1E4E8;">&gt;标签实现对 List集合的遍历 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;#list animals as animal&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;\${animal.name}&lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;\${animal.price}&lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;\${animal.size}&lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/#list&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 使用 \${</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}展示一个变量 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    Welcome, \${user}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 使用 &lt;#if&gt;&lt;#else&gt;标签实现条件分支 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;#if user == &quot;freemarker-user&quot;&gt; </span></span>
<span class="line"><span style="color:#24292E;">    our leader&lt;#else&gt;</span></span>
<span class="line"><span style="color:#24292E;">    out user&lt;/#if&gt;!</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;We have these animals:</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">table</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">border</span><span style="color:#B31D28;font-style:italic;">=1&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&lt;tr&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">&lt;td&gt;Animal</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">Name&lt;/td&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">&lt;td&gt;Price&lt;/td&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">&lt;td&gt;Size&lt;/td&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">&lt;!--</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">使用</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">&lt;#list</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">...</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">as</span><span style="color:#24292E;">&gt;标签实现对 List集合的遍历 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;#list animals as animal&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;\${animal.name}&lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;\${animal.price}&lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;\${animal.size}&lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/#list&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>最后写一个 main() 方法，其中首先会初始化 FreeMarker 、加载模板文件、创建 Animal 集合，最后将数据写入到文件中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//1.初始化并配置Configuration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    Configuration configuration </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;">(Configuration.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//2.设置模板文件所在的目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    configuration.</span><span style="color:#B392F0;">setClassForTemplateLoading</span><span style="color:#E1E4E8;">(Main.class, </span><span style="color:#9ECBFF;">&quot;/template&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//3.设置字符集</span></span>
<span class="line"><span style="color:#E1E4E8;">    configuration.</span><span style="color:#B392F0;">setDefaultEncoding</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//4.加载模板文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    Template template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test.ftl&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//5.创建数据模型</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//6.创建Writer对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileWriter writer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileWriter</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/Users/xxx/Documents/log/test.html&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//7.输出数据模型到文件中</span></span>
<span class="line"><span style="color:#E1E4E8;">    template.</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(result, writer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//8.关闭Writer对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    writer.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//1.初始化并配置Configuration对象</span></span>
<span class="line"><span style="color:#24292E;">    Configuration configuration </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;">(Configuration.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//2.设置模板文件所在的目录</span></span>
<span class="line"><span style="color:#24292E;">    configuration.</span><span style="color:#6F42C1;">setClassForTemplateLoading</span><span style="color:#24292E;">(Main.class, </span><span style="color:#032F62;">&quot;/template&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//3.设置字符集</span></span>
<span class="line"><span style="color:#24292E;">    configuration.</span><span style="color:#6F42C1;">setDefaultEncoding</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//4.加载模板文件</span></span>
<span class="line"><span style="color:#24292E;">    Template template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getTemplate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test.ftl&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//5.创建数据模型</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//6.创建Writer对象</span></span>
<span class="line"><span style="color:#24292E;">    FileWriter writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/Users/xxx/Documents/log/test.html&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//7.输出数据模型到文件中</span></span>
<span class="line"><span style="color:#24292E;">    template.</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(result, writer);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//8.关闭Writer对象</span></span>
<span class="line"><span style="color:#24292E;">    writer.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后生产的 test.html 文件如下图所示：</p>`,5),I=p(`<p>到此为止，SkyWalking 生成代码涉及的基础知识就介绍完了，下一课时将开始介绍 generate-tool、generate-tool-grammar、generated-analysis 三个模块的具体实现。</p><h3 id="深入-oal" tabindex="-1">深入 OAL <a class="header-anchor" href="#深入-oal" aria-label="Permalink to &quot;深入 OAL&quot;">​</a></h3><p>在 generate-tool-grammar 模块中，OAL（Observability Analysis Language）语法的定义分为了 OALLexer.g4 和 OALParser.g4 两个文件，其中 OALLexer.g4 定义了 OAL 的词法规则，OALParser.g4 定义了 OAL 的语法规则。</p><p>在 generated-analysis 模块中，official_analysis.oal 是 SkyWalking 默认提供的 OAL 文件，其中就是用 generate-tool-grammar 模块中定义的 OAL 语法编写而成的。在 official_analysis.oal 中我们可以看到很多熟悉的 Metrics 指标，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">instance_jvm_old_gc_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(ServiceInstanceJVMGC.time)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(phrase </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> GCPhrase.</span><span style="color:#79B8FF;">OLD</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">longAvg</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">service_cpm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(Service.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">cpm</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">service_p99 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(Service.latency).</span><span style="color:#B392F0;">p99</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">service_relation_server_cpm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(ServiceRelation.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(detectPoint </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> DetectPoint.</span><span style="color:#79B8FF;">SERVER</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">cpm</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">instance_jvm_old_gc_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(ServiceInstanceJVMGC.time)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(phrase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> GCPhrase.</span><span style="color:#005CC5;">OLD</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">longAvg</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">service_cpm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(Service.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">cpm</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">service_p99 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(Service.latency).</span><span style="color:#6F42C1;">p99</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">service_relation_server_cpm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(ServiceRelation.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(detectPoint </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> DetectPoint.</span><span style="color:#005CC5;">SERVER</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">cpm</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这四条语句是比较典型的 OAL 语句，下面将以 instance_jvm_old_gc_time 这条语句为线索简单介绍 OAL 语法的定义， official_analysis.oal 文件中其他 OAL 语句基本雷同，不再赘述。</p><p>这里先用 IDEA Antlr4 插件预览一下该语句解析出来的抽象语法树（AST），如下图所示：</p>`,7),P=s("p",null,"我们从 root 规则开始一步步分析，instance_jvm_old_gc_time 这条语句匹配了哪些语法规则，如下图所示：",-1),O=s("p",null,"整个 instance_jvm_old_gc_time 语句匹配了 aggregationStatement 规则，其中 variable 规则定义了 OAL 语言中变量名称的结构，等号左边的 instance_jvm_old_gc_time 变量名称会匹配到该规则，而整个等号右边的内容会匹配到 metricStatement 规则（除了结尾的分号）。",-1),q=s("p",null,"metricStatement 规则如下图所示，开头的 from 关键字、source、sourceAttribute 三部分比较简单，你可以直接在 OALParser.g4 文件中找到相应的定义。后面的 filterStatement 表达式开头是 filter 关键字，紧接着的括号中是一个 ==、>、<、>= 或 <= 表达式。最后的聚合函数则是我们在其他编程语言中常见的函数调用格式（可以包含参数），例如这里的 longAvg() 以及前文看到的 p99(10)。",-1),w=s("p",null,"看完对 Antlr4 示例以及 metricStatement 规则的分析，相信你已经可以独立分析 OAL 语言剩余的语法规则，filterStatement 以及 aggregateFunction 两个语法规则就不再展开分析了。",-1),R=s("p",null,"SkyWalking 源码分析指北第 27 课时------OAL语言（上），到此结束。",-1);function M(W,N,V,j,G,H){const a=e("Image");return t(),r("div",null,[E,y,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/2B/2D/Ciqc1F79whSAejSsAADlKeZLGng534.png"}),n(),i,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/2B/2D/Ciqc1F79wh6AIcH7AAGEKdkWfLQ444.png"}),n(),g,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/2B/39/CgqCHl79wvyAfbxxAADD-93Krsw733.png"}),n(),F,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/2B/2E/Ciqc1F79wxOAf73DAAC89DhQAzg639.png"}),n(),A,C,d,D,u,m,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/2B/39/CgqCHl79wx6ADQ6nAABpQRzXfNU573.png"}),n(),_,l(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/2B/2E/Ciqc1F79w3yAV4VdAARLSQ-a_eI863.png"}),n(),B,x,h,l(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/2B/39/CgqCHl79w4yAKHdPAAGlWI8e74A044.png"}),n(),v,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/2B/3A/CgqCHl79w9iAWTUFAAC5cS-GISw692.png"}),n(),T,k,f,L,l(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/2B/2E/Ciqc1F79w-2ATlKCAACH4_5Q8wA260.png"}),n(),S,l(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/2B/3A/CgqCHl79w_mAeQv1AABlVjyDFNs904.png"}),n(),b,l(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/2B/2E/Ciqc1F79xBKAdVTJAAClyVdmThQ520.png"}),n(),I,l(a,{alt:"Instance_gc树形结构图2副本.png",src:"https://s0.lgstatic.com/i/image/M00/2E/18/CgqCHl8ESz-ALvMiAAE-UYzabGY154.png"}),n(),P,l(a,{alt:"image (10).png",src:"https://s0.lgstatic.com/i/image/M00/2E/18/CgqCHl8ES0qAGvbZAAjdivdiVgQ814.png"}),n(),O,q,l(a,{alt:"image (11).png",src:"https://s0.lgstatic.com/i/image/M00/2E/0C/Ciqc1F8ES1uAWwXyAARGn2UgfJI899.png"}),n(),w,R])}const X=o(c,[["render",M]]);export{Q as __pageData,X as default};
