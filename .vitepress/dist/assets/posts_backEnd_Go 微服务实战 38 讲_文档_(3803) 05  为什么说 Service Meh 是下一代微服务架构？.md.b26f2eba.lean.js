import{_ as a,j as o,o as n,g as c,k as r,h as i,Q as s,s as t}from"./chunks/framework.4e7d56ce.js";const C=JSON.parse('{"title":"05为什么说ServiceMeh是下一代微服务架构？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3803) 05  为什么说 Service Meh 是下一代微服务架构？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3803) 05  为什么说 Service Meh 是下一代微服务架构？.md","lastUpdated":1696682708000}'),h={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3803) 05  为什么说 Service Meh 是下一代微服务架构？.md"},_=s("",6),p=s("",19),l=t("p",null,"边车",-1),d=t("p",null,"在模式库中，Sidecar 模式的定义是：将应用程序的组件部署到单独的进程或容器中以提供隔离和封装。这种模式还可以使应用程序由异构组件和技术组成。",-1),S=t("p",null,'在 Sidecar 模式中，"边车"与父应用程序（即业务服务）是两个独立的进程，二者生命周期相同，同时被创建和退出。"边车"附加到业务服务，并为应用提供支持功能，如微服务架构中的基本通信。Service Mesh 一般的架构如下图所示：',-1),v=s("",9),M=s("",12);function g(u,m,b,I,k,q){const e=o("Image");return n(),c("div",null,[_,r(e,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/32/9C/CgqCHl8OniqAaOpTAABLWy0eR68344.png"}),i(),p,r(e,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/32/92/Ciqc1F8OnrqAWCmyAAWNZlJGJJQ859.png"}),i(),l,d,S,r(e,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/32/92/Ciqc1F8OnsOAa3MVAABY1memBaA509.png"}),i(),v,r(e,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/32/92/Ciqc1F8OntCAXtNNAARr5zliZpw986.png"}),i(),M])}const P=a(h,[["render",g]]);export{C as __pageData,P as default};
