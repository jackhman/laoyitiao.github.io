import{_ as o,j as e,o as t,g as c,k as n,s,Q as p,h as l}from"./chunks/framework.b3d8e22e.js";const R=JSON.parse('{"title":"为什么要数据持久化 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4689) 17  测试框架如何做好数据持久化？（二）.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4689) 17  测试框架如何做好数据持久化？（二）.md","lastUpdated":1696417798000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4689) 17  测试框架如何做好数据持久化？（二）.md"},i=s("p",null,"在上一课时，我们讲解了测试数据本身，以及测试请求数据存在的问题，并发现了它们的共性，那就是缺乏测试数据管理，而测试数据管理往往伴随着数据持久化。所以这一课时我将讲解如何借助工具完成数据持久化工作，这个脑图是本课时内容梗概，可供你参考。",-1),y=p('<p>从软件测试角度，通俗地说，数据持久化就是将测试数据有组织的永久存储的过程；狭义地说，一般是指把数据存储在数据库；广义地说，数据也可以是文件数据、报表等其他形式。</p><p>正如前面所讲，测试数据包括测试请求数据和测试结果数据，这两部分数据都应该进行持久化。</p><h3 id="为什么要数据持久化" tabindex="-1">为什么要数据持久化 <a class="header-anchor" href="#为什么要数据持久化" aria-label="Permalink to &quot;为什么要数据持久化&quot;">​</a></h3><p>数据持久化的好处有很多，这里列出比较突出的几个。</p><h4 id="_1-可以使回归测试的范围更准确" tabindex="-1">1 . 可以使回归测试的范围更准确 <a class="header-anchor" href="#_1-可以使回归测试的范围更准确" aria-label="Permalink to &quot;1 . 可以使回归测试的范围更准确&quot;">​</a></h4><p>通过对相邻版本测试结果数据的对比（通常是指跑所有测试用例的测试），我们可以清晰地掌握在本次测试及上次测试之间，<strong>有哪些测试用例受到影响，从而验证两个版本之间的更改， 所影响的范围是否与预期一致。</strong></p><p>例如，本版本的改动我们认为只会影响 A 模块，结果却发现 B 模块的一个测试用例运行失败了。则我们在以后更改 A 模块时，应该主动把 B 模块的这个失败用例纳入回归测试中，从而在更早阶段发现潜在 bug。</p><h4 id="_2-可以发现测试用例本身的问题" tabindex="-1">2. 可以发现测试用例本身的问题 <a class="header-anchor" href="#_2-可以发现测试用例本身的问题" aria-label="Permalink to &quot;2. 可以发现测试用例本身的问题&quot;">​</a></h4><p>如果某个测试用例在多个版本中均运行失败了，或者有很大概率会失败。如果这个失败不是 bug 引起的，则说明这个测试用例是不稳定的测试用例，应该加以改进。</p><h4 id="_3-可以发现潜在的性能问题" tabindex="-1">3. 可以发现潜在的性能问题 <a class="header-anchor" href="#_3-可以发现潜在的性能问题" aria-label="Permalink to &quot;3. 可以发现潜在的性能问题&quot;">​</a></h4><p>通过对各个版本的测试结果对比，我们可以发现潜在的性能问题。 比如在某一段时间内，相同的测试用例集，整个测试的整体运行时间越来越久，则说明某些业务的性能在下降。</p><h4 id="_4-可以让整个团队都加入质量保障中" tabindex="-1">4. 可以让整个团队都加入质量保障中 <a class="header-anchor" href="#_4-可以让整个团队都加入质量保障中" aria-label="Permalink to &quot;4. 可以让整个团队都加入质量保障中&quot;">​</a></h4><p>通过持久化的保存测试结果数据，并且以报表的形式发送给相关干系人。可以使得除开发、测试<strong>之外的团队角色</strong>对产品的质量有完整且不断更新的认识，可以促进关键干系人对产品质量的关注，从而获得更多的资源倾斜。</p><h3 id="如何进行测试数据持久化" tabindex="-1">如何进行测试数据持久化 <a class="header-anchor" href="#如何进行测试数据持久化" aria-label="Permalink to &quot;如何进行测试数据持久化&quot;">​</a></h3><p>测试数据持久化不外乎就是把数据放到 DB 中，但是如果只是单纯的存储，并不能享用到数据持久化的好处。通常情况下，我们的测试请求数据，要跟测试用例进行一一对应。</p><p>而测试用例，应该要根据不同的测试目的，放到不同的测试套件里去，最后<strong>通过测试套件的执行，形成测试用例、测试脚本、测试数据、 测试结果的对应</strong>，从而方便后续我们对测试结果数据进行多维度分析。</p><p>那么怎么使得测试数据持久化能够实现上述目标呢？当前流行的解决方案有以下几种。</p><h4 id="_1-jira" tabindex="-1">1. JIRA <a class="header-anchor" href="#_1-jira" aria-label="Permalink to &quot;1. JIRA&quot;">​</a></h4><p>其实是 JIRA+ Zephyr 或者 JIRA + synapseRT。其中 JIRA 在国外，是公认的市场占有率最高的项目管理和开发管理工具，而 Zephyr 和 synapseRT 均是收费的 JIRA 插件。</p><ul><li><p>Zephyr 的用例管理虽然使用简单，但是无法记录和跟踪需求，管理人员无法直观了解测试进度，所以较难从项目整体角度来管理测试用例；</p></li><li><p>synapseRT 可以用来记录和跟踪需求，也可以用来创建、组织、计划和执行测试用例，还可以用来批量执行测试用例、链接 Bug，以及生成各种关于需求和测试的报告等等。</p></li></ul><h4 id="_2-禅道" tabindex="-1">2. 禅道 <a class="header-anchor" href="#_2-禅道" aria-label="Permalink to &quot;2. 禅道&quot;">​</a></h4><p>禅道作为国内市场占有率第一的，并且是国产、开源的专业研发项目管理软件，可用作缺陷管理、需求管理和任务管理，在功能上与 JIRA 不相上下。</p><p>并且禅道有很多专有工具，例如 zendata 测试数据生成器、ztf 自动化测试框架等，可以一站式地完成项目管理，以及测试管理与执行，非常适合中小团队使用。</p><h5 id="_1-禅道安装、配置" tabindex="-1">（1）禅道安装、配置 <a class="header-anchor" href="#_1-禅道安装、配置" aria-label="Permalink to &quot;（1）禅道安装、配置&quot;">​</a></h5><p>禅道支持多个平台，每个平台的安装和配置各有不同，你可以参考这个<a href="https://www.zentao.net/book/zentaopmshelp/64.html" target="_blank" rel="noreferrer">禅道安装指南</a>进行安装和配置。</p><p>下面我将以禅道为例，向你讲解禅道各个组件、模块之间的协同运作，数据持久化的实现、测试数据的更新，以及测试数据的管理。</p><h5 id="_2-使用禅道进行测试管理" tabindex="-1">（2）使用禅道进行测试管理 <a class="header-anchor" href="#_2-使用禅道进行测试管理" aria-label="Permalink to &quot;（2）使用禅道进行测试管理&quot;">​</a></h5><p>测试管理指对测试需求、计划、用例和实施过程进行管理。为了简单起见，我这里<strong>仅介绍测试套件的使用</strong>。</p><ul><li><strong>在建立测试套件前，你需要事先创建产品。</strong></li></ul><p>如下图所示，打开禅道，在&quot;产品&quot;模块点击右上角的&quot;添加产品&quot;。</p>',30),E=s("p",null,'接着，在弹出的"添加产品"栏目中，填写各项名称，然后点击"保存"。',-1),d=s("ul",null,[s("li",null,[s("strong",null,"产品创建好后，就可以创建测试套件了")])],-1),g=s("p",null,"测试套件是不可或缺的，在开发完成一个版本的测试后，我们通常以测试套件的方式进行一轮或多轮测试。",-1),h=s("p",null,'在"测试"这个模块，点击"套件" ， 你将看到如下界面：',-1),u=s("p",null,'点击右上角的"+建套件"，创建一个新的套件。',-1),F=s("p",null,"填写必要信息后保存，测试套件即创建成功。",-1),_=s("ul",null,[s("li",null,[s("strong",null,"测试套件创建好后，要跟测试用例关联，此时要创建测试用例")])],-1),A=s("p",null,'测试用例的创建跟测试套件的创建步骤类似。如下图所示，在"测试"这个模块，点击"用例"------"功能测试"， 然后点击右上角的"+建用例"或者"+批量建用例"来进行测试用例的创建。',-1),m=s("p",null,"接着在创建测试用例页面，创建你的测试用例。",-1),D=s("p",null,'点击"保存"，创建好后点击"套件"模块， 在测试套件"软件测试开发入门与实战"中，点击"关联用例"。',-1),C=s("p",null,'选择创建的测试用例，然后点击"保存"即可完成关联。',-1),b=s("p",null,[l('关联好测试用例后，你的测试套件就完成了，你可以在"操作"栏点击执行， 来'),s("strong",null,"执行测试用例"),l("。")],-1),v=s("p",null,[l('执行成功后，你可以点击最右方的"结果"来'),s("strong",null,"查看运行结果"),l("， 如下图所示：")],-1),f=s("p",null,"测试的历次结果都会显示在这里。",-1),q=p(`<p>利用禅道创建测试套件，可以用作测试管理和测试活动的安排，让你对测试任务一目了然。</p><h5 id="_3-ztf-自动化测试框架" tabindex="-1">（3）ZTF 自动化测试框架 <a class="header-anchor" href="#_3-ztf-自动化测试框架" aria-label="Permalink to &quot;（3）ZTF 自动化测试框架&quot;">​</a></h5><p>ZTF 是禅道开发的一款<strong>开源自动化测试管理框架</strong>，它聚焦于自动化测试的管理功能。ZTF 提供了自动化测试脚本的定义、管理、驱动、执行结果的回传、bug 的创建，以及和其他自动化测框架的集成。</p><p>ZTF 是独立安装的，其安装部署可以参考<a href="https://ztf.im/book/ztf/ztf-about-26.html" target="_blank" rel="noreferrer">ZTF 安装部署</a>，它的 ZTF 的<strong>语法</strong>如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">set     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">s        设置语言、禅道系统同步参数。用户对当前目录需要有写权限</span></span>
<span class="line"><span style="color:#E1E4E8;">co      checkout  导出禅道系统中的用例，已存在的将更新标题和步骤描述。可指定产品、套件、测试单编号</span></span>
<span class="line"><span style="color:#E1E4E8;">up      update    从禅道系统更新已存在的用例。可指定产品、模块、套件、测试单编号</span></span>
<span class="line"><span style="color:#E1E4E8;">run     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r        执行用例。可指定目录、套件、脚本、结果文件路径，以及套件和任务编号，多个文件间用空格隔开</span></span>
<span class="line"><span style="color:#E1E4E8;">junit</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">testng      执行JUnit、TestNG、PHPUnit、PyTest、JTest、CppUnit、GTest、QTest单元测试脚本</span></span>
<span class="line"><span style="color:#E1E4E8;">ci                将脚本中修改的用例信息，同步到禅道系统</span></span>
<span class="line"><span style="color:#E1E4E8;">cr                将用例执行结果提交到禅道系统中</span></span>
<span class="line"><span style="color:#E1E4E8;">cb                将执行结果中的失败用例，作为缺陷提交到禅道系统</span></span>
<span class="line"><span style="color:#E1E4E8;">list    ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l     查看测试用例列表。可指定目录和文件的列表，之间用空格隔开</span></span>
<span class="line"><span style="color:#E1E4E8;">view    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v        查看测试用例详情。可指定目录和文件的列表，之间用空格隔开</span></span>
<span class="line"><span style="color:#E1E4E8;">sort    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sort     将脚本文件中的步骤重新排序</span></span>
<span class="line"><span style="color:#E1E4E8;">clean   </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c        清除脚本执行日志</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">verbose         增加此参数，用于显示详细日志，如Http请求、响应、错误等信息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">set     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">s        设置语言、禅道系统同步参数。用户对当前目录需要有写权限</span></span>
<span class="line"><span style="color:#24292E;">co      checkout  导出禅道系统中的用例，已存在的将更新标题和步骤描述。可指定产品、套件、测试单编号</span></span>
<span class="line"><span style="color:#24292E;">up      update    从禅道系统更新已存在的用例。可指定产品、模块、套件、测试单编号</span></span>
<span class="line"><span style="color:#24292E;">run     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r        执行用例。可指定目录、套件、脚本、结果文件路径，以及套件和任务编号，多个文件间用空格隔开</span></span>
<span class="line"><span style="color:#24292E;">junit</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">testng      执行JUnit、TestNG、PHPUnit、PyTest、JTest、CppUnit、GTest、QTest单元测试脚本</span></span>
<span class="line"><span style="color:#24292E;">ci                将脚本中修改的用例信息，同步到禅道系统</span></span>
<span class="line"><span style="color:#24292E;">cr                将用例执行结果提交到禅道系统中</span></span>
<span class="line"><span style="color:#24292E;">cb                将执行结果中的失败用例，作为缺陷提交到禅道系统</span></span>
<span class="line"><span style="color:#24292E;">list    ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l     查看测试用例列表。可指定目录和文件的列表，之间用空格隔开</span></span>
<span class="line"><span style="color:#24292E;">view    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v        查看测试用例详情。可指定目录和文件的列表，之间用空格隔开</span></span>
<span class="line"><span style="color:#24292E;">sort    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sort     将脚本文件中的步骤重新排序</span></span>
<span class="line"><span style="color:#24292E;">clean   </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c        清除脚本执行日志</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">verbose         增加此参数，用于显示详细日志，如Http请求、响应、错误等信息</span></span></code></pre></div><p>ZTF 的常用<strong>命令</strong>如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ztf.exe run demo\\lang\\bat\\1_string_match.bat       执行演示测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ztf.exe set                                        根据系统提示，设置语言、禅道地址、账号等，Windows下会提示输入语言解释程序</span></span>
<span class="line"><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ztf.exe co                                         交互式导出禅道测试用例，将提示用户输入导出类型和编号</span></span>
<span class="line"><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ztf.exe co </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">product </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">language python             导出编号为1的产品测试用例，使用python语言，缩写</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l</span></span>
<span class="line"><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ztf.exe run product01 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">suite </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">                     执行禅道系统中编号为1的套件，脚本在product01目录，缩写</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">s</span></span>
<span class="line"><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ztf.exe ci product01\\tc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">1.py                       将脚本里修改的用例信息，同步到禅道系统</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ztf.exe run demo\\lang\\bat\\1_string_match.bat       执行演示测试用例</span></span>
<span class="line"><span style="color:#24292E;">$</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ztf.exe set                                        根据系统提示，设置语言、禅道地址、账号等，Windows下会提示输入语言解释程序</span></span>
<span class="line"><span style="color:#24292E;">$</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ztf.exe co                                         交互式导出禅道测试用例，将提示用户输入导出类型和编号</span></span>
<span class="line"><span style="color:#24292E;">$</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ztf.exe co </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">product </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">language python             导出编号为1的产品测试用例，使用python语言，缩写</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l</span></span>
<span class="line"><span style="color:#24292E;">$</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ztf.exe run product01 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">suite </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">                     执行禅道系统中编号为1的套件，脚本在product01目录，缩写</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">s</span></span>
<span class="line"><span style="color:#24292E;">$</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ztf.exe ci product01\\tc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">1.py                       将脚本里修改的用例信息，同步到禅道系统</span></span></code></pre></div><h5 id="_4-ztf-框架和禅道的结合使用" tabindex="-1">（4） ZTF 框架和禅道的结合使用 <a class="header-anchor" href="#_4-ztf-框架和禅道的结合使用" aria-label="Permalink to &quot;（4） ZTF 框架和禅道的结合使用&quot;">​</a></h5><p>ZTF 可以和禅道结合使用，来提高测试的效率。</p><ul><li><strong>设置 ZTF</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># D:\\ztf为你ztf的安装路径</span></span>
<span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">ztf&gt;ztf.exe set</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># D:\\ztf为你ztf的安装路径</span></span>
<span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">ztf&gt;ztf.exe set</span></span></code></pre></div><p>ZTF 会弹出提示，根据提示输入即可完成配置。</p>`,12),k=s("ul",null,[s("li",null,[s("strong",null,"导出禅道的测试用例为测试脚本")])],-1),T=s("p",null,"通过 ztf 可以将我们在禅道中定义的测试用例导出，具体用法如下：",-1),B=p(`<p>根据系统提示，我们导出刚才创建的测试套件 1 的测试用例 1，并且导出格式为 python。导出成功后，在文件夹 D:\\ztf\\product1\\ 下就会有自动生成的 1.py 文件，内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env python</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">[case]</span></span>
<span class="line"><span style="color:#9ECBFF;">title=测试用例-01</span></span>
<span class="line"><span style="color:#9ECBFF;">cid=1</span></span>
<span class="line"><span style="color:#9ECBFF;">pid=1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">[esac]</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#6A737D;"># 访问&#39;demo\\python&#39;获取更多帮助</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env python</span></span>
<span class="line"><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#032F62;">[case]</span></span>
<span class="line"><span style="color:#032F62;">title=测试用例-01</span></span>
<span class="line"><span style="color:#032F62;">cid=1</span></span>
<span class="line"><span style="color:#032F62;">pid=1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">[esac]</span></span>
<span class="line"><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#6A737D;"># 访问&#39;demo\\python&#39;获取更多帮助</span></span></code></pre></div><p>注意此时，导出的测试脚本仅仅是和禅道完成绑定，里面的具体的测试代码还需要我们编写。</p><p>更改脚本文件 1.py，更改后其代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">!/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">env python</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">[case]</span></span>
<span class="line"><span style="color:#9ECBFF;">title=测试用例-01</span></span>
<span class="line"><span style="color:#9ECBFF;">cid=1</span></span>
<span class="line"><span style="color:#9ECBFF;">pid=1</span></span>
<span class="line"><span style="color:#9ECBFF;">[group]</span></span>
<span class="line"><span style="color:#9ECBFF;">1. 输入用户名            &gt;&gt; kevin.cai</span></span>
<span class="line"><span style="color:#9ECBFF;">2. 输入密码              &gt;&gt; 123456</span></span>
<span class="line"><span style="color:#9ECBFF;">[esac]</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;"># 访问</span><span style="color:#9ECBFF;">&#39;demo</span><span style="color:#79B8FF;">\\p</span><span style="color:#9ECBFF;">ython&#39;</span><span style="color:#E1E4E8;">获取更多帮助</span></span>
<span class="line"><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&gt;&gt; kevin.cai&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&gt;&gt; 123456&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#</span><span style="color:#D73A49;">!/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">env python</span></span>
<span class="line"><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#032F62;">[case]</span></span>
<span class="line"><span style="color:#032F62;">title=测试用例-01</span></span>
<span class="line"><span style="color:#032F62;">cid=1</span></span>
<span class="line"><span style="color:#032F62;">pid=1</span></span>
<span class="line"><span style="color:#032F62;">[group]</span></span>
<span class="line"><span style="color:#032F62;">1. 输入用户名            &gt;&gt; kevin.cai</span></span>
<span class="line"><span style="color:#032F62;">2. 输入密码              &gt;&gt; 123456</span></span>
<span class="line"><span style="color:#032F62;">[esac]</span></span>
<span class="line"><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;"># 访问</span><span style="color:#032F62;">&#39;demo</span><span style="color:#005CC5;">\\p</span><span style="color:#032F62;">ython&#39;</span><span style="color:#24292E;">获取更多帮助</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&gt;&gt; kevin.cai&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&gt;&gt; 123456&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li><strong>运行测试脚本</strong></li></ul><p>脚本更新好后，我们来运行下：</p>`,7),z=s("p",null,"我直接运行刚刚生成的 product1 文件夹下的所有测试用例，可以看到测试成功。",-1),x=s("ul",null,[s("li",null,[s("strong",null,"通过 ztf 更新测试用例到禅道")])],-1),w=s("p",null,"正常情况下，我们的测试脚本是根据测试用例编写的，测试脚本和禅道里的测试用例是一致的。",-1),Z=s("p",null,"假设现在需求有变化，我的测试脚本失败了，我发现后先更新了测试脚本。这个时候我的测试脚本和禅道里的测试用例就不一致了，就需要同步。ztf 提供了一个方法来同步我们的测试用例，方法如下：",-1),P=p(`<p>通过 ztf.exe ci 的方式可以使我们的测试脚本和测试用例保持同步，避免了测试用例测试没有反映真实测试需求的情况。</p><ul><li><strong>ZenData 测试数据生成器的使用</strong></li></ul><p>在上一课时&quot;测试请求数据的准备方式&quot;中我讲过了测试数据生成，其中一个办法是测试数据平台。ZenData 即是禅道提供的一款测试数据通用平台，可以方便地生成测试数据。</p><p>ZenData 主要有以下两大功能：</p><p><strong>数据生成</strong> 通过一个配置文件，使用 ZenData 生成你想要的各种数据；<strong>数据解析</strong>对某一个数据文件，指定其数据类型定义的配置文件，完成到结构化数据的解析。</p><p>ZenData 生成的测试数据可用于手工测试，也可以用于自动化测试，下面来看下 Zendata 的使用。</p><p>Zendata 安装部署请直接参考<a href="https://www.zendata.cn/book/zendata/why-zendata-115.html" target="_blank" rel="noreferrer">Zendata 安装部署</a>。</p><ul><li>ZenData 的语法如下：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d  </span><span style="color:#F97583;">--default</span><span style="color:#E1E4E8;">    默认的数据格式配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">config     当前场景的数据格式配置文件，可以覆盖默认文件里面的设置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">output     生成的数据的文件名。可通过扩展名指定输出json</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">xml</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">sql格式的数据。默认输出原始格式的文本数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">lines      要生成的记录条数，默认为10条</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">F  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">field      可通过该参数指定要输出的字段列表，用逗号分隔。 默认是所有的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">table      输出格式为sql时，需通过该参数指定要插入数据的表名</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">T  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">trim       输出的字段去除前后缀，通常用在生成SQL格式的输出</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">human      输出可读格式，打印字段名，并使用tab键进行分割</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">recursive  递归模式。如不指定，默认为平行模式。平行模式下各个字段独立循环</span></span>
<span class="line"><span style="color:#E1E4E8;">                   递归模式下每个字段的取值依赖于前一字段。可增强数据的随机性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d  </span><span style="color:#D73A49;">--default</span><span style="color:#24292E;">    默认的数据格式配置文件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">config     当前场景的数据格式配置文件，可以覆盖默认文件里面的设置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">output     生成的数据的文件名。可通过扩展名指定输出json</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">xml</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">sql格式的数据。默认输出原始格式的文本数据</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">lines      要生成的记录条数，默认为10条</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">F  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">field      可通过该参数指定要输出的字段列表，用逗号分隔。 默认是所有的字段</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">table      输出格式为sql时，需通过该参数指定要插入数据的表名</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">T  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">trim       输出的字段去除前后缀，通常用在生成SQL格式的输出</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">human      输出可读格式，打印字段名，并使用tab键进行分割</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">recursive  递归模式。如不指定，默认为平行模式。平行模式下各个字段独立循环</span></span>
<span class="line"><span style="color:#24292E;">                   递归模式下每个字段的取值依赖于前一字段。可增强数据的随机性</span></span></code></pre></div><ul><li><strong>ZenData 生成数据示例</strong></li></ul><p>ZenData 生成测试数据非常简单，首先你使用 yaml 文件来定义你的数据格式，然后使用上述命令即可。</p><p>下面的实例, 根据配置文件 demo\\test\\test-email.yaml 生成了一组 email：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># zd是ZenData的安装目录</span></span>
<span class="line"><span style="color:#6A737D;"># demo\\test\\test-email.yaml是默认的配置文件。存在ZenData根目录下的demo文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">C:\\</span><span style="color:#FDAEB7;font-style:italic;">zd&gt;zd.exe -d demo\\test\\test-email.yaml -n 1 -o iTesting.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># zd是ZenData的安装目录</span></span>
<span class="line"><span style="color:#6A737D;"># demo\\test\\test-email.yaml是默认的配置文件。存在ZenData根目录下的demo文件夹</span></span>
<span class="line"><span style="color:#24292E;">C:\\</span><span style="color:#B31D28;font-style:italic;">zd&gt;zd.exe -d demo\\test\\test-email.yaml -n 1 -o iTesting.txt</span></span></code></pre></div><p>在上面的代码里，-d 函数后面跟默认的 yaml 文件格式，ZenData 会根据指定的格式来生成数据，你也可以自己定义 yaml 文件。-n 代表生成的数据组数，-o 代表输出的文件名。</p><p>注意，每一组生成的数据有多少字段，取决于你 yaml 文件中的定义。如果你想控制输出的个数，可以采用如下方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># number_with_esp是yaml文件test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">email.yaml的filed名称</span></span>
<span class="line"><span style="color:#E1E4E8;"># 本例指定输出filed是number_with_esp生成的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">C</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\zd</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">zd.exe </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d demo\\test\\test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">email.yaml </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">F number_with_esp </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o iTesting.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># number_with_esp是yaml文件test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">email.yaml的filed名称</span></span>
<span class="line"><span style="color:#24292E;"># 本例指定输出filed是number_with_esp生成的数据</span></span>
<span class="line"><span style="color:#24292E;">C</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\zd</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">zd.exe </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d demo\\test\\test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">email.yaml </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">F number_with_esp </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o iTesting.txt</span></span></code></pre></div><p>执行成功后打开生成的 iTesting.txt 文件，你将看到有 email 数据生成，此文件直接可用于你的自动化测试中。当前 ZenData 支持 TXT、JSON 、CSV 以及 sql 格式的文件生成。</p><p>了解了 ZenData 的用法后，我们来看一个真实用例，生成用于注册的账户，提供两个字段，用户名和密码。</p><p>首先，我们创建一个 yaml 文件。为简单起见，我在 ZenData 安装目录下的 demo\\test 文件夹下创建一个名为 test-user.yaml 的文件，内容如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">用户账户</span></span>
<span class="line"><span style="color:#85E89D;">desc</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">author</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">kevin Cai</span></span>
<span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1.0</span></span>
<span class="line"><span style="color:#85E89D;">fields</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">- </span><span style="color:#85E89D;">field</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">number_with_esp</span></span>
<span class="line"><span style="color:#85E89D;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">email.v1.yaml</span></span>
<span class="line"><span style="color:#85E89D;">use</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">number_with_esp</span></span>
<span class="line"><span style="color:#85E89D;">prefix</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#85E89D;">postfix</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">- </span><span style="color:#85E89D;">field</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">field_format</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">range</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">1-10</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">format</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;passwd%02d&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">postfix</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">title</span><span style="color:#24292E;">: </span><span style="color:#032F62;">用户账户</span></span>
<span class="line"><span style="color:#22863A;">desc</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">author</span><span style="color:#24292E;">: </span><span style="color:#032F62;">kevin Cai</span></span>
<span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.0</span></span>
<span class="line"><span style="color:#22863A;">fields</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">- </span><span style="color:#22863A;">field</span><span style="color:#24292E;">: </span><span style="color:#032F62;">number_with_esp</span></span>
<span class="line"><span style="color:#22863A;">from</span><span style="color:#24292E;">: </span><span style="color:#032F62;">email.v1.yaml</span></span>
<span class="line"><span style="color:#22863A;">use</span><span style="color:#24292E;">: </span><span style="color:#032F62;">number_with_esp</span></span>
<span class="line"><span style="color:#22863A;">prefix</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#22863A;">postfix</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">- </span><span style="color:#22863A;">field</span><span style="color:#24292E;">: </span><span style="color:#032F62;">field_format</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">range</span><span style="color:#24292E;">: </span><span style="color:#032F62;">1-10</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">format</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;passwd%02d&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">postfix</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><p>然后，我在命令行执行如下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># zd是ZenData的安装目录</span></span>
<span class="line"><span style="color:#E1E4E8;"># demo\\test\\test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">user.yaml是刚创建的配置文件。用于生成用户名和密码</span></span>
<span class="line"><span style="color:#E1E4E8;">C</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\zd</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">zd.exe </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d demo\\test\\test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">user.yaml </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o iTesting.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># zd是ZenData的安装目录</span></span>
<span class="line"><span style="color:#24292E;"># demo\\test\\test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">user.yaml是刚创建的配置文件。用于生成用户名和密码</span></span>
<span class="line"><span style="color:#24292E;">C</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\zd</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">zd.exe </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d demo\\test\\test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">user.yaml </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o iTesting.txt</span></span></code></pre></div><p>命令执行完后，查看生成的 iTesting 文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">01234qq@.com   passwd01</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">01234qq@.com   passwd01</span></span></code></pre></div><p>可以看到数据文件被正确生成，关于更多数据文件的格式及用法，可以参考 <a href="https://www.zendata.cn" target="_blank" rel="noreferrer">ZenData 官网</a>。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>通过禅道一站式的解决方案，你可以完成产品、项目、 需求、测试管理、测试执行，以及测试报告的工作。更多关于禅道的用法和高级使用，请直接参考<a href="https://www.zentao.net" target="_blank" rel="noreferrer">禅道官方网站</a><strong>。</strong></p><p>数据持久化是个非常简单的动作，但是数据持久化采用什么方式进行，与哪种企业管理工具结合，数据持久化后要实现什么目标，才是更需要关注的部分。通过禅道的一站式解决方案，我们可以轻松把测试数据管理起来，实现测试管理的跃升和测试效率的提高。</p><p>好的， 我是蔡超，关于测试数据，你是如何管理的呢？可以在下方留言区留言，一起讨论。</p><hr><p>更多测试框架的内容，请关注我的公众号 iTesting 回复&quot;测试框架&quot;查看。</p>`,31);function j(S,I,M,V,J,$){const a=e("Image");return t(),c("div",null,[i,n(a,{alt:"Lark20201104-190229.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iil-Ae4t1AALMX6Dh5xY948.png"}),y,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iioaAK0ZDAABAf4hGrdg514.png"}),E,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/67/F7/CgqCHl-iipeANDJKAACaYTV4Jbo677.png"}),d,g,h,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/67/F7/CgqCHl-iip6AV5KoAAA9ugTL6Dw207.png"}),u,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iiqSAB-EpAABhUOOylIM570.png"}),F,_,A,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/67/F7/CgqCHl-iiqyAKtsvAAA-kCUb7Ec132.png"}),m,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iirGAUCUKAACZ1gs2Hws165.png"}),D,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/67/F7/CgqCHl-iiriAEHPuAABqRnX7hOY191.png"}),C,n(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iir2ALZYvAAB7x60bn4o781.png"}),b,n(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/67/F7/CgqCHl-iisSAKONhAABKluYQYj4446.png"}),v,n(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iisqATxcjAAA6V8AswV8339.png"}),f,n(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/67/F7/CgqCHl-iitCAW1qkAAA9H01462o219.png"}),q,n(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iiyGAbDkYAABqoUKr5ZQ432.png"}),k,T,n(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iiyeAUhZAAAAp6j28zb8016.png"}),B,n(a,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-iizmAJfL-AAAh58iXLQY745.png"}),z,x,w,Z,n(a,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image/M00/67/EC/Ciqc1F-ii0OAVSQ1AAAngF04vBY793.png"}),P])}const N=o(r,[["render",j]]);export{R as __pageData,N as default};
