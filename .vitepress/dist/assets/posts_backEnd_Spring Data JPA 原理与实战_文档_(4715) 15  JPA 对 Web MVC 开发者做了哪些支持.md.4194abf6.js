import{_ as o,j as e,o as t,g as r,k as n,h as p,Q as l,s}from"./chunks/framework.a0d18f64.js";const T=JSON.parse('{"title":"15JPA对WebMVC开发者做了哪些支持","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4715) 15  JPA 对 Web MVC 开发者做了哪些支持.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4715) 15  JPA 对 Web MVC 开发者做了哪些支持.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4715) 15  JPA 对 Web MVC 开发者做了哪些支持.md"},y=l(`<h1 id="_15jpa对webmvc开发者做了哪些支持" tabindex="-1">15JPA对WebMVC开发者做了哪些支持 <a class="header-anchor" href="#_15jpa对webmvc开发者做了哪些支持" aria-label="Permalink to &quot;15JPA对WebMVC开发者做了哪些支持&quot;">​</a></h1><p>你好，欢迎学习第 15 课时，今天带你了解 JPA 对 Web MVC 开发者都做了哪些支持。</p><p>我们使用 Spring Data JPA 的时候，一般都会用到 Spring MVC，Spring Data 对 Spring MVC 做了很好的支持，体现在以下几个方面：</p><ol><li><p>支持在 Controller 层直接返回实体，而不使用其显式的调用方法；</p></li><li><p>对 MVC 层支持标准的分页和排序功能；</p></li><li><p>扩展的插件支持 Querydsl，可以实现一些通用的查询逻辑。</p></li></ol><p>正常情况下，我们开启 Spring Data 对 Spring Web MVC 支持的时候需要在 @Configuration 的配置文件里面添加 @EnableSpringDataWebSupport 这一注解，如下面这种形式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableWebMvc</span></span>
<span class="line"><span style="color:#6A737D;">//开启支持Spring Data Web的支持</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableSpringDataWebSupport</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebConfiguration</span><span style="color:#E1E4E8;"> { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableWebMvc</span></span>
<span class="line"><span style="color:#6A737D;">//开启支持Spring Data Web的支持</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableSpringDataWebSupport</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebConfiguration</span><span style="color:#24292E;"> { }</span></span></code></pre></div><p>由于我们用了 Spring Boot，其有自动加载机制，会自动加载 SpringDataWebAutoConfiguration 类，发生如下变化：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableSpringDataWebSupport</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnWebApplication</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Type.SERVLET)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">({ PageableHandlerMethodArgumentResolver.class, WebMvcConfigurer.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(PageableHandlerMethodArgumentResolver.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(SpringDataWebProperties.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureAfter</span><span style="color:#E1E4E8;">(RepositoryRestMvcAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringDataWebAutoConfiguration</span><span style="color:#E1E4E8;"> {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableSpringDataWebSupport</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnWebApplication</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Type.SERVLET)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">({ PageableHandlerMethodArgumentResolver.class, WebMvcConfigurer.class })</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(PageableHandlerMethodArgumentResolver.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(SpringDataWebProperties.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureAfter</span><span style="color:#24292E;">(RepositoryRestMvcAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringDataWebAutoConfiguration</span><span style="color:#24292E;"> {</span></span></code></pre></div><p>从类上面可以看出来，@EnableSpringDataWebSupport 会自动开启，所以当我们用 Spring Boot + JPA + MVC 的时候，什么都不需要做，因为 Spring Boot 利用 Spring Data 对 Spring MVC 做了很多 Web 开发的天然支持。支持的组件有 DomainConverter、Page、Sort、Databinding、Dynamic Param 等。</p><p>那么我们先来看一下它对 DomainClassConverter 组件的支持。</p><h3 id="domainclassconverter-组件" tabindex="-1">DomainClassConverter 组件 <a class="header-anchor" href="#domainclassconverter-组件" aria-label="Permalink to &quot;DomainClassConverter 组件&quot;">​</a></h3><p>这个组件的主要作用是帮我们把 Path 中 ID 的变量，或 Request 参数中的变量 ID 的参数值，直接转化成实体对象注册到 Controller 方法的参数里面。怎么理解呢？我们看个例子，就很好懂了。</p><h4 id="一个例子" tabindex="-1">一个例子 <a class="header-anchor" href="#一个例子" aria-label="Permalink to &quot;一个例子&quot;">​</a></h4><p>首先，写一个 MVC 的 Controller，分别从 Path 和 Param 变量里面，根据 ID 转化成实体，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 从path变量里面获得参数ID的值，然后直接转化成UserInfo实体</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">userInfo</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/{id}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">getUserInfoFromPath</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">) UserInfo </span><span style="color:#FFAB70;">userInfo</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 将request的param中的ID变量值，转化成UserInfo实体</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">userInfo</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">getUserInfoFromRequestParam</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">) UserInfo </span><span style="color:#FFAB70;">userInfo</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 从path变量里面获得参数ID的值，然后直接转化成UserInfo实体</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">userInfo</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/{id}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">getUserInfoFromPath</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">) UserInfo </span><span style="color:#E36209;">userInfo</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfo;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 将request的param中的ID变量值，转化成UserInfo实体</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">userInfo</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">getUserInfoFromRequestParam</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">) UserInfo </span><span style="color:#E36209;">userInfo</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfo;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们运行起来，看一下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GET http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user/1</span></span>
<span class="line"><span style="color:#E1E4E8;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">GET http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user?id=1</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GET http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user/1</span></span>
<span class="line"><span style="color:#24292E;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">GET http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user?id=1</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从结果来看，Controller 里面的 getUserInfoFromRequestParam 方法会自动根据 ID 查询实体对象 UserInfo，然后注入方法的参数里面。那它是怎么实现的呢？我们看一下源码。</p><h4 id="源码分析" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析" aria-label="Permalink to &quot;源码分析&quot;">​</a></h4><p>我们打开 DomainClassConverter 类，里面有个 ToEntityConverter 的内部转化类的 Matches 方法，它会判断参数的类型是不是实体，并且有没有对应的实体 Repositorie 存在。如果不存在，就会直接报错说找不到合适的参数转化器。</p><p>DomainClassConverter 里面的关键代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DomainClassConverter</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ConversionService</span><span style="color:#E1E4E8;"> &amp; </span><span style="color:#F97583;">ConverterRegistry</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConditionalGenericConverter</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ApplicationContextAware</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(TypeDescriptor </span><span style="color:#FFAB70;">sourceType</span><span style="color:#E1E4E8;">, TypeDescriptor </span><span style="color:#FFAB70;">targetType</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//判断参数的类型是不是实体</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sourceType.</span><span style="color:#B392F0;">isAssignableTo</span><span style="color:#E1E4E8;">(targetType)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; domainType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> targetType.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//有没有对应的实体的Repositorie 存在</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">repositories.</span><span style="color:#B392F0;">hasRepositoryFor</span><span style="color:#E1E4E8;">(domainType)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      Optional&lt;</span><span style="color:#F97583;">RepositoryInformation</span><span style="color:#E1E4E8;">&gt; repositoryInformation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> repositories.</span><span style="color:#B392F0;">getRepositoryInformationFor</span><span style="color:#E1E4E8;">(domainType);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repositoryInformation.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(it </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; rawIdType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">getIdType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sourceType.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(TypeDescriptor.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(rawIdType))</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> conversionService.</span><span style="color:#B392F0;">canConvert</span><span style="color:#E1E4E8;">(sourceType.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">(), rawIdType);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }).</span><span style="color:#B392F0;">orElseThrow</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Couldn&#39;t find RepositoryInformation for %s!&quot;</span><span style="color:#E1E4E8;">, domainType)));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">......}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DomainClassConverter</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ConversionService</span><span style="color:#24292E;"> &amp; </span><span style="color:#D73A49;">ConverterRegistry</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConditionalGenericConverter</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">ApplicationContextAware</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(TypeDescriptor </span><span style="color:#E36209;">sourceType</span><span style="color:#24292E;">, TypeDescriptor </span><span style="color:#E36209;">targetType</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//判断参数的类型是不是实体</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sourceType.</span><span style="color:#6F42C1;">isAssignableTo</span><span style="color:#24292E;">(targetType)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; domainType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> targetType.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//有没有对应的实体的Repositorie 存在</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">repositories.</span><span style="color:#6F42C1;">hasRepositoryFor</span><span style="color:#24292E;">(domainType)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      Optional&lt;</span><span style="color:#D73A49;">RepositoryInformation</span><span style="color:#24292E;">&gt; repositoryInformation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> repositories.</span><span style="color:#6F42C1;">getRepositoryInformationFor</span><span style="color:#24292E;">(domainType);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repositoryInformation.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(it </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; rawIdType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> it.</span><span style="color:#6F42C1;">getIdType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sourceType.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(TypeDescriptor.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(rawIdType))</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> conversionService.</span><span style="color:#6F42C1;">canConvert</span><span style="color:#24292E;">(sourceType.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">(), rawIdType);</span></span>
<span class="line"><span style="color:#24292E;">      }).</span><span style="color:#6F42C1;">orElseThrow</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Couldn&#39;t find RepositoryInformation for %s!&quot;</span><span style="color:#24292E;">, domainType)));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">......}</span></span></code></pre></div><p>所以，我们上面的例子其实是需要有 UserInfoRepository 的，否则会失败。通过源码我们也可以看到，如果 matches=true，那么就会执行下面的 convert 方法，最终调用 findById 的方法帮我们执行查询动作，如下图所示：</p>`,23),E=s("p",null,"而 DomainClassConverter 是 Spring MVC 自定义 Formatter 的一直种机制，加载进去，可以看到如下界面：",-1),i=l(`<p>而 SpringDataWebConfiguration 是因为实现了 WebMvcConfigurer 的 addFormatters 所有加载了自定义参数转化器的功能，所以才有了 DomainClassConverter 组件的支持。关键代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringDataWebConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebMvcConfigurer</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">BeanClassLoaderAware</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">......}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringDataWebConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">BeanClassLoaderAware</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">......}</span></span></code></pre></div><p>从源码上我们也可以看到，DomainClassConverter 只会根据 ID 来查询实体，很有局限性，没有更加灵活的参数转化功能，不过你也可以根据源码自己进行扩展，我在这就不展示更多了。</p><p>下面来看一下JPA 对 Web MVC 分页和排序是如何支持的。</p><h3 id="page-和-sort-的参数支持" tabindex="-1">Page 和 Sort 的参数支持 <a class="header-anchor" href="#page-和-sort-的参数支持" aria-label="Permalink to &quot;Page 和 Sort 的参数支持&quot;">​</a></h3><p>我们还是先通过一个例子来说明。</p><h4 id="一个实例" tabindex="-1">一个实例 <a class="header-anchor" href="#一个实例" aria-label="Permalink to &quot;一个实例&quot;">​</a></h4><p>这是一个通过分页和排序参数查询 UserInfo 的实例。</p><p>首先，我们新建一个 UserInfoController，里面添加如下两个方法，分别测试分页和排序。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Page</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UserInfo</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">queryByPage</span><span style="color:#E1E4E8;">(Pageable pageable, UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(userInfo),pageable);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users/sort&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> HttpEntity</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UserInfo</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">queryBySort</span><span style="color:#E1E4E8;">(Sort sort) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HttpEntity&lt;&gt;(userInfoRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(sort));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Page</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UserInfo</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queryByPage</span><span style="color:#24292E;">(Pageable pageable, UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(userInfo),pageable);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users/sort&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> HttpEntity</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UserInfo</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queryBySort</span><span style="color:#24292E;">(Sort sort) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HttpEntity&lt;&gt;(userInfoRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(sort));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，queryByPage 方法中，两个参数可以分别接收分页参数和查询条件，我们请求一下，看看效果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GET http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/users?size=2&amp;page=0&amp;ages=10&amp;sort=id,desc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GET http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/users?size=2&amp;page=0&amp;ages=10&amp;sort=id,desc</span></span></code></pre></div><p>参数里面可以支持分页大小为 2、页码 0、排序（按照 ID 倒序）、参数 ages=10 的所有结果，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;pageable&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;sort&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;unsorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;offset&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;pageNumber&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;pageSize&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;unpaged&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;paged&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;totalPages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;totalElements&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;last&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;size&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;numberOfElements&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;sort&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;sorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;unsorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;first&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;pageable&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;sort&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;unsorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;offset&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;pageNumber&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;pageSize&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;unpaged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;paged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;totalPages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;totalElements&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;last&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;size&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;numberOfElements&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;sort&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;sorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;unsorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;first&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的字段我就不一一介绍了，在第 4 课时（如何利用 Repository 中的方法返回值解决实际问题）我们已经讲过了，只不过现在应用到了 MVC 的 View 层。</p><p>因此，我们可以得出结论：Pageable 既支持分页参数，也支持排序参数。并且从下面这行代码可以看出其也可以单独调用 Sort 参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GET http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/users/sort?ages=10&amp;sort=id,desc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GET http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/users/sort?ages=10&amp;sort=id,desc</span></span></code></pre></div><p>那么它的实现原理是什么呢？</p><h4 id="原理分析" tabindex="-1">原理分析 <a class="header-anchor" href="#原理分析" aria-label="Permalink to &quot;原理分析&quot;">​</a></h4><p>和 DomainClassConverter 组件的支持是一样的，由于 SpringDataWebConfiguration 实现了 WebMvcConfigurer 接口，通过 addArgumentResolvers 方法，扩展了 Controller 方法的参数 HandlerMethodArgumentResolver</p><p>的解决者，从下面图片中你就可以看出来。</p>`,21),u=s("p",null,"我们通过箭头的地方分析一下 SortHandlerMethodArgumentResolver 的类，会看到如下界面：",-1),F=s("p",null,"这个类里面最关键的就是下面两个方法：",-1),d=s("ol",null,[s("li",null,[s("p",null,"supportsParameter，表示只处理类型为 Sort.class 的参数；")]),s("li",null,[s("p",null,"resolveArgument，可以把请求里面参数的值，转换成该方法里面的参数 Sort 对象。")])],-1),g=s("p",null,"这里还要提到的是另外一个类：PageHandlerMethodArgumentResolver 类。",-1),C=l(`<p>这个类里面也有两个最关键的方法：</p><ol><li><p>supportsParameter，表示我只处理类型是 Pageable.class 的参数；</p></li><li><p>resolveArgument，把请求里面参数的值，转换成该方法里面的参数 Pageable 的实现类 PageRequest。</p></li></ol><p>关于 Web 请求的分页和排序的支持就介绍到这里，那么如果返回的是一个 Projection 的接口，Spring 是怎么处理的呢？我们接着看。</p><h3 id="web-databinding-support" tabindex="-1">Web Databinding Support <a class="header-anchor" href="#web-databinding-support" aria-label="Permalink to &quot;Web Databinding Support&quot;">​</a></h3><p>之前我们在 08 课时，讲 Projection 的时候提到过接口，Spring Data JPA 里面，也可以通过 @ProjectedPayload 和 @JsonPath 对接口进行注解支持，不过要注意这与前面所讲的 Jackson 注解的区别在于，此时我们讲的是接口。</p><h4 id="一个实例-1" tabindex="-1">一个实例 <a class="header-anchor" href="#一个实例-1" aria-label="Permalink to &quot;一个实例&quot;">​</a></h4><p>这里我依然结合一个实例来对这个接口进行讲解，请看下面的步骤。</p><p><strong>第一步：如果要支持 Projection，必须要在 gradle 里面引入 jsonpath 依赖才可以：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;com.jayway.jsonpath:json-path&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;com.jayway.jsonpath:json-path&#39;</span></span></code></pre></div><p><strong>第二步：新建一个 UserInfoInterface 接口类，用来接收接口传递的 json 对象。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.web.JsonPath;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.web.ProjectedPayload;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ProjectedPayload</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoInterface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;$.ages&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 第一级参数/JSON里面找ages字段</span></span>
<span class="line"><span style="color:#6A737D;">// @JsonPath(&quot;$..ages&quot;) $..代表任意层级找ages字段</span></span>
<span class="line"><span style="color:#E1E4E8;">   Integer </span><span style="color:#B392F0;">getAges</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;$.telephone&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//第一级找参数/JSON里面的telephone字段</span></span>
<span class="line"><span style="color:#6A737D;">// @JsonPath({ &quot;$.telephone&quot;, &quot;$.user.telephone&quot; }) //第一级或者user下面的telephone都可以</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">getTelephone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.web.JsonPath;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.web.ProjectedPayload;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ProjectedPayload</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoInterface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;$.ages&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 第一级参数/JSON里面找ages字段</span></span>
<span class="line"><span style="color:#6A737D;">// @JsonPath(&quot;$..ages&quot;) $..代表任意层级找ages字段</span></span>
<span class="line"><span style="color:#24292E;">   Integer </span><span style="color:#6F42C1;">getAges</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;$.telephone&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//第一级找参数/JSON里面的telephone字段</span></span>
<span class="line"><span style="color:#6A737D;">// @JsonPath({ &quot;$.telephone&quot;, &quot;$.user.telephone&quot; }) //第一级或者user下面的telephone都可以</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">getTelephone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第三步：在 Controller 里面新建一个 post 方法，通过接口获得 RequestBody 参数对象里面的值。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users/projected&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfoInterface </span><span style="color:#B392F0;">saveUserInfo</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> UserInfoInterface userInfoInterface) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoInterface;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users/projected&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfoInterface </span><span style="color:#6F42C1;">saveUserInfo</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> UserInfoInterface userInfoInterface) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoInterface;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第四步：我们发送一个 get 请求，代码如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">users HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456789&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">users HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456789&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>此时可以正常得到如下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个响应结果说明了接口可以正常映射。现在你知道用法了，我们再通过源码分析一下其原理。</p><h4 id="原理分析-1" tabindex="-1">原理分析 <a class="header-anchor" href="#原理分析-1" aria-label="Permalink to &quot;原理分析&quot;">​</a></h4><p>很简单，我们还是直接看 SpringDataWebConfiguration，其中实现的 WebMvcConfigurer 接口里面有个 extendMessageConverters 方法，方法中加了一个 ProjectingJackson2HttpMessageConverter 的类，这个类会把带 ProjectedPayload.class 注解的接口进行 Converter。</p><p>我们看一下其中主要的两个方法：</p><p>1.加载 ProjectingJackson2HttpMessageConverter，用来做 Projecting 的接口转化。我们通过源码看一下是在哪里被加载进去的，如下：</p>`,22),A=s("p",null,"2.而 ProjectingJackson2HttpMessageConverter 主要是继承了 MappingJackson2HttpMessageConverter，并且实现了 HttpMessageConverter 的接口里面的两个重要方法，如下图所示：",-1),D=l(`<p>其中，</p><ul><li><p>canRead 通过判断参数的实体类型里面是否有接口，以及是否有 ProjectedPayload.class 注解后，才进行解析；</p></li><li><p>read 方法负责把 HttpInputMessage 转化成 Projected 的映射代理对象。</p></li></ul><p>现在你知道了 Spring 里面是如何通过 HttpMessageConverter 对 Projected 进行的支持，在使用过程中，希望你针对实际情况多去 Debug。不过这个不常用，你知道一下就可以了。</p><p>下面介绍一个通过 QueryDSL 对 Web 请求进行动态参数查询的方法。</p><h3 id="querydsl-web-support" tabindex="-1">QueryDSL Web Support <a class="header-anchor" href="#querydsl-web-support" aria-label="Permalink to &quot;QueryDSL Web Support&quot;">​</a></h3><p>实际工作中，经常有人会用 Querydsl 做一些复杂查询，方便生成 Rest 的 API 接口，那么这种方法有什么好处，又会暴露什么缺点呢？我们先看一个实例。</p><h4 id="一个实例-2" tabindex="-1">一个实例 <a class="header-anchor" href="#一个实例-2" aria-label="Permalink to &quot;一个实例&quot;">​</a></h4><p>这是一个通过 QueryDSL 作为请求参数的使用案例，通过它你就可以体验一下 QueryDSL 的用法和使用场景，我们一步一步来看一下。</p><p><strong>第一步：需要 grandle 引入 querydsl 的依赖。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;com.querydsl:querydsl-apt&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;com.querydsl:querydsl-jpa&#39;</span></span>
<span class="line"><span style="color:#B392F0;">annotationProcessor</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.querydsl:querydsl-apt:4.3.1:jpa&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;javax.annotation:javax.annotation-api:1.3.2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;org.projectlombok:lombok&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">annotationProcessor</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">annotationProcessor </span><span style="color:#9ECBFF;">&#39;org.projectlombok:lombok&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;com.querydsl:querydsl-apt&#39;</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;com.querydsl:querydsl-jpa&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">annotationProcessor</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.querydsl:querydsl-apt:4.3.1:jpa&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;javax.annotation:javax.annotation-api:1.3.2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;org.projectlombok:lombok&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">annotationProcessor</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">annotationProcessor </span><span style="color:#032F62;">&#39;org.projectlombok:lombok&#39;</span></span></code></pre></div><p><strong>第二步：UserInfoRepository 继承 QuerydslPredicateExecutor 接口，就可以实现 QueryDSL 的查询方法了，代码如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">QuerydslPredicateExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">QuerydslPredicateExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; {}</span></span></code></pre></div><p><strong>第三步：Controller 里面直接利用 @QuerydslPredicate 注解接收 Predicate predicate 参数。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user/dsl&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Page</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UserInfo</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">queryByDsl</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">QuerydslPredicate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserInfo.class) com.querydsl.core.types.Predicate predicate, Pageable pageable) {</span></span>
<span class="line"><span style="color:#6A737D;">//这里面我用的userInfoRepository里面的QuerydslPredicateExecutor里面的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(predicate, pageable);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user/dsl&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Page</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UserInfo</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queryByDsl</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">QuerydslPredicate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserInfo.class) com.querydsl.core.types.Predicate predicate, Pageable pageable) {</span></span>
<span class="line"><span style="color:#6A737D;">//这里面我用的userInfoRepository里面的QuerydslPredicateExecutor里面的方法</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(predicate, pageable);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第四步：直接请求我们的 user / dsl 即可，这里利用 queryDsl 的语法 ，使 &amp;ages=10 作为我们的请求参数。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GET http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user/dsl?size=2&amp;page=0&amp;ages=10&amp;sort=id%2Cdesc&amp;ages=10</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;pageable&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;sort&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;unsorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;offset&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;pageNumber&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;pageSize&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;unpaged&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;paged&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;totalPages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;totalElements&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;last&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;size&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;sort&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;sorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;unsorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;numberOfElements&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;first&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Response code</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">; Time</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 721ms; Content length</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">425</span><span style="color:#E1E4E8;"> bytes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GET http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user/dsl?size=2&amp;page=0&amp;ages=10&amp;sort=id%2Cdesc&amp;ages=10</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456789&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;pageable&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;sort&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;unsorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;offset&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;pageNumber&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;pageSize&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;unpaged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;paged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;totalPages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;totalElements&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;last&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;size&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;sort&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;sorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;unsorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;numberOfElements&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;first&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Response code</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">; Time</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 721ms; Content length</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">425</span><span style="color:#24292E;"> bytes</span></span></code></pre></div><p>现在我们可以得出结论：QuerysDSL 可以帮我们省去创建 Predicate 的过程，简化了操作流程。但是它依然存在一些局限性，比如多了一些模糊查询、范围查询、大小查询，它对这些方面的支持不是特别友好。可能未来会更新、优化，不过在这里你只要关注一下就可以了。</p><p>此外，你还要注意这里讲解的 QuerysDSL 的参数处理方式与第 10 课时&quot;JpaSpecificationExecutor 实战应用场景&quot;讲的参数处理方式的区别，你可以自己感受一下，看看哪个使用起来更加方便。</p><h4 id="原理分析-2" tabindex="-1">原理分析 <a class="header-anchor" href="#原理分析-2" aria-label="Permalink to &quot;原理分析&quot;">​</a></h4><p>QueryDSL 也是主要利用自定义 Spring MVC 的 HandlerMethodArgumentResolver 实现类，根据请求的参数字段，转化成 Controller 里面所需要的参数，请看一下源码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QuerydslPredicateArgumentResolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HandlerMethodArgumentResolver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">....</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">resolveArgument</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> ModelAndViewContainer </span><span style="color:#FFAB70;">mavContainer</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      NativeWebRequest </span><span style="color:#FFAB70;">webRequest</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> WebDataBinderFactory </span><span style="color:#FFAB70;">binderFactory</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">      .....</span><span style="color:#6A737D;">//你有兴趣的话可以在下图关键节点打个断点看看效果，我就不多说了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QuerydslPredicateArgumentResolver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerMethodArgumentResolver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">....</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">resolveArgument</span><span style="color:#24292E;">(MethodParameter </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> ModelAndViewContainer </span><span style="color:#E36209;">mavContainer</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      NativeWebRequest </span><span style="color:#E36209;">webRequest</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> WebDataBinderFactory </span><span style="color:#E36209;">binderFactory</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">      .....</span><span style="color:#6A737D;">//你有兴趣的话可以在下图关键节点打个断点看看效果，我就不多说了</span></span></code></pre></div>`,21),q=l(`<p>在实际开发中，关于 insert 和 update 的接口我们是&quot;逃不掉&quot;的，但不是每次的字段都会全部传递过来，那这个时候我们应该怎么做呢？这就涉及了上述实例里面的两个注解 @DynamicUpdate 和 @DynamicInsert，下面来详细介绍一下。</p><h3 id="dynamicupdate-dynamicinsert-详解" tabindex="-1">@DynamicUpdate &amp; @DynamicInsert 详解 <a class="header-anchor" href="#dynamicupdate-dynamicinsert-详解" aria-label="Permalink to &quot;@DynamicUpdate \\&amp; @DynamicInsert 详解&quot;">​</a></h3><h4 id="通过语法快速了解" tabindex="-1">通过语法快速了解 <a class="header-anchor" href="#通过语法快速了解" aria-label="Permalink to &quot;通过语法快速了解&quot;">​</a></h4><p>@DynamicInsert：这个注解表示 insert 的时候，会动态生产 insert SQL 语句，其生成 SQL 的规则是：<strong>只有非空的字段才能生成 SQL</strong>。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">( TYPE )</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">( RUNTIME )</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DynamicInsert</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//默认是true，如果设置成false，就表示空的字段也会生成sql语句；</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">( TYPE )</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">( RUNTIME )</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DynamicInsert</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//默认是true，如果设置成false，就表示空的字段也会生成sql语句；</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个注解主要是用在 @Entity 的实体中，如果加上这个注解，就表示生成的 insert SQL 的 Columns 只包含非空的字段；如果实体中不加这个注解，默认的情况是空的，字段也会作为 insert 语句里面的 Columns。</p><p>@DynamicUpdate：和 insert 是一个意思，只不过这个注解指的是在 update 的时候，会动态产生 update SQL 语句，生成 SQL 的规则是：<strong>只有非空的字段才会生成到 update SQL 的 Columns 里面</strong>。请看代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">( TYPE )</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">( RUNTIME )</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DynamicUpdate</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//和insert里面一个意思，默认true，如果设置成false和不添加这个注解的效果一样</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">( TYPE )</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">( RUNTIME )</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DynamicUpdate</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//和insert里面一个意思，默认true，如果设置成false和不添加这个注解的效果一样</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>和上一个注解的原理类似，这个注解也是用在 @Entity 的实体中，如果加上这个注解，就表示生成的 update SQL 的 Columns 只包含改变的字段；如果不加这个注解，默认的情况是所有的字段也会作为 update 语句里面的 Columns。</p><p>这样做的目的是提高 sql 的执行效率，默认更新所有字段，这样会导致一些到索引的字段也会更新，这样 sql 的执行效率就比较低了。需要注意的是：这种生效的前提是 select-before-update 的触发机制。</p><p>这是什么意思呢？我们看个案例感受一下。</p><h4 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h4><p>第一步：为了方便测试，我们修改一下 User 实体：加上 @DynamicInsert 和 @DynamicUpdate 注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DynamicInsert</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DynamicUpdate</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Enumerated</span><span style="color:#E1E4E8;">(EnumType.STRING)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SexEnum sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer age;</span></span>
<span class="line"><span style="color:#E1E4E8;">......}</span><span style="color:#6A737D;">//其他不变的信息省略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DynamicInsert</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DynamicUpdate</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Enumerated</span><span style="color:#24292E;">(EnumType.STRING)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SexEnum sex;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer age;</span></span>
<span class="line"><span style="color:#24292E;">......}</span><span style="color:#6A737D;">//其他不变的信息省略</span></span></code></pre></div><p>第二步：UserInfo 实体还保持不变，即没有加上 @DynamicInsert 和 @DynamicUpdate 注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer ages;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步：我们在 UserController 里面添加如下方法，用来测试新增和更新 User。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">saveUser</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> User user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">saveUser</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> User user) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步：在 UserInfoController 里面添加如下方法，用来测试新增和更新 UserInfo。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/info&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">saveUserInfo</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">saveUserInfo</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第五步：测试一下 UserController的post 的 user 情况，看一下 insert 的情况。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#### 通过post测试insert</span></span>
<span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8089</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">Postman</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 56d8dc02</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7f3e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7b95</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7ff1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">572a4bb7d102</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#### 通过post测试insert</span></span>
<span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8089</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">Postman</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 56d8dc02</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7f3e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7b95</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7ff1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">572a4bb7d102</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>这时，我们发送一个 post 请求，只带 ages 和 name 字段，而并没有带上 User 实体里面的其他字段，看一下生成的 sql 是什么样的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (create_time, last_modified_time, version, age, name, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (create_time, last_modified_time, version, age, name, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span></code></pre></div><p>这时你会发现，除了 BaseEntity 里面的一些基础字段，而其他字段并没有生成到 insert 语句里面。</p><p>第六步：我们再测试一下 user 的 update 情况。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#### 还是发生post请求，带上ID和version执行update操作</span></span>
<span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8089</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">Postman</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 56d8dc02</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7f3e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7b95</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7ff1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">572a4bb7d102</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{name</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">jack1</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">&quot;:1,&quot;</span><span style="color:#E1E4E8;">version</span><span style="color:#9ECBFF;">&quot;:0}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#### 还是发生post请求，带上ID和version执行update操作</span></span>
<span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8089</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">Postman</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 56d8dc02</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7f3e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7b95</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7ff1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">572a4bb7d102</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{name</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">jack1</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">id</span><span style="color:#032F62;">&quot;:1,&quot;</span><span style="color:#24292E;">version</span><span style="color:#032F62;">&quot;:0}</span></span></code></pre></div><p>此时你会看到，update 和 insert 的区别有两点：</p><ol><li><p>去掉了 age 字段，修改了 name 字段的值；</p></li><li><p>当 Entity 里面有 version 字段的时候，我们再带上 version 和 id 就会显示为 update。</p></li></ol><p>再看一下调用完之后的 sql：用一条 select 查询一下实体是否存在，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user0_.id as id1_1_0_, user0_.create_time as create_t2_1_0_, user0_.create_user_id as create_u3_1_0_, user0_.last_modified_time as last_mod4_1_0_, user0_.last_modified_user_id as last_mod5_1_0_, user0_.version as version6_1_0_, user0_.age as age7_1_0_, user0_.deleted as deleted8_1_0_, user0_.email as email9_1_0_, user0_.name as name10_1_0_, user0_.sex as sex11_1_0_ from user user0_ where user0_.id</span><span style="color:#F97583;">=?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user0_.id as id1_1_0_, user0_.create_time as create_t2_1_0_, user0_.create_user_id as create_u3_1_0_, user0_.last_modified_time as last_mod4_1_0_, user0_.last_modified_user_id as last_mod5_1_0_, user0_.version as version6_1_0_, user0_.age as age7_1_0_, user0_.deleted as deleted8_1_0_, user0_.email as email9_1_0_, user0_.name as name10_1_0_, user0_.sex as sex11_1_0_ from user user0_ where user0_.id</span><span style="color:#D73A49;">=?</span></span></code></pre></div><p>其中一条 update 动态更新了我们传递的那些值，只更新有变化的字段，而包括了 null 的字段也更新了，如 age 字段中我们传递的是 null，所以 update 的 sql 打印如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> update user set last_modified_time</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, name</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">，age</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> where id</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> and version</span><span style="color:#F97583;">=?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> update user set last_modified_time</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, name</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">，age</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> where id</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> and version</span><span style="color:#D73A49;">=?</span></span></code></pre></div><p>第七步：那么我们再看一下 UserInfo 的 insert 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#### insert</span></span>
<span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">info HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8089</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">Postman</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 56d8dc02</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7f3e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7b95</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7ff1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">572a4bb7d102</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#### insert</span></span>
<span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">info HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8089</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">Postman</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 56d8dc02</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7f3e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7b95</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7ff1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">572a4bb7d102</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">}</span></span></code></pre></div><p>发送一个 post 的 insert 操作，我们看一下 sql：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;"> (create_time, create_user_id, last_modified_time, last_modified_user_id, version, ages, telephone, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;"> (create_time, create_user_id, last_modified_time, last_modified_user_id, version, ages, telephone, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span></code></pre></div><p>你会发现，无论你有没有传递值，每个字段都做了 insert，没有传递的话会用 null 代替。</p><p>第八步：我们再看一下 UserInfo 的 update 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#### update</span></span>
<span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">info HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8089</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">Postman</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 56d8dc02</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7f3e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7b95</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7ff1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">572a4bb7d102</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#### update</span></span>
<span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">info HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8089</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">Postman</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 56d8dc02</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7f3e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7b95</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7ff1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">572a4bb7d102</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">}</span></span></code></pre></div><p>还是发送一个 post 的 update 操作，原理一样，也是带上 ID 和 version 即可。我们看一下 SQL：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> update user_info set create_time</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, create_user_id</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, last_modified_time</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, last_modified_user_id</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, ages</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, telephone</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> where id</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> and version</span><span style="color:#F97583;">=?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> update user_info set create_time</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, create_user_id</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, last_modified_time</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, last_modified_user_id</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, ages</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, telephone</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> where id</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> and version</span><span style="color:#D73A49;">=?</span></span></code></pre></div><p>通过 update 的 SQL 可以看出，即使我们传递了 ages 的值，虽然没有变化，它也会把我们所有字段进行更新，包括未传递的 telephone 会更新成 null。</p><p>通过上面的两个例子你应该能弄清楚 @DynamicInsert 和 @DynamicUpdate 注解是做什么的了，我们在写 API 的时候就要考虑一下是否需要对 null 的字段进行操作，因为 JPA 是不知道字段为 null 的时候，是想更新还是不想更新，所以默认 JPA 会比较实例对象里面的所有包括 null 的字段，发现有变化也会更新。</p><p>而当我们做 API 开发的时候，有些场景是不期望更新未传递的字段的，例如如果我们没有传递某些字段而不期望 server 更新，那么我们该怎么做呢？</p><h4 id="只更新非-null-的字段" tabindex="-1">只更新非 Null 的字段 <a class="header-anchor" href="#只更新非-null-的字段" aria-label="Permalink to &quot;只更新非 Null 的字段&quot;">​</a></h4><p>第一步：新增一个 PropertyUtils 工具类，用来复制字段的属性值，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.util;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.google.common.collect.Sets;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.BeanUtils;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.BeanWrapper;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.BeanWrapperImpl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Set;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PropertyUtils</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 只copy非null字段</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">source</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">dest</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copyNotNullProperty</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">dest</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//利用spring提供的工具类忽略为null的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        BeanUtils.</span><span style="color:#B392F0;">copyProperties</span><span style="color:#E1E4E8;">(source, dest, </span><span style="color:#B392F0;">getNullPropertyNames</span><span style="color:#E1E4E8;">(source));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * get property name that value is null</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">source</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">getNullPropertyNames</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> BeanWrapper src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanWrapperImpl</span><span style="color:#E1E4E8;">(source);</span></span>
<span class="line"><span style="color:#E1E4E8;">        java.beans.</span><span style="color:#F97583;">PropertyDescriptor</span><span style="color:#E1E4E8;">[] pds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> src.</span><span style="color:#B392F0;">getPropertyDescriptors</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; emptyNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Sets.</span><span style="color:#B392F0;">newHashSet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (java.beans.PropertyDescriptor pd </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pds) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Object srcValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> src.</span><span style="color:#B392F0;">getPropertyValue</span><span style="color:#E1E4E8;">(pd.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (srcValue </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                emptyNames.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(pd.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[emptyNames.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> emptyNames.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.util;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.google.common.collect.Sets;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.BeanUtils;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.BeanWrapper;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.BeanWrapperImpl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Set;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropertyUtils</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 只copy非null字段</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">source</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">dest</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copyNotNullProperty</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">source</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">dest</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//利用spring提供的工具类忽略为null的字段</span></span>
<span class="line"><span style="color:#24292E;">        BeanUtils.</span><span style="color:#6F42C1;">copyProperties</span><span style="color:#24292E;">(source, dest, </span><span style="color:#6F42C1;">getNullPropertyNames</span><span style="color:#24292E;">(source));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * get property name that value is null</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">source</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">getNullPropertyNames</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> BeanWrapper src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanWrapperImpl</span><span style="color:#24292E;">(source);</span></span>
<span class="line"><span style="color:#24292E;">        java.beans.</span><span style="color:#D73A49;">PropertyDescriptor</span><span style="color:#24292E;">[] pds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> src.</span><span style="color:#6F42C1;">getPropertyDescriptors</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; emptyNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Sets.</span><span style="color:#6F42C1;">newHashSet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (java.beans.PropertyDescriptor pd </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pds) {</span></span>
<span class="line"><span style="color:#24292E;">            Object srcValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> src.</span><span style="color:#6F42C1;">getPropertyValue</span><span style="color:#24292E;">(pd.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (srcValue </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                emptyNames.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(pd.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[emptyNames.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> emptyNames.</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步：我们的 User 实体保持不变，类里面还加上 @DynamicUpdate 注解，新增一个 Controller 方法，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">user</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/notnull&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">saveUserNotNullProperties</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> User user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//数据库里面取出最新的数据，当然了这一步严谨一点可以根据id和version来取数据，如果没取到可以报乐观锁异常</span></span>
<span class="line"><span style="color:#E1E4E8;">   User userSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//将不是null的字段copy到userSrc里面，我们只更新传递了不是null的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">   PropertyUtils.</span><span style="color:#B392F0;">copyNotNullProperty</span><span style="color:#E1E4E8;">(user,userSrc);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(userSrc);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">user</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/notnull&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">saveUserNotNullProperties</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> User user) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//数据库里面取出最新的数据，当然了这一步严谨一点可以根据id和version来取数据，如果没取到可以报乐观锁异常</span></span>
<span class="line"><span style="color:#24292E;">   User userSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//将不是null的字段copy到userSrc里面，我们只更新传递了不是null的字段</span></span>
<span class="line"><span style="color:#24292E;">   PropertyUtils.</span><span style="color:#6F42C1;">copyNotNullProperty</span><span style="color:#24292E;">(user,userSrc);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(userSrc);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步：调用 API，触发更新操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">POST http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user HTTP/1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8089</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">Postman</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 56d8dc02</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7f3e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7b95</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7ff1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">572a4bb7d102</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jack1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">POST http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user HTTP/1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8089</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">Postman</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 56d8dc02</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7f3e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7b95</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7ff1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">572a4bb7d102</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jack1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>发送一个更新请求，和上面的更新请求一样，还是 age 不传递，值传递改变了的 name 属性，我们再看一下 sql 的变化，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">update user set last_modified_time</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;">, name</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> where id</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> and version</span><span style="color:#F97583;">=?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">update user set last_modified_time</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;">, name</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> where id</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> and version</span><span style="color:#D73A49;">=?</span></span></code></pre></div><p>你会发现，这个时候未传递的 age 字段就不会更新了。实际工作中你也可以将 Controller 里面的逻辑放到 BaseService 里面，提供一个公共的 updateOnlyNotNull 的方法，以便和默认的 save 方法作区分。</p><p>我们既然做了 MVC，一定也免不了要对系统进行监控，那么怎么看监控指标呢？</p><h3 id="spring-data-对系统监控做了哪些支持" tabindex="-1">Spring Data 对系统监控做了哪些支持？ <a class="header-anchor" href="#spring-data-对系统监控做了哪些支持" aria-label="Permalink to &quot;Spring Data 对系统监控做了哪些支持？&quot;">​</a></h3><p>对数据层面的系统进行监控，这里我主要为你介绍两个方法。</p><p><strong>方法一：/actuator/health 的支持，里面会检查 DB 的状态。</strong></p>`,59),h=s("p",null,[s("strong",null,"方法二：/actuator/prometheus 里面会包含一些 Hibernate 和 Datasource 的 metric。")],-1),m=l(`<p>这个方法在我们做 granfan 图表的时候会很有用，不过需要注意的是：</p><p>1.开启 prometheus 需要 gradle 额外引入下面这个包：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span></span></code></pre></div><p>2.开启 Hibernate 的 statistics 需要配置如下操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.jpa.properties.hibernate.generate_statistics</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">management.endpoint.prometheus.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">management.metrics.export.prometheus.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.jpa.properties.hibernate.generate_statistics</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">management.endpoint.prometheus.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">management.metrics.export.prometheus.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>到这里，本课时的内容就告一段落了。通过上面的讲解，你会发现 Spring Data 为我们做了不少支持 MVC 的工作，帮助我们提升了很多开发效率；并且通过原理分析，你也知道了自定义 HttpMessageConverter 和 HandlerMethodArgumentResolver 的方法。</p><p>我根据自身经验总结了上面的几个常见的 Web MVC 相关的 Case，当然了也可能有我没有想到的地方，欢迎你补充留言。</p><p>最后如果你觉得有帮助就动动手指分享吧。下一课时，我们学习如何自定义 HandlerMethodArgumentResolvers，用来把请求参数结构化地传递到 Controller 的参数里面。到时见。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,10);function v(b,B,f,_,k,P){const a=e("Image");return t(),r("div",null,[y,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/66/CF/Ciqc1F-f3MqAH54fAANYwOjyA38629.png"}),p(),E,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/66/CF/Ciqc1F-f3NWAIYBDAAIFxTM8YZQ845.png"}),p(),i,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/66/DA/CgqCHl-f3OWAMLu1AAJEBkl8MfA213.png"}),p(),u,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/66/DA/CgqCHl-f3OyAL_EwAANxdzchFbo230.png"}),p(),F,d,g,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/66/CF/Ciqc1F-f3PSAXWofAANpCw8f8NY210.png"}),p(),C,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/66/DA/CgqCHl-f3QGAceZhAAMGX5hYHo8045.png"}),p(),A,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/66/DA/CgqCHl-f3QeAH_xxAAHoIpHyr-Q310.png"}),p(),D,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/66/DA/CgqCHl-f3SCAX2bZAANpM9TDbyc579.png"}),p(),q,n(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/66/CF/Ciqc1F-f3TCAM1YCAACeuNm2X7E973.png"}),p(),h,n(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/66/CF/Ciqc1F-f3TaACqNbAAIajUOGQMQ163.png"}),p(),m])}const j=o(c,[["render",v]]);export{T as __pageData,j as default};
