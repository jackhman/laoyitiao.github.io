import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.b3d8e22e.js";const C=JSON.parse('{"title":"创建代码生成上下文 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7641) 16  生成代码：AST 如何生成可运行的代码？（上）.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7641) 16  生成代码：AST 如何生成可运行的代码？（上）.md","lastUpdated":1696417798000}'),l={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7641) 16  生成代码：AST 如何生成可运行的代码？（上）.md"},o=p(`<p>上一节课我们分析了 AST 节点转换的过程，也知道了 AST 节点转换的作用是通过语法分析，创建了语义和信息更加丰富的代码生成节点 codegenNode，便于后续生成代码。</p><p>那么这一节课，我们就来分析整个编译的过程的最后一步------代码生成的实现原理。</p><p>同样的，代码生成阶段由于要处理的场景很多，所以代码也非常多而复杂。为了方便你理解它的核心流程，我们还是通过这个示例来演示整个代码生成的过程：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;flag&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-else</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;hello { { msg + test }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;static&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;static&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">hello</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;flag&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">hello</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-else</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;hello { { msg + test }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;static&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;static&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>代码生成的结果是和编译配置相关的，你可以打开官方提供的<a href="https://vue-next-template-explorer.netlify.app/" target="_blank" rel="noreferrer">模板导出工具平台</a>，点击右上角的 Options 修改编译配置。为了让你理解核心的流程，这里我只分析一种配置方案，当然当你理解整个编译核心流程后，也可以修改这些配置分析其他的分支逻辑。</p><p>我们分析的编译配置是：mode 为 module，prefixIdentifiers 开启，hoistStatic 开启，其他配置均不开启。</p><p>为了让你有个大致印象，我们先来看一下上述例子生成代码的结果：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _resolveComponent, createVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createVNode, createCommentVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createCommentVNode, toDisplayString </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _toDisplayString, openBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _openBlock, createBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createBlock } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { class: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { key: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">_ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_cache</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_component_hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">_openBlock</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">_createBlock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">, _hoisted_1, [</span></span>
<span class="line"><span style="color:#E1E4E8;">    (_ctx.flag)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(_component_hello, { key: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">_openBlock</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">_createBlock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">, _hoisted_2, [</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;hello &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_toDisplayString</span><span style="color:#E1E4E8;">(_ctx.msg </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> _ctx.test), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">          _hoisted_3,</span></span>
<span class="line"><span style="color:#E1E4E8;">          _hoisted_4</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]))</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _resolveComponent, createVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createVNode, createCommentVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createCommentVNode, toDisplayString </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _toDisplayString, openBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _openBlock, createBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createBlock } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { class: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { key: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">_cache</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_component_hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_resolveComponent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">_openBlock</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">_createBlock</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">, _hoisted_1, [</span></span>
<span class="line"><span style="color:#24292E;">    (_ctx.flag)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(_component_hello, { key: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">_openBlock</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">_createBlock</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">, _hoisted_2, [</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_toDisplayString</span><span style="color:#24292E;">(_ctx.msg </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> _ctx.test), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">          _hoisted_3,</span></span>
<span class="line"><span style="color:#24292E;">          _hoisted_4</span></span>
<span class="line"><span style="color:#24292E;">        ]))</span></span>
<span class="line"><span style="color:#24292E;">  ]))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>示例的模板是如何转换生成这样的代码的？在 AST 转换后，会执行 generate 函数生成代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({}, options, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  prefixIdentifiers</span></span>
<span class="line"><span style="color:#E1E4E8;">}))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(ast, </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({}, options, {</span></span>
<span class="line"><span style="color:#24292E;">  prefixIdentifiers</span></span>
<span class="line"><span style="color:#24292E;">}))</span></span></code></pre></div><p>generate 函数的输入就是转换后的 AST 根节点，我们看一下它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(ast, options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建代码生成上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCodegenContext</span><span style="color:#E1E4E8;">(ast, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hasHelpers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ast.helpers.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> useWithBlock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">prefixIdentifiers </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mode </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> genScopeId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scopeId </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 生成预设代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">genModulePreamble</span><span style="color:#E1E4E8;">(ast, context, genScopeId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">genFunctionPreamble</span><span style="color:#E1E4E8;">(ast, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ssr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`function </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(_ctx, _cache) {\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`function </span><span style="color:#B392F0;">ssrRender</span><span style="color:#E1E4E8;">(_ctx, _push, _parent, _attrs) {\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">indent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (useWithBlock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理带 with 的情况，Web 端运行时编译</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> (_ctx) {\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">indent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hasHelpers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { \${ast.helpers</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> \`\${helperNameMap[s]}</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> _\${helperNameMap[s]}\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">)} } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _Vue\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`\\n\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 生成自定义组件声明代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.components.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">genAssets</span><span style="color:#E1E4E8;">(ast.components, </span><span style="color:#9ECBFF;">&#39;component&#39;</span><span style="color:#E1E4E8;">, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.directives.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ast.temps </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 生成自定义指令声明代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.directives.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">genAssets</span><span style="color:#E1E4E8;">(ast.directives, </span><span style="color:#9ECBFF;">&#39;directive&#39;</span><span style="color:#E1E4E8;">, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.temps </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 生成临时变量代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.temps </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`let \`);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ast.temps; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`\${i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> \`, \` </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`\`}_temp\${i}\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.components.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ast.directives.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ast.temps) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`\\n\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ssr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> \`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 生成创建 VNode 树的表达式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.codegenNode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">genNode</span><span style="color:#E1E4E8;">(ast.codegenNode, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (useWithBlock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">deindent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`}\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">deindent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`}\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ast,</span></span>
<span class="line"><span style="color:#E1E4E8;">    code</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> context.code,</span></span>
<span class="line"><span style="color:#E1E4E8;">    map</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> context.map </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> context.map.</span><span style="color:#B392F0;">toJSON</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(ast, options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建代码生成上下文</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCodegenContext</span><span style="color:#24292E;">(ast, options);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hasHelpers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ast.helpers.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> useWithBlock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">prefixIdentifiers </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mode </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> genScopeId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scopeId </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 生成预设代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">genModulePreamble</span><span style="color:#24292E;">(ast, context, genScopeId);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">genFunctionPreamble</span><span style="color:#24292E;">(ast, context);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ssr) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`function </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(_ctx, _cache) {\`);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`function </span><span style="color:#6F42C1;">ssrRender</span><span style="color:#24292E;">(_ctx, _push, _parent, _attrs) {\`);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">indent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (useWithBlock) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理带 with 的情况，Web 端运行时编译</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> (_ctx) {\`);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">indent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hasHelpers) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { \${ast.helpers</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> \`\${helperNameMap[s]}</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> _\${helperNameMap[s]}\`)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">)} } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _Vue\`);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`\\n\`);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 生成自定义组件声明代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.components.length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">genAssets</span><span style="color:#24292E;">(ast.components, </span><span style="color:#032F62;">&#39;component&#39;</span><span style="color:#24292E;">, context);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.directives.length </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ast.temps </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 生成自定义指令声明代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.directives.length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">genAssets</span><span style="color:#24292E;">(ast.directives, </span><span style="color:#032F62;">&#39;directive&#39;</span><span style="color:#24292E;">, context);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.temps </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 生成临时变量代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.temps </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`let \`);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ast.temps; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`\${i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> \`, \` </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`\`}_temp\${i}\`);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.components.length </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ast.directives.length </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ast.temps) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`\\n\`);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ssr) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> \`);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 生成创建 VNode 树的表达式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.codegenNode) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">genNode</span><span style="color:#24292E;">(ast.codegenNode, context);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">\`);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (useWithBlock) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">deindent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`}\`);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">deindent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`}\`);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ast,</span></span>
<span class="line"><span style="color:#24292E;">    code</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> context.code,</span></span>
<span class="line"><span style="color:#24292E;">    map</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> context.map </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> context.map.</span><span style="color:#6F42C1;">toJSON</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>generate 主要做五件事情：创建代码生成上下文，生成预设代码，生成渲染函数，生成资源声明代码，以及生成创建 VNode 树的表达式。接下来，我们就依次详细分析这几个流程。</p><h3 id="创建代码生成上下文" tabindex="-1">创建代码生成上下文 <a class="header-anchor" href="#创建代码生成上下文" aria-label="Permalink to &quot;创建代码生成上下文&quot;">​</a></h3><p>首先，是通过执行 createCodegenContext 创建代码生成上下文，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createCodegenContext</span><span style="color:#E1E4E8;">(ast, { mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">, prefixIdentifiers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">, sourceMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, filename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`template.vue.html\`, scopeId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, optimizeBindings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, runtimeGlobalName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`Vue\`, runtimeModuleName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`vue\`, ssr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode,</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefixIdentifiers,</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceMap,</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename,</span></span>
<span class="line"><span style="color:#E1E4E8;">    scopeId,</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizeBindings,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeGlobalName,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeModuleName,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ssr,</span></span>
<span class="line"><span style="color:#E1E4E8;">    source</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ast.loc.source,</span></span>
<span class="line"><span style="color:#E1E4E8;">    code</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`\`,</span></span>
<span class="line"><span style="color:#E1E4E8;">    column</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    line</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    offset</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    indentLevel</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    pure</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    map</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">helper</span><span style="color:#E1E4E8;">(key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> \`_\${helperNameMap[key]}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(code) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      context.code </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> code</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">indent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">context.indentLevel)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">deindent</span><span style="color:#E1E4E8;">(withoutNewLine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (withoutNewLine) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">context.indentLevel</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">context.indentLevel)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">(context.indentLevel)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">(n) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> \`  \`.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(n))</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createCodegenContext</span><span style="color:#24292E;">(ast, { mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">, prefixIdentifiers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">, sourceMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`template.vue.html\`, scopeId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, optimizeBindings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, runtimeGlobalName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`Vue\`, runtimeModuleName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`vue\`, ssr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    mode,</span></span>
<span class="line"><span style="color:#24292E;">    prefixIdentifiers,</span></span>
<span class="line"><span style="color:#24292E;">    sourceMap,</span></span>
<span class="line"><span style="color:#24292E;">    filename,</span></span>
<span class="line"><span style="color:#24292E;">    scopeId,</span></span>
<span class="line"><span style="color:#24292E;">    optimizeBindings,</span></span>
<span class="line"><span style="color:#24292E;">    runtimeGlobalName,</span></span>
<span class="line"><span style="color:#24292E;">    runtimeModuleName,</span></span>
<span class="line"><span style="color:#24292E;">    ssr,</span></span>
<span class="line"><span style="color:#24292E;">    source</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ast.loc.source,</span></span>
<span class="line"><span style="color:#24292E;">    code</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`\`,</span></span>
<span class="line"><span style="color:#24292E;">    column</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    line</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    offset</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    indentLevel</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    pure</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    map</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">(key) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> \`_\${helperNameMap[key]}\`</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(code) {</span></span>
<span class="line"><span style="color:#24292E;">      context.code </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> code</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">indent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">context.indentLevel)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">deindent</span><span style="color:#24292E;">(withoutNewLine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (withoutNewLine) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">context.indentLevel</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">context.indentLevel)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">(context.indentLevel)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">(n) {</span></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> \`  \`.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(n))</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个上下文对象 context 维护了 generate 过程的一些配置，比如 mode、prefixIdentifiers；也维护了 generate 过程的一些状态数据，比如当前生成的代码 code，当前生成代码的缩进 indentLevel 等。</p><p>此外，context 还包含了在 generate 过程中可能会调用的一些辅助函数，接下来我会介绍几个常用的方法，它们会在整个代码生成节点过程中经常被用到。</p><ul><li><p><code>push(code)</code>，就是在当前的代码 context.code 后追加 code 来更新它的值。</p></li><li><p><code>indent()</code>，它的作用就是增加代码的缩进，它会让上下文维护的代码缩进 context.indentLevel 加 1，内部会执行 newline 方法，添加一个换行符，以及两倍indentLevel 对应的空格来表示缩进的长度。</p></li><li><p><code>deindent()</code>，和 indent 相反，它会减少代码的缩进，让上下文维护的代码缩进 context.indentLevel 减 1，在内部会执行 newline 方法去添加一个换行符，并减少两倍indentLevel 对应的空格的缩进长度。</p></li></ul><p>上下文创建完毕后，接下来就到了真正的代码生成阶段，在分析的过程中我会结合示例讲解，让你更直观地理解整个代码的生成过程，我们先来看生成预设代码。</p><h3 id="生成预设代码" tabindex="-1">生成预设代码 <a class="header-anchor" href="#生成预设代码" aria-label="Permalink to &quot;生成预设代码&quot;">​</a></h3><p>因为 mode 是 module，所以会执行 genModulePreamble 生成预设代码，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">genModulePreamble</span><span style="color:#E1E4E8;">(ast, context, genScopeId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { push, newline, optimizeBindings, runtimeModuleName } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 scopeId</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.helpers.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 生成 import 声明代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (optimizeBindings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`import { \${ast.helpers</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> helperNameMap[s])</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">)} } from \${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(runtimeModuleName)}\\n\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`\\n</span><span style="color:#6A737D;">// Binding optimization for webpack code-split\\nconst \${ast.helpers</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> \`_\${helperNameMap[s]} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \${helperNameMap[s]}\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">)}\\n\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`import { \${ast.helpers</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> \`\${helperNameMap[s]} as _\${helperNameMap[s]}\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">)} } from \${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(runtimeModuleName)}\\n\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 ssrHelpers</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 imports</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 scopeId</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">genHoists</span><span style="color:#E1E4E8;">(ast.hoists, context)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`export \`)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">genModulePreamble</span><span style="color:#24292E;">(ast, context, genScopeId) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { push, newline, optimizeBindings, runtimeModuleName } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 scopeId</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.helpers.length) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// 生成 import 声明代码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (optimizeBindings) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`import { \${ast.helpers</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> helperNameMap[s])</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">)} } from \${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(runtimeModuleName)}\\n\`)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`\\n</span><span style="color:#6A737D;">// Binding optimization for webpack code-split\\nconst \${ast.helpers</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> \`_\${helperNameMap[s]} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \${helperNameMap[s]}\`)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">)}\\n\`)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`import { \${ast.helpers</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> \`\${helperNameMap[s]} as _\${helperNameMap[s]}\`)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">)} } from \${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(runtimeModuleName)}\\n\`)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 ssrHelpers</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 imports</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 scopeId</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">genHoists</span><span style="color:#24292E;">(ast.hoists, context)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`export \`)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面我们结合前面的示例来分析这个过程，此时 genScopeId 为 false，所以相关逻辑我们可以不看。ast.helpers 是在 transform 阶段通过 context.helper 方法添加的，它的值如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(resolveComponent),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(createVNode),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(createCommentVNode),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(toDisplayString),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(openBlock),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(createBlock)</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(resolveComponent),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(createVNode),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(createCommentVNode),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(toDisplayString),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(openBlock),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(createBlock)</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>ast.helpers 存储了 Symbol 对象的数组，我们可以从 helperNameMap 中找到每个 Symbol 对象对应的字符串，helperNameMap 的定义如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">helperNameMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">FRAGMENT</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`Fragment\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">TELEPORT</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`Teleport\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">SUSPENSE</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`Suspense\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">KEEP_ALIVE</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`KeepAlive\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">BASE_TRANSITION</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`BaseTransition\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">OPEN_BLOCK</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`openBlock\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">CREATE_BLOCK</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`createBlock\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">CREATE_VNODE</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`createVNode\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">CREATE_COMMENT</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`createCommentVNode\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">CREATE_TEXT</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`createTextVNode\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">CREATE_STATIC</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`createStaticVNode\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">RESOLVE_COMPONENT</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`resolveComponent\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">RESOLVE_DYNAMIC_COMPONENT</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`resolveDynamicComponent\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">RESOLVE_DIRECTIVE</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`resolveDirective\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">WITH_DIRECTIVES</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`withDirectives\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">RENDER_LIST</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`renderList\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">RENDER_SLOT</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`renderSlot\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">CREATE_SLOTS</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`createSlots\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">TO_DISPLAY_STRING</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`toDisplayString\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">MERGE_PROPS</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`mergeProps\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">TO_HANDLERS</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`toHandlers\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">CAMELIZE</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`camelize\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">SET_BLOCK_TRACKING</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`setBlockTracking\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">PUSH_SCOPE_ID</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`pushScopeId\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">POP_SCOPE_ID</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`popScopeId\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">WITH_SCOPE_ID</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`withScopeId\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">WITH_CTX</span><span style="color:#E1E4E8;">]: </span><span style="color:#9ECBFF;">\`withCtx\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">helperNameMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">FRAGMENT</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`Fragment\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">TELEPORT</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`Teleport\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">SUSPENSE</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`Suspense\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">KEEP_ALIVE</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`KeepAlive\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">BASE_TRANSITION</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`BaseTransition\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">OPEN_BLOCK</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`openBlock\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">CREATE_BLOCK</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`createBlock\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">CREATE_VNODE</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`createVNode\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">CREATE_COMMENT</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`createCommentVNode\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">CREATE_TEXT</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`createTextVNode\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">CREATE_STATIC</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`createStaticVNode\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">RESOLVE_COMPONENT</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`resolveComponent\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">RESOLVE_DYNAMIC_COMPONENT</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`resolveDynamicComponent\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">RESOLVE_DIRECTIVE</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`resolveDirective\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">WITH_DIRECTIVES</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`withDirectives\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">RENDER_LIST</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`renderList\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">RENDER_SLOT</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`renderSlot\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">CREATE_SLOTS</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`createSlots\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">TO_DISPLAY_STRING</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`toDisplayString\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">MERGE_PROPS</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`mergeProps\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">TO_HANDLERS</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`toHandlers\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">CAMELIZE</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`camelize\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">SET_BLOCK_TRACKING</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`setBlockTracking\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">PUSH_SCOPE_ID</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`pushScopeId\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">POP_SCOPE_ID</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`popScopeId\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">WITH_SCOPE_ID</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`withScopeId\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">WITH_CTX</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">\`withCtx\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于 optimizeBindings 是 false，所以会执行如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`import { \${ast.helpers</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> \`\${helperNameMap[s]} as _\${helperNameMap[s]}\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">)} } from \${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(runtimeModuleName)}\\n\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`import { \${ast.helpers</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> \`\${helperNameMap[s]} as _\${helperNameMap[s]}\`)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">)} } from \${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(runtimeModuleName)}\\n\`)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最终会生成这些代码，并更新到 context.code 中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span></code></pre></div><p>通过生成的代码，我们可以直观地感受到，这里就是从 Vue 中引入了一些辅助方法，那么为什么需要引入这些辅助方法呢，这就和 Vue.js 3.0 的设计有关了。</p><p>在 Vue.js 2.x 中，创建 VNode 的方法比如 $createElement、_c 这些都是挂载在组件的实例上，在生成渲染函数的时候，直接从组件实例 vm 中访问这些方法即可。</p><p>而到了 Vue.js 3.0，创建 VNode 的方法 createVNode 是直接通过模块的方式导出，其它方法比如 resolveComponent、openBlock ，都是类似的，所以我们首先需要生成这些 import 声明的预设代码。</p><p>我们接着往下看，ssrHelpers 是 undefined，imports 的数组长度为空，genScopeId 为 false，所以这些内部逻辑都不会执行，接着执行 genHoists 生成静态提升的相关代码，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">genHoists</span><span style="color:#E1E4E8;">(hoists, context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hoists.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  context.pure </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { push, newline } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  hoists.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((exp, i) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (exp) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> _hoisted_\${i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">genNode</span><span style="color:#E1E4E8;">(exp, context)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  context.pure </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">genHoists</span><span style="color:#24292E;">(hoists, context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">hoists.length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  context.pure </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { push, newline } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  hoists.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((exp, i) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (exp) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> _hoisted_\${i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">genNode</span><span style="color:#24292E;">(exp, context)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  context.pure </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先通过执行 newline 生成一个空行，然后遍历 hoists 数组，生成静态提升变量定义的方法。此时 hoists 的值是这样的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* JS_OBJECT_EXPRESSION */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* JS_PROPERTY */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;isConstant&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;isStatic&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;isConstant&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;isStatic&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* JS_OBJECT_EXPRESSION */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* JS_PROPERTY */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;isConstant&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;isStatic&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;isConstant&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;isStatic&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* VNODE_CALL */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;tag&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">p</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;children&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* ELEMENT */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },                                                  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;patchFlag&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-1 /* HOISTED */&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;isBlock&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;disableTracking&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* VNODE_CALL */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;tag&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">p</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;children&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* ELEMENT */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;patchFlag&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-1 /* HOISTED */&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;isBlock&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;disableTracking&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* JS_OBJECT_EXPRESSION */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* JS_PROPERTY */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;isConstant&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;isStatic&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;isConstant&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;isStatic&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* JS_OBJECT_EXPRESSION */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* JS_PROPERTY */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;isConstant&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;isStatic&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* SIMPLE_EXPRESSION */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;isConstant&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;isStatic&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* VNODE_CALL */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;tag&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">p</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;children&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* ELEMENT */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },                                                  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;patchFlag&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-1 /* HOISTED */&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;isBlock&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;disableTracking&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* VNODE_CALL */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;tag&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">p</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;children&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* ELEMENT */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;patchFlag&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-1 /* HOISTED */&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;isBlock&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;disableTracking&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>这里，hoists 数组的长度为 4，前两个都是 JavaScript 对象表达式节点，后两个是 VNodeCall 节点，通过 genNode 我们可以把这些节点生成对应的代码，这个方法我们后续会详细说明，这里先略过。</p><p>然后通过遍历 hoists 我们生成如下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _resolveComponent, createVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createVNode, createCommentVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createCommentVNode, toDisplayString </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _toDisplayString, openBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _openBlock, createBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createBlock } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { class: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { key: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _resolveComponent, createVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createVNode, createCommentVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createCommentVNode, toDisplayString </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _toDisplayString, openBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _openBlock, createBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createBlock } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { class: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { key: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span></code></pre></div><p>可以看到，除了从 Vue 中导入辅助方法，我们还创建了静态提升的变量。</p><p>我们回到 genModulePreamble，接着会执行<code>newline()</code>和<code>push(export )</code>，非常好理解，也就是添加了一个空行和 export 字符串。</p><p>至此，预设代码生成完毕，我们就得到了这些代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _resolveComponent, createVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createVNode, createCommentVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createCommentVNode, toDisplayString </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _toDisplayString, openBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _openBlock, createBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createBlock } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { class: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { key: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _resolveComponent, createVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createVNode, createCommentVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createCommentVNode, toDisplayString </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _toDisplayString, openBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _openBlock, createBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createBlock } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { class: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { key: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span></span></code></pre></div><h3 id="生成渲染函数" tabindex="-1">生成渲染函数 <a class="header-anchor" href="#生成渲染函数" aria-label="Permalink to &quot;生成渲染函数&quot;">​</a></h3><p>接下来，就是生成渲染函数了，我们回到 generate 函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ssr) {</span></span>
<span class="line"><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`function </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(_ctx, _cache) {\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`function </span><span style="color:#B392F0;">ssrRender</span><span style="color:#E1E4E8;">(_ctx, _push, _parent, _attrs) {\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">indent</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ssr) {</span></span>
<span class="line"><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`function </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(_ctx, _cache) {\`);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`function </span><span style="color:#6F42C1;">ssrRender</span><span style="color:#24292E;">(_ctx, _push, _parent, _attrs) {\`);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">indent</span><span style="color:#24292E;">();</span></span></code></pre></div><p>由于 ssr 为 false, 所以生成如下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _resolveComponent, createVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createVNode, createCommentVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createCommentVNode, toDisplayString </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _toDisplayString, openBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _openBlock, createBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createBlock } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { class: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { key: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">_ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_cache</span><span style="color:#E1E4E8;">) {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _resolveComponent, createVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createVNode, createCommentVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createCommentVNode, toDisplayString </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _toDisplayString, openBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _openBlock, createBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createBlock } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { class: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { key: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">_cache</span><span style="color:#24292E;">) {</span></span></code></pre></div><p>注意，<strong>这里代码的最后一行有 2 个空格的缩进</strong>。</p><p>另外，由于 useWithBlock 为 false，所以我们也不需生成 with 相关的代码。而且，这里我们创建了 render 的函数声明，接下来的代码都是在生成 render 的函数体。</p><h3 id="生成资源声明代码" tabindex="-1">生成资源声明代码 <a class="header-anchor" href="#生成资源声明代码" aria-label="Permalink to &quot;生成资源声明代码&quot;">​</a></h3><p>在 render 函数体的内部，我们首先要生成资源声明代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 生成自定义组件声明代码</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.components.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">genAssets</span><span style="color:#E1E4E8;">(ast.components, </span><span style="color:#9ECBFF;">&#39;component&#39;</span><span style="color:#E1E4E8;">, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.directives.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ast.temps </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 生成自定义指令声明代码</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.directives.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">genAssets</span><span style="color:#E1E4E8;">(ast.directives, </span><span style="color:#9ECBFF;">&#39;directive&#39;</span><span style="color:#E1E4E8;">, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.temps </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 生成临时变量代码</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.temps </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`let \`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ast.temps; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`\${i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> \`, \` </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`\`}_temp\${i}\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 生成自定义组件声明代码</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.components.length) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">genAssets</span><span style="color:#24292E;">(ast.components, </span><span style="color:#032F62;">&#39;component&#39;</span><span style="color:#24292E;">, context);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.directives.length </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ast.temps </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 生成自定义指令声明代码</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.directives.length) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">genAssets</span><span style="color:#24292E;">(ast.directives, </span><span style="color:#032F62;">&#39;directive&#39;</span><span style="color:#24292E;">, context);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.temps </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 生成临时变量代码</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.temps </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`let \`);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ast.temps; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`\${i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> \`, \` </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`\`}_temp\${i}\`);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在我们的示例中，directives 数组长度为 0，temps 的值是 0，所以自定义指令和临时变量代码生成的相关逻辑跳过，而这里 components的值是<code>[&quot;hello&quot;]</code>。</p><p>接着就通过 genAssets 去生成自定义组件声明代码，我们来看一下它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">genAssets</span><span style="color:#E1E4E8;">(assets, type, { helper, push, newline }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">helper</span><span style="color:#E1E4E8;">(type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;component&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> RESOLVE_COMPONENT </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> RESOLVE_DIRECTIVE)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> assets.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> assets[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> \${</span><span style="color:#B392F0;">toValidAssetId</span><span style="color:#E1E4E8;">(id, type)} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \${resolver}(\${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(id)})\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> assets.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">genAssets</span><span style="color:#24292E;">(assets, type, { helper, push, newline }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">(type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;component&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> RESOLVE_COMPONENT </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> RESOLVE_DIRECTIVE)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> assets.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> assets[i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> \${</span><span style="color:#6F42C1;">toValidAssetId</span><span style="color:#24292E;">(id, type)} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \${resolver}(\${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(id)})\`)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> assets.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 helper 函数就是从前面提到的 helperNameMap 中查找对应的字符串，对于 component，返回的就是 resolveComponent。</p><p>接着会遍历 assets 数组，生成自定义组件声明代码，在这个过程中，它们会把变量通过 toValidAssetId 进行一层包装：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">toValidAssetId</span><span style="color:#E1E4E8;">(name, type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> \`_\${type}_\${name.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">\\w]</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">g, </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">)}\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">toValidAssetId</span><span style="color:#24292E;">(name, type) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> \`_\${type}_\${name.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">^</span><span style="color:#24292E;">\\w]</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">g, </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">)}\`;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>比如 hello 组件，执行 toValidAssetId 就变成了 _component_hello。</p><p>因此对于我们的示例而言，genAssets 后生成的代码是这样的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _resolveComponent, createVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createVNode, createCommentVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createCommentVNode, toDisplayString </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _toDisplayString, openBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _openBlock, createBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createBlock } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { class: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { key: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">_ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_cache</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_component_hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _resolveComponent, createVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createVNode, createCommentVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createCommentVNode, toDisplayString </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _toDisplayString, openBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _openBlock, createBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createBlock } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { class: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { key: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">_cache</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_component_hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_resolveComponent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>这很好理解，通过 resolveComponent，我们就可以解析到注册的自定义组件对象，然后在后面创建组件 vnode 的时候当做参数传入。</p><p>回到 generate 函数，接下来会执行如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ast.components.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ast.directives.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ast.temps) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`\\n\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">newline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ssr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(\`</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> \`);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ast.components.length </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ast.directives.length </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ast.temps) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`\\n\`);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">newline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ssr) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(\`</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> \`);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里是指，如果生成了资源声明代码，则在尾部添加一个换行符，然后再生成一个空行，并且如果不是 ssr，则再添加一个 return 字符串，此时得到的代码结果如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _resolveComponent, createVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createVNode, createCommentVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createCommentVNode, toDisplayString </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _toDisplayString, openBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _openBlock, createBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createBlock } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { class: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { key: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_hoisted_4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#B392F0;">_createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">_ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_cache</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_component_hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _resolveComponent, createVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createVNode, createCommentVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createCommentVNode, toDisplayString </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _toDisplayString, openBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _openBlock, createBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createBlock } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { class: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { key: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_hoisted_4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#6F42C1;">_createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HOISTED */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">_cache</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_component_hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_resolveComponent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span></span></code></pre></div><p>好的，我们就先分析到这里，下节课继续来看生成创建 VNode 树的表达式的过程。</p><blockquote><p>本节课的相关代码在源代码中的位置如下：</p><p>packages/compiler-core/src/codegen.ts</p></blockquote>`,71),e=[o];function t(c,E,r,y,i,F){return n(),a("div",null,e)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
