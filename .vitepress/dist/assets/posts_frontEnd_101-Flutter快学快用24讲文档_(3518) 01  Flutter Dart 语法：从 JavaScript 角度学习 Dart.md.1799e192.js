import{_ as l,j as p,o,g as e,k as t,h as a,s,Q as r}from"./chunks/framework.4e7d56ce.js";const k=JSON.parse('{"title":"01FlutterDart语法：从JavaScript角度学习Dart","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3518) 01  Flutter Dart 语法：从 JavaScript 角度学习 Dart.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3518) 01  Flutter Dart 语法：从 JavaScript 角度学习 Dart.md","lastUpdated":1696417798000}'),c={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3518) 01  Flutter Dart 语法：从 JavaScript 角度学习 Dart.md"},E=s("h1",{id:"_01flutterdart语法-从javascript角度学习dart",tabindex:"-1"},[a("01FlutterDart语法：从JavaScript角度学习Dart "),s("a",{class:"header-anchor",href:"#_01flutterdart语法-从javascript角度学习dart","aria-label":'Permalink to "01FlutterDart语法：从JavaScript角度学习Dart"'},"​")],-1),y=s("p",null,"本课时我主要从 JavaScript 角度来讲解如何学习 Dart。",-1),i=s("p",null,"在学习本课时之前，你需要有一定的 JavaScript 基础，比如基础数据类型、函数、基础运算符、类、异步原理和文件库引入等，这也是 JavaScript 的核心知识点。接下来将通过对比与 JavaScript 的差异点来学习 Dart 语言。",-1),d=s("h3",{id:"基础数据类型",tabindex:"-1"},[a("基础数据类型 "),s("a",{class:"header-anchor",href:"#基础数据类型","aria-label":'Permalink to "基础数据类型"'},"​")],-1),F=s("p",null,"与 JavaScript 相比较，我们整体上看一下图 1 两种语言的对比情况，相似的部分这里就不介绍了，比如 Number 和 String，其使用方式基本一致。下面主要基于两者的差异点逐一讲解，避免混淆或错误使用。",-1),u=r(`<p>图 1 Dart 与 JavaScript 基础数据类型对比</p><h4 id="symbol-的区别" tabindex="-1">Symbol 的区别 <a class="header-anchor" href="#symbol-的区别" aria-label="Permalink to &quot;Symbol 的区别&quot;">​</a></h4><p>在 JavaScript 中，Symbol 是将基础数据类型转换为唯一标识符，核心应用是可以将复杂引用数据类型转换为对象数据类型的键名。</p><p>在 Dart 中，Symbol 是不透明的动态字符串名称，用于反映库中的元数据。用 Symbol 可以获得或引用类的一个镜像，概念比较复杂，但其实和 JavaScript 的用法基本上是一致的。例如，下面代码首先 new 了一个 test 为 Map 数据类型，设置一个属性 #t（Symbol 类型），然后分别打印 test、test 的 #t、test 的 Symbol(&quot;t&quot;) 和 #t。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  test[#t] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;symbol test&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(test);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(test[#t]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(test[</span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;t&#39;</span><span style="color:#E1E4E8;">)]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(#t);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  test[#t] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;symbol test&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(test);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(test[#t]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(test[</span><span style="color:#005CC5;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;t&#39;</span><span style="color:#24292E;">)]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(#t);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行代码结果如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;t&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> symbol test}</span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> symbol test</span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> symbol test</span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;t&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;t&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> symbol test}</span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> symbol test</span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> symbol test</span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;t&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>其中，test 包含了一个有 Symbol 为对象的 Key，value 为 symbol test 字符串的对象。test 的 #t 与 Symbol(&quot;t&quot;) 打印结果一致，#t 则与 Symbol(&quot;t&#39;) 是同一形式。</p><p>在上面的代码示例中，两者的核心在使用上基本是一致的，只是在理解方面相对不一样。<strong>Symbol 在 Dart 中是一种反射概念，而在 JavaScript 中则是创建唯一标识的概念。</strong></p><h4 id="undefined-和-null" tabindex="-1">Undefined 和 Null <a class="header-anchor" href="#undefined-和-null" aria-label="Permalink to &quot;Undefined 和 Null&quot;">​</a></h4><p>由于 Dart 是静态脚本语言，因此在 Dart 中如果没有定义一个变量是无法通过编译的；而 JavaScript 是动态脚本语言，因此存在脚本在运行期间未定义的情况。所以这一点的不同决定了 Dart 在 Undefined 类型上与 JavaScript 的差异。</p><p>null 在 Dart 中是的确存在的，官网上是这样解释的，null 是弱类型 object 的子类型，并非基础数据类型。所有数据类型，如果被初始化后没有赋值的话都将会被赋值 null 类型。</p><p>下面的代码，首先定义了一个弱类型 number，其次定义了 int 类型的 num2，number 类型的 num1 以及 double 类型的 num3 ，最后我们打印出这些只定义了未被赋值的值。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> number;</span></span>
<span class="line"><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> num2;</span></span>
<span class="line"><span style="color:#79B8FF;">num</span><span style="color:#E1E4E8;"> num1;</span></span>
<span class="line"><span style="color:#79B8FF;">double</span><span style="color:#E1E4E8;"> num3;</span></span>
<span class="line"><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;number is var:$</span><span style="color:#79B8FF;">number</span><span style="color:#9ECBFF;">,num2 is int:$</span><span style="color:#79B8FF;">num2</span><span style="color:#9ECBFF;">,num2 is num:$</span><span style="color:#79B8FF;">num1</span><span style="color:#9ECBFF;">,num3 is double:$</span><span style="color:#79B8FF;">num3</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> number;</span></span>
<span class="line"><span style="color:#005CC5;">int</span><span style="color:#24292E;"> num2;</span></span>
<span class="line"><span style="color:#005CC5;">num</span><span style="color:#24292E;"> num1;</span></span>
<span class="line"><span style="color:#005CC5;">double</span><span style="color:#24292E;"> num3;</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;number is var:$</span><span style="color:#005CC5;">number</span><span style="color:#032F62;">,num2 is int:$</span><span style="color:#005CC5;">num2</span><span style="color:#032F62;">,num2 is num:$</span><span style="color:#005CC5;">num1</span><span style="color:#032F62;">,num3 is double:$</span><span style="color:#005CC5;">num3</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>可以看到运行结果如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> number </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var:</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,num2 </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,num2 </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">num</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,num3 </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">double</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var:</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,num2 </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,num2 </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">num</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,num3 </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">double</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">null</span></span></code></pre></div><p>从运行结果我们可以看到，代码中声明了变量，但未赋值的变量在运行时都会被赋值为 null，这就是 Dart 中 null 类型存在的目的。</p><h4 id="map-和-list" tabindex="-1">Map 和 List <a class="header-anchor" href="#map-和-list" aria-label="Permalink to &quot;Map 和 List&quot;">​</a></h4><p>Map 和 List 与 JavaScript 中的 Array 和 Map 基本一致，但在 JavaScript 中不是基本数据类型，都属于引用数据类型。因此也就是分类不同，但在用法和类型上基本没有太大差异。</p><h4 id="弱类型-var、object-和-dynamic" tabindex="-1">弱类型（var、object 和 dynamic） <a class="header-anchor" href="#弱类型-var、object-和-dynamic" aria-label="Permalink to &quot;弱类型（var、object 和 dynamic）&quot;">​</a></h4><p>相对 JavaScript 而言，Dart 也存在弱类型（可以使用 var、object 和 dynamic 来声明），不过在这方面为了避免弱类型导致的客户端（App）Crash 的异常，Dart 还是对弱类型加强了校验。</p><p>var 数据类型声明，第一次赋值时，将其数据类型绑定。下面代码使用 var 声明了一个弱类型 t，并赋值 String 类型 123，而接下来又对 t 进行其他类型的赋值。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span></code></pre></div><p>这样的代码在 Dart 编译前就会报错，因为 t 在一次 var 赋值时就已经被绑定为 String 类型了，再进行赋值 Number 类型时就会报错。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Assign</span><span style="color:#E1E4E8;"> value to </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> local variable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Assign</span><span style="color:#24292E;"> value to </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> local variable</span></span></code></pre></div><p>object 可以进行任何赋值，没有约束，这一点类似 JavaScript 中的 var 关键词赋值。在编译期，object 会对数据调用做一定的判断，并且报错。例如，声明时为 String 类型，但是在调用 length 时，编译期就会报错。如果数据来自接口层，则很容易导致运行时报错。因此这个要尽量减少使用，避免运行时报错导致客户端（App）Crash 的异常。</p><p>dynamic 也是动态的数据类型，但如果数据类型调用异常，则只会在运行时报错，这点是非常危险的，因此在使用 dynamic 时要非常慎重。</p><h3 id="基础运算符" tabindex="-1">基础运算符 <a class="header-anchor" href="#基础运算符" aria-label="Permalink to &quot;基础运算符&quot;">​</a></h3><p>两种语言的基础运算符基本都一致。由于 Dart 是强数据类型，因此在 Dart 中没有 &quot;=== &quot;的运算符。在 Dart 中有一些类型测试运算符，与 JavaScript 中的类型转换和 typeof 有点相似。</p><p>这里也介绍一些 Dart 中比较简洁的写法：</p><ul><li><p>?? 运算符，比如，t??&#39;test&#39; 是 t!= null ? t : &#39;test&#39; 的缩写；</p></li><li><p>级联操作，允许对同一对象或者同一函数进行一系列操作，例如下面代码的 testObj 对象中有三个方法 add()、delete() 和 show()，应用级联操作可以依次进行调用。</p></li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">testObj.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;t&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">..</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">..</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">testObj.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;t&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">..</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;d&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">..</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><p>从我的理解来说，两者区别不大。箭头函数、函数闭包、匿名函数、高阶函数、参数可选等基本上都一样。在 Dart 中由于是强类型，因此在声明函数的时候可以增加一个返回类型，这点在 TypeScript 中的用法是一致的，对于前端开发人员来说，没有太多的差异点。</p><h3 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h3><p>类的概念在各种语言上大部分都是一致的，但在用法上可能存在差异，这里着重介绍一下 Dart 比较特殊的一些用法。</p><h4 id="命名构造函数" tabindex="-1">命名构造函数 <a class="header-anchor" href="#命名构造函数" aria-label="Permalink to &quot;命名构造函数&quot;">​</a></h4><p>Dart 支持一个函数有多个构造函数，并且在实例化的时候可以选择不同的构造函数。</p><p>下面的代码声明了一个 Dog 类，类中有一个 color 变量属性和两个构造函数。red 构造函数设置 Dog 类的 color 属性为 red，black 构造函数设置 Dog 类的 color 属性为 black。最后在 main 函数中分别用两个构造函数创建两个实例，并分别打印实例的 color 属性。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Dog</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> color;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Dog</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">red</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Dog</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">black</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;black&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">&gt; args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Dog</span><span style="color:#E1E4E8;"> redDog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Dog</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">red</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(redDog.color);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Dog</span><span style="color:#E1E4E8;"> blackDog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Dog</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">black</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(blackDog.color);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> color;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">red</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">black</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;black&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">&gt; args) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;"> redDog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">red</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(redDog.color);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;"> blackDog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">black</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(blackDog.color);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行代码后输出了两种颜色，即 red 和 black。就代码而言，我们可以应用同一个类不同的构造函数实现类不同场景下的实例化。</p><h4 id="访问控制" tabindex="-1">访问控制 <a class="header-anchor" href="#访问控制" aria-label="Permalink to &quot;访问控制&quot;">​</a></h4><p>默认情况下都是 public，如果需要设置为私有属性，则在方法或者属性前使用 &quot;_&quot;。</p><h4 id="抽象类和泛型类" tabindex="-1">抽象类和泛型类 <a class="header-anchor" href="#抽象类和泛型类" aria-label="Permalink to &quot;抽象类和泛型类&quot;">​</a></h4><p>抽象类和其他语言的抽象类概念一样，这里在 JavaScript 中没有这种概念，因此这里稍微提及一下，主要是实现一个类被用于其他子类继承，抽象类是无法实例化的。</p><p>下面的代码使用关键词 abstract 声明了一个有攻击性的武器抽象类，包含一个攻击函数和一个伤害力获取函数，Gun 和 BowAndArrow 都是继承抽象类，并需要实现抽象类中的方法。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AggressiveArms</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">attack</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hurt</span><span style="color:#E1E4E8;">()；</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Gun</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AggressiveArms</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">attack</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;造成100点伤害&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hurt</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;可以造成100点伤害&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">BowAndArrow</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AggressiveArms</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">attack</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;造成20点伤害&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hurt</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;可以造成20点伤害&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AggressiveArms</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">attack</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hurt</span><span style="color:#24292E;">()；</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Gun</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AggressiveArms</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">attack</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;造成100点伤害&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hurt</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;可以造成100点伤害&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BowAndArrow</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AggressiveArms</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">attack</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;造成20点伤害&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hurt</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;可以造成20点伤害&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>泛型类，主要在不确定返回数据结构时使用，这点与 TypeScript 中的泛型概念一样。</p><p>在下面的代码中，我们不确定数组中存储的类型是 int 还是 string，又或者是 bool，这时候可以使用泛型 来表示。在使用泛型类的时候可以将设定为自己需要的类型，比如下面的 string 调用和 int 调用。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;"> _list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> value{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._list;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">&gt; args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  arr.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;aa&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  arr.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bb&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(arr.value);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;"> arr2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  arr2.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  arr2.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(arr2.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;"> _list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">T</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> value{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._list;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">&gt; args) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;aa&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bb&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(arr.value);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;"> arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  arr2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  arr2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(arr2.value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="库与调用" tabindex="-1">库与调用 <a class="header-anchor" href="#库与调用" aria-label="Permalink to &quot;库与调用&quot;">​</a></h3><h4 id="dart-库管理" tabindex="-1">Dart 库管理 <a class="header-anchor" href="#dart-库管理" aria-label="Permalink to &quot;Dart 库管理&quot;">​</a></h4><p>Dart 和 JavaScript 一样，有一个库管理资源（<a href="http://pub.dev" target="_blank" rel="noreferrer">pub.dev</a>）。你可以在这里搜索找到你想要的一些库，接下来只要在 Dart 的配置文件 pubspec.yaml 中增加该库即可。这点类似于在 JavaScript 的 package.json 中增加声明一样，同样也有 dependencies 和 dev_dependencies。</p><p>增加类似的数据配置，如下代码：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cupertino_icons</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">^0.1.2</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">dio</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">^3.0.4</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">image_test_utils</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">^1.0.0</span></span>
<span class="line"><span style="color:#85E89D;">dev_dependencies</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">flutter_test</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">sdk</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">flutter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cupertino_icons</span><span style="color:#24292E;">: </span><span style="color:#032F62;">^0.1.2</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">dio</span><span style="color:#24292E;">: </span><span style="color:#032F62;">^3.0.4</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">image_test_utils</span><span style="color:#24292E;">: </span><span style="color:#032F62;">^1.0.0</span></span>
<span class="line"><span style="color:#22863A;">dev_dependencies</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">flutter_test</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">sdk</span><span style="color:#24292E;">: </span><span style="color:#032F62;">flutter</span></span></code></pre></div><h4 id="开发-dart-库" tabindex="-1">开发 Dart 库 <a class="header-anchor" href="#开发-dart-库" aria-label="Permalink to &quot;开发 Dart 库&quot;">​</a></h4><p>Dart 也支持开发者自己开发一些库，并且发布到 pub.dev 上，这点基本上和 npm 管理一致，这里我只介绍 pub.dev 库的基本格式。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">dart_string_manip</span></span>
<span class="line"><span style="color:#9ECBFF;">├── example</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">  └── main.dart</span></span>
<span class="line"><span style="color:#9ECBFF;">├── lib</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">  ├── dart_string_manip.dart</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">  └── src</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">     ├── classes.dart</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">     └── functions.dart</span></span>
<span class="line"><span style="color:#9ECBFF;">├── .gitignore</span></span>
<span class="line"><span style="color:#9ECBFF;">├── .packages</span></span>
<span class="line"><span style="color:#9ECBFF;">├── LICENSE</span></span>
<span class="line"><span style="color:#9ECBFF;">├── README.md</span></span>
<span class="line"><span style="color:#9ECBFF;">├── pubspec.lock</span></span>
<span class="line"><span style="color:#9ECBFF;">└── pubspec.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">dart_string_manip</span></span>
<span class="line"><span style="color:#032F62;">├── example</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">  └── main.dart</span></span>
<span class="line"><span style="color:#032F62;">├── lib</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">  ├── dart_string_manip.dart</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">  └── src</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">     ├── classes.dart</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">     └── functions.dart</span></span>
<span class="line"><span style="color:#032F62;">├── .gitignore</span></span>
<span class="line"><span style="color:#032F62;">├── .packages</span></span>
<span class="line"><span style="color:#032F62;">├── LICENSE</span></span>
<span class="line"><span style="color:#032F62;">├── README.md</span></span>
<span class="line"><span style="color:#032F62;">├── pubspec.lock</span></span>
<span class="line"><span style="color:#032F62;">└── pubspec.yaml</span></span></code></pre></div><p>对于前端开发人员来说，这个结构和我们所看到的 npm 模块很相似，pubspec 和 package 很相似，核心是 lib 中的库名对应的库文件 .dart，该文件是一个 dart 类。类的概念上面已经介绍过了，将私有方法使用 &quot;_&quot; 保护，其他就可以被引用该库的模块调用，如果是自身库的一些实现逻辑，可以放在 src 中。</p><p>开发完成该库以后，如果需要发布到 pub.dev，则可以参照<a href="https://flutter.dev/docs/development/packages-and-plugins/developing-packages" target="_blank" rel="noreferrer">官网的说明</a>，按步骤进行即可。</p><h4 id="dart-调用库" tabindex="-1">Dart 调用库 <a class="header-anchor" href="#dart-调用库" aria-label="Permalink to &quot;Dart 调用库&quot;">​</a></h4><p>这里引入库的方式也与 ES6 的 import 语法很相似。先看看下面的一个例子，其目的是引入 pages 下的 homepage.dart 模块。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:startup_namer/pages/homepage.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:startup_namer/pages/homepage.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>在上面的例子中，import 为关键词，package 为协议，可以使用 http 的方式，不过最好使用本地 package 方式，避免性能受影响。接下来的 startup_namer 为库名或者说是该项目名，pages 为 lib 下的一个文件夹，homepage.dart 则为具体需要引入的库文件名。</p><p>当然这里也可以使用相对路径的方式，不过建议使用 package 的方式，以保持整个项目代码的一致性，因为对于第三方模块则必须使用 package 的方式。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时首先介绍了 Dart 基础数据类型、基础运算符、类以及库与调用。然后通过对比 JavaScript 的一些特殊差异性，来加深前端开发人员对 Dart 语言编程的理解。相信你通过本课时的学习，可以掌握 Dart 的编程，并且能够写一些 Dart 的第三方库。</p><p>下一课时，我将介绍 Dart 的事件循环机制，掌握了其核心运行机制原理，才能编写出更高效、更有质量的代码。</p><p>点击这里下载本课时源码，Flutter 专栏，源码地址：<a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">https://github.com/love-flutter/flutter-column</a></p>`,69);function C(h,g,b,m,v,D){const n=p("Image");return o(),e("div",null,[E,y,i,d,F,t(n,{alt:"image (4).png",src:"https://s0.lgstatic.com/i/image/M00/1C/5F/CgqCHl7gWVGAdOndAACK0gUBRW0309.png"}),a(),u])}const A=l(c,[["render",C]]);export{k as __pageData,A as default};
