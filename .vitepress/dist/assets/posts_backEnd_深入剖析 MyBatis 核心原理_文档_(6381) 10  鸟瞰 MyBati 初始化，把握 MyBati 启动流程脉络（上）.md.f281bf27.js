import{_ as o,j as e,o as t,g as r,k as l,h as s,Q as p,s as a}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"10鸟瞰MyBati初始化，把握MyBati启动流程脉络（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6381) 10  鸟瞰 MyBati 初始化，把握 MyBati 启动流程脉络（上）.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6381) 10  鸟瞰 MyBati 初始化，把握 MyBati 启动流程脉络（上）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6381) 10  鸟瞰 MyBati 初始化，把握 MyBati 启动流程脉络（上）.md"},E=p('<h1 id="_10鸟瞰mybati初始化-把握mybati启动流程脉络-上" tabindex="-1">10鸟瞰MyBati初始化，把握MyBati启动流程脉络（上） <a class="header-anchor" href="#_10鸟瞰mybati初始化-把握mybati启动流程脉络-上" aria-label="Permalink to &quot;10鸟瞰MyBati初始化，把握MyBati启动流程脉络（上）&quot;">​</a></h1><p>很多开源框架之所以能够流行起来，是因为它们解决了领域内的一些通用问题。但在实际使用这些开源框架的时候，我们都是要解决通用问题中的一个特例问题，所以这时我们就需要使用一种方式来控制开源框架的行为，这就是开源框架提供各种各样配置的核心原因之一。</p><p>现在控制开源框架行为主流的配置方式就是 XML 配置方式和注解方式。在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6373" target="_blank" rel="noreferrer">《02 | 订单系统持久层示例分析，20 分钟带你快速上手 MyBatis》</a>这一讲中我们介绍过，MyBatis 有两方面的 XML 配置，<strong>一个是 mybatis-config.xml 配置文件中的整体配置，另一个是 Mapper.xml 配置文件中的 SQL 语句</strong>。当然，MyBatis 中也有注解，前面的课程中也多少有涉及，其核心实现与 XML 配置基本类似，所以这一讲我们就重点分析 XML 配置的初始化过程，注解相关的内容就留给你自己分析了。</p><p>在初始化的过程中，MyBatis 会读取 mybatis-config.xml 这个全局配置文件以及所有的 Mapper 映射配置文件，同时还会加载这两个配置文件中指定的类，解析类中的相关注解，最终将解析得到的信息转换成配置对象。<strong>完成配置加载之后，MyBatis 就会根据得到的配置对象初始化各个模块</strong>。</p><p>MyBatis 在加载配置文件、创建配置对象的时候，会使用到经典设计模式中的<strong>构造者模式</strong>，所以下面我们就来先介绍一下构造者模式的知识点。</p><h3 id="构造者模式" tabindex="-1">构造者模式 <a class="header-anchor" href="#构造者模式" aria-label="Permalink to &quot;构造者模式&quot;">​</a></h3><p>构造者模式最核心的思想就是将创建复杂对象的过程与复杂对象本身进行拆分。通俗来讲，构造者模式是<strong>将复杂对象的创建过程分解成了多个简单步骤，在创建复杂对象的时候，只需要了解复杂对象的基本属性即可，而不需要关心复杂对象的内部构造过程</strong>。这样的话，使用方只需要关心这个复杂对象要什么数据，而不再关心内部细节。</p><p>构造者模式的类图如下所示：</p>',8),y=p('<p>构造者模式类图</p><p>从图中，我们可以看到构造者模式的四个核心组件。</p><ul><li><p>Product 接口：复杂对象的接口，定义了要创建的目标对象的行为。</p></li><li><p>ProductImpl 类：Product 接口的实现，它真正要创建的复杂对象，其中实现了我们需要的复杂业务逻辑。</p></li><li><p>Builder 接口：定义了构造 Product 对象的每一步行为。</p></li><li><p>BuilderImpl 类：Builder 接口的具体实现，其中具体实现了构造一个 Product 的每一个步骤，例如上图中的 setPart1()、setPart2() 等方法，都是用来构造 ProductImpl 对象的各个部分。在完成整个 Product 对象的构造之后，我们会通过 build() 方法返回这个构造好的 Product 对象。</p></li></ul><p>使用构造者模式一般有两个目的。第一个目的是<strong>将使用方与复杂对象的内部细节隔离，从而实现解耦的效果</strong> 。使用方提供的所有信息，都是由 Builder 这个&quot;中间商&quot;接收的，然后由 Builder 消化这些信息并构造出一个完整可用的 Product 对象。第二个目的是<strong>简化复杂对象的构造过程</strong>。在很多场景中，复杂对象可能有很多默认属性，这时我们就可以将这些默认属性封装到 Builder 中，这样就可以简化创建复杂对象所需的信息。</p><p>通过构建者模式的类图我们还可以看出，<strong>每个 BuilderImpl 实现都是能够独立创建出对应的 ProductImpl 对象</strong>，那么在程序需要扩展的时候，我们只需要添加新的 BuilderImpl 和 ProductImpl，就能实现功能的扩展，这完全符合&quot;开放-封闭原则&quot;。</p><h3 id="mybatis-config-xml-解析全流程" tabindex="-1">mybatis-config.xml 解析全流程 <a class="header-anchor" href="#mybatis-config-xml-解析全流程" aria-label="Permalink to &quot;mybatis-config.xml 解析全流程&quot;">​</a></h3><p>介绍完构造者模式相关的知识点之后，下面我们正式开始介绍 MyBatis 的初始化过程。</p><p><strong>MyBatis 初始化的第一个步骤就是加载和解析 mybatis-config.xml 这个全局配置文件</strong>，入口是 XMLConfigBuilder 这个 Builder 对象，它由 SqlSessionFactoryBuilder.build() 方法创建。XMLConfigBuilder 会解析 mybatis-config.xml 配置文件得到对应的 Configuration 全局配置对象，然后 SqlSessionFactoryBuilder 会根据得到的 Configuration 全局配置对象创建一个 DefaultSqlSessionFactory 对象返回给上层使用。</p><p>这里<strong>创建的 XMLConfigBuilder 对象的核心功能就是解析 mybatis-config.xml 配置文件</strong>。XMLConfigBuilder 有一部分能力继承自 BaseBuilder 抽象类，具体继承关系如下图所示：</p>',9),i=p(`<p>BaseBuilder 继承关系图</p><p>BaseBuilder 抽象类扮演了构造者模式中 Builder 接口的角色，下面我们先来看 BaseBuilder 中各个字段的定义。</p><ul><li><p>configuration（Configuration 类型）：MyBatis 的初始化过程就是围绕 Configuration 对象展开的，我们可以认为 Configuration 是一个单例对象，MyBatis 初始化解析到的全部配置信息都会记录到 Configuration 对象中。</p></li><li><p>typeAliasRegistry（TypeAliasRegistry 类型）：别名注册中心。比如，<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6373" target="_blank" rel="noreferrer">02 讲的订单系统示例</a>中，我们在 mybatis-config.xml 配置文件中，使用 标签为很多类定义了别名。</p></li><li><p>typeHandlerRegistry（TypeHandlerRegistry 类型）：TypeHandler 注册中心。除了定义别名之外，我们在 mybatis-config.xml 配置文件中，还可以使用 <code>&lt;typeHandlers&gt;</code> 标签添加自定义 TypeHandler 实现，实现数据库类型与 Java 类型的自定义转换，这些自定义的 TypeHandler 都会记录在这个 TypeHandlerRegistry 对象中。</p></li></ul><p>除了关联 Configuration 对象之外，BaseBuilder 还提供了另外两个基本能力：</p><ul><li><p><strong>解析别名</strong>，核心逻辑是在 resolveAlias() 方法中实现的，主要依赖于 TypeAliasRegistry 对象；</p></li><li><p><strong>解析 TypeHandler</strong>，核心逻辑是在 resolveTypeHandler() 方法中实现的，主要依赖于 TypeHandlerRegistry 对象。</p></li></ul><p>了解了 BaseBuilder 提供的基础能力之后，我们回到 XMLConfigBuilder 这个 Builder 实现类，看看它是如何解析 mybatis-config.xml 配置文件的。</p><p>首先我们来了解一下 XMLConfigBuilder 的核心字段。</p><ul><li><p>parsed（boolean 类型）：状态标识字段，记录当前 XMLConfigBuilder 对象是否已经成功解析完 mybatis-config.xml 配置文件。</p></li><li><p>parser（XPathParser 类型）：XPathParser 对象是一个 XML 解析器，这里的 parser 对象就是用来解析 mybatis-config.xml 配置文件的。</p></li><li><p>environment（String 类型）： 标签定义的环境名称。</p></li><li><p>localReflectorFactory（ReflectorFactory 类型）：ReflectorFactory 接口的核心功能是实现对 Reflector 对象的创建和缓存。</p></li></ul><p>在 SqlSessionFactoryBuilder.build() 方法中也可以看到，XMLConfigBuilder.parse() 方法触发了 mybatis-config.xml 配置文件的解析，<strong>其中的 parseConfiguration() 方法定义了解析 mybatis-config.xml 配置文件的完整流程</strong>，核心步骤如下：</p><ul><li><p>解析 <code>&lt;properties&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;settings&gt;</code> 标签；</p></li><li><p>处理日志相关组件；</p></li><li><p>解析 <code>&lt;typeAliases&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;plugins&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;objectFactory&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;objectWrapperFactory&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;reflectorFactory&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;environments&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;databaseIdProvider&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;typeHandlers&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;mappers&gt;</code> 标签。</p></li></ul><p>从 parseConfiguration()方法中，我们可以清晰地看到 XMLConfigBuilder 对 mybatis-config.xml 配置文件中各类标签的解析方法，下面我们就逐一介绍这些方法的核心实现。</p><h4 id="_1-处理-properties-标签" tabindex="-1">1. 处理<code>&lt;properties&gt;</code>标签 <a class="header-anchor" href="#_1-处理-properties-标签" aria-label="Permalink to &quot;1. 处理\`&lt;properties&gt;\`标签&quot;">​</a></h4><p>我们可以通过 <code>&lt;properties&gt;</code> 标签定义 KV 信息供 MyBatis 使用，propertiesElement() 方法的核心逻辑就是解析 mybatis-config.xml 配置文件中的 <code>&lt;properties&gt;</code> 标签。</p><p>从 <code>&lt;properties&gt;</code> 标签中解析出来的 KV 信息会被记录到一个 Properties 对象（也就是 Configuration 全局配置对象的 variables 字段），在后续解析其他标签的时候，MyBatis 会使用这个 Properties 对象中记录的 KV 信息替换匹配的占位符。</p><h4 id="_2-处理-settings-标签" tabindex="-1">2. 处理<code>&lt;settings&gt;</code>标签 <a class="header-anchor" href="#_2-处理-settings-标签" aria-label="Permalink to &quot;2. 处理\`&lt;settings&gt;\`标签&quot;">​</a></h4><p>MyBatis 中有很多全局性的配置，例如，是否使用二级缓存、是否开启懒加载功能等，这些都是通过 mybatis-config.xml 配置文件中的 <code>&lt;settings&gt;</code> 标签进行配置的。</p><p>XMLConfigBuilder.settingsAsProperties() 方法的核心逻辑就是解析 <code>&lt;settings&gt;</code> 标签，并将解析得到的配置信息记录到 Configuration 这个全局配置对象的同名属性中，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Properties </span><span style="color:#B392F0;">settingsAsProperties</span><span style="color:#E1E4E8;">(XNode context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理&lt;settings&gt;标签的所有子标签，也就是&lt;setting&gt;标签，将其name属性和value属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 整理到Properties对象中保存</span></span>
<span class="line"><span style="color:#E1E4E8;">    Properties props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getChildrenAsProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建Configuration对应的MetaClass对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    MetaClass metaConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MetaClass.</span><span style="color:#B392F0;">forClass</span><span style="color:#E1E4E8;">(Configuration.class, localReflectorFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测Configuration对象中是否包含每个配置项的setter方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Object key </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> props.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">metaConfig.</span><span style="color:#B392F0;">hasSetter</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(key))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuilderException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The setting &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; is not known.  Make sure you spelled it correctly (case sensitive).&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> props;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Properties </span><span style="color:#6F42C1;">settingsAsProperties</span><span style="color:#24292E;">(XNode context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理&lt;settings&gt;标签的所有子标签，也就是&lt;setting&gt;标签，将其name属性和value属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 整理到Properties对象中保存</span></span>
<span class="line"><span style="color:#24292E;">    Properties props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getChildrenAsProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建Configuration对应的MetaClass对象</span></span>
<span class="line"><span style="color:#24292E;">    MetaClass metaConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MetaClass.</span><span style="color:#6F42C1;">forClass</span><span style="color:#24292E;">(Configuration.class, localReflectorFactory);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测Configuration对象中是否包含每个配置项的setter方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Object key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> props.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">metaConfig.</span><span style="color:#6F42C1;">hasSetter</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(key))) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuilderException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The setting &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is not known.  Make sure you spelled it correctly (case sensitive).&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> props;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-处理-typealiases-和-typehandlers-标签" tabindex="-1">3. 处理<code>&lt;typeAliases&gt;</code>和<code>&lt;typeHandlers&gt;</code>标签 <a class="header-anchor" href="#_3-处理-typealiases-和-typehandlers-标签" aria-label="Permalink to &quot;3. 处理\`&lt;typeAliases&gt;\`和\`&lt;typeHandlers&gt;\`标签&quot;">​</a></h4><p>XMLConfigBuilder 中提供了 typeAliasesElement() 方法和 typeHandlerElement() 方法，分别用来负责处理 <code>&lt;typeAliases&gt;</code> 标签和 <code>&lt;typeHandlers&gt;</code> 标签，解析得到的别名信息和 TypeHandler 信息就会分别记录到 TypeAliasRegistry 和 TypeHandlerRegistry（前面介绍 BaseHandler 的时候，我们已经简单介绍过这两者了）。</p><p>下面我们以 typeHandlerElement() 方法为例来分析一下这个过程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">typeHandlerElement</span><span style="color:#E1E4E8;">(XNode parent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (XNode child </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> parent.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 处理全部&lt;typeHandler&gt;子标签</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;package&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(child.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果指定了package属性，则扫描指定包中所有的类，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 并解析@MappedTypes注解，完成TypeHandler的注册</span></span>
<span class="line"><span style="color:#E1E4E8;">                String typeHandlerPackage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                typeHandlerRegistry.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(typeHandlerPackage);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果没有指定package属性，则尝试获取javaType、jdbcType、handler三个属性</span></span>
<span class="line"><span style="color:#E1E4E8;">                String javaTypeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;javaType&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                String jdbcTypeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jdbcType&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                String handlerTypeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;handler&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 根据属性确定TypeHandler类型以及它能够处理的数据库类型和Java类型</span></span>
<span class="line"><span style="color:#E1E4E8;">                Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; javaTypeClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveClass</span><span style="color:#E1E4E8;">(javaTypeName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                JdbcType jdbcType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveJdbcType</span><span style="color:#E1E4E8;">(jdbcTypeName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; typeHandlerClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveClass</span><span style="color:#E1E4E8;">(handlerTypeName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 调用TypeHandlerRegistry.register()方法注册TypeHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (javaTypeClass </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (jdbcType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        typeHandlerRegistry.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(javaTypeClass, typeHandlerClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        typeHandlerRegistry.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(javaTypeClass, jdbcType, typeHandlerClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    typeHandlerRegistry.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(typeHandlerClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">typeHandlerElement</span><span style="color:#24292E;">(XNode parent) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (XNode child </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> parent.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 处理全部&lt;typeHandler&gt;子标签</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;package&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(child.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果指定了package属性，则扫描指定包中所有的类，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 并解析@MappedTypes注解，完成TypeHandler的注册</span></span>
<span class="line"><span style="color:#24292E;">                String typeHandlerPackage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                typeHandlerRegistry.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(typeHandlerPackage);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果没有指定package属性，则尝试获取javaType、jdbcType、handler三个属性</span></span>
<span class="line"><span style="color:#24292E;">                String javaTypeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;javaType&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                String jdbcTypeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jdbcType&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                String handlerTypeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;handler&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 根据属性确定TypeHandler类型以及它能够处理的数据库类型和Java类型</span></span>
<span class="line"><span style="color:#24292E;">                Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; javaTypeClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveClass</span><span style="color:#24292E;">(javaTypeName);</span></span>
<span class="line"><span style="color:#24292E;">                JdbcType jdbcType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveJdbcType</span><span style="color:#24292E;">(jdbcTypeName);</span></span>
<span class="line"><span style="color:#24292E;">                Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; typeHandlerClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveClass</span><span style="color:#24292E;">(handlerTypeName);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 调用TypeHandlerRegistry.register()方法注册TypeHandler</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (javaTypeClass </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (jdbcType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        typeHandlerRegistry.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(javaTypeClass, typeHandlerClass);</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        typeHandlerRegistry.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(javaTypeClass, jdbcType, typeHandlerClass);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    typeHandlerRegistry.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(typeHandlerClass);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_4-处理-plugins-标签" tabindex="-1">4. 处理<code>&lt;plugins&gt;</code>标签 <a class="header-anchor" href="#_4-处理-plugins-标签" aria-label="Permalink to &quot;4. 处理\`&lt;plugins&gt;\`标签&quot;">​</a></h4><p>我们知道 MyBatis 是一个非常易于扩展的持久层框架，而<strong>插件就是 MyBatis 提供的一种重要扩展机制</strong>。</p><p>我们可以自定义一个实现了 Interceptor 接口的插件来扩展 MyBatis 的行为，或是拦截 MyBatis 的一些默认行为。插件的工作机制我们会在后面的课时中详细分析，这里我们重点来看 MyBatis 初始化过程中插件配置的加载，也就是 XMLConfigBuilder 中的 pluginElement()方法，该方法的核心就是解析 <code>&lt;plugins&gt;</code> 标签中配置的自定义插件，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pluginElement</span><span style="color:#E1E4E8;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 遍历全部的&lt;plugin&gt;子标签</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (XNode child </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> parent.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 获取每个&lt;plugin&gt;标签中的interceptor属性</span></span>
<span class="line"><span style="color:#E1E4E8;">            String interceptor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;interceptor&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 获取&lt;plugin&gt;标签下的其他配置信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getChildrenAsProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 初始化interceptor属性指定的自定义插件</span></span>
<span class="line"><span style="color:#E1E4E8;">            Interceptor interceptorInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Interceptor) </span><span style="color:#B392F0;">resolveClass</span><span style="color:#E1E4E8;">(interceptor).</span><span style="color:#B392F0;">getDeclaredConstructor</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 初始化插件的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">            interceptorInstance.</span><span style="color:#B392F0;">setProperties</span><span style="color:#E1E4E8;">(properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将Interceptor对象添加到Configuration的插件链中保存，等待后续使用</span></span>
<span class="line"><span style="color:#E1E4E8;">            configuration.</span><span style="color:#B392F0;">addInterceptor</span><span style="color:#E1E4E8;">(interceptorInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pluginElement</span><span style="color:#24292E;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 遍历全部的&lt;plugin&gt;子标签</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (XNode child </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> parent.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取每个&lt;plugin&gt;标签中的interceptor属性</span></span>
<span class="line"><span style="color:#24292E;">            String interceptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;interceptor&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取&lt;plugin&gt;标签下的其他配置信息</span></span>
<span class="line"><span style="color:#24292E;">            Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getChildrenAsProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 初始化interceptor属性指定的自定义插件</span></span>
<span class="line"><span style="color:#24292E;">            Interceptor interceptorInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Interceptor) </span><span style="color:#6F42C1;">resolveClass</span><span style="color:#24292E;">(interceptor).</span><span style="color:#6F42C1;">getDeclaredConstructor</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 初始化插件的配置</span></span>
<span class="line"><span style="color:#24292E;">            interceptorInstance.</span><span style="color:#6F42C1;">setProperties</span><span style="color:#24292E;">(properties);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将Interceptor对象添加到Configuration的插件链中保存，等待后续使用</span></span>
<span class="line"><span style="color:#24292E;">            configuration.</span><span style="color:#6F42C1;">addInterceptor</span><span style="color:#24292E;">(interceptorInstance);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_5-处理-objectfactory-标签" tabindex="-1">5. 处理<code>&lt;objectFactory&gt;</code>标签 <a class="header-anchor" href="#_5-处理-objectfactory-标签" aria-label="Permalink to &quot;5. 处理\`&lt;objectFactory&gt;\`标签&quot;">​</a></h4><p>在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6375" target="_blank" rel="noreferrer">《04 | MyBatis 反射工具箱：带你领略不一样的反射设计思路》</a>中我们提到过，MyBatis 支持自定义 ObjectFactory 实现类和 ObjectWrapperFactory。XMLConfigBuilder 中的 objectFactoryElement() 方法就实现了加载自定义 ObjectFactory 实现类的功能，其核心逻辑就是解析 <code>&lt;objectFactory&gt;</code> 标签中配置的自定义 ObjectFactory 实现类，并完成相关的实例化操作，相关的代码实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">objectFactoryElement</span><span style="color:#E1E4E8;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取&lt;objectFactory&gt;标签的type属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    String type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据type属性值，初始化自定义的ObjectFactory实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    ObjectFactory factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ObjectFactory) </span><span style="color:#B392F0;">resolveClass</span><span style="color:#E1E4E8;">(type).</span><span style="color:#B392F0;">getDeclaredConstructor</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化ObjectFactory对象的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getChildrenAsProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    factory.</span><span style="color:#B392F0;">setProperties</span><span style="color:#E1E4E8;">(properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将ObjectFactory对象记录到Configuration这个全局配置对象中</span></span>
<span class="line"><span style="color:#E1E4E8;">    configuration.</span><span style="color:#B392F0;">setObjectFactory</span><span style="color:#E1E4E8;">(factory);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">objectFactoryElement</span><span style="color:#24292E;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取&lt;objectFactory&gt;标签的type属性</span></span>
<span class="line"><span style="color:#24292E;">    String type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据type属性值，初始化自定义的ObjectFactory实现</span></span>
<span class="line"><span style="color:#24292E;">    ObjectFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ObjectFactory) </span><span style="color:#6F42C1;">resolveClass</span><span style="color:#24292E;">(type).</span><span style="color:#6F42C1;">getDeclaredConstructor</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化ObjectFactory对象的配置</span></span>
<span class="line"><span style="color:#24292E;">    Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getChildrenAsProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    factory.</span><span style="color:#6F42C1;">setProperties</span><span style="color:#24292E;">(properties);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将ObjectFactory对象记录到Configuration这个全局配置对象中</span></span>
<span class="line"><span style="color:#24292E;">    configuration.</span><span style="color:#6F42C1;">setObjectFactory</span><span style="color:#24292E;">(factory);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>除了 <code>&lt;objectFactory&gt;</code> 标签之外，我们还可以通过 <code>&lt;objectWrapperFactory&gt;</code> 标签和 <code>&lt;reflectorFactory&gt;</code> 标签配置自定义的 ObjectWrapperFactory 实现类和 ReflectorFactory 实现类，这两个标签的解析分别对应 objectWrapperFactoryElement() 方法和 reflectorFactoryElement() 方法，两者实现与 objectFactoryElement() 方法实现类似，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/mybatis" target="_blank" rel="noreferrer">源码</a>进行学习。</p><h4 id="_6-处理-environments-标签" tabindex="-1">6. 处理<code>&lt;environments&gt;</code>标签 <a class="header-anchor" href="#_6-处理-environments-标签" aria-label="Permalink to &quot;6. 处理\`&lt;environments&gt;\`标签&quot;">​</a></h4><p>在 MyBatis 中，我们可以通过 <code>&lt;environment&gt;</code> 标签为不同的环境添加不同的配置，例如，线上环境、预上线环境、测试环境等，<strong>每个 <code>&lt;environment&gt;</code> 标签只会对应一种特定的环境配置</strong>。</p><p>environmentsElement() 方法中实现了 XMLConfigBuilder 处理 <code>&lt;environments&gt;</code> 标签的核心逻辑，它会根据 XMLConfigBuilder.environment 字段值，拿到正确的 <code>&lt;environment&gt;</code> 标签，然后解析这个环境中使用的 TransactionFactory、DataSource 等核心对象，也就知道了 MyBatis 要请求哪个数据库、如何管理事务等信息。</p><p>下面是 environmentsElement() 方法的核心逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">environmentsElement</span><span style="color:#E1E4E8;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (environment </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 未指定使用的环境id，默认获取default值 </span></span>
<span class="line"><span style="color:#E1E4E8;">            environment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取&lt;environment&gt;标签下的所有配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (XNode child </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 获取环境id</span></span>
<span class="line"><span style="color:#E1E4E8;">            String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isSpecifiedEnvironment</span><span style="color:#E1E4E8;">(id)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 获取&lt;transactionManager&gt;、&lt;dataSource&gt;等标签，并进行解析，其中会根据配置信息初始化相应的TransactionFactory对象和DataSource对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                TransactionFactory txFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transactionManagerElement</span><span style="color:#E1E4E8;">(child.</span><span style="color:#B392F0;">evalNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;transactionManager&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                DataSourceFactory dsFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dataSourceElement</span><span style="color:#E1E4E8;">(child.</span><span style="color:#B392F0;">evalNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                DataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dsFactory.</span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 创建Environment对象，并关联创建好的TransactionFactory和DataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">                Environment.Builder environmentBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Environment.</span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">(id)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">transactionFactory</span><span style="color:#E1E4E8;">(txFactory)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将Environment对象记录到Configuration中，等待后续使用</span></span>
<span class="line"><span style="color:#E1E4E8;">                configuration.</span><span style="color:#B392F0;">setEnvironment</span><span style="color:#E1E4E8;">(environmentBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">environmentsElement</span><span style="color:#24292E;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (environment </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 未指定使用的环境id，默认获取default值 </span></span>
<span class="line"><span style="color:#24292E;">            environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取&lt;environment&gt;标签下的所有配置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (XNode child </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取环境id</span></span>
<span class="line"><span style="color:#24292E;">            String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isSpecifiedEnvironment</span><span style="color:#24292E;">(id)) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 获取&lt;transactionManager&gt;、&lt;dataSource&gt;等标签，并进行解析，其中会根据配置信息初始化相应的TransactionFactory对象和DataSource对象</span></span>
<span class="line"><span style="color:#24292E;">                TransactionFactory txFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transactionManagerElement</span><span style="color:#24292E;">(child.</span><span style="color:#6F42C1;">evalNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;transactionManager&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                DataSourceFactory dsFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dataSourceElement</span><span style="color:#24292E;">(child.</span><span style="color:#6F42C1;">evalNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dataSource&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                DataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dsFactory.</span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 创建Environment对象，并关联创建好的TransactionFactory和DataSource</span></span>
<span class="line"><span style="color:#24292E;">                Environment.Builder environmentBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Environment.</span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">(id)</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">transactionFactory</span><span style="color:#24292E;">(txFactory)</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将Environment对象记录到Configuration中，等待后续使用</span></span>
<span class="line"><span style="color:#24292E;">                configuration.</span><span style="color:#6F42C1;">setEnvironment</span><span style="color:#24292E;">(environmentBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_7-处理-databaseidprovider-标签" tabindex="-1">7. 处理<code>&lt;databaseIdProvider&gt;</code>标签 <a class="header-anchor" href="#_7-处理-databaseidprovider-标签" aria-label="Permalink to &quot;7. 处理\`&lt;databaseIdProvider&gt;\`标签&quot;">​</a></h4><p>通过前面课时的介绍可知，在 MyBatis 中编写的都是原生的 SQL 语句，而很多数据库产品都会有一些 SQL 方言，这些方言与标准 SQL 不兼容。</p><p>在 mybatis-config.xml 配置文件中，我们可以通过 <code>&lt;databaseIdProvider&gt;</code> 标签定义需要支持的全部数据库的 DatabaseId，在后续编写 Mapper 映射配置文件的时候，就可以为同一个业务场景定义不同的 SQL 语句（带有不同的 DataSourceId），来支持不同的数据库，这里就是靠 DatabaseId 来确定哪个 SQL 语句支持哪个数据库的。</p><p>databaseIdProviderElement() 方法是 XMLConfigBuilder 处理 <code>&lt;databaseIdProvider&gt;</code> 标签的地方，其中的<strong>核心就是获取 DatabaseId 值</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">databaseIdProviderElement</span><span style="color:#E1E4E8;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    DatabaseIdProvider databaseIdProvider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取type属性值</span></span>
<span class="line"><span style="color:#E1E4E8;">        String type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;VENDOR&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(type)) { </span><span style="color:#6A737D;">// 兼容操作</span></span>
<span class="line"><span style="color:#E1E4E8;">            type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;DB_VENDOR&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 初始化DatabaseIdProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">        Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getChildrenAsProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        databaseIdProvider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (DatabaseIdProvider) </span><span style="color:#B392F0;">resolveClass</span><span style="color:#E1E4E8;">(type).</span><span style="color:#B392F0;">getDeclaredConstructor</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        databaseIdProvider.</span><span style="color:#B392F0;">setProperties</span><span style="color:#E1E4E8;">(properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Environment environment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (environment </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> databaseIdProvider </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过DataSource获取DatabaseId，并保存到Configuration中，等待后续使用</span></span>
<span class="line"><span style="color:#E1E4E8;">        String databaseId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> databaseIdProvider.</span><span style="color:#B392F0;">getDatabaseId</span><span style="color:#E1E4E8;">(environment.</span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        configuration.</span><span style="color:#B392F0;">setDatabaseId</span><span style="color:#E1E4E8;">(databaseId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">databaseIdProviderElement</span><span style="color:#24292E;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    DatabaseIdProvider databaseIdProvider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取type属性值</span></span>
<span class="line"><span style="color:#24292E;">        String type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;VENDOR&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(type)) { </span><span style="color:#6A737D;">// 兼容操作</span></span>
<span class="line"><span style="color:#24292E;">            type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;DB_VENDOR&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化DatabaseIdProvider</span></span>
<span class="line"><span style="color:#24292E;">        Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getChildrenAsProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        databaseIdProvider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (DatabaseIdProvider) </span><span style="color:#6F42C1;">resolveClass</span><span style="color:#24292E;">(type).</span><span style="color:#6F42C1;">getDeclaredConstructor</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        databaseIdProvider.</span><span style="color:#6F42C1;">setProperties</span><span style="color:#24292E;">(properties);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Environment environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (environment </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> databaseIdProvider </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过DataSource获取DatabaseId，并保存到Configuration中，等待后续使用</span></span>
<span class="line"><span style="color:#24292E;">        String databaseId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> databaseIdProvider.</span><span style="color:#6F42C1;">getDatabaseId</span><span style="color:#24292E;">(environment.</span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        configuration.</span><span style="color:#6F42C1;">setDatabaseId</span><span style="color:#24292E;">(databaseId);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，解析<code>&lt;databaseIdProvider&gt;</code> 标签之后会得到一个 DatabaseIdProvider 对象，其核心方法是 getDatabaseId() 方法，主要是根据前面解析得到的 DataSource 对象来生成 DatabaseId。DatabaseIdProvider 的继承关系如下图所示：</p>`,41),d=p(`<p>DatabaseIdProvider 继承关系图</p><p>从继承关系图中可以看出，DefaultDatabaseIdProvider 是个空实现，而且已被标记为过时了，所以这里我们就重点来看 VendorDatabaseIdProvider 实现。</p><p>在 getDatabaseId() 方法中，VendorDatabaseIdProvider 首先会从 DataSource 中拿到数据库的名称，然后根据 <code>&lt;databaseIdProvider&gt; </code> 标签配置和 DataSource 返回的数据库名称，确定最终的 DatabaseId 标识，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getDatabaseId</span><span style="color:#E1E4E8;">(DataSource dataSource) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略边界检查和异常处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDatabaseName</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getDatabaseName</span><span style="color:#E1E4E8;">(DataSource dataSource) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从数据库连接中，获取数据库名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    String productName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDatabaseProductName</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据&lt;databaseIdProvider&gt;标签配置，查找自定义数据库名称</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; property </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (productName.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">((String) property.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (String) property.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 返回配置的value</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> productName;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDatabaseId</span><span style="color:#24292E;">(DataSource dataSource) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略边界检查和异常处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDatabaseName</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDatabaseName</span><span style="color:#24292E;">(DataSource dataSource) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从数据库连接中，获取数据库名称</span></span>
<span class="line"><span style="color:#24292E;">    String productName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDatabaseProductName</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据&lt;databaseIdProvider&gt;标签配置，查找自定义数据库名称</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; property </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (productName.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">((String) property.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (String) property.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 返回配置的value</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> productName;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_8-处理-mappers-标签" tabindex="-1">8. 处理<code>&lt;mappers&gt;</code>标签 <a class="header-anchor" href="#_8-处理-mappers-标签" aria-label="Permalink to &quot;8. 处理\`&lt;mappers&gt;\`标签&quot;">​</a></h4><p>除了 mybatis-config.xml 这个全局配置文件之外，MyBatis 初始化的时候还会加载 <code>&lt;mappers&gt;</code> 标签下定义的 Mapper 映射文件。<code>&lt;mappers&gt;</code> 标签中会指定 Mapper.xml 映射文件的位置，通过解析 <code>&lt;mappers&gt; </code> 标签，MyBatis 就能够知道去哪里加载这些 Mapper.xml 文件了。</p><p>mapperElement() 方法就是 XMLConfigBuilder 处理 <code>&lt;mappers&gt;</code> 标签的具体实现，其中会初始化 XMLMapperBuilder 对象来加载各个 Mapper.xml 映射文件。同时，还会扫描 Mapper 映射文件相应的 Mapper 接口，处理其中的注解并将 Mapper 接口注册到 MapperRegistry 中。</p><p>mapperElement() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapperElement</span><span style="color:#E1E4E8;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (XNode child </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> parent.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 遍历每个子标签</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;package&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(child.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果指定了&lt;package&gt;子标签，则会扫描指定包内全部Java类型</span></span>
<span class="line"><span style="color:#E1E4E8;">                String mapperPackage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                configuration.</span><span style="color:#B392F0;">addMappers</span><span style="color:#E1E4E8;">(mapperPackage);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 解析&lt;mapper&gt;子标签，这里会获取resource、url、class三个属性，这三个属性互斥</span></span>
<span class="line"><span style="color:#E1E4E8;">                String resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resource&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                String mapperClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果&lt;mapper&gt;子标签指定了resource或是url属性，都会创建XMLMapperBuilder对象，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 然后使用这个XMLMapperBuilder实例解析指定的Mapper.xml配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resource </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mapperClass </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ErrorContext.</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    InputStream inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getResourceAsStream</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    XMLMapperBuilder mapperParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLMapperBuilder</span><span style="color:#E1E4E8;">(inputStream, configuration, resource, configuration.</span><span style="color:#B392F0;">getSqlFragments</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    mapperParser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resource </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mapperClass </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ErrorContext.</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    InputStream inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getUrlAsStream</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    XMLMapperBuilder mapperParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLMapperBuilder</span><span style="color:#E1E4E8;">(inputStream, configuration, url, configuration.</span><span style="color:#B392F0;">getSqlFragments</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    mapperParser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resource </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mapperClass </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 如果&lt;mapper&gt;子标签指定了class属性，则向MapperRegistry注册class属性指定的Mapper接口</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; mapperInterface </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">classForName</span><span style="color:#E1E4E8;">(mapperClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    configuration.</span><span style="color:#B392F0;">addMapper</span><span style="color:#E1E4E8;">(mapperInterface);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuilderException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapperElement</span><span style="color:#24292E;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (XNode child </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> parent.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 遍历每个子标签</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;package&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(child.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果指定了&lt;package&gt;子标签，则会扫描指定包内全部Java类型</span></span>
<span class="line"><span style="color:#24292E;">                String mapperPackage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                configuration.</span><span style="color:#6F42C1;">addMappers</span><span style="color:#24292E;">(mapperPackage);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 解析&lt;mapper&gt;子标签，这里会获取resource、url、class三个属性，这三个属性互斥</span></span>
<span class="line"><span style="color:#24292E;">                String resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resource&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                String mapperClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果&lt;mapper&gt;子标签指定了resource或是url属性，都会创建XMLMapperBuilder对象，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 然后使用这个XMLMapperBuilder实例解析指定的Mapper.xml配置文件</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resource </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mapperClass </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    ErrorContext.</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">                    InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">                    XMLMapperBuilder mapperParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLMapperBuilder</span><span style="color:#24292E;">(inputStream, configuration, resource, configuration.</span><span style="color:#6F42C1;">getSqlFragments</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    mapperParser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resource </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mapperClass </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    ErrorContext.</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">                    InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getUrlAsStream</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">                    XMLMapperBuilder mapperParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLMapperBuilder</span><span style="color:#24292E;">(inputStream, configuration, url, configuration.</span><span style="color:#6F42C1;">getSqlFragments</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    mapperParser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resource </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mapperClass </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 如果&lt;mapper&gt;子标签指定了class属性，则向MapperRegistry注册class属性指定的Mapper接口</span></span>
<span class="line"><span style="color:#24292E;">                    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; mapperInterface </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">classForName</span><span style="color:#24292E;">(mapperClass);</span></span>
<span class="line"><span style="color:#24292E;">                    configuration.</span><span style="color:#6F42C1;">addMapper</span><span style="color:#24292E;">(mapperInterface);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuilderException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们重点介绍了 MyBatis 初始化过程中对 mybatis-config.xml 全局配置文件的解析，深入分析了 mybatis-config.xml 配置文件中所有标签的解析流程，让你进一步了解这些配置加载的原理。同时，我们还介绍了构造者模式这一经典设计模式，它是整个 MyBatis 初始化逻辑的基础思想。</p><p>关于这一讲的内容，若你有什么问题，期待在留言区与我分享和交流。</p><p>在下一讲，我们将继续介绍 MyBatis 初始化流程的内容，重点讲解 Mapper.xml 配置文件的加载以及 SQL 语句的相关处理，记得按时来听课。</p><hr><p>[</p>`,15),u=a("p",null,[s("]("),a("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/Mka"),s(")")],-1),g=a("p",null,[a("strong",null,"《Java 工程师高薪训练营》")],-1),F=a("p",null,[s("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),a("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),s("！")],-1);function m(C,A,D,B,b,h){const n=e("Image");return t(),r("div",null,[E,l(n,{alt:"2021223-18655.png",src:"https://s0.lgstatic.com/i/image6/M01/08/8C/Cgp9HWA01CyAP_FuAAGR6B2VRBg565.png"}),s(),y,l(n,{alt:"2021223-1877.png",src:"https://s0.lgstatic.com/i/image6/M01/08/8C/Cgp9HWA01DeAFFn1AAEKQNyimxk937.png"}),s(),i,l(n,{alt:"2021223-1874.png",src:"https://s0.lgstatic.com/i/image6/M01/08/89/CioPOWA01E6AM0S_AAFq9Ci2CSc510.png"}),s(),d,l(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"}),s(),u,g,F])}const S=o(c,[["render",m]]);export{f as __pageData,S as default};
