import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.b3d8e22e.js";const d=JSON.parse('{"title":"路由的基本用法 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7657) 26  Vue Router：如何实现一个前端路由？（上）.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7657) 26  Vue Router：如何实现一个前端路由？（上）.md","lastUpdated":1696417798000}'),p={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7657) 26  Vue Router：如何实现一个前端路由？（上）.md"},o=l(`<p>相信对有一定基础的前端开发工程师来说，路由并不陌生，它最初源于服务端，在服务端中路由描述的是 URL 与处理函数之间的映射关系。</p><p>而在 Web 前端单页应用 SPA 中，路由描述的是 URL 与视图之间的映射关系，这种映射是单向的，即 URL 变化会引起视图的更新。</p><p>相比于后端路由，前端路由的好处是无须刷新页面，减轻了服务器的压力，提升了用户体验。目前主流支持单页应用的前端框架，基本都有配套的或第三方的路由系统。相应的，Vue.js 也提供了官方前端路由实现 Vue Router，那么这节课我们就来学习它的实现原理。</p><blockquote><p>Vue.js 3.0 配套的 Vue Router 源码在<a href="https://github.com/vuejs/vue-router-next" target="_blank" rel="noreferrer">这里</a>，建议你学习前先把源码 clone 下来。如果你还不会使用路由，建议你先看它的<a href="https://next.router.vuejs.org/" target="_blank" rel="noreferrer">官网文档</a>，会使用后再来学习本节课。</p></blockquote><h3 id="路由的基本用法" tabindex="-1">路由的基本用法 <a class="header-anchor" href="#路由的基本用法" aria-label="Permalink to &quot;路由的基本用法&quot;">​</a></h3><p>我们先通过一个简单地示例来看路由的基本用法，希望你也可以使用 Vue cli 脚手架创建一个 Vue.js 3.0 的项目，并安装 4.x 版本的 Vue Router 把项目跑起来。</p><p>注意，为了让 Vue.js 可以在线编译模板，你需要在根目录下配置 vue.config.js，并且设置 runtimeCompiler 为 true：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  runtimeCompiler</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  runtimeCompiler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后我们修改页面的 HTML 模板，加上如下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Hello App!&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">router-link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">&gt;Go to Home&lt;/</span><span style="color:#79B8FF;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">router-link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/about&quot;</span><span style="color:#E1E4E8;">&gt;Go to About&lt;/</span><span style="color:#79B8FF;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">router-view</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">router-view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Hello App!&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">&gt;Go to Home&lt;/</span><span style="color:#005CC5;">router-link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/about&quot;</span><span style="color:#24292E;">&gt;Go to About&lt;/</span><span style="color:#005CC5;">router-link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">router-view</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">router-view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>其中，RouterLink 和 RouterView 是 Vue Router 内置的组件。</p><p>RouterLink 表示路由的导航组件，我们可以配置 to 属性来指定它跳转的链接，它最终会在页面上渲染生成 a 标签。</p><p>RouterView 表示路由的视图组件，它会渲染路径对应的 Vue 组件，也支持嵌套。</p><p>RouterLink 和 RouterView 的具体实现，我们会放到后面去分析。</p><p>有了模板之后，我们接下来看如何初始化路由：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> { createRouter, createWebHashHistory } from &#39;vue</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">router&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 定义路由组件</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> Home = { template: &#39;&lt;div&gt;Home&lt;/div&gt;&#39; }</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> About = { template: &#39;&lt;div&gt;About&lt;/div&gt;&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 定义路由配置，每个路径映射一个路由视图组件</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> routes = [</span></span>
<span class="line"><span style="color:#E1E4E8;">  { path: &#39;/&#39;, component: Home },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { path: &#39;/about&#39;, component: About },</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 创建路由实例，可以指定路由模式，传入路由配置对象</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> router = createRouter({</span></span>
<span class="line"><span style="color:#E1E4E8;">  history: createWebHistory(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 创建 app 实例</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> app = createApp({</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 5. 在挂载页面 之前先安装路由</span></span>
<span class="line"><span style="color:#E1E4E8;">app.use(router)</span></span>
<span class="line"><span style="color:#6A737D;">// 6. 挂载页面</span></span>
<span class="line"><span style="color:#E1E4E8;">app.mount(&#39;#app&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createApp } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> { createRouter, createWebHashHistory } from &#39;vue</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">router&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 定义路由组件</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> Home = { template: &#39;&lt;div&gt;Home&lt;/div&gt;&#39; }</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> About = { template: &#39;&lt;div&gt;About&lt;/div&gt;&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 定义路由配置，每个路径映射一个路由视图组件</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> routes = [</span></span>
<span class="line"><span style="color:#24292E;">  { path: &#39;/&#39;, component: Home },</span></span>
<span class="line"><span style="color:#24292E;">  { path: &#39;/about&#39;, component: About },</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 创建路由实例，可以指定路由模式，传入路由配置对象</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> router = createRouter({</span></span>
<span class="line"><span style="color:#24292E;">  history: createWebHistory(),</span></span>
<span class="line"><span style="color:#24292E;">  routes</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 创建 app 实例</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> app = createApp({</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 5. 在挂载页面 之前先安装路由</span></span>
<span class="line"><span style="color:#24292E;">app.use(router)</span></span>
<span class="line"><span style="color:#6A737D;">// 6. 挂载页面</span></span>
<span class="line"><span style="color:#24292E;">app.mount(&#39;#app&#39;)</span></span></code></pre></div><p>可以看到，路由的初始化过程很简单，首先需要定义一个路由配置，这个配置主要用于描述路径和组件的映射关系，即什么路径下 RouterView 应该渲染什么路由组件。</p><p>接着创建路由对象实例，传入路由配置对象，并且也可以指定路由模式，Vue Router 目前支持三种模式，hash 模式，HTML5 模式和 memory 模式，我们常用的是前两种模式。</p><p>最后在挂载页面前，我们需要安装路由，这样我们就可以在各个组件中访问路由对象以及使用路由的内置组件 RouterLink 和 RouterView 了。</p><p>知道了 Vue Router 的基本用法后，接下来我们就可以探究它的实现原理了。由于 Vue Router 源码加起来有几千行，限于篇幅，我会把重点放在整体的实现流程上，不会讲实现的细节。</p><h3 id="路由的实现原理" tabindex="-1">路由的实现原理 <a class="header-anchor" href="#路由的实现原理" aria-label="Permalink to &quot;路由的实现原理&quot;">​</a></h3><p>我们先从用户使用的角度来分析，先从路由对象的创建过程开始。</p><h4 id="路由对象的创建" tabindex="-1">路由对象的创建 <a class="header-anchor" href="#路由对象的创建" aria-label="Permalink to &quot;路由对象的创建&quot;">​</a></h4><p>Vue Router 提供了一个 createRouter API，你可以通过它来创建一个路由对象，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createRouter</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义一些辅助方法和变量 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建 router 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> router </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当前路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentRoute,</span></span>
<span class="line"><span style="color:#E1E4E8;">    addRoute,</span></span>
<span class="line"><span style="color:#E1E4E8;">    removeRoute,</span></span>
<span class="line"><span style="color:#E1E4E8;">    hasRoute,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getRoutes,</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolve,</span></span>
<span class="line"><span style="color:#E1E4E8;">    options,</span></span>
<span class="line"><span style="color:#E1E4E8;">    push,</span></span>
<span class="line"><span style="color:#E1E4E8;">    replace,</span></span>
<span class="line"><span style="color:#E1E4E8;">    go,</span></span>
<span class="line"><span style="color:#E1E4E8;">    back</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    forward</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    beforeEach</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> beforeGuards.add,</span></span>
<span class="line"><span style="color:#E1E4E8;">    beforeResolve</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> beforeResolveGuards.add,</span></span>
<span class="line"><span style="color:#E1E4E8;">    afterEach</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> afterGuards.add,</span></span>
<span class="line"><span style="color:#E1E4E8;">    onError</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> errorHandlers.add,</span></span>
<span class="line"><span style="color:#E1E4E8;">    isReady,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(app) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 安装路由函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> router</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义一些辅助方法和变量 </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建 router 对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> router </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当前路径</span></span>
<span class="line"><span style="color:#24292E;">    currentRoute,</span></span>
<span class="line"><span style="color:#24292E;">    addRoute,</span></span>
<span class="line"><span style="color:#24292E;">    removeRoute,</span></span>
<span class="line"><span style="color:#24292E;">    hasRoute,</span></span>
<span class="line"><span style="color:#24292E;">    getRoutes,</span></span>
<span class="line"><span style="color:#24292E;">    resolve,</span></span>
<span class="line"><span style="color:#24292E;">    options,</span></span>
<span class="line"><span style="color:#24292E;">    push,</span></span>
<span class="line"><span style="color:#24292E;">    replace,</span></span>
<span class="line"><span style="color:#24292E;">    go,</span></span>
<span class="line"><span style="color:#24292E;">    back</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    forward</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    beforeEach</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> beforeGuards.add,</span></span>
<span class="line"><span style="color:#24292E;">    beforeResolve</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> beforeResolveGuards.add,</span></span>
<span class="line"><span style="color:#24292E;">    afterEach</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> afterGuards.add,</span></span>
<span class="line"><span style="color:#24292E;">    onError</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> errorHandlers.add,</span></span>
<span class="line"><span style="color:#24292E;">    isReady,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">(app) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 安装路由函数</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> router</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们省略了大部分代码，只保留了路由对象相关的代码，可以看到路由对象 router 就是一个对象，它维护了当前路径 currentRoute，且拥有很多辅助方法。</p><p>目前你只需要了解这么多，创建完路由对象后，我们现在来安装它。</p><h4 id="路由的安装" tabindex="-1">路由的安装 <a class="header-anchor" href="#路由的安装" aria-label="Permalink to &quot;路由的安装&quot;">​</a></h4><p>Vue Router 作为 Vue 的插件，当我们执行 app.use(router) 的时候，实际上就是在执行 router 的 install 方法来安装路由，并把 app 作为参数传入，来看它的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> router </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(app) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> router </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注册路由组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;RouterLink&#39;</span><span style="color:#E1E4E8;">, RouterLink)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;RouterView&#39;</span><span style="color:#E1E4E8;">, RouterView)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 全局配置定义 $router 和 $route</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.config.globalProperties.$router </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> router</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(app.config.globalProperties, </span><span style="color:#9ECBFF;">&#39;$route&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      get</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unref</span><span style="color:#E1E4E8;">(currentRoute),</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在浏览器端初始化导航</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isBrowser </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">started </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      currentRoute.value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> START_LOCATION_NORMALIZED) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// see above</span></span>
<span class="line"><span style="color:#E1E4E8;">      started </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(routerHistory.location).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(err </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Unexpected error when starting the router:&#39;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 路径变成响应式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> reactiveRoute </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let key in START_LOCATION_NORMALIZED) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      reactiveRoute[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> currentRoute.value[key])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 全局注入 router 和 reactiveRoute</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(routerKey, router)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(routeLocationKey, </span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">(reactiveRoute))</span></span>
<span class="line"><span style="color:#E1E4E8;">    let unmountApp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app.unmount</span></span>
<span class="line"><span style="color:#E1E4E8;">    installedApps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(app)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 应用卸载的时候，需要做一些路由清理工作</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.unmount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">      installedApps.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(app)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (installedApps.size </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">removeHistoryListener</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentRoute.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> START_LOCATION_NORMALIZED</span></span>
<span class="line"><span style="color:#E1E4E8;">        started </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        ready </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      unmountApp.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, arguments)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> router </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">(app) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> router </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注册路由组件</span></span>
<span class="line"><span style="color:#24292E;">    app.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;RouterLink&#39;</span><span style="color:#24292E;">, RouterLink)</span></span>
<span class="line"><span style="color:#24292E;">    app.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;RouterView&#39;</span><span style="color:#24292E;">, RouterView)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 全局配置定义 $router 和 $route</span></span>
<span class="line"><span style="color:#24292E;">    app.config.globalProperties.$router </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> router</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(app.config.globalProperties, </span><span style="color:#032F62;">&#39;$route&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">      get</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unref</span><span style="color:#24292E;">(currentRoute),</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在浏览器端初始化导航</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isBrowser </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">started </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      currentRoute.value </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> START_LOCATION_NORMALIZED) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// see above</span></span>
<span class="line"><span style="color:#24292E;">      started </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(routerHistory.location).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(err </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Unexpected error when starting the router:&#39;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 路径变成响应式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> reactiveRoute </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let key in START_LOCATION_NORMALIZED) {</span></span>
<span class="line"><span style="color:#24292E;">      reactiveRoute[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> currentRoute.value[key])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 全局注入 router 和 reactiveRoute</span></span>
<span class="line"><span style="color:#24292E;">    app.</span><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(routerKey, router)</span></span>
<span class="line"><span style="color:#24292E;">    app.</span><span style="color:#6F42C1;">provide</span><span style="color:#24292E;">(routeLocationKey, </span><span style="color:#6F42C1;">reactive</span><span style="color:#24292E;">(reactiveRoute))</span></span>
<span class="line"><span style="color:#24292E;">    let unmountApp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app.unmount</span></span>
<span class="line"><span style="color:#24292E;">    installedApps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(app)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 应用卸载的时候，需要做一些路由清理工作</span></span>
<span class="line"><span style="color:#24292E;">    app.unmount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">      installedApps.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(app)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (installedApps.size </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">removeHistoryListener</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        currentRoute.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> START_LOCATION_NORMALIZED</span></span>
<span class="line"><span style="color:#24292E;">        started </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        ready </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      unmountApp.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, arguments)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>路由的安装的过程我们需要记住以下两件事情。</p><ol><li><p>全局注册 RouterView 和 RouterLink 组件------这是你安装了路由后，可以在任何组件中去使用这俩个组件的原因，如果你使用 RouterView 或者 RouterLink 的时候收到提示不能解析 router-link 和 router-view，这说明你压根就没有安装路由。</p></li><li><p>通过 provide 方式全局注入 router 对象和 reactiveRoute 对象，其中 router 表示用户通过 createRouter 创建的路由对象，我们可以通过它去动态操作路由，reactiveRoute 表示响应式的路径对象，它维护着路径的相关信息。</p></li></ol><p>那么至此我们就已经了解了路由对象的创建，以及路由的安装，但是前端路由的实现，还需要解决几个核心问题：路径是如何管理的，路径和路由组件的渲染是如何映射的。</p><p>那么接下来，我们就来更细节地来看，依次来解决这两个问题。</p><h4 id="路径的管理" tabindex="-1">路径的管理 <a class="header-anchor" href="#路径的管理" aria-label="Permalink to &quot;路径的管理&quot;">​</a></h4><p>路由的基础结构就是一个路径对应一种视图，当我们切换路径的时候对应的视图也会切换，因此一个很重要的方面就是对路径的管理。</p><p>首先，我们需要维护当前的路径 currentRoute，可以给它一个初始值 START_LOCATION_NORMALIZED，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> START_LOCATION_NORMALIZED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined,</span></span>
<span class="line"><span style="color:#E1E4E8;">  params</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  query</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  hash</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fullPath</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  matched</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  meta</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  redirectedFrom</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> START_LOCATION_NORMALIZED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined,</span></span>
<span class="line"><span style="color:#24292E;">  params</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">  query</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">  hash</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  fullPath</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  matched</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">  meta</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">  redirectedFrom</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，路径对象包含了非常丰富的路径信息，具体含义我就不在这多说了，你可以参考<a href="https://next.router.vuejs.org/api/#meta-3" target="_blank" rel="noreferrer">官方文档</a>。</p><p>路由想要发生变化，就是通过改变路径完成的，路由对象提供了很多改变路径的方法，比如 router.push、router.replace，它们的底层最终都是通过 pushWithRedirect 完成路径的切换，我们来看一下它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">pushWithRedirect</span><span style="color:#E1E4E8;">(to, redirectedFrom) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> targetLocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (pendingLocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(to))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentRoute.value</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> to.state</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> force </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> to.force</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> replace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> to.replace </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> toLocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> targetLocation</span></span>
<span class="line"><span style="color:#E1E4E8;">  toLocation.redirectedFrom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> redirectedFrom</span></span>
<span class="line"><span style="color:#E1E4E8;">  let failure</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">force </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isSameRouteLocation</span><span style="color:#E1E4E8;">(stringifyQuery$1, from, targetLocation)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    failure </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouterError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_DUPLICATED */</span><span style="color:#E1E4E8;">, { to</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> toLocation, from })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">handleScroll</span><span style="color:#E1E4E8;">(from, from, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (failure </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(failure) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">(toLocation, from))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((error) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isNavigationFailure</span><span style="color:#E1E4E8;">(error, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_ABORTED */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_CANCELLED */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_GUARD_REDIRECT */</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> error</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">triggerError</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((failure) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (failure) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理错误</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        failure </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finalizeNavigation</span><span style="color:#E1E4E8;">(toLocation, from, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, replace, data)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">triggerAfterEach</span><span style="color:#E1E4E8;">(toLocation, from, failure)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> failure</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">pushWithRedirect</span><span style="color:#24292E;">(to, redirectedFrom) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> targetLocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (pendingLocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(to))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentRoute.value</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to.state</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> force </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to.force</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> replace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to.replace </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> toLocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> targetLocation</span></span>
<span class="line"><span style="color:#24292E;">  toLocation.redirectedFrom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redirectedFrom</span></span>
<span class="line"><span style="color:#24292E;">  let failure</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">force </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSameRouteLocation</span><span style="color:#24292E;">(stringifyQuery$1, from, targetLocation)) {</span></span>
<span class="line"><span style="color:#24292E;">    failure </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouterError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_DUPLICATED */</span><span style="color:#24292E;">, { to</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> toLocation, from })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">handleScroll</span><span style="color:#24292E;">(from, from, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (failure </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(failure) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">(toLocation, from))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((error) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(error, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_ABORTED */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_CANCELLED */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_GUARD_REDIRECT */</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> error</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">triggerError</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((failure) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (failure) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理错误</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        failure </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finalizeNavigation</span><span style="color:#24292E;">(toLocation, from, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, replace, data)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">triggerAfterEach</span><span style="color:#24292E;">(toLocation, from, failure)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> failure</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我省略了一部分代码的实现，这里主要来看 pushWithRedirect 的核心思路，首先参数 to 可能有多种情况，可以是一个表示路径的字符串，也可以是一个路径对象，所以要先经过一层 resolve 返回一个新的路径对象，它比前面提到的路径对象多了一个 matched 属性，它的作用我们后续会介绍。</p><p>得到新的目标路径后，接下来执行 navigate 方法，它实际上是执行路由切换过程中的一系列导航守卫函数，我们后续会介绍。navigate 成功后，会执行 finalizeNavigation 完成导航，在这里完成真正的路径切换，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">finalizeNavigation</span><span style="color:#E1E4E8;">(toLocation, from, isPush, replace, data) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkCanceledNavigation</span><span style="color:#E1E4E8;">(toLocation, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> error</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isFirstNavigation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> START_LOCATION_NORMALIZED</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isBrowser </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {} </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> history.state</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isPush) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (replace </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> isFirstNavigation)</span></span>
<span class="line"><span style="color:#E1E4E8;">      routerHistory.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(toLocation.fullPath, </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        scroll</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> isFirstNavigation </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> state.scroll,</span></span>
<span class="line"><span style="color:#E1E4E8;">      }, data))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">      routerHistory.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(toLocation.fullPath, data)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentRoute.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toLocation</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">handleScroll</span><span style="color:#E1E4E8;">(toLocation, from, isPush, isFirstNavigation)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">markAsReady</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">finalizeNavigation</span><span style="color:#24292E;">(toLocation, from, isPush, replace, data) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkCanceledNavigation</span><span style="color:#24292E;">(toLocation, from)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> error</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isFirstNavigation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> START_LOCATION_NORMALIZED</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isBrowser </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {} </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> history.state</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isPush) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (replace </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> isFirstNavigation)</span></span>
<span class="line"><span style="color:#24292E;">      routerHistory.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(toLocation.fullPath, </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        scroll</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> isFirstNavigation </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> state.scroll,</span></span>
<span class="line"><span style="color:#24292E;">      }, data))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">      routerHistory.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(toLocation.fullPath, data)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  currentRoute.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toLocation</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">handleScroll</span><span style="color:#24292E;">(toLocation, from, isPush, isFirstNavigation)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">markAsReady</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 finalizeNavigation 函数，我们重点关注两个逻辑，一个是更新当前的路径 currentRoute 的值，一个是执行 routerHistory.push 或者是 routerHistory.replace 方法更新浏览器的 URL 的记录。</p><p>每当我们切换路由的时候，会发现浏览器的 URL 发生了变化，但是页面却没有刷新，它是怎么做的呢？</p><p>在我们创建 router 对象的时候，会创建一个 history 对象，前面提到 Vue Router 支持三种模式，这里我们重点分析 HTML5 的 history 的模式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createWebHistory</span><span style="color:#E1E4E8;">(base) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeBase</span><span style="color:#E1E4E8;">(base)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> historyNavigation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useHistoryStateNavigation</span><span style="color:#E1E4E8;">(base)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> historyListeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useHistoryListeners</span><span style="color:#E1E4E8;">(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace)</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(delta, triggerListeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">triggerListeners)</span></span>
<span class="line"><span style="color:#E1E4E8;">      historyListeners.</span><span style="color:#B392F0;">pauseListeners</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(delta)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> routerHistory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// it&#39;s overridden right after</span></span>
<span class="line"><span style="color:#E1E4E8;">    location</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    base,</span></span>
<span class="line"><span style="color:#E1E4E8;">    go,</span></span>
<span class="line"><span style="color:#E1E4E8;">    createHref</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> createHref.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, base),</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, historyNavigation, historyListeners)</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(routerHistory, </span><span style="color:#9ECBFF;">&#39;location&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    get</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> historyNavigation.location.value,</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(routerHistory, </span><span style="color:#9ECBFF;">&#39;state&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    get</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> historyNavigation.state.value,</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> routerHistory</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createWebHistory</span><span style="color:#24292E;">(base) {</span></span>
<span class="line"><span style="color:#24292E;">  base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeBase</span><span style="color:#24292E;">(base)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> historyNavigation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useHistoryStateNavigation</span><span style="color:#24292E;">(base)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> historyListeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useHistoryListeners</span><span style="color:#24292E;">(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace)</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(delta, triggerListeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">triggerListeners)</span></span>
<span class="line"><span style="color:#24292E;">      historyListeners.</span><span style="color:#6F42C1;">pauseListeners</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(delta)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> routerHistory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// it&#39;s overridden right after</span></span>
<span class="line"><span style="color:#24292E;">    location</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    base,</span></span>
<span class="line"><span style="color:#24292E;">    go,</span></span>
<span class="line"><span style="color:#24292E;">    createHref</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> createHref.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, base),</span></span>
<span class="line"><span style="color:#24292E;">  }, historyNavigation, historyListeners)</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(routerHistory, </span><span style="color:#032F62;">&#39;location&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    get</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> historyNavigation.location.value,</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(routerHistory, </span><span style="color:#032F62;">&#39;state&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    get</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> historyNavigation.state.value,</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> routerHistory</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于 routerHistory 对象而言，它有两个重要的作用，一个是路径的切换，一个是监听路径的变化。</p><p>其中，路径切换主要通过 historyNavigation 来完成的，它是 useHistoryStateNavigation 函数的返回值，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">useHistoryStateNavigation</span><span style="color:#E1E4E8;">(base) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { history, location } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window</span></span>
<span class="line"><span style="color:#E1E4E8;">  let currentLocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCurrentLocation</span><span style="color:#E1E4E8;">(base, location),</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  let historyState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> history.state }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">historyState.value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">changeLocation</span><span style="color:#E1E4E8;">(currentLocation.value, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      back</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      current</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> currentLocation.value,</span></span>
<span class="line"><span style="color:#E1E4E8;">      forward</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      position</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> history.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      replaced</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      scroll</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">changeLocation</span><span style="color:#E1E4E8;">(to, state, replace) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBaseLocation</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// preserve any existing query when base has a hash</span></span>
<span class="line"><span style="color:#E1E4E8;">      (base.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> location.search</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> location.pathname </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> location.search </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> base) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      to</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      history[replace </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;replaceState&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;pushState&#39;</span><span style="color:#E1E4E8;">](state, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, url)</span></span>
<span class="line"><span style="color:#E1E4E8;">      historyState.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> state</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Error with push/replace State&#39;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">      location[replace </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;replace&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;assign&#39;</span><span style="color:#E1E4E8;">](url)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(to, data) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({}, history.state, </span><span style="color:#B392F0;">buildState</span><span style="color:#E1E4E8;">(historyState.value.back,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// keep back and forward entries but override current position</span></span>
<span class="line"><span style="color:#E1E4E8;">      to, historyState.value.forward, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">), data, { position</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> historyState.value.position })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">changeLocation</span><span style="color:#E1E4E8;">(to, state, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentLocation.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> to</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(to, data) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> currentState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({},</span></span>
<span class="line"><span style="color:#E1E4E8;">      historyState.value, history.state, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        forward</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> to,</span></span>
<span class="line"><span style="color:#E1E4E8;">        scroll</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computeScrollPosition</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">history.state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(\`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> you are manually calling history.replaceState</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\n\\n\` </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        \`history.</span><span style="color:#B392F0;">replaceState</span><span style="color:#E1E4E8;">(history.state, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, url)\\n\\n\` </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        \`You can find more information at https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//next.router.vuejs.org/guide/migration/#usage-of-history-state.\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">changeLocation</span><span style="color:#E1E4E8;">(currentState.current, currentState, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({}, </span><span style="color:#B392F0;">buildState</span><span style="color:#E1E4E8;">(currentLocation.value, to, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">), { position</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> currentState.position </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }, data)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">changeLocation</span><span style="color:#E1E4E8;">(to, state, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentLocation.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> to</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    location</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> currentLocation,</span></span>
<span class="line"><span style="color:#E1E4E8;">    state</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> historyState,</span></span>
<span class="line"><span style="color:#E1E4E8;">    push,</span></span>
<span class="line"><span style="color:#E1E4E8;">    replace</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">useHistoryStateNavigation</span><span style="color:#24292E;">(base) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { history, location } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window</span></span>
<span class="line"><span style="color:#24292E;">  let currentLocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCurrentLocation</span><span style="color:#24292E;">(base, location),</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  let historyState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> history.state }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">historyState.value) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">changeLocation</span><span style="color:#24292E;">(currentLocation.value, {</span></span>
<span class="line"><span style="color:#24292E;">      back</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      current</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> currentLocation.value,</span></span>
<span class="line"><span style="color:#24292E;">      forward</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      position</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> history.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      replaced</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      scroll</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">changeLocation</span><span style="color:#24292E;">(to, state, replace) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBaseLocation</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// preserve any existing query when base has a hash</span></span>
<span class="line"><span style="color:#24292E;">      (base.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> location.search</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> location.pathname </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> location.search </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> base) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      to</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      history[replace </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;replaceState&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pushState&#39;</span><span style="color:#24292E;">](state, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, url)</span></span>
<span class="line"><span style="color:#24292E;">      historyState.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> state</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Error with push/replace State&#39;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">      location[replace </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;replace&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;assign&#39;</span><span style="color:#24292E;">](url)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(to, data) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, history.state, </span><span style="color:#6F42C1;">buildState</span><span style="color:#24292E;">(historyState.value.back,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// keep back and forward entries but override current position</span></span>
<span class="line"><span style="color:#24292E;">      to, historyState.value.forward, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">), data, { position</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> historyState.value.position })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">changeLocation</span><span style="color:#24292E;">(to, state, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    currentLocation.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(to, data) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> currentState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({},</span></span>
<span class="line"><span style="color:#24292E;">      historyState.value, history.state, {</span></span>
<span class="line"><span style="color:#24292E;">        forward</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> to,</span></span>
<span class="line"><span style="color:#24292E;">        scroll</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computeScrollPosition</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">history.state) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(\`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> you are manually calling history.replaceState</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\n\\n\` </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        \`history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">(history.state, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, url)\\n\\n\` </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        \`You can find more information at https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//next.router.vuejs.org/guide/migration/#usage-of-history-state.\`)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">changeLocation</span><span style="color:#24292E;">(currentState.current, currentState, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, </span><span style="color:#6F42C1;">buildState</span><span style="color:#24292E;">(currentLocation.value, to, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">), { position</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> currentState.position </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }, data)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">changeLocation</span><span style="color:#24292E;">(to, state, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    currentLocation.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    location</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> currentLocation,</span></span>
<span class="line"><span style="color:#24292E;">    state</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> historyState,</span></span>
<span class="line"><span style="color:#24292E;">    push,</span></span>
<span class="line"><span style="color:#24292E;">    replace</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该函数返回的 push 和 replace 函数，会添加给 routerHistory 对象上，因此当我们调用 routerHistory.push 或者是 routerHistory.replace 方法的时候实际上就是在执行这两个函数。</p><p>push 和 replace 方法内部都是执行了 changeLocation 方法，该函数内部执行了浏览器底层的 history.pushState 或者 history.replaceState 方法，会向当前浏览器会话的历史堆栈中添加一个状态，这样就在不刷新页面的情况下修改了页面的 URL。</p><p>我们使用这种方法修改了路径，这个时候假设我们点击浏览器的回退按钮回到上一个 URL，这需要恢复到上一个路径以及更新路由视图，因此我们还需要监听这种 history 变化的行为，做一些相应的处理。</p><p>History 变化的监听主要是通过 historyListeners 来完成的，它是 useHistoryListeners 函数的返回值，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">useHistoryListeners</span><span style="color:#E1E4E8;">(base, historyState, currentLocation, replace) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let listeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  let teardowns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  let pauseState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> popStateHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({ state, }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCurrentLocation</span><span style="color:#E1E4E8;">(base, location)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentLocation.value</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> fromState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> historyState.value</span></span>
<span class="line"><span style="color:#E1E4E8;">    let delta </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      currentLocation.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> to</span></span>
<span class="line"><span style="color:#E1E4E8;">      historyState.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> state</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pauseState </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> pauseState </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> from) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        pauseState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      delta </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fromState </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> state.position </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> fromState.position </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(to)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    listeners.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(listener </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">listener</span><span style="color:#E1E4E8;">(currentLocation.value, from, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        delta,</span></span>
<span class="line"><span style="color:#E1E4E8;">        type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> NavigationType.pop,</span></span>
<span class="line"><span style="color:#E1E4E8;">        direction</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> delta</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> delta </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> NavigationDirection.forward</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> NavigationDirection.back</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> NavigationDirection.unknown,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">pauseListeners</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    pauseState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentLocation.value</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(callback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    listeners.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(callback)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> teardown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> listeners.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(callback)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        listeners.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(index, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    teardowns.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(teardown)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> teardown</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">beforeUnloadListener</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { history } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">history.state)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    history.</span><span style="color:#B392F0;">replaceState</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({}, history.state, { scroll</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computeScrollPosition</span><span style="color:#E1E4E8;">() }), </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> teardown of teardowns)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">teardown</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    teardowns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    window.</span><span style="color:#B392F0;">removeEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;popstate&#39;</span><span style="color:#E1E4E8;">, popStateHandler)</span></span>
<span class="line"><span style="color:#E1E4E8;">    window.</span><span style="color:#B392F0;">removeEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;beforeunload&#39;</span><span style="color:#E1E4E8;">, beforeUnloadListener)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;popstate&#39;</span><span style="color:#E1E4E8;">, popStateHandler)</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;beforeunload&#39;</span><span style="color:#E1E4E8;">, beforeUnloadListener)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    pauseListeners,</span></span>
<span class="line"><span style="color:#E1E4E8;">    listen,</span></span>
<span class="line"><span style="color:#E1E4E8;">    destroy</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">useHistoryListeners</span><span style="color:#24292E;">(base, historyState, currentLocation, replace) {</span></span>
<span class="line"><span style="color:#24292E;">  let listeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  let teardowns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  let pauseState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> popStateHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({ state, }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCurrentLocation</span><span style="color:#24292E;">(base, location)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentLocation.value</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> fromState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> historyState.value</span></span>
<span class="line"><span style="color:#24292E;">    let delta </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">      currentLocation.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to</span></span>
<span class="line"><span style="color:#24292E;">      historyState.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> state</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pauseState </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> pauseState </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> from) {</span></span>
<span class="line"><span style="color:#24292E;">        pauseState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      delta </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fromState </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> state.position </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> fromState.position </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(to)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    listeners.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(listener </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">listener</span><span style="color:#24292E;">(currentLocation.value, from, {</span></span>
<span class="line"><span style="color:#24292E;">        delta,</span></span>
<span class="line"><span style="color:#24292E;">        type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> NavigationType.pop,</span></span>
<span class="line"><span style="color:#24292E;">        direction</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> delta</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> delta </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> NavigationDirection.forward</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> NavigationDirection.back</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> NavigationDirection.unknown,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">pauseListeners</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    pauseState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentLocation.value</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(callback) {</span></span>
<span class="line"><span style="color:#24292E;">    listeners.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(callback)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> teardown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> listeners.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(callback)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        listeners.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(index, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    teardowns.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(teardown)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> teardown</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">beforeUnloadListener</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { history } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">history.state)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, history.state, { scroll</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computeScrollPosition</span><span style="color:#24292E;">() }), </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> teardown of teardowns)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">teardown</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    teardowns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    window.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;popstate&#39;</span><span style="color:#24292E;">, popStateHandler)</span></span>
<span class="line"><span style="color:#24292E;">    window.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;beforeunload&#39;</span><span style="color:#24292E;">, beforeUnloadListener)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;popstate&#39;</span><span style="color:#24292E;">, popStateHandler)</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;beforeunload&#39;</span><span style="color:#24292E;">, beforeUnloadListener)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    pauseListeners,</span></span>
<span class="line"><span style="color:#24292E;">    listen,</span></span>
<span class="line"><span style="color:#24292E;">    destroy</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该函数返回了 listen 方法，允许你添加一些侦听器，侦听 hstory 的变化，同时这个方法也被挂载到了 routerHistory 对象上，这样外部就可以访问到了。</p><p>该函数内部还监听了浏览器底层 Window 的 popstate 事件，当我们点击浏览器的回退按钮或者是执行了 history.back 方法的时候，会触发事件的回调函数 popStateHandler，进而遍历侦听器 listeners，执行每一个侦听器函数。</p><p>那么，Vue Router 是如何添加这些侦听器的呢？原来在安装路由的时候，会执行一次初始化导航，执行了 push 方法进而执行了 finalizeNavigation 方法。</p><p>在 finalizeNavigation 的最后，会执行 markAsReady 方法，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">markAsReady</span><span style="color:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ready)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">  ready </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setupListeners</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  readyHandlers</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(([resolve, reject]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (err </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(err) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">  readyHandlers.</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">markAsReady</span><span style="color:#24292E;">(err) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ready)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">  ready </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setupListeners</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  readyHandlers</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(([resolve, reject]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (err </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(err) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">  readyHandlers.</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>markAsReady 内部会执行 setupListeners 函数初始化侦听器，且保证只初始化一次。我们再接着来看 setupListeners 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">setupListeners</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  removeHistoryListener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> routerHistory.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">((to, _from, info) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> toLocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(to)</span></span>
<span class="line"><span style="color:#E1E4E8;">    pendingLocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toLocation</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentRoute.value</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isBrowser) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">saveScrollPosition</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getScrollKey</span><span style="color:#E1E4E8;">(from.fullPath, info.delta), </span><span style="color:#B392F0;">computeScrollPosition</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">(toLocation, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((error) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isNavigationFailure</span><span style="color:#E1E4E8;">(error, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_ABORTED */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_CANCELLED */</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> error</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isNavigationFailure</span><span style="color:#E1E4E8;">(error, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* NAVIGATION_GUARD_REDIRECT */</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.delta)</span></span>
<span class="line"><span style="color:#E1E4E8;">            routerHistory.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">info.delta, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">pushWithRedirect</span><span style="color:#E1E4E8;">(error.to, toLocation</span></span>
<span class="line"><span style="color:#E1E4E8;">          ).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(noop)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// avoid the then branch</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.delta)</span></span>
<span class="line"><span style="color:#E1E4E8;">          routerHistory.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">info.delta, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">triggerError</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((failure) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        failure </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">          failure </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">finalizeNavigation</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            toLocation, from, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (failure </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> info.delta)</span></span>
<span class="line"><span style="color:#E1E4E8;">          routerHistory.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">info.delta, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">triggerAfterEach</span><span style="color:#E1E4E8;">(toLocation, from, failure)</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(noop)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">setupListeners</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  removeHistoryListener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> routerHistory.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">((to, _from, info) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> toLocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(to)</span></span>
<span class="line"><span style="color:#24292E;">    pendingLocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toLocation</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentRoute.value</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isBrowser) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">saveScrollPosition</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getScrollKey</span><span style="color:#24292E;">(from.fullPath, info.delta), </span><span style="color:#6F42C1;">computeScrollPosition</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">(toLocation, from)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((error) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(error, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_ABORTED */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_CANCELLED */</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> error</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(error, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* NAVIGATION_GUARD_REDIRECT */</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.delta)</span></span>
<span class="line"><span style="color:#24292E;">            routerHistory.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">info.delta, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">pushWithRedirect</span><span style="color:#24292E;">(error.to, toLocation</span></span>
<span class="line"><span style="color:#24292E;">          ).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(noop)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// avoid the then branch</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.delta)</span></span>
<span class="line"><span style="color:#24292E;">          routerHistory.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">info.delta, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">triggerError</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((failure) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        failure </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">          failure </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">finalizeNavigation</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            toLocation, from, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (failure </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> info.delta)</span></span>
<span class="line"><span style="color:#24292E;">          routerHistory.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">info.delta, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">triggerAfterEach</span><span style="color:#24292E;">(toLocation, from, failure)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(noop)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>侦听器函数也是执行 navigate 方法，执行路由切换过程中的一系列导航守卫函数，在 navigate 成功后执行 finalizeNavigation 完成导航，完成真正的路径切换。这样就保证了在用户点击浏览器回退按钮后，可以恢复到上一个路径以及更新路由视图。</p><p>至此，我们就完成了路径管理，在内存中通过 currentRoute 维护记录当前的路径，通过浏览器底层 API 实现了路径的切换和 history 变化的监听。</p>`,65),e=[o];function t(r,c,E,y,i,u){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};
