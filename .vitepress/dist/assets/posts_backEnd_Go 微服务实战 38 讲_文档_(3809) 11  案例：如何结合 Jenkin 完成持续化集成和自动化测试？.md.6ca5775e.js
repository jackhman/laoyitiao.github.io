import{_ as l,D as o,o as e,g as t,J as a,h as p,Q as s}from"./chunks/framework.f67d7268.js";const D=JSON.parse('{"title":"11案例：如何结合Jenkin完成持续化集成和自动化测试？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3809) 11  案例：如何结合 Jenkin 完成持续化集成和自动化测试？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3809) 11  案例：如何结合 Jenkin 完成持续化集成和自动化测试？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3809) 11  案例：如何结合 Jenkin 完成持续化集成和自动化测试？.md"},r=s('<h1 id="_11案例-如何结合jenkin完成持续化集成和自动化测试" tabindex="-1">11案例：如何结合Jenkin完成持续化集成和自动化测试？ <a class="header-anchor" href="#_11案例-如何结合jenkin完成持续化集成和自动化测试" aria-label="Permalink to &quot;11案例：如何结合Jenkin完成持续化集成和自动化测试？&quot;">​</a></h1><p>今天我们主要来介绍如何结合 Jenkins 完成持续化集成和自动化测试的案例。</p><p>在微服务开发团队中，一般会采用敏捷开发这类增长式的开发方式，这能有效提高各个微服务的迭代效率。为了让完成的代码能够尽快得到反馈，我们建议<strong>尽早将完成的代码提交到代码库中被集成部署</strong>，每天一次甚至一天多次，通过自动构建和自动化测试，尽早检测出集成的错误，从而确保错误被尽快发现和纠正。</p><p>在上一课时中，我们已经学习了如何通过 Docker 和 Kubernetes 部署和运行微服务；在本课时，我们将介绍如何<strong>使用 Jenkins 进行持续集成和自动化测试</strong>。</p><h3 id="持续集成与-jenkins-pipeline" tabindex="-1">持续集成与 Jenkins Pipeline <a class="header-anchor" href="#持续集成与-jenkins-pipeline" aria-label="Permalink to &quot;持续集成与 Jenkins Pipeline&quot;">​</a></h3><p>在敏捷开发中，<strong>持续集成</strong>（CI，Continuous Integration）是为了更快地发现和修复系统集成遇到的各类问题，它建议开发人员一天最少提交一次或者多次代码到代码库中，让自动化工具对提交的代码进行集成部署，并使用自动化测试工具检验代码是否正常运行，从而更快地发现代码中存在的问题并进行修复。</p>',6),E=s(`<p>CI 简易流程图</p><p>一般来说，业务系统经过微服务划分后，每一个微服务都是由独立的小团队进行开发和维护，在系统集成时，考虑到微服务之间存在大量的互相调用，这就要求我们不仅要验证微服务内模块的集成结果，还需要验证微服务之间的集成结果。因此，持续集成能够加快各个小团队之间的协作，及早发现系统集成中遇到的问题，进而提升整个项目的开发效率。</p><p><strong>Jenkins 是常用的持续集成工具</strong>。它采用 Java 开发，提供 Web 界面简化操作，并支持插件式扩展，可以处理几乎任何类型的构建和持续集成。Jenkins 中提供多种方式进行构建工作，其中 Pipeline 是最为常用的方式之一。</p><p><strong>Pipeline 是一套运行在 Jenkins 上的工作框架</strong>。它能够将多个节点中的任务连接起来，实现单个节点难以完成的复杂流程的编排和可视化工作。Pipeline 以代码的形式实现，它将一个流水线划分为多个 Stage，每个 Stage 代表了一组操作，比如构建、测试、部署等；而 Stage 内部又由多个 Step 组成，每一个 Step 就是基本的操作命令，比如打印日志 &quot;echo&quot; 等命令。</p><p>在本课时的后半部分，我们将通过一个 Pipeline 完成 user 服务从 GitHub 中拉取代码，到编译打包成镜像，再到部署到 Kubernetes 的流程。</p><h3 id="go-的单元测试" tabindex="-1">Go 的单元测试 <a class="header-anchor" href="#go-的单元测试" aria-label="Permalink to &quot;Go 的单元测试&quot;">​</a></h3><p>在前面的&quot;CI 简易流程图&quot;中，我们可以看到服务在经过构建和部署之后，会进行相应的测试来验证部署的代码是否合理。Go 本身提供了一套轻量级的测试框架，用于对 Go 程序进行单元测试和基准测试。go test 命令是一个按照一定的约定和组织来测试代码的程序，它执行的文件都是以&quot;_test.go&quot; 作为后缀，这部分文件不会包含在 go build 的代码构建中。</p><p>在测试文件中主要存在以下三种函数类型：</p><ol><li><p>以 Test 作为函数名前缀的测试函数，一般用作单元测试，测试函数的逻辑行为是否正确；</p></li><li><p>以 Benchmark 作为函数名前缀的基准测试函数，一般用来衡量函数的性能；</p></li><li><p>以 Example 作为函数名前缀的示例函数，主要用于提供示例文档。</p></li></ol><p>接下来我们通过 user_dao_test.go 测试文件介绍如何编写 Go 的单元测试用例，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dao</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ( </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestUserDAOImpl_Save</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	userDAO </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">UserDAOImpl{} </span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">InitMysql</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;3306&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err) </span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">FailNow</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	user </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">UserEntity{ </span></span>
<span class="line"><span style="color:#E1E4E8;">		Username:</span><span style="color:#9ECBFF;">&quot;aoho&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">		Password:</span><span style="color:#9ECBFF;">&quot;aoho&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">		Email:</span><span style="color:#9ECBFF;">&quot;aoho@mail.com&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userDAO.</span><span style="color:#79B8FF;">Save</span><span style="color:#E1E4E8;">(user) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err) </span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">FailNow</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;new User ID is </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, user.ID) </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestUserDAOImpl_SelectByEmail</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	userDAO </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">UserDAOImpl{} </span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">InitMysql</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;3306&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err) </span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">FailNow</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	user, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> userDAO.</span><span style="color:#79B8FF;">SelectByEmail</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;aoho@mail.com&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err) </span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">FailNow</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;result uesrname is </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, user.Username) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dao</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ( </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestUserDAOImpl_Save</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) { </span></span>
<span class="line"><span style="color:#24292E;">	userDAO </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">UserDAOImpl{} </span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">InitMysql</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3306&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err) </span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">FailNow</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	user </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">UserEntity{ </span></span>
<span class="line"><span style="color:#24292E;">		Username:</span><span style="color:#032F62;">&quot;aoho&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">		Password:</span><span style="color:#032F62;">&quot;aoho&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">		Email:</span><span style="color:#032F62;">&quot;aoho@mail.com&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDAO.</span><span style="color:#005CC5;">Save</span><span style="color:#24292E;">(user) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err) </span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">FailNow</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new User ID is </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, user.ID) </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestUserDAOImpl_SelectByEmail</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) { </span></span>
<span class="line"><span style="color:#24292E;">	userDAO </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">UserDAOImpl{} </span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">InitMysql</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3306&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err) </span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">FailNow</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	user, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> userDAO.</span><span style="color:#005CC5;">SelectByEmail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;aoho@mail.com&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err) </span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">FailNow</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;result uesrname is </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, user.Username) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一般来说，测试文件会以&quot;<strong>待测试文件名 + _test.go</strong>&quot; 的方式命名，比如 user_dao_test.go，说明是对 user_dao.go 文件的测试用例。类似的，测试函数也是以 &quot;Test + 待测试函数&quot;的方式进行命名，比如 TestUserDAOImpl_SelectByEmail 是对 UserDAOImpl 结构体的 SelectByEmail 方法进行测试，你也可以根据测试路径的不同，添加额外的修饰语。</p><p>测试文件需要导入 testing 包，测试函数中的 *testing.T 参数用于报告测试结果和附加的日志信息。我们可以通过 go test 命令运行测试用例，在 user_dao_test.go 所在目录下执行 go test 命令，即可执行 user_dao_test.go 内所有的测试函数，并在命令行打印相应的执行结果。</p><h3 id="使用-pipeline-构建部署服务" tabindex="-1">使用 Pipeline 构建部署服务 <a class="header-anchor" href="#使用-pipeline-构建部署服务" aria-label="Permalink to &quot;使用 Pipeline 构建部署服务&quot;">​</a></h3><p>在部署 Pipeline 服务之前，我们首先将 user 服务依赖的 MySQL 和 Redis 独立部署到 Kubernetes 上，这里我们以 Redis 的 yaml 配置为例：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apps/v1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deployment</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-redis</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-redis</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">replicas</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">strategy</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">RollingUpdate</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">matchLabels</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-redis</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-redis</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:                    </span><span style="color:#6A737D;">#定义Redis容器，开放6379端口 </span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-redis</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">redis:5.0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6379</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">imagePullPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">IfNotPresent</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apps/v1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deployment</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-redis</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-redis</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">replicas</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">strategy</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">RollingUpdate</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">matchLabels</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-redis</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">metadata</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-redis</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:                    </span><span style="color:#6A737D;">#定义Redis容器，开放6379端口 </span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-redis</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">redis:5.0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6379</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">imagePullPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">IfNotPresent</span></span></code></pre></div><p>user-redis.yaml 文件通过 Deployment Controller 管理 Pod，当 Controller 中的 Pod 出现异常被重启时，很可能导致 Pod 的 IP 发生变化。如果此时 user 服务通过固定 IP 的方式访问 Redis，很可能会访问失败。为了避免这种情况，我们可以为 user-redis Pod 定义一个 Service，配置文件描述如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Service</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-redis-service</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">:  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-redis</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:   </span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">protocol</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">TCP</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6379</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">targetPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6379</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-redis-tcp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Service</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-redis-service</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">:  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-redis</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:   </span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">protocol</span><span style="color:#24292E;">: </span><span style="color:#032F62;">TCP</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6379</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">targetPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6379</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-redis-tcp</span></span></code></pre></div><p>在创建好 Pod 后，再执行 kubectl create -f user-redis-service.yaml 命令，即可为 user-redis Pod 生成一个 Service。Service 定义了一组 Pod 的逻辑集合和一个用于访问它们的策略，Kubernetes 集群会为 Service 分配一个固定的 Cluster IP，用于集群内部的访问。我们可以通过以下命令查看 Service 的信息，包括 Cluster IP 等信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">kubectl get services</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">kubectl get services</span></span></code></pre></div><p>通过 Cluster IP 访问 MySQL 和 Redis 等服务，我们就无须担心 Pod IP 的变化。</p><p>通过 Pipeline 部署服务到 Kubernetes 集群，主要有以下步骤：</p><ol><li><p>从 GitHub 中拉取代码；</p></li><li><p>构建 Docker 镜像；</p></li><li><p>上传 Docker 镜像到 Docker Hub；</p></li><li><p>将应用部署 Kubernetes；</p></li><li><p>接口测试。</p></li></ol><p><strong>在 Pipeline 中，我们将上述步骤组织成相应的 Stage</strong>，让 Jenkins 为我们完成服务的持续集成和自动化测试，接下来我们以 user 服务的部署作为例子。</p><p>Pipeline 脚本是由 Groovy 语言实现，支持 Declarative（声明式）和 Scripted（脚本式）语法，我们接下来的演示就基于脚本式语法进行介绍。</p><p><strong>第一步，拉取代码</strong>。Stage 的声明如下：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stage(</span><span style="color:#9ECBFF;">&#39;clone code from github&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    echo </span><span style="color:#9ECBFF;">&quot;first stage: clone code&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    git </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://github.com/longjoy/micro-go-course.git&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    script { </span></span>
<span class="line"><span style="color:#E1E4E8;">        commit_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sh(</span><span style="color:#79B8FF;">returnStdout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">script</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;git rev-parse --short HEAD&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">trim() </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stage(</span><span style="color:#032F62;">&#39;clone code from github&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    echo </span><span style="color:#032F62;">&quot;first stage: clone code&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    git </span><span style="color:#005CC5;">url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://github.com/longjoy/micro-go-course.git&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    script { </span></span>
<span class="line"><span style="color:#24292E;">        commit_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sh(</span><span style="color:#005CC5;">returnStdout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">script</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;git rev-parse --short HEAD&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">trim() </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过 git url 命令从 GitHub 中获取 user 服务的代码，并将本次提交记录的 commit_id 提取出来作为变量使用。</p><p>接下来是<strong>第二步，使用 user 服务中的 Dockfile 定义构建相应的 user 镜像</strong>。Stage 声明如下：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stage(</span><span style="color:#9ECBFF;">&#39;build image&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    echo </span><span style="color:#9ECBFF;">&quot;second stage: build docker image&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    sh </span><span style="color:#9ECBFF;">&quot;docker build -t aoho/user:\${commit_id} section11/user/&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stage(</span><span style="color:#032F62;">&#39;build image&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    echo </span><span style="color:#032F62;">&quot;second stage: build docker image&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    sh </span><span style="color:#032F62;">&quot;docker build -t aoho/user:\${commit_id} section11/user/&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了方便在排查问题时可以根据对应的代码记录定位代码，我们采用了 GitHub 的提交记录 commit_id 作为镜像的 tag。同时为了将 MySQL 和 Redis 的地址作为参数传入，修改 user 服务的 Dockerfile 为如下：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">FROM</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">golang</span><span style="color:#E1E4E8;">:latest </span></span>
<span class="line"><span style="color:#79B8FF;">WORKDIR</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">root</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">course</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">section10</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">user </span></span>
<span class="line"><span style="color:#79B8FF;">COPY</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">root</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">micro-go-course</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">section10</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user </span></span>
<span class="line"><span style="color:#79B8FF;">RUN</span><span style="color:#E1E4E8;"> go env </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">w </span><span style="color:#79B8FF;">GOPROXY</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//goproxy.cn,direct </span></span>
<span class="line"><span style="color:#79B8FF;">RUN</span><span style="color:#E1E4E8;"> go build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o user </span></span>
<span class="line"><span style="color:#79B8FF;">EXPOSE</span><span style="color:#E1E4E8;"> 10086 </span></span>
<span class="line"><span style="color:#79B8FF;">ENTRYPOINT</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">addr $mysqlAddr </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">redis</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">addr $redisAddr</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">FROM</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">golang</span><span style="color:#24292E;">:latest </span></span>
<span class="line"><span style="color:#005CC5;">WORKDIR</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/root/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">course</span><span style="color:#032F62;">/section10/</span><span style="color:#24292E;">user </span></span>
<span class="line"><span style="color:#005CC5;">COPY</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/ /</span><span style="color:#24292E;">root</span><span style="color:#032F62;">/micro-go-course/</span><span style="color:#24292E;">section10</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user </span></span>
<span class="line"><span style="color:#005CC5;">RUN</span><span style="color:#24292E;"> go env </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">w </span><span style="color:#005CC5;">GOPROXY</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//goproxy.cn,direct </span></span>
<span class="line"><span style="color:#005CC5;">RUN</span><span style="color:#24292E;"> go build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o user </span></span>
<span class="line"><span style="color:#005CC5;">EXPOSE</span><span style="color:#24292E;"> 10086 </span></span>
<span class="line"><span style="color:#005CC5;">ENTRYPOINT</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">addr $mysqlAddr </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">redis</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">addr $redisAddr</span></span></code></pre></div><p>mysqlAddr 和 redisAddr 将在 user.yaml 配置文件中以环境变量的方式指定 MySQL 和 Redis 的地址。</p><p><strong>第三步</strong> ，为了方便 Kubernetes 拉取服务的镜像，我们<strong>将第二步构建好的 Docker 镜像推送到镜像仓库中</strong>。如下声明所示：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stage(</span><span style="color:#9ECBFF;">&#39;push image&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    echo </span><span style="color:#9ECBFF;">&quot;third stage: push docker image to registry&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    sh </span><span style="color:#9ECBFF;">&quot;docker login -u eoho -p xxxxxx&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    sh </span><span style="color:#9ECBFF;">&quot;docker push aoho/user:\${commit_id}&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stage(</span><span style="color:#032F62;">&#39;push image&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    echo </span><span style="color:#032F62;">&quot;third stage: push docker image to registry&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    sh </span><span style="color:#032F62;">&quot;docker login -u eoho -p xxxxxx&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    sh </span><span style="color:#032F62;">&quot;docker push aoho/user:\${commit_id}&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Docker 中默认的镜像仓库为 Docker Hub，上述声明中就将 user 镜像推送到 Docker Hub 中，当然你也可以选择将镜像推送到私有仓库中。往 Docker Hub 中推送镜像需要提交账号密码，这需要我们预先注册申请一个 Docker Hub 账户。</p><p>然后<strong>在第四步中，我们使用 kubectl 将 user 服务部署到 Kubernetes 中</strong>。为了保证部署到正确版本的镜像，我们需要将 commit_id 替换到 user.yaml 文件中，以及将 mysqlAddr 和 redisAddr 作为环境变量输入，user.yaml 的配置如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apps/v1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deployment</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-service</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-service</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">replicas</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">strategy</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">RollingUpdate</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">matchLabels</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-service</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-service</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:                    </span><span style="color:#6A737D;">#定义User容器，开放10086端口 </span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">aoho/user:&lt;COMMIT_ID_TAG&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10086</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">imagePullPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">IfNotPresent</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">env</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mysqlAddr</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&lt;MYSQL_ADDR_TAG&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">redisAddr</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&lt;REDIS_ADDR_TAG&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apps/v1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deployment</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-service</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-service</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">replicas</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">strategy</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">RollingUpdate</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">matchLabels</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-service</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">metadata</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-service</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:                    </span><span style="color:#6A737D;">#定义User容器，开放10086端口 </span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">aoho/user:&lt;COMMIT_ID_TAG&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10086</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">imagePullPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">IfNotPresent</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">env</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mysqlAddr</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">value</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&lt;MYSQL_ADDR_TAG&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">redisAddr</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">value</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&lt;REDIS_ADDR_TAG&gt;</span></span></code></pre></div><p>在上述配置文件中，我们使用 Deployment Controller 来管理 Pod，创建 Pod 的模板为第二步中构建的 user 镜像。构建第四步的 Stage 声明如下：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stage(</span><span style="color:#9ECBFF;">&#39;deploy to Kubernetes&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    echo </span><span style="color:#9ECBFF;">&quot;forth stage: deploy to Kubernetes&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    sh </span><span style="color:#9ECBFF;">&quot;sed -i &#39;s/&lt;COMMIT_ID_TAG&gt;/\${commit_id}/&#39; user.yaml&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    sh </span><span style="color:#9ECBFF;">&quot;sed -i &#39;s/&lt;MYSQL_ADDR_TAG&gt;/\${mysql_addr}/&#39; user.yaml&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    sh </span><span style="color:#9ECBFF;">&quot;sed -i &#39;s/&lt;REDIS_ADDR_TAG&gt;/\${redis_addr}/&#39; user.yaml&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    sh </span><span style="color:#9ECBFF;">&quot;kubectl apply -f user.yaml&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stage(</span><span style="color:#032F62;">&#39;deploy to Kubernetes&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    echo </span><span style="color:#032F62;">&quot;forth stage: deploy to Kubernetes&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    sh </span><span style="color:#032F62;">&quot;sed -i &#39;s/&lt;COMMIT_ID_TAG&gt;/\${commit_id}/&#39; user.yaml&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    sh </span><span style="color:#032F62;">&quot;sed -i &#39;s/&lt;MYSQL_ADDR_TAG&gt;/\${mysql_addr}/&#39; user.yaml&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    sh </span><span style="color:#032F62;">&quot;sed -i &#39;s/&lt;REDIS_ADDR_TAG&gt;/\${redis_addr}/&#39; user.yaml&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    sh </span><span style="color:#032F62;">&quot;kubectl apply -f user.yaml&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述声明中，我们首先使用 sed 命令将 yaml 文件中标识替换为对应的变量，再通过 kubectl apply 命令重新部署了 user-service Pod。</p><p>为了让 user 服务的接口在 Kubernetes 集群外也能够访问，我们通过 NodePort 的方式将 user 服务的端口暴露到 Node 节点的相应端口，定义 user-service.yaml 配置如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Service</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-service-http</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-service</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">NodePort</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">protocol</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">TCP</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10086</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">targetPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10086</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">nodePort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">30036</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user-service-tcp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Service</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-service-http</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-service</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">NodePort</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">protocol</span><span style="color:#24292E;">: </span><span style="color:#032F62;">TCP</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10086</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">targetPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10086</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nodePort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">30036</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user-service-tcp</span></span></code></pre></div><p>在上述配置中，我们指定的 Service 的类型为 NodePort，并将 user 服务的接口通过 Node 节点的 30036 暴露出去，对此，我们就可以在集群外部通过 NodeIP:NodePort 的方式访问 user 服务了。</p><p><strong>最后一步，我们通过 go test 对 user 中的 HTTP 接口进行接口测试，验证代码集成的效果</strong>。Stage 声明如下：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stage(</span><span style="color:#9ECBFF;">&#39;http test&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    echo </span><span style="color:#9ECBFF;">&quot;fifth stage: http test&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    sh </span><span style="color:#9ECBFF;">&quot;cd section11/user/transport &amp;&amp; go test -args \${user_addr}&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stage(</span><span style="color:#032F62;">&#39;http test&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    echo </span><span style="color:#032F62;">&quot;fifth stage: http test&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    sh </span><span style="color:#032F62;">&quot;cd section11/user/transport &amp;&amp; go test -args \${user_addr}&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述 Stage 中 user_addr 变量即 NodeIP:NodePort，user 服务通过 NodePort 暴露到 Kubernetes 集群外的可访问端口。我们使用 go test 命令运行了 transport 包下的测试文件用于测试 HTTP 接口。</p><p>到此，我们通过 Pipeline 对 user 服务进行持续集成和测试的整个流程就已经完成了，其完整的 Pipeline 脚本如下：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">node { </span></span>
<span class="line"><span style="color:#E1E4E8;">    script { </span></span>
<span class="line"><span style="color:#E1E4E8;">        mysql_addr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// service cluster ip </span></span>
<span class="line"><span style="color:#E1E4E8;">        redis_addr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// service cluster ip </span></span>
<span class="line"><span style="color:#E1E4E8;">        user_addr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;127.0.0.1:30036&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// nodeIp : port </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    stage(</span><span style="color:#9ECBFF;">&#39;clone code from github&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        echo </span><span style="color:#9ECBFF;">&quot;first stage: clone code&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        git </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://github.com/longjoy/micro-go-course.git&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        script { </span></span>
<span class="line"><span style="color:#E1E4E8;">            commit_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sh(</span><span style="color:#79B8FF;">returnStdout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">script</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;git rev-parse --short HEAD&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">trim() </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    stage(</span><span style="color:#9ECBFF;">&#39;build image&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        echo </span><span style="color:#9ECBFF;">&quot;second stage: build docker image&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        sh </span><span style="color:#9ECBFF;">&quot;docker build -t aoho/user:\${commit_id} section11/user/&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    stage(</span><span style="color:#9ECBFF;">&#39;push image&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        echo </span><span style="color:#9ECBFF;">&quot;third stage: push docker image to registry&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        sh </span><span style="color:#9ECBFF;">&quot;docker login -u aoho -p xxxxxx&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        sh </span><span style="color:#9ECBFF;">&quot;docker push aoho/user:\${commit_id}&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    stage(</span><span style="color:#9ECBFF;">&#39;deploy to Kubernetes&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        echo </span><span style="color:#9ECBFF;">&quot;forth stage: deploy to Kubernetes&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        sh </span><span style="color:#9ECBFF;">&quot;sed -i &#39;s/&lt;COMMIT_ID_TAG&gt;/\${commit_id}/&#39; user-service.yaml&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        sh </span><span style="color:#9ECBFF;">&quot;sed -i &#39;s/&lt;MYSQL_ADDR_TAG&gt;/\${mysql_addr}/&#39; user-service.yaml&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        sh </span><span style="color:#9ECBFF;">&quot;sed -i &#39;s/&lt;REDIS_ADDR_TAG&gt;/\${redis_addr}/&#39; user-service.yaml&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        sh </span><span style="color:#9ECBFF;">&quot;kubectl apply -f user.yaml&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    stage(</span><span style="color:#9ECBFF;">&#39;http test&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        echo </span><span style="color:#9ECBFF;">&quot;fifth stage: http test&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        sh </span><span style="color:#9ECBFF;">&quot;cd section11/user/transport &amp;&amp; go test  -args \${user_addr}&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">node { </span></span>
<span class="line"><span style="color:#24292E;">    script { </span></span>
<span class="line"><span style="color:#24292E;">        mysql_addr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;127.0.0.1&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// service cluster ip </span></span>
<span class="line"><span style="color:#24292E;">        redis_addr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;127.0.0.1&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// service cluster ip </span></span>
<span class="line"><span style="color:#24292E;">        user_addr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;127.0.0.1:30036&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// nodeIp : port </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    stage(</span><span style="color:#032F62;">&#39;clone code from github&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        echo </span><span style="color:#032F62;">&quot;first stage: clone code&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        git </span><span style="color:#005CC5;">url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://github.com/longjoy/micro-go-course.git&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        script { </span></span>
<span class="line"><span style="color:#24292E;">            commit_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sh(</span><span style="color:#005CC5;">returnStdout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">script</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;git rev-parse --short HEAD&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">trim() </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    stage(</span><span style="color:#032F62;">&#39;build image&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        echo </span><span style="color:#032F62;">&quot;second stage: build docker image&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        sh </span><span style="color:#032F62;">&quot;docker build -t aoho/user:\${commit_id} section11/user/&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    stage(</span><span style="color:#032F62;">&#39;push image&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        echo </span><span style="color:#032F62;">&quot;third stage: push docker image to registry&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        sh </span><span style="color:#032F62;">&quot;docker login -u aoho -p xxxxxx&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        sh </span><span style="color:#032F62;">&quot;docker push aoho/user:\${commit_id}&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    stage(</span><span style="color:#032F62;">&#39;deploy to Kubernetes&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        echo </span><span style="color:#032F62;">&quot;forth stage: deploy to Kubernetes&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        sh </span><span style="color:#032F62;">&quot;sed -i &#39;s/&lt;COMMIT_ID_TAG&gt;/\${commit_id}/&#39; user-service.yaml&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        sh </span><span style="color:#032F62;">&quot;sed -i &#39;s/&lt;MYSQL_ADDR_TAG&gt;/\${mysql_addr}/&#39; user-service.yaml&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        sh </span><span style="color:#032F62;">&quot;sed -i &#39;s/&lt;REDIS_ADDR_TAG&gt;/\${redis_addr}/&#39; user-service.yaml&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        sh </span><span style="color:#032F62;">&quot;kubectl apply -f user.yaml&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    stage(</span><span style="color:#032F62;">&#39;http test&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        echo </span><span style="color:#032F62;">&quot;fifth stage: http test&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        sh </span><span style="color:#032F62;">&quot;cd section11/user/transport &amp;&amp; go test  -args \${user_addr}&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以在 Jenkins 中创建一个 Pipeline 任务，将上述脚本复制到 Script 区域中，保存后触发构建，不过在这之前需要在 Jenkins 中安装和配置好 Kubernetes Plugin 和 Docker Plugin。在实际的开发中，我们可以将上述 Pipeline 脚本放入到 Jenkinsfile 中，与代码一同提交到代码库，将 Pipeline 任务的脚本配置类型修改为 Pipeline Script from SCM，引用代码库中 Pipeline 脚本进行构建。</p><p>下图为在 Pipeline 中构建 user 服务的结果视图，绿色表示该 Stage 执行成功。</p>`,51),y=s('<p>Pipeline 中构建 user 服务的结果视图</p><br><br><p>Pipeline 中构建 user 服务的结果视图</p><br><br><br><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>持续集成和自动化测试能够对开发代码进行快速校验和反馈，帮助开发人员更早地发现代码中的集成 Bug 并进行修改，有效提高团队的开发效率。</p><p>在本课时，我们主要介绍了如何通过 Jenkins 对服务进行持续集成和自动化测试。我们借助了 Jenkins Pipeline 的能力， 把 user 服务的代码从代码库拉取出来打包成 user 镜像，并将镜像部署到 Kubernetes 集群，最后还通过 go test 对 user 服务中提供的 HTTP 接口进行测试。</p><p>其实除了手动触发构建外，Jenkins 中还支持多种触发器，比如通过 Webhook 监听代码库中代码的变化，在代码库发生提交或者合并时自动触发一次构建任务，这能大大提升持续集成的效率。自动化测试也存在其他多种多样的方式，比如借助 JMeter 和 Jenkins 对服务进行性能测试等。</p><p>希望通过本课时的学习能够帮助你了解持续集成和自动化测试的基本流程，并掌握使用 Jenkins 进行持续集成的能力。</p><p>最后，关于该课时的内容，如果你有什么独到的见解，欢迎在留言区与我分享。</p>',13);function i(u,F,d,g,m,C){const n=o("Image");return e(),t("div",null,[r,a(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/3D/B2/CgqCHl8qbbqAISHvAADBs7kPsgA183.png"}),p(),E,a(n,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/3D/A7/Ciqc1F8qbhyAEIumAAFlU8qnllQ650.png"}),p(),y])}const q=l(c,[["render",i]]);export{D as __pageData,q as default};
