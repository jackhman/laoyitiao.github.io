import{_ as o,j as e,o as t,g as c,k as l,h as s,Q as p,s as a}from"./chunks/framework.cfb14fe0.js";const R=JSON.parse('{"title":"第02讲：链路追踪利器，快速上手SkyWalking","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1722) 第02讲：链路追踪利器，快速上手 SkyWalking.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1722) 第02讲：链路追踪利器，快速上手 SkyWalking.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1722) 第02讲：链路追踪利器，快速上手 SkyWalking.md"},y=p('<h1 id="第02讲-链路追踪利器-快速上手skywalking" tabindex="-1">第02讲：链路追踪利器，快速上手SkyWalking <a class="header-anchor" href="#第02讲-链路追踪利器-快速上手skywalking" aria-label="Permalink to &quot;第02讲：链路追踪利器，快速上手SkyWalking&quot;">​</a></h1><p>在上一课时中，我们介绍了 SkyWalking 的整体架构以及 Service、Endpoint、ServiceInstance 等核心概念。本课时将带领同学们搭建 SkyWalking 的环境搭建，并上手使用 SkyWalking。</p><h3 id="skywalking-环境搭建" tabindex="-1">SkyWalking 环境搭建 <a class="header-anchor" href="#skywalking-环境搭建" aria-label="Permalink to &quot;SkyWalking 环境搭建&quot;">​</a></h3><p>在本课时中，我们将安装并体验 SkyWalking 的基本使用，下面是使用到的相关软件包：</p><ul><li>apache-skywalking-apm-6.2.0.tar.gz</li></ul><p>下载地址：<a href="https://archive.apache.org/dist/skywalking/6.2.0/" target="_blank" rel="noreferrer">https://archive.apache.org/dist/skywalking/6.2.0/</a></p><ul><li>elasticsearch-6.6.1.tar.gz</li></ul><p>下载地址：<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.1.tar.gz" target="_blank" rel="noreferrer">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.1.tar.gz</a></p><ul><li>kibana-6.6.1-darwin-x86_64.tar.gz</li></ul><p>下载地址：<a href="https://artifacts.elastic.co/downloads/kibana/kibana-6.6.1-darwin-x86_64.tar.gz" target="_blank" rel="noreferrer">https://artifacts.elastic.co/downloads/kibana/kibana-6.6.1-darwin-x86_64.tar.gz</a></p><h3 id="elasticsearch-安装" tabindex="-1">ElasticSearch 安装 <a class="header-anchor" href="#elasticsearch-安装" aria-label="Permalink to &quot;ElasticSearch 安装&quot;">​</a></h3><p>下载完 elasticsearch-6.6.1.tar.gz 包之后，使用如下命令进行解压缩：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zxf elasticsearch</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.6</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zxf elasticsearch</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.6</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">.tar.gz</span></span></code></pre></div><p>解压完成之后，进入得到的 elasticsearch-6.6.1 目录中，执行如下命令后台启动 ElasticSearch 服务：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">elasticsearch </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">elasticsearch </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d</span></span></code></pre></div><p>ElasticSearch 启动的相关日志可以通过下面的命令进行查看：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tail </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f logs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">elasticsearch.log</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tail </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f logs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">elasticsearch.log</span></span></code></pre></div><p>最后，我们可以请求 localhost:9200 这地址，看到下图输出的这段 JSON 即安装成功：</p>',18),E=p(`<h3 id="kibana-安装" tabindex="-1">Kibana 安装 <a class="header-anchor" href="#kibana-安装" aria-label="Permalink to &quot;Kibana 安装&quot;">​</a></h3><p>Kibana 是一个开源的分析和可视化平台，主要用于和 Elasticsearch 一起工作，轻松实现 ElasticSearch 的查询和管理。这里使用 ElasticSearch 作为 SkyWalking 的后端存储，在后续调试 SkyWalking 源码时，可能会直接查询 ElasticSearch 中的某些索引，所以这里一并安装 Kibana。</p><p>下载完 kibana-6.6.1-darwin-x86_64.tar.gz 安装包之后，我们使用如下命令进行解压：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zxf  kibana</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.6</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">darwin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x86_64.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zxf  kibana</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.6</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">darwin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x86_64.tar.gz</span></span></code></pre></div><p>解压完成后进入 kibana-6.6.1-darwin-x86_64 目录，修改 config/kibana.yml 文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 指定上述 ElasticSearch监听的地址，其他配置不变</span></span>
<span class="line"><span style="color:#E1E4E8;">elasticsearch.hosts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;http://localhost:9200&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 指定上述 ElasticSearch监听的地址，其他配置不变</span></span>
<span class="line"><span style="color:#24292E;">elasticsearch.hosts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;http://localhost:9200&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>之后执行如下命令，启动 Kibana 服务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">kibana</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">kibana</span></span></code></pre></div><p>最后我们通过访问 <a href="http://localhost:5601/" target="_blank" rel="noreferrer">http://localhost:5601/</a> 地址即可进入 Kibana 界面：</p>`,9),i=p('<h3 id="skywalking-安装" tabindex="-1">SkyWalking 安装 <a class="header-anchor" href="#skywalking-安装" aria-label="Permalink to &quot;SkyWalking 安装&quot;">​</a></h3><p>下载完成 apache-skywalking-apm-6.2.0.tar.gz 包之后，执行如下命令解压缩：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zxf apache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">skywalking</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">apm</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zxf apache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">skywalking</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">apm</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.tar.gz</span></span></code></pre></div><p>解压完成之后进入 apache-skywalking-apm-bin 目录，编辑 config/application.yml 文件，将其中 ElasticSearch 配置项以及其子项的全部注释去掉，将 h2 配置项及其子项全部注释掉，如下图所示，这样 SkyWalking 就从默认的存储 h2 切换成了 ElasticSearch ：</p>',4),g=p(`<p>接下来执行 ./bin/startup.sh 文件即可启动 SkyWalking OAP 以及 UI 界面，看到的输出如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">startup.sh</span></span>
<span class="line"><span style="color:#E1E4E8;">SkyWalking </span><span style="color:#79B8FF;">OAP</span><span style="color:#E1E4E8;"> started successfully</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">SkyWalking Web Application started successfully</span><span style="color:#F97583;">!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">startup.sh</span></span>
<span class="line"><span style="color:#24292E;">SkyWalking </span><span style="color:#005CC5;">OAP</span><span style="color:#24292E;"> started successfully</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">SkyWalking Web Application started successfully</span><span style="color:#D73A49;">!</span></span></code></pre></div><p>我们可以在 logs/skywalking-oap-server.log 以及 logs/webapp.log 两个日志文件中查看到 SkyWalking OAP 以及 UI 项目的相关日志，这里不再展开。</p><p>最后访问 <a href="http://127.0.0.1:8080/" target="_blank" rel="noreferrer">http://127.0.0.1:8080/</a> 即可看到 SkyWalking 的 Rocketbot UI界面。</p><h3 id="skywalking-agent-目录结构" tabindex="-1">Skywalking Agent 目录结构 <a class="header-anchor" href="#skywalking-agent-目录结构" aria-label="Permalink to &quot;Skywalking Agent 目录结构&quot;">​</a></h3><p>SkyWalking Agent 使用了 Java Agent 技术，可以在无需手工埋点的情况下，通过 JVM 接口在运行时将监控代码段插入已有 Java 应用中，实现对 Java 应用的监控。SkyWalking Agent 会将服务运行过程中获得的监控数据通过 gRPC 发送给后端的 OAP 集群进行分析和存储。</p><p>SkyWalking 目前提供的 Agent 插件在 apache-skywalking-apm-bin/agent 目录下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">agent</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── activations</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── apm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">toolkit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">log4j</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">1.x</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">activation</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.jar</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   └── apm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">toolkit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">trace</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">activation</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.jar</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── config # Agent 配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   └── agent.config</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── logs # 日志文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── optional</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugins # 可选插件</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── apm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">customize</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">enhance</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.jar</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── apm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">gson</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">2.x</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.jar</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   └── ... ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── plugins # 当前生效插件</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── apm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">activemq</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">5.x</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.jar</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── tomcat</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7.x</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">8.x</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.jar</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   ├── spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">commons</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.jar</span></span>
<span class="line"><span style="color:#E1E4E8;">    │   └── ... ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    └── skywalking</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">agent.jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">agent</span></span>
<span class="line"><span style="color:#24292E;">    ├── activations</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── apm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">toolkit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">log4j</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">1.x</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">activation</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.jar</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── ...</span></span>
<span class="line"><span style="color:#24292E;">    │   └── apm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">toolkit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">trace</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">activation</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.jar</span></span>
<span class="line"><span style="color:#24292E;">    ├── config # Agent 配置文件</span></span>
<span class="line"><span style="color:#24292E;">    │   └── agent.config</span></span>
<span class="line"><span style="color:#24292E;">    ├── logs # 日志文件</span></span>
<span class="line"><span style="color:#24292E;">    ├── optional</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugins # 可选插件</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── apm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">customize</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">enhance</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.jar</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── apm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">gson</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">2.x</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.jar</span></span>
<span class="line"><span style="color:#24292E;">    │   └── ... ...</span></span>
<span class="line"><span style="color:#24292E;">    ├── plugins # 当前生效插件</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── apm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">activemq</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">5.x</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.jar</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── tomcat</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7.x</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">8.x</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.jar</span></span>
<span class="line"><span style="color:#24292E;">    │   ├── spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">commons</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.jar</span></span>
<span class="line"><span style="color:#24292E;">    │   └── ... ...</span></span>
<span class="line"><span style="color:#24292E;">    └── skywalking</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">agent.jar</span></span></code></pre></div><p>其中，agent.config 文件是 SkyWalking Agent 的唯一配置文件。plugins 目录存储了当前 Agent 生效的插件。optional-plugins 目录存储了一些可选的插件（这些插件可能会影响整个系统的性能或是有版权问题），如果需要使用这些插件，需将相应 jar 包移动到 plugins 目录下。最后的 skywalking-agent.jar 是 Agent 的核心 jar 包，由它负责读取 agent.config 配置文件，加载上述插件 jar 包，运行时收集到 的 Trace 和 Metrics 数据也是由它发送到 OAP 集群的。</p><h3 id="skywalking-demo-示例" tabindex="-1">skywalking-demo 示例 <a class="header-anchor" href="#skywalking-demo-示例" aria-label="Permalink to &quot;skywalking-demo 示例&quot;">​</a></h3><p>下面搭建 demo-webapp、demo-provider 两个 Spring-Boot 项目，并且接入 SkyWalking Agent 进行监控，具体结构如下：</p>`,11),d=p(`<p>demo-webapp 会 Dubbo 远程调用 demo-provider 的接口，而 Dubbo 依赖了 Zookeeper，所以要先安装 Zookeeper。首先下载 zookeeper-3.4.14.tar.gz 包（下载地址：<a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/" target="_blank" rel="noreferrer">https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/</a>）。下载完成之后执行如下命令解压缩：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zxf zookeeper</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">14</span><span style="color:#E1E4E8;">.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zxf zookeeper</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">14</span><span style="color:#24292E;">.tar.gz</span></span></code></pre></div><p>解压完成之后，进入 zookeeper-3.4.14 目录，拷贝 conf/zoo_sample.cfg 文件并重命名为 conf/zoo.cfg，之后执行如下命令启动 Zookeeper：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">zkServer.sh start</span></span>
<span class="line"><span style="color:#E1E4E8;"># 下面为输出内容</span></span>
<span class="line"><span style="color:#E1E4E8;">ZooKeeper JMX enabled by </span><span style="color:#F97583;">default</span></span>
<span class="line"><span style="color:#E1E4E8;">Using config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Users</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">xxx</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">zookeeper</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">14</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">conf</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">zoo.cfg # 配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">Starting zookeeper ... STARTED # 启动成功</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">zkServer.sh start</span></span>
<span class="line"><span style="color:#24292E;"># 下面为输出内容</span></span>
<span class="line"><span style="color:#24292E;">ZooKeeper JMX enabled by </span><span style="color:#D73A49;">default</span></span>
<span class="line"><span style="color:#24292E;">Using config</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Users</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">xxx</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">zookeeper</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">14</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">conf</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">zoo.cfg # 配置文件</span></span>
<span class="line"><span style="color:#24292E;">Starting zookeeper ... STARTED # 启动成功</span></span></code></pre></div><p>下面在 IDEA 中创建 skywalking-demo 项目，并在其中创建 demo-api、demo-webapp、demo-provider 两个 Module，如下图所示：</p>`,5),F=p(`<p>在 skywalking-demo 下面的 pom.xml 中，将父 pom 指向 spring-boot-starter-parent 并添加 demo-api 作为公共依赖，如下所示：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">project</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">...</span><span style="color:#FDAEB7;font-style:italic;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">modelVersion</span><span style="color:#E1E4E8;">&gt;4.0.0&lt;/</span><span style="color:#FDAEB7;font-style:italic;">modelVersion</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">parent</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-parent&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;2.1.1.RELEASE&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">parent</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;com.xxx&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;skywalking-demo&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">packaging</span><span style="color:#E1E4E8;">&gt;pom&lt;/</span><span style="color:#FDAEB7;font-style:italic;">packaging</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;1.0-SNAPSHOT&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">modules</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">module</span><span style="color:#E1E4E8;">&gt;demo-api&lt;/</span><span style="color:#FDAEB7;font-style:italic;">module</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">module</span><span style="color:#E1E4E8;">&gt;demo-webapp&lt;/</span><span style="color:#FDAEB7;font-style:italic;">module</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">module</span><span style="color:#E1E4E8;">&gt;demo-provider&lt;/</span><span style="color:#FDAEB7;font-style:italic;">module</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">modules</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">dependencyManagement</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;com.xxx&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;demo-api&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;1.0-SNAPSHOT&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependencyManagement</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">project</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">project</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">...</span><span style="color:#B31D28;font-style:italic;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">modelVersion</span><span style="color:#24292E;">&gt;4.0.0&lt;/</span><span style="color:#B31D28;font-style:italic;">modelVersion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">parent</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-parent&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;2.1.1.RELEASE&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">parent</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;com.xxx&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;skywalking-demo&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">packaging</span><span style="color:#24292E;">&gt;pom&lt;/</span><span style="color:#B31D28;font-style:italic;">packaging</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;1.0-SNAPSHOT&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">modules</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">module</span><span style="color:#24292E;">&gt;demo-api&lt;/</span><span style="color:#B31D28;font-style:italic;">module</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">module</span><span style="color:#24292E;">&gt;demo-webapp&lt;/</span><span style="color:#B31D28;font-style:italic;">module</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">module</span><span style="color:#24292E;">&gt;demo-provider&lt;/</span><span style="color:#B31D28;font-style:italic;">module</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">modules</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">dependencyManagement</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;com.xxx&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;demo-api&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;1.0-SNAPSHOT&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#B31D28;font-style:italic;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">dependencyManagement</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">project</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在 demo-api 中只定义了 HelloService 接口，它是 Dubbo Provider 和 Dubbo Consumer 依赖的公共接口，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="demo-provider-模块" tabindex="-1">demo-provider 模块 <a class="header-anchor" href="#demo-provider-模块" aria-label="Permalink to &quot;demo-provider 模块&quot;">​</a></h3><p>这里的 demo-provider 扮演了 Dubbo Provider 的角色，在其 pom.xml 文件中引入了 Spring Boot 以及集成 Dubbo 相关的依赖，如下所示：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 引入公共API接口 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;com.xxx&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;demo-api&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;1.0-SNAPSHOT&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 引入spring-boot-starter以及dubbo和curator的依赖 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.boot&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;dubbo-spring-boot-starter&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;0.2.0&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- Spring Boot相关依赖 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 引入公共API接口 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;com.xxx&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;demo-api&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;1.0-SNAPSHOT&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 引入spring-boot-starter以及dubbo和curator的依赖 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.boot&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;dubbo-spring-boot-starter&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;0.2.0&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- Spring Boot相关依赖 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">dependencies</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>demo-provider 模块中的 DefaultHelloService 实现了 HelloService 接口，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultHelloService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception{</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultHelloService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception{</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 resource/application.yml 配置文件中将 DefaultHelloService 实现注册到 Zookeeper上对外暴露为 Dubbo Provider，具体配置如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">dubbo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider # Dubbo Provider 的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    # 注册中心地址，即前面启动的Zookeeper地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">zookeeper</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//127.0.0.1:2181 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">protocol</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: dubbo # 指定通信协议</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20880</span><span style="color:#E1E4E8;"> # 通信端口，这里指的是与消费者间的通信协议与端口</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">provider</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> # 配置全局调用服务超时时间，dubbo默认是1s，肯定不够用呀</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">retries</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> # 不进行重试</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">dubbo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider # Dubbo Provider 的名字</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    # 注册中心地址，即前面启动的Zookeeper地址</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">zookeeper</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//127.0.0.1:2181 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">protocol</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: dubbo # 指定通信协议</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20880</span><span style="color:#24292E;"> # 通信端口，这里指的是与消费者间的通信协议与端口</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">provider</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> # 配置全局调用服务超时时间，dubbo默认是1s，肯定不够用呀</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">retries</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> # 不进行重试</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span></code></pre></div><p>在 DemoProviderApplication 中提供 Spring Boot 的启动 main() 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableDubbo</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 添加对 Dubbo支持的注解</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoProviderApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(DemoProviderApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableDubbo</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 添加对 Dubbo支持的注解</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoProviderApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(DemoProviderApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了引入 Skywalking Agent 插件，还需要将 apache-skywalking-apm-bin/agent/config 目录下的 agent.config 配置文件拷贝到 demo-provider 模块的 resource 目录下，并修改其中的 agent.service_name：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># The service name </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UI</span></span>
<span class="line"><span style="color:#E1E4E8;">agent.service_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">\${</span><span style="color:#B392F0;">SW_AGENT_NAME</span><span style="color:#E1E4E8;">:demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># The service name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UI</span></span>
<span class="line"><span style="color:#24292E;">agent.service_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">\${</span><span style="color:#6F42C1;">SW_AGENT_NAME</span><span style="color:#24292E;">:demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider}</span></span></code></pre></div><p>很明显，agent.config 是一个 KV 结构的配置文件，类似于 properties 文件，value 部分使用 &quot;\${}&quot; 包裹，其中使用冒号（&quot;:&quot;）分为两部分，前半部分是可以覆盖该配置项的系统环境变量名称，后半部分为默认值。例如这里的 agent.service_name 配置项，如果系统环境变量中指定了 SW_AGENT_NAME 值（注意，全是大写），则优先使用环境变量中指定的值，如果环境变量未指定，则使用 demo-provider 这个默认值。</p><p>除了系统环境变量的覆盖方式，SkyWalking Agent 还支持另外两种覆盖默认值的方式：</p><ul><li><strong>JVM 配置覆盖</strong></li></ul><p>例如这里的 agent.service_name 配置项，如果在 JVM 启动之前，明确中指定了下面的 JVM 配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dskywalking.agent.service_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider</span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#9ECBFF;">&quot;skywalking.&quot;</span><span style="color:#E1E4E8;">是 Skywalking环境变量的默认前缀</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dskywalking.agent.service_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider</span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#032F62;">&quot;skywalking.&quot;</span><span style="color:#24292E;">是 Skywalking环境变量的默认前缀</span></span></code></pre></div><p>则会使用该配置值覆盖 agent.config 配置文件中默认值。</p><ul><li><strong>探针配置覆盖</strong></li></ul><p>如果将 Java Agent 配置为如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">javaagent</span><span style="color:#F97583;">:/</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">skywalking</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">agent.jar</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">agent.service_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider</span></span>
<span class="line"><span style="color:#E1E4E8;"># 默认格式是 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">javaagent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">agent.jar</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[option1]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[value1],[option2]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[value2]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">javaagent</span><span style="color:#D73A49;">:/</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">skywalking</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">agent.jar</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">agent.service_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider</span></span>
<span class="line"><span style="color:#24292E;"># 默认格式是 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">javaagent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">agent.jar</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[option1]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[value1],[option2]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[value2]</span></span></code></pre></div><p>则会使用该 Java Agent 配置值覆盖 agent.config 配置文件中 agent.service_name 默认值。</p><p>如果四种配置同时出现，则优先级如下：</p><pre><code>探针配置 &gt; JVM配置 &gt; 系统环境变量配置 &gt; agent.config文件默认值
</code></pre><p>编辑好 agent.config 配置文件之后，我们需要在启动 demo-provider 之前通过参数告诉 JVM SkyWalking Agent 配置文件的位置，IDEA 中的配置如下图所示：</p>`,28),h=p(`<p>最后启动 DemoProviderApplication 这个入口类，可以看到如下输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 查找到 agent.config 配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">INFO </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">574</span><span style="color:#E1E4E8;"> main SnifferConfigInitializer </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  Config file found in ... agent.config. </span></span>
<span class="line"><span style="color:#E1E4E8;"># 查找到 agent目录</span></span>
<span class="line"><span style="color:#E1E4E8;">DEBUG </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">02</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">650</span><span style="color:#E1E4E8;"> main AgentPackagePath </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  The beacon </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">location</span><span style="color:#E1E4E8;"> is jar:file:/Users/xxx/... </span></span>
<span class="line"><span style="color:#E1E4E8;"># Dubbo Provider 注册成功</span></span>
<span class="line"><span style="color:#E1E4E8;">2020-02-01 12:12:16.105  INFO 58600 --- [main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Register: dubbo:</span><span style="color:#6A737D;">//172.17.32.91:20880/com.xxx.service.HelloService</span></span>
<span class="line"><span style="color:#E1E4E8;"># demo-provider 启动成功</span></span>
<span class="line"><span style="color:#E1E4E8;">2020-02-01 12:12:16.269  INFO 58600 --- [           main] com.xxx.DemoProviderApplication          : Started DemoProviderApplication in 4.635 seconds (JVM running for 9.005)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 查找到 agent.config 配置文件</span></span>
<span class="line"><span style="color:#24292E;">INFO </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">07</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">574</span><span style="color:#24292E;"> main SnifferConfigInitializer </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  Config file found in ... agent.config. </span></span>
<span class="line"><span style="color:#24292E;"># 查找到 agent目录</span></span>
<span class="line"><span style="color:#24292E;">DEBUG </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">02</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">07</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">650</span><span style="color:#24292E;"> main AgentPackagePath </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  The beacon </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">location</span><span style="color:#24292E;"> is jar:file:/Users/xxx/... </span></span>
<span class="line"><span style="color:#24292E;"># Dubbo Provider 注册成功</span></span>
<span class="line"><span style="color:#24292E;">2020-02-01 12:12:16.105  INFO 58600 --- [main] c.a.d.r.zookeeper.ZookeeperRegistry      :  [DUBBO] Register: dubbo:</span><span style="color:#6A737D;">//172.17.32.91:20880/com.xxx.service.HelloService</span></span>
<span class="line"><span style="color:#24292E;"># demo-provider 启动成功</span></span>
<span class="line"><span style="color:#24292E;">2020-02-01 12:12:16.269  INFO 58600 --- [           main] com.xxx.DemoProviderApplication          : Started DemoProviderApplication in 4.635 seconds (JVM running for 9.005)</span></span></code></pre></div><h3 id="demo-webapp-模块" tabindex="-1">demo-webapp 模块 <a class="header-anchor" href="#demo-webapp-模块" aria-label="Permalink to &quot;demo-webapp 模块&quot;">​</a></h3><p>完成 demo-provider 模块的启动之后，我们继续来开发 demo-webapp 模块，其 pom.xml 与 demo-provider 中的 pom.xml 相比，多引入了 spring-boot 对 Web开发的依赖，以及 SkyWalking 提供的 apm-toolkit-trace 依赖用来获取 TraceId：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- apm-toolkit-trace 这个依赖主要用来获取 TraceId --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.skywalking&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;apm-toolkit-trace&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;6.2.0&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- apm-toolkit-trace 这个依赖主要用来获取 TraceId --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;org.apache.skywalking&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;apm-toolkit-trace&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;6.2.0&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>首先，在 HelloWorldController 中提供了两个接口：</p><ul><li><strong>/hello/{words} 接口</strong>：通过 Dubbo 远程调用 demo-provider 暴露的接口。</li><li><strong>/err 接口</strong>：直接抛出 RuntimeException 异常。</li></ul><p>HelloWorldController 的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloWorldController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Reference</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> HelloService helloService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello/{words}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;words&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">words</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception{</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// TraceContext 工具类定义在 apm-toolkit-trace 依赖包中</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;traceId:{}&quot;</span><span style="color:#E1E4E8;">, TraceContext.</span><span style="color:#B392F0;">traceId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        ActiveSpan.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello-trace&quot;</span><span style="color:#E1E4E8;">, words);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String say </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> helloService.</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(words);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> say;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/err&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">err</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String traceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  TraceContext.</span><span style="color:#B392F0;">traceId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;traceId:{}&quot;</span><span style="color:#E1E4E8;">, traceId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ActiveSpan.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error-trace activation&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;err&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloWorldController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Reference</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HelloService helloService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello/{words}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;words&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">words</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception{</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// TraceContext 工具类定义在 apm-toolkit-trace 依赖包中</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;traceId:{}&quot;</span><span style="color:#24292E;">, TraceContext.</span><span style="color:#6F42C1;">traceId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        ActiveSpan.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello-trace&quot;</span><span style="color:#24292E;">, words);</span></span>
<span class="line"><span style="color:#24292E;">        String say </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> helloService.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(words);</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> say;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/err&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">err</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        String traceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  TraceContext.</span><span style="color:#6F42C1;">traceId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;traceId:{}&quot;</span><span style="color:#24292E;">, traceId);</span></span>
<span class="line"><span style="color:#24292E;">        ActiveSpan.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error-trace activation&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;err&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>在 resources/application.yml 文件中会配置 demo-webapp 监听的端口、Zookeeper 地址以及 Dubbo Consumer 的名称等等，具体配置如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">8000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">dubbo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">webapp # Dubbo Consumer名字</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">zookeeper</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//127.0.0.1:2181 # 注册中心地址，即 Zookeeper地址</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">8000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">dubbo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">webapp # Dubbo Consumer名字</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">zookeeper</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//127.0.0.1:2181 # 注册中心地址，即 Zookeeper地址</span></span></code></pre></div><p>demo-webpp 模块也需要在 resource 目录下添加 agent.config 配置文件，并修改其 agent.service_name 配置项，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># The service name in UI</span></span>
<span class="line"><span style="color:#E1E4E8;">agent.service_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">\${SW_AGENT_NAME</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">webapp}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># The service name in UI</span></span>
<span class="line"><span style="color:#24292E;">agent.service_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">\${SW_AGENT_NAME</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">webapp}</span></span></code></pre></div><p>demo-webpp 模块的入口 main() 方法与 demo-provider 相同，不再赘述。</p><p>为了接入 SkyWalking Agent，启动 demo-webapp 项目之前也需要配置相应的 VM options 参数，指定 agent.config 配置文件的地址，如下图所示：</p>`,15),D=a("p",null,[s("最后，启动 demo-webapp 项目，通过浏览器访问 "),a("a",{href:"http://localhost:8000/hello/xxx",target:"_blank",rel:"noreferrer"},"http://localhost:8000/hello/xxx"),s(" 地址得到正常相应，访问 "),a("a",{href:"http://localhost:8000/err",target:"_blank",rel:"noreferrer"},"http://localhost:8000/err"),s(" 得到 500 响应，即表示启动成功。")],-1),A=a("p",null,"到此为止，SkyWalking Agent 的基本接入方式就介绍完了，在后面分析和改造 SkyWalking 源码时，还可以使用 demo-webapp 和 demo-provider 这两个应用来产生 Trace 和 Metrics 数据。",-1),u=a("h3",{id:"skywalking-rocketbot-使用",tabindex:"-1"},[s("SkyWalking Rocketbot 使用 "),a("a",{class:"header-anchor",href:"#skywalking-rocketbot-使用","aria-label":'Permalink to "SkyWalking Rocketbot 使用"'},"​")],-1),k=a("p",null,"搭建完 SkyWalking 环境以及相关示例之后，我们来看如何使用 SkyWalking 提供的 UI 界面------ Skywalking Rocketbot。在前面执行的 ./bin/startup.sh 脚本，除了启动后端 OAP 服务，同时还会启动 Skywalking Rocketbot（位于 webapp 目录下的 skywalking-webapp.jar）。",-1),v=a("p",null,"如下图所示，在 Skywalking Rocketbot 首页顶部（1）处，有四个主 Tab 页，在【仪表盘】这个 Tab 中，（2）处可以选择查询的服务（Service）、端点（Endpoint） 以及服务实例（ServiceInstance）。在（3）处可以选择展示的不同维度，下图展示了 Global 这个全局视图：",-1),f=p("<p>其中有五个面板（（4）~（8）），分别是：</p><ul><li><strong>Global Heatmap 面板</strong>：热力图，从全局展示了某段时间请求的热度。</li><li><strong>Global Percent Response 面板</strong> ：展示了全局请求响应时间的 P99、P95、P75 等分位数。</li><li><strong>Global Brief 面板</strong>：展示了 SkyWalking 能感知到的 Service、Endpoint 的个数。</li><li><strong>Global Top Troughput 面板</strong>：展示了吞吐量前几名的服务。</li><li><strong>Global Top Slow Endpoint 面板</strong>：展示了耗时前几名的 Endpoint。</li></ul><p>除了 SkyWalking Rocketbot 默认提供的这些面板，我们还可以点击（2）处左边的锁型按钮，自定义 Global 面板。另外，我们还可以通过（9）处的时间选择框选择自定义查询的时间段。</p><p>将（3）处切换到 Service 面板，可以看到针对 Service 的监控面板，如下图所示：</p>",4),b=p("<ul><li><strong>Service (Avg) ResponseTime 面板</strong>：展示了指定服务的（平均）耗时。</li><li><strong>Service (Avg) Throughput 面板</strong>：展示了指定服务的（平均）吞吐量。</li><li><strong>Service (Avg) SLA 面板</strong>：展示了指定服务的（平均）SLA（Service Level Agreement，服务等级协议）。</li><li><strong>Service Percent Response 面板</strong>：展示了指定服务响应时间的分位数。</li><li><strong>Service Slow Endpoint 面板</strong>：展示了指定服务中耗时比较长的 Endpoint 信息。</li><li><strong>Running ServiceInstance 面板</strong>：展示了指定服务下的实例信息。</li></ul><p>将（3）处切换到 Endpoint 面板，可以看到针对 Endpoint 的监控面板，基本功能与 Service 面板类似，这里不再展开。</p><p>将（3）处切换到 Instance 面板，可以看到针对 ServiceInstance 的监控面板，如下图所示：</p>",3),B=a("p",null,"在 ServiceInstance 面板中展示了很多 ServiceInstance 相关的监控信息，例如，JVM 内存使用情况、GC 次数、GC 耗时、CPU 使用率、ServiceInstance SLA 等等信息，这里不再一一展开介绍。",-1),m=a("p",null,"下面我们切换到【拓扑图】这个主 Tab，如下图所示，在（1）处展示当前整个业务服务的拓扑图。点击拓扑图中的任意节点，可在（2）处看到服务相应的状态信息，其中包括响应的平均耗时、SLA 等监控信息。点击拓扑图中任意一条边，可在（3）处看到一条调用链路的监控信息，其中会分别从客户端（上游调用方）和服务端（下游接收方）来观测这条调用链路的状态，其中展示了该条链路的耗时、吞吐量、SLA 等信息：",-1),C=a("p",null,'下面我们切换到【追踪】这个主 Tab来查询 Trace 信息，如下图所示。在（1）、（2）处可以选择 Trace 的查询条件，其中可以指定 Trace 涉及到的 Service、ServiceInstance、Endpoint 以及Trace 的状态继续模糊查询，还可以指定 TraceId 和时间范围进行精确查询。在（3）处展示了 Trace 的简略信息，下图中 "/err" 接口这条 Trace 被显示为红色表示该 Trace 关联的请求出现了异常。在（4）和（5）处展示了 Trace 的具体信息以及所有 Span 信息，我们可以通过（6）处按钮调整 Span 的展示方式：',-1),_=a("p",null,'点击 Trace 中的 Span，就可以将该 Span 的具体信息展示出来，如下下图所示，点击"/err" 接口相关 Trace 中的 Span，即可看到相应的 TRuntimeException 异常信息：',-1),S=a("p",null,"最后，我们将主 Tab 也切换到【告警】，这里展示了 Skywalking 发出来的告警信息，如下图所示，这里也提供了相应的查询条件和关键字搜索框。",-1),I=a("h3",{id:"总结",tabindex:"-1"},[s("总结 "),a("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),w=a("p",null,"本课时搭建 SkyWalking 的运行环境，完成 ElasticSearch、Kibana、Skywalking 等的安装，并搭建了 skywalking-demo 项目作为演示示例，带同学们上手体验了 Skywalking Agent 的接入的流程。",-1),x=a("p",null,"最后介绍了 SkyWalking Rocketbot UI 界面强大的功能，包括 Service、Endpoint、ServiceInstance 等不同级别的监控，展示了整个服务的拓扑图、Trace 查询以及告警信息查询等功能。",-1);function T(q,j,P,M,W,z){const n=e("Image");return t(),c("div",null,[y,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/CgpOIF5nHMCAYb-sAABorqyP-yg322.png"}),s(),E,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/Cgq2xl5nHMCAABXxAAEuKrTbLVw100.png"}),s(),i,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/CgpOIF5nHMCAH0O5AAfpg2pNpsw425.png"}),s(),g,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/Cgq2xl5nHMCAB9f7AAB00fhMQNk918.png"}),s(),d,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/CgpOIF5nHMCALuSFAADAqK6QHPc083.png"}),s(),F,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/Cgq2xl5nHMCAPGmdAAJd59aKb9w948.png"}),s(),h,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/CgpOIF5nHMCAJ8EKAAIq6sznBy0160.png"}),s(),D,A,u,k,v,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/Cgq2xl5nHMCASh6sAAFikMiwg_o077.png"}),s(),f,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/CgpOIF5nHMGACMCRAAEzi1SuLKw557.png"}),s(),b,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/Cgq2xl5nHMGAGZlwAAHCkizkpVs483.png"}),s(),B,m,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/CgpOIF5nHMGAceZOAAHozO2Mq14310.png"}),s(),C,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/Cgq2xl5nHMGAUPpGAAEyWm6Aqo8753.png"}),s(),_,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/CgpOIF5nHMGAb41NAAHBIhP98Z0352.png"}),s(),S,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/71/BD/Cgq2xl5nHMGAVek0AAM9HlRD-nQ059.png"}),s(),I,w,x])}const V=o(r,[["render",T]]);export{R as __pageData,V as default};
