import{_ as o,j as e,o as t,g as r,k as a,h as s,s as p,Q as l}from"./chunks/framework.4e7d56ce.js";const q=JSON.parse('{"title":"14DDT：博采众长，数据驱动的秘诀（二）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4674) 14  DDT：博采众长，数据驱动的秘诀（二）.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4674) 14  DDT：博采众长，数据驱动的秘诀（二）.md","lastUpdated":1696682708000}'),c={name:"posts/devops/114-测试开发入门与实战文档/(4674) 14  DDT：博采众长，数据驱动的秘诀（二）.md"},y=p("h1",{id:"_14ddt-博采众长-数据驱动的秘诀-二",tabindex:"-1"},[s("14DDT：博采众长，数据驱动的秘诀（二） "),p("a",{class:"header-anchor",href:"#_14ddt-博采众长-数据驱动的秘诀-二","aria-label":'Permalink to "14DDT：博采众长，数据驱动的秘诀（二）"'},"​")],-1),E=p("p",null,"通过上一节课的学习，你应该解了数据驱动的基本用法，理解了 DDT 的原理，对于各种格式的数据，都可以轻松地使用 DDT 进行数据驱动。",-1),i=p("p",null,"今天我将带领你深入 pytest 框架中的数据驱动。在 pytest 中，数据驱动是经由 pytest 自带的 pytest.mark.parametrize() 来实现的。",-1),u=l(`<h3 id="pytest-mark-parametrize-实现数据驱动" tabindex="-1">pytest.mark.parametrize 实现数据驱动 <a class="header-anchor" href="#pytest-mark-parametrize-实现数据驱动" aria-label="Permalink to &quot;pytest.mark.parametrize 实现数据驱动&quot;">​</a></h3><p>pytest.mark.parametrize 是 pytest 的内置装饰器，它允许你在 function 或者 class 上定义多组参数和 fixture 来实现数据驱动。</p><p>@pytest.mark.parametrize() 装饰器接收两个参数：第一个参数以<strong>字符串</strong> 的形式存在，它代表能被<strong>被测试函数</strong> 所能接受的参数，如果被测试函数有多个参数，则以逗号分隔；第二个参数用于<strong>保存</strong>测试数据。如果只有一组数据，以列表的形式存在，如果有多组数据，以列表嵌套元组的形式存在（例如[0,1]或者[(0,1), (1,2)]）。</p><p>下面来看两组例子。</p><h4 id="_1-pytest-mark-parametrize-单参数" tabindex="-1">1.pytest.mark.parametrize 单参数 <a class="header-anchor" href="#_1-pytest-mark-parametrize-单参数" aria-label="Permalink to &quot;1.pytest.mark.parametrize 单参数&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># test_sample.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_equal</span><span style="color:#E1E4E8;">(number):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> number </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># test_sample.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_equal</span><span style="color:#24292E;">(number):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([])</span></span></code></pre></div><p>以上是单参数的一个例子，在这个例子中，test_equal 函数接收一个参数 number，这个参数有两组数据，分别是 1 和 0。</p><blockquote><p>注意：装饰器 pytest.mark.parametrize 的第一个参数里的参数名称必须与测试函数中的参数称保持一致。</p></blockquote><p>在 Pycharm 中，使用右键选择运行这段代码，结果如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> test session starts </span><span style="color:#F97583;">===</span></span>
<span class="line"><span style="color:#E1E4E8;">test_sample.py::test_equal[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]   </span><span style="color:#79B8FF;">PASSED</span><span style="color:#E1E4E8;">           [ </span><span style="color:#79B8FF;">50</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">test_sample.py::test_equal[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]   </span><span style="color:#79B8FF;">FAILED</span><span style="color:#E1E4E8;">           [</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> short test summary info </span><span style="color:#F97583;">===</span></span>
<span class="line"><span style="color:#79B8FF;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">py::test_equal[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> failed, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> passed </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.</span><span style="color:#FDAEB7;font-style:italic;">10s</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">==</span><span style="color:#24292E;"> test session starts </span><span style="color:#D73A49;">===</span></span>
<span class="line"><span style="color:#24292E;">test_sample.py::test_equal[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]   </span><span style="color:#005CC5;">PASSED</span><span style="color:#24292E;">           [ </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">test_sample.py::test_equal[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]   </span><span style="color:#005CC5;">FAILED</span><span style="color:#24292E;">           [</span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">===</span><span style="color:#24292E;"> short test summary info </span><span style="color:#D73A49;">===</span></span>
<span class="line"><span style="color:#005CC5;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">py::test_equal[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> failed, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> passed </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.</span><span style="color:#B31D28;font-style:italic;">10s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span></span></code></pre></div><p>可以看到，函数 test_equal 提供了两组参数 1 和 0，所以它也执行了 2 次。</p><h4 id="_2-pytest-mark-parametrize-多参数" tabindex="-1">2.pytest.mark.parametrize 多参数 <a class="header-anchor" href="#_2-pytest-mark-parametrize-多参数" aria-label="Permalink to &quot;2.pytest.mark.parametrize 多参数&quot;">​</a></h4><p>pytest.mark.parametrize 不仅支持单个参数，也可以支持多个参数，多个参数比较常见，因为在日常工作中，我们提供测试数据，不仅仅包括用于测试的数据， 还包括用于验证的数据，所以多参数还是比较常见的。</p><p>pytest.mark.parametrize 可以轻松支持多参数，请看下面的例子。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#6A737D;"># test_baidu.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestBaidu</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup_method</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.implicitly_wait(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;search_string, expect_string&#39;</span><span style="color:#E1E4E8;">, [(</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">), (</span><span style="color:#9ECBFF;">&#39;helloqa.com&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> (expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results) </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">teardown_method</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([</span><span style="color:#9ECBFF;">&quot;-m&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;baidu&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-v&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-k&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test_baidu_search&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test_baidu.py&quot;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#6A737D;"># test_baidu.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestBaidu</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup_method</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.implicitly_wait(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;search_string, expect_string&#39;</span><span style="color:#24292E;">, [(</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">), (</span><span style="color:#032F62;">&#39;helloqa.com&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">)])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> (expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results) </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">teardown_method</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([</span><span style="color:#032F62;">&quot;-m&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;baidu&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-s&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-v&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-k&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test_baidu_search&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test_baidu.py&quot;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>上面这段代码，其实就是我们在前面课程里常用的测试文件 test_baidu.py，在这个测试文件里，我的被测试函数 test_baidu_search 有两个参数，分别是 search_string 和 expect_string。那么对应着，在 pytest.mark.parametrize 这个装饰器的第一个参数里，也包含 search_string 和 expect_string。</p><p>在命令行中通过 pytest tests/test_baidu2.py 或者在 Pycharm 中右键运行本测试，结果如下：</p>`,17),F=l(`<h3 id="pytest-fixture-扩展数据驱动" tabindex="-1">pytest.fixture 扩展数据驱动 <a class="header-anchor" href="#pytest-fixture-扩展数据驱动" aria-label="Permalink to &quot;pytest.fixture 扩展数据驱动&quot;">​</a></h3><p>概括地说，无论是什么形式的测试都只包括三个步骤：测试前的准备---执行测试---测试后的清理。在日常的测试中，测试前的准备通常就是测试需要的前置条件，它可以是简单的登录操作、联合查询数据库操作，甚至是逻辑复杂的函数操作。</p><p>像 unittest 框架一样，在 pytest 中你也可以通过使用 setup 和 tear down 来完成你的测试前置工作。例如，使用 setup_method、setup_class、setup_module 来分别完成测试类方法、测试类，以及测试 module 的 setup；使用 teardown_method、teardown_class、teardown_module 来分别完成测试类方法、测试类，以及测试 module 清理操作。</p><blockquote><p>具体用法请参考《10 | 你的第一个 API 测试框架（二）》</p></blockquote><p>但是这种方式存在缺陷。 例如，在同一个测试类中，存在多个测试方法，假设每一个测试方法需要不同的 setup 或者 teardown 函数，此时该怎么办呢？</p><p>又比如，setup 和 teardown 其实都属于测试夹具（Test Fixtures），如果我想把所有测试夹具全部放到一个函数中去管理，能做到吗？</p><p><strong>pytest 考虑到了这种情况，并且提供了一个更加高级的功能，那就是 fixture 装饰器。</strong></p><p>fixtures 可用作初始化测试服务、数据和状态，也常常用来在测试执行前/后进行测试的前置/后置操作。 fixtures 可作为共享数据使用，也可被其他函数、模块、类或者整个项目，甚至另外的 fixtures 调用。</p><h4 id="_1-fixtures-语法" tabindex="-1">1.fixtures 语法 <a class="header-anchor" href="#_1-fixtures-语法" aria-label="Permalink to &quot;1.fixtures 语法&quot;">​</a></h4><p>pytest.fixtures 的语法如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fixture(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">autouse</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ids</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fixture(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">autouse</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">ids</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">)</span></span></code></pre></div><p>其中，fixture 的 5 个参数如下。</p><ul><li><strong>scope：用于控制 fixture 的作用范</strong></li></ul><p>这个参数有以下四个级别：</p><p>function：在每一个 function 或者类方法中都会调用（默认）。</p><p>class：在每一个类中只调用一次。</p><p>module：每一个 .py 文件调用一次；该文件内可以有多个 function 和 class。</p><p>session：一个 session 调用一次。</p><ul><li><strong>params：一个可选的参数列表</strong></li></ul><p>params 以可选的参数列表形式存在。在测试函数中使用时，可通过 request.param 接收设置的返回值（即 params 列表里的值）。params 中有多少元素，在测试时，引用此 fixture 的函数就会调用几次。</p><ul><li><strong>autouse：是否自动执行****设置的 fixtures</strong></li></ul><p>当 autouse 为 True 时，测试函数即使不调用 fixture 装饰器，定义的 fixture 函数也会被执行。</p><ul><li><strong>ids：指定每个字符串 id</strong></li></ul><p>当有多个 params 时，针对每一个 param，可以指定 id，这个 id 将变为测试用例名字的一部分。如果没有提供 id，则 id 将自动生成。</p><ul><li><strong>name：fixture 的名称</strong></li></ul><p>name 是 fixtures 的名称， 它默认是你装饰的那个 fixture 函数的名称。你可以通过 name 参数来更改这个 fixture 名称，更改后，如果这个 fixture 被调用，则使用你更改过的名称即可。</p><h4 id="_2-fixtures-用法" tabindex="-1">2.fixtures 用法 <a class="header-anchor" href="#_2-fixtures-用法" aria-label="Permalink to &quot;2.fixtures 用法&quot;">​</a></h4><p>fixtures 有多种使用方式，下面我们来逐一讲解。</p><p><strong>（1）通过 fixture 函数名直接使用</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在lagouAPITest项目下新建一个文件，命名为 test_fixture_usage.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#6A737D;"># 首先， 在fixture函数上，加@pytest.fixture()</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_method</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;This is itesting Speaking&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 其次，把fixture函数的函数名作为参数，传入被测试用例</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_use_fixtures</span><span style="color:#E1E4E8;">(my_method):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Please follow iTesting from wechat&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在lagouAPITest项目下新建一个文件，命名为 test_fixture_usage.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#6A737D;"># 首先， 在fixture函数上，加@pytest.fixture()</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_method</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;This is itesting Speaking&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 其次，把fixture函数的函数名作为参数，传入被测试用例</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_use_fixtures</span><span style="color:#24292E;">(my_method):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Please follow iTesting from wechat&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>通过 fixture 函数名使用 fixture 的步骤是：</p><ul><li><p>在 fixture 函数上，加 @pytest.fixture()，上例中 my_method 这个方法将作为 fixture 使用；</p></li><li><p>把 fixture 函数的函数名作为参数，传入被测试用例。 注意，函数 test_use_fixtures 的入参必须是 my_method 这个方法名，跟 fixture 函数保持一致。</p></li></ul><p>在命令行中通过如下方式运行上段代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests/test_fixture_usage.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests/test_fixture_usage.py</span></span></code></pre></div><p>运行后你会发现，my_method 即定义的 fixture 的方法先于测试函数的其他语句开始执行。<br><strong>（2）通过 usefixtures 装饰器使用</strong></p><p>通过把 fixture 作为测试函数入参的方式，可以达到为每一个测试函数配置不同的 setup/tear down 的需求，但这样会让 fixture 和我的测试函数耦合在一块，不利于测试函数的重用。</p><p>故 pytest 提供了 pytest.mark.usefixtures 这个装饰器，下面这段代码演示了 usefixtures 的用法。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在lagouAPITest项目下新建一个文件，命名为test_fixture_usage.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_method</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;This is iTesting Speaking&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 函数直接使用fixture</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.usefixtures</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my_method&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_use_fixtures</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Please follow iTesting from wechat&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 类方法使用fixture</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.usefixtures</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my_method&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_class_method_usage</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;[classMethod]Please follow iTesting from wechat&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 类直接使用fixture</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.usefixtures</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my_method&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_method_usage_01</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_method_usage_02</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在lagouAPITest项目下新建一个文件，命名为test_fixture_usage.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_method</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;This is iTesting Speaking&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 函数直接使用fixture</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.usefixtures</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my_method&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_use_fixtures</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Please follow iTesting from wechat&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 类方法使用fixture</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.usefixtures</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my_method&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_class_method_usage</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;[classMethod]Please follow iTesting from wechat&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 类直接使用fixture</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.usefixtures</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my_method&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_method_usage_01</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_method_usage_02</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>由这段代码你可以看到，usefixtures 可以被函数、类方法，以及类调用。<br><strong>（3）fixture 多参数使用</strong></p><p>上述使用方式实现了使不同的测试函数调用不同的测试 fixtures，那么如果我们 fixture 带参数怎么办？看下面的代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_method</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> request.param</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_use_fixtures_01</span><span style="color:#E1E4E8;">(my_method):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> this is the 1st test&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(my_method)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.usefixtures</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my_method&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_use_fixtures_02</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> this is the 2nd test&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 注意，如果我在这里想通过print(my_mthod)来打印出fixuture提供的参数，是不行的， 因为使用usefixtures无法获取fixture的返回值，如需要fixture的返回值，则需用test_use_fixtures_01那样的调用方式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_method</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> request.param</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_use_fixtures_01</span><span style="color:#24292E;">(my_method):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> this is the 1st test&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(my_method)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.usefixtures</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my_method&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_use_fixtures_02</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> this is the 2nd test&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 注意，如果我在这里想通过print(my_mthod)来打印出fixuture提供的参数，是不行的， 因为使用usefixtures无法获取fixture的返回值，如需要fixture的返回值，则需用test_use_fixtures_01那样的调用方式</span></span></code></pre></div><p>执行这段代码，你将会看到有 4 条测试用例被执行。由此可见，pytest 通过 fixture 和其参数 params 实现了数据驱动。<br><strong>（4）通过 autouse 参数隐式使用</strong></p><p>以上方式实现了 fixtures 和测试函数的松耦合，但是仍然存在问题：每个测试函数都需要显式声明要用哪个 fixtures。</p><p>基于此，pytest 提供了<strong>autouse 参数</strong>，允许我们在不调用 fixture 装饰器的情况下使用定义的fixture，请看下面的例子：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在lagouAPITest项目下新建一个文件，命名为test_fixture_usage.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">autouse</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ids</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;test1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;test2&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_method</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(request.param)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_use_fixtures_01</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> this is the 1st test&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_use_fixtures_02</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> this is the 2nd test&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在lagouAPITest项目下新建一个文件，命名为test_fixture_usage.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">autouse</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">ids</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;test1&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;test2&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_method</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(request.param)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_use_fixtures_01</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> this is the 1st test&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_use_fixtures_02</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> this is the 2nd test&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>在命令行中通过如下方式运行上段代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests/test_fixture_usage.py -s --alluredir=./allure_reports</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests/test_fixture_usage.py -s --alluredir=./allure_reports</span></span></code></pre></div><p>测试执行完成后，通过以下方式打开生成的 allure 报告：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 以Win10为例：</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">. 使用快捷键 </span><span style="color:#79B8FF;">Win</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">R</span><span style="color:#E1E4E8;"> 调起运行提示框</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">. 输入</span><span style="color:#9ECBFF;">&quot;cmd&quot;</span><span style="color:#E1E4E8;">进入到命令行</span></span>
<span class="line"><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">. 切换目录到项目根目录，本例中在</span><span style="color:#79B8FF;">D</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\</span><span style="color:#79B8FF;">_Automation</span><span style="color:#E1E4E8;">\\lagouAPITest</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">. 输入命令生成allure报告</span></span>
<span class="line"><span style="color:#E1E4E8;">allure serve allure_reports</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 以Win10为例：</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">. 使用快捷键 </span><span style="color:#005CC5;">Win</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">R</span><span style="color:#24292E;"> 调起运行提示框</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">. 输入</span><span style="color:#032F62;">&quot;cmd&quot;</span><span style="color:#24292E;">进入到命令行</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;">. 切换目录到项目根目录，本例中在</span><span style="color:#005CC5;">D</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\</span><span style="color:#005CC5;">_Automation</span><span style="color:#24292E;">\\lagouAPITest</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;">. 输入命令生成allure报告</span></span>
<span class="line"><span style="color:#24292E;">allure serve allure_reports</span></span></code></pre></div><p>打开测试报告，在 Suites 目录下，你可以看到如下结果：</p>`,50),d=l(`<p>由此可以看出，当你定义了 fixture 函数，并且 autouse 为 True 时，无须显式的在测试函数中声明要使用 fixture（在本例中，你看不到 my_method 这个 fixture 在测试方法中被显式调用）。 定义的 fixture 将在 pytest.fixtures 指定的范围内，对其下的每一个测试函数都应用 fixture。</p><p>在本例中，scope 参数没有定义，将使用默认值&quot;function&quot;， 即每一个测试函数都会执行， 而我们的 params 又提供了两组参数，所以共 4 条测试用例被执行。</p><p>请注意下测试用例名称，针对每一个测试用例，因为我指定了 ids 为 [&#39;test1&#39;, &#39;test2&#39;]， 故测试用例名中也包括了指定的 id。</p><p>在这里给你留一个课后作业， 在这段代码的最后，新添加如下代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_use_fixtures_03</span><span style="color:#E1E4E8;">(test):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> this is the 3nd test&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_use_fixtures_03</span><span style="color:#24292E;">(test):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> this is the 3nd test&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>请更新并重新执行一下 test_fixture_usage.py，看看测试结果有什么不同？其中参数 name 起了什么作用。<br><strong>（5）多 fixture 笛卡尔积使用</strong></p><p>当你有多个 fixture 需要叠加使用时， 可以叠加使用。注意：此方式将把 fixure 的各组参数以笛卡尔积的形式组织，以下列代码为例，执行将生成 4 条测试。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">class TestClass:</span></span>
<span class="line"><span style="color:#E1E4E8;">    @pytest.fixture(params=[</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">], autouse=True)</span></span>
<span class="line"><span style="color:#E1E4E8;">    def my_method1(self, request):</span></span>
<span class="line"><span style="color:#E1E4E8;">        print(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">the param are:{}&#39;</span><span style="color:#E1E4E8;">.format(request.param))</span></span>
<span class="line"><span style="color:#E1E4E8;">        return request.param</span></span>
<span class="line"><span style="color:#E1E4E8;">    @pytest.fixture(params=[</span><span style="color:#9ECBFF;">&#39;VIPTEST&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;is good&#39;</span><span style="color:#E1E4E8;">], autouse=True)</span></span>
<span class="line"><span style="color:#E1E4E8;">    def my_method2(self, request):</span></span>
<span class="line"><span style="color:#E1E4E8;">        print(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">the param are:{}&#39;</span><span style="color:#E1E4E8;">.format(request.param))</span></span>
<span class="line"><span style="color:#E1E4E8;">        return request.param</span></span>
<span class="line"><span style="color:#E1E4E8;">    def test_use_fixtures_01(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">class TestClass:</span></span>
<span class="line"><span style="color:#24292E;">    @pytest.fixture(params=[</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">], autouse=True)</span></span>
<span class="line"><span style="color:#24292E;">    def my_method1(self, request):</span></span>
<span class="line"><span style="color:#24292E;">        print(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">the param are:{}&#39;</span><span style="color:#24292E;">.format(request.param))</span></span>
<span class="line"><span style="color:#24292E;">        return request.param</span></span>
<span class="line"><span style="color:#24292E;">    @pytest.fixture(params=[</span><span style="color:#032F62;">&#39;VIPTEST&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;is good&#39;</span><span style="color:#24292E;">], autouse=True)</span></span>
<span class="line"><span style="color:#24292E;">    def my_method2(self, request):</span></span>
<span class="line"><span style="color:#24292E;">        print(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">the param are:{}&#39;</span><span style="color:#24292E;">.format(request.param))</span></span>
<span class="line"><span style="color:#24292E;">        return request.param</span></span>
<span class="line"><span style="color:#24292E;">    def test_use_fixtures_01(self):</span></span>
<span class="line"><span style="color:#24292E;">        pass</span></span></code></pre></div><p><strong>（6）使用 conftest.py 来共享 fixture</strong></p><p>通过上面的学习，我们掌握了如何在同一个文件中进行 fixture 的定义、共享和使用。但在日常工作测试中，我们常常需要<strong>在全局范围内使用同一个测试前置操作</strong>。例如，测试开始时首先进行登录操作，接着连接数据库。</p><p>这种情况下，我们就需要使用 conftest.py。在 conftest.py 中定义的 fixture 不需要进行 import，pytest 会自动查找使用。 pytest 查找 fixture 的顺序是首先查找测试类（Class），接着查找测试模块（Module），然后是 conftest.py 文件，最后是内置或者第三方插件。</p><p>下面来看下如何使用 conftest.py。</p><ul><li>假设我们有如下的目录结构：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_fixture1.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu_fixture_sample.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">conftest.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_fixture1.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu_fixture_sample.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">conftest.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span></code></pre></div><p>其中，conftest.py 的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># conftest.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;session&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 此方法名可以是你登录的业务代码，也可以是其他，这里暂命名为login</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver.implicitly_wait(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> driver, s, base_url</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;turn off browser driver&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver.quit()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;turn off requests driver&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">autouse</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">connect_db</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;connecting db&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 此处写你的链接db的业务逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;session&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 此方法名可以是你登录的业务代码，也可以是其他，这里暂命名为login</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">    driver.implicitly_wait(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> driver, s, base_url</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;turn off browser driver&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    driver.quit()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;turn off requests driver&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    s.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">autouse</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connect_db</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;connecting db&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 此处写你的链接db的业务逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>test_fixture1.py 中代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># test_fixture1.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_use_fixtures_01</span><span style="color:#E1E4E8;">(self, login):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">I am data:</span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(login))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># test_fixture1.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_use_fixtures_01</span><span style="color:#24292E;">(self, login):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">I am data:</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(login))</span></span></code></pre></div><p>test_baidu_fixture_sample.py 文件的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestBaidu</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;search_string, expect_string&#39;</span><span style="color:#E1E4E8;">, [(</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">), (</span><span style="color:#9ECBFF;">&#39;helloqa.com&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, login, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver, s, base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> login</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> (expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results) </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestBaidu</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;search_string, expect_string&#39;</span><span style="color:#24292E;">, [(</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">), (</span><span style="color:#032F62;">&#39;helloqa.com&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">)])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, login, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver, s, base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> login</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> (expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results) </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([])</span></span></code></pre></div><p>在命令行中通过如下代码执行：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\_Automation\\lagouAPITest</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">q </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">tb</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">no  tests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\_Automation\\lagouAPITest</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">s </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">q </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">tb</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">no  tests</span></span></code></pre></div><p>测试执行完成后，查看执行结果：</p>`,23),_=l(`<p>你可以注意到，connecting db 这条语句被打印了三次，是因为我在 conftest.py 里把 connect_db 这个 fixture 的 scope 设置为 function 且 autouse 的属性值是 True。而 turn off browser driver，turn off requests driver 这两条语句仅仅执行了一次，是因为 login 这个 fixture 的 scope 是 session，故它在整个 session 中仅仅执行了一次。</p><p>另外请注意下在 fixture login 中，有如下的语句：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> driver, s, base_url</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;turn off browser driver&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">driver.quit()</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;turn off requests driver&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">s.close()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> driver, s, base_url</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;turn off browser driver&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">driver.quit()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;turn off requests driver&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">s.close()</span></span></code></pre></div><p>这个是什么意思呢？ 在 pytest 的 fixture 里，yield关键字语句之前的属于 set up，而 yield 以后的语句属于 tear down。</p><p>这样你就明白了，为什么以下语句是最后执行的了：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;turn off browser driver&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">driver.quit()</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;turn off requests driver&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">s.close()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;turn off browser driver&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">driver.quit()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;turn off requests driver&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">s.close()</span></span></code></pre></div><h3 id="pytest-mark-parametrize-和-pytest-fixture-结合使用" tabindex="-1">pytest.mark.parametrize 和 pytest.fixture 结合使用 <a class="header-anchor" href="#pytest-mark-parametrize-和-pytest-fixture-结合使用" aria-label="Permalink to &quot;pytest.mark.parametrize 和 pytest.fixture 结合使用&quot;">​</a></h3><p>通过上面的讲解我们了解到，在 pytest 中可以使用 pytest.mark.parametrize 装饰器进行数据驱动测试，可以使用 pytest.fixture 装饰器进行测试的 setup、tear down，以及 fixture 共享的测试。</p><p>那么 pytest.mark.parametrize 和 pytest.fixture 结合起来，能达到什么目的呢？</p><ul><li><strong>减少了重复代码，实现了代码全局共享</strong></li></ul><p>所有的测试前置及后置功能均可以定义在 conftest.py 文件中，供整个测试使用，而不必在每一个测试类中定义。这样做大大减少了重复代码，且 conftest.py 定义在项目根目录，就可以应用在全局，定义在某一个文件夹，就可以应用于这个文件夹下的所有测试文件。</p><ul><li><strong>可以使测试仅关注测试自身</strong></li></ul><p>测试仅围绕自身业务进行编码即可，配合使用 conftest.py 及 pytest.fixture 可实现，在一个测试类中，仅仅包括测试自身的代码，而不必考虑测试前的准备以及测试后的清理工作。</p><ul><li><strong>框架迁移更容易</strong></li></ul><p>如果是 UI 自动化测试，可在 conftest.py 文件中包括 Web Driver 的所有操作，如果是 API 测试，可在 conftest.py 文件中编写所有接口请求操作。这样当新项目需要应用自动化框架时，仅需更改 tests 文件夹下的测试用例即可。</p><p>下面写一个简单的例子，来介绍下 pytest.mark.parametrize 和 pytest.fixture 如何结合：</p><pre><code># test_sample.py
import pytest

@pytest.fixture()
def is_odd(request):
    print(&#39;Now the parameter are:--{}\\n&#39;.format(request.param))
    if int(request.param) % 2 == 0:
        return False
    else:
        return True

@pytest.mark.parametrize(&quot;is_odd&quot;, [1, 0], indirect=True)
def test_is_odd(is_odd):
    if is_odd:
        print(&quot;is odd number&quot;)
    else:
        print(&quot;not odd number&quot;)

if __name__ == &quot;__main__&quot;:
    pytest.main([])
</code></pre><p>这段代码把我定义了一个 fixture 方法 is_odd 和一个数据驱动的方法 test_is_odd。其中，fixture 方法 is_odd 判断一个数是否是奇数；而数据驱动的方法 test_is_odd 会提供一组数据，并且调用 is_odd 这个 fixture 进行判断。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本节课我介绍了使用 pytest 进行数据驱动的秘诀：即结合使用 pytest.mark.parametrize 和 pytest.fixture 装饰器。掌握本节介绍的 pytest.mark.parametrize 和 pytest.fixture 的各种用法，可以使你的测试框架可迁移、可重用。</p><p><strong>课后作业：复习模块二及模块三至今为止的内容，特别是本节课及《11 | 如虎添翼，API 和 UI 自动化测试融合》这节课，把你的测试框架更改，使其具备如下特点：</strong></p><ul><li><p>创建项目级的 conftest.py 文件，其中包括对 webDriver 及 requests.Session 的初始化， scope 是 session 级别；</p></li><li><p>结合使用 pytest.mark.parametrize 和 pytest.fixture，把各个测试文件中的 set up、tear down 移动到各个子文件夹的 conftest.py 文件中去，scope 是 function 级；</p></li><li><p>使用 PageObject 模式，简化测试类。</p></li></ul><p>不知道大家注意到没有，数据驱动中，我刻意忽略了各个格式的数据在数据驱动中的读写方法。在实际工作中，yaml、json、Excel，以及数据库存储的数据都是我们常用的数据格式，其中，Excel 数据格式更是被认为是数据驱动的典范。</p><p>在下一节课中，我将详细讲解这几种格式数据在 pytest 框架中的使用，并重点介绍数据驱动新手段------Pandas。</p><p>好了，我是蔡超，我们下节课见。如果你在本节课学习过程中碰见任何问题，欢迎在下方的留言区留言。</p><p><a href="https://wj.qq.com/s2/7506053/9b01" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品～</a></p><hr><p>【留言区图】</p>`,28),m=p("p",null,"由于留言区无法添加图片，但为了更好地回复同学们的问题，故将留言区需要添加的两张图放于此，便于大家学习",-1);function f(h,C,g,A,B,x){const n=e("Image");return t(),r("div",null,[y,E,i,a(n,{alt:"Lark20201026-183506.png",src:"https://s0.lgstatic.com/i/image/M00/63/B3/CgqCHl-Wps2AGwxpAAHAb_VFlDQ973.png"}),s(),u,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/63/B1/CgqCHl-Wo9GAAMQjAACYoFVS1KM780.png"}),s(),F,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/63/A6/Ciqc1F-Wo_qATadUAAAm8dy87Wo449.png"}),s(),d,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/63/B1/CgqCHl-WpB-AVjfOAACezNhpN3A242.png"}),s(),_,a(n,{alt:"14.png",src:"https://s0.lgstatic.com/i/image/M00/7C/90/CgqCHl_Npr-ASI7eAACQNUMB4uw687.png"}),s(),a(n,{alt:"Screen Shot 2020-11-02 at 12.22.20.png",src:"https://s0.lgstatic.com/i/image/M00/7C/A0/CgqCHl_NsmGAeVUxAAH0Nnkc1Hs833.png"}),s(),m])}const D=o(c,[["render",f]]);export{q as __pageData,D as default};
