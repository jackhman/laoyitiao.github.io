import{_ as o,j as e,o as t,g as c,k as n,h as a,Q as p,s as l}from"./chunks/framework.a0d18f64.js";const _=JSON.parse('{"title":"10etcd存储：如何实现键值对的读写操作？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6404) 10  etcd 存储：如何实现键值对的读写操作？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6404) 10  etcd 存储：如何实现键值对的读写操作？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6404) 10  etcd 存储：如何实现键值对的读写操作？.md"},E=p('<h1 id="_10etcd存储-如何实现键值对的读写操作" tabindex="-1">10etcd存储：如何实现键值对的读写操作？ <a class="header-anchor" href="#_10etcd存储-如何实现键值对的读写操作" aria-label="Permalink to &quot;10etcd存储：如何实现键值对的读写操作？&quot;">​</a></h1><p>我们在前面几讲介绍了 etcd 的整体架构以及 etcd 常用的通信接口。在介绍 etcd 整体架构时，我们梳理了 etcd 的分层架构以及交互概览。这一讲我们将会聚焦 etcd 存储如何实现键值对的读写操作。</p><p>下面我们围绕 etcd 底层读写的实现展开，首先简要介绍客户端访问 etcd 服务端读写的整个过程，然后我们来重点介绍读写的实现细节。这一讲内容环环相扣，希望你仔细阅读。</p><h3 id="读写操作过程概述" tabindex="-1">读写操作过程概述 <a class="header-anchor" href="#读写操作过程概述" aria-label="Permalink to &quot;读写操作过程概述&quot;">​</a></h3><p>我们在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=613#/detail/pc?id=6402" target="_blank" rel="noreferrer">08 讲《etcd 的架构是什么样的？》</a>中介绍了 etcd 各个模块交互的总览，如下图所示。</p>',5),y=p(`<p>虽然有些细节在图中没有标出，但是总体上的请求流程从上至下依次为客户端 → API 接口层 → etcd Server → etcd raft 算法库。</p><p>对于读请求来说，客户端通过<strong>负载均衡</strong> 选择一个 etcd 节点发出读请求，API 接口层提供了 Range RPC 方法，etcd 服务端<strong>拦截到 gRPC 读请求</strong>后，调用相应的处理器处理请求。</p><p>写请求相对复杂一些，客户端通过<strong>负载均衡</strong> 选择一个 etcd 节点发起写请求，etcd 服务端<strong>拦截到 gRPC 写请求</strong> ，涉及一些校验和监控，之后<strong>KVServer 向 raft 模块发起提案</strong>，内容即为写入数据的命令。经过网络转发，当集群中的多数节点达成一致并持久化数据后，状态变更且 MVCC 模块执行提案内容。</p><p>下面我们就分别看一下读写请求的底层存储实现。</p><h3 id="读操作" tabindex="-1">读操作 <a class="header-anchor" href="#读操作" aria-label="Permalink to &quot;读操作&quot;">​</a></h3><p>在 etcd 中读请求占了大部分，是高频的操作。我们使用 etcdctl 命令行工具进行读操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">endpoints http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:2379 get foo</span></span>
<span class="line"><span style="color:#E1E4E8;">foo</span></span>
<span class="line"><span style="color:#E1E4E8;">bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">endpoints http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:2379 get foo</span></span>
<span class="line"><span style="color:#24292E;">foo</span></span>
<span class="line"><span style="color:#24292E;">bar</span></span></code></pre></div><p>将整个读操作划分成如下几个步骤：</p><ul><li><p>etcdctl 会创建一个 clientv3 库对象，选取一个合适的 etcd 节点；</p></li><li><p>调用 KVServer 模块的 Range RPC 方法（上一课时有讲解），发送请求；</p></li><li><p>拦截器拦截，主要做一些校验和监控；</p></li><li><p>调用 KVServer 模块的 Range 接口获取数据；</p></li></ul><p>接着就进入了读请求的核心步骤，会经过线性读 ReadIndex 模块、MVCC（包含 treeIndex 和 BlotDB）模块。</p><p>这里要提一下线性读，线性读是相对串行读来讲的概念。集群模式下会有多个 etcd 节点，不同节点之间可能存在一致性问题，<strong>串行读直接返回状态数据，不需要与集群中其他节点交互</strong> 。这种方式速度快，开销小，但是会存在<strong>数据不一致</strong>的情况。</p><p>线性读则需要集群成员之间达成共识，存在开销，响应速度相对慢。但是能够保证数据的一致性，<strong>etcd 默认读模式是线性读</strong>。我们将在后面的课时重点介绍如何实现分布式一致性。</p><p>继续往下，看看如何读取 etcd 中的数据。etcd 中查询请求，查询单个键或者一组键，以及查询数量，到了底层实际都会调用 Range keys 方法。下面我们具体分析一下这个方式的实现。</p><p>Range 请求的结构图如下所示：</p>`,14),i=p(`<p>从上至下，查询键值对的流程包括：</p><ul><li><p>在 treeIndex 中根据键利用 BTree 快速查询该键对应的索引项 keyIndex，索引项中包含 Revision；</p></li><li><p>根据查询到的版本号信息 Revision，在 Backend 的缓存 Buffer 中利用二分法查找，如果命中则直接返回；</p></li><li><p>若缓存中不符合条件，在 BlotDB 中查找（基于 BlotDB 的索引），查询之后返回键值对信息。</p></li></ul><p>图中 ReadTx 和 BatchTx 是两个接口，用于读写请求。在创建 Backend 结构体时，默认也会创建 readTx 和 batchTx，readTx 实现了 ReadTx ，负责处理只读请求；batchTx 实现了 BatchTx 接口，负责处理读写请求。</p><p><code>rangeKeys</code>方法的实现如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/kvstore_txn.go:117</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (tr </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">storeTxnRead) </span><span style="color:#B392F0;">rangeKeys</span><span style="color:#E1E4E8;">(key, end []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, curRev </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, ro RangeOptions) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">RangeResult, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	rev </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ro.Rev</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> rev </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> curRev {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">RangeResult{KVs: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, Count: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, Rev: curRev}, ErrFutureRev</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> rev </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		rev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> curRev</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> rev </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> tr.s.compactMainRev {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">RangeResult{KVs: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, Count: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, Rev: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}, ErrCompacted</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取索引项 keyIndex，索引项中包含 Revision</span></span>
<span class="line"><span style="color:#E1E4E8;">	revpairs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tr.s.kvindex.</span><span style="color:#79B8FF;">Revisions</span><span style="color:#E1E4E8;">(key, end, rev)</span></span>
<span class="line"><span style="color:#E1E4E8;">	tr.trace.</span><span style="color:#79B8FF;">Step</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;range keys from in-memory index tree&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 结果为空，直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(revpairs) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">RangeResult{KVs: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, Count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, Rev: curRev}, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ro.Count {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">RangeResult{KVs: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, Count: </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(revpairs), Rev: curRev}, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	limit </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(ro.Limit)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> limit </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> limit </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(revpairs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		limit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(revpairs)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	kvs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]mvccpb.KeyValue, limit)</span></span>
<span class="line"><span style="color:#E1E4E8;">	revBytes </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newRevBytes</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, revpair </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> revpairs[:</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(kvs)] {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">revToBytes</span><span style="color:#E1E4E8;">(revpair, revBytes)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// UnsafeRange 实现了 ReadTx，查询对应的键值对</span></span>
<span class="line"><span style="color:#E1E4E8;">		_, vs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tr.tx.</span><span style="color:#79B8FF;">UnsafeRange</span><span style="color:#E1E4E8;">(keyBucketName, revBytes, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(vs) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			tr.s.lg.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&quot;range failed to find revision pair&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				zap.</span><span style="color:#79B8FF;">Int64</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;revision-main&quot;</span><span style="color:#E1E4E8;">, revpair.main),</span></span>
<span class="line"><span style="color:#E1E4E8;">				zap.</span><span style="color:#79B8FF;">Int64</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;revision-sub&quot;</span><span style="color:#E1E4E8;">, revpair.sub),</span></span>
<span class="line"><span style="color:#E1E4E8;">			)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> kvs[i].</span><span style="color:#79B8FF;">Unmarshal</span><span style="color:#E1E4E8;">(vs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			tr.s.lg.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&quot;failed to unmarshal mvccpb.KeyValue&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				zap.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err),</span></span>
<span class="line"><span style="color:#E1E4E8;">			)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	tr.trace.</span><span style="color:#79B8FF;">Step</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;range keys from bolt db&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">RangeResult{KVs: kvs, Count: </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(revpairs), Rev: curRev}, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/kvstore_txn.go:117</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (tr </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">storeTxnRead) </span><span style="color:#6F42C1;">rangeKeys</span><span style="color:#24292E;">(key, end []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, curRev </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, ro RangeOptions) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">RangeResult, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	rev </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ro.Rev</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> rev </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> curRev {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">RangeResult{KVs: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, Count: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, Rev: curRev}, ErrFutureRev</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> rev </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		rev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> curRev</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> rev </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> tr.s.compactMainRev {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">RangeResult{KVs: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, Count: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, Rev: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">}, ErrCompacted</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取索引项 keyIndex，索引项中包含 Revision</span></span>
<span class="line"><span style="color:#24292E;">	revpairs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tr.s.kvindex.</span><span style="color:#005CC5;">Revisions</span><span style="color:#24292E;">(key, end, rev)</span></span>
<span class="line"><span style="color:#24292E;">	tr.trace.</span><span style="color:#005CC5;">Step</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;range keys from in-memory index tree&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 结果为空，直接返回</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(revpairs) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">RangeResult{KVs: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, Count: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, Rev: curRev}, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ro.Count {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">RangeResult{KVs: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, Count: </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(revpairs), Rev: curRev}, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	limit </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(ro.Limit)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> limit </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> limit </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(revpairs) {</span></span>
<span class="line"><span style="color:#24292E;">		limit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(revpairs)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	kvs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]mvccpb.KeyValue, limit)</span></span>
<span class="line"><span style="color:#24292E;">	revBytes </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newRevBytes</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, revpair </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> revpairs[:</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(kvs)] {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">revToBytes</span><span style="color:#24292E;">(revpair, revBytes)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// UnsafeRange 实现了 ReadTx，查询对应的键值对</span></span>
<span class="line"><span style="color:#24292E;">		_, vs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tr.tx.</span><span style="color:#005CC5;">UnsafeRange</span><span style="color:#24292E;">(keyBucketName, revBytes, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(vs) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			tr.s.lg.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&quot;range failed to find revision pair&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				zap.</span><span style="color:#005CC5;">Int64</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;revision-main&quot;</span><span style="color:#24292E;">, revpair.main),</span></span>
<span class="line"><span style="color:#24292E;">				zap.</span><span style="color:#005CC5;">Int64</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;revision-sub&quot;</span><span style="color:#24292E;">, revpair.sub),</span></span>
<span class="line"><span style="color:#24292E;">			)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> kvs[i].</span><span style="color:#005CC5;">Unmarshal</span><span style="color:#24292E;">(vs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			tr.s.lg.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&quot;failed to unmarshal mvccpb.KeyValue&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				zap.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err),</span></span>
<span class="line"><span style="color:#24292E;">			)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	tr.trace.</span><span style="color:#005CC5;">Step</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;range keys from bolt db&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">RangeResult{KVs: kvs, Count: </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(revpairs), Rev: curRev}, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码的实现中，我们需要通过<code>Revisions</code>方法从 Btree 中获取范围内所有的 keyIndex，以此才能获取一个范围内的所有键值对。<code>Revisions</code>方法实现如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/index.go:106</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ti </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">treeIndex) </span><span style="color:#B392F0;">Revisions</span><span style="color:#E1E4E8;">(key, end []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, atRev </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) (revs []revision) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> end </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		rev, _, _, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ti.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(key, atRev)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> []revision{rev}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	ti.</span><span style="color:#79B8FF;">visit</span><span style="color:#E1E4E8;">(key, end, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(ki </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">keyIndex) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用 keyIndex.get 来遍历整棵树</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> rev, _, _, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ki.</span><span style="color:#79B8FF;">get</span><span style="color:#E1E4E8;">(ti.lg, atRev); err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			revs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(revs, rev)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> revs</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/index.go:106</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ti </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">treeIndex) </span><span style="color:#6F42C1;">Revisions</span><span style="color:#24292E;">(key, end []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, atRev </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) (revs []revision) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		rev, _, _, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ti.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(key, atRev)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> []revision{rev}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	ti.</span><span style="color:#005CC5;">visit</span><span style="color:#24292E;">(key, end, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(ki </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">keyIndex) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 keyIndex.get 来遍历整棵树</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> rev, _, _, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ki.</span><span style="color:#005CC5;">get</span><span style="color:#24292E;">(ti.lg, atRev); err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			revs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(revs, rev)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> revs</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果只获取一个键对应的版本，使用 treeIndex 方法即可，但是一般会从 Btree 索引中获取多个 Revision 值，此时需要调用 keyIndex.get 方法来遍历整棵树并选取合适的版本。这是因为<strong>BoltDB 保存一个 key 的多个历史版本</strong>，每一个 key 的 keyIndex 中其实都存储着多个历史版本，我们需要根据传入的参数返回正确的版本。</p><p>对于上层的键值存储来说，它会利用这里返回的 Revision，从真正存储数据的 BoltDB 中查询当前 key 对应 Revision 的数据。BoltDB 内部使用的也是类似 bucket（桶）的方式存储，其实就是对应 MySQL 中的表结构，用户的 key 数据存放的 bucket 名字的是 key，etcd MVCC 元数据存放的 bucket 是 meta。</p><h3 id="写操作" tabindex="-1">写操作 <a class="header-anchor" href="#写操作" aria-label="Permalink to &quot;写操作&quot;">​</a></h3><p>介绍完读请求，我们回忆一下写操作的实现。使用 etcdctl 命令行工具进行写操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">endpoints http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:2379 put foo bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">endpoints http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:2379 put foo bar</span></span></code></pre></div><p>将整个写操作划分成如下几个步骤：</p><ul><li><p>客户端通过负载均衡算法选择一个 etcd 节点，发起 gRPC 调用；</p></li><li><p>etcd Server 收到客户端请求；</p></li><li><p>经过 gRPC 拦截、Quota 校验，Quota 模块用于校验 etcd db 文件大小是否超过了配额；</p></li><li><p>接着 KVServer 模块将请求发送给本模块中的 raft，这里负责与 etcd raft 模块进行通信，发起一个提案，命令为<code>put foo bar</code>，即使用 put 方法将 foo 更新为 bar；</p></li><li><p>提案经过转发之后，半数节点成功持久化；</p></li><li><p>MVCC 模块更新状态机。</p></li></ul><p>我们重点关注最后一步，学习如何更新和插入键值对。与上面一张图相对应，我们来看下 put 接口的执行过程：</p>`,15),d=p(`<p>调用 put 向 etcd 写入数据时，首先会使用传入的键构建 keyIndex 结构体，基于 currentRevision 自增生成新的 Revision 如{1,0}，并从 treeIndex 中获取相关版本 Revision 等信息；写事务提交之后，将本次写操作的缓存 buffer 合并（merge）到读缓存上（图中 ReadTx 中的缓存）。代码实现如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//位于 mvcc/index.go:53</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ti </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">treeIndex) </span><span style="color:#B392F0;">Put</span><span style="color:#E1E4E8;">(key []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, rev revision) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	keyi </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">keyIndex{key: key}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 加锁，互斥</span></span>
<span class="line"><span style="color:#E1E4E8;">	ti.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> ti.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取版本信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	item </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ti.tree.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(keyi)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		keyi.</span><span style="color:#79B8FF;">put</span><span style="color:#E1E4E8;">(ti.lg, rev.main, rev.sub)</span></span>
<span class="line"><span style="color:#E1E4E8;">		ti.tree.</span><span style="color:#79B8FF;">ReplaceOrInsert</span><span style="color:#E1E4E8;">(keyi)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	okeyi </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> item.(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">keyIndex)</span></span>
<span class="line"><span style="color:#E1E4E8;">	okeyi.</span><span style="color:#79B8FF;">put</span><span style="color:#E1E4E8;">(ti.lg, rev.main, rev.sub)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//位于 mvcc/index.go:53</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ti </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">treeIndex) </span><span style="color:#6F42C1;">Put</span><span style="color:#24292E;">(key []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, rev revision) {</span></span>
<span class="line"><span style="color:#24292E;">	keyi </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">keyIndex{key: key}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 加锁，互斥</span></span>
<span class="line"><span style="color:#24292E;">	ti.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> ti.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取版本信息</span></span>
<span class="line"><span style="color:#24292E;">	item </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ti.tree.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(keyi)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		keyi.</span><span style="color:#005CC5;">put</span><span style="color:#24292E;">(ti.lg, rev.main, rev.sub)</span></span>
<span class="line"><span style="color:#24292E;">		ti.tree.</span><span style="color:#005CC5;">ReplaceOrInsert</span><span style="color:#24292E;">(keyi)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	okeyi </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> item.(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">keyIndex)</span></span>
<span class="line"><span style="color:#24292E;">	okeyi.</span><span style="color:#005CC5;">put</span><span style="color:#24292E;">(ti.lg, rev.main, rev.sub)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>treeIndex.Put 在获取 Btree 中的 keyIndex 结构之后，会通过 keyIndex.put 在其中加入新的 revision，方法实现如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:77</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ki </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">keyIndex) </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(lg </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">zap.Logger, main </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, sub </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	rev </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> revision{main: main, sub: sub}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 校验版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">rev.</span><span style="color:#79B8FF;">GreaterThan</span><span style="color:#E1E4E8;">(ki.modified) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		lg.</span><span style="color:#79B8FF;">Panic</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;&#39;put&#39; with an unexpected smaller revision&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			zap.</span><span style="color:#79B8FF;">Int64</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;given-revision-main&quot;</span><span style="color:#E1E4E8;">, rev.main),</span></span>
<span class="line"><span style="color:#E1E4E8;">			zap.</span><span style="color:#79B8FF;">Int64</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;given-revision-sub&quot;</span><span style="color:#E1E4E8;">, rev.sub),</span></span>
<span class="line"><span style="color:#E1E4E8;">			zap.</span><span style="color:#79B8FF;">Int64</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;modified-revision-main&quot;</span><span style="color:#E1E4E8;">, ki.modified.main),</span></span>
<span class="line"><span style="color:#E1E4E8;">			zap.</span><span style="color:#79B8FF;">Int64</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;modified-revision-sub&quot;</span><span style="color:#E1E4E8;">, ki.modified.sub),</span></span>
<span class="line"><span style="color:#E1E4E8;">		)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(ki.generations) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		ki.generations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(ki.generations, generation{})</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	g </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ki.generations[</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(ki.generations)</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(g.revs) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 创建一个新的键</span></span>
<span class="line"><span style="color:#E1E4E8;">		keysGauge.</span><span style="color:#79B8FF;">Inc</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		g.created </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rev</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	g.revs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(g.revs, rev)</span></span>
<span class="line"><span style="color:#E1E4E8;">	g.ver</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">	ki.modified </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rev</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:77</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ki </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">keyIndex) </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(lg </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">zap.Logger, main </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, sub </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	rev </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> revision{main: main, sub: sub}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 校验版本号</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">rev.</span><span style="color:#005CC5;">GreaterThan</span><span style="color:#24292E;">(ki.modified) {</span></span>
<span class="line"><span style="color:#24292E;">		lg.</span><span style="color:#005CC5;">Panic</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;&#39;put&#39; with an unexpected smaller revision&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			zap.</span><span style="color:#005CC5;">Int64</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;given-revision-main&quot;</span><span style="color:#24292E;">, rev.main),</span></span>
<span class="line"><span style="color:#24292E;">			zap.</span><span style="color:#005CC5;">Int64</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;given-revision-sub&quot;</span><span style="color:#24292E;">, rev.sub),</span></span>
<span class="line"><span style="color:#24292E;">			zap.</span><span style="color:#005CC5;">Int64</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;modified-revision-main&quot;</span><span style="color:#24292E;">, ki.modified.main),</span></span>
<span class="line"><span style="color:#24292E;">			zap.</span><span style="color:#005CC5;">Int64</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;modified-revision-sub&quot;</span><span style="color:#24292E;">, ki.modified.sub),</span></span>
<span class="line"><span style="color:#24292E;">		)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(ki.generations) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		ki.generations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(ki.generations, generation{})</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	g </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ki.generations[</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(ki.generations)</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(g.revs) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 创建一个新的键</span></span>
<span class="line"><span style="color:#24292E;">		keysGauge.</span><span style="color:#005CC5;">Inc</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		g.created </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rev</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	g.revs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(g.revs, rev)</span></span>
<span class="line"><span style="color:#24292E;">	g.ver</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">	ki.modified </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rev</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上述代码我们可以知道，构造的 Revision 结构体写入 keyIndex 键索引时，会<strong>改变 generation 结构体中的属性</strong>，generation 中包括一个键的多个不同的版本信息，包括创建版本、修改次数等参数。因此我们可以通过该方法了解 generation 结构体中的各个成员如何定义和赋值。</p><p>revision{1,0} 是生成的全局版本号，作为 BoltDB 的 key，经过序列化包括 key 名称、key 创建时的版本号（create_revision）、value 值和租约等信息为二进制数据之后，将填充到 BoltDB 的 value 中，同时将该键和 Revision 等信息存储到 Btree。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了 etcd 的底层如何实现读写操作。我们首先简单介绍了客户端与服务端读写操作的流程，之后重点分析了在 etcd 中如何读写数据。</p><p>通过上面的分析不难发现，etcd 最底层的读写其实并不是很复杂。根据 etcd 读写流程图，可以知道读写操作依赖 MVCC 模块的 treeIndex 和 BoltDB，treeIndex 用来保存键的历史版本号信息，而 BoltDB 用来保存 etcd 的键值对数据。通过这两个模块之间的协作，实现了 etcd 数据的读取和存储。因此后续的课程将会进一步介绍 etcd 分布式一致性实现以及 MVCC 多版本控制实现的原理。</p><p>本讲内容总结如下：</p>`,10),F=l("p",null,"学习完本课时，给大家留个小问题，etcd 写事务的提交会涉及 B+ 重新平衡，但这部分开销昂贵，该如何权衡呢？欢迎你在留言区提出自己的观点。",-1),v=l("p",null,"当然，本课时仅是介绍了底层的存储，对于如何实现分布式数据一致性并没有展开讲解。我们将在下一讲介绍 etcd-raft 如何实现分布式一致性。",-1);function u(C,g,A,k,D,m){const s=e("Image");return t(),c("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/07/57/Cgp9HWAzZPCAOvp9AAA152E_9xA032.png"}),a(),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/07/57/Cgp9HWAzZP6AeJMpAAA5nlj8jwI348.png"}),a(),i,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/07/58/Cgp9HWAzZT2AXZHsAABJ2oP8TZY732.png"}),a(),d,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/07/58/Cgp9HWAzZUqAWFIuAAKAncvsiss728.png"}),a(),F,v])}const R=o(r,[["render",u]]);export{_ as __pageData,R as default};
