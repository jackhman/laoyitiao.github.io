import{_ as p,j as o,o as e,g as t,k as a,h as n,Q as l,s as r}from"./chunks/framework.4e7d56ce.js";const C=JSON.parse('{"title":"07梳理混乱的Babel，不再被编译报错困扰","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5912) 07  梳理混乱的 Babel，不再被编译报错困扰.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5912) 07  梳理混乱的 Babel，不再被编译报错困扰.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/105-前端基础建设与架构文档/(5912) 07  梳理混乱的 Babel，不再被编译报错困扰.md"},E=l('<h1 id="_07梳理混乱的babel-不再被编译报错困扰" tabindex="-1">07梳理混乱的Babel，不再被编译报错困扰 <a class="header-anchor" href="#_07梳理混乱的babel-不再被编译报错困扰" aria-label="Permalink to &quot;07梳理混乱的Babel，不再被编译报错困扰&quot;">​</a></h1><p>今天我和你分享的话题和 Babel 相关。Babel 在前端中占有举足轻重的历史地位，几乎所有的大型前端应用项目都离不开 Babel 的支持。同时，Babel 不仅仅是一个工具，更是一个<strong>工具链（toolchain）</strong>，是前端基建中绝对重要的一环。</p><p>对于很多前端工程师来说，你可能配置过 Babel，也可能看过一些关于 Babel 插件或原理的文章。但我认为，&quot;配置工程师&quot;只是我们的起点，通过阅读几篇 Babel 插件编写的文章并不能让我们真正掌握 Babel 的设计思想和原理。</p><p>对于 Babel 的学习，不能停留在配置层面，我们需要从更高的角度认识 Babel 在工程上的方方面面和设计思想。这一讲就让我们深入 Babel 生态，了解前端基建工程中最重要的一环。</p><h3 id="babel-是什么" tabindex="-1">Babel 是什么 <a class="header-anchor" href="#babel-是什么" aria-label="Permalink to &quot;Babel 是什么&quot;">​</a></h3><p>借用 Babel 官方的一句话简短介绍：</p><blockquote><p>Babel is a JavaScript compiler.</p></blockquote><p>Babel 其实就是一个 JavaScript 的&quot;编译器&quot;。但是一个简单的编译器如何会成为影响前端项目的&quot;大杀器&quot;呢？究其原因，主要是前端语言特性和宿主（浏览器/Node.js 等）环境高速发展，但<strong>宿主环境对新语言特性的支持无法做到即时，而开发者又需要兼容各种宿主环境</strong>，因此语言特性的降级成为刚需。</p><p>另一方面，前端框架&quot;<strong>自定义 DSL</strong>&quot;的风格越来越凸显，使得前端各种&quot;姿势&quot;的代码被编译为 JavaScript 的需求成为标配。因此 Babel 的职责半径越来越大，它需要完成以下内容：</p><ul><li><p>语法转换，一般是高级语言特性的降级；</p></li><li><p>Polyfill（垫片/补丁）特性的实现和接入；</p></li><li><p>源码转换，比如 JSX 等。</p></li></ul><blockquote><p><a href="https://babeljs.io/videos.html" target="_blank" rel="noreferrer">更多需求，点击这里查看</a>。</p></blockquote><p>为了完成这些编译工作，Babel 不能大包大揽地实现一切，更不能用面条式毫无设计模式可言的方式来 Coding。因此，Babel 的设计，在工程化的角度上，需要秉承以下理念：</p><ul><li><p><strong>可插拔</strong>（Pluggable），比如 Babel 需要有一套灵活的插件机制，召集第三方开发者力量，同时还需要方便接入各种工具；</p></li><li><p><strong>可调式</strong>（Debuggable），比如 Babel 在编译过程中，要提供一套 Source Map，来帮助使用者在编译结果和编译前源码之间建立映射关系，方便调试；</p></li><li><p><strong>基于协定</strong> （Compact），Compact 可以简单翻译为基于协定，主要是指实现灵活的配置方式，比如你熟悉的 Babel<a href="https://2ality.com/2015/12/babel6-loose-mode.html" target="_blank" rel="noreferrer">loose 模式</a>，Babel 提供 loose 选项，帮助开发者在&quot;尽量还原规范&quot;和&quot;更小的编译产出体积&quot;之间，找到平衡。</p></li></ul><p>我们总结一下，<strong>编译是 Babel 的核心目标</strong>，因此它自身的实现基于编译原理，深入 AST（抽象语法树）来生成目标代码；同时，Babel 需要工程化协作，需要和各种工具（如 Webpack）相互配合，因此 Babel 一定是庞大复杂的。</p><p>接下来，我们继续深入 Babel，了解这个&quot;庞然大物&quot;的运作方式和实现原理。</p><h3 id="babel-monorepo-架构包解析" tabindex="-1">Babel Monorepo 架构包解析 <a class="header-anchor" href="#babel-monorepo-架构包解析" aria-label="Permalink to &quot;Babel Monorepo 架构包解析&quot;">​</a></h3><p>为了以最完美的方式支撑上述职责，Babel 的&quot;家族&quot;可谓枝繁叶茂。Babel 是一个使用 Lerna 构建的 Monorepo 风格的仓库，在其<a href="https://github.com/babel/babel/tree/main/packages" target="_blank" rel="noreferrer"><code>./packages</code></a>目录下有 140 多个包，这些包我经过整合分类，并按照重要性筛选出来，可以用下面这张图片简单概括：</p>',17),y=l(`<p>其中 Babel 部分包你可能见过或者使用过，但并不确定它们起到了什么作用；有些包，你可能都没有听说过。总的来说，可以分为两种情况：</p><ul><li><p>Babel 一些包的意义是在工程上起作用，因此对于业务来说是不透明的，比如一些插件可能被 Babel preset 预设机制打包对外输出；</p></li><li><p>Babel 一些包是为了纯工程项目使用，或者运行目标在 Node.js 环境中，相对来讲你对这些会更熟悉。</p></li></ul><p>下面，我会对一些&quot;Babel 家族重点成员&quot;进行梳理，并简单说说它们的基本原理。</p><p><a href="https://babeljs.io/docs/en/babel-core" target="_blank" rel="noreferrer">@babel/core</a> <strong>是 Babel 实现转换的核心</strong>，它可以根据配置，进行源码的编译转换：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/core&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">babel.</span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(code, options, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(err, result) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  result; </span><span style="color:#6A737D;">// =&gt; { code, map, ast }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> babel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/core&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">babel.</span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(code, options, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(err, result) {</span></span>
<span class="line"><span style="color:#24292E;">  result; </span><span style="color:#6A737D;">// =&gt; { code, map, ast }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><a href="https://babeljs.io/docs/en/babel-cli" target="_blank" rel="noreferrer">@babel/cli</a> <strong>是 Babel 提供的命令行</strong> ，它可以在终端中通过命令行方式运行，编译文件或目录。我们简单说一下它的实现原理：@babel/cli 使用了 <a href="https://github.com/babel/babel/blob/main/packages/babel-cli/package.json#L26" target="_blank" rel="noreferrer">commander</a> 库搭建基本的命令行开发。以编译文件为例，其关键部分<a href="https://github.com/babel/babel/blob/main/packages/babel-cli/package.json#L26" target="_blank" rel="noreferrer">源码如下</a>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">*</span><span style="color:#E1E4E8;"> as util from &quot;./util&quot;;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await Promise.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  _filenames.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(async </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Promise</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    let sourceFilename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filename;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cliOptions.outFile) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      sourceFilename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">relative</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">dirname</span><span style="color:#E1E4E8;">(cliOptions.outFile),</span></span>
<span class="line"><span style="color:#E1E4E8;">        sourceFilename,</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取文件名</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceFilename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">slash</span><span style="color:#E1E4E8;">(sourceFilename);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> await util.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(filename, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...babelOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">        sourceFileName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sourceFilename,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取 sourceMaps 配置项</span></span>
<span class="line"><span style="color:#E1E4E8;">        sourceMaps</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          babelOptions.sourceMaps </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;inline&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> babelOptions.sourceMaps,</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cliOptions.watch) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">*</span><span style="color:#24292E;"> as util from &quot;./util&quot;;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await Promise.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  _filenames.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(async </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Promise</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    let sourceFilename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> filename;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cliOptions.outFile) {</span></span>
<span class="line"><span style="color:#24292E;">      sourceFilename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">relative</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(cliOptions.outFile),</span></span>
<span class="line"><span style="color:#24292E;">        sourceFilename,</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取文件名</span></span>
<span class="line"><span style="color:#24292E;">    sourceFilename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">slash</span><span style="color:#24292E;">(sourceFilename);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> await util.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(filename, {</span></span>
<span class="line"><span style="color:#24292E;">        ...babelOptions,</span></span>
<span class="line"><span style="color:#24292E;">        sourceFileName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sourceFilename,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取 sourceMaps 配置项</span></span>
<span class="line"><span style="color:#24292E;">        sourceMaps</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          babelOptions.sourceMaps </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;inline&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> babelOptions.sourceMaps,</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cliOptions.watch) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }),</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>在上述代码中，@babel/cli 使用了<code>util.compile</code>方法执行关键的编译操作，而该方法定义在 <a href="https://github.com/babel/babel/blob/master/packages/babel-cli/src/babel/util.js#L80" target="_blank" rel="noreferrer">babel-cli/src/babel/util.js</a> 中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">*</span><span style="color:#E1E4E8;"> as babel from &quot;@babel/core&quot;;</span></span>
<span class="line"><span style="color:#6A737D;">// 核心编译方法</span></span>
<span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Object </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Function,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Promise</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 编译配置</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...opts,</span></span>
<span class="line"><span style="color:#E1E4E8;">    caller</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> CALLER,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">((resolve, reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 transformFile 方法执行编译过程</span></span>
<span class="line"><span style="color:#E1E4E8;">    babel.</span><span style="color:#B392F0;">transformFile</span><span style="color:#E1E4E8;">(filename, opts, (err, result) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">*</span><span style="color:#24292E;"> as babel from &quot;@babel/core&quot;;</span></span>
<span class="line"><span style="color:#6A737D;">// 核心编译方法</span></span>
<span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  opts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Object </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Function,</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Promise</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 编译配置</span></span>
<span class="line"><span style="color:#24292E;">  opts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ...opts,</span></span>
<span class="line"><span style="color:#24292E;">    caller</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> CALLER,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">((resolve, reject) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 transformFile 方法执行编译过程</span></span>
<span class="line"><span style="color:#24292E;">    babel.</span><span style="color:#6F42C1;">transformFile</span><span style="color:#24292E;">(filename, opts, (err, result) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由此可见，@babel/cli 负责获取配置内容，并最终依赖了 @babel/core 完成编译。</p><p>事实上，我们可以在 @babel/cli 的 package.json 中找到线索：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;peerDependencies&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;@babel/core&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;^7.0.0-0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;peerDependencies&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;@babel/core&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;^7.0.0-0&quot;</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre></div><p>这一部分的源码在 <a href="https://github.com/babel/babel/blob/master/packages/babel-cli/package.json#L39" target="_blank" rel="noreferrer">peerDependencies</a> 当中，你可以课后再次学习。</p><p>现在，你应该进一步体会到了 @babel/core 的作用，<strong>作为 @babel/cli 的关键依赖，@babel/core 提供了基础的编译能力</strong> 。至于为什么在 @babel/cli 中，使用<code>peerDependencies</code>，你可以在 <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5908" target="_blank" rel="noreferrer">03 讲&quot;CI 环境上的 npm 优化及更多工程化问题解析&quot;</a>中找到答案。</p><p>我们花时间梳理 @babel/cli 和 @babel/core 包，希望帮助你对于 Babel 各个包之间的协同分工有个整体感知，这也是 Monorepo 风格仓库常见的设计形式。接下来，我们再继续看更多&quot;家族成员&quot;。</p><p><a href="https://github.com/babel/babel/tree/main/packages/babel-standalone" target="_blank" rel="noreferrer">@babel/standalone</a>这个包非常有趣，它可以在非 Node.js 环境（比如浏览器环境）自动编译含有 text/babel 或 text/jsx 的 type 值的 script 标签，并进行编译，如下面代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text/babel&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;output&#39;</span><span style="color:#E1E4E8;">).innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text/babel&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;output&#39;</span><span style="color:#24292E;">).innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>其工作原理藏在 <a href="https://github.com/babel/babel/tree/main/packages/babel-standalone" target="_blank" rel="noreferrer">babel-standalone</a> 的<a href="https://github.com/babel/babel/blob/0641a15030565e7f47ef0c5ff25f36264c182b11/packages/babel-standalone/src/transformScriptTags.js#L132" target="_blank" rel="noreferrer">核心源码</a>中，最后的编译行为由：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  transformFromAst as babelTransformFromAst,</span></span>
<span class="line"><span style="color:#E1E4E8;">  transform as babelTransform,</span></span>
<span class="line"><span style="color:#E1E4E8;">  buildExternalHelpers as babelBuildExternalHelpers,</span></span>
<span class="line"><span style="color:#E1E4E8;">} from &quot;@babel/core&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  transformFromAst as babelTransformFromAst,</span></span>
<span class="line"><span style="color:#24292E;">  transform as babelTransform,</span></span>
<span class="line"><span style="color:#24292E;">  buildExternalHelpers as babelBuildExternalHelpers,</span></span>
<span class="line"><span style="color:#24292E;">} from &quot;@babel/core&quot;;</span></span></code></pre></div><p>来提供。因此，我们又看到了另一个基于 @babel/core 的应用：@babel/standalone。</p><p><strong>@babel/standalone 可以在浏览器中直接执行</strong> ，因此这个包对于<strong>浏览器环境动态插入高级语言特性的脚本</strong> 、<strong>在线自动解析编译</strong>非常有意义。我们知道的 Babel 官网也用到了这个包，JSFiddle、JS Bin 等也都是 @babel/standalone 的受益者。</p><p>我认为，在前端发展方向之一------Web IDE 和智能化方向上，相信类似的设计和技术将会有更多的施展空间，@babel/standalone 对于我们的现代化前端发展思路，应该有启发。</p><p>至此，我们看到了 @babel/core 被多个 Babel 包应用，而 @babel/core 的能力由更底层的 <strong>@babel/parser</strong> 、<strong>@babel/code-frame</strong> 、<strong>@babel/generator</strong> 、<strong>@babel/traverse、@babel/types</strong>等包提供。这些&quot;家族成员&quot;提供了更基础的 AST 处理能力。</p><p>我们先看 <a href="https://babeljs.io/docs/en/babel-parser" target="_blank" rel="noreferrer">@babel/parser</a>，它是 Babel 用来对 JavaScript 语言解析的解析器。</p><p>@babel/parser 的实现主要依赖并参考了 <a href="https://github.com/acornjs/acorn" target="_blank" rel="noreferrer">acorn</a> 和 <a href="https://github.com/acornjs/acorn-jsx" target="_blank" rel="noreferrer">acorn-jsx</a>，典型用法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/parser&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;code&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sourceType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;jsx&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;flow&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/parser&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;code&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  sourceType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  plugins</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;jsx&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;flow&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>parse<a href="https://github.com/babel/babel/blob/main/packages/babel-parser/src/index.js#L18" target="_blank" rel="noreferrer">源码实现</a>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(input</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string, options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> Options)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> File {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.sourceType </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;unambiguous&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...options,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      options.sourceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取相应的编译器</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParser</span><span style="color:#E1E4E8;">(options, input);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 使用编译器将源代码转为 ast</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parser.sawUnambiguousESM) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ast;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parser.ambiguousScriptDifferentAst) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          options.sourceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;script&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParser</span><span style="color:#E1E4E8;">(options, input).</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ast.program.sourceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;script&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ast;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (moduleError) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        options.sourceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;script&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParser</span><span style="color:#E1E4E8;">(options, input).</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> moduleError;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParser</span><span style="color:#E1E4E8;">(options, input).</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(input</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string, options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> Options)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> File {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.sourceType </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;unambiguous&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      ...options,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      options.sourceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取相应的编译器</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParser</span><span style="color:#24292E;">(options, input);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 使用编译器将源代码转为 ast</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parser.sawUnambiguousESM) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ast;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parser.ambiguousScriptDifferentAst) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          options.sourceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParser</span><span style="color:#24292E;">(options, input).</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ast.program.sourceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ast;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (moduleError) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        options.sourceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParser</span><span style="color:#24292E;">(options, input).</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> moduleError;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParser</span><span style="color:#24292E;">(options, input).</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由此可见，<code>require(&quot;@babel/parser&quot;).parse()</code>方法可以返回给我们一个针对源码编译得到的 AST，这里的 AST 符合<a href="https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md" target="_blank" rel="noreferrer">Babel AST 格式</a>。</p><p>有了 AST，我们<strong>还需要对 AST 完成修改，才能产出编译后的代码</strong> 。这就需要对 AST 进行遍历，此时 <a href="https://babeljs.io/docs/en/babel-traverse" target="_blank" rel="noreferrer">@babel/traverse</a> 就派上用场了，使用方式如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">enter</span><span style="color:#E1E4E8;">(path) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (path.</span><span style="color:#B392F0;">isIdentifier</span><span style="color:#E1E4E8;">({ name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;n&quot;</span><span style="color:#E1E4E8;"> })) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      path.node.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;x&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(ast, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">enter</span><span style="color:#24292E;">(path) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (path.</span><span style="color:#6F42C1;">isIdentifier</span><span style="color:#24292E;">({ name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;n&quot;</span><span style="color:#24292E;"> })) {</span></span>
<span class="line"><span style="color:#24292E;">      path.node.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;x&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>遍历的同时，如何对 AST 上指定内容进行修改呢？这就又要引出另外一个&quot;家族成员&quot;，<a href="https://babeljs.io/docs/en/babel-types" target="_blank" rel="noreferrer">@babel/types</a> <strong>包提供了对具体的 AST 节点的修改能力</strong>。</p><p>得到了编译后的 AST 之后，最后一步：使用 <a href="https://babeljs.io/docs/en/babel-generator" target="_blank" rel="noreferrer">@babel/generator</a> <strong>对新的 AST 进行聚合并生成 JavaScript 代码</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  ast,</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* options */</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  code</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  ast,</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* options */</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  code</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>这样一个典型的 Babel 底层编译流程就出来了，如下图：</p>`,35),i=l(`<p>Babel 底层编译流程图</p><p>上图也是 Babel 插件运作实现的基础。基于 AST 的操作，Babel 将上述所有能力开放给插件，让第三方能够更方便地操作 AST，并聚合成最后编译产出的代码。</p><p>基于以上原理，Babel 具备了编译处理能力，但在工程中运用时，我们一般不会感知这些内容，你可能也很少直接操作 @babel/core、@babel/types 等，而应该对 @babel/preset-env 更加熟悉，毕竟 <a href="https://babeljs.io/docs/en/babel-preset-env" target="_blank" rel="noreferrer">@babel/preset-env</a> <strong>是直接暴露给开发者在业务中运用的包能力</strong>。</p><p>在工程中，我们需要 Babel 做到的是编译降级，而这个编译降级一般通过 <a href="https://babeljs.io/docs/en/babel-preset-env" target="_blank" rel="noreferrer">@babel/preset-env</a> 来配置。@babel/preset-env 允许我们配置需要支持的目标环境（一般是浏览器范围或 Node.js 版本范围），利用 <a href="https://babeljs.io/docs/en/babel-polyfill" target="_blank" rel="noreferrer">babel-polyfill</a> 完成补丁的接入。结合上一讲内容，<strong>@babel/polyfill 其实就是 core-js 和 regenerator-runtime 两个包的结合，@babel/polyfill 源码层面，通过 build-dist.sh 脚本，利用 browserify 进行打包</strong> ，参考<a href="https://github.com/babel/babel/blob/main/packages/babel-polyfill/scripts/build-dist.sh" target="_blank" rel="noreferrer">源码</a>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">!/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sh</span></span>
<span class="line"><span style="color:#E1E4E8;">set </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ex</span></span>
<span class="line"><span style="color:#E1E4E8;">mkdir </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p dist</span></span>
<span class="line"><span style="color:#E1E4E8;">yarn browserify lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.js \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">insert</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">global</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">vars </span><span style="color:#9ECBFF;">&#39;global&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">plugin bundle</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">collapser</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">plugin \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">plugin derequire</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">plugin \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">dist</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">polyfill.js</span></span>
<span class="line"><span style="color:#E1E4E8;">yarn uglifyjs dist</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">polyfill.js \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">compress keep_fnames,keep_fargs \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">mangle keep_fnames \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">dist</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">polyfill.min.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#</span><span style="color:#D73A49;">!/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sh</span></span>
<span class="line"><span style="color:#24292E;">set </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ex</span></span>
<span class="line"><span style="color:#24292E;">mkdir </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p dist</span></span>
<span class="line"><span style="color:#24292E;">yarn browserify lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">index.js \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">insert</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">global</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">vars </span><span style="color:#032F62;">&#39;global&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">plugin bundle</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">collapser</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">plugin \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">plugin derequire</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">plugin \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">dist</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">polyfill.js</span></span>
<span class="line"><span style="color:#24292E;">yarn uglifyjs dist</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">polyfill.js \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">compress keep_fnames,keep_fargs \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">mangle keep_fnames \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">dist</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">polyfill.min.js</span></span></code></pre></div><p><strong>注意：@babel/polyfill 目前已经计划废弃</strong>，新的 Babel 生态（@babel/preset-env V7.4.0 版本）鼓励开发者直接在代码中引入 core-js 和 regenerator-runtime。但是不管直接导入 core-js 和 regenerator-runtime，还是直接导入 @babel/polyfill 都是引入了全量的 polyfills，@babel/preset-env 如何根据目标适配环境，按需引入业务中所需要的 polyfills 呢？</p><p>事实上，@babel/preset-env 通过 <a href="https://babeljs.io/docs/en/babel-preset-env#targets" target="_blank" rel="noreferrer">targets 参数</a>，按照 browserslist 规范，结 合<a href="https://www.npmjs.com/package/core-js-compat" target="_blank" rel="noreferrer">core-js-compat</a>，筛选出适配环境所需的 polyfills（或 plugins），关键源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">declare</span><span style="color:#E1E4E8;">((api, opts) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 规范参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    bugfixes,</span></span>
<span class="line"><span style="color:#E1E4E8;">    configPath,</span></span>
<span class="line"><span style="color:#E1E4E8;">    debug,</span></span>
<span class="line"><span style="color:#E1E4E8;">    exclude</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> optionsExclude,</span></span>
<span class="line"><span style="color:#E1E4E8;">    forceAllTransforms,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ignoreBrowserslistConfig,</span></span>
<span class="line"><span style="color:#E1E4E8;">    include</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> optionsInclude,</span></span>
<span class="line"><span style="color:#E1E4E8;">    loose,</span></span>
<span class="line"><span style="color:#E1E4E8;">    modules,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shippedProposals,</span></span>
<span class="line"><span style="color:#E1E4E8;">    spec,</span></span>
<span class="line"><span style="color:#E1E4E8;">    targets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> optionsTargets,</span></span>
<span class="line"><span style="color:#E1E4E8;">    useBuiltIns,</span></span>
<span class="line"><span style="color:#E1E4E8;">    corejs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { version</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> corejs, proposals },</span></span>
<span class="line"><span style="color:#E1E4E8;">    browserslistEnv,</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeOptions</span><span style="color:#E1E4E8;">(opts);</span></span>
<span class="line"><span style="color:#E1E4E8;">  let hasUglifyTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取对应 targets</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> targets </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTargets</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    (optionsTargets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> InputTargets),</span></span>
<span class="line"><span style="color:#E1E4E8;">    { ignoreBrowserslistConfig, configPath, browserslistEnv },</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> include </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transformIncludesAndExcludes</span><span style="color:#E1E4E8;">(optionsInclude);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> exclude </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transformIncludesAndExcludes</span><span style="color:#E1E4E8;">(optionsExclude);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> transformTargets </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> forceAllTransforms </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> hasUglifyTarget </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {} </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> targets;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取需要兼容的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> compatData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPluginList</span><span style="color:#E1E4E8;">(shippedProposals, bugfixes);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> modulesPluginNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModulesPluginNames</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    modules,</span></span>
<span class="line"><span style="color:#E1E4E8;">    transformations</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> moduleTransformations,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shouldTransformESM</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> modules </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;auto&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">api.caller</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.(supportsStaticESM),</span></span>
<span class="line"><span style="color:#E1E4E8;">    shouldTransformDynamicImport</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      modules </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;auto&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">api.caller</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.(supportsDynamicImport),</span></span>
<span class="line"><span style="color:#E1E4E8;">    shouldTransformExportNamespaceFrom</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">shouldSkipExportNamespaceFrom,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shouldParseTopLevelAwait</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">api.caller </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> api.</span><span style="color:#B392F0;">caller</span><span style="color:#E1E4E8;">(supportsTopLevelAwait),</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取目标 plugin 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> pluginNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterItems</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    compatData,</span></span>
<span class="line"><span style="color:#E1E4E8;">    include.plugins,</span></span>
<span class="line"><span style="color:#E1E4E8;">    exclude.plugins,</span></span>
<span class="line"><span style="color:#E1E4E8;">    transformTargets,</span></span>
<span class="line"><span style="color:#E1E4E8;">    modulesPluginNames,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getOptionSpecificExcludesFor</span><span style="color:#E1E4E8;">({ loose }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    pluginSyntaxMap,</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">removeUnnecessaryItems</span><span style="color:#E1E4E8;">(pluginNames, overlappingPlugins);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> polyfillPlugins </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPolyfillPlugins</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    useBuiltIns,</span></span>
<span class="line"><span style="color:#E1E4E8;">    corejs,</span></span>
<span class="line"><span style="color:#E1E4E8;">    polyfillTargets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> targets,</span></span>
<span class="line"><span style="color:#E1E4E8;">    include</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> include.builtIns,</span></span>
<span class="line"><span style="color:#E1E4E8;">    exclude</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> exclude.builtIns,</span></span>
<span class="line"><span style="color:#E1E4E8;">    proposals,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shippedProposals,</span></span>
<span class="line"><span style="color:#E1E4E8;">    regenerator</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pluginNames.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;transform-regenerator&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    debug,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> pluginUseBuiltIns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useBuiltIns </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据 pluginNames，返回一个 plugins 配置列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> plugins </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(pluginNames)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(pluginName </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        pluginName </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proposal-class-properties&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">        pluginName </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proposal-private-methods&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">        pluginName </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proposal-private-property-in-object&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">getPlugin</span><span style="color:#E1E4E8;">(pluginName),</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loose</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> loose</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ];</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getPlugin</span><span style="color:#E1E4E8;">(pluginName),</span></span>
<span class="line"><span style="color:#E1E4E8;">        { spec, loose, useBuiltIns</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pluginUseBuiltIns },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ];</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(polyfillPlugins);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { plugins };</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">declare</span><span style="color:#24292E;">((api, opts) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 规范参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    bugfixes,</span></span>
<span class="line"><span style="color:#24292E;">    configPath,</span></span>
<span class="line"><span style="color:#24292E;">    debug,</span></span>
<span class="line"><span style="color:#24292E;">    exclude</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> optionsExclude,</span></span>
<span class="line"><span style="color:#24292E;">    forceAllTransforms,</span></span>
<span class="line"><span style="color:#24292E;">    ignoreBrowserslistConfig,</span></span>
<span class="line"><span style="color:#24292E;">    include</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> optionsInclude,</span></span>
<span class="line"><span style="color:#24292E;">    loose,</span></span>
<span class="line"><span style="color:#24292E;">    modules,</span></span>
<span class="line"><span style="color:#24292E;">    shippedProposals,</span></span>
<span class="line"><span style="color:#24292E;">    spec,</span></span>
<span class="line"><span style="color:#24292E;">    targets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> optionsTargets,</span></span>
<span class="line"><span style="color:#24292E;">    useBuiltIns,</span></span>
<span class="line"><span style="color:#24292E;">    corejs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { version</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> corejs, proposals },</span></span>
<span class="line"><span style="color:#24292E;">    browserslistEnv,</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeOptions</span><span style="color:#24292E;">(opts);</span></span>
<span class="line"><span style="color:#24292E;">  let hasUglifyTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取对应 targets</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> targets </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTargets</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    (optionsTargets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> InputTargets),</span></span>
<span class="line"><span style="color:#24292E;">    { ignoreBrowserslistConfig, configPath, browserslistEnv },</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> include </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transformIncludesAndExcludes</span><span style="color:#24292E;">(optionsInclude);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> exclude </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transformIncludesAndExcludes</span><span style="color:#24292E;">(optionsExclude);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> transformTargets </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> forceAllTransforms </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> hasUglifyTarget </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {} </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> targets;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取需要兼容的内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> compatData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPluginList</span><span style="color:#24292E;">(shippedProposals, bugfixes);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> modulesPluginNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getModulesPluginNames</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    modules,</span></span>
<span class="line"><span style="color:#24292E;">    transformations</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> moduleTransformations,</span></span>
<span class="line"><span style="color:#24292E;">    shouldTransformESM</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> modules </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;auto&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">api.caller</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.(supportsStaticESM),</span></span>
<span class="line"><span style="color:#24292E;">    shouldTransformDynamicImport</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      modules </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;auto&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">api.caller</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.(supportsDynamicImport),</span></span>
<span class="line"><span style="color:#24292E;">    shouldTransformExportNamespaceFrom</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">shouldSkipExportNamespaceFrom,</span></span>
<span class="line"><span style="color:#24292E;">    shouldParseTopLevelAwait</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">api.caller </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> api.</span><span style="color:#6F42C1;">caller</span><span style="color:#24292E;">(supportsTopLevelAwait),</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取目标 plugin 名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> pluginNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filterItems</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    compatData,</span></span>
<span class="line"><span style="color:#24292E;">    include.plugins,</span></span>
<span class="line"><span style="color:#24292E;">    exclude.plugins,</span></span>
<span class="line"><span style="color:#24292E;">    transformTargets,</span></span>
<span class="line"><span style="color:#24292E;">    modulesPluginNames,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getOptionSpecificExcludesFor</span><span style="color:#24292E;">({ loose }),</span></span>
<span class="line"><span style="color:#24292E;">    pluginSyntaxMap,</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">removeUnnecessaryItems</span><span style="color:#24292E;">(pluginNames, overlappingPlugins);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> polyfillPlugins </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPolyfillPlugins</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    useBuiltIns,</span></span>
<span class="line"><span style="color:#24292E;">    corejs,</span></span>
<span class="line"><span style="color:#24292E;">    polyfillTargets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> targets,</span></span>
<span class="line"><span style="color:#24292E;">    include</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> include.builtIns,</span></span>
<span class="line"><span style="color:#24292E;">    exclude</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> exclude.builtIns,</span></span>
<span class="line"><span style="color:#24292E;">    proposals,</span></span>
<span class="line"><span style="color:#24292E;">    shippedProposals,</span></span>
<span class="line"><span style="color:#24292E;">    regenerator</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pluginNames.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;transform-regenerator&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    debug,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> pluginUseBuiltIns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> useBuiltIns </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 根据 pluginNames，返回一个 plugins 配置列表</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> plugins </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(pluginNames)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(pluginName </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        pluginName </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proposal-class-properties&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        pluginName </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proposal-private-methods&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        pluginName </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proposal-private-property-in-object&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">getPlugin</span><span style="color:#24292E;">(pluginName),</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            loose</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> loose</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error&quot;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getPlugin</span><span style="color:#24292E;">(pluginName),</span></span>
<span class="line"><span style="color:#24292E;">        { spec, loose, useBuiltIns</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pluginUseBuiltIns },</span></span>
<span class="line"><span style="color:#24292E;">      ];</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(polyfillPlugins);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { plugins };</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>这部分内容你可以与上一讲&quot;core-js 及垫片理念：设计一个&#39;最完美&#39;的 Polyfill 方案&quot;相结合，相信你会对前端&quot;按需 polyfill&quot;有一个更加清晰的认知。</p><p>至于 Babel 家族的其他成员，相信你也一定见过 <a href="https://babeljs.io/docs/en/babel-plugin-transform-runtime" target="_blank" rel="noreferrer">@babel/plugin-transform-runtime</a>，它可以<strong>重复使用 Babel 注入的 helpers 函数</strong> ，达到<strong>节省代码大小</strong>的目的。</p><p>比如，对于这样一段简单的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">{}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{}</span></span></code></pre></div><p>Babel 在编译后，得到：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">_instanceof</span><span style="color:#E1E4E8;">(left, right) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (right </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> typeof Symbol </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">   right[Symbol.hasInstance]) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!!</span><span style="color:#E1E4E8;">right[Symbol.hasInstance](left); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> right; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">_classCallCheck</span><span style="color:#E1E4E8;">(instance, Constructor) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">_instanceof</span><span style="color:#E1E4E8;">(instance, Constructor)) { </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot call a class as a function&quot;</span><span style="color:#E1E4E8;">); }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Person </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">_classCallCheck</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, Person);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">_instanceof</span><span style="color:#24292E;">(left, right) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> typeof Symbol </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">   right[Symbol.hasInstance]) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!!</span><span style="color:#24292E;">right[Symbol.hasInstance](left); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> right; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">_classCallCheck</span><span style="color:#24292E;">(instance, Constructor) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">_instanceof</span><span style="color:#24292E;">(instance, Constructor)) { </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cannot call a class as a function&quot;</span><span style="color:#24292E;">); }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">_classCallCheck</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, Person);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>其中<code>_instanceof</code>和<code>_classCallCheck</code>都是 Babel 内置的 helpers 函数。如果每个 class 编译结果都在代码中植入这些 helpers 具体内容，对产出代码体积就会有明显恶化影响。在启用 @babel/plugin-transform-runtime 插件后，上述代码的编译结果可以变为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _interopRequireDefault </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/runtime/helpers/interopRequireDefault&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _classCallCheck2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_interopRequireDefault</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/runtime/helpers/classCallCheck&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Person </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, _classCallCheck2.default)(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, Person);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _interopRequireDefault </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/runtime/helpers/interopRequireDefault&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _classCallCheck2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_interopRequireDefault</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/runtime/helpers/classCallCheck&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, _classCallCheck2.default)(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, Person);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>从上述代码我们可以看到，_classCallCheck 作为模块依赖被引入文件中，基于打包工具的 cache 能力，从而减少了产出代码体积。需要注意的是，观察以上代码，_classCallCheck2 这个 helper 由 <a href="https://babeljs.io/docs/en/babel-runtime" target="_blank" rel="noreferrer">@babel/runtime</a> 给出，这就又由一条线，牵出来了 Babel 家族的另一个包：@babel/runtime。</p><p><strong>@babel/runtime</strong> 含有 Babel 编译所需的一些运行时 helpers 函数，<strong>供业务代码引入模块化的 Babel helpers 函数</strong> ，同时它提供了 <a href="https://www.npmjs.com/package/regenerator-runtime" target="_blank" rel="noreferrer">regenerator-runtime</a>，对 generator 和 async 函数进行编译降级。</p><p>总结一下：</p><ul><li><p>@babel/plugin-transform-runtime 需要和 @babel/runtime 配合使用；</p></li><li><p>@babel/plugin-transform-runtime 用于编译时，作为 devDependencies 使用；</p></li><li><p>@babel/plugin-transform-runtime 将业务代码编译，引用 @babel/runtime 提供的 helpers，达到缩减编译产出体积的目的；</p></li><li><p>@babel/runtime 用于运行时，作为 dependencies 使用。</p></li></ul><p>另外，@babel/plugin-transform-runtime 和 @babel/runtime 结合还有一个作用：<strong>它除了可以对产出代码瘦身以外，还能避免污染全局作用域</strong>。比如一个生成器函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {}</span></span></code></pre></div><p>正常经过 Babel 编译后，产出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _marked </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [foo].</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(regeneratorRuntime.mark);</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> regeneratorRuntime.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    function </span><span style="color:#B392F0;">foo$</span><span style="color:#E1E4E8;">(_context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> ((_context.prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _context.next)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;end&quot;</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _context.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">_marked</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _marked </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [foo].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(regeneratorRuntime.mark);</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> regeneratorRuntime.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    function </span><span style="color:#6F42C1;">foo$</span><span style="color:#24292E;">(_context) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> ((_context.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _context.next)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _context.</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">_marked</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中 regeneratorRuntime 需要是一个全局变量，<strong>上述编译后代码污染了全局空间</strong>。结合 @babel/plugin-transform-runtime 和 @babel/runtime，可以将上述代码转换为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 特别命名为 _regenerator 和 _regenerator2,避免污染命名空间</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _regenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/runtime/regenerator&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _regenerator2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_interopRequireDefault</span><span style="color:#E1E4E8;">(_regenerator);</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">_interopRequireDefault</span><span style="color:#E1E4E8;">(obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> obj.__esModule </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> obj };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _marked </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [foo].</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(_regenerator2.default.mark);</span></span>
<span class="line"><span style="color:#6A737D;">// 编译 await 为自执行的 generator 模式</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _regenerator2.default.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    function </span><span style="color:#B392F0;">foo$</span><span style="color:#E1E4E8;">(_context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> ((_context.prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _context.next)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;end&quot;</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _context.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">_marked</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 特别命名为 _regenerator 和 _regenerator2,避免污染命名空间</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _regenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/runtime/regenerator&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _regenerator2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_interopRequireDefault</span><span style="color:#24292E;">(_regenerator);</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">_interopRequireDefault</span><span style="color:#24292E;">(obj) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> obj.__esModule </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> obj };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _marked </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [foo].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(_regenerator2.default.mark);</span></span>
<span class="line"><span style="color:#6A737D;">// 编译 await 为自执行的 generator 模式</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _regenerator2.default.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    function </span><span style="color:#6F42C1;">foo$</span><span style="color:#24292E;">(_context) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> ((_context.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _context.next)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _context.</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">_marked</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时，regenerator 由 <code>require(&quot;@babel/runtime/regenerator&quot;)</code>导出，且导出结果被赋值为一个文件作用域内的 _regenerator 变量，从而避免了污染。</p><p>理清了这层关系，相信你在使用 Babel 家族成员时，能够更准确地从原理层面理解各项配置功能。</p><p>最后，我们再梳理其他几个重要的 Babel 家族成员及其能力和实现原理。</p><ul><li><p><a href="https://babeljs.io/docs/en/plugins" target="_blank" rel="noreferrer">@babel/plugin</a>是 Babel 插件集合。</p></li><li><p><strong>@babel/plugin-syntax-* 是 Babel 的语法插件</strong>。它的作用是扩展 @babel/parser 的一些能力，提供给工程使用。比如 @babel/plugin-syntax-top-level-await 插件，提供了使用 top level await 新特性的能力。</p></li><li><p><strong>@babel/plugin-proposal-* 用于编译转换在提议阶段的语言特性</strong>。</p></li><li><p><strong>@babel/plugin-transform-* 是 Babel 的转换插件</strong>。比如简单的 @babel/plugin-transform-react-display-name 插件，可以自动适配 React 组件 DisplayName，比如：</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> React.</span><span style="color:#B392F0;">createClass</span><span style="color:#E1E4E8;">({}); </span><span style="color:#6A737D;">// React &lt;= 15</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createReactClass</span><span style="color:#E1E4E8;">({});  </span><span style="color:#6A737D;">// React 16+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> React.</span><span style="color:#6F42C1;">createClass</span><span style="color:#24292E;">({}); </span><span style="color:#6A737D;">// React &lt;= 15</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createReactClass</span><span style="color:#24292E;">({});  </span><span style="color:#6A737D;">// React 16+</span></span></code></pre></div><p>上述调用，经过 @babel/plugin-transform-react-display-name，可以被编译为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> React.</span><span style="color:#B392F0;">createClass</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  displayName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}); </span><span style="color:#6A737D;">// React &lt;= 15</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createReactClass</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  displayName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bar&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}); </span><span style="color:#6A737D;">// React 16+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> React.</span><span style="color:#6F42C1;">createClass</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  displayName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo&quot;</span></span>
<span class="line"><span style="color:#24292E;">}); </span><span style="color:#6A737D;">// React &lt;= 15</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createReactClass</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  displayName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bar&quot;</span></span>
<span class="line"><span style="color:#24292E;">}); </span><span style="color:#6A737D;">// React 16+</span></span></code></pre></div><ul><li><p><a href="https://babeljs.io/docs/en/babel-template" target="_blank" rel="noreferrer">@babel/template</a> 封装了基于 AST 的模板能力，可以将字符串代码转换为 AST。比如在生成一些辅助代码（helper）时会用到这个库。</p></li><li><p>@<a href="https://babeljs.io/docs/en/babel-node" target="_blank" rel="noreferrer">babel/node</a> 类似 Node.js Cli，@babel/node 提供在命令行执行高级语法的环境，也就是说，相比于 Node.js Cli，它加入了对更多特性的支持。</p></li><li><p><a href="https://babeljs.io/docs/en/babel-register" target="_blank" rel="noreferrer">@babel/register</a> 实际上是为 require 增加了一个 hook，使用之后，所有被 Node.js 引用的文件都会先被 Babel 转码。</p></li></ul><p><strong>这里请注意</strong>@babel/node 和 @babel/register，都是在运行时进行编译转换，因此运行时性能上会有影响。在生产环境中，我们一般不直接使用。</p><p>上述内容看似枯燥，涉及了一般对于业务开发者黑盒的编译产出、源码层面的实现原理、各个包直接的分工协调和组织，可能对于你来说，做到真正理解并非一夕之功。接下来，我们从更加宏观地角度来加深认识。</p><h3 id="babel-工程生态架构设计和分层理念" tabindex="-1">Babel 工程生态架构设计和分层理念 <a class="header-anchor" href="#babel-工程生态架构设计和分层理念" aria-label="Permalink to &quot;Babel 工程生态架构设计和分层理念&quot;">​</a></h3><p>了解了上述内容，也许你会想问，在平时开发中出镜率极高的 babel-loader 怎么没有看到？事实上，Babel 的生态是内聚的，也是开放的。我们通过 Babel 对代码的编译过程，可以从微观上缩小为前端基建的一个环节，这个环节融入整个工程中，也需要和其他环节相互配合。而 <a href="https://github.com/babel/babel-loader" target="_blank" rel="noreferrer">babel-loader</a> <strong>就是 Babel 结合 Webpack，融入整个基建环节的例子</strong>。</p><p>在 Webpack 编译生命周期中，babel-loader 作为一个 Webpack loader，承担着文件编译职责。我们暂且将 babel-loader 放到 Babel 家族中，先来看看下面这张&quot;全家福&quot;。</p>`,39),u=l(`<p>Babel 家族分层模型图</p><p>如上图所示，Babel 生态基本按照：辅助层 → 基础层 → 胶水层 → 应用层，四级结构完成。其中部分环节角色的界定有些模糊，比如 @babel/highlight 也可以作为应用层工具出现。</p><p><strong>基础层提供了基础的编译能力</strong> ，完成分词、解析 AST、生成产出代码的工作。基础层中，我们将一些抽象能力下沉为辅助层，这些抽象能力被基础层使用。同时，在基础层之上，我们构建了如 @babel/preset-env 等预设/插件能力，这些类似&quot;胶水&quot;的包，完成了代码编译降级所需补丁的构建、运行时逻辑的模块化抽象等工作。在<strong>最上层，Babel 生态提供了终端命令行</strong>、Webpack loader、浏览器端编译等应用级别的能力。</p><p>分层的意义在于应用，下面我们从一个应用场景来具体分析，看看 Babel 工程化设计能够给我们带来什么样的启示。</p><h4 id="从-babel-eslint-parser-看-babel-工程化启示" tabindex="-1">从 @babel/eslint-parser 看 Babel 工程化启示 <a class="header-anchor" href="#从-babel-eslint-parser-看-babel-工程化启示" aria-label="Permalink to &quot;从 @babel/eslint-parser 看 Babel 工程化启示&quot;">​</a></h4><p>相信你一定认识 <a href="https://github.com/eslint/eslint" target="_blank" rel="noreferrer">ESLint</a>，它可以用来帮助我们<strong>审查 ECMAScript/JavaScript 代码</strong>，其原理也是基于 AST 语法分析，进行规则校验。那这和我们的 Babel 有什么关联呢？</p><p>试想一下，如果我们的业务代码使用了较多的试验性 ECMAScript 语言特性，那么 ESLint 如何识别这些新的语言特性，做到新特性的代码检查呢？</p><p>事实上，<strong>ESLint 的解析工具只支持最终进入 ECMAScript 语言标准的特性</strong> ，如果想对试验性特性或者 Flow/TypeScript 进行代码检查，ESLint 提供了更换 parser 的能力。而 <a href="https://github.com/babel/babel/tree/main/eslint/babel-eslint-parser" target="_blank" rel="noreferrer">@babel/eslint-parser</a> 就是配合 ESLint 检验合法 Babel 代码的解析器。</p><p>实现原理也很简单，ESLint 支持 <a href="https://eslint.org/docs/developer-guide/working-with-custom-parsers" target="_blank" rel="noreferrer">custom-parser</a>，它允许我们使用自定义的第三方编译器，比如下面是一个使用了 espree 作为一个 custom-parser 的场景：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;parser&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./path/to/awesome-custom-parser.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> espree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;espree&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// awesome-custom-parser.js</span></span>
<span class="line"><span style="color:#E1E4E8;">exports.parseForESLint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(code, options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ast</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> espree.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(code, options),</span></span>
<span class="line"><span style="color:#E1E4E8;">        services</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            foo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        scopeManager</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        visitorKeys</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;parser&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./path/to/awesome-custom-parser.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> espree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;espree&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// awesome-custom-parser.js</span></span>
<span class="line"><span style="color:#24292E;">exports.parseForESLint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(code, options) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ast</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> espree.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(code, options),</span></span>
<span class="line"><span style="color:#24292E;">        services</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        scopeManager</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        visitorKeys</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>@babel/eslint-parser<a href="https://github.com/babel/babel/blob/main/eslint/babel-eslint-parser/src/index.js" target="_blank" rel="noreferrer">源码</a>的实现，保留了相同的模板，它通过自定的 parser，最终返回了 ESLint 所需要的 AST 内容，根据具体的 ESLint rules 进行代码审查：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> export function </span><span style="color:#B392F0;">parseForESLint</span><span style="color:#E1E4E8;">(code, options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> normalizedOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeESLintConfig</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">baseParse</span><span style="color:#E1E4E8;">(code, normalizedOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> scopeManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">analyzeScope</span><span style="color:#E1E4E8;">(ast, normalizedOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { ast, scopeManager, visitorKeys };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> export function </span><span style="color:#6F42C1;">parseForESLint</span><span style="color:#24292E;">(code, options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> normalizedOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeESLintConfig</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">baseParse</span><span style="color:#24292E;">(code, normalizedOptions);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> scopeManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">analyzeScope</span><span style="color:#24292E;">(ast, normalizedOptions);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { ast, scopeManager, visitorKeys };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中，ast 是 <a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">estree</a> 兼容的格式，可以被 ESLint 理解。<strong>visitor Keys 定义了自定义的编译 AST 能力，ScopeManager 定义了新（试验）特性自定义的作用域</strong>。</p><p>由此可见，Babel 生态和前端工程中的各个环节都是打通开放的。它<strong>可以以 babel-loader 的形式和 Webpack 协作，也可以以 @babel/eslint-parser 的方式和 ESLint 合作</strong>。现代化的前端工程是一环扣一环的，作为工程链上的任意一环，插件化能力、协作能力将是设计的重点和关键。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>作为前端开发者，你可能会被如何配置 Babel、Webpack 这些工具所困扰，出现&quot;配置到自己的项目中，就各种报错&quot;的问题。</p><p>此时，你可能花费了一天的时间，通过 Google 找到了最终的配置解法，但是解决之道却没搞清楚，得过且过，今后依然被类似的困境袭扰；你可能看过一些关于 Babel 插件和原理的文章，自以为掌握了 AST、窥探了编译，但真正手写一个分词器 Tokenizer 就一头雾水。</p><p>我们需要对 Babel 进行系统学习，学习目的是了解其工程化设计，方便我们在前端基建的过程中做到&quot;最佳配置实践&quot;，做到&quot;不再被编译报错&quot;所困扰。</p>`,18),b=r("p",null,'希望本讲能对大家的学习和工作带来一些启发，更多相关内容我们会在"从实战出发，从 0 到 1 构建一个符合标准的公共库""如何理解 AST 实现和编译原理？"等小节中继续探索！',-1);function F(g,d,m,h,A,f){const s=o("Image");return e(),t("div",null,[E,a(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8C/84/CgqCHl_toZGAYAFJAAFicXOL898453.png"}),n(),y,a(s,{alt:"Lark20210101-165010.png",src:"https://s0.lgstatic.com/i/image/M00/8C/8A/CgqCHl_u4niAOtOmAAEw7EQpjEI596.png"}),n(),i,a(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/04/5A/Cip5yF_tojyAfvQeAAMW8bbGBAY698.png"}),n(),u,a(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/04/5C/CgpVE1_tolmAct9gAAFdbBBSMZI815.png"}),n(),b])}const v=p(c,[["render",F]]);export{C as __pageData,v as default};
