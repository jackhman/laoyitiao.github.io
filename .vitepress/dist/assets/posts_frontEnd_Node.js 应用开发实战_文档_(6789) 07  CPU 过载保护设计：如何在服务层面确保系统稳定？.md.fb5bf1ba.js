import{_ as o,j as e,o as c,g as t,k as p,h as n,s,Q as l}from"./chunks/framework.4e7d56ce.js";const P=JSON.parse('{"title":"过载保护 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Node.js 应用开发实战_文档/(6789) 07  CPU 过载保护设计：如何在服务层面确保系统稳定？.md","filePath":"posts/frontEnd/Node.js 应用开发实战_文档/(6789) 07  CPU 过载保护设计：如何在服务层面确保系统稳定？.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/Node.js 应用开发实战_文档/(6789) 07  CPU 过载保护设计：如何在服务层面确保系统稳定？.md"},E=l(`<p>上一讲我们介绍了影响 Node.js 服务性能的一个关键点，也就是 <strong>CPU 的密集型计算</strong>，通过例子，你可以看到只要出现这类请求，基本就会导致服务器瘫痪。那么是否有办法来保护我们的服务呢？比如说我们是否可以丢弃部分 /v1/cpu 的请求，但是可以正常响应 /v1/normal 的用户请求，这就是我们这一讲要介绍的知识点，也就是 CPU 过载保护机制。</p><h3 id="过载保护" tabindex="-1">过载保护 <a class="header-anchor" href="#过载保护" aria-label="Permalink to &quot;过载保护&quot;">​</a></h3><p>假设一种场景，我们去银行办事，大家都知道需要拿号排队，银行每 10 分钟处理 1 个人的业务，而每 10 分钟会进来 2 个人，这样每 10 分钟就会积压一个用户，然后偶数进来的用户还需要多等 10 分钟，从而就会导致每个人的等待时长是 ((n + 1) / 2 - 1 + (n + 1) % 2) * 10。</p><p>其中变量 n 为第几个进来的用户。随着 n 越大，等待的时间就越长，如果没有及时制止，银行将永远都是饱和状态。长时间饱和工作状态，银行人员将会很辛苦，从而无法更好服务用户。一般情况下，在银行都会有一定的取号上限或者保安会提示无法再服务了，这就是一个<strong>过载的保护</strong>，避免因事务积压，导致系统无法提供更好的服务。</p><p>以上是一个简单的例子，接下来我们从技术层面介绍过载保护概念，而由于 Node.js 最大的性能损耗又在于 CPU，因此又需要进一步了解什么是 CPU 的过载保护。</p><h4 id="_1-什么是过载保护" tabindex="-1">1.什么是过载保护 <a class="header-anchor" href="#_1-什么是过载保护" aria-label="Permalink to &quot;1.什么是过载保护&quot;">​</a></h4><p><strong>这个词最早出现是在电路方面</strong>，在出现短路或者电压承载过大时，会触发电源的过载保护设备，该设备要不熔断、要不跳闸切断电源。</p><p>在服务端也是相似的原理，首先我们需要设计一个过载保护的服务，在过载触发时，切断用户服务直接返回报错，在压力恢复时，正常响应用户请求。</p><h4 id="_2-cpu-过载保护" tabindex="-1">2.CPU 过载保护 <a class="header-anchor" href="#_2-cpu-过载保护" aria-label="Permalink to &quot;2.CPU 过载保护&quot;">​</a></h4><p>在 Node.js 中最大的瓶颈在于 CPU，因此我们需要针对 CPU 的过载进行保护。当 CPU 使用率超出一定范围时，进行请求熔断处理，直接报错返回，接下来我们来看下具体的实现原理。</p><h3 id="实现方案" tabindex="-1">实现方案 <a class="header-anchor" href="#实现方案" aria-label="Permalink to &quot;实现方案&quot;">​</a></h3><p>在实现方案前，我们需要思考几个关键的问题：</p><ul><li><p>获取当前进程所在的 CPU 使用率的方法；</p></li><li><p>应尽量避免影响服务性能；</p></li><li><p>什么时候触发过载，能否减少误处理情况；</p></li><li><p>请求丢弃方法和优先级；</p></li></ul><p>接下来我们看下这几个部分的实现方法。</p><h4 id="_1-获取-cpu-使用率" tabindex="-1">1.获取 CPU 使用率 <a class="header-anchor" href="#_1-获取-cpu-使用率" aria-label="Permalink to &quot;1.获取 CPU 使用率&quot;">​</a></h4><p>Node.js 进程启动后，都会绑定在单核 CPU 上。假设机器有 2 个 CPU 内核，我们只启动了一个进程，那么在没有其他外在因素影响的情况下，Node.js 即使跑满 CPU，也最多只占用了 50% 的总机器的 CPU 利用率。因此这里我需要获取该进程 CPU 使用率。</p><p><strong>我们需要获取当前进程下的 CPU 使用情况，而不是整体机器的 CPU</strong> ，<strong>因此需要使用 PS 这个命令，而不是利用 Node.js 本身的 OS 模块</strong> 。这里我们以 Mac 为例子，其他部分你可以参考 <a href="https://github.com/love-flutter/nodejs-column" target="_blank" rel="noreferrer">GitHub 源码</a>。</p><p>首先我们需要使用一个命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ ps </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p \${process.pid} </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o pid,rss,vsz,pcpu,comm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ ps </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p \${process.pid} </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o pid,rss,vsz,pcpu,comm</span></span></code></pre></div><p>这一命令是<strong>获取当前 Node.js 进程下的进程信息</strong>：</p><ul><li><p><strong>pid 是进程 ID</strong>；</p></li><li><p><strong>rss 是实际内存占用</strong>；</p></li><li><p><strong>vsz 是虚拟内存占用</strong>；</p></li><li><p><strong>pcpu 是 CPU 使用率</strong>；</p></li><li><p><strong>comm 是进程执行的指令</strong>。</p></li></ul><p>在 Linux 或者 Mac 系统中可以直接运行以上命令，查看某些进程的信息。</p><p>有了命令后，我们需要在 Node.js 中执行修改命令，并获取执行结果，以下代码就是在 Node.js 执行修改命令的方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@description</span><span style="color:#6A737D;"> 使用 ps 命令获取进程信息</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">_getPs</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 命令行</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cmd</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`ps -p \${</span><span style="color:#E1E4E8;">process</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">pid</span><span style="color:#9ECBFF;">} -o pid,rss,vsz,pcpu,comm\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取执行结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">stdout</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">stderr</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(cmd);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(stderr) { </span><span style="color:#6A737D;">// 异常情况</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(stderr);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> stdout;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@description</span><span style="color:#6A737D;"> 使用 ps 命令获取进程信息</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">async </span><span style="color:#6F42C1;">_getPs</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 命令行</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cmd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`ps -p \${</span><span style="color:#24292E;">process</span><span style="color:#032F62;">.</span><span style="color:#24292E;">pid</span><span style="color:#032F62;">} -o pid,rss,vsz,pcpu,comm\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取执行结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">stdout</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">stderr</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(cmd);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(stderr) { </span><span style="color:#6A737D;">// 异常情况</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(stderr);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> stdout;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>在上面代码中 exec 是一个经过 util.promisify 处理的方法，而不是 Node.js 原生模块的 exec 方法</strong>，处理逻辑如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">util</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;util&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> util.</span><span style="color:#B392F0;">promisify</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;child_process&#39;</span><span style="color:#E1E4E8;">).exec);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">util</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;util&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exec</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> util.</span><span style="color:#6F42C1;">promisify</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;child_process&#39;</span><span style="color:#24292E;">).exec);</span></span></code></pre></div><p>获取到进程信息后，我们需要将进程信息转化为相应的数据对象，具体方法如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@description</span><span style="color:#6A737D;"> 获取进程信息</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">_getProcessInfo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pidInfo, cpuInfo;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (platform </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;win32&#39;</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// windows 平台</span></span>
<span class="line"><span style="color:#E1E4E8;">      pidInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_getWmic</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 其他平台 linux &amp; mac</span></span>
<span class="line"><span style="color:#E1E4E8;">      pidInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_getPs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpuInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_parseInOs</span><span style="color:#E1E4E8;">(pidInfo);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cpuInfo) { </span><span style="color:#6A737D;">// 异常处理</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/// 命令行数据，字段解析处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pid</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(cpuInfo.pid, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cpuInfo.name.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(cpuInfo.name.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cpu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseFloat</span><span style="color:#E1E4E8;">(cpuInfo.cpu);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    private: </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(cpuInfo.pmem, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      virtual: </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(cpuInfo.vmem, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      usage: cpuInfo.pmem </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> totalmem </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      pid, name, cpu, mem</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@description</span><span style="color:#6A737D;"> 获取进程信息</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">async </span><span style="color:#6F42C1;">_getProcessInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> pidInfo, cpuInfo;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (platform </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;win32&#39;</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// windows 平台</span></span>
<span class="line"><span style="color:#24292E;">      pidInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_getWmic</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 其他平台 linux &amp; mac</span></span>
<span class="line"><span style="color:#24292E;">      pidInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_getPs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    cpuInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_parseInOs</span><span style="color:#24292E;">(pidInfo);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cpuInfo) { </span><span style="color:#6A737D;">// 异常处理</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/// 命令行数据，字段解析处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pid</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(cpuInfo.pid, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cpuInfo.name.</span><span style="color:#6F42C1;">substr</span><span style="color:#24292E;">(cpuInfo.name.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cpu</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseFloat</span><span style="color:#24292E;">(cpuInfo.cpu);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    private: </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(cpuInfo.pmem, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      virtual: </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(cpuInfo.vmem, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      usage: cpuInfo.pmem </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> totalmem </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      pid, name, cpu, mem</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面代码中，一开始需要根据平台的不同，<strong>调用不同的命令来获取进程信息</strong>。其他基本上都是一些字符串的处理，没有什么特殊的逻辑。</p><p>以上就是一个获取当前进程的相关信息的方法，其中的 usage 就是 CPU 相关的信息，由于还是涉及非常多的逻辑处理和计算，因此我们需要思考如何简化方式，减少对主线程 CPU 性能损耗。</p><h4 id="_2-性能影响" tabindex="-1">2.性能影响 <a class="header-anchor" href="#_2-性能影响" aria-label="Permalink to &quot;2.性能影响&quot;">​</a></h4><p>由于在 Node.js 就只有一个主线程，因此<strong>必须严格减少框架在主线程的占用时间，控制框架基础模块的性能损耗，从而将主线程资源更多服务于业务，增强业务并发处理能力</strong>。为了满足这点，我们需要做两件事情：</p><ul><li><p><strong>只处理需要的数据</strong>，因此在第一步获取 CPU 使用率的基础上，我们需要缩减一些字段，只获取 CPU 信息即可；</p></li><li><p><strong>定时落地 CPU 信息到内存中</strong>，而非根据用户访问来实时计算。</p></li></ul><p>在第一点上，我们把原来获取的 pid、rss、vsz、comm 全部去掉，只留下 pcpu，然后将逻辑优化。第二点则需要定时设置内存中的 CPU 使用率，这部分代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(maxOverloadNum </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, maxCpuPercentage</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">/// 定时处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cpuInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_getProcessInfo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cpuInfo) { </span><span style="color:#6A737D;">// 异常不处理</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(cpuInfo </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> maxCpuPercentage) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                overloadTimes</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                overloadTimes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> isOverload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(overloadTimes </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> maxOverloadNum){</span></span>
<span class="line"><span style="color:#E1E4E8;">                isOverload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(err){</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">async </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(maxOverloadNum </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, maxCpuPercentage</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">/// 定时处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cpuInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_getProcessInfo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cpuInfo) { </span><span style="color:#6A737D;">// 异常不处理</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(cpuInfo </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> maxCpuPercentage) {</span></span>
<span class="line"><span style="color:#24292E;">                overloadTimes</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                overloadTimes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> isOverload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(overloadTimes </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> maxOverloadNum){</span></span>
<span class="line"><span style="color:#24292E;">                isOverload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(err){</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中使用了 <strong>setInterval</strong> 来实现，每秒执行一次。在代码中的两个参数 maxOverloadNum 和 maxCpuPercentage：</p><ul><li><p>maxOverloadNum 表示最大持续超出负载次数，当大于该值时才会判断为超出负载了；</p></li><li><p>maxCpuPercentage 表示单次 CPU 使用率是否大于该分位值，大于则记录一次超载次数。</p></li></ul><p>最后我们再看下应用的地方，如下所示，整个代码在 <a href="https://github.com/love-flutter/nodejs-column" target="_blank" rel="noreferrer">GitHub 项目</a>的 index.js 文件中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cpuOverload.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cpuOverload.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>上面代码主要是调用 <strong>check 方法</strong>，并且用来捕获异常，避免引起服务器崩溃。</p><h4 id="_3-概率丢弃" tabindex="-1">3.概率丢弃 <a class="header-anchor" href="#_3-概率丢弃" aria-label="Permalink to &quot;3.概率丢弃&quot;">​</a></h4><p>在获取 CPU 值以后，我们可以根据当前 CPU 的情况进行一些丢弃处理，但是应尽量避免出现<strong>误处理</strong> 的情况。比如当前 CPU 某个时刻出现了过高，但是立马恢复了，这种情况下我们是不能进行丢弃请求的，<strong>只有当 CPU 长期处于一个高负载情况下才能进行请求丢弃</strong>。</p><p>即使要丢请求，也需要根据概率来丢弃，而不是每个请求都丢弃，我们需要根据三个变量：</p><ul><li><p><strong>overloadTimes</strong>，用 o 表示，指 CPU 过载持续次数，该值越高则丢弃概率越大，设定取值范围为 0 ~ 10；</p></li><li><p><strong>currentCpuPercentage</strong>，用 c 表示，指 CPU 当前负载越高，占用率越大则丢弃概率越大，这里设定范围为 0 ~ 10，10 代表是最大值 100% ；</p></li><li><p><strong>baseProbability</strong>，用 b 表示，是负载最大时的丢弃概率，取值范围为 0 ~ 1。</p></li></ul><p>虽然都是<strong>正向反馈</strong>，但是三者对结果影响是不同的：</p><ul><li><p><strong>overloadTimes 可以看作是直线型</strong>，但是影响系数为 0.1；</p></li><li><p><strong>baseProbability 我们也可以看作是直线型</strong>；</p></li><li><p>而 <strong>currentCpuPercentage 则是一个指数型增长模型</strong>。</p></li></ul><p>可以得出一个简单的算法公式，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">P </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> o) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">exp</span><span style="color:#E1E4E8;">(c) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">exp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">P </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> o) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">exp</span><span style="color:#24292E;">(c) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">exp</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b</span></span></code></pre></div><p>其中 o 取最大值 100，c 取最大值 10，b 为固定值，这里假设为 0.7，那么求出来的最大概率是 0.7 ；那么在 o 为 30，c 为 90 的概率则是 0.19 ，因此会丢弃 19% 的用户请求。</p><p>接下来我们先实现该 P 概率公式，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@description</span><span style="color:#6A737D;"> 获取丢弃概率</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#B392F0;">_setProbability</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> overloadTimes </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> overloadTimes;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentCpuPercentage </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> currentCpuPercentage</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">     currentProbability </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> o) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">exp</span><span style="color:#E1E4E8;">(c) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> maxValue </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.baseProbability).</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@description</span><span style="color:#6A737D;"> 获取丢弃概率</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">_setProbability</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> overloadTimes </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> overloadTimes;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentCpuPercentage </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> currentCpuPercentage</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">     currentProbability </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> o) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">exp</span><span style="color:#24292E;">(c) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> maxValue </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.baseProbability).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了性能考虑，我们会将上面的 10 * Math.exp(10) 作为一个 const 值，避免重复计算，其次这个方法是在 check 函数中调用，2 秒处理一次，避免过多计算影响 CPU 性能。然后我们再来实现一个<strong>获取随机数</strong>的方法，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@description</span><span style="color:#6A737D;"> 获取一个概率值</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#B392F0;">_getRandomNum</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@description</span><span style="color:#6A737D;"> 获取一个概率值</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">_getRandomNum</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后我们在 isAvailable 函数中判断当前的随机数是否大于等于概率值，如果小于概率值则丢弃该请求，大于则认为允许请求继续访问，如下代码所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">isAvailable</span><span style="color:#E1E4E8;">(path, uuid) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(isOverload) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_getRandomNum</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_getProbability</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">isAvailable</span><span style="color:#24292E;">(path, uuid) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(isOverload) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_getRandomNum</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_getProbability</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上就是判断是否需要丢弃的逻辑。在某些情况下，我们需要做一定的优化，避免一些重要的请求无法触达用户，因此还需要做一些优化级和同一个 uuid 进行优化的策略。</p><h4 id="_4-优先级处理" tabindex="-1">4.优先级处理 <a class="header-anchor" href="#_4-优先级处理" aria-label="Permalink to &quot;4.优先级处理&quot;">​</a></h4><p>这里我们需要考虑 2 个点：</p><ul><li><p><strong>优先级问题</strong>，因为有些核心的请求我们不希望用户在访问时出现丢弃的情况，比如支付或者其他核心重要的流程；</p></li><li><p>其次对于一个用户，我们允许了该用户访问其中一个接口，那么其他接口在短时间内应该也允许请求，不然会导致有些接口响应成功，有些失败，那么用户还是无法正常使用。</p></li></ul><p><strong>优先级的实现</strong></p><p>优先级实现最简单的方式，就是接受一个<strong>白名单参数</strong>，如果设置了则会在白名单中的请求通过处理，无须校验，如果不在才会进行检查，代码实现如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">isAvailable</span><span style="color:#E1E4E8;">(path, uuid) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.whiteList.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(path)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(isOverload) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_getRandomNum</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> currentProbability) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">isAvailable</span><span style="color:#24292E;">(path, uuid) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.whiteList.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(path)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(isOverload) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_getRandomNum</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> currentProbability) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>uuid 处理</strong></p><p>这部分稍微复杂一些，首先我们需要考虑<strong>时效性</strong> ，如果存储没有时效会导致存储数据过大，从而引起内存异常问题，其次应该考虑使用<strong>共享内存 Redis 方式</strong>，因为有可能是多机器部署。这里为了简单化，会使用本地内存的方式，但是也需要考虑上限，超过上限剔除第一个元素，代码实现如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">isAvailable</span><span style="color:#E1E4E8;">(path, uuid) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(path </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.whiteList.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(path)) { </span><span style="color:#6A737D;">// 判断是否在白名单内</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(uuid </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> canAccessList.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(uuid)){ </span><span style="color:#6A737D;">// 判断是否已经放行过</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(isOverload) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_getRandomNum</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> currentProbability) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            removeCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(uuid) { </span><span style="color:#6A737D;">// 需要将 uuid 加入放行数组</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(canAccessList.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> maxUser){</span></span>
<span class="line"><span style="color:#E1E4E8;">            canAccessList.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        canAccessList.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(uuid);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">isAvailable</span><span style="color:#24292E;">(path, uuid) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(path </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.whiteList.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(path)) { </span><span style="color:#6A737D;">// 判断是否在白名单内</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(uuid </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> canAccessList.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(uuid)){ </span><span style="color:#6A737D;">// 判断是否已经放行过</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(isOverload) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_getRandomNum</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> currentProbability) {</span></span>
<span class="line"><span style="color:#24292E;">            removeCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(uuid) { </span><span style="color:#6A737D;">// 需要将 uuid 加入放行数组</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(canAccessList.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> maxUser){</span></span>
<span class="line"><span style="color:#24292E;">            canAccessList.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        canAccessList.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(uuid);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上就实现这个过载模块了，重点要注意的是获取 CPU 使用率的方法、减少性能影响、概率丢弃和优先级处理。接下来我们就实践应用一下，首先我们可以对比下性能影响，在没有应用和应用之后两者的空转性能对比。</p><h3 id="实践应用" tabindex="-1">实践应用 <a class="header-anchor" href="#实践应用" aria-label="Permalink to &quot;实践应用&quot;">​</a></h3><p>在下一讲中我们会将 MSVC 框架转化为 Koa 框架接入，这里我们还是以最原始的框架为基础来接入 MSVC。</p><h4 id="_1-接入-msvc" tabindex="-1">1.接入 MSVC <a class="header-anchor" href="#_1-接入-msvc" aria-label="Permalink to &quot;1.接入 MSVC&quot;">​</a></h4><p>首先我们需要在入口文件初始化过载保护模块，并且调用 check 方法，定时获取 CPU 信息，代码如下:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cpuOverload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./util/cpuOverload&#39;</span><span style="color:#E1E4E8;">))();</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 处理 cpu 信息采集</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">cpuOverload.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cpuOverload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./util/cpuOverload&#39;</span><span style="color:#24292E;">))();</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 处理 cpu 信息采集</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">cpuOverload.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>接下来在请求转发处，先进行判断，在进入业务之前就进行拦截处理，代码如下图 1 所示：</p>`,72),y=s("p",null,"图 1 增加 CPU 过载处理代码图",-1),i=s("p",null,"使用起来比较简单，接下来我们就来看看实际性能对比。",-1),F=s("h4",{id:"_2-性能分析对比",tabindex:"-1"},[n("2.性能分析对比 "),s("a",{class:"header-anchor",href:"#_2-性能分析对比","aria-label":'Permalink to "2.性能分析对比"'},"​")],-1),d=s("p",null,"我们对移除 CPU 过载保护代码和加上过载保护逻辑后的压测数据，使用压测工具进行压测，这里你只需要了解 WRK 即可，具体压测工具我们还会在《12 | 性能分析：性能影响的关键路径以及优化策略》中详细介绍。最后我们可以得到如下表格 1 所示的结果。",-1),u=l(`<p>上面的测试数据是在持续时长为 20 秒、CPU 占用大于 98、丢弃概率为 80% 时的测试数据，可以看出，整体上两者并没有多大差距（由于是本机器测试，会有部分误差），那么如果我们将 CPU 占用修改为 80 时，我们可以看下 1000 并发时压测数据，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> threads and </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> connections</span></span>
<span class="line"><span style="color:#E1E4E8;">  Thread Stats   Avg      Stdev     Max   </span><span style="color:#F97583;">+/-</span><span style="color:#E1E4E8;"> Stdev</span></span>
<span class="line"><span style="color:#E1E4E8;">    Latency    71.</span><span style="color:#FDAEB7;font-style:italic;">31ms</span><span style="color:#E1E4E8;">    4.</span><span style="color:#FDAEB7;font-style:italic;">95ms</span><span style="color:#E1E4E8;"> 189.</span><span style="color:#FDAEB7;font-style:italic;">60ms</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">90.88</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">    Req</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Sec     1.</span><span style="color:#FDAEB7;font-style:italic;">40k</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">171.05</span><span style="color:#E1E4E8;">     2.</span><span style="color:#FDAEB7;font-style:italic;">25k</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">80.83</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">416766</span><span style="color:#E1E4E8;"> requests in 30.</span><span style="color:#FDAEB7;font-style:italic;">04s</span><span style="color:#E1E4E8;">, 72.</span><span style="color:#FDAEB7;font-style:italic;">26MB</span><span style="color:#E1E4E8;"> read</span></span>
<span class="line"><span style="color:#E1E4E8;">  Socket errors</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> connect </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, read </span><span style="color:#79B8FF;">3990</span><span style="color:#E1E4E8;">, write </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, timeout </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  Non</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">2xx or 3xx responses</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12779</span></span>
<span class="line"><span style="color:#E1E4E8;">Requests</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">13874.51</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> threads and </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> connections</span></span>
<span class="line"><span style="color:#24292E;">  Thread Stats   Avg      Stdev     Max   </span><span style="color:#D73A49;">+/-</span><span style="color:#24292E;"> Stdev</span></span>
<span class="line"><span style="color:#24292E;">    Latency    71.</span><span style="color:#B31D28;font-style:italic;">31ms</span><span style="color:#24292E;">    4.</span><span style="color:#B31D28;font-style:italic;">95ms</span><span style="color:#24292E;"> 189.</span><span style="color:#B31D28;font-style:italic;">60ms</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">90.88</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">    Req</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Sec     1.</span><span style="color:#B31D28;font-style:italic;">40k</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">171.05</span><span style="color:#24292E;">     2.</span><span style="color:#B31D28;font-style:italic;">25k</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">80.83</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">416766</span><span style="color:#24292E;"> requests in 30.</span><span style="color:#B31D28;font-style:italic;">04s</span><span style="color:#24292E;">, 72.</span><span style="color:#B31D28;font-style:italic;">26MB</span><span style="color:#24292E;"> read</span></span>
<span class="line"><span style="color:#24292E;">  Socket errors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> connect </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, read </span><span style="color:#005CC5;">3990</span><span style="color:#24292E;">, write </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, timeout </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  Non</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">2xx or 3xx responses</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12779</span></span>
<span class="line"><span style="color:#24292E;">Requests</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">13874.51</span></span></code></pre></div><p>你可以看到结果中平均耗时减少了，从原来的 76.96 变成了 71.31，其次增加了 503 的返回量，原来是 0 现在是 12779，在 scoket 超时方面还是基本一致的。因此在实际情况，我们需要根据业务以及机器的配置来选择这几个参数的配置，具体的关系就是我上面所提到的。<strong>随着并发越来越高，如果没有负载保护用户的处理时长会越来越长，但是有了负载保护就可以避免雪崩现象，从而保护服务器可以正常地提供服务</strong>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本讲首先介绍了什么是过载保护和什么是 CPU 过载保护，接下来实践教学了如何去实现一个 CPU 过载保护模块，最后实践接入 MSVC 框架，并且与基础框架进行了对比分析。学完本讲后，要掌握 CPU 过载保护的设计，同时从这个过程中，掌握在 Node.js 中应注重的代码设计原则。</p><p>学完本讲后，你可以再思考下，setInterval 中的 2000 ms 是否可以进行调整，这个值的调整会有哪些影响，这部分希望你可以动手验证下效果，有任何问题，都可以在留言区与我交流。</p><p>下一讲我们将会讲解在 I/O 方面应该注意哪些要点，到时见！</p><hr>`,8),C={href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},h=s("p",null,[s("strong",null,"《大前端高薪训练营》")],-1),g=s("p",null,[n("对标阿里 P7 技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),s("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"点击链接"),n("，快来领取！")],-1);function A(D,v,m,B,f,b){const a=e("Image");return c(),t("div",null,[E,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/1D/E4/Cgp9HWBQK5GADhMxAAHtP-9awms474.png"}),n(),y,i,F,d,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/1D/E1/CioPOWBQK6KACYDqAACIqA12oSE255.png"}),u,s("p",null,[s("a",C,[p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/12/FA/CioPOWBBrAKAAod-AASyC72ZqWw233.png"})])]),h,g])}const k=o(r,[["render",A]]);export{P as __pageData,k as default};
