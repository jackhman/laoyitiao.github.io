import{_ as o,j as e,o as t,h as c,k as l,f as s,Q as p,s as n}from"./chunks/framework.d3daa342.js";const v=JSON.parse('{"title":"12列表样式：实践Flutter中内容多样式展示方式","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3529) 12  列表样式：实践 Flutter 中内容多样式展示方式.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3529) 12  列表样式：实践 Flutter 中内容多样式展示方式.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3529) 12  列表样式：实践 Flutter 中内容多样式展示方式.md"},E=p(`<h1 id="_12列表样式-实践flutter中内容多样式展示方式" tabindex="-1">12列表样式：实践Flutter中内容多样式展示方式 <a class="header-anchor" href="#_12列表样式-实践flutter中内容多样式展示方式" aria-label="Permalink to &quot;12列表样式：实践Flutter中内容多样式展示方式&quot;">​</a></h1><p>本课时，我将在导航栏基础上，设计一个 APP 首页推荐列表，以此来讲解 Flutter 中内容多样式的展示方式。</p><p>列表的多样式包含内容+缩略图、图片九宫格以及单图信息流。接下来我将逐一讲解这三种类型的设计和实现原理。</p><h3 id="前期准备" tabindex="-1">前期准备 <a class="header-anchor" href="#前期准备" aria-label="Permalink to &quot;前期准备&quot;">​</a></h3><p>本课时中的列表多样式会涉及 Flutter 控件 ListView ，该控件包含了多个构造函数，比如：默认构造函数、builder、separated 和 custom。</p><h4 id="listview" tabindex="-1">ListView <a class="header-anchor" href="#listview" aria-label="Permalink to &quot;ListView&quot;">​</a></h4><p>ListView 下四种构造函数的使用场景都不相同，比如：</p><ul><li><p>ListView 默认构造函数，适用于有限的小列表内容展示，一次性创建所有项目；</p></li><li><p>ListView.builder 构造函数用于处理包含大量数据的列表，其次它会在列表项滚动到屏幕上时创建该列表项；</p></li><li><p>ListView.separated 相比 ListView.builder 多了一个分隔符，其次更适用于固定项列表；</p></li><li><p>ListView.custom 可以自定义列表结构，使用场景不多，但是 ListView.builder 与 ListView.separated 都是基于 ListView.custom 来实现的。</p></li></ul><p>本课时因为是一个固定有限的列表，更适用于 ListView.separated ，因此本课时基于 ListView.separated 来讲解，这里我介绍下该控件的参数列表。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">separated</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;"> key,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Axis</span><span style="color:#E1E4E8;"> scrollDirection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Axis</span><span style="color:#E1E4E8;">.vertical, </span><span style="color:#6A737D;">// 滑动方向，垂直</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> reverse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否倒序</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">ScrollController</span><span style="color:#E1E4E8;"> controller, </span><span style="color:#6A737D;">// 控制滚动和监听滚动事件变化</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> primary, </span><span style="color:#6A737D;">// false内容不足不滚动，true一直可滚动</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">ScrollPhysics</span><span style="color:#E1E4E8;"> physics, </span><span style="color:#6A737D;">// 列表滚动方式设置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> shrinkWrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// item高度适配</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">EdgeInsetsGeometry</span><span style="color:#E1E4E8;"> padding, </span><span style="color:#6A737D;">// padding设置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@required</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">IndexedWidgetBuilder</span><span style="color:#E1E4E8;"> itemBuilder, </span><span style="color:#6A737D;">// 设置列表内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@required</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">IndexedWidgetBuilder</span><span style="color:#E1E4E8;"> separatorBuilder, </span><span style="color:#6A737D;">// 设置分割内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@required</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> itemCount, </span><span style="color:#6A737D;">// 总数量</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> addAutomaticKeepAlives </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// 该属性表示是否将列表项（子组件）包裹在AutomaticKeepAlive 组件中，主要是为了避免被垃圾回收</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> addRepaintBoundaries </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 该属性表示是否将列表项（子组件）包裹在addRepaintBoundaries 组件中，为了避免重绘</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> addSemanticIndexes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 该属性表示是否将列表项（子组件）包裹在addSemanticIndexes 组件中，用来提供无障碍语义</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">double</span><span style="color:#E1E4E8;"> cacheExtent, </span><span style="color:#6A737D;">// 设置预加载区域</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">separated</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Key</span><span style="color:#24292E;"> key,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Axis</span><span style="color:#24292E;"> scrollDirection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Axis</span><span style="color:#24292E;">.vertical, </span><span style="color:#6A737D;">// 滑动方向，垂直</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> reverse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否倒序</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">ScrollController</span><span style="color:#24292E;"> controller, </span><span style="color:#6A737D;">// 控制滚动和监听滚动事件变化</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> primary, </span><span style="color:#6A737D;">// false内容不足不滚动，true一直可滚动</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">ScrollPhysics</span><span style="color:#24292E;"> physics, </span><span style="color:#6A737D;">// 列表滚动方式设置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> shrinkWrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// item高度适配</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">EdgeInsetsGeometry</span><span style="color:#24292E;"> padding, </span><span style="color:#6A737D;">// padding设置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@required</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">IndexedWidgetBuilder</span><span style="color:#24292E;"> itemBuilder, </span><span style="color:#6A737D;">// 设置列表内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@required</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">IndexedWidgetBuilder</span><span style="color:#24292E;"> separatorBuilder, </span><span style="color:#6A737D;">// 设置分割内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@required</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> itemCount, </span><span style="color:#6A737D;">// 总数量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> addAutomaticKeepAlives </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">// 该属性表示是否将列表项（子组件）包裹在AutomaticKeepAlive 组件中，主要是为了避免被垃圾回收</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> addRepaintBoundaries </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 该属性表示是否将列表项（子组件）包裹在addRepaintBoundaries 组件中，为了避免重绘</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> addSemanticIndexes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 该属性表示是否将列表项（子组件）包裹在addSemanticIndexes 组件中，用来提供无障碍语义</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">double</span><span style="color:#24292E;"> cacheExtent, </span><span style="color:#6A737D;">// 设置预加载区域</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>根据以上的配置信息，我们设置了一个比较通用的配置，如下。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">separated</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  scrollDirection</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Axis</span><span style="color:#E1E4E8;">.vertical,</span></span>
<span class="line"><span style="color:#E1E4E8;">  shrinkWrap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  itemCount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList.length,</span></span>
<span class="line"><span style="color:#E1E4E8;">  itemBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> position) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  separatorBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context, index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Divider</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#E1E4E8;">      color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xFFDDDDDD</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">separated</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  scrollDirection</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Axis</span><span style="color:#24292E;">.vertical,</span></span>
<span class="line"><span style="color:#24292E;">  shrinkWrap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  itemCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList.length,</span></span>
<span class="line"><span style="color:#24292E;">  itemBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> position) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  separatorBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context, index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Divider</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#24292E;">      color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xFFDDDDDD</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>上面代码配置中，scrollDirection 设置为垂直滚动，shrinkWrap 设置为高度适配，separatorBuilder 使用灰色线条分割每列数据。</p><p>以上就是 ListView 控件的一些基本知识，介绍完基本的知识点后，我们还需要做一些编码方面的前期准备。由于该交友 APP，在列表展示的是推荐帖子，因此需要使用到相应的帖子内容相关的数据结构。根据交友 APP 的数据需要，我们设计交友帖子对应的数据结构模块 Struct 、相应获取推荐帖子内容的 API 接口以及需要状态共享的 Model。</p><h4 id="struct" tabindex="-1">Struct <a class="header-anchor" href="#struct" aria-label="Permalink to &quot;Struct&quot;">​</a></h4><p>首页推荐的交友帖子数据，涉及三个具体内容：用户信息部分、交友帖子数据、帖子的评论信息。因此需要创建好三个对应的 Struct 文件。</p><p>1.user_info.dart，对应为 StructUserInfo 类，其数据结果如下。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 用户信息</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// {</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;nickname&quot; : &quot;string&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;headerUrl&quot; : &quot;string&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;uid&quot; : &quot;string&quot;</span></span>
<span class="line"><span style="color:#6A737D;">/// }</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 标题</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> nickName;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 简要</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> headerUrl;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 主要内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> uid;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 默认构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.uid,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.nickName,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.headerUrl</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 用户信息</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// {</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;nickname&quot; : &quot;string&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;headerUrl&quot; : &quot;string&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;uid&quot; : &quot;string&quot;</span></span>
<span class="line"><span style="color:#6A737D;">/// }</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 标题</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> nickName;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 简要</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> headerUrl;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 主要内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> uid;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 默认构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.uid,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.nickName,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.headerUrl</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>2.content_detail.dart，对应为 StructContentDetail 类，其数据结构比较长，我们这里只是给个 JSON 的例子，代码如下。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;title&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;summary&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;detailInfo&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;uid&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;StructUserInfo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;articleImage&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;likeNum&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;commentNum&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;int&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;title&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;summary&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;detailInfo&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;uid&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;userInfo&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;StructUserInfo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;articleImage&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;likeNum&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;commentNum&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;int&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>3.comment_info.dart，对应为 StructCommentInfo 类，代码如下。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/user_info.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// 用户信息</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// {</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;userInfo&quot; : &quot;StructUserInfo&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;comment&quot; : &quot;string&quot;</span></span>
<span class="line"><span style="color:#6A737D;">/// }</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructCommentInfo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 用户的昵称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;"> userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 用户头像信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> comment;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructCommentInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.userInfo, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.comment);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/user_info.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// 用户信息</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// {</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;userInfo&quot; : &quot;StructUserInfo&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;comment&quot; : &quot;string&quot;</span></span>
<span class="line"><span style="color:#6A737D;">/// }</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructCommentInfo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 用户的昵称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;"> userInfo;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 用户头像信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> comment;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructCommentInfo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userInfo, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.comment);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h4><p>有了以上基础的数据结构后，我们再来开发对应具体的 API，通过 API 部分拉取具体的首页推荐的帖子列表。在 API 文件夹中创建一个 content 文件夹，并且在 content 文件夹中创建 index.dart API 文件类，在该类中创建三个方法（这里使用的是假数据，未真正的调用服务端）。</p><p>1.getOneById，根据内容 ID 拉取内容详情</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 根据内容id拉取内容详情</span></span>
<span class="line"><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOneById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;"> detailInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;1001&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;hello test&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;summary&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;detail info \${</span><span style="color:#79B8FF;">id</span><span style="color:#9ECBFF;">}&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;1001&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;https://i.pinimg.com/originals/e0/64/4b/e0644bd2f13db50d0ef6a4df5a756fd9.png&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   );</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;"> userInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ApiUserInfoIndex</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getOneById</span><span style="color:#E1E4E8;">(detailInfo.uid);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">       detailInfo.uid, detailInfo.title,</span></span>
<span class="line"><span style="color:#E1E4E8;">       detailInfo.summary, detailInfo.detailInfo,</span></span>
<span class="line"><span style="color:#E1E4E8;">       detailInfo.uid, detailInfo.likeNum,detailInfo.commentNum,</span></span>
<span class="line"><span style="color:#E1E4E8;">       detailInfo.articleImage, userInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> userInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">   );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 根据内容id拉取内容详情</span></span>
<span class="line"><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOneById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> id) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;"> detailInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;1001&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;hello test&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;summary&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;detail info \${</span><span style="color:#005CC5;">id</span><span style="color:#032F62;">}&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;1001&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;https://i.pinimg.com/originals/e0/64/4b/e0644bd2f13db50d0ef6a4df5a756fd9.png&#39;</span></span>
<span class="line"><span style="color:#24292E;">   );</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;"> userInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ApiUserInfoIndex</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getOneById</span><span style="color:#24292E;">(detailInfo.uid);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">       detailInfo.uid, detailInfo.title,</span></span>
<span class="line"><span style="color:#24292E;">       detailInfo.summary, detailInfo.detailInfo,</span></span>
<span class="line"><span style="color:#24292E;">       detailInfo.uid, detailInfo.likeNum,detailInfo.commentNum,</span></span>
<span class="line"><span style="color:#24292E;">       detailInfo.articleImage, userInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> userInfo</span></span>
<span class="line"><span style="color:#24292E;">   );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码获取到初始的单条内容，然后基于用户信息的 API 补全用户信息部分，返回 StructContentDetail 数据结构。</p><p>2.getRecommendList，获取首页推荐的内容列表</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">(...),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">(...),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">(...),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">(...),</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这部分代码就比较简单，获取具体的推荐内容列表，并返回 List<code>&lt;StructContentDetail&gt;</code> 列表数据。</p><p>3.getFollowList，获取关注人的内容列表</p><p>这部分和 getRecommendList 方法实现完全一样，其中拉取的只是关注人的帖子列表。</p><h4 id="model" tabindex="-1">Model <a class="header-anchor" href="#model" aria-label="Permalink to &quot;Model&quot;">​</a></h4><p>这里只涉及我们第 07 课时所演示例子的知识点------应用 Provider 来实现状态管理。实现原理一样，唯一不同点是这里需要保存多个帖子的点赞数量，因此需要将这个状态变量设计为一个 Map，其次需要将 get 方法进行修改，使用帖子 id 作为键名。下面为部分代码，其他部分代码请查看 github 源码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// name状态管理模块</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LikeNumModel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ChangeNotifier</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 声明私有变量</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">&gt; _likeInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 设置get方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getLikeNum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> articleId, [</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> likeNum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(_likeInfo </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      _likeInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(articleId </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> likeNum;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(_likeInfo[articleId] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      _likeInfo[articleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> likeNum;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _likeInfo[articleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// name状态管理模块</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LikeNumModel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ChangeNotifier</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 声明私有变量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">&gt; _likeInfo;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 设置get方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLikeNum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> articleId, [</span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> likeNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(_likeInfo </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      _likeInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(articleId </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> likeNum;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(_likeInfo[articleId] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      _likeInfo[articleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> likeNum;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _likeInfo[articleId];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来我们就具体看下这三种列表样式的实现原理。</p><h3 id="内容-缩略图" tabindex="-1">内容+缩略图 <a class="header-anchor" href="#内容-缩略图" aria-label="Permalink to &quot;内容+缩略图&quot;">​</a></h3><p>这种样式的列表内容较为常见，每一条信息包含帖子的标题和简要信息，右侧为一个缩略图，底部栏为头像、点赞和评论相关内容，具体效果截图如下图 1。</p>`,38),y=n("h4",{id:"组件设计",tabindex:"-1"},[s("组件设计 "),n("a",{class:"header-anchor",href:"#组件设计","aria-label":'Permalink to "组件设计"'},"​")],-1),i=n("p",null,"按照我们 06 课时的知识点，我们需要将界面的组件进行拆解分析，由于这部分我们在 06 课时也分析过，因此这里比较快速地分析出下面的一个组件树，如图 2 所示。",-1),d=p(`<h4 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h4><p>组件部分的实现逻辑，我们在 06 课时已经详细介绍过，这里就不一一细讲。接下来我们主要说下列表部分的实现，核心代码在 home_page/index.dart 中，首先还是 import 对应需要的库和组件库。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/api/content/index.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/widgets/home_page/article_card.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/api/content/index.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/widgets/home_page/article_card.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>其中的 API 为我们拉取内容的接口， article_card 为我们每条展示的内容的组件， content_detail 则为 Struct 类。</p><p>为了后续动态内容的需要，这里将该类设计为一个有状态类。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 首页</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageIndex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatefulWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageIndex</span><span style="color:#E1E4E8;">({</span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;">, key});</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageIndexState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 具体的state类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageIndexState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">State</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">HomePageIndex</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 首页推荐帖子列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; contentList;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 拉取推荐内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      contentList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ApiContentIndex</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 首页</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageIndex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatefulWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageIndex</span><span style="color:#24292E;">({</span><span style="color:#005CC5;">Key</span><span style="color:#24292E;">, key});</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageIndexState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 具体的state类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageIndexState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">State</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">HomePageIndex</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 首页推荐帖子列表</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; contentList;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 拉取推荐内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">      contentList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ApiContentIndex</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中的第 20 行就是通过 API 去拉取具体的推荐内容列表，并使用 setState 来触发界面更新。接下来再看下 build 逻辑，在列表展示部分，我们需要使用到 ListView.separated 控件，下面看下这部分的核心代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">separated</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    scrollDirection</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Axis</span><span style="color:#E1E4E8;">.vertical,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shrinkWrap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    itemCount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList.length,</span></span>
<span class="line"><span style="color:#E1E4E8;">    itemBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> position) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ArticleCard</span><span style="color:#E1E4E8;">(articleInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contentList[position]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    separatorBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context, index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Divider</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#E1E4E8;">        color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xFFDDDDDD</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">separated</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    scrollDirection</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Axis</span><span style="color:#24292E;">.vertical,</span></span>
<span class="line"><span style="color:#24292E;">    shrinkWrap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    itemCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList.length,</span></span>
<span class="line"><span style="color:#24292E;">    itemBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> position) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ArticleCard</span><span style="color:#24292E;">(articleInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.contentList[position]);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    separatorBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context, index) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Divider</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#24292E;">        color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xFFDDDDDD</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其他部分与我们一开始介绍的 ListView.separated 标准部分相同，唯一不同的就是在 itemBuilder 做了组件的插入，这里针对每个数组元素所进行的操作，都是返回一个 article_card 组件。</p><p>以上就完成了一个内容+缩略图组件的设计，接下来我们看下大图列表的设计。</p><h3 id="大图列表" tabindex="-1">大图列表 <a class="header-anchor" href="#大图列表" aria-label="Permalink to &quot;大图列表&quot;">​</a></h3><p>大图列表是一个大小图穿插的功能，可以分为三个一行插入，奇数行显示大小图组合，偶数行显示三小图组合。其中在大小图组合中，大图位置随机为第一个或者最后一个，具体效果如图 3 所示。</p>`,12),F=n("h4",{id:"组件设计-1",tabindex:"-1"},[s("组件设计 "),n("a",{class:"header-anchor",href:"#组件设计-1","aria-label":'Permalink to "组件设计"'},"​")],-1),C=n("p",null,'根据上面的规则，我们将三个图片分为一组，则存在 2 种组件组合规则，如图 4 所示的左右图的两个组合规则。图 4 左边为三小图并列组合规则，图 4 右侧为大小图组合规则，其次这部分还可能出现两种情况，第一种是第一个为大图，第二种是最后一个为大图，也就是"大小小"和"小小大"组件组合规则。',-1),u=p(`<h4 id="实现原理-1" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理-1" aria-label="Permalink to &quot;实现原理&quot;">​</a></h4><p>我们创建 home_page/img_flow.dart 来表示这个大图列表组件的页面。然后为这个页面增加一个跳转入口，修改 11 课时中的左侧菜单栏文件 draw.dart ，将菜单名称修改为图片流，并且跳转到 tyfapp://imgflow 这个地址（这里需要去 router 中注册 imgflow 路由，注册方法如下代码的第 10 行）。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 路由配置信息</span></span>
<span class="line"><span style="color:#6A737D;">/// widget 为组件</span></span>
<span class="line"><span style="color:#6A737D;">/// entranceIndex 为首页位置，如果非首页则为-1</span></span>
<span class="line"><span style="color:#6A737D;">/// params 为组件需要的参数数组</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">StructRouter</span><span style="color:#E1E4E8;">&gt; routerMapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;homepage&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructRouter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HomePageIndex</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;userpage&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructRouter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">UserPageIndex</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&#39;userId&#39;</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;contentpage&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructRouter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ArticleDetailIndex</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&#39;articleId&#39;</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructRouter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HomePageIndex</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;imgflow&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructRouter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HomePageImgFlow</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;singlepage&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructRouter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HomePageSingle</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 路由配置信息</span></span>
<span class="line"><span style="color:#6A737D;">/// widget 为组件</span></span>
<span class="line"><span style="color:#6A737D;">/// entranceIndex 为首页位置，如果非首页则为-1</span></span>
<span class="line"><span style="color:#6A737D;">/// params 为组件需要的参数数组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">StructRouter</span><span style="color:#24292E;">&gt; routerMapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;homepage&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructRouter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">HomePageIndex</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;userpage&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructRouter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">UserPageIndex</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&#39;userId&#39;</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;contentpage&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructRouter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ArticleDetailIndex</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&#39;articleId&#39;</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;default&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructRouter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">HomePageIndex</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;imgflow&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructRouter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">HomePageImgFlow</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;singlepage&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructRouter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">HomePageSingle</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>接下来实现 HomePageImgFlow 这个类，首先还是导入相应的组件库、 Struct 以及 API 接口，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/api/content/index.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/widgets/home_page/img_card.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/api/content/index.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/widgets/home_page/img_card.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>然后开始创建有状态类 HomePageImgFlow ，并在 initState 中拉取接口数据。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 九宫格首页</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageImgFlow</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatefulWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageImgFlow</span><span style="color:#E1E4E8;">({</span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;">, key});</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageImgFlowState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 具体的state类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageImgFlowState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">State</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">HomePageImgFlow</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 首页推荐帖子列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; contentList;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 拉取推荐内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      contentList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ApiContentIndex</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 九宫格首页</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageImgFlow</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatefulWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageImgFlow</span><span style="color:#24292E;">({</span><span style="color:#005CC5;">Key</span><span style="color:#24292E;">, key});</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageImgFlowState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 具体的state类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageImgFlowState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">State</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">HomePageImgFlow</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 首页推荐帖子列表</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; contentList;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 拉取推荐内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">      contentList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ApiContentIndex</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码和第一部分内容+缩略图的实现原理基本一致，在 build 方法中，除了 itemBuilder 逻辑不一样，其他实现均一样，所以我们主要看下 itemBuilder 代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; tmpList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">separated</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    scrollDirection</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Axis</span><span style="color:#E1E4E8;">.vertical,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shrinkWrap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    itemCount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList.length,</span></span>
<span class="line"><span style="color:#E1E4E8;">    itemBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> position) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (position </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 起始位置初始赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">        tmpList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contentList[position]];</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 非初始则插入列表</span></span>
<span class="line"><span style="color:#E1E4E8;">        tmpList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contentList[position]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 判断数据插入时机，如果最后一组或者满足三个一组则插入</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (position </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> contentList.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (position </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ImgCard</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            position</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> position,</span></span>
<span class="line"><span style="color:#E1E4E8;">            articleInfoList</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> tmpList,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 确认是否为最后数据，最后数据无须处理大小图问题</span></span>
<span class="line"><span style="color:#E1E4E8;">            isLast</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> position </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> contentList.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    separatorBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context, index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Divider</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#E1E4E8;">        color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xFFDDDDDD</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; tmpList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">separated</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    scrollDirection</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Axis</span><span style="color:#24292E;">.vertical,</span></span>
<span class="line"><span style="color:#24292E;">    shrinkWrap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    itemCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList.length,</span></span>
<span class="line"><span style="color:#24292E;">    itemBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> position) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (position </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 起始位置初始赋值</span></span>
<span class="line"><span style="color:#24292E;">        tmpList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.contentList[position]];</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 非初始则插入列表</span></span>
<span class="line"><span style="color:#24292E;">        tmpList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.contentList[position]);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 判断数据插入时机，如果最后一组或者满足三个一组则插入</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (position </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> contentList.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (position </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ImgCard</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            position</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> position,</span></span>
<span class="line"><span style="color:#24292E;">            articleInfoList</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> tmpList,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 确认是否为最后数据，最后数据无须处理大小图问题</span></span>
<span class="line"><span style="color:#24292E;">            isLast</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> position </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> contentList.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    separatorBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context, index) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Divider</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#24292E;">        color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xFFDDDDDD</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码第 3 行，初始化定义了一个临时数组，该数组用来保存临时需要插入的列表，代码的第 10 行判断是否为 3 的倍数位置，例如第 0 、3 、6，对于这些位置需要将 tmpList 重新赋值，如果非这些位置，则往 tmpList 插入。</p><p>代码第 19 行则判断 tmpList 是否满足 3 个，或者是否为最后一组，如果满足两个条件的任意一个则返回 ImgCard 组件，如果不是则返回一个空元素控件。</p><p>接下来我们来看下 ImgCard 中的 build 代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isLast) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withSmallPic</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((position </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withBigPic</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withSmallPic</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isLast) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withSmallPic</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((position </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withBigPic</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withSmallPic</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中的第 3 行是判断是否为最后一组，最后一组则使用小图模式，如果是奇数组则使用大图模式，是偶数组则使用小图模式。小图模式的实现比较简单，使用 flex 布局，并列显示三个即可。这里我们看下实现大图模式的代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Row</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Expanded</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      flex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFlatImg</span><span style="color:#E1E4E8;">(context, articleInfoList[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Expanded</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      flex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Column</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">getFlatImg</span><span style="color:#E1E4E8;">(context, articleInfoList[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">Padding</span><span style="color:#E1E4E8;">(padding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EdgeInsets</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">only</span><span style="color:#E1E4E8;">(top</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">getFlatImg</span><span style="color:#E1E4E8;">(context, articleInfoList[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Row</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Expanded</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      flex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFlatImg</span><span style="color:#24292E;">(context, articleInfoList[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Expanded</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      flex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Column</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">getFlatImg</span><span style="color:#24292E;">(context, articleInfoList[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">Padding</span><span style="color:#24292E;">(padding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EdgeInsets</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">only</span><span style="color:#24292E;">(top</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">getFlatImg</span><span style="color:#24292E;">(context, articleInfoList[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      ),</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>这个组件布局也是使用 flex 来实现，大图占 6 小图占 3，其次小图使用 Column 控件来列表显示。</p><p>以上就完成了大图列表的实现方式，接下来我们再看下单信息流模式。</p><h3 id="单信息流" tabindex="-1">单信息流 <a class="header-anchor" href="#单信息流" aria-label="Permalink to &quot;单信息流&quot;">​</a></h3><p>单信息流模式有点类似于目前比较流行的短视频应用，在这里我们用简单的方式来介绍下实现原理。单信息流模式使用图片作为背景，右侧为头像、评论和点赞信息，最底部显示帖子的标题和摘要部分，效果如图 5 所示。</p>`,19),g=n("h4",{id:"组件设计-2",tabindex:"-1"},[s("组件设计 "),n("a",{class:"header-anchor",href:"#组件设计-2","aria-label":'Permalink to "组件设计"'},"​")],-1),D=n("p",null,"根据图 5 的效果图，我们按照 06 课时的知识点，绘制出图 6 的一个组件树。",-1),A=p(`<p>完成组件设计后，我们再根据组件树创建相应组件，以及实现相应组件代码。</p><h4 id="实现原理-2" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理-2" aria-label="Permalink to &quot;实现原理&quot;">​</a></h4><p>我们创建 home_page/single.dart 来表示这个单信息流组件的页面，然后修改最开始的左侧菜单栏文件 draw.dart ，再修改第二个菜单为单图片信息，并且跳转到 tyfapp://singlepage 这个地址（这里需要去 router 中注册 singlepage 路由，具体注册的代码部分，在上面大图列表中已经说明）。</p><p>接下来实现 HomePageSingle 这个类，首先还是导入相应的组件库、 Struct 以及 API 接口，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/api/content/index.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/widgets/home_page/single_bottom_summary.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/widgets/home_page/single_like_bar.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/widgets/home_page/single_right_bar.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/api/content/index.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/widgets/home_page/single_bottom_summary.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/widgets/home_page/single_like_bar.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/widgets/home_page/single_right_bar.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>接下来创建有状态类组件，并且在 initState 中获取接口数据，并初始化赋值。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 单个内容首页</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageSingle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatefulWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageSingle</span><span style="color:#E1E4E8;">({</span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;">, key});</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageSingleState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 具体的state类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageSingleState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">State</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">HomePageSingle</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// index position</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> indexPos;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 首页推荐帖子列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; contentList;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    indexPos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 拉取推荐内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      contentList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ApiContentIndex</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 单个内容首页</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageSingle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatefulWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageSingle</span><span style="color:#24292E;">({</span><span style="color:#005CC5;">Key</span><span style="color:#24292E;">, key});</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageSingleState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 具体的state类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageSingleState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">State</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">HomePageSingle</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// index position</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> indexPos;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 首页推荐帖子列表</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; contentList;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    indexPos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 拉取推荐内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">      contentList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ApiContentIndex</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>代码中的 indexPos 代表当前展示的内容位置，我们主要看下 build 逻辑的代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MediaQuery</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(context).size.height,</span></span>
<span class="line"><span style="color:#E1E4E8;">  width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MediaQuery</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(context).size.width,</span></span>
<span class="line"><span style="color:#E1E4E8;">  decoration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">BoxDecoration</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      image</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DecorationImage</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          image</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NetworkImage</span><span style="color:#E1E4E8;">(contentList[indexPos].articleImage),</span></span>
<span class="line"><span style="color:#E1E4E8;">          fit</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">BoxFit</span><span style="color:#E1E4E8;">.contain)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Column</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    crossAxisAlignment</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CrossAxisAlignment</span><span style="color:#E1E4E8;">.end,</span></span>
<span class="line"><span style="color:#E1E4E8;">    children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">SingleRightBar</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          nickname</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[indexPos].userInfo.nickName,</span></span>
<span class="line"><span style="color:#E1E4E8;">          headerImage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[indexPos].userInfo.headerUrl,</span></span>
<span class="line"><span style="color:#E1E4E8;">          commentNum</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[indexPos].commentNum),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">SingleLikeBar</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          articleId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[indexPos].id,</span></span>
<span class="line"><span style="color:#E1E4E8;">          likeNum</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[indexPos].likeNum),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">SingleBottomSummary</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        articleId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[indexPos].id,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[indexPos].title,</span></span>
<span class="line"><span style="color:#E1E4E8;">        summary</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[indexPos].summary,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  ),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MediaQuery</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(context).size.height,</span></span>
<span class="line"><span style="color:#24292E;">  width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MediaQuery</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(context).size.width,</span></span>
<span class="line"><span style="color:#24292E;">  decoration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BoxDecoration</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DecorationImage</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NetworkImage</span><span style="color:#24292E;">(contentList[indexPos].articleImage),</span></span>
<span class="line"><span style="color:#24292E;">          fit</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BoxFit</span><span style="color:#24292E;">.contain)),</span></span>
<span class="line"><span style="color:#24292E;">  child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Column</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    crossAxisAlignment</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CrossAxisAlignment</span><span style="color:#24292E;">.end,</span></span>
<span class="line"><span style="color:#24292E;">    children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">SingleRightBar</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          nickname</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[indexPos].userInfo.nickName,</span></span>
<span class="line"><span style="color:#24292E;">          headerImage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[indexPos].userInfo.headerUrl,</span></span>
<span class="line"><span style="color:#24292E;">          commentNum</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[indexPos].commentNum),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">SingleLikeBar</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          articleId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[indexPos].id,</span></span>
<span class="line"><span style="color:#24292E;">          likeNum</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[indexPos].likeNum),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">SingleBottomSummary</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        articleId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[indexPos].id,</span></span>
<span class="line"><span style="color:#24292E;">        title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[indexPos].title,</span></span>
<span class="line"><span style="color:#24292E;">        summary</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[indexPos].summary,</span></span>
<span class="line"><span style="color:#24292E;">      ),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  ),</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>代码中的第 4 行就是为了设置背景图片，代码第 11 到第 22 行就是加载我们图 6 中的三个组件。三个组件中我们就只看 single_like_bar 组件的实现，其他两个组件实现原理较为简单，这个组件由于涉及状态管理，因此稍微复杂一些，所以着重说明下。接下来我们看下具体的逻辑实现过程。</p><p>第一步导入相应的组件库和第三方库。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:provider/provider.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/model/like_num_model.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/styles/text_syles.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:provider/provider.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/model/like_num_model.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/styles/text_syles.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>第二步创建 SingleLikeBar 并且定义其初始化需要的参数，代码如下。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 帖子文章的赞组件</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 包括点赞组件 icon ，以及组件点击效果</span></span>
<span class="line"><span style="color:#6A737D;">/// 需要外部参数</span><span style="color:#FFAB70;">[likeNum]</span><span style="color:#6A737D;">,点赞数量</span></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#FFAB70;">[articleId]</span><span style="color:#6A737D;"> 帖子的内容</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SingleLikeBar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 帖子id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> articleId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// like num</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> likeNum;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SingleLikeBar</span><span style="color:#E1E4E8;">({</span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;"> key, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.articleId, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.likeNum})</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> key);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 返回组件信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 帖子文章的赞组件</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 包括点赞组件 icon ，以及组件点击效果</span></span>
<span class="line"><span style="color:#6A737D;">/// 需要外部参数</span><span style="color:#E36209;">[likeNum]</span><span style="color:#6A737D;">,点赞数量</span></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#E36209;">[articleId]</span><span style="color:#6A737D;"> 帖子的内容</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SingleLikeBar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 帖子id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> articleId;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// like num</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> likeNum;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SingleLikeBar</span><span style="color:#24292E;">({</span><span style="color:#005CC5;">Key</span><span style="color:#24292E;"> key, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.articleId, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.likeNum})</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> key);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 返回组件信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后看一下 build 逻辑的代码实现，基本和原来没有太大区别，只是在 Icon 和 Text 展示上从 Row 控件修改为 Column 控件。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 返回组件信息</span></span>
<span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> likeNumModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Provider</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">LikeNumModel</span><span style="color:#E1E4E8;">&gt;(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FlatButton</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      padding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EdgeInsets</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">only</span><span style="color:#E1E4E8;">(top</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Column</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.thumb_up, color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.grey, size</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">36</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">Padding</span><span style="color:#E1E4E8;">(padding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EdgeInsets</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">only</span><span style="color:#E1E4E8;">(top</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;\${</span><span style="color:#79B8FF;">likeNumModel</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">getLikeNum</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">articleId</span><span style="color:#9ECBFF;">, </span><span style="color:#79B8FF;">likeNum</span><span style="color:#9ECBFF;">)}&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            style</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TextStyles</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">commonStyle</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">          ),</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      ),</span></span>
<span class="line"><span style="color:#E1E4E8;">      onPressed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> likeNumModel.</span><span style="color:#B392F0;">like</span><span style="color:#E1E4E8;">(articleId),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 返回组件信息</span></span>
<span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> likeNumModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Provider</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">LikeNumModel</span><span style="color:#24292E;">&gt;(context);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FlatButton</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      padding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EdgeInsets</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">only</span><span style="color:#24292E;">(top</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Column</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.thumb_up, color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.grey, size</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">36</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">Padding</span><span style="color:#24292E;">(padding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EdgeInsets</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">only</span><span style="color:#24292E;">(top</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;\${</span><span style="color:#005CC5;">likeNumModel</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">getLikeNum</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">articleId</span><span style="color:#032F62;">, </span><span style="color:#005CC5;">likeNum</span><span style="color:#032F62;">)}&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            style</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TextStyles</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">commonStyle</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">          ),</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      ),</span></span>
<span class="line"><span style="color:#24292E;">      onPressed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> likeNumModel.</span><span style="color:#6F42C1;">like</span><span style="color:#24292E;">(articleId),</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码是 07 课时已经详细介绍过的部分，其中没有太大的区别，这里需要介绍下 Container 的目的是限制 FlatButton 的大小，避免 FlatButton 产生一些 margin 引起布局问题。以上就完成了单信息流组件的一个设计。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>以上就是本课时的所有内容，学完本课时，你要掌握 ListView.separated 的应用，并且了解 ListView 其他构造函数的使用。你要熟练应用 ListView.separated 实现三种内容展示的样式实现方法，并且能进一步熟悉界面效果转化组件设计的实践方法。</p><p>本课时已经完成了首页推荐内容，但是还缺乏内容的更新机制，下一课时我将介绍下拉刷新当前数据以及上拉更新列表数据的功能。谢谢。</p><p><a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">点击此链接查看本课时源码</a></p>`,21);function m(B,h,k,f,I,_){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/33/F0/CgqCHl8RIO-AVjCIAANJnR6nMPc935.png"}),s(),y,i,l(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/33/F0/CgqCHl8RIPyAE8_gAALBPW0-Bj0112.png"}),s(),d,l(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/33/E5/Ciqc1F8RIRaAUc1mAAfclNZgPPA347.png"}),s(),F,C,l(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image/M00/33/E5/Ciqc1F8RISOAdHsLAAHLoId25k8599.png"}),s(),u,l(a,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image/M00/33/E5/Ciqc1F8RIUWAJaWRAAQ7AhPuYYY687.png"}),s(),g,D,l(a,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image/M00/33/E5/Ciqc1F8RIVKAZyj1AAJ_M5lRbOU489.png"}),s(),A])}const S=o(r,[["render",m]]);export{v as __pageData,S as default};
