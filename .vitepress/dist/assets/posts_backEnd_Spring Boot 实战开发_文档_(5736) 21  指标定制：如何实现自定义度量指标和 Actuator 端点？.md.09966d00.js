import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.4e7d56ce.js";const F=JSON.parse('{"title":"Actuator 中的度量指标 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Boot 实战开发_文档/(5736) 21  指标定制：如何实现自定义度量指标和 Actuator 端点？.md","filePath":"posts/backEnd/Spring Boot 实战开发_文档/(5736) 21  指标定制：如何实现自定义度量指标和 Actuator 端点？.md","lastUpdated":1696338709000}'),l={name:"posts/backEnd/Spring Boot 实战开发_文档/(5736) 21  指标定制：如何实现自定义度量指标和 Actuator 端点？.md"},o=p(`<p>20 讲中我们引入了 Spring Boot Actuator 组件来满足 Spring Boot 应用程序的系统监控功能，并重点介绍了如何扩展常见的 Info 和 Health 监控端点的实现方法。</p><p>这一讲我们继续讨论如何扩展 Actuator 端点，但更多关注与度量指标相关的内容。同时，我们还将给出如何创建自定义 Actuator 的实现方法，以便应对默认端点无法满足需求的应用场景。</p><h3 id="actuator-中的度量指标" tabindex="-1">Actuator 中的度量指标 <a class="header-anchor" href="#actuator-中的度量指标" aria-label="Permalink to &quot;Actuator 中的度量指标&quot;">​</a></h3><p><strong>对于系统监控而言，度量是一个很重要的维度。</strong> 在 Spring Boot 2.X 版本中，Actuator 组件主要使用内置的 Micrometer 库实现度量指标的收集和分析。</p><h4 id="micrometer-度量库" tabindex="-1">Micrometer 度量库 <a class="header-anchor" href="#micrometer-度量库" aria-label="Permalink to &quot;Micrometer 度量库&quot;">​</a></h4><p>Micrometer 是一款监控指标的度量类库，为 Java 平台上的性能数据收集提供了一套通用的 API。在应用程序中，我们只使用 Micrometer 提供的通用 API 即可收集度量指标。</p><p>下面我们先来简要介绍 Micrometer 中包含的几个核心概念。</p><p>首先我们需要介绍的是计量器 Meter，它是一个接口，代表的是需要收集的性能指标数据。关于 Meter 的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Meter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AutoCloseable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//Meter 的唯一标识，是名称和标签的一种组合</span></span>
<span class="line"><span style="color:#E1E4E8;">    Id </span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//一组测量结果</span></span>
<span class="line"><span style="color:#E1E4E8;">	Iterable&lt;</span><span style="color:#F97583;">Measurement</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">measure</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//Meter 的类型枚举值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">COUNTER</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">GAUGE</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">LONG_TASK_TIMER</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">TIMER</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">DISTRIBUTION_SUMMARY</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">OTHER</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Meter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AutoCloseable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//Meter 的唯一标识，是名称和标签的一种组合</span></span>
<span class="line"><span style="color:#24292E;">    Id </span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//一组测量结果</span></span>
<span class="line"><span style="color:#24292E;">	Iterable&lt;</span><span style="color:#D73A49;">Measurement</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">measure</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//Meter 的类型枚举值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">COUNTER</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">GAUGE</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">LONG_TASK_TIMER</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">TIMER</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">DISTRIBUTION_SUMMARY</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">OTHER</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过上述代码，我们注意到 Meter 中存在一个 Id 对象，该对象的作用是定义 Meter 的名称和标签。从 Type 的枚举值中，我们不难看出 Micrometer 中包含的所有计量器类型。</p><p>接下来我们先说明两个概念。</p><blockquote><p><strong>Meter 的名称</strong> ：对于计量器来说，每个计量器都有自己的名称，而且在创建时它们都可以指定一系列标签。<br><strong>Meter 的标签</strong>：标签的作用在于监控系统可以通过这些标签对度量进行分类过滤。</p></blockquote><p><strong>在日常开发过程中，常用的计量器类型主要分为计数器 Counter、计量仪 Gauge 和计时器 Timer 这三种。</strong></p><ul><li><p><strong>Counter</strong>：这个计量器的作用和它的名称一样，就是一个不断递增的累加器，我们可以通过它的 increment 方法实现累加逻辑。</p></li><li><p><strong>Gauge</strong>：与 Counter 不同，Gauge 所度量的值并不一定是累加的，我们可以通过它的 gauge 方法指定数值。</p></li><li><p><strong>Timer</strong>：这个计量器比较简单，就是用来记录事件的持续时间。</p></li></ul><p>既然我们已经明确了常用的计量器及其使用场景，那么如何创建这些计量器呢？</p><p>在 Micrometer 中，我们提供了一个计量器注册表 MeterRegistry，它主要负责创建和维护各种计量器。关于 MeterRegistry 的创建方法如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MeterRegistry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AutoCloseable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Gauge </span><span style="color:#B392F0;">newGauge</span><span style="color:#E1E4E8;">(Meter.Id </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> T </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">, ToDoubleFunction&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">valueFunction</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> Counter </span><span style="color:#B392F0;">newCounter</span><span style="color:#E1E4E8;">(Meter.Id </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> Timer </span><span style="color:#B392F0;">newTimer</span><span style="color:#E1E4E8;">(Meter.Id </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, DistributionStatisticConfig </span><span style="color:#FFAB70;">distributionStatisticConfig</span><span style="color:#E1E4E8;">, PauseDetector </span><span style="color:#FFAB70;">pauseDetector</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MeterRegistry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AutoCloseable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Gauge </span><span style="color:#6F42C1;">newGauge</span><span style="color:#24292E;">(Meter.Id </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> T </span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, ToDoubleFunction&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">valueFunction</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> Counter </span><span style="color:#6F42C1;">newCounter</span><span style="color:#24292E;">(Meter.Id </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> Timer </span><span style="color:#6F42C1;">newTimer</span><span style="color:#24292E;">(Meter.Id </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, DistributionStatisticConfig </span><span style="color:#E36209;">distributionStatisticConfig</span><span style="color:#24292E;">, PauseDetector </span><span style="color:#E36209;">pauseDetector</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码只是创建 Meter 的一种途径，从中我们可以看到 MeterRegistry 针对不同的 Meter 提供了对应的创建方法。</p><p>而创建 Meter 的另一种途径是使用某个 Meter 的具体 builder 方法。以 Counter 为例，它的定义中包含了一个 builder 方法和一个 register 方法，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Meter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Builder </span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amount</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Iterable&lt;</span><span style="color:#F97583;">Measurement</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">measure</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Measurement</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">count, Statistic.COUNT));</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">         ...</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Counter </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(MeterRegistry </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> registry.</span><span style="color:#B392F0;">counter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Meter.</span><span style="color:#B392F0;">Id</span><span style="color:#E1E4E8;">(name, tags, baseUnit, description, Type.COUNTER));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Meter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Builder </span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amount</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Iterable&lt;</span><span style="color:#D73A49;">Measurement</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">measure</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Measurement</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">count, Statistic.COUNT));</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">         ...</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Counter </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(MeterRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> registry.</span><span style="color:#6F42C1;">counter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Meter.</span><span style="color:#6F42C1;">Id</span><span style="color:#24292E;">(name, tags, baseUnit, description, Type.COUNTER));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意到最后的 register 方法就是将当前的 Counter 注册到 MeterRegistry 中，因此我们需要创建一个 Counter。通常，我们会采用如下所示代码进行创建。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Counter counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Counter.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;counter1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tag1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(registry);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Counter counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Counter.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;counter1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tag1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(registry);</span></span></code></pre></div><p>了解了 Micrometer 框架的基本概念后，接下来我们回到 Spring Boot Actuator，一起来看看它提供的专门针对度量指标管理的 Metrics 端点。</p><h4 id="扩展-metrics-端点" tabindex="-1">扩展 Metrics 端点 <a class="header-anchor" href="#扩展-metrics-端点" aria-label="Permalink to &quot;扩展 Metrics 端点&quot;">​</a></h4><p>在 Spring Boot 中，它为我们提供了一个 Metrics 端点用于实现生产级的度量工具。访问 actuator/metrics 端点后，我们将得到如下所示的一系列度量指标。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;names&quot;:[</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.memory.max&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.threads.states&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jdbc.connections.active&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.gc.memory.promoted&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.memory.used&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.gc.max.data.size&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jdbc.connections.max&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jdbc.connections.min&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.memory.committed&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;system.cpu.count&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;logback.events&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;http.server.requests&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.buffer.memory.used&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;tomcat.sessions.created&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.threads.daemon&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;system.cpu.usage&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.gc.memory.allocated&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.idle&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.pending&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jdbc.connections.idle&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;tomcat.sessions.expired&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.threads.live&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.threads.peak&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.active&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.creation&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;process.uptime&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;tomcat.sessions.rejected&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;process.cpu.usage&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.classes.loaded&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.max&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.min&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.gc.pause&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.classes.unloaded&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;tomcat.sessions.active.current&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;tomcat.sessions.alive.max&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.gc.live.data.size&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.usage&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.timeout&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.buffer.count&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;jvm.buffer.total.capacity&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;tomcat.sessions.active.max&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;hikaricp.connections.acquire&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">         &quot;process.start.time&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     ]</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     &quot;names&quot;:[</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.memory.max&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.threads.states&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jdbc.connections.active&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.gc.memory.promoted&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.memory.used&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.gc.max.data.size&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jdbc.connections.max&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jdbc.connections.min&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.memory.committed&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;system.cpu.count&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;logback.events&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;http.server.requests&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.buffer.memory.used&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;tomcat.sessions.created&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.threads.daemon&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;system.cpu.usage&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.gc.memory.allocated&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.idle&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.pending&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jdbc.connections.idle&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;tomcat.sessions.expired&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.threads.live&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.threads.peak&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.active&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.creation&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;process.uptime&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;tomcat.sessions.rejected&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;process.cpu.usage&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.classes.loaded&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.max&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.min&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.gc.pause&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.classes.unloaded&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;tomcat.sessions.active.current&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;tomcat.sessions.alive.max&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.gc.live.data.size&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.usage&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.timeout&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.buffer.count&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;jvm.buffer.total.capacity&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;tomcat.sessions.active.max&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;hikaricp.connections.acquire&quot;,</span></span>
<span class="line"><span style="color:#24292E;">         &quot;process.start.time&quot;</span></span>
<span class="line"><span style="color:#24292E;">     ]</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>以上代码中涉及的指标包括常规的系统内存总量、空闲内存数量、处理器数量、系统正常运行时间、堆信息等，也包含我们引入 JDBC 和 HikariCP 数据源组件之后的数据库连接信息等。此时，如果我们想了解某项指标的详细信息，在 actuator/metrics 端点后添加对应指标的名称即可。</p><p>例如我们想了解当前内存的使用情况，就可以通过 actuator/metrics/jvm.memory.used 端点进行获取，如下代码所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;name&quot;:&quot;jvm.memory.used&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;description&quot;:&quot;The amount of used memory&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;baseUnit&quot;:&quot;bytes&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;measurements&quot;:[</span></span>
<span class="line"><span style="color:#E1E4E8;">         {</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;statistic&quot;:&quot;VALUE&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;value&quot;:115520544</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">     ],</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;availableTags&quot;:[</span></span>
<span class="line"><span style="color:#E1E4E8;">         {</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;tag&quot;:&quot;area&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;values&quot;:[</span></span>
<span class="line"><span style="color:#E1E4E8;">                 &quot;heap&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 &quot;nonheap&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">             ]</span></span>
<span class="line"><span style="color:#E1E4E8;">         },</span></span>
<span class="line"><span style="color:#E1E4E8;">         {</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;tag&quot;:&quot;id&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;values&quot;:[</span></span>
<span class="line"><span style="color:#E1E4E8;">                 &quot;Compressed Class Space&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 &quot;PS Survivor Space&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 &quot;PS Old Gen&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 &quot;Metaspace&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 &quot;PS Eden Space&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 &quot;Code Cache&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">             ]</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">     ]</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     &quot;name&quot;:&quot;jvm.memory.used&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;description&quot;:&quot;The amount of used memory&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;baseUnit&quot;:&quot;bytes&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;measurements&quot;:[</span></span>
<span class="line"><span style="color:#24292E;">         {</span></span>
<span class="line"><span style="color:#24292E;">             &quot;statistic&quot;:&quot;VALUE&quot;,</span></span>
<span class="line"><span style="color:#24292E;">             &quot;value&quot;:115520544</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">     ],</span></span>
<span class="line"><span style="color:#24292E;">     &quot;availableTags&quot;:[</span></span>
<span class="line"><span style="color:#24292E;">         {</span></span>
<span class="line"><span style="color:#24292E;">             &quot;tag&quot;:&quot;area&quot;,</span></span>
<span class="line"><span style="color:#24292E;">             &quot;values&quot;:[</span></span>
<span class="line"><span style="color:#24292E;">                 &quot;heap&quot;,</span></span>
<span class="line"><span style="color:#24292E;">                 &quot;nonheap&quot;</span></span>
<span class="line"><span style="color:#24292E;">             ]</span></span>
<span class="line"><span style="color:#24292E;">         },</span></span>
<span class="line"><span style="color:#24292E;">         {</span></span>
<span class="line"><span style="color:#24292E;">             &quot;tag&quot;:&quot;id&quot;,</span></span>
<span class="line"><span style="color:#24292E;">             &quot;values&quot;:[</span></span>
<span class="line"><span style="color:#24292E;">                 &quot;Compressed Class Space&quot;,</span></span>
<span class="line"><span style="color:#24292E;">                 &quot;PS Survivor Space&quot;,</span></span>
<span class="line"><span style="color:#24292E;">                 &quot;PS Old Gen&quot;,</span></span>
<span class="line"><span style="color:#24292E;">                 &quot;Metaspace&quot;,</span></span>
<span class="line"><span style="color:#24292E;">                 &quot;PS Eden Space&quot;,</span></span>
<span class="line"><span style="color:#24292E;">                 &quot;Code Cache&quot;</span></span>
<span class="line"><span style="color:#24292E;">             ]</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">     ]</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>前面介绍 Micrometer 时，我们已经提到 Metrics 指标体系中包含支持 Counter 和 Gauge 这两种级别的度量指标。通过将 <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/CounterService.java" target="_blank" rel="noreferrer">Counter</a> 或 <a href="http://github.com/spring-projects/spring-boot/tree/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/GaugeService.java" target="_blank" rel="noreferrer">Gauge</a> 注入业务代码中，我们就可以记录自己想要的度量指标。其中，<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/CounterService.java" target="_blank" rel="noreferrer">Counter</a> 用来暴露 increment() 方法，而 <a href="http://github.com/spring-projects/spring-boot/tree/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/GaugeService.java" target="_blank" rel="noreferrer">Gauge</a> 用来提供一个 value() 方法。</p><p>下面我们以 Counter 为例介绍在业务代码中嵌入自定义 Metrics 指标的方法，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CounterService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CounterService</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Metrics.</span><span style="color:#B392F0;">addRegistry</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleMeterRegistry</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">counter</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, String... </span><span style="color:#FFAB70;">tags</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Counter counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Metrics.</span><span style="color:#B392F0;">counter</span><span style="color:#E1E4E8;">(name, tags);</span></span>
<span class="line"><span style="color:#E1E4E8;">        counter.</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CounterService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CounterService</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Metrics.</span><span style="color:#6F42C1;">addRegistry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleMeterRegistry</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">counter</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, String... </span><span style="color:#E36209;">tags</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Counter counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Metrics.</span><span style="color:#6F42C1;">counter</span><span style="color:#24292E;">(name, tags);</span></span>
<span class="line"><span style="color:#24292E;">        counter.</span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这段代码中，我们构建了一个公共服务 CounterService，并开放了一个 Counter 方法供业务系统进行使用。当然，你也可以自己实现类似的工具类完成对各种计量器的封装。</p><p>另外，Micrometer 还提供了一个 MeterRegistry 工具类供我们创建度量指标。因此，我们也十分推荐使用 MeterRegistry 对各种自定义度量指标的创建过程进行简化。</p><h4 id="使用-meterregistry" tabindex="-1">使用 MeterRegistry <a class="header-anchor" href="#使用-meterregistry" aria-label="Permalink to &quot;使用 MeterRegistry&quot;">​</a></h4><p>再次回到 SpringCSS 案例，此次我们来到 customer-service 的 CustomerTicketService 中。</p><p>比如我们希望系统每创建一个客服工单，就对所创建的工单进行计数，并作为系统运行时的一项度量指标，该效果的实现方式如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerTicketService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> MeterRegistry meterRegistry;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CustomerTicket </span><span style="color:#B392F0;">generateCustomerTicket</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">orderNumber</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    CustomerTicket customerTicket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerTicket</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">        meterRegistry.</span><span style="color:#B392F0;">summary</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;customerTickets.generated.count&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">record</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> customerTicket;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }   </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerTicketService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> MeterRegistry meterRegistry;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CustomerTicket </span><span style="color:#6F42C1;">generateCustomerTicket</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">orderNumber</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    CustomerTicket customerTicket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerTicket</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">        meterRegistry.</span><span style="color:#6F42C1;">summary</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;customerTickets.generated.count&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">record</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> customerTicket;</span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述 generateCustomerTicket 方法中，通过 MeterRegistry 我们实现了每次创建 CustomerTicket 时自动添加一个计数的功能。</p><p>而且，MeterRegistry 还提供了一些类工具方法用于创建自定义度量指标。这些类工具方法除了常规的 counter、gauge、timer 等对应具体 Meter 的工具方法之外，还包括上述代码中的 summary 方法，且 Summary 方法返回的是一个 DistributionSummary 对象，关于它的定义如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DistributionSummary</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Meter</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">HistogramSupport</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Builder </span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//记录数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">record</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amount</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//记录操作执行的次数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//记录数据的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">totalAmount</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//记录数据的平均值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mean</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">totalAmount</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//记录数据的最大值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DistributionSummary</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Meter</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">HistogramSupport</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Builder </span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//记录数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">record</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amount</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//记录操作执行的次数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//记录数据的数量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">totalAmount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//记录数据的平均值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mean</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">totalAmount</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//记录数据的最大值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为 DistributionSummary 的作用是记录一系列的事件并对这些事件进行处理，所以在 CustomerTicketService 中添加的meterRegistry.summary(&quot;customertickets.generated.count&quot;).record(1) 这行代码相当于每次调用 generateCustomerTicket 方法时，我们都会对这次调用进行记录。</p><p>现在访问 actuator/metrics/customertickets.generated.count 端点，我们就能看到如下所示的随着服务调用不断递增的度量信息。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;name&quot;:&quot;customertickets.generated.count&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;measurements&quot;:[</span></span>
<span class="line"><span style="color:#E1E4E8;">         {</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;statistic&quot;:&quot;Count&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;value&quot;:1</span></span>
<span class="line"><span style="color:#E1E4E8;">         },</span></span>
<span class="line"><span style="color:#E1E4E8;">         {</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;statistic&quot;:&quot;Total&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">             &quot;value&quot;:19</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">     ] </span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     &quot;name&quot;:&quot;customertickets.generated.count&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;measurements&quot;:[</span></span>
<span class="line"><span style="color:#24292E;">         {</span></span>
<span class="line"><span style="color:#24292E;">             &quot;statistic&quot;:&quot;Count&quot;,</span></span>
<span class="line"><span style="color:#24292E;">             &quot;value&quot;:1</span></span>
<span class="line"><span style="color:#24292E;">         },</span></span>
<span class="line"><span style="color:#24292E;">         {</span></span>
<span class="line"><span style="color:#24292E;">             &quot;statistic&quot;:&quot;Total&quot;,</span></span>
<span class="line"><span style="color:#24292E;">             &quot;value&quot;:19</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">     ] </span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>显然，通过 MeterRegistry 实现自定义度量指标的使用方法更加简单。这里，你也可以结合业务需求尝试该类的不同功能。</p><p>接下来我们再来看一个相对比较复杂的使用方式。在 customer-service 中，我们同样希望系统存在一个度量值，该度量值用于记录所有新增的 CustomerTicket 个数，这次的示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerTicketMetrics</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractRepositoryEventListener</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">CustomerTicket</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> MeterRegistry meterRegistry;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerTicketMetrics</span><span style="color:#E1E4E8;">(MeterRegistry </span><span style="color:#FFAB70;">meterRegistry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.meterRegistry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> meterRegistry;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onAfterCreate</span><span style="color:#E1E4E8;">(CustomerTicket </span><span style="color:#FFAB70;">customerTicket</span><span style="color:#E1E4E8;">) {                 meterRegistry.</span><span style="color:#B392F0;">counter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;customerTicket.created.count&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerTicketMetrics</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractRepositoryEventListener</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">CustomerTicket</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> MeterRegistry meterRegistry;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerTicketMetrics</span><span style="color:#24292E;">(MeterRegistry </span><span style="color:#E36209;">meterRegistry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.meterRegistry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> meterRegistry;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onAfterCreate</span><span style="color:#24292E;">(CustomerTicket </span><span style="color:#E36209;">customerTicket</span><span style="color:#24292E;">) {                 meterRegistry.</span><span style="color:#6F42C1;">counter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;customerTicket.created.count&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先，这里我们使用了 MeterRegistry 的 Counter 方法初始化一个 counter，然后调用它的 increment 方法增加度量计数（这部分内容我们已经很熟悉了）。</p><p><strong>注意到这里，我们同时还引入了一个 AbstractRepositoryEventListener 抽象类，这个抽象类能够监控 Spring Data 中 Repository 层操作所触发的事件 RepositoryEvent，例如实体创建前后的 BeforeCreateEvent 和 AfterCreateEvent 事件、实体保存前后的 BeforeSaveEvent 和 AfterSaveEvent 事件等。</strong></p><p>针对这些事件，AbstractRepositoryEventListener 能捕捉并调用对应的回调函数。关于 AbstractRepositoryEventListener 类的部分实现如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractRepositoryEventListener</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApplicationListener</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">RepositoryEvent</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onApplicationEvent</span><span style="color:#E1E4E8;">(RepositoryEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; srcType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getSource</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> BeforeSaveEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">onBeforeSave</span><span style="color:#E1E4E8;">((T) event.</span><span style="color:#B392F0;">getSource</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> BeforeCreateEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">onBeforeCreate</span><span style="color:#E1E4E8;">((T) event.</span><span style="color:#B392F0;">getSource</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> AfterCreateEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">onAfterCreate</span><span style="color:#E1E4E8;">((T) event.</span><span style="color:#B392F0;">getSource</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> AfterSaveEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">onAfterSave</span><span style="color:#E1E4E8;">((T) event.</span><span style="color:#B392F0;">getSource</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractRepositoryEventListener</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApplicationListener</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">RepositoryEvent</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onApplicationEvent</span><span style="color:#24292E;">(RepositoryEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; srcType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getSource</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> BeforeSaveEvent) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">onBeforeSave</span><span style="color:#24292E;">((T) event.</span><span style="color:#6F42C1;">getSource</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> BeforeCreateEvent) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">onBeforeCreate</span><span style="color:#24292E;">((T) event.</span><span style="color:#6F42C1;">getSource</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> AfterCreateEvent) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">onAfterCreate</span><span style="color:#24292E;">((T) event.</span><span style="color:#6F42C1;">getSource</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> AfterSaveEvent) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">onAfterSave</span><span style="color:#24292E;">((T) event.</span><span style="color:#6F42C1;">getSource</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这段代码中，我们可以看到 AbstractRepositoryEventListener 直接实现了 Spring 容器中的 ApplicationListener 监听器接口，并在 onApplicationEvent 方法中根据所传入的事件类型触发了回调函数。</p><p>以案例中的需求场景为例，我们可以在创建 Account 实体之后执行度量操作。也就是说，可以把度量操作的代码放在 onAfterCreate 回调函数中，正如案例代码中所展示那样。</p><p>现在我们执行生成客户工单操作，并访问对应的 Actuator 端点，同样可以看到度量数据在不断上升。</p><h3 id="自定义-actuator-端点" tabindex="-1">自定义 Actuator 端点 <a class="header-anchor" href="#自定义-actuator-端点" aria-label="Permalink to &quot;自定义 Actuator 端点&quot;">​</a></h3><p>在日常开发过程中，扩展现有端点有时并不一定能满足业务需求，而自定义 Spring Boot Actuator 监控端点算是一种更灵活的方法。</p><p>假设我们需要提供一个监控端点以获取当前系统的用户信息和计算机名称，就可以通过一个独立的 MySystemEndPoint 进行实现，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Endpoint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mysystem&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">enableByDefault</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MySystemEndpoint</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ReadOperation</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getMySystemInfo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; result</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getenv</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">,map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;USERNAME&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;computername&quot;</span><span style="color:#E1E4E8;">,map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;COMPUTERNAME&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Endpoint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mysystem&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">enableByDefault</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MySystemEndpoint</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ReadOperation</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getMySystemInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; result</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getenv</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">,map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;USERNAME&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;computername&quot;</span><span style="color:#24292E;">,map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;COMPUTERNAME&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这段代码中我们可以看到，MySystemEndpoint 主要通过系统环境变量获取所需监控信息。</p><p>注意，这里我们引入了一个新的注解 @Endpoint，该注解定义如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Endpoint</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//端点 id</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否默认启动标志位</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enableByDefault</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Endpoint</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//端点 id</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否默认启动标志位</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enableByDefault</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码中的 @Endpoint 注解主要用于设置端点 id 及是否默认启动的标志位。且在案例中，我们指定了 id 为&quot;mysystem&quot;，enableByDefault 标志为 true。</p><p>事实上，在 Actuator 中也存在一批类似 @Endpoint 的端点注解。其中被 @Endpoint 注解的端点可以通过 JMX 和 Web 访问应用程序，对应的被 @JmxEndpoint 注解的端点只能通过 JMX 访问，而被 @WebEndpoint 注解的端点只能通过 Web 访问。</p><p>在示例代码中，我们还看到了一个 @ReadOperation 注解，该注解作用于方法，用于标识读取数据操作。<strong>在 Actuator 中，除了提供 @ReadOperation 注解之外，还提供 @WriteOperation 和 @DeleteOperation 注解，它们分别对应写入操作和删除操作。</strong></p><p>现在，通过访问 <a href="http://localhost:8080/" target="_blank" rel="noreferrer">http://localhost:8080/</a>actuator/mysystem，我们就能获取如下所示监控信息。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;computername&quot;:&quot;LAPTOP-EQB59J5P&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;username&quot;:&quot;user&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     &quot;computername&quot;:&quot;LAPTOP-EQB59J5P&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;username&quot;:&quot;user&quot;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>有时为了获取特定的度量信息，我们需要对某个端点传递参数，而 Actuator 专门提供了一个 @Selector 注解标识输入参数，示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Endpoint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;account&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">enableByDefault</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountEndpoint</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AccountRepository accountRepository;    </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ReadOperation</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getMySystemInfo</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Selector</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">arg0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(accountName, accountRepository.</span><span style="color:#B392F0;">findAccountByAccountName</span><span style="color:#E1E4E8;">(arg0));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Endpoint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;account&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">enableByDefault</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountEndpoint</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountRepository accountRepository;    </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ReadOperation</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getMySystemInfo</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Selector</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">arg0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(accountName, accountRepository.</span><span style="color:#6F42C1;">findAccountByAccountName</span><span style="color:#24292E;">(arg0));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码的逻辑非常简单，就是根据传入的 accountName 获取用户账户信息。</p><p><strong>这里请注意，通过 @Selector 注解，我们就可以使用</strong> <a href="http://localhost:8080/" target="_blank" rel="noreferrer">http://localhost:8080/</a><strong>actuator/ account/account1 这样的端口地址触发度量操作了。</strong></p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>度量是我们观测一个应用程序运行时状态的核心手段。这一讲我们介绍了 Spring Boot 中新引入的 Micrometer 度量库，以及该库中提供的各种度量组件。同时，我们还基于 Micrometer 中的核心工具类 MeterRegistry 完成了在业务系统中嵌入度量指标的实现过程。最后，我们还简要介绍了如何自定义一个 Actuator 端点的开发方法。</p><p>这里给你留一道思考题：在使用 Micrometer 时，实现度量数据的采集方法有哪些？欢迎你在留言区进行互动、交流。另外，如果你觉得本专栏有价值，欢迎分享给更多好友哦~</p><p>讲完度量，22 讲我们将关注对应用系统运行时状态的管理，并介绍如何使用 Admin Server 组件对 Spring Boot 应用程序进行有效管理。</p>`,74),e=[o];function t(c,r,E,y,i,u){return n(),a("div",null,e)}const m=s(l,[["render",t]]);export{F as __pageData,m as default};
