import{_ as o,j as e,o as t,g as r,k as p,h as a,s,Q as l}from"./chunks/framework.a0d18f64.js";const U=JSON.parse('{"title":"11JpaRepoitory如何自定义？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4711) 11  JpaRepoitory 如何自定义？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4711) 11  JpaRepoitory 如何自定义？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4711) 11  JpaRepoitory 如何自定义？.md"},y=s("h1",{id:"_11jparepoitory如何自定义",tabindex:"-1"},[a("11JpaRepoitory如何自定义？ "),s("a",{class:"header-anchor",href:"#_11jparepoitory如何自定义","aria-label":'Permalink to "11JpaRepoitory如何自定义？"'},"​")],-1),E=s("p",null,"通过前面课时的内容，相信你已经掌握了很多 Repository 的高级用法，但是在实际工作场景中也难免会出现自定义 Repsitory 实现类的场景，这一课时我们就来看一下如何定义自己的 Repository 实现类。要知道 JPA 的操作核心是 EntityManager，那么我们先看看 Entitymanager 究竟为何物。",-1),i=s("h3",{id:"entitymanager-介绍",tabindex:"-1"},[a("EntityManager 介绍 "),s("a",{class:"header-anchor",href:"#entitymanager-介绍","aria-label":'Permalink to "EntityManager 介绍"'},"​")],-1),F=s("p",null,"Java Persistence API 规定，操作数据库实体必须要通过 EntityManager 进行，而我们前面看到了所有的 Repository 在 JPA 里面的实现类是 SimpleJpaRepository，它在真正操作实体的时候都是调用 EntityManager 里面的方法。",-1),g=s("p",null,"我们在 SimpleJpaRepository 里面设置一个断点，这样可以很容易看得出来 EntityManger 是 JPA 的接口协议，而其现类是 Hibernate 里面的 SessionImpl，如下图所示：",-1),d=l(`<p>那么我们看看 EntityManager 给我们提供了哪些方法。</p><h4 id="entitymanager-方法有哪些" tabindex="-1">EntityManager 方法有哪些？ <a class="header-anchor" href="#entitymanager-方法有哪些" aria-label="Permalink to &quot;EntityManager 方法有哪些？&quot;">​</a></h4><p>下面介绍几个重要的、比较常用的方法，不常用的我将一笔带过，如果你有兴趣可以自行查看。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EntityManager</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//用于将新创建的Entity纳入EntityManager的管理。该方法执行后，传入persist()方法的 Entity 对象转换成持久化状态。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">persist</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//将游离态的实体merge到当前的persistence context里面，一般用于更新。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//将实体对象删除，物理删除</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//将当前的persistence context中的实体，同步到数据库里面，只有执行了这个方法，上面的EntityManager的操作才会DB生效；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//根据实体类型和主键查询一个实体对象；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entityClass</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">primaryKey</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//根据JPQL创建一个Query对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Query </span><span style="color:#B392F0;">createQuery</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">qlString</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//利用CriteriaUpdate创建更新查询</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Query </span><span style="color:#B392F0;">createQuery</span><span style="color:#E1E4E8;">(CriteriaUpdate </span><span style="color:#FFAB70;">updateQuery</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//利用原生的sql语句创建查询，可以是查询、更新、删除等sql</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Query </span><span style="color:#B392F0;">createNativeQuery</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">sqlString</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span><span style="color:#6A737D;">//其他方法我就不一一列举了，用法很简单，我们只要参看SimpleJpaRepository里面怎么用的，我们怎么用就可以了；</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EntityManager</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//用于将新创建的Entity纳入EntityManager的管理。该方法执行后，传入persist()方法的 Entity 对象转换成持久化状态。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">persist</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//将游离态的实体merge到当前的persistence context里面，一般用于更新。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//将实体对象删除，物理删除</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//将当前的persistence context中的实体，同步到数据库里面，只有执行了这个方法，上面的EntityManager的操作才会DB生效；</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//根据实体类型和主键查询一个实体对象；</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entityClass</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">primaryKey</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//根据JPQL创建一个Query对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Query </span><span style="color:#6F42C1;">createQuery</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">qlString</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//利用CriteriaUpdate创建更新查询</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Query </span><span style="color:#6F42C1;">createQuery</span><span style="color:#24292E;">(CriteriaUpdate </span><span style="color:#E36209;">updateQuery</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//利用原生的sql语句创建查询，可以是查询、更新、删除等sql</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Query </span><span style="color:#6F42C1;">createNativeQuery</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">sqlString</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  ...</span><span style="color:#6A737D;">//其他方法我就不一一列举了，用法很简单，我们只要参看SimpleJpaRepository里面怎么用的，我们怎么用就可以了；</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这一课时我们先知道 EntityManager 的语法和用法就好，在之后的第 21 课时介绍 Persistence Context 的时候，再详细讲一下其对实体状态的影响，以及每种状态代表什么意思。</p><p>那么现在你知道了这些语法，该怎么使用呢？</p><h4 id="entitymanager-如何使用" tabindex="-1">EntityManager 如何使用？ <a class="header-anchor" href="#entitymanager-如何使用" aria-label="Permalink to &quot;EntityManager 如何使用？&quot;">​</a></h4><p>它的使用方法很简单，我们在任何地方只要能获得 EntityManager，就可以进行里面的操作。</p><p><strong>获得 EntityManager 的方式：通过 @PersistenceContext 注解。</strong></p><p>将 @PersistenceContext 注解标注在 EntityManager 类型的字段上，这样得到的 EntityManager 就是容器管理的 EntityManager。由于是容器管理的，所以我们不需要、也不应该显式关闭注入的 EntityManager 实例。</p><p>下面是关于这种方式的例子，我们想要在测试类中获得 @PersistenceContext 里面的 EntityManager，看看代码应该怎么写。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestInstance</span><span style="color:#E1E4E8;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//利用该方式获得entityManager</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PersistenceContext</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EntityManager entityManager;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试entityManager用法</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">JsonProcessingException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testEntityManager</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//测试找到一个User对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entityManager.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(User.class,</span><span style="color:#79B8FF;">2L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//我们改变一下user的删除状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">setDeleted</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//merger方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        entityManager.</span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//更新到数据库里面</span></span>
<span class="line"><span style="color:#E1E4E8;">        entityManager.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//再通过createQuery创建一个JPQL，进行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  entityManager.</span><span style="color:#B392F0;">createQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u From User u where u.name=?1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getResultList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(users.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getDeleted</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestInstance</span><span style="color:#24292E;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//利用该方式获得entityManager</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PersistenceContext</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EntityManager entityManager;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试entityManager用法</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">JsonProcessingException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testEntityManager</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//测试找到一个User对象</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entityManager.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(User.class,</span><span style="color:#005CC5;">2L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">(),</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//我们改变一下user的删除状态</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setDeleted</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//merger方法</span></span>
<span class="line"><span style="color:#24292E;">        entityManager.</span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//更新到数据库里面</span></span>
<span class="line"><span style="color:#24292E;">        entityManager.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//再通过createQuery创建一个JPQL，进行查询</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  entityManager.</span><span style="color:#6F42C1;">createQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u From User u where u.name=?1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setParameter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getResultList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(users.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getDeleted</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过这个测试用例，可以知道 EntityManager 使用起来还是比较容易的。不过在实际工作中，我不建议直接操作 EntityManager，因为如果你操作不熟练的话，会出现一些事务异常。因此我还是建议你通过 Spring Data JPA 给我们提供的 Repositories 方式进行操作。</p><p>提示一下，你在写框架的时候可以直接操作 EntityManager，<strong>切记不要在任何业务代码里面都用到 EntityManager，否则自己的代码到最后就会很难维护</strong>。</p><p>EntityManager 我们了解完了，那么我们再看下 @EnableJpaRepositories 对自定义 Repository 起了什么作用。</p><h3 id="enablejparepositories-详解" tabindex="-1">@EnableJpaRepositories 详解 <a class="header-anchor" href="#enablejparepositories-详解" aria-label="Permalink to &quot;@EnableJpaRepositories 详解&quot;">​</a></h3><p>下面分别从 @EnableJpaRepositories 的语法，以及其默认加载方式来详细介绍一下。</p><h4 id="enablejparepositories-语法" tabindex="-1">@EnableJpaRepositories 语法 <a class="header-anchor" href="#enablejparepositories-语法" aria-label="Permalink to &quot;@EnableJpaRepositories 语法&quot;">​</a></h4><p>我们还是直接看代码，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">basePackages</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">basePackageClasses</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">Filter</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">includeFilters</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">Filter</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">excludeFilters</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">repositoryImplementationPostfix</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Impl&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">namedQueriesLocation</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Key </span><span style="color:#B392F0;">queryLookupStrategy</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Key.CREATE_IF_NOT_FOUND;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">repositoryFactoryBeanClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> JpaRepositoryFactoryBean.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">repositoryBaseClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> DefaultRepositoryBaseClass.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">entityManagerFactoryRef</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;entityManagerFactory&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">transactionManagerRef</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;transactionManager&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">considerNestedRepositories</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enableDefaultTransactions</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">basePackages</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">basePackageClasses</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">Filter</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">includeFilters</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">Filter</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">excludeFilters</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">repositoryImplementationPostfix</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Impl&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">namedQueriesLocation</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   Key </span><span style="color:#6F42C1;">queryLookupStrategy</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Key.CREATE_IF_NOT_FOUND;</span></span>
<span class="line"><span style="color:#24292E;">   Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">repositoryFactoryBeanClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> JpaRepositoryFactoryBean.class;</span></span>
<span class="line"><span style="color:#24292E;">   Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">repositoryBaseClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> DefaultRepositoryBaseClass.class;</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">entityManagerFactoryRef</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;entityManagerFactory&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">transactionManagerRef</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;transactionManager&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">considerNestedRepositories</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enableDefaultTransactions</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面我对里面的 10 个方法进行一下具体说明：</p><p><strong>1）value 等于 basePackage</strong></p><p>用于配置扫描 Repositories 所在的 package 及子 package。</p><p>可以配置为单个字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;com.example&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;com.example&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>也可以配置为字符串数组形式，即多个情况。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;com.sample.repository1&quot;</span><span style="color:#E1E4E8;">, 	</span><span style="color:#9ECBFF;">&quot;com.sample.repository2&quot;</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;com.sample.repository1&quot;</span><span style="color:#24292E;">, 	</span><span style="color:#032F62;">&quot;com.sample.repository2&quot;</span><span style="color:#24292E;">})</span></span></code></pre></div><p>默认 @SpringBootApplication 注解出现目录及其子目录。</p><p><strong>2）basePackageClasses</strong></p><p>指定 Repository 类所在包，可以替换 basePackage 的使用。</p><p>一样可以单个字符，下面例子表示 BookRepository.class 所在 Package 下面的所有 Repositories 都会被扫描注册。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackageClasses</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BookRepository.class)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackageClasses</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BookRepository.class)</span></span></code></pre></div><p>也可以多个字符，下面的例子代表 ShopRepository.class, OrganizationRepository.class 所在的 package下面的所有 Repositories 都会被扫描。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackageClasses</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {ShopRepository.class, OrganizationRepository.class})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackageClasses</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {ShopRepository.class, OrganizationRepository.class})</span></span></code></pre></div><p><strong>3）includeFilters</strong></p><p>指定包含的过滤器，该过滤器采用 ComponentScan 的过滤器，可以指定过滤器类型。</p><p>下面的例子表示只扫描带 Repository 注解的类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">( </span><span style="color:#79B8FF;">includeFilters</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{@</span><span style="color:#F97583;">ComponentScan.Filter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">FilterType.ANNOTATION, </span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Repository.class)})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">includeFilters</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{@</span><span style="color:#D73A49;">ComponentScan.Filter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">FilterType.ANNOTATION, </span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Repository.class)})</span></span></code></pre></div><p><strong>4）excludeFilters</strong></p><p>指定不包含过滤器，该过滤器也是采用 ComponentScan 的过滤器里面的类。</p><p>下面的例子表示，带 @Service 和 @Controller 注解的类，不用扫描进去，当我们的项目变大了之后可以加快应用的启动速度。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">excludeFilters</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{@</span><span style="color:#F97583;">ComponentScan.Filter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">FilterType.ANNOTATION, </span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Service.class),@</span><span style="color:#F97583;">ComponentScan.Filter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">FilterType.ANNOTATION, </span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Controller.class)})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">excludeFilters</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{@</span><span style="color:#D73A49;">ComponentScan.Filter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">FilterType.ANNOTATION, </span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Service.class),@</span><span style="color:#D73A49;">ComponentScan.Filter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">FilterType.ANNOTATION, </span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Controller.class)})</span></span></code></pre></div><p><strong>5）repositoryImplementationPostfix</strong></p><p>当我们自定义 Repository 的时候，约定的接口 Repository 的实现类的后缀是什么，默认是 Impl。例子我在下面详细讲解。</p><p><strong>6）namedQueriesLocation</strong></p><p>named SQL 存放的位置，默认为 META-INF/jpa-named-queries.properties</p><p>例子如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Todo.findBySearchTermNamedFile</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SELECT t FROM Table t WHERE </span><span style="color:#B392F0;">LOWER</span><span style="color:#E1E4E8;">(t.description) LIKE </span><span style="color:#B392F0;">LOWER</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">CONCAT</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">searchTerm, </span><span style="color:#9ECBFF;">&#39;%&#39;</span><span style="color:#E1E4E8;">)) ORDER BY t.title ASC</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Todo.findBySearchTermNamedFile</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SELECT t FROM Table t WHERE </span><span style="color:#6F42C1;">LOWER</span><span style="color:#24292E;">(t.description) LIKE </span><span style="color:#6F42C1;">LOWER</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">CONCAT</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">searchTerm, </span><span style="color:#032F62;">&#39;%&#39;</span><span style="color:#24292E;">)) ORDER BY t.title ASC</span></span></code></pre></div><p>这个你知道就行了，我建议不要用，因为它虽然功能很强大，但是，当我们使用了这么复杂的方法时，你需要想一想是否有更简单的方法。</p><p><strong>7）queryLookupStrategy</strong></p><p>构建条件查询的查找策略，包含三种方式：CREATE、USE_DECLARED_QUERY、CREATE_IF_NOT_FOUND。</p><p>正如我们前几课时介绍的：</p><ul><li><p>CREATE：按照接口名称自动构建查询方法，即我们前面说的 Defining Query Methods；</p></li><li><p>USE_DECLARED_QUERY：用 @Query 这种方式查询；</p></li><li><p>CREATE_IF_NOT_FOUND：如果有 @Query 注解，先以这个为准；如果不起作用，再用 Defining Query Methods；这个是默认的，基本不需要修改，我们知道就行了。</p></li></ul><p><strong>8）repositoryFactoryBeanClass</strong></p><p>指定生产 Repository 的工厂类，默认 JpaRepositoryFactoryBean。JpaRepositoryFactoryBean 的主要作用是以动态代理的方式，帮我们所有 Repository 的接口生成实现类。例如当我们通过断点，看到 UserRepository 的实现类是 SimpleJpaRepository 代理对象的时候，就是这个工厂类干的，一般我们很少会去改变这个生成代理的机制。</p><p><strong>9）entityManagerFactoryRef</strong></p><p>用来指定创建和生产 EntityManager 的工厂类是哪个，默认是 name=&quot;entityManagerFactory&quot; 的 Bean。一般用于多数据配置。</p><p><strong>10）Class&lt;?&gt; repositoryBaseClass()</strong></p><p>用来指定我们自定义的 Repository 的实现类是什么。默认是 DefaultRepositoryBaseClass，即表示没有指定的 Repository 的实现基类。</p><p><strong>11）String transactionManagerRef() default &quot;transactionManager&quot;</strong></p><p>用来指定默认的事务处理是哪个类，默认是 transactionManager，一般用于多数据源。</p><p>以上就是 @EnableJpaRepositories 的基本语法了，涉及的方法比较多，你可以慢慢探索。下面再看看默认是怎么加载的。</p><h4 id="enablejparepositories-默认加载方式" tabindex="-1">@EnableJpaRepositories 默认加载方式 <a class="header-anchor" href="#enablejparepositories-默认加载方式" aria-label="Permalink to &quot;@EnableJpaRepositories 默认加载方式&quot;">​</a></h4><p>默认情况下是 spring boot 的自动加载机制，通过 spring.factories 的文件加载 JpaRepositoriesAutoConfiguration，如下图：</p>`,64),u=s("p",null,"JpaRepositoriesAutoConfiguration 里面再进行 @Import(JpaRepositoriesRegistrar.class) 操作，显示如下：",-1),A=s("p",null,"而 JpaRepositoriesRegistrar.class 里面配置了 @EnableJpaRepositories，从而使默认值产生了如下效果：",-1),C=l(`<p>这样关于 @EnableJpaRepositories 的语法以及默认加载方式就介绍完了，你就可以知道通过 @EnableJpaRepositories 可以完成很多我们自定义的需求。那么到底如何定义自己的 Repository 的实现类呢？我们接着看。</p><h3 id="自定义-repository-的-impl-的方法" tabindex="-1">自定义 Repository 的 impl 的方法 <a class="header-anchor" href="#自定义-repository-的-impl-的方法" aria-label="Permalink to &quot;自定义 Repository 的 impl 的方法&quot;">​</a></h3><p>定义自己的 Repository 的实现，有以下两种方法。</p><h4 id="第一种方法-定义独立的-repository-的-impl-实现类" tabindex="-1">第一种方法：定义独立的 Repository 的 Impl 实现类 <a class="header-anchor" href="#第一种方法-定义独立的-repository-的-impl-实现类" aria-label="Permalink to &quot;第一种方法：定义独立的 Repository 的 Impl 实现类&quot;">​</a></h4><p>我们通过一个实例说明一下，假设我们要实现一个逻辑删除的功能，看看应该怎么做？</p><p><strong>第一步：定义一个 CustomizedUserRepository 接口。</strong></p><p>此接口会自动被 @EnableJpaRepositories 开启之后扫描到，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.customized;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomizedUserRepository</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    User </span><span style="color:#B392F0;">logicallyDelete</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.customized;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomizedUserRepository</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    User </span><span style="color:#6F42C1;">logicallyDelete</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第二步：创建一个 CustomizedUserRepositoryImpl 实现类。</strong></p><p>并且实现类用我们上面说过的 Impl 结尾，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.customized;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.EntityManager;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomizedUserRepositoryImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomizedUserRepository</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EntityManager entityManager;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomizedUserRepositoryImpl</span><span style="color:#E1E4E8;">(EntityManager </span><span style="color:#FFAB70;">entityManager</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entityManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entityManager;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">logicallyDelete</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">setDeleted</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> entityManager.</span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.customized;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.EntityManager;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomizedUserRepositoryImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomizedUserRepository</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EntityManager entityManager;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomizedUserRepositoryImpl</span><span style="color:#24292E;">(EntityManager </span><span style="color:#E36209;">entityManager</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.entityManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entityManager;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">logicallyDelete</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setDeleted</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> entityManager.</span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中我们也发现了 EntityManager 的第二种注入方式，即直接放在构造方法里面，通过 Spring 自动注入。</p><p><strong>第三步：当用到 UserRepository 的时候，直接继承我们自定义的 CustomizedUserRepository 接口即可。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">JpaSpecificationExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">CustomizedUserRepository</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">JpaSpecificationExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">CustomizedUserRepository</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第四步：写一个测试用例测试一下。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCustomizedUserRepository</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//查出来一个User对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//调用我们的逻辑删除方法进行删除</span></span>
<span class="line"><span style="color:#E1E4E8;">    userRepository.</span><span style="color:#B392F0;">logicallyDelete</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//我们再重新查出来，看看值变了没有</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(users.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getDeleted</span><span style="color:#E1E4E8;">(),Boolean.TRUE);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCustomizedUserRepository</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//查出来一个User对象</span></span>
<span class="line"><span style="color:#24292E;">    User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//调用我们的逻辑删除方法进行删除</span></span>
<span class="line"><span style="color:#24292E;">    userRepository.</span><span style="color:#6F42C1;">logicallyDelete</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//我们再重新查出来，看看值变了没有</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(users.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getDeleted</span><span style="color:#24292E;">(),Boolean.TRUE);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后调用刚才我们自定义的逻辑删除方法 logicallyDelete，跑一下测试用例，结果完全通过。那么此种方法的实现原理是什么呢？我们通过 debug 分析一下。</p><h4 id="原理分析" tabindex="-1">原理分析 <a class="header-anchor" href="#原理分析" aria-label="Permalink to &quot;原理分析&quot;">​</a></h4><p>我们在上面讲过 Class&lt;?&gt; repositoryFactoryBeanClass() default JpaRepositoryFactoryBean.class，repository 的动态代理创建工厂是： JpaRepositoryFactoryBean，它会帮我们生产 repository 的实现类，那么我们直接看一下JpaRepositoryFactoryBean 的源码，分析其原理。</p>`,19),m=s("p",null,"设置一个断点，就会发现，每个 Repository 都会构建一个 JpaRepositoryFactory，当 JpaRepositoryFactory 加载完之后会执行 afterPropertiesSet() 方法，找到 UserRepository 的 Fragment（即我们自定义的 CustomizedUserRepositoryImpl），如下所示：",-1),D=s("p",null,"我们再看 RepositoryFactory 里面的所有方法，如下图，一看就是动态代理生成 Repository 的实现类，我们进到这个方法里面设置个断点继续观察。",-1),h=s("p",null,"然后我们通过断点可以看到，fragments 放到了 composition 里面，最后又放到了 advice 里面，最后才生成了我们的 repository 的代理类。这时我们再打开 repository 详细地看看里面的值。",-1),b=s("p",null,"可以看到 repository 里面的 interfaces，就是我们刚才测试 userRepository 里面的接口定义的。",-1),R=l(`<p>我们可以看到 advisors 里面第六个就是我们自定义的接口的实现类，从这里可以得出结论：spring 通过扫描所有 repository 的接口和实现类，并且通过 aop 的切面和动态代理的方式，可以知道我们自定义的接口的实现类是什么。</p><p>针对不同的 repository 自定义的接口和实现类，需要我们手动去 extends，这种比较适合不同的业务场景有各自的 repository 的实现情况。还有一种方法是我们直接改变动态代理的实现类，我们接着看。</p><h4 id="第二种方法-通过-enablejparepositories-定义默认的-repository-的实现类" tabindex="-1">第二种方法：通过 @EnableJpaRepositories 定义默认的 Repository 的实现类 <a class="header-anchor" href="#第二种方法-通过-enablejparepositories-定义默认的-repository-的实现类" aria-label="Permalink to &quot;第二种方法：通过 @EnableJpaRepositories 定义默认的 Repository 的实现类&quot;">​</a></h4><p>当面对复杂业务的时候，难免会自定义一些公用的方法，或者覆盖一些默认实现的情况。举个例子：很多时候线上的数据是不允许删除的，所以这个时候需要我们覆盖 SimpleJpaRepository 里面的删除方法，换成更新，进行逻辑删除，而不是物理删除。那么接下来我们看看应该怎么做？</p><p><strong>第一步：正如上面我们讲的利用 @EnableJpaRepositories 指定 repositoryBaseClass</strong>，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableWebMvc</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">repositoryImplementationPostfix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Impl&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">repositoryBaseClass</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CustomerBaseRepository.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(JpaApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableWebMvc</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">repositoryImplementationPostfix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Impl&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">repositoryBaseClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CustomerBaseRepository.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(JpaApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看出，在启动项目的时候，通过 @EnableJpaRepositories 指定我们 repositoryBaseClass 的基类是 CustomerBaseRepository。</p><p><strong>第二步：创建 CustomerBaseRepository 继承 SimpleJpaRepository 即可。</strong></p><p>继承 SimpleJpaRepository 之后，我们直接覆盖 delete 方法即可，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.customized;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.support.JpaEntityInformation;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.support.SimpleJpaRepository;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.transaction.annotation.Transactional;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.EntityManager;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">readOnly</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerBaseRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">BaseEntity</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleJpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt;  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> JpaEntityInformation&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; entityInformation;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EntityManager em;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerBaseRepository</span><span style="color:#E1E4E8;">(JpaEntityInformation&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entityInformation</span><span style="color:#E1E4E8;">, EntityManager </span><span style="color:#FFAB70;">entityManager</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(entityInformation, entityManager);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entityInformation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entityInformation;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.em </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entityManager;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerBaseRepository</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">domainClass</span><span style="color:#E1E4E8;">, EntityManager </span><span style="color:#FFAB70;">em</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(domainClass, em);</span></span>
<span class="line"><span style="color:#E1E4E8;">        entityInformation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.em </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> em;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//覆盖删除方法，实现逻辑删除，换成更新方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        entity.</span><span style="color:#B392F0;">setDeleted</span><span style="color:#E1E4E8;">(Boolean.TRUE);</span></span>
<span class="line"><span style="color:#E1E4E8;">        em.</span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(entity);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.customized;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.support.JpaEntityInformation;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.support.SimpleJpaRepository;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.transaction.annotation.Transactional;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.EntityManager;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">readOnly</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerBaseRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">BaseEntity</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleJpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt;  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> JpaEntityInformation&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; entityInformation;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EntityManager em;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerBaseRepository</span><span style="color:#24292E;">(JpaEntityInformation&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entityInformation</span><span style="color:#24292E;">, EntityManager </span><span style="color:#E36209;">entityManager</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(entityInformation, entityManager);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.entityInformation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entityInformation;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.em </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entityManager;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerBaseRepository</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">domainClass</span><span style="color:#24292E;">, EntityManager </span><span style="color:#E36209;">em</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(domainClass, em);</span></span>
<span class="line"><span style="color:#24292E;">        entityInformation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.em </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> em;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//覆盖删除方法，实现逻辑删除，换成更新方法</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        entity.</span><span style="color:#6F42C1;">setDeleted</span><span style="color:#24292E;">(Boolean.TRUE);</span></span>
<span class="line"><span style="color:#24292E;">        em.</span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(entity);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要注意的是，这里需要覆盖父类的构造方法，接收 EntityManager，并赋值给自己类里面的私有变量。</p><p><strong>第三步：写一个测试用例测试一下。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCustomizedBaseRepository</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    userRepository.</span><span style="color:#B392F0;">logicallyDelete</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    userRepository.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(users.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getDeleted</span><span style="color:#E1E4E8;">(),Boolean.TRUE);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCustomizedBaseRepository</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    userRepository.</span><span style="color:#6F42C1;">logicallyDelete</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    userRepository.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(users.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getDeleted</span><span style="color:#24292E;">(),Boolean.TRUE);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以发现，我们执行完&quot;删除&quot;之后，数据库里面的 User 还在，只不过 deleted，变成了已删除状态。那么这是为什么呢？我们分析一下原理。</p><h4 id="原理分析-1" tabindex="-1">原理分析 <a class="header-anchor" href="#原理分析-1" aria-label="Permalink to &quot;原理分析&quot;">​</a></h4><p>还是打开 RepositoryFactory 里面的父类方法，它会根据 @EnableJpaRepositories 里面我们配置的 repositoryBaseClass，加载我们自定义的实现类，关键方法如下：</p>`,16),B=s("p",null,"我们还看刚才的方法的断点，如下：",-1),v=l(`<p>可以看到 information 已经变成了我们扩展的基类了，而最终生成的 repository 的实现类也换成了 CustomerBaseRepository。</p><p>自定义的方法，我们讲完了，那么它都会在哪些实际场景用到呢？接着看一下。</p><h3 id="实际应用场景是什么" tabindex="-1">实际应用场景是什么？ <a class="header-anchor" href="#实际应用场景是什么" aria-label="Permalink to &quot;实际应用场景是什么？&quot;">​</a></h3><p>在实际工作中，有哪些场景会用到自定义 Repository 呢？</p><ol><li><p>首先肯定是我们做框架的时候、解决一些通用问题的时候，如逻辑删除，正如我们上面的实例所示的样子。</p></li><li><p>在实际生产中经常会有这样的场景：对外暴露的是 UUID 查询方法，而对内暴露的是 Long 类型的 ID，这时候我们就可以自定义一个 FindByIdOrUUID 的底层实现方法，可以选择在自定义的 Respository 接口里面实现。</p></li><li><p>Defining Query Methods 和 @Query 满足不了我们的查询，但是我们又想用它的方法语义的时候，就可以考虑实现不同的 Respository 的实现类，来满足我们不同业务场景的复杂查询。我见过有团队这样用过，不过个人感觉一般用不到，如果你用到了说明你的代码肯定有优化空间，代码不应该过于复杂。</p></li></ol><p>上面我们讲到了逻辑删除，还有一个是利用 @SQLDelete 也可以做到，用法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SQLDelete</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sql</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;UPDATE user SET deleted = true where deleted =false and id = ?&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SQLDelete</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sql</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;UPDATE user SET deleted = true where deleted =false and id = ?&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">....</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个时候不需要我们自定义 Respository 也可做到，这个方法的优点就是灵活，而缺点就是需要我们一个一个配置在实体上面。你可以根据实际场景自由选择方式。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>到这里，本课时的内容也介绍完了。我们通过介绍 EntityManager 和 @EnableJpaRepositories，实现了我们自定义 Repository 的两种方法，你可以学习一下我的分析问题思路，进而应用到自身，学会举一反三。</p><p>也希望你踊跃留言，我们一起讨论，一起进步。下一课时我要讲讲实战过程中，我们的基类应该如何设计。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,12);function f(k,_,T,q,M,S){const n=e("Image");return t(),r("div",null,[y,E,i,F,g,p(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/60/71/CgqCHl-NSiyAayfKAAd_nCX2604232.png"}),a(),d,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/60/71/CgqCHl-NSnqAe4i7AAHNYXt2Rbo960.png"}),a(),u,p(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/60/66/Ciqc1F-NSoOAZLC9AAFKgEB_ZbM671.png"}),a(),A,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/60/66/Ciqc1F-NSoqAC5SBAAGV8mrWK7o741.png"}),a(),C,p(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/60/72/CgqCHl-NSq6AFAjuAAD93443waY861.png"}),a(),m,p(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/60/72/CgqCHl-NSrSAZj08AALzEQG8Sws504.png"}),a(),D,p(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/60/72/CgqCHl-NSrmANrzIAALtqlmUVEE696.png"}),a(),h,p(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/60/72/CgqCHl-NSr-AfcXSAAQrh_gENO8150.png"}),a(),b,p(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/60/66/Ciqc1F-NSsaAeUC3AALLvvFPRrM408.png"}),a(),R,p(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/60/67/Ciqc1F-NS0KACTP-AAHMT_HqmJA240.png"}),a(),B,p(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/60/67/Ciqc1F-NS0iAQ1eDAAFzL2qkapU450.png"}),a(),v])}const j=o(c,[["render",f]]);export{U as __pageData,j as default};
