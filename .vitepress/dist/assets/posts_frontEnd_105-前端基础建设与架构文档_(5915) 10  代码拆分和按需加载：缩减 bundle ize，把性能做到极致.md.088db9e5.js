import{_ as o,j as t,o as e,g as c,k as a,h as p,s,Q as l}from"./chunks/framework.e0c66c3f.js";const _=JSON.parse('{"title":"代码拆分和按需加载场景 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5915) 10  代码拆分和按需加载：缩减 bundle ize，把性能做到极致.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5915) 10  代码拆分和按需加载：缩减 bundle ize，把性能做到极致.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5915) 10  代码拆分和按需加载：缩减 bundle ize，把性能做到极致.md"},E=s("p",null,"这一讲，我们将对代码拆分和按需加载这一话题进行解析。",-1),y=s("p",null,"随着 Webpack 等构建工具的能力越来越强，开发者在构建阶段可以随心所欲打造项目流程，代码拆分和按需加载技术在业界曝光量也越来越高。事实上，代码拆分和按需加载的设计决定着工程化构建的结果，这将直接影响应用的性能表现，因为合理的加载时机和代码拆分能够使初始代码体积更小，页面加载更快。因此，如何合理设计代码拆分和按需加载，是对一个项目架构情况的直接考量。",-1),i=s("p",null,"下面我们从代码拆分和按需加载的场景入手，一同体会这一技术手段的必要性和业务价值。",-1),u=s("h3",{id:"代码拆分和按需加载场景",tabindex:"-1"},[p("代码拆分和按需加载场景 "),s("a",{class:"header-anchor",href:"#代码拆分和按需加载场景","aria-label":'Permalink to "代码拆分和按需加载场景"'},"​")],-1),d=s("p",null,"我们来看一个案例。如下图所示场景：点击左图播放按钮后，页面出现视频列表浮层（如右侧图所示，类似单页应用，视频列表仍为同一页面）。视频列表浮层包含了滚动处理、视频播放等多项复杂逻辑，因此这个浮层对应的脚本在页面初始化时，不需要被加载。那么在工程上，我们需要对视频浮层脚本单独进行拆分，和初始化脚本进行分离。当用户点击浮层触发按钮后，执行某一单独部分脚本的请求。",-1),F=l(`<p>这其实是一个我接手并重构过的真实线上案例，通过后期对页面交互的统计数据分析发现，用户点击触发视频浮层出现按钮的概率只有 10% 左右。也就是说，大部分用户（90%）并不会看到这一浮层，也就不需要对相关脚本进行加载执行，因此延迟按需加载设计是有统计数据支持的。现在你已经了解了这个场景，下面我们从技术环节详细展开。</p><h3 id="代码拆分和按需技术实现" tabindex="-1">代码拆分和按需技术实现 <a class="header-anchor" href="#代码拆分和按需技术实现" aria-label="Permalink to &quot;代码拆分和按需技术实现&quot;">​</a></h3><h4 id="按需加载和按需打包区分" tabindex="-1">按需加载和按需打包区分 <a class="header-anchor" href="#按需加载和按需打包区分" aria-label="Permalink to &quot;按需加载和按需打包区分&quot;">​</a></h4><p>从技术角度介绍按需加载概念前，我们需要先和另外一个概念：<strong>按需打包</strong>，进行区分。事实上，当前社区对于按需加载和按需打包并没有一个准确的命名上的划分约定。因此从两者命名上，难以区分其实际含义。</p><p>其实，<strong>按需加载表示代码模块在交互需要时，动态引入</strong> ；而<strong>按需打包针对第三方依赖库，及业务模块，只打包真正在运行时可能会需要的代码</strong>。</p><p>我们不妨先说明按需打包的概念和实施方法，目前按需打包一般通过两种方式进行：</p><ul><li><p>使用 ES Module 支持的 Tree Shaking 方案，在使用构建工具打包时，完成按需打包；</p></li><li><p>使用以<code>babel-plugin-import</code>为主的 Babel 插件，实现自动按需打包 。</p></li></ul><p><strong>Tree Shaking 实现按需打包</strong></p><p>我们来看一个场景，假设业务中使用 antd 的 Button 组件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } from &#39;antd&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button } from &#39;antd&#39;;</span></span></code></pre></div><p>这样的引用，会使得最终打包的代码中包含所有 antd 导出来的内容。假设应用中并没有使用 antd 提供的 TimePicker 组件，那么对于打包结果来说，无疑增加了代码体积。在这种情况下，如果组件库提供了 ES Module 版本，并开启了 Tree Shaking，我们就可以通过&quot;摇树&quot;特性，将不会被使用的代码在构建阶段移除。</p><p>Webpack 可以在 package.json 中设置<code>sideEffects: false</code>。我们在 <a href="https://github.com/ant-design/ant-design/blob/master/package.json#L38" target="_blank" rel="noreferrer">antd 源码</a>当中可以找到（<a href="https://github.com/ant-design/ant-design/pull/10043" target="_blank" rel="noreferrer">相关 chore commit</a>）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;sideEffects&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;dist/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;es/**/style/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;lib/**/style/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;*.less&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">],</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;sideEffects&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;dist/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;es/**/style/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;lib/**/style/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;*.less&quot;</span></span>
<span class="line"><span style="color:#24292E;">],</span></span></code></pre></div><p>指定副作用模块------这是一种值得推荐的开发习惯，建议你注意 Tree Shaking 的使用，最好实际观察一下打包结果。</p><p><strong>学习编写 Babel 插件，实现按需打包</strong></p><p>如果第三方库不支持 Tree Shaking，我们依然可以<strong>通过 Babel 插件，改变业务代码中对模块的引用路径</strong>来实现按需打包。</p><p>比如 <a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noreferrer">babel-plugin-import</a> 这个插件，它是 antd 团队推出的一个 Babel 插件，我们通过一个例子来理解它的原理，比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {Button as Btn,Input,TimePicker,ConfigProvider,Haaaa} from &#39;antd&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {Button as Btn,Input,TimePicker,ConfigProvider,Haaaa} from &#39;antd&#39;</span></span></code></pre></div><p>这样的代码就可以被编译为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> _ConfigProvider from &quot;antd/lib/config</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">provider&quot;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> _Button from &quot;antd/lib/button&quot;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> _Input from &quot;antd/lib/input&quot;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> _TimePicker from &quot;antd/lib/time</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">picker&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> _ConfigProvider from &quot;antd/lib/config</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">provider&quot;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> _Button from &quot;antd/lib/button&quot;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> _Input from &quot;antd/lib/input&quot;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> _TimePicker from &quot;antd/lib/time</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">picker&quot;;</span></span></code></pre></div><p>编写一个类似的 Babel 插件也不是一件难事，Babel 插件核心依赖于对 AST 的解析和操作。它本质上就是一个函数，在 Babel 对 AST 语法树进行转换的过程中介入，通过相应的操作，最终让生成的结果发生改变。</p><p>Babel 已经内置了几个核心分析、操作 AST 的工具集，Babel 插件通过<strong>观察者 + 访问者模式</strong>，对 AST 节点统一遍历，因此具备了良好的扩展性和灵活性。比如这段代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {Button as Btn, Input} from &#39;antd&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {Button as Btn, Input} from &#39;antd&#39;</span></span></code></pre></div><p>这样的代码，经过 Babel AST 分析后，得到结构：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ImportDeclaration&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;specifiers&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ImportSpecifier&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;imported&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;loc&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;identifierName&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Button&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Button&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;importKind&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;local&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;loc&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;identifierName&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Btn&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Btn&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ImportSpecifier&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;imported&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;loc&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;identifierName&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Input&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Input&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;importKind&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;local&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;start&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;end&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">28</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;loc&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;identifierName&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Input&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Input&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;importKind&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;source&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;StringLiteral&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;antd&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ImportDeclaration&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;specifiers&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ImportSpecifier&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;imported&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Identifier&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;loc&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;identifierName&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Button&quot;</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Button&quot;</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;importKind&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;local&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Identifier&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;loc&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;identifierName&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Btn&quot;</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Btn&quot;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ImportSpecifier&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;imported&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Identifier&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;loc&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;identifierName&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Input&quot;</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Input&quot;</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;importKind&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;local&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Identifier&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;start&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;loc&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;identifierName&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Input&quot;</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Input&quot;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;importKind&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;source&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;StringLiteral&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;antd&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过上述结构，我们很容易实现遍历 specifiers 属性，至于更改最后代码的 import 部分，你可以参考 <a href="https://github.com/ant-design/babel-plugin-import/blob/master/src/Plugin.js" target="_blank" rel="noreferrer">babel-plugin-import 相关处理逻辑</a>。</p><p>首先通过<code>buildExpressionHandler</code>方法对 import 路径进行改写：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">buildExpressionHandler</span><span style="color:#E1E4E8;">(node, props, path, state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (path </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> path.hub </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> path.hub.file) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (state </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> state.file);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { types } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> pluginState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getPluginState</span><span style="color:#E1E4E8;">(state);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 进行遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">    props.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(prop </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">types.</span><span style="color:#B392F0;">isIdentifier</span><span style="color:#E1E4E8;">(node[prop])) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        pluginState.specified[node[prop].name] </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        types.</span><span style="color:#B392F0;">isImportSpecifier</span><span style="color:#E1E4E8;">(path.scope.</span><span style="color:#B392F0;">getBinding</span><span style="color:#E1E4E8;">(node[prop].name).path)</span></span>
<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 修改路径内容</span></span>
<span class="line"><span style="color:#E1E4E8;">        node[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">importMethod</span><span style="color:#E1E4E8;">(pluginState.specified[node[prop].name], file, pluginState); </span><span style="color:#6A737D;">// eslint-disable-line</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">buildExpressionHandler</span><span style="color:#24292E;">(node, props, path, state) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (path </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> path.hub </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> path.hub.file) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (state </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> state.file);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { types } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> pluginState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getPluginState</span><span style="color:#24292E;">(state);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 进行遍历</span></span>
<span class="line"><span style="color:#24292E;">    props.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(prop </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">types.</span><span style="color:#6F42C1;">isIdentifier</span><span style="color:#24292E;">(node[prop])) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        pluginState.specified[node[prop].name] </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        types.</span><span style="color:#6F42C1;">isImportSpecifier</span><span style="color:#24292E;">(path.scope.</span><span style="color:#6F42C1;">getBinding</span><span style="color:#24292E;">(node[prop].name).path)</span></span>
<span class="line"><span style="color:#24292E;">      ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 修改路径内容</span></span>
<span class="line"><span style="color:#24292E;">        node[prop] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">importMethod</span><span style="color:#24292E;">(pluginState.specified[node[prop].name], file, pluginState); </span><span style="color:#6A737D;">// eslint-disable-line</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>buildExpressionHandler</code>方法依赖<code>importMethod</code>方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">importMethod</span><span style="color:#E1E4E8;">(methodName, file, pluginState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pluginState.selectedMethods[methodName]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { style, libraryDirectory } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取执行方法名</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> transformedMethodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.camel2UnderlineComponentName </span><span style="color:#6A737D;">// eslint-disable-line</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transCamel</span><span style="color:#E1E4E8;">(methodName, </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.camel2DashComponentName</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transCamel</span><span style="color:#E1E4E8;">(methodName, </span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> methodName;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取相应路径</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">winPath</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.customName</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">customName</span><span style="color:#E1E4E8;">(transformedMethodName, file)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.libraryName, libraryDirectory, transformedMethodName, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fileName), </span><span style="color:#6A737D;">// eslint-disable-line</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">      pluginState.selectedMethods[methodName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.transformToDefaultImport </span><span style="color:#6A737D;">// eslint-disable-line</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addDefault</span><span style="color:#E1E4E8;">(file.path, path, { nameHint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> methodName })</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addNamed</span><span style="color:#E1E4E8;">(file.path, methodName, path);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.customStyleName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> stylePath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">winPath</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">customStyleName</span><span style="color:#E1E4E8;">(transformedMethodName));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addSideEffect</span><span style="color:#E1E4E8;">(file.path, \`\${stylePath}\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.styleLibraryDirectory) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> stylePath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">winPath</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.libraryName, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.styleLibraryDirectory, transformedMethodName, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fileName),</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addSideEffect</span><span style="color:#E1E4E8;">(file.path, \`\${stylePath}\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (style </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addSideEffect</span><span style="color:#E1E4E8;">(file.path, \`\${path}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">style\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (style </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;css&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addSideEffect</span><span style="color:#E1E4E8;">(file.path, \`\${path}</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">style</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">css\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof style </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> stylePath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">(path, file);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stylePath) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">addSideEffect</span><span style="color:#E1E4E8;">(file.path, stylePath);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { ...pluginState.selectedMethods[methodName] };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">importMethod</span><span style="color:#24292E;">(methodName, file, pluginState) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pluginState.selectedMethods[methodName]) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { style, libraryDirectory } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取执行方法名</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> transformedMethodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.camel2UnderlineComponentName </span><span style="color:#6A737D;">// eslint-disable-line</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transCamel</span><span style="color:#24292E;">(methodName, </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.camel2DashComponentName</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transCamel</span><span style="color:#24292E;">(methodName, </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> methodName;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取相应路径</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">winPath</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.customName</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">customName</span><span style="color:#24292E;">(transformedMethodName, file)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.libraryName, libraryDirectory, transformedMethodName, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fileName), </span><span style="color:#6A737D;">// eslint-disable-line</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">      pluginState.selectedMethods[methodName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.transformToDefaultImport </span><span style="color:#6A737D;">// eslint-disable-line</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addDefault</span><span style="color:#24292E;">(file.path, path, { nameHint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> methodName })</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addNamed</span><span style="color:#24292E;">(file.path, methodName, path);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.customStyleName) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> stylePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">winPath</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">customStyleName</span><span style="color:#24292E;">(transformedMethodName));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSideEffect</span><span style="color:#24292E;">(file.path, \`\${stylePath}\`);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.styleLibraryDirectory) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> stylePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">winPath</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.libraryName, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.styleLibraryDirectory, transformedMethodName, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fileName),</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSideEffect</span><span style="color:#24292E;">(file.path, \`\${stylePath}\`);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (style </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSideEffect</span><span style="color:#24292E;">(file.path, \`\${path}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">style\`);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (style </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;css&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSideEffect</span><span style="color:#24292E;">(file.path, \`\${path}</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">style</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">css\`);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof style </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> stylePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">(path, file);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stylePath) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">addSideEffect</span><span style="color:#24292E;">(file.path, stylePath);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { ...pluginState.selectedMethods[methodName] };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>importMethod</code>方法调用了<code>@babel/helper-module-imports</code>中的<code>addSideEffect</code>方法执行路径的转换操作。<code>addSideEffect</code>方法在源码中通过实例化一个 Import Injector，并调用实例方法完成了 AST 转换，具体源码可以参考：<a href="https://github.com/babel/babel/blob/eea156b2cb8deecfcf82d52aa1b71ba4995c7d68/packages/babel-helper-module-imports/src/index.js" target="_blank" rel="noreferrer">babel-helper-module-imports</a>。</p><p>现在我们已经看完了按需加载打包内容，接下来，我们看看动态导入以及按需加载这个重要概念。</p><h4 id="重新认识-dynamic-import-动态导入" tabindex="-1">&quot;重新认识&quot; dynamic import（动态导入） <a class="header-anchor" href="#重新认识-dynamic-import-动态导入" aria-label="Permalink to &quot;&quot;重新认识&quot; dynamic import（动态导入）&quot;">​</a></h4><p>ES module 无疑在工程化方面给前端插上了一双起飞的翅膀。溯源历史我们发现：早期 import 是完全静态化的，而如今 dynamic import 的提案早已横空出世，目前已经进入了 stage 4 阶段。dynamic import 简单翻译为动态导入，从名字上看，我们就能知晓这个新特性和按需加载密不可分。但在深入讲解 dynamic import 之前，我想先从静态导入说起，以帮助你全方位地理解。</p><p><strong>静态导入的性能优劣</strong></p><p>标准用法的 import 属于静态导入，它只支持一个字符串类型的 module specifier（模块路径声明），这样的特性会使所有<strong>被 import 的模块在加载时就被编译</strong>。从某些角度看，这种做法对于绝大多数场景来说性能是友好的，因为这意味着对工程代码的静态分析成为可能，进而使得类似 tree-shaking 的技术有了应用空间。</p><p>但是对于一些特殊场景，静态导入也可能成为性能的短板，比如，当我们需要：</p><ul><li><p>按需加载一个模块；</p></li><li><p>按运行事件选定一个模块。</p></li></ul><p>此时，dynamic import 就变得尤为重要。比如在<strong>浏览器侧，根据用户的系统语言选择加载不同的语言模块，根据用户的操作去加载不同的内容逻辑</strong>。</p><p><a href="https://developer.mozilla.org/en-us/docs/web/javascript/reference/statements/import" target="_blank" rel="noreferrer">MDN 文档</a>中给出了 dynamic import 更具体的使用场景：</p><ul><li><p>静态导入的模块很明显降低了代码的加载速度且被使用的可能性很低，或者并不需要马上使用它；</p></li><li><p>静态导入的模块很明显占用了大量系统内存且被使用的可能性很低；</p></li><li><p>被导入的模块在加载时并不存在，需要异步获取；</p></li><li><p>导入模块的说明符，需要动态构建（静态导入只能使用静态说明符）；</p></li><li><p>被导入的模块有副作用（可以理解为模块中会直接运行的代码），这些副作用只有在触发某些条件时才被需要。</p></li></ul><p><strong>深入理解 dynamic import（动态导入）</strong></p><p>这里我们不再赘述 dynamic import 的标准用法，你可以从<a href="https://tc39.es/proposal-dynamic-import/#sec-import-calls" target="_blank" rel="noreferrer">官方规范</a>和 <a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noreferrer">tc39 proposal</a> 中找到最全面和原始的内容。</p><p>除了基础用法，我想从语言层面强调一个 Function-like 的概念。我们先看这样一段代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// html 部分</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">nav</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">a href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;books&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">Books</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">a href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;movies&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">Movies</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">a href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;video-games&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">Video Games</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">nav</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// script 部分</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取 element</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> contentEle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#content&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> links </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelectorAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;nav &gt; a&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 遍历绑定点击逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> link of links) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    link.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> (event) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      event.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> asyncScript </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(\`</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${link.dataset.scriptPath}.js\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 异步加载脚本</span></span>
<span class="line"><span style="color:#E1E4E8;">        asyncScript.</span><span style="color:#B392F0;">loadContentTo</span><span style="color:#E1E4E8;">(contentEle);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        contentEle.textContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`We got error</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \${error.message}\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// html 部分</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">nav</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">a href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;books&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">Books</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">a href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;movies&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">Movies</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">a href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;video-games&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">Video Games</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">nav</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// script 部分</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取 element</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> contentEle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#content&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> links </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;nav &gt; a&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 遍历绑定点击逻辑</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> link of links) {</span></span>
<span class="line"><span style="color:#24292E;">    link.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> (event) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      event.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> asyncScript </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(\`</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\${link.dataset.scriptPath}.js\`);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 异步加载脚本</span></span>
<span class="line"><span style="color:#24292E;">        asyncScript.</span><span style="color:#6F42C1;">loadContentTo</span><span style="color:#24292E;">(contentEle);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">        contentEle.textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`We got error</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \${error.message}\`;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>点击页面当中的 a 标签后，会动态加载一个模块，并调用模块定义的 loadContentTo 方法完成页面内容的填充。</p><p>表面上看，await import() 的用法使得 import 像一个函数，该函数通过 () 操作符调用并返回一个 Promise。事实上，<strong>dynamic import 只是一个 function like 的语法形式</strong>。在 ES class 特性中，super() 与 dynamic import 类似，也是一个 function like 语法形式。所以它和函数还是有着本质的区别，比如：</p><ul><li><p>dynamic import 并非继承自 Function.prototype，因此不能使用 Function 构造函数原型上的方法 impoort.call(null, <code>\${path}</code>)，调用它是不合法的；</p></li><li><p>dynamic import 并非继承自 Object.prototype，因此不能使用 Object 构造函数原型上的方法。</p></li></ul><p>虽然 dynamic import 并不是一个真正意义上的函数，但我们可以通过实现一个 dynamicImport 函数模式来实现 dynamic import，进一步加深对其语法特性的理解。</p><p><strong>实现一个 dynamic import（动态导入）</strong></p><p>dynamicImport 函数实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> importModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回一个新的 Promise 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">((resolve, reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建 script 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;script&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> tempGlobal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__tempModuleLoadingVariable&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    script.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    script.textContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`import </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> as m from </span><span style="color:#9ECBFF;">&quot;\${url}&quot;</span><span style="color:#E1E4E8;">; window.\${tempGlobal} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m;\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// load 回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    script.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(window[tempGlobal]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      delete window[tempGlobal];</span></span>
<span class="line"><span style="color:#E1E4E8;">      script.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// error 回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    script.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to load module script with URL &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> url));</span></span>
<span class="line"><span style="color:#E1E4E8;">      delete window[tempGlobal];</span></span>
<span class="line"><span style="color:#E1E4E8;">      script.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    document.documentElement.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(script);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> importModule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回一个新的 Promise 实例</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">((resolve, reject) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建 script 标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> tempGlobal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__tempModuleLoadingVariable&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    script.type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    script.textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`import </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> as m from </span><span style="color:#032F62;">&quot;\${url}&quot;</span><span style="color:#24292E;">; window.\${tempGlobal} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m;\`;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// load 回调</span></span>
<span class="line"><span style="color:#24292E;">    script.onload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(window[tempGlobal]);</span></span>
<span class="line"><span style="color:#24292E;">      delete window[tempGlobal];</span></span>
<span class="line"><span style="color:#24292E;">      script.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// error 回调</span></span>
<span class="line"><span style="color:#24292E;">    script.onerror </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to load module script with URL &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> url));</span></span>
<span class="line"><span style="color:#24292E;">      delete window[tempGlobal];</span></span>
<span class="line"><span style="color:#24292E;">      script.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    document.documentElement.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(script);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里，我们通过动态插入一个 script 标签实现对目标 script url 的加载，并通过将模块导出内容赋值给 window 对象。我们使用<code>__tempModuleLoadingVariable&quot; + Math.random().toString(32).substring(2) key</code>保证模块导出对象的命名不会出现冲突。</p><p>至此，我们对 dynamic import 的分析告一段落。总之，代码拆分和按需加载并不完全是工程化的实施，同时也要求对语言深刻掌握。</p><h3 id="webpack-赋能代码拆分和按需加载" tabindex="-1">Webpack 赋能代码拆分和按需加载 <a class="header-anchor" href="#webpack-赋能代码拆分和按需加载" aria-label="Permalink to &quot;Webpack 赋能代码拆分和按需加载&quot;">​</a></h3><p>通过前面的学习，我们了解了代码拆分和按需加载，学习了动态导入这一特性。接下来，我想请你思考，如何在代码中安全地使用动态导入而不用去过多关心浏览器的兼容情况，如何在工程环境中实现代码拆分和按需加载呢？</p><p>以最常见、最典型的前端构建工具------Webpack 为例，我们来分析如何在 Webpack 环境下支持代码拆分和按需加载。</p><p>总的来说，Webpack 提供了三种相关能力：</p><ul><li><p><strong>通过入口配置手动分割代码；</strong></p></li><li><p><strong>动态导入支持；</strong></p></li><li><p><strong>通过 splitChunk 插件提取公共代码（公共代码分割）</strong>。</p></li></ul><p>其中第一种是通过配置 Entry 来由开发者手动进行代码项目打包，与我们这节内容主题并不相关，就不展开讲解了。下面我们从动态导入和 splitChunk 插件进行详细解析。</p><h4 id="webpack-对-dynamic-import-能力支持" tabindex="-1">Webpack 对 dynamic import 能力支持 <a class="header-anchor" href="#webpack-对-dynamic-import-能力支持" aria-label="Permalink to &quot;Webpack 对 dynamic import 能力支持&quot;">​</a></h4><p>事实上，在 Webpack 早期版本中，提供了 require.ensure() 能力。请注意这是 Webpack 特有的实现：<strong>require.ensure() 能够将其参数对应的文件拆分到一个单独的 bundle 中，此 bundle 会被异步加载</strong>。</p><p>目前 require.ensure() 已经被符合 ES 规范的 dynamic import 取代。调用 import()，被请求的模块和它引用的所有子模块，会分离到一个单独的 chunk 中。值得学习的是，Webpack 对于 import() 的支持和处理非常&quot;巧妙&quot;，我们知道 ES 中关于 dynamic import 的规范，只接受一个参数，表示模块的路径：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(\`\${path}\`) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Promise</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(\`\${path}\`) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Promise</span></span></code></pre></div><p>但是 Webpack 是一个构建工具，Webpack 中对于 import() 的处理，可以通过注释接收一些特殊的参数，无须破坏 ES 对于 dynamic import 规定。比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* webpackChunkName: &quot;chunk-name&quot; */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* webpackMode: &quot;lazy&quot; */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;module&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* webpackChunkName: &quot;chunk-name&quot; */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* webpackMode: &quot;lazy&quot; */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;module&#39;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>Webpack 在构建时，可以读取到 import 参数，即便是参数内的注释部分，Webpack 也可以获取并处理。如上述代码，<code>webpackChunkName: &quot;chunk-name&quot;</code>表示自定义新 chunk 名称；<code>webpackMode: &quot;lazy&quot;</code>表示每个 import() 导入的模块，会生成一个可延迟加载（lazy-loadable） chunk。此外，webpackMode 的取值还可以是 lazy-once、eager、weak，具体含义可参考：<a href="https://www.webpackjs.com/api/module-methods/#import-" target="_blank" rel="noreferrer">Webpack import()</a>。</p><p>你可能很好奇：Webpack 在编译构建时，会如何处理代码中的 dynamic import 呢？下面，我们一探究竟。</p><p>index.js 文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./module&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((data) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./module&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((data) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>module.js 文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;moduleValue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> module</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;moduleValue&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> module</span></span></code></pre></div><p>我们配置入口文件为 index.js，输出文件为 bundle.js，简单的 Webpack 配置信息（webpack@4.44.2）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  output</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bundle.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>运行构建命令后，得到两个文件：</p><ul><li><p>0.bundle.js</p></li><li><p>bundle.js</p></li></ul><p>bundle.js 中对 index.js dynamic import 编译结果为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#6A737D;">/*!******************!*\\</span></span>
<span class="line"><span style="color:#6A737D;">  !*** ./index.js ***!</span></span>
<span class="line"><span style="color:#6A737D;">  \\******************/</span></span>
<span class="line"><span style="color:#6A737D;">/*! no static exports found */</span></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(module, exports, __webpack_require__) {</span></span>
<span class="line"><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;__webpack_require__.e(/*! import() */ 0).then(__webpack_require__.bind(null, /*! ./module */ </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">./module.js</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">)).then((data) =&gt; {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  console.log(data)</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">});</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack:///./index.js?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#6A737D;">/*!******************!*\\</span></span>
<span class="line"><span style="color:#6A737D;">  !*** ./index.js ***!</span></span>
<span class="line"><span style="color:#6A737D;">  \\******************/</span></span>
<span class="line"><span style="color:#6A737D;">/*! no static exports found */</span></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(module, exports, __webpack_require__) {</span></span>
<span class="line"><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;__webpack_require__.e(/*! import() */ 0).then(__webpack_require__.bind(null, /*! ./module */ </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">./module.js</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">)).then((data) =&gt; {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  console.log(data)</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">});</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack:///./index.js?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>由此可知，Webpack 对于业务中写到的 dynamic import 代码，会转换成了 Webpack 自己自定义的 webpack_require.e 函数，这个函数返回了一个 promise 数组，最终模拟出了动态导入的效果，webpack_require.e 源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 	</span><span style="color:#6A737D;">// This file contains only the entry chunk.</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 	</span><span style="color:#6A737D;">// The chunk loading function for additional chunks</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 	__webpack_require__.e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">requireEnsure</span><span style="color:#E1E4E8;">(chunkId) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> promises </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#6A737D;">// JSONP chunk loading for javascript</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedChunkData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedChunkData </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 0 means &quot;already installed&quot;.</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			</span><span style="color:#6A737D;">// a Promise means &quot;currently loading&quot;.</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedChunkData) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				promises.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunkData[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#6A737D;">// setup Promise in chunk cache</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> promise </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(resolve, reject) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					installedChunkData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [resolve, reject];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				});</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				promises.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunkData[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> promise);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#6A737D;">// start chunk loading</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> onScriptComplete;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				script.charset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				script.timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">120</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__webpack_require__.nc) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					script.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;nonce&quot;</span><span style="color:#E1E4E8;">, __webpack_require__.nc);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				script.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jsonpScriptSrc</span><span style="color:#E1E4E8;">(chunkId);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#6A737D;">// create error before stack unwound to get useful stacktrace later</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				onScriptComplete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (event) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					</span><span style="color:#6A737D;">// avoid mem leaks in IE.</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					script.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> script.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					</span><span style="color:#B392F0;">clearTimeout</span><span style="color:#E1E4E8;">(timeout);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> chunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(chunk </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 						</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(chunk) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 							</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> errorType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (event.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;load&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;missing&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> event.type);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 							</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> realSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> event.target </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> event.target.src;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 							error.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Loading chunk &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> chunkId </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; failed.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">(&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> errorType </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> realSrc </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 							error.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ChunkLoadError&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 							error.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errorType;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 							error.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realSrc;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 							chunk[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">](error);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 						}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 						installedChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> undefined;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				};</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 					</span><span style="color:#B392F0;">onScriptComplete</span><span style="color:#E1E4E8;">({ type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;timeout&#39;</span><span style="color:#E1E4E8;">, target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> script });</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				}, </span><span style="color:#79B8FF;">120000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				script.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> script.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onScriptComplete;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				document.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(script);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(promises);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 	};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 	</span><span style="color:#6A737D;">// This file contains only the entry chunk.</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 	</span><span style="color:#6A737D;">// The chunk loading function for additional chunks</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 	__webpack_require__.e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">requireEnsure</span><span style="color:#24292E;">(chunkId) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> promises </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#6A737D;">// JSONP chunk loading for javascript</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> installedChunkData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedChunks[chunkId];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(installedChunkData </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 0 means &quot;already installed&quot;.</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			</span><span style="color:#6A737D;">// a Promise means &quot;currently loading&quot;.</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(installedChunkData) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				promises.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(installedChunkData[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#6A737D;">// setup Promise in chunk cache</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> promise </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(resolve, reject) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					installedChunkData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedChunks[chunkId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [resolve, reject];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				});</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				promises.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(installedChunkData[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> promise);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#6A737D;">// start chunk loading</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> onScriptComplete;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				script.charset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				script.timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">120</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__webpack_require__.nc) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					script.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nonce&quot;</span><span style="color:#24292E;">, __webpack_require__.nc);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				script.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jsonpScriptSrc</span><span style="color:#24292E;">(chunkId);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#6A737D;">// create error before stack unwound to get useful stacktrace later</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				onScriptComplete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (event) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					</span><span style="color:#6A737D;">// avoid mem leaks in IE.</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					script.onerror </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> script.onload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					</span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timeout);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> chunk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedChunks[chunkId];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(chunk </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 						</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(chunk) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 							</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> errorType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (event.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;load&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;missing&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> event.type);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 							</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> realSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event.target </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event.target.src;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 							error.message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Loading chunk &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> chunkId </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; failed.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">(&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> errorType </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> realSrc </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;)&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 							error.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ChunkLoadError&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 							error.type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errorType;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 							error.request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realSrc;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 							chunk[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">](error);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 						}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 						installedChunks[chunkId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> undefined;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				};</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 					</span><span style="color:#6F42C1;">onScriptComplete</span><span style="color:#24292E;">({ type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;timeout&#39;</span><span style="color:#24292E;">, target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> script });</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				}, </span><span style="color:#005CC5;">120000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				script.onerror </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> script.onload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onScriptComplete;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(script);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(promises);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 	};</span></span></code></pre></div><p>代码已经非常直观，webpack_require.e 主要做了如下内容：</p><ul><li><p>定义一个 promise 数组 promises，最终以 Promise.all(promises) 形式返回；</p></li><li><p>通过 installedChunkData 变量判断当前模块是否已经被加载，如果已经加载过，将模块内容 push 到 promises 数组中；</p></li><li><p>如果当前模块没有被加载过，则先定义一个 promise，然后创建一个 script 标签，加载模块内容，并定义此 script 的 onload 和 onerror 回调；</p></li><li><p>最终对新增 script 标签对应的 promise （resolve/reject）处理定义在 webpackJsonpCallback 函数中。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 	function </span><span style="color:#B392F0;">webpackJsonpCallback</span><span style="color:#E1E4E8;">(data) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> chunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moreModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#6A737D;">// add &quot;moreModules&quot; to the modules object,</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#6A737D;">// then flag all &quot;chunkIds&quot; as loaded and fire callback</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		var moduleId, chunkId, i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, resolves </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> chunkIds.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			chunkId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkIds[i];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(Object.prototype.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(installedChunks, chunkId) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> installedChunks[chunkId]) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				resolves.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunks[chunkId][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			installedChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(moduleId in moreModules) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(Object.prototype.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(moreModules, moduleId)) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 				modules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moreModules[moduleId];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(parentJsonpFunction) </span><span style="color:#B392F0;">parentJsonpFunction</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(resolves.length) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 			resolves.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()();</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 		}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> 	};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 	function </span><span style="color:#6F42C1;">webpackJsonpCallback</span><span style="color:#24292E;">(data) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> chunkIds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moreModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#6A737D;">// add &quot;moreModules&quot; to the modules object,</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#6A737D;">// then flag all &quot;chunkIds&quot; as loaded and fire callback</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		var moduleId, chunkId, i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, resolves </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> chunkIds.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			chunkId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkIds[i];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(Object.prototype.hasOwnProperty.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(installedChunks, chunkId) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> installedChunks[chunkId]) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				resolves.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(installedChunks[chunkId][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			installedChunks[chunkId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(moduleId in moreModules) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(Object.prototype.hasOwnProperty.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(moreModules, moduleId)) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 				modules[moduleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moreModules[moduleId];</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(parentJsonpFunction) </span><span style="color:#6F42C1;">parentJsonpFunction</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(resolves.length) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 			resolves.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()();</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 		}</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;"> 	};</span></span></code></pre></div><p>完整的源码内容我们不再一一粘贴，你可以参考下图的整个处理流程：</p>`,84),m=l(`<p>webpack_require.e 处理流程图</p><h4 id="webpack-中-splitchunk-插件和代码分割" tabindex="-1">Webpack 中 splitChunk 插件和代码分割 <a class="header-anchor" href="#webpack-中-splitchunk-插件和代码分割" aria-label="Permalink to &quot;Webpack 中 splitChunk 插件和代码分割&quot;">​</a></h4><p>你可能对 Webpack 4.0 版本推出的 splitChunk 插件并不陌生。这里需要注意的是，<strong>代码分割区别于动态加载，它们本质上是两个概念</strong> 。前文介绍到的 dynamic import（动态导入）技术本质上一种是懒加载------<strong>按需加载</strong> ，即只有在需要的时候，才加载代码。而以 splitChunk 插件为代表的代码分割，是一种<strong>代码拆包</strong>技术，与代码合并打包是一个相逆的过程。</p><p>代码分割的核心意义在于<strong>避免重复打包以及提升缓存利用率，进而提升访问速度</strong>。比如，我们将不常变化的第三方依赖库进行代码拆分，方便对第三方依赖库缓存，同时抽离公共逻辑，减少单个文件的 size 大小。</p><p>了解了代码分割的概念，那么就很好理解 Webpack splitChunk 插件满足下述条件时，自动进行代码分割：</p><ul><li><p>可以被共享的（即重复被引用的）模块或者 node_modules 中的模块；</p></li><li><p>在压缩前体积大于 30KB 的模块；</p></li><li><p>在按需加载模块时，并行加载的模块不得超过 5 个；</p></li><li><p>在页面初始化加载时，并行加载的模块不得超过 3 个。</p></li></ul><p>当然，上述配置数据是完全可以由开发者掌握主动权，并根据项目实际情况进行调整的。更多内容可以参考：<a href="https://www.webpackjs.com/plugins/split-chunks-plugin/" target="_blank" rel="noreferrer">split-chunks-plugin</a>。不过需要注意的是，关于 splitChunk 插件的默认参数是 Webpack 团队所设定的通用性优化手段，是经过&quot;千挑万选&quot;确定的，因此适用于多数开发场景。<strong>如果在没有实践测量的情况下，不建议开发者手动优化这些参数</strong>。</p><p>另外， Webpack splitChunk 插件也支持上文提到的&quot;按需加载&quot;，即可以和 dynamic import 搭配使用。比如，page1 和 page2 页面里动态引入 async.js，即 page1.js 和 page2.js 都有这样的逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;async.js&quot; */</span><span style="color:#9ECBFF;">&quot;./async&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(common </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(common);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;async.js&quot; */</span><span style="color:#032F62;">&quot;./async&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(common </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(common);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>在进行构建后，async.js 会被单独打包。如果进一步在 async.js 文件中引入 module.js 模块，即 async.js 中的代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;module.js&quot; */</span><span style="color:#9ECBFF;">&quot;./module.js&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(module </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(module);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;module.js&quot; */</span><span style="color:#032F62;">&quot;./module.js&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(module </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(module);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>依赖关系图如下图所示：</p>`,12),h=l('<p>三重依赖关系图</p><p>最终打包结果会按需动态引入 async.js，同时 module.js 也被成功单独拆分出来。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们就代码拆分和按需加载这一话题进行了分析：</p><ul><li><p>首先从代码拆分和按需加载的业务场景入手，分析了这一技术手段的必要性和业务价值；</p></li><li><p>接着，我们从 ES 规范入手，深入解读了 dynamic import 动态加载这一核心语言特性，同时从 Tree Shaking 和编写 Babel 插件的角度，在较深层的语法和工程理念上对比了按需打包这一话题；</p></li><li><p>最后，我们通过对 Webpack 能力的探究，剖析了如何在工程中实现代码拆分和按需加载。</p></li></ul>',5),D=s("p",null,"在实际工作中，我希望你能利用本节内容，并结合项目实际情况，排查代码拆分和按需加载是否合理；如果有不合理之处，可以动手实践、实验，进行论证。",-1),A=s("p",null,'本节内容既有理论内容，又有工程实践，只要你有"庖丁解牛"的决心，相信很快就有"入木三分"的理解。',-1);function q(C,g,k,b,f,v){const n=t("Image");return e(),c("div",null,[E,y,i,u,d,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8D/42/Ciqc1F_9Bu2AB133AAluXVg4Mlw240.png"}),F,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/05/28/Cip5yF_9BziALsMpAAFUvdp7KoQ251.png"}),p(),m,a(n,{alt:"Lark20210112-163942.png",src:"https://s0.lgstatic.com/i/image/M00/8D/58/CgqCHl_9YFqAKybyAAGp092kEyI435.png"}),p(),h,a(n,{alt:"Lark20210112-163852.png",src:"https://s0.lgstatic.com/i/image2/M01/05/34/CgpVE1_9YDyAVOWwAAel8VpUNt4885.png"}),D,A])}const j=o(r,[["render",q]]);export{_ as __pageData,j as default};
