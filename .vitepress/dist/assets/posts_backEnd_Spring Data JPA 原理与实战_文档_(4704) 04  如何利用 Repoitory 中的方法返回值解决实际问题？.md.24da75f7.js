import{_ as o,D as e,o as t,g as r,J as l,h as a,m as s,Q as p}from"./chunks/framework.f67d7268.js";const I=JSON.parse('{"title":"04如何利用Repoitory中的方法返回值解决实际问题？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4704) 04  如何利用 Repoitory 中的方法返回值解决实际问题？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4704) 04  如何利用 Repoitory 中的方法返回值解决实际问题？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4704) 04  如何利用 Repoitory 中的方法返回值解决实际问题？.md"},y=s("h1",{id:"_04如何利用repoitory中的方法返回值解决实际问题",tabindex:"-1"},[a("04如何利用Repoitory中的方法返回值解决实际问题？ "),s("a",{class:"header-anchor",href:"#_04如何利用repoitory中的方法返回值解决实际问题","aria-label":'Permalink to "04如何利用Repoitory中的方法返回值解决实际问题？"'},"​")],-1),E=s("p",null,"上一课时，我们着重讲了方法名和参数的使用方法，这一课时我们来看下Repository 支持的返回结果有哪些，以及 DTO 类型的返回结果如何自定义，及其在实际工作场景中我们如何做。通过本课时的学习，你将了解到 Repository 的几种返回结果，以及如何返回 DTO。我们先看一下返回结果有哪些。",-1),i=s("h3",{id:"repository-的返回结果有哪些",tabindex:"-1"},[a("Repository 的返回结果有哪些？ "),s("a",{class:"header-anchor",href:"#repository-的返回结果有哪些","aria-label":'Permalink to "Repository 的返回结果有哪些？"'},"​")],-1),u=s("p",null,"我们之前已经介绍过了 Repository 的接口，那么现在来看一下这些接口支持的返回结果有哪些，如下图所示：",-1),F=p(`<p>打开 SimpleJpaRepository 直接看它的 Structure 就可以知道，它实现的方法，以及父类接口的方法和返回类型包括：Optional、Iterable、List、Page、Long、Boolean、Entity 对象等，而实际上支持的返回类型还要多一些。</p><p>由于 Repository 里面支持 Iterable，所以其实 java 标准的 List、Set 都可以作为返回结果，并且也会支持其子类，Spring Data 里面定义了一个特殊的子类 Steamable，Streamable 可以替代 Iterable 或任何集合类型。它还提供了方便的方法来访问 Stream，可以直接在元素上进行 ....filter(...) 和 ....map(...) 操作，并将 Streamable 连接到其他元素。我们看个关于 UserRepository 直接继承 JpaRepository 的例子。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>还用之前的 UserRepository 类，在测试类里面做如下调用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jackxx&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">Assert.</span><span style="color:#B392F0;">assertNotNull</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">Streamable&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; userStreamable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack222&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">userStreamable.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jackxx&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">Assert.</span><span style="color:#6F42C1;">assertNotNull</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">Streamable&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; userStreamable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack222&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">userStreamable.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>然后我们就会得到如下输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jackxx, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com, sex</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">man, address</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">shanghai)</span></span>
<span class="line"><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack222, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, sex</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, address</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jackxx, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com, sex</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">man, address</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">shanghai)</span></span>
<span class="line"><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack222, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, sex</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, address</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span></code></pre></div><p>这个例子 Streamable<code>&lt;User&gt;</code> userStreamable，实现了 Streamable 的返回结果，如果想自定义方法，可以进行如下操作。</p><h4 id="自定义-streamable" tabindex="-1">自定义 Streamable <a class="header-anchor" href="#自定义-streamable" aria-label="Permalink to &quot;自定义 Streamable&quot;">​</a></h4><p>官方给我们提供了自定义 Streamable 的方法，不过在实际工作中很少出现要自定义保证结果类的情况，在这里我简单介绍一下方法，看如下例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Product</span><span style="color:#E1E4E8;"> { (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  MonetaryAmount </span><span style="color:#B392F0;">getPrice</span><span style="color:#E1E4E8;">() { ... }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequiredArgConstructor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">staticName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;of&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Products</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Streamable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Product</span><span style="color:#E1E4E8;">&gt; { (</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Streamable&lt;</span><span style="color:#F97583;">Product</span><span style="color:#E1E4E8;">&gt; streamable;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MonetaryAmount </span><span style="color:#B392F0;">getTotal</span><span style="color:#E1E4E8;">() { (</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> streamable.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Priced</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getPrice)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(Money.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">), MonetaryAmount</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">add);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProductRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Repository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Product</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Products </span><span style="color:#B392F0;">findAllByDescriptionContaining</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">); (</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Product</span><span style="color:#24292E;"> { (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  MonetaryAmount </span><span style="color:#6F42C1;">getPrice</span><span style="color:#24292E;">() { ... }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequiredArgConstructor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">staticName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;of&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Products</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Streamable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Product</span><span style="color:#24292E;">&gt; { (</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Streamable&lt;</span><span style="color:#D73A49;">Product</span><span style="color:#24292E;">&gt; streamable;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MonetaryAmount </span><span style="color:#6F42C1;">getTotal</span><span style="color:#24292E;">() { (</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> streamable.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Priced</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getPrice)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(Money.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), MonetaryAmount</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">add);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProductRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Repository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Product</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  Products </span><span style="color:#6F42C1;">findAllByDescriptionContaining</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">text</span><span style="color:#24292E;">); (</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上四个步骤介绍了自定义 Streamable 的方法，分别为：</p><p>（1）Product 实体，公开 API 以访问产品价格。</p><p>（2）Streamable<code>&lt;Product&gt;</code> 的包装类型可以通过 Products.of(...) 构造（通过 Lombok 注解创建的工厂方法）。</p><p>（3）包装器类型在 Streamable<code>&lt;Product&gt;</code> 上公开了计算新值的其他 API。</p><p>（4）可以将包装器类型直接用作查询方法返回类型。无须返回 Stremable<code>&lt;Product&gt;</code> 并将其手动包装在存储库 Client 端中。</p><p>通过以上例子你就可以做到自定义 Streamable，其原理很简单，就是实现Streamable接口，自己定义自己的实现类即可。我们也可以看下源码 QueryExecutionResultHandler 里面是否有 Streamable 子类的判断，来支持自定义 Streamable，关键源码如下：</p>`,17),d=p(`<p>通过源码你会发现 Streamable 为什么生效，下面来看看常见的集合类的返回实现。</p><h4 id="返回结果类型-list-stream-page-slice" tabindex="-1">返回结果类型 List/Stream/Page/Slice <a class="header-anchor" href="#返回结果类型-list-stream-page-slice" aria-label="Permalink to &quot;返回结果类型 List/Stream/Page/Slice&quot;">​</a></h4><p>在实际开发中，我们如何返回 List/Stream/Page/Slice 呢？</p><p>首先，新建我们的 UserRepository：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.domain.Pageable;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.Query;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.Stream;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//自定义一个查询方法，返回Stream对象，并且有分页属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from User u&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Stream&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllByCustomQueryAndStream</span><span style="color:#E1E4E8;">(Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//测试Slice的返回结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from User u&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Slice&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllByCustomQueryAndSlice</span><span style="color:#E1E4E8;">(Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.domain.Pageable;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.Query;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.Stream;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//自定义一个查询方法，返回Stream对象，并且有分页属性</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from User u&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    Stream&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllByCustomQueryAndStream</span><span style="color:#24292E;">(Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//测试Slice的返回结果</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from User u&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    Slice&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllByCustomQueryAndSlice</span><span style="color:#24292E;">(Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，修改一下我们的测试用例类，如下，验证一下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.assertj.core.util.Lists;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.Assert;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.domain.Page;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.domain.Slice;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.util.Streamable;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.Stream;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testSaveUser</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//我们新增7条数据方便测试分页结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack2&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack3&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack4&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack5&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack6&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack7&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//我们利用ObjectMapper将我们的返回结果Json to String</span></span>
<span class="line"><span style="color:#E1E4E8;">        ObjectMapper objectMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//返回Stream类型结果（1）</span></span>
<span class="line"><span style="color:#E1E4E8;">        Stream&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; userStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAllByCustomQueryAndStream</span><span style="color:#E1E4E8;">(PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        userStream.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//返回分页数据（2）</span></span>
<span class="line"><span style="color:#E1E4E8;">        Page&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; userPage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(objectMapper.</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(userPage));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//返回Slice结果（3）</span></span>
<span class="line"><span style="color:#E1E4E8;">        Slice&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; userSlice </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAllByCustomQueryAndSlice</span><span style="color:#E1E4E8;">(PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(objectMapper.</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(userSlice));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//返回List结果（4）</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; userList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAllById</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2L</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(objectMapper.</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(userList));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.assertj.core.util.Lists;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.Assert;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.domain.Page;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.domain.Slice;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.util.Streamable;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.Stream;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testSaveUser</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//我们新增7条数据方便测试分页结果</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack2&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack3&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack4&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack5&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack6&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack7&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//我们利用ObjectMapper将我们的返回结果Json to String</span></span>
<span class="line"><span style="color:#24292E;">        ObjectMapper objectMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//返回Stream类型结果（1）</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; userStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAllByCustomQueryAndStream</span><span style="color:#24292E;">(PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        userStream.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//返回分页数据（2）</span></span>
<span class="line"><span style="color:#24292E;">        Page&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; userPage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(objectMapper.</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(userPage));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//返回Slice结果（3）</span></span>
<span class="line"><span style="color:#24292E;">        Slice&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; userSlice </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAllByCustomQueryAndSlice</span><span style="color:#24292E;">(PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(objectMapper.</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(userSlice));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//返回List结果（4）</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; userList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAllById</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2L</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(objectMapper.</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(userList));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个时候我们分别看下四种测试结果：<br><strong>第一种：通过</strong> Stream<code>&lt;User&gt;</code><strong>取第二页的数据，得到结果如下：</strong></p><p>User(id=4, name=jack4, <a href="mailto:email=123456@126.com" target="_blank" rel="noreferrer">email=123456@126.com</a>, sex=man, address=shanghai)</p><p>User(id=5, name=jack5, <a href="mailto:email=123456@126.com" target="_blank" rel="noreferrer">email=123456@126.com</a>, sex=man, address=shanghai)</p><p>User(id=6, name=jack6, <a href="mailto:email=123456@126.com" target="_blank" rel="noreferrer">email=123456@126.com</a>, sex=man, address=shanghai)</p><p>Spring Data 的支持可以通过使用 Java 8 Stream 作为返回类型来逐步处理查询方法的结果。<strong>需要注意的是：流的关闭问题</strong>，try catch 是一种常用的关闭方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Stream&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; stream;</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   stream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAllByCustomQueryAndStream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   stream.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(...);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stream</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      stream.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Stream&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; stream;</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   stream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAllByCustomQueryAndStream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   stream.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(...);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stream</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      stream.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第二种：返回 Page<code>&lt;User&gt;</code> 的分页数据结果，如下所示：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack3&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   ],</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;pageable&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sort&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;sorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;unsorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;pageNumber&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,当前页码</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;pageSize&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,页码大小</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;offset&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;paged&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,是否分页了</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;unpaged&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;totalPages&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,一共有多少页</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;last&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,是否是到最后</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;totalElements&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">,一共多少调数</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;numberOfElements&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,当前数据下标</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;sort&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;unsorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;size&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,当前content大小</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,当前页面码的索引</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;first&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,是否是第一页</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">false是否有数据</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack3&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   ],</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;pageable&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sort&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;sorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;unsorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;pageNumber&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,当前页码</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;pageSize&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,页码大小</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;offset&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,偏移量</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;paged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,是否分页了</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;unpaged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;totalPages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,一共有多少页</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;last&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,是否是到最后</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;totalElements&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,一共多少调数</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;numberOfElements&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,当前数据下标</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;sort&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;unsorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;size&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,当前content大小</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,当前页面码的索引</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;first&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,是否是第一页</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">false是否有数据</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们可以看到 Page<code>&lt;User&gt;</code> 返回了第一个页的数据，并且告诉我们一共有三个部分的数据：</p><ul><li><p><strong>content</strong>：数据的内容，现在指 User 的 List 3 条。</p></li><li><p><strong>pageable</strong>：分页数据，包括排序字段是什么及其方向、当前是第几页、一共多少页、是否是最后一条等。</p></li><li><p><strong>当前数据的描述</strong>：&quot;size&quot;：3，当前 content 大小；&quot;number&quot;：0，当前页面码的索引； &quot;first&quot;：true，是否是第一页；&quot;empty&quot;：false，是否没有数据。</p></li></ul><p>通过这三部分数据我们可以知道要查数的分页信息。我们接着看第三种测试结果。</p><p><strong>第三种：返回 Slice<code>&lt;User&gt;</code> 结果，如下所示：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack4&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack5&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack6&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   ],</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;pageable&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sort&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;sorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;unsorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;pageNumber&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;pageSize&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;offset&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;paged&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;unpaged&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;numberOfElements&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;sort&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;unsorted&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;size&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;first&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;last&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack4&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack5&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack6&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   ],</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;pageable&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sort&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;sorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;unsorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;pageNumber&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;pageSize&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;offset&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;paged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;unpaged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;numberOfElements&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;sort&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;unsorted&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;size&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;first&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;last&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这时我们发现上面的 Page 返回结果少了，那么一共有多少条结果、多少页的数据呢？我们再比较一下第二种和第三种测试结果的执行 SQL：</p><p>第二种执行的是普通的分页查询 SQL：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">查询分页数据</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user0_.id as id1_0_, user0_.address as address2_0_, user0_.email as email3_0_, user0_.name as name4_0_, user0_.sex as sex5_0_ from user user0_ limit </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">计算分页数据</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(user0_.id) as col_0_0_ from user user0_</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">查询分页数据</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user0_.id as id1_0_, user0_.address as address2_0_, user0_.email as email3_0_, user0_.name as name4_0_, user0_.sex as sex5_0_ from user user0_ limit </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">计算分页数据</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(user0_.id) as col_0_0_ from user user0_</span></span></code></pre></div><p>第三种执行的 SQL 如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user0_.id as id1_0_, user0_.address as address2_0_, user0_.email as email3_0_, user0_.name as name4_0_, user0_.sex as sex5_0_ from user user0_ limit </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> offset </span><span style="color:#F97583;">?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user0_.id as id1_0_, user0_.address as address2_0_, user0_.email as email3_0_, user0_.name as name4_0_, user0_.sex as sex5_0_ from user user0_ limit </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">?</span></span></code></pre></div><p>通过对比可以看出，只查询偏移量，不计算分页数据，这就是 Page 和 Slice 的主要区别。我们接着看第四种测试结果。</p><p><strong>第四种：返回 List<code>&lt;User&gt;</code> 结果如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>到这里，我们可以很简单地查询出来 ID=1 和 ID=2 的数据，没有分页信息。</p><p>上面四种方法介绍了常见的多条数据返回结果的形式，单条的我就不多介绍了，相信你一看就懂，无非就是对 JDK8 的 Optional 的支持。比如支持了 Null 的优雅判断，再一个就是支持直接返回 Entity，或者一些存在 / 不存在的 Boolean 的结果和一些 count 条数的返回结果而已。</p><p>我们接下来看下 Repository 的方法是如何对异步进行支持的？</p><h4 id="repository-对-feature-completablefuture-异步返回结果的支持" tabindex="-1">Repository 对 Feature/CompletableFuture 异步返回结果的支持： <a class="header-anchor" href="#repository-对-feature-completablefuture-异步返回结果的支持" aria-label="Permalink to &quot;Repository 对 Feature/CompletableFuture 异步返回结果的支持：&quot;">​</a></h4><p>我们可以使用 Spring 的异步方法执行Repository查询，这意味着方法将在调用时立即返回，并且实际的查询执行将发生在已提交给 Spring TaskExecutor 的任务中，比较适合定时任务的实际场景。异步使用起来比较简单，直接加@Async 注解即可，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Async</span></span>
<span class="line"><span style="color:#E1E4E8;">Future</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findByFirstname</span><span style="color:#E1E4E8;">(String firstname); (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Async</span></span>
<span class="line"><span style="color:#E1E4E8;">CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findOneByFirstname</span><span style="color:#E1E4E8;">(String firstname); (</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Async</span></span>
<span class="line"><span style="color:#E1E4E8;">ListenableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findOneByLastname</span><span style="color:#E1E4E8;">(String lastname);(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Async</span></span>
<span class="line"><span style="color:#24292E;">Future</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findByFirstname</span><span style="color:#24292E;">(String firstname); (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Async</span></span>
<span class="line"><span style="color:#24292E;">CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findOneByFirstname</span><span style="color:#24292E;">(String firstname); (</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Async</span></span>
<span class="line"><span style="color:#24292E;">ListenableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findOneByLastname</span><span style="color:#24292E;">(String lastname);(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span></code></pre></div><p>上述三个异步方法的返回结果，分别做如下解释：</p><ul><li><p>第一处：使用 java.util.concurrent.Future 的返回类型；</p></li><li><p>第二处：使用 java.util.concurrent.CompletableFuture 作为返回类型；</p></li><li><p>第三处：使用 org.springframework.util.concurrent.ListenableFuture 作为返回类型。</p></li></ul><p>以上是对 @Async 的支持，关于实际使用需要注意以下三点内容：</p><ul><li><p>在实际工作中，直接在 Repository 这一层使用异步方法的场景不多，一般都是把异步注解放在 Service 的方法上面，这样的话，可以有一些额外逻辑，如发短信、发邮件、发消息等配合使用；</p></li><li><p>使用异步的时候一定要配置线程池，这点切记，否则&quot;死&quot;得会很难看；</p></li><li><p>万一失败我们会怎么处理？关于事务是怎么处理的呢？这种需要重点考虑的，我将会在 14 课时（乐观锁机制和重试机制在实战中应该怎么用?）中详细介绍。</p></li></ul><p>接下来看看 Repository 对Reactive 是如何支持的。</p><h4 id="对-reactive-支持-flux-与-mono" tabindex="-1">对 Reactive 支持 flux 与 Mono <a class="header-anchor" href="#对-reactive-支持-flux-与-mono" aria-label="Permalink to &quot;对 Reactive 支持 flux 与 Mono&quot;">​</a></h4><p>可能有同学会问，看到Spring Data Common里面对React还是有支持的，那为什么在JpaRespository里面没看到有响应的返回结果支持呢？其实Common里面提供的只是接口，而JPA里面没有做相关的Reactive 的实现，但是本身Spring Data Common里面对 Reactive 是支持的。</p><p>下面我们在 gradle 里面引用一个Spring Data Common的子模块implementation &#39;org.springframework.boot:spring-boot-starter-data-mongodb&#39; 来加载依赖，这时候我们打开 Repository 看 Hierarchy 就可以看到，这里多了一个 Mongo 的 Repsitory 的实现，天然地支持着 Reactive 这条线。</p>`,42),m=s("p",null,"相信到这里你能感受到 Spring Data Common 的强大支持，对 Repository 接口的不同实现也有了一定的认识。对于以上讲述的返回结果，你可以自己测试一下加以理解并运用，那么接下来我们进行一个总结。",-1),q=s("h4",{id:"返回结果支持总结",tabindex:"-1"},[a("返回结果支持总结 "),s("a",{class:"header-anchor",href:"#返回结果支持总结","aria-label":'Permalink to "返回结果支持总结"'},"​")],-1),g=s("p",null,"下面打开 ResultProcessor 类的源码看一下支持的类型有哪些。",-1),C=s("p",null,"从上图可以看出 processResult 的时候分别对 PageQuery、Stream、Reactiv 有了各自的判断，我们 debug 到这里的时候来看一下 convert，进入到类里面。",-1),A=s("p",null,"可以看到 QueryExecutorConverters 里面对 JDK8、Guava、vavr 也做了各种支持，如果你有兴趣可以课后去仔细看看源码。",-1),B=s("p",null,"这里我们先用表格总结一下返回值，下表列出了 Spring Data JPA Query Method 机制支持的方法的返回值类型：",-1),h=p(`<p>以上是对返回的类型做的总结，接下来进入本课时的第二部分，来看看工作中最常见的、同一个 Entity 的不同字段的返回形式有哪些。</p><h3 id="最常见的-dto-返回结果的支持方法有哪些" tabindex="-1">最常见的 DTO 返回结果的支持方法有哪些？ <a class="header-anchor" href="#最常见的-dto-返回结果的支持方法有哪些" aria-label="Permalink to &quot;最常见的 DTO 返回结果的支持方法有哪些？&quot;">​</a></h3><p>上面我们讲解了 Repository 不同的返回类型，下面我们着重说一下除了 Entity，还能返回哪些 POJO 呢？我们先了解一个概念：Projections。</p><h4 id="projections-的概念" tabindex="-1">Projections 的概念 <a class="header-anchor" href="#projections-的概念" aria-label="Permalink to &quot;Projections 的概念&quot;">​</a></h4><p>Spring JPA 对 Projections 扩展的支持，我个人觉得这是个非常好的东西，从字面意思上理解就是映射，指的是和 DB 的查询结果的字段映射关系。一般情况下，返回的字段和 DB 的查询结果的字段是一一对应的；但有的时候，需要返回一些指定的字段，或者返回一些复合型的字段，而不需要全部返回。</p><p>原来我们的做法是自己写各种 entity 到 view 的各种 convert 的转化逻辑，而 Spring Data 正是考虑到了这一点，允许对专用返回类型进行建模，有选择地返回同一个实体的不同视图对象。</p><p>下面还以我们的 User 查询对象为例，看看怎么自定义返回 DTO：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String sex;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String address;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>看上面的原始 User 实体代码，如果我们只想返回 User 对象里面的 name 和 email，应该怎么做？下面我们介绍三种方法。</p><h4 id="第一种方法-新建一张表的不同-entity" tabindex="-1"><strong>第一种方法：新建一张表的不同 Entity</strong> <a class="header-anchor" href="#第一种方法-新建一张表的不同-entity" aria-label="Permalink to &quot;**第一种方法：新建一张表的不同 Entity**&quot;">​</a></h4><p>首先，我们新增一个Entity类：通过 @Table 指向同一张表，这张表和 User 实例里面的表一样都是 user，完整内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserOnlyNameEmailEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserOnlyNameEmailEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，新增一个 UserOnlyNameEmailEntityRepository，做单独的查询：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserOnlyNameEmailEntityRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserOnlyNameEmailEntity</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserOnlyNameEmailEntityRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserOnlyNameEmailEntity</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们的测试用例里面的写法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testProjections</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack12&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(users);</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserOnlyNameEmailEntity uName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userOnlyNameEmailEntityRepository.</span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(uName);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testProjections</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack12&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(users);</span></span>
<span class="line"><span style="color:#24292E;">    UserOnlyNameEmailEntity uName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userOnlyNameEmailEntityRepository.</span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(uName);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看一下输出结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> insert into </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (address, email, name, sex, id) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user0_.id as id1_0_, user0_.address as address2_0_, user0_.email as email3_0_, user0_.name as name4_0_, user0_.sex as sex5_0_ from user user0_</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack12, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com, sex</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">man, address</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">shanghai)]</span></span>
<span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select useronlyna0_.id as id1_0_0_, useronlyna0_.email as email3_0_0_, useronlyna0_.name as name4_0_0_ from user useronlyna0_ where useronlyna0_.id</span><span style="color:#F97583;">=?</span></span>
<span class="line"><span style="color:#B392F0;">UserOnlyNameEmailEntity</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack12, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> insert into </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (address, email, name, sex, id) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user0_.id as id1_0_, user0_.address as address2_0_, user0_.email as email3_0_, user0_.name as name4_0_, user0_.sex as sex5_0_ from user user0_</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack12, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com, sex</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">man, address</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">shanghai)]</span></span>
<span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select useronlyna0_.id as id1_0_0_, useronlyna0_.email as email3_0_0_, useronlyna0_.name as name4_0_0_ from user useronlyna0_ where useronlyna0_.id</span><span style="color:#D73A49;">=?</span></span>
<span class="line"><span style="color:#6F42C1;">UserOnlyNameEmailEntity</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack12, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com)</span></span></code></pre></div><p>上述结果可以看到，当在 user 表里面插入了一条数据，而 userRepository 和 userOnlyNameEmailEntityRepository 查询的都是同一张表 user，这种方式的好处是简单、方便，很容易可以想到；缺点就是通过两个实体都可以进行 update 操作，如果同一个项目里面这种实体比较多，到时候就容易不知道是谁更新的，从而导致出 bug 不好查询，实体职责划分不明确。我们来看第二种返回 DTO 的做法。</p><h4 id="第二种方法-直接定义一个-useronlynameemaildto" tabindex="-1">第二种方法：直接定义一个 UserOnlyNameEmailDto <a class="header-anchor" href="#第二种方法-直接定义一个-useronlynameemaildto" aria-label="Permalink to &quot;第二种方法：直接定义一个 UserOnlyNameEmailDto&quot;">​</a></h4><p>首先，我们新建一个 DTO 类来返回我们想要的字段，它是 UserOnlyNameEmailDto，用来接收 name、email 两个字段的值，具体如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserOnlyNameEmailDto</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name,email;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserOnlyNameEmailDto</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name,email;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其次，在 UserRepository 里面做如下用法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//测试只返回name和email的DTO</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserOnlyNameEmailDto </span><span style="color:#B392F0;">findByEmail</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//测试只返回name和email的DTO</span></span>
<span class="line"><span style="color:#24292E;">    UserOnlyNameEmailDto </span><span style="color:#6F42C1;">findByEmail</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">email</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，测试用例里面写法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testProjections</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack12&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserOnlyNameEmailDto userOnlyNameEmailDto </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  userRepository.</span><span style="color:#B392F0;">findByEmail</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(userOnlyNameEmailDto);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testProjections</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack12&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        UserOnlyNameEmailDto userOnlyNameEmailDto </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  userRepository.</span><span style="color:#6F42C1;">findByEmail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(userOnlyNameEmailDto);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>最后，输出结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user0_.name as col_0_0_, user0_.email as col_1_0_ from user user0_ where user0_.email</span><span style="color:#F97583;">=?</span></span>
<span class="line"><span style="color:#B392F0;">UserOnlyNameEmailDto</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack12, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user0_.name as col_0_0_, user0_.email as col_1_0_ from user user0_ where user0_.email</span><span style="color:#D73A49;">=?</span></span>
<span class="line"><span style="color:#6F42C1;">UserOnlyNameEmailDto</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack12, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com)</span></span></code></pre></div><p>这里需要注意的是，如果我们去看源码的话，看关键的 PreferredConstructorDiscoverer 类时会发现，UserDTO 里面只能有一个全参数构造方法，如下所示：</p>`,29),D=p(`<p>如上图所示，Constructor 选择的时候会帮我们做构造参数的选择，如果 DTO 里面有多个构造方法，就会报转化错误的异常，这一点需要注意，异常是这样的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">No converter found capable of converting from type [com.example.jpa.example1.User] to type [com.example.jpa.example1.UserOnlyNameEmailDto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">No converter found capable of converting from type [com.example.jpa.example1.User] to type [com.example.jpa.example1.UserOnlyNameEmailDto</span></span></code></pre></div><p>所以这种方式的优点就是返回的结果不需要是个实体对象，对 DB 不能进行除了查询之外的任何操作；缺点就是有 set 方法还可以改变里面的值，构造方法不能更改，必须全参数，这样如果是不熟悉 JPA 的新人操作的时候很容易引发 Bug。</p><h4 id="第三种方法-返回结果是一个-pojo-的接口" tabindex="-1">第三种方法：返回结果是一个 POJO 的接口 <a class="header-anchor" href="#第三种方法-返回结果是一个-pojo-的接口" aria-label="Permalink to &quot;第三种方法：返回结果是一个 POJO 的接口&quot;">​</a></h4><p>我们再来学习一种返回不同字段的方式，这种方式与上面两种的区别是只需要定义接口，它的好处是只读，不需要添加构造方法，我们使用起来非常灵活，一般很难产生 Bug，那么它怎么实现呢？</p><p>首先，定义一个 UserOnlyName 的接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserOnlyName</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getEmail</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserOnlyName</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getEmail</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其次，我们的 UserRepository 写法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 接口的方式返回DTO</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">address</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserOnlyName </span><span style="color:#B392F0;">findByAddress</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 接口的方式返回DTO</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">address</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    UserOnlyName </span><span style="color:#6F42C1;">findByAddress</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">address</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，测试用例的写法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testProjections</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack12&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserOnlyName userOnlyName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findByAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(userOnlyName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testProjections</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack12&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        UserOnlyName userOnlyName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findByAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(userOnlyName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>最后，我们的运行结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user0_.name as col_0_0_, user0_.email as col_1_0_ from user user0_ where user0_.address</span><span style="color:#F97583;">=?</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.data.jpa.repository.query.AbstractJpaQuery$TupleConverter$TupleBackedMap@</span><span style="color:#F97583;">1d369521</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user0_.name as col_0_0_, user0_.email as col_1_0_ from user user0_ where user0_.address</span><span style="color:#D73A49;">=?</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.data.jpa.repository.query.AbstractJpaQuery$TupleConverter$TupleBackedMap@</span><span style="color:#D73A49;">1d369521</span></span></code></pre></div><p>这个时候会发现我们的 userOnlyName 接口成了一个代理对象，里面通过 Map 的格式包含了我们的要返回字段的值（如：name、email），我们用的时候直接调用接口里面的方法即可，如 userOnlyName.getName() 即可；这种方式的优点是接口为只读，并且语义更清晰，所以这种是我比较推荐的做法。</p><p>其中源码是如何实现的，我来说一个类，你可以通过 debug，看一下最终 DTO 和接口转化执行的 query 有什么不同，看下图中老师 debug 显示的 Query 语句的位置：</p>`,15),b=s("p",null,"图一：是返回 DTO 接口形式的 query 生成的 JPQL。",-1),_=s("p",null,"图二：是返回 DTO 类的时候 QueryStructure 生成的 JPQL 语句。",-1),v=s("p",null,"两种最大的区别是 DTO 类需要构造方法 new 一个对象出来，这就是我们第二种方法里面需要注意的 DTO 构造函数的问题；而通过图一我们可以看到接口直接通过 as 别名，映射成 hashmap 即可，非常灵活。这里我顺带给你提一个 tips。",-1),k=s("h4",{id:"这里说一个小技巧",tabindex:"-1"},[a("这里说一个小技巧 "),s("a",{class:"header-anchor",href:"#这里说一个小技巧","aria-label":'Permalink to "这里说一个小技巧"'},"​")],-1),f=s("p",null,"当我们去写userRepositor 的定义方法的时候，IDA 会为我们提供满足 JPA 语法的提示，这也是用 Spring Data JPA 的好处之一，因为这些一旦约定死了（这里是指遵守 JPA 协议），周边的工具会越来越成熟，其中 MyBatis 太灵活了，就会导致周边的工具没办法跟上。创建 defining query method 的时候就会提示，如下图所示：",-1),S=s("p",null,"以上就是返回 DTO 的几种常见的方法了，你在实际应用时，要不断 debug 和仔细体会。当然除了这些外，还有 @Query 注解也是可以做到，下一节会有介绍。",-1),j=s("h3",{id:"总结",tabindex:"-1"},[a("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),x=s("p",null,'本课时我为你讲解了返回结果的类型有哪些，也为你重点介绍了返回 DTO 的实战经验和方式，其中返回 DTO 以及第一种方式，我在下一课时"@Query 帮我们解决了什么问题？什么时候应该选择 @Query？"中再详细讲，方便你做实际参考。',-1),U=s("p",null,'实际工作中可能返回结果会比这个更复杂，但是你要掌握学习的"套路"，可以举一反三，学会看源码，就可以轻松应对工作中遇到的任何问题。',-1),R=s("p",null,"你是不是通过老师的课学会了如何利用 Repository 的返回结果解决实际问题了？如果学会了就分享吧，也欢迎你在下方留言，说出自己的观点。",-1),P=s("blockquote",null,[s("p",null,[a("点击下方链接查看源码（不定时更新）"),s("br"),s("a",{href:"https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa",target:"_blank",rel:"noreferrer"},"https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa")])],-1);function O(T,N,L,w,J,M){const n=e("Image");return t(),r("div",null,[y,E,i,u,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/56/1A/Ciqc1F9rCruAArlKAANX2obUD_A764.png"}),a(),F,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/56/1A/Ciqc1F9rCteAD_ysAADP7mUlfak673.png"}),a(),d,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/56/1C/Ciqc1F9rC-uAWLY5AASQJuG5If0280.png"}),a(),m,q,g,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/56/27/CgqCHl9rC7uAOiNSAAGT0qXVLyY891.png"}),a(),C,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/56/1C/Ciqc1F9rC_-AOhtnAALvuoaT4mw230.png"}),a(),A,B,l(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/56/1D/Ciqc1F9rDAiARh9tAAQVFWlht1s532.png"}),a(),h,l(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/56/28/CgqCHl9rDDKAPKAIAASfIaP3unE060.png"}),a(),D,l(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/56/28/CgqCHl9rDD6AWKs9AAE8kGFOxmo130.png"}),a(),b,l(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/56/28/CgqCHl9rDEWAdoxmAARwd1XSUzo704.png"}),a(),_,v,k,f,l(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/56/28/CgqCHl9rDE-AYIBqAADX_Pwf0QE948.png"}),a(),S,j,x,U,R,P])}const V=o(c,[["render",O]]);export{I as __pageData,V as default};
