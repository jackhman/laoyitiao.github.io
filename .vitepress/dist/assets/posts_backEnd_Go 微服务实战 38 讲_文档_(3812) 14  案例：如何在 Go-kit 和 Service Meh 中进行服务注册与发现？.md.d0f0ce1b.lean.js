import{_ as o,j as e,o as t,g as r,k as n,h as a,Q as p,s as l}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"14案例：如何在Go-kit和ServiceMeh中进行服务注册与发现？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3812) 14  案例：如何在 Go-kit 和 Service Meh 中进行服务注册与发现？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3812) 14  案例：如何在 Go-kit 和 Service Meh 中进行服务注册与发现？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3812) 14  案例：如何在 Go-kit 和 Service Meh 中进行服务注册与发现？.md"},E=p("",22),i=l("p",null,"Istio 架构图",-1),y=l("p",null,"这其中 Proxy 属于数据平面，以 Sidecar 的方式与应用程序一同部署到 Pod 中，而 Pilot、Citadel 和 Galley 属于控制平面。除此之外，Istio 中还提供一些额外的插件，如 grafana、istio-tracing、kiali 和 prometheus，用于进行可视化的数据查看、流量监控和链路追踪等。",-1),g=l("p",null,"Istio 默认提供了以下几种安装 profile 形式，它们开启的组件配置如下表所示（+ 表示开启，空白表示未开启，- 表示未知）：",-1),d=p("",11),C=p("",4),u=l("p",null,"kiali Applications 维度下的 register",-1),F=l("p",null,"Istio 依托 Kubernetes 的快速发展和推广，对 Kubernetes 有着极强的依赖性，其服务注册与发现的实现也主要依赖于 Kubernetes 的 Service 管理。我们可以通过以下这张图理解 Istio 的服务注册与发现。",-1),h=p("",10);function v(A,D,_,m,k,b){const s=e("Image");return t(),r("div",null,[E,n(s,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RMaAO4wvAARr5zliZpw337.png"}),a(),i,y,g,n(s,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image/M00/41/CE/Ciqc1F82RNKADQe4AACin_AYfxg655.png"}),a(),d,n(s,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/41/CF/Ciqc1F82RT2AaFOvAABX9ZrCcO8542.png"}),a(),C,n(s,{alt:"QQ20200813-103436.png",src:"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RTKAGJclAABrWEPqyEA895.png"}),a(),u,F,n(s,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RSqALb27AARr5zliZpw854.png"}),a(),h])}const P=o(c,[["render",v]]);export{f as __pageData,P as default};
