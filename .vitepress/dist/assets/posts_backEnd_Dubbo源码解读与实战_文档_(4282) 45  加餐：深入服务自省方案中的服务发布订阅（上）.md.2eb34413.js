import{_ as e,j as o,o as t,g as c,k as n,h as a,Q as p,s as l}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"ServiceDiscovery 接口 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4282) 45  加餐：深入服务自省方案中的服务发布订阅（上）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4282) 45  加餐：深入服务自省方案中的服务发布订阅（上）.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4282) 45  加餐：深入服务自省方案中的服务发布订阅（上）.md"},E=p(`<p>在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=4280" target="_blank" rel="noreferrer">第 43 课时</a>中介绍 Dubbo 的服务自省方案时，我们可以看到除了需要元数据方案的支持之外，还需要服务发布订阅功能的支持，这样才能构成完整的服务自省架构。</p><p>本课时我们就来讲解一下 Dubbo 中服务实例的发布与订阅功能的具体实现：首先说明 ServiceDiscovery 接口的核心定义，然后再重点介绍以 ZooKeeper 为注册中心的 ZookeeperServiceDiscovery 实现，这其中还会涉及相关事件监听的实现。</p><h3 id="servicediscovery-接口" tabindex="-1">ServiceDiscovery 接口 <a class="header-anchor" href="#servicediscovery-接口" aria-label="Permalink to &quot;ServiceDiscovery 接口&quot;">​</a></h3><p><strong>ServiceDiscovery 主要封装了针对 ServiceInstance 的发布和订阅操作</strong>，你可以暂时将其理解成一个 ServiceInstance 的注册中心。ServiceDiscovery 接口的定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zookeeper&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceDiscovery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Prioritized</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化当前ServiceDiscovery实例，传入的是注册中心的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">registryURL</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 销毁当前ServiceDiscovery实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发布传入的ServiceInstance实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(ServiceInstance </span><span style="color:#FFAB70;">serviceInstance</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RuntimeException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新传入的ServiceInstance实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(ServiceInstance </span><span style="color:#FFAB70;">serviceInstance</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RuntimeException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注销传入的ServiceInstance实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unregister</span><span style="color:#E1E4E8;">(ServiceInstance </span><span style="color:#FFAB70;">serviceInstance</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RuntimeException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询全部Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getServices</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 分页查询时默认每页的条数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDefaultPageSize</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据ServiceName分页查询ServiceInstance</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NullPointerException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; allInstances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> offset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pageSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDefaultPageSize</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 分页查询ServiceInstance</span></span>
<span class="line"><span style="color:#E1E4E8;">        Page&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceName, offset, pageSize);</span></span>
<span class="line"><span style="color:#E1E4E8;">        allInstances.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (page.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            offset </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">getDataSize</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceName, offset, pageSize);</span></span>
<span class="line"><span style="color:#E1E4E8;">            allInstances.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unmodifiableList</span><span style="color:#E1E4E8;">(allInstances);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Page&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceName</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">offset</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">pageSize</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NullPointerException,</span></span>
<span class="line"><span style="color:#E1E4E8;">            IllegalArgumentException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceName, offset, pageSize, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Page&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceName</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">offset</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">pageSize</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">healthyOnly</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span></span>
<span class="line"><span style="color:#E1E4E8;">            NullPointerException, IllegalArgumentException, UnsupportedOperationException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Current implementation does not support pagination query method.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Page&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serviceNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">offset</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">requestSize</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span></span>
<span class="line"><span style="color:#E1E4E8;">            NullPointerException, IllegalArgumentException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Page&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt;&gt; instances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String serviceName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> serviceNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            instances.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(serviceName, </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceName, offset, requestSize));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unmodifiableMap</span><span style="color:#E1E4E8;">(instances);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加ServiceInstance监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addServiceInstancesChangedListener</span><span style="color:#E1E4E8;">(ServiceInstancesChangedListener </span><span style="color:#FFAB70;">listener</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NullPointerException, IllegalArgumentException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发ServiceInstancesChangedEvent事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(serviceName, </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceName));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceName</span><span style="color:#E1E4E8;">, String... </span><span style="color:#FFAB70;">otherServiceNames</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(serviceName, </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceName));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (otherServiceNames </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(otherServiceNames)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(StringUtils</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">isNotEmpty)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">dispatchServiceInstancesChangedEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceName</span><span style="color:#E1E4E8;">, Collection&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serviceInstances</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(serviceName, serviceInstances));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(ServiceInstancesChangedEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zookeeper&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceDiscovery</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Prioritized</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化当前ServiceDiscovery实例，传入的是注册中心的URL</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">registryURL</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 销毁当前ServiceDiscovery实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 发布传入的ServiceInstance实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(ServiceInstance </span><span style="color:#E36209;">serviceInstance</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RuntimeException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新传入的ServiceInstance实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(ServiceInstance </span><span style="color:#E36209;">serviceInstance</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RuntimeException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注销传入的ServiceInstance实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unregister</span><span style="color:#24292E;">(ServiceInstance </span><span style="color:#E36209;">serviceInstance</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RuntimeException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询全部Service Name</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getServices</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 分页查询时默认每页的条数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDefaultPageSize</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据ServiceName分页查询ServiceInstance</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NullPointerException {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; allInstances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pageSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDefaultPageSize</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 分页查询ServiceInstance</span></span>
<span class="line"><span style="color:#24292E;">        Page&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceName, offset, pageSize);</span></span>
<span class="line"><span style="color:#24292E;">        allInstances.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(page.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (page.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            offset </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">getDataSize</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceName, offset, pageSize);</span></span>
<span class="line"><span style="color:#24292E;">            allInstances.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(page.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unmodifiableList</span><span style="color:#24292E;">(allInstances);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Page&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceName</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">pageSize</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NullPointerException,</span></span>
<span class="line"><span style="color:#24292E;">            IllegalArgumentException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceName, offset, pageSize, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Page&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceName</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">pageSize</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">healthyOnly</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span></span>
<span class="line"><span style="color:#24292E;">            NullPointerException, IllegalArgumentException, UnsupportedOperationException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Current implementation does not support pagination query method.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Page&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serviceNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">requestSize</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span></span>
<span class="line"><span style="color:#24292E;">            NullPointerException, IllegalArgumentException {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Page&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt;&gt; instances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String serviceName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> serviceNames) {</span></span>
<span class="line"><span style="color:#24292E;">            instances.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(serviceName, </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceName, offset, requestSize));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unmodifiableMap</span><span style="color:#24292E;">(instances);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加ServiceInstance监听器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addServiceInstancesChangedListener</span><span style="color:#24292E;">(ServiceInstancesChangedListener </span><span style="color:#E36209;">listener</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NullPointerException, IllegalArgumentException {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 触发ServiceInstancesChangedEvent事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(serviceName, </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceName));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceName</span><span style="color:#24292E;">, String... </span><span style="color:#E36209;">otherServiceNames</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(serviceName, </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceName));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (otherServiceNames </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(otherServiceNames)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(StringUtils</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">isNotEmpty)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">dispatchServiceInstancesChangedEvent);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceName</span><span style="color:#24292E;">, Collection&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serviceInstances</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceInstancesChangedEvent</span><span style="color:#24292E;">(serviceName, serviceInstances));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(ServiceInstancesChangedEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ServiceDiscovery 接口被 @SPI 注解修饰，是一个扩展点，针对不同的注册中心，有不同的 ServiceDiscovery 实现，如下图所示：</p>`,6),y=l("p",null,"ServiceDiscovery 继承关系图",-1),i=l("p",null,"在 Dubbo 创建 ServiceDiscovery 对象的时候，会通过 ServiceDiscoveryFactory 工厂类进行创建。ServiceDiscoveryFactory 接口也是一个扩展接口，Dubbo 只提供了一个默认实现------ DefaultServiceDiscoveryFactory，其继承关系如下图所示：",-1),v=p(`<p>ServiceDiscoveryFactory 继承关系图</p><p>在 AbstractServiceDiscoveryFactory 中维护了一个 ConcurrentMap&lt;String, ServiceDiscovery&gt; 类型的集合（discoveries 字段）来缓存 ServiceDiscovery 对象，并提供了一个 createDiscovery() 抽象方法来创建 ServiceDiscovery 实例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ServiceDiscovery </span><span style="color:#B392F0;">getServiceDiscovery</span><span style="color:#E1E4E8;">(URL registryURL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registryURL.</span><span style="color:#B392F0;">toServiceStringWithoutResolving</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> discoveries.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(key, k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createDiscovery</span><span style="color:#E1E4E8;">(registryURL));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ServiceDiscovery </span><span style="color:#6F42C1;">getServiceDiscovery</span><span style="color:#24292E;">(URL registryURL) {</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registryURL.</span><span style="color:#6F42C1;">toServiceStringWithoutResolving</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> discoveries.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(key, k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createDiscovery</span><span style="color:#24292E;">(registryURL));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 DefaultServiceDiscoveryFactory 中会实现 createDiscovery() 方法，使用 Dubbo SPI 机制获取对应的 ServiceDiscovery 对象，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> ServiceDiscovery </span><span style="color:#B392F0;">createDiscovery</span><span style="color:#E1E4E8;">(URL registryURL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registryURL.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExtensionLoader&lt;</span><span style="color:#F97583;">ServiceDiscovery</span><span style="color:#E1E4E8;">&gt; loader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(ServiceDiscovery.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loader.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(protocol);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> ServiceDiscovery </span><span style="color:#6F42C1;">createDiscovery</span><span style="color:#24292E;">(URL registryURL) {</span></span>
<span class="line"><span style="color:#24292E;">    String protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registryURL.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ExtensionLoader&lt;</span><span style="color:#D73A49;">ServiceDiscovery</span><span style="color:#24292E;">&gt; loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(ServiceDiscovery.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loader.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(protocol);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="zookeeperservicediscovery-实现分析" tabindex="-1">ZookeeperServiceDiscovery 实现分析 <a class="header-anchor" href="#zookeeperservicediscovery-实现分析" aria-label="Permalink to &quot;ZookeeperServiceDiscovery 实现分析&quot;">​</a></h3><p>Dubbo 提供了多个 ServiceDiscovery 用来接入多种注册中心，下面我们以 ZookeeperServiceDiscovery 为例介绍 Dubbo 是如何接入 ZooKeeper 作为注册中心，实现服务实例发布和订阅的。</p><p><strong>在 ZookeeperServiceDiscovery 中封装了一个 Apache Curator 中的 ServiceDiscovery 对象来实现与 ZooKeeper 的交互</strong>。在 initialize() 方法中会初始化 CuratorFramework 以及 Curator ServiceDiscovery 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(URL registryURL) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略初始化EventDispatcher的相关逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化CuratorFramework</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.curatorFramework </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildCuratorFramework</span><span style="color:#E1E4E8;">(registryURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 确定rootPath，默认是&quot;/services&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.rootPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ROOT_PATH.</span><span style="color:#B392F0;">getParameterValue</span><span style="color:#E1E4E8;">(registryURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化Curator ServiceDiscovery并启动</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.serviceDiscovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildServiceDiscovery</span><span style="color:#E1E4E8;">(curatorFramework, rootPath);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.serviceDiscovery.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(URL registryURL) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略初始化EventDispatcher的相关逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化CuratorFramework</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.curatorFramework </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildCuratorFramework</span><span style="color:#24292E;">(registryURL);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 确定rootPath，默认是&quot;/services&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rootPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ROOT_PATH.</span><span style="color:#6F42C1;">getParameterValue</span><span style="color:#24292E;">(registryURL);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化Curator ServiceDiscovery并启动</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceDiscovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildServiceDiscovery</span><span style="color:#24292E;">(curatorFramework, rootPath);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceDiscovery.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ZookeeperServiceDiscovery 中的方法基本都是调用 Curator ServiceDiscovery 对象的相应方法实现，例如，register()、update() 、unregister() 方法都会调用 Curator ServiceDiscovery 对象的相应方法完成 ServiceInstance 的添加、更新和删除。这里我们以 register() 方法为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) throws RuntimeException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">doInServiceRegistry</span><span style="color:#E1E4E8;">(serviceDiscovery </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceDiscovery.</span><span style="color:#B392F0;">registerService</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(serviceInstance));</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在build()方法中会将Dubbo中的ServiceInstance对象转换成Curator中的ServiceInstance对象</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> org.apache.curator.x.discovery.ServiceInstance</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ZookeeperInstance</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceInstanceBuilder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; metadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 生成的id格式是&quot;host:ip&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateId</span><span style="color:#E1E4E8;">(host, port);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ZookeeperInstance是Curator ServiceInstance的payload</span></span>
<span class="line"><span style="color:#E1E4E8;">    ZookeeperInstance zookeeperInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZookeeperInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, serviceName, metadata);</span></span>
<span class="line"><span style="color:#E1E4E8;">    builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(id).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(serviceName).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(host).</span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">(port)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">payload</span><span style="color:#E1E4E8;">(zookeeperInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(ServiceInstance serviceInstance) throws RuntimeException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">doInServiceRegistry</span><span style="color:#24292E;">(serviceDiscovery </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        serviceDiscovery.</span><span style="color:#6F42C1;">registerService</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(serviceInstance));</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在build()方法中会将Dubbo中的ServiceInstance对象转换成Curator中的ServiceInstance对象</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.apache.curator.x.discovery.ServiceInstance</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ZookeeperInstance</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(ServiceInstance serviceInstance) {</span></span>
<span class="line"><span style="color:#24292E;">    ServiceInstanceBuilder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Service Name</span></span>
<span class="line"><span style="color:#24292E;">    String serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取元数据</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; metadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 生成的id格式是&quot;host:ip&quot;</span></span>
<span class="line"><span style="color:#24292E;">    String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateId</span><span style="color:#24292E;">(host, port);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ZookeeperInstance是Curator ServiceInstance的payload</span></span>
<span class="line"><span style="color:#24292E;">    ZookeeperInstance zookeeperInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ZookeeperInstance</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, serviceName, metadata);</span></span>
<span class="line"><span style="color:#24292E;">    builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(id).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(serviceName).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(host).</span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">(port)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">payload</span><span style="color:#24292E;">(zookeeperInstance);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>除了上述服务实例发布的功能之外，在服务实例订阅的时候，还会用到 ZookeeperServiceDiscovery 查询服务实例的信息，这些方法都是直接依赖 Apache Curator 实现的，例如，getServices() 方法会调用 Curator ServiceDiscovery 的 queryForNames() 方法查询 Service Name，getInstances() 方法会通过 Curator ServiceDiscovery 的 queryForInstances() 方法查询 Service Instance。</p><h3 id="eventlistener-接口" tabindex="-1">EventListener 接口 <a class="header-anchor" href="#eventlistener-接口" aria-label="Permalink to &quot;EventListener 接口&quot;">​</a></h3><p>ZookeeperServiceDiscovery 除了实现了 ServiceDiscovery 接口之外，还实现了 EventListener 接口，如下图所示：</p>`,14),F=p(`<p>ZookeeperServiceDiscovery 继承关系图</p><p>也就是说，<strong>ZookeeperServiceDiscovery 本身也是 EventListener 实现，可以作为 EventListener 监听某些事件</strong>。下面我们先来看 Dubbo 中 EventListener 接口的定义，其中关注三个方法：onEvent() 方法、getPriority() 方法和 findEventType() 工具方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventListener</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Event</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#B392F0;">EventListener</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Prioritized</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当发生该EventListener对象关注的事件时，该EventListener的onEvent()方法会被调用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onEvent</span><span style="color:#E1E4E8;">(E </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当前EventListener对象被调用的优先级</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPriority</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> MIN_PRIORITY;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取传入的EventListener对象监听何种Event事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Event</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findEventType</span><span style="color:#E1E4E8;">(EventListener&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">listener</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findEventType</span><span style="color:#E1E4E8;">(listener.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Event</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findEventType</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">listenerClass</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Event</span><span style="color:#E1E4E8;">&gt; eventType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检测传入listenerClass是否为Dubbo的EventListener接口实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (listenerClass </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> EventListener.class.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(listenerClass)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            eventType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findParameterizedTypes</span><span style="color:#E1E4E8;">(listenerClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(EventListener</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">findEventType) </span><span style="color:#6A737D;">// 获取listenerClass中定义的Event泛型</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Objects</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">nonNull)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">findAny</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 获取listenerClass父类中定义的Event泛型</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">((Class) </span><span style="color:#B392F0;">findEventType</span><span style="color:#E1E4E8;">(listenerClass.</span><span style="color:#B392F0;">getSuperclass</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> eventType;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// findEventType()方法用来过滤传入的parameterizedType是否为Event或Event子类(这里省略该方法的实现)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">FunctionalInterface</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventListener</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Event</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> java.util.</span><span style="color:#6F42C1;">EventListener</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Prioritized</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当发生该EventListener对象关注的事件时，该EventListener的onEvent()方法会被调用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onEvent</span><span style="color:#24292E;">(E </span><span style="color:#E36209;">event</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当前EventListener对象被调用的优先级</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPriority</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> MIN_PRIORITY;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取传入的EventListener对象监听何种Event事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Event</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findEventType</span><span style="color:#24292E;">(EventListener&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">listener</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findEventType</span><span style="color:#24292E;">(listener.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Event</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findEventType</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">listenerClass</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Event</span><span style="color:#24292E;">&gt; eventType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检测传入listenerClass是否为Dubbo的EventListener接口实现</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (listenerClass </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> EventListener.class.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(listenerClass)) {</span></span>
<span class="line"><span style="color:#24292E;">            eventType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findParameterizedTypes</span><span style="color:#24292E;">(listenerClass)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(EventListener</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">findEventType) </span><span style="color:#6A737D;">// 获取listenerClass中定义的Event泛型</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Objects</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">nonNull)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">findAny</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 获取listenerClass父类中定义的Event泛型</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">((Class) </span><span style="color:#6F42C1;">findEventType</span><span style="color:#24292E;">(listenerClass.</span><span style="color:#6F42C1;">getSuperclass</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> eventType;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// findEventType()方法用来过滤传入的parameterizedType是否为Event或Event子类(这里省略该方法的实现)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Dubbo 中有很多 EventListener 接口的实现，如下图所示：</p>`,4),d=p(`<p>EventListener 继承关系图</p><p>我们先来重点关注 ZookeeperServiceDiscovery 这个实现，在其 onEvent() 方法（以及 addServiceInstancesChangedListener() 方法）中会调用 registerServiceWatcher() 方法重新注册：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onEvent</span><span style="color:#E1E4E8;">(ServiceInstancesChangedEvent event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发生ServiceInstancesChangedEvent事件的Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 重新注册监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">registerServiceWatcher</span><span style="color:#E1E4E8;">(serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerServiceWatcher</span><span style="color:#E1E4E8;">(String serviceName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 构造要监听的path</span></span>
<span class="line"><span style="color:#E1E4E8;">    String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildServicePath</span><span style="color:#E1E4E8;">(serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建监听器ZookeeperServiceDiscoveryChangeWatcher并记录到watcherCaches缓存中</span></span>
<span class="line"><span style="color:#E1E4E8;">    CuratorWatcher watcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> watcherCaches.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(path, key </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZookeeperServiceDiscoveryChangeWatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, serviceName));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在path上添加上面构造的ZookeeperServiceDiscoveryChangeWatcher监听器，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 来监听子节点的变化</span></span>
<span class="line"><span style="color:#E1E4E8;">    curatorFramework.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">usingWatcher</span><span style="color:#E1E4E8;">(watcher).</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(path);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onEvent</span><span style="color:#24292E;">(ServiceInstancesChangedEvent event) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 发生ServiceInstancesChangedEvent事件的Service Name</span></span>
<span class="line"><span style="color:#24292E;">    String serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 重新注册监听器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">registerServiceWatcher</span><span style="color:#24292E;">(serviceName);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerServiceWatcher</span><span style="color:#24292E;">(String serviceName) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构造要监听的path</span></span>
<span class="line"><span style="color:#24292E;">    String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildServicePath</span><span style="color:#24292E;">(serviceName);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建监听器ZookeeperServiceDiscoveryChangeWatcher并记录到watcherCaches缓存中</span></span>
<span class="line"><span style="color:#24292E;">    CuratorWatcher watcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> watcherCaches.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(path, key </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ZookeeperServiceDiscoveryChangeWatcher</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, serviceName));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在path上添加上面构造的ZookeeperServiceDiscoveryChangeWatcher监听器，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 来监听子节点的变化</span></span>
<span class="line"><span style="color:#24292E;">    curatorFramework.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">usingWatcher</span><span style="color:#24292E;">(watcher).</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>ZookeeperServiceDiscoveryChangeWatcher 是 ZookeeperServiceDiscovery 配套的 CuratorWatcher 实现</strong>，其中 process() 方法实现会关注 NodeChildrenChanged 事件和 NodeDataChanged 事件，并调用关联的 ZookeeperServiceDiscovery 对象的 dispatchServiceInstancesChangedEvent() 方法，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(WatchedEvent event) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取监听到的事件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    Watcher.Event.EventType eventType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里只关注NodeChildrenChanged和NodeDataChanged两种事件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (NodeChildrenChanged.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(eventType) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> NodeDataChanged.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(eventType)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用dispatchServiceInstancesChangedEvent()方法，分发ServiceInstancesChangedEvent事件</span></span>
<span class="line"><span style="color:#E1E4E8;">        zookeeperServiceDiscovery.</span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(WatchedEvent event) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取监听到的事件类型</span></span>
<span class="line"><span style="color:#24292E;">    Watcher.Event.EventType eventType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里只关注NodeChildrenChanged和NodeDataChanged两种事件类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (NodeChildrenChanged.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(eventType) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> NodeDataChanged.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(eventType)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用dispatchServiceInstancesChangedEvent()方法，分发ServiceInstancesChangedEvent事件</span></span>
<span class="line"><span style="color:#24292E;">        zookeeperServiceDiscovery.</span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(serviceName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过上面的分析我们可以知道，ZookeeperServiceDiscoveryChangeWatcher 的核心就是将 ZooKeeper 中的事件转换成了 Dubbo 内部的 ServiceInstancesChangedEvent 事件。</p><h3 id="eventdispatcher-接口" tabindex="-1">EventDispatcher 接口 <a class="header-anchor" href="#eventdispatcher-接口" aria-label="Permalink to &quot;EventDispatcher 接口&quot;">​</a></h3><p>通过上面对 ZookeeperServiceDiscovery 实现的分析我们知道，它并没有对 dispatchServiceInstancesChangedEvent() 方法进行覆盖，那么在 ZookeeperServiceDiscoveryChangeWatcher 中调用的 dispatchServiceInstancesChangedEvent() 方法就是 ServiceDiscovery 接口中的默认实现。在该默认实现中，会通过 Dubbo SPI 获取 EventDispatcher 的默认实现，并分发 ServiceInstancesChangedEvent 事件，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatchServiceInstancesChangedEvent</span><span style="color:#E1E4E8;">(ServiceInstancesChangedEvent event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EventDispatcher.</span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatchServiceInstancesChangedEvent</span><span style="color:#24292E;">(ServiceInstancesChangedEvent event) {</span></span>
<span class="line"><span style="color:#24292E;">        EventDispatcher.</span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面我们来看 EventDispatcher 接口的具体定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;direct&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventDispatcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Listenable</span><span style="color:#E1E4E8;">&lt;EventListener&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 该线程池用于串行调用被触发的EventListener，也就是direct模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    Executor DIRECT_EXECUTOR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Runnable</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">run;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将被触发的事件分发给相应的EventListener对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(Event </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取direct模式中使用的线程池</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Executor </span><span style="color:#B392F0;">getExecutor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DIRECT_EXECUTOR;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 工具方法，用于获取EventDispatcher接口的默认实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> EventDispatcher </span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(EventDispatcher.class).</span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;direct&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventDispatcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Listenable</span><span style="color:#24292E;">&lt;EventListener&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该线程池用于串行调用被触发的EventListener，也就是direct模式</span></span>
<span class="line"><span style="color:#24292E;">    Executor DIRECT_EXECUTOR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Runnable</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">run;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将被触发的事件分发给相应的EventListener对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(Event </span><span style="color:#E36209;">event</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取direct模式中使用的线程池</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Executor </span><span style="color:#6F42C1;">getExecutor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DIRECT_EXECUTOR;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 工具方法，用于获取EventDispatcher接口的默认实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> EventDispatcher </span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(EventDispatcher.class).</span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>EventDispatcher 接口被 @SPI 注解修饰，是一个扩展点，Dubbo 提供了两个具体实现------ParallelEventDispatcher 和 DirectEventDispatcher，如下图所示：</p>`,12),g=p(`<p>EventDispatcher 继承关系图</p><p>在 AbstractEventDispatcher 中维护了两个核心字段。</p><ul><li><p>listenersCache（ConcurrentMap&lt;Class&lt;? extends Event&gt;, List&gt; 类型）：用于记录监听各类型事件的 EventListener 集合。在 AbstractEventDispatcher 初始化时，会加载全部 EventListener 实现并调用 addEventListener() 方法添加到 listenersCache 集合中。</p></li><li><p>executor（Executor 类型）：该线程池在 AbstractEventDispatcher 的构造函数中初始化。在 AbstractEventDispatcher 收到相应事件时，由该线程池来触发对应的 EventListener 集合。</p></li></ul><p>AbstractEventDispatcher 中的 addEventListener()、removeEventListener()、getAllEventListeners() 方法都是通过操作 listenersCache 集合实现的，具体实现比较简单，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>AbstractEventDispatcher 中另一个要关注的方法是 dispatch() 方法，该方法<strong>会从 listenersCache 集合中过滤出符合条件的 EventListener 对象，并按照串行或是并行模式进行通知</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(Event event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取通知EventListener的线程池，默认为串行模式，也就是direct实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    Executor executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExecutor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    executor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">sortedListeners</span><span style="color:#E1E4E8;">(entry </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(listener </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (listener </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ConditionalEventListener) { </span><span style="color:#6A737D;">// 针对ConditionalEventListener的特殊处理</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ConditionalEventListener predicateEventListener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ConditionalEventListener) listener;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">predicateEventListener.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(event)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 通知EventListener</span></span>
<span class="line"><span style="color:#E1E4E8;">                    listener.</span><span style="color:#B392F0;">onEvent</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">                });</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 这里的sortedListeners方法会对listenerCache进行过滤和排序</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Stream</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">EventListener</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sortedListeners</span><span style="color:#E1E4E8;">(Predicate</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Map.Entry</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Class</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends Event</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">EventListener</span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> predicate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> listenersCache</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(predicate)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Map.Entry</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(Collection</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">stream)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">sorted</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(Event event) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取通知EventListener的线程池，默认为串行模式，也就是direct实现</span></span>
<span class="line"><span style="color:#24292E;">    Executor executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    executor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">sortedListeners</span><span style="color:#24292E;">(entry </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(listener </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (listener </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ConditionalEventListener) { </span><span style="color:#6A737D;">// 针对ConditionalEventListener的特殊处理</span></span>
<span class="line"><span style="color:#24292E;">                        ConditionalEventListener predicateEventListener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ConditionalEventListener) listener;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">predicateEventListener.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(event)) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 通知EventListener</span></span>
<span class="line"><span style="color:#24292E;">                    listener.</span><span style="color:#6F42C1;">onEvent</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">                });</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 这里的sortedListeners方法会对listenerCache进行过滤和排序</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Stream</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">EventListener</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sortedListeners</span><span style="color:#24292E;">(Predicate</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Map.Entry</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Class</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends Event</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">EventListener</span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> predicate) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> listenersCache</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(predicate)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Map.Entry</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getValue)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(Collection</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">stream)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AbstractEventDispatcher 已经实现了 EventDispatcher 分发 Event 事件、通知 EventListener 的核心逻辑，然后在 ParallelEventDispatcher 和 DirectEventDispatcher 确定是并行通知模式还是串行通知模式即可。</p><p>在 ParallelEventDispatcher 中通知 EventListener 的线程池是 ForkJoinPool，也就是并行模式；在 DirectEventDispatcher 中使用的是 EventDispatcher.DIRECT_EXECUTOR 线程池，也就是串行模式。这两个 EventDispatcher 的具体实现比较简单，这里就不再展示。</p><p>我们回到 ZookeeperServiceDiscovery，在其构造方法中会获取默认的 EventDispatcher 实现对象，并调用 addEventListener() 方法将 ZookeeperServiceDiscovery 对象添加到 listenersCache 集合中监听 ServiceInstancesChangedEvent 事件。ZookeeperServiceDiscovery 直接继承了 ServiceDiscovery 接口中 dispatchServiceInstancesChangedEvent() 方法的默认实现，并没有进行覆盖，在该方法中，会获取默认的 EventDispatcher 实现并调用 dispatch() 方法分发 ServiceInstancesChangedEvent 事件。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在本课时，我们重点介绍了 Dubbo 服务自省方案中服务实例发布和订阅的基础。</p><p>首先，我们说明了 ServiceDiscovery 接口的核心定义，其中定义了服务实例发布和订阅的核心方法。接下来我们分析了以 ZooKeeper 作为注册中心的 ZookeeperServiceDiscovery 实现，其中还讲解了在 ZookeeperServiceDiscovery 上添加监听器的相关实现以及 ZookeeperServiceDiscovery 处理 ServiceInstancesChangedEvent 事件的机制。</p><p>下一课时，我们将继续介绍 Dubbo 服务自省方案中的服务实例发布以及订阅实现，记得按时来听课。</p>`,13);function D(h,A,u,C,S,I){const s=o("Image");return t(),c("div",null,[E,n(s,{alt:"Lark20201229-160604.png",src:"https://s0.lgstatic.com/i/image/M00/8C/4D/Ciqc1F_q45aAGn14AAEh58Guyew441.png"}),a(),y,i,n(s,{alt:"Lark20201229-160606.png",src:"https://s0.lgstatic.com/i/image2/M01/04/32/CgpVE1_q4_iAZ8ARAAEu4mMS65Y213.png"}),a(),v,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/04/18/Cip5yF_petCAV9sXAAB9u4EYOqk073.png"}),a(),F,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/04/19/Cip5yF_petmAI2w9AAC5QQrgGjY394.png"}),a(),d,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/04/19/Cip5yF_pew-AdtkyAAB-Epfg96E814.png"}),a(),g])}const b=e(r,[["render",D]]);export{B as __pageData,b as default};
