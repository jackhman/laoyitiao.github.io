import{_ as e,j as o,o as t,h as c,k as a,f as s,Q as p,s as l}from"./chunks/framework.d3daa342.js";const w=JSON.parse('{"title":"20Tranporter层核心实现：编解码与线程模型一文打尽（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4272) 20  Tranporter 层核心实现：编解码与线程模型一文打尽（下）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4272) 20  Tranporter 层核心实现：编解码与线程模型一文打尽（下）.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4272) 20  Tranporter 层核心实现：编解码与线程模型一文打尽（下）.md"},E=p(`<h1 id="_20tranporter层核心实现-编解码与线程模型一文打尽-下" tabindex="-1">20Tranporter层核心实现：编解码与线程模型一文打尽（下） <a class="header-anchor" href="#_20tranporter层核心实现-编解码与线程模型一文打尽-下" aria-label="Permalink to &quot;20Tranporter层核心实现：编解码与线程模型一文打尽（下）&quot;">​</a></h1><p>在上一课时中，我们深入分析了 Transporter 层中 Server 相关的核心抽象类以及基于 Netty 4 的实现类。本课时我们继续分析 Transporter 层中剩余的核心接口实现，主要涉及 Client 接口、Channel 接口、ChannelHandler 接口，以及相关的关键组件。</p><h3 id="client-继承路线分析" tabindex="-1">Client 继承路线分析 <a class="header-anchor" href="#client-继承路线分析" aria-label="Permalink to &quot;Client 继承路线分析&quot;">​</a></h3><p>在上一课时分析 AbstractEndpoint 的时候可以看到，除了 AbstractServer 这一条继承线之外，还有 AbstractClient 这条继承线，它是对客户端的抽象。AbstractClient 中的核心字段有如下几个。</p><ul><li><p>connectLock（Lock 类型）：在 Client 底层进行连接、断开、重连等操作时，需要获取该锁进行同步。</p></li><li><p>needReconnect（Boolean 类型）：在发送数据之前，会检查 Client 底层的连接是否断开，如果断开了，则会根据 needReconnect 字段，决定是否重连。</p></li><li><p>executor（ExecutorService 类型）：当前 Client 关联的线程池，线程池的具体内容在上一课时已经详细介绍过了，这里不再赘述。</p></li></ul><p>在 AbstractClient 的构造方法中，会解析 URL 初始化 needReconnect 字段和 executor字段，如下示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractClient</span><span style="color:#E1E4E8;">(URL url, ChannelHandler handler) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(url, handler); </span><span style="color:#6A737D;">// 调用父类的构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析URL，初始化needReconnect值</span></span>
<span class="line"><span style="color:#E1E4E8;">    needReconnect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;send.reconnect&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initExecutor</span><span style="color:#E1E4E8;">(url);     </span><span style="color:#6A737D;">// 解析URL，初始化executor</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">doOpen</span><span style="color:#E1E4E8;">();    </span><span style="color:#6A737D;">// 初始化底层的NIO库的相关组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建底层连接</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 省略异常处理的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractClient</span><span style="color:#24292E;">(URL url, ChannelHandler handler) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(url, handler); </span><span style="color:#6A737D;">// 调用父类的构造方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析URL，初始化needReconnect值</span></span>
<span class="line"><span style="color:#24292E;">    needReconnect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;send.reconnect&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initExecutor</span><span style="color:#24292E;">(url);     </span><span style="color:#6A737D;">// 解析URL，初始化executor</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">doOpen</span><span style="color:#24292E;">();    </span><span style="color:#6A737D;">// 初始化底层的NIO库的相关组件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建底层连接</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 省略异常处理的逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与 AbstractServer 类似，AbstractClient 定义了 doOpen()、doClose()、doConnect()和doDisConnect() 四个抽象方法给子类实现。</p><p>下面来看基于 Netty 4 实现的 NettyClient，它继承了 AbstractClient 抽象类，实现了上述四个 do*() 抽象方法，我们这里重点关注 doOpen() 方法和 doConnect() 方法。在 NettyClient 的 doOpen() 方法中会通过 Bootstrap 构建客户端，其中会完成连接超时时间、keepalive 等参数的设置，以及 ChannelHandler 的创建和注册，具体实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doOpen</span><span style="color:#E1E4E8;">() throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建NettyClientHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> NettyClientHandler nettyClientHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NettyClientHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    bootstrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bootstrap</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 创建Bootstrap</span></span>
<span class="line"><span style="color:#E1E4E8;">    bootstrap.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(NIO_EVENT_LOOP_GROUP)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.TCP_NODELAY, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">socketChannelClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置连接超时时间，这里使用到AbstractEndpoint中的connectTimeout字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    bootstrap.</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.CONNECT_TIMEOUT_MILLIS, Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getConnectTimeout</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    bootstrap.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ChannelInitializer&lt;</span><span style="color:#F97583;">SocketChannel</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(SocketChannel </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 心跳请求的时间间隔</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> heartbeatInterval </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UrlUtils.</span><span style="color:#B392F0;">getHeartbeat</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 通过NettyCodecAdapter创建Netty中的编解码器，这里不再重复介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">            NettyCodecAdapter adapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NettyCodecAdapter</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getCodec</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), NettyClient.this);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 注册ChannelHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">            ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;decoder&quot;</span><span style="color:#E1E4E8;">, adapter.</span><span style="color:#B392F0;">getDecoder</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;encoder&quot;</span><span style="color:#E1E4E8;">, adapter.</span><span style="color:#B392F0;">getEncoder</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;client-idle-handler&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IdleStateHandler</span><span style="color:#E1E4E8;">(heartbeatInterval, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, MILLISECONDS))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;handler&quot;</span><span style="color:#E1E4E8;">, nettyClientHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果需要Socks5Proxy，需要添加Socks5ProxyHandler(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doOpen</span><span style="color:#24292E;">() throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建NettyClientHandler</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> NettyClientHandler nettyClientHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NettyClientHandler</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    bootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bootstrap</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 创建Bootstrap</span></span>
<span class="line"><span style="color:#24292E;">    bootstrap.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(NIO_EVENT_LOOP_GROUP)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.TCP_NODELAY, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">socketChannelClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置连接超时时间，这里使用到AbstractEndpoint中的connectTimeout字段</span></span>
<span class="line"><span style="color:#24292E;">    bootstrap.</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.CONNECT_TIMEOUT_MILLIS, Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">getConnectTimeout</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    bootstrap.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 心跳请求的时间间隔</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> heartbeatInterval </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UrlUtils.</span><span style="color:#6F42C1;">getHeartbeat</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 通过NettyCodecAdapter创建Netty中的编解码器，这里不再重复介绍</span></span>
<span class="line"><span style="color:#24292E;">            NettyCodecAdapter adapter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NettyCodecAdapter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getCodec</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), NettyClient.this);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 注册ChannelHandler</span></span>
<span class="line"><span style="color:#24292E;">            ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;decoder&quot;</span><span style="color:#24292E;">, adapter.</span><span style="color:#6F42C1;">getDecoder</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;encoder&quot;</span><span style="color:#24292E;">, adapter.</span><span style="color:#6F42C1;">getEncoder</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;client-idle-handler&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IdleStateHandler</span><span style="color:#24292E;">(heartbeatInterval, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, MILLISECONDS))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;handler&quot;</span><span style="color:#24292E;">, nettyClientHandler);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果需要Socks5Proxy，需要添加Socks5ProxyHandler(略)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>得到的 NettyClient 结构如下图所示：</p>`,11),y=p(`<p>NettyClient 结构图</p><p>NettyClientHandler 的实现方法与上一课时介绍的 NettyServerHandler 类似，同样是实现了 Netty 中的 ChannelDuplexHandler，其中会将所有方法委托给 NettyClient 关联的 ChannelHandler 对象进行处理。两者在 userEventTriggered() 方法的实现上有所不同，NettyServerHandler 在收到 IdleStateEvent 事件时会断开连接，而 NettyClientHandler 则会发送心跳消息，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">userEventTriggered</span><span style="color:#E1E4E8;">(ChannelHandlerContext ctx, Object evt) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (evt </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> IdleStateEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        NettyChannel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NettyChannel.</span><span style="color:#B392F0;">getOrAddChannel</span><span style="color:#E1E4E8;">(ctx.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(), url, handler);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Request req </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        req.</span><span style="color:#B392F0;">setVersion</span><span style="color:#E1E4E8;">(Version.</span><span style="color:#B392F0;">getProtocolVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        req.</span><span style="color:#B392F0;">setTwoWay</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        req.</span><span style="color:#B392F0;">setEvent</span><span style="color:#E1E4E8;">(HEARTBEAT_EVENT); </span><span style="color:#6A737D;">// 发送心跳请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        channel.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(req);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">userEventTriggered</span><span style="color:#E1E4E8;">(ctx, evt);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">userEventTriggered</span><span style="color:#24292E;">(ChannelHandlerContext ctx, Object evt) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (evt </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> IdleStateEvent) {</span></span>
<span class="line"><span style="color:#24292E;">        NettyChannel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NettyChannel.</span><span style="color:#6F42C1;">getOrAddChannel</span><span style="color:#24292E;">(ctx.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(), url, handler);</span></span>
<span class="line"><span style="color:#24292E;">        Request req </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        req.</span><span style="color:#6F42C1;">setVersion</span><span style="color:#24292E;">(Version.</span><span style="color:#6F42C1;">getProtocolVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        req.</span><span style="color:#6F42C1;">setTwoWay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        req.</span><span style="color:#6F42C1;">setEvent</span><span style="color:#24292E;">(HEARTBEAT_EVENT); </span><span style="color:#6A737D;">// 发送心跳请求</span></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(req);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">userEventTriggered</span><span style="color:#24292E;">(ctx, evt);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="channel-继承线分析" tabindex="-1">Channel 继承线分析 <a class="header-anchor" href="#channel-继承线分析" aria-label="Permalink to &quot;Channel 继承线分析&quot;">​</a></h3><p>除了上一课时介绍的 AbstractEndpoint 之外，AbstractChannel 也继承了 AbstractPeer 这个抽象类，同时还继承了 Channel 接口。AbstractChannel 实现非常简单，只是在 send() 方法中检测了底层连接的状态，没有实现具体的发送消息的逻辑。</p><p>这里我们依然以基于 Netty 4 的实现------ NettyChannel 为例，分析它对 AbstractChannel 的实现。NettyChannel 中的核心字段有如下几个。</p><ul><li><p>channel（Channel类型）：Netty 框架中的 Channel，与当前的 Dubbo Channel 对象一一对应。</p></li><li><p>attributes（Map&lt;String, Object&gt;类型）：当前 Channel 中附加属性，都会记录到该 Map 中。NettyChannel 中提供的 getAttribute()、hasAttribute()、setAttribute() 等方法，都是操作该集合。</p></li><li><p>active（AtomicBoolean）：用于标识当前 Channel 是否可用。</p></li></ul><p>另外，在 NettyChannel 中还有一个静态的 Map 集合（CHANNEL_MAP 字段），用来缓存当前 JVM 中 Netty 框架 Channel 与 Dubbo Channel 之间的映射关系。从下图的调用关系中可以看到，NettyChannel 提供了读写 CHANNEL_MAP 集合的方法：</p>`,8),i=p(`<p>NettyChannel 中还有一个要介绍的是 send() 方法，它会通过底层关联的 Netty 框架 Channel，将数据发送到对端。其中，可以通过第二个参数指定是否等待发送操作结束，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(Object message, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> sent) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用AbstractChannel的send()方法检测连接是否可用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(message, sent); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> success </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 依赖Netty框架的Channel发送数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    ChannelFuture future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.</span><span style="color:#B392F0;">writeAndFlush</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sent) { </span><span style="color:#6A737D;">// 等待发送结束，有超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">        timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPositiveParameter</span><span style="color:#E1E4E8;">(TIMEOUT_KEY, DEFAULT_TIMEOUT);</span></span>
<span class="line"><span style="color:#E1E4E8;">        success </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">(timeout);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Throwable cause </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">cause</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cause </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> cause;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 出现异常会调用removeChannelIfDisconnected()方法，在底层连接断开时，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 会清理CHANNEL_MAP缓存(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(Object message, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> sent) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用AbstractChannel的send()方法检测连接是否可用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(message, sent); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 依赖Netty框架的Channel发送数据</span></span>
<span class="line"><span style="color:#24292E;">    ChannelFuture future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sent) { </span><span style="color:#6A737D;">// 等待发送结束，有超时时间</span></span>
<span class="line"><span style="color:#24292E;">        timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPositiveParameter</span><span style="color:#24292E;">(TIMEOUT_KEY, DEFAULT_TIMEOUT);</span></span>
<span class="line"><span style="color:#24292E;">        success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">(timeout);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Throwable cause </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">cause</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cause </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> cause;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 出现异常会调用removeChannelIfDisconnected()方法，在底层连接断开时，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 会清理CHANNEL_MAP缓存(略)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="channelhandler-继承线分析" tabindex="-1">ChannelHandler 继承线分析 <a class="header-anchor" href="#channelhandler-继承线分析" aria-label="Permalink to &quot;ChannelHandler 继承线分析&quot;">​</a></h3><p>前文介绍的 AbstractServer、AbstractClient 以及 Channel 实现，都是通过 AbstractPeer 实现了 ChannelHandler 接口，但只是做了一层简单的委托（也可以说成是装饰器），将全部方法委托给了其底层关联的 ChannelHandler 对象。</p><p>这里我们就深入分析 ChannelHandler 的其他实现类，涉及的实现类如下所示：</p>`,5),d=p(`<p>ChannelHandler 继承关系图</p><p>其中<strong>ChannelHandlerDispatcher</strong> 在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=4269" target="_blank" rel="noreferrer">第 17</a><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=4269" target="_blank" rel="noreferrer">课时</a>已经介绍过了，它负责将多个 ChannelHandler 对象聚合成一个 ChannelHandler 对象。</p><p><strong>ChannelHandlerAdapter</strong>是 ChannelHandler 的一个空实现，TelnetHandlerAdapter 继承了它并实现了 TelnetHandler 接口。至于Dubbo 对 Telnet 的支持，我们会在后面的课时中单独介绍，这里就先不展开分析了。</p><p>从名字上看，<strong>ChannelHandlerDelegate</strong>接口是对另一个 ChannelHandler 对象的封装，它的两个实现类 AbstractChannelHandlerDelegate 和 WrappedChannelHandler 中也仅仅是封装了另一个 ChannelHandler 对象。</p><p>其中，<strong>AbstractChannelHandlerDelegate</strong>有三个实现类，都比较简单，我们来逐个讲解。</p><ul><li><p>MultiMessageHandler：专门处理 MultiMessage 的 ChannelHandler 实现。MultiMessage 是 Exchange 层的一种消息类型，它其中封装了多个消息。在 MultiMessageHandler 收到 MultiMessage 消息的时候，received() 方法会遍历其中的所有消息，并交给底层的 ChannelHandler 对象进行处理。</p></li><li><p>DecodeHandler：专门处理 Decodeable 的 ChannelHandler 实现。实现了 Decodeable 接口的类都会提供了一个 decode() 方法实现对自身的解码，DecodeHandler.received() 方法就是通过该方法得到解码后的消息，然后传递给底层的 ChannelHandler 对象继续处理。</p></li><li><p>HeartbeatHandler：专门处理心跳消息的 ChannelHandler 实现。在 HeartbeatHandler.received() 方法接收心跳请求的时候，会生成相应的心跳响应并返回；在收到心跳响应的时候，会打印相应的日志；在收到其他类型的消息时，会传递给底层的 ChannelHandler 对象进行处理。下面是其核心实现：</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(Channel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setReadTimestamp</span><span style="color:#E1E4E8;">(channel); </span><span style="color:#6A737D;">// 记录最近的读写事件时间戳</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isHeartbeatRequest</span><span style="color:#E1E4E8;">(message)) { </span><span style="color:#6A737D;">// 收到心跳请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        Request req </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Request) message;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (req.</span><span style="color:#B392F0;">isTwoWay</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 返回心跳响应，注意，携带请求的ID</span></span>
<span class="line"><span style="color:#E1E4E8;">            Response res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">(req.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), req.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">setEvent</span><span style="color:#E1E4E8;">(HEARTBEAT_EVENT);</span></span>
<span class="line"><span style="color:#E1E4E8;">            channel.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isHeartbeatResponse</span><span style="color:#E1E4E8;">(message)) { </span><span style="color:#6A737D;">// 收到心跳响应</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 打印日志(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler.</span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(channel, message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(Channel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setReadTimestamp</span><span style="color:#24292E;">(channel); </span><span style="color:#6A737D;">// 记录最近的读写事件时间戳</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isHeartbeatRequest</span><span style="color:#24292E;">(message)) { </span><span style="color:#6A737D;">// 收到心跳请求</span></span>
<span class="line"><span style="color:#24292E;">        Request req </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Request) message;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (req.</span><span style="color:#6F42C1;">isTwoWay</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 返回心跳响应，注意，携带请求的ID</span></span>
<span class="line"><span style="color:#24292E;">            Response res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">(req.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), req.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">setEvent</span><span style="color:#24292E;">(HEARTBEAT_EVENT);</span></span>
<span class="line"><span style="color:#24292E;">            channel.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isHeartbeatResponse</span><span style="color:#24292E;">(message)) { </span><span style="color:#6A737D;">// 收到心跳响应</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 打印日志(略)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    handler.</span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(channel, message);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外，我们可以看到，在 received() 和 send() 方法中，HeartbeatHandler 会将最近一次的读写时间作为附加属性记录到 Channel 中。</p><p>通过上述介绍，我们发现 AbstractChannelHandlerDelegate 下的三个实现，其实都是在原有 ChannelHandler 的基础上添加了一些增强功能，这是典型的装饰器模式的应用。</p><h4 id="dispatcher-与-channelhandler" tabindex="-1">Dispatcher 与 ChannelHandler <a class="header-anchor" href="#dispatcher-与-channelhandler" aria-label="Permalink to &quot;Dispatcher 与 ChannelHandler&quot;">​</a></h4><p>接下来，我们介绍 ChannelHandlerDelegate 接口的另一条继承线------<strong>WrappedChannelHandler</strong>，其子类主要是决定了 Dubbo 以何种线程模型处理收到的事件和消息，就是所谓的&quot;消息派发机制&quot;，与前面介绍的 ThreadPool 有紧密的联系。</p>`,11),u=p(`<p>WrappedChannelHandler 继承关系图</p><p>从上图中我们可以看到，每个 WrappedChannelHandler 实现类的对象都由一个相应的 Dispatcher 实现类创建，下面是 Dispatcher 接口的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(AllDispatcher.NAME) </span><span style="color:#6A737D;">// 默认扩展名是all</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dispatcher</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过URL中的参数可以指定扩展名，覆盖默认扩展名</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Adaptive</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&quot;dispatcher&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;dispather&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;channel.handler&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    ChannelHandler </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(ChannelHandler </span><span style="color:#FFAB70;">handler</span><span style="color:#E1E4E8;">, URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(AllDispatcher.NAME) </span><span style="color:#6A737D;">// 默认扩展名是all</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dispatcher</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过URL中的参数可以指定扩展名，覆盖默认扩展名</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Adaptive</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&quot;dispatcher&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;dispather&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;channel.handler&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    ChannelHandler </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(ChannelHandler </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">, URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>AllDispatcher 创建的是 AllChannelHandler 对象</strong>，它会将所有网络事件以及消息交给关联的线程池进行处理。AllChannelHandler覆盖了 WrappedChannelHandler 中除了 sent() 方法之外的其他网络事件处理方法，将调用其底层的 ChannelHandler 的逻辑放到关联的线程池中执行。</p><p>我们先来看 connect() 方法，其中会将CONNECTED 事件的处理封装成ChannelEventRunnable提交到线程池中执行，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">connected</span><span style="color:#E1E4E8;">(Channel channel) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExecutorService executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExecutorService</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取公共线程池</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将CONNECTED事件的处理封装成ChannelEventRunnable提交到线程池中执行</span></span>
<span class="line"><span style="color:#E1E4E8;">    executor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelEventRunnable</span><span style="color:#E1E4E8;">(channel, handler, ChannelState.CONNECTED));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略异常处理的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connected</span><span style="color:#24292E;">(Channel channel) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    ExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExecutorService</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取公共线程池</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将CONNECTED事件的处理封装成ChannelEventRunnable提交到线程池中执行</span></span>
<span class="line"><span style="color:#24292E;">    executor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelEventRunnable</span><span style="color:#24292E;">(channel, handler, ChannelState.CONNECTED));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略异常处理的逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 getExecutorService() 方法会按照当前端点（Server/Client）的 URL 从 ExecutorRepository 中获取相应的公共线程池。</p><p>disconnected()方法处理连接断开事件，caught() 方法处理异常事件，它们也是按照上述方式实现的，这里不再展开赘述。</p><p>received() 方法会在当前端点收到数据的时候被调用，具体执行流程是先由 IO 线程（也就是 Netty 中的 EventLoopGroup）从二进制流中解码出请求，然后调用 AllChannelHandler 的 received() 方法，其中会将请求提交给线程池执行，执行完后调用 sent()方法，向对端写回响应结果。received() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(Channel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取线程池</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExecutorService executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPreferredExecutorService</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将消息封装成ChannelEventRunnable任务，提交到线程池中执行</span></span>
<span class="line"><span style="color:#E1E4E8;">        executor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelEventRunnable</span><span style="color:#E1E4E8;">(channel, handler, ChannelState.RECEIVED, message));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果线程池满了，请求会被拒绝，这里会根据请求配置决定是否返回一个说明性的响应</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Request </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> RejectedExecutionException){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">sendFeedback</span><span style="color:#E1E4E8;">(channel, (Request) message, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExecutionException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(Channel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取线程池</span></span>
<span class="line"><span style="color:#24292E;">    ExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPreferredExecutorService</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将消息封装成ChannelEventRunnable任务，提交到线程池中执行</span></span>
<span class="line"><span style="color:#24292E;">        executor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelEventRunnable</span><span style="color:#24292E;">(channel, handler, ChannelState.RECEIVED, message));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果线程池满了，请求会被拒绝，这里会根据请求配置决定是否返回一个说明性的响应</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Request </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> RejectedExecutionException){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">sendFeedback</span><span style="color:#24292E;">(channel, (Request) message, t);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExecutionException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>getPreferredExecutorService() 方法对响应做了特殊处理：如果请求在发送的时候指定了关联的线程池，在收到对应的响应消息的时候，会优先根据请求的 ID 查找请求关联的线程池处理响应。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ExecutorService </span><span style="color:#B392F0;">getPreferredExecutorService</span><span style="color:#E1E4E8;">(Object msg) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (msg </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Response) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Response response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Response) msg;</span></span>
<span class="line"><span style="color:#E1E4E8;">        DefaultFuture responseFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DefaultFuture.</span><span style="color:#B392F0;">getFuture</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 获取请求关联的DefaultFuture</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (responseFuture </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSharedExecutorService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 如果请求关联了线程池，则会获取相关的线程来处理响应</span></span>
<span class="line"><span style="color:#E1E4E8;">            ExecutorService executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> responseFuture.</span><span style="color:#B392F0;">getExecutor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (executor </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> executor.</span><span style="color:#B392F0;">isShutdown</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSharedExecutorService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> executor;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 如果是请求消息，则直接使用公共的线程池处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSharedExecutorService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ExecutorService </span><span style="color:#6F42C1;">getPreferredExecutorService</span><span style="color:#24292E;">(Object msg) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (msg </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Response) {</span></span>
<span class="line"><span style="color:#24292E;">        Response response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Response) msg;</span></span>
<span class="line"><span style="color:#24292E;">        DefaultFuture responseFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DefaultFuture.</span><span style="color:#6F42C1;">getFuture</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 获取请求关联的DefaultFuture</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (responseFuture </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSharedExecutorService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果请求关联了线程池，则会获取相关的线程来处理响应</span></span>
<span class="line"><span style="color:#24292E;">            ExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> responseFuture.</span><span style="color:#6F42C1;">getExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (executor </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> executor.</span><span style="color:#6F42C1;">isShutdown</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSharedExecutorService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> executor;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果是请求消息，则直接使用公共的线程池处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSharedExecutorService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里涉及了 Request 和 Response 的概念，是 Exchange 层的概念，在后面会展开介绍，这里你只需要知道它们是不同的消息类型即可。</p><p>注意，AllChannelHandler 并没有覆盖父类的 sent() 方法，也就是说，发送消息是直接在当前线程调用 sent() 方法完成的。</p><p>下面我们来看剩余的 WrappedChannelHandler 的实现。ExecutionChannelHandler（由 ExecutionDispatcher 创建）只会将请求消息派发到线程池进行处理，也就是只重写了 received() 方法。对于响应消息以及其他网络事件（例如，连接建立事件、连接断开事件、心跳消息等），ExecutionChannelHandler 会直接在 IO 线程中进行处理。</p><p>DirectChannelHandler 实现（由 DirectDispatcher 创建）会在 IO 线程中处理所有的消息和网络事件。</p><p>MessageOnlyChannelHandler 实现（由 MessageOnlyDispatcher 创建）会将所有收到的消息提交到线程池处理，其他网络事件则是由 IO 线程直接处理。</p><p>ConnectionOrderedChannelHandler 实现（由 ConnectionOrderedDispatcher 创建）会将收到的消息交给线程池进行处理，对于连接建立以及断开事件，会提交到一个独立的线程池并排队进行处理。在 ConnectionOrderedChannelHandler 的构造方法中，会初始化一个线程池，该线程池的队列长度是固定的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConnectionOrderedChannelHandler</span><span style="color:#E1E4E8;">(ChannelHandler handler, URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(handler, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String threadName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(THREAD_NAME_KEY, DEFAULT_THREAD_NAME);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意，该线程池只有一个线程，队列的长度也是固定的，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 由URL中的connect.queue.capacity参数指定</span></span>
<span class="line"><span style="color:#E1E4E8;">    connectionExecutor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedBlockingQueue&lt;</span><span style="color:#F97583;">Runnable</span><span style="color:#E1E4E8;">&gt;(url.</span><span style="color:#B392F0;">getPositiveParameter</span><span style="color:#E1E4E8;">(CONNECT_QUEUE_CAPACITY, Integer.MAX_VALUE)),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamedThreadFactory</span><span style="color:#E1E4E8;">(threadName, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbortPolicyWithReport</span><span style="color:#E1E4E8;">(threadName, url)</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    queuewarninglimit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(CONNECT_QUEUE_WARNING_SIZE, DEFAULT_CONNECT_QUEUE_WARNING_SIZE);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConnectionOrderedChannelHandler</span><span style="color:#24292E;">(ChannelHandler handler, URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(handler, url);</span></span>
<span class="line"><span style="color:#24292E;">    String threadName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(THREAD_NAME_KEY, DEFAULT_THREAD_NAME);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意，该线程池只有一个线程，队列的长度也是固定的，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 由URL中的connect.queue.capacity参数指定</span></span>
<span class="line"><span style="color:#24292E;">    connectionExecutor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedBlockingQueue&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt;(url.</span><span style="color:#6F42C1;">getPositiveParameter</span><span style="color:#24292E;">(CONNECT_QUEUE_CAPACITY, Integer.MAX_VALUE)),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamedThreadFactory</span><span style="color:#24292E;">(threadName, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbortPolicyWithReport</span><span style="color:#24292E;">(threadName, url)</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    queuewarninglimit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(CONNECT_QUEUE_WARNING_SIZE, DEFAULT_CONNECT_QUEUE_WARNING_SIZE);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ConnectionOrderedChannelHandler 的 connected() 方法和 disconnected() 方法实现中，会将连接建立和断开事件交给上述 connectionExecutor 线程池排队处理。</p><p>在上面介绍 WrappedChannelHandler 各个实现的时候，我们会看到其中有针对 ThreadlessExecutor 这种线程池类型的特殊处理，例如，ExecutionChannelHandler.received() 方法中就有如下的分支逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(Channel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取线程池（请求绑定的线程池或是公共线程池）</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExecutorService executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPreferredExecutorService</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Request) { </span><span style="color:#6A737D;">// 请求消息直接提交给线程池处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        executor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelEventRunnable</span><span style="color:#E1E4E8;">(channel, handler, ChannelState.RECEIVED, message));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (executor </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ThreadlessExecutor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 针对ThreadlessExecutor这种线程池类型的特殊处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        executor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelEventRunnable</span><span style="color:#E1E4E8;">(channel, handler, ChannelState.RECEIVED, message));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        handler.</span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(channel, message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(Channel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取线程池（请求绑定的线程池或是公共线程池）</span></span>
<span class="line"><span style="color:#24292E;">    ExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPreferredExecutorService</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Request) { </span><span style="color:#6A737D;">// 请求消息直接提交给线程池处理</span></span>
<span class="line"><span style="color:#24292E;">        executor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelEventRunnable</span><span style="color:#24292E;">(channel, handler, ChannelState.RECEIVED, message));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (executor </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ThreadlessExecutor) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 针对ThreadlessExecutor这种线程池类型的特殊处理</span></span>
<span class="line"><span style="color:#24292E;">        executor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelEventRunnable</span><span style="color:#24292E;">(channel, handler, ChannelState.RECEIVED, message));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        handler.</span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(channel, message);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="threadlessexecutor-优化" tabindex="-1">ThreadlessExecutor 优化 <a class="header-anchor" href="#threadlessexecutor-优化" aria-label="Permalink to &quot;ThreadlessExecutor 优化&quot;">​</a></h4><p>ThreadlessExecutor 是一种特殊类型的线程池，与其他正常的线程池最主要的区别是：<strong>ThreadlessExecutor 内部不管理任何线程</strong>。</p><p>我们可以调用 ThreadlessExecutor 的execute() 方法，将任务提交给这个线程池，但是这些提交的任务不会被调度到任何线程执行，而是存储在阻塞队列中，只有当其他线程调用 ThreadlessExecutor.waitAndDrain() 方法时才会真正执行。也说就是，执行任务的与调用 waitAndDrain() 方法的是同一个线程。</p><p>**那为什么会有 ThreadlessExecutor 这个实现呢？**这主要是因为在 Dubbo 2.7.5 版本之前，在 WrappedChannelHandler 中会为每个连接启动一个线程池。</p><blockquote><p>老版本中没有 ExecutorRepository 的概念，不会根据 URL 复用同一个线程池，而是通过 SPI 找到 ThreadPool 实现创建新线程池。</p></blockquote><p>此时，Dubbo Consumer 同步请求的线程模型如下图所示：</p>`,28),h=p("<p>Dubbo Consumer 同步请求线程模型</p><p>从图中我们可以看到下面的请求-响应流程：</p><ol><li><p>业务线程发出请求之后，拿到一个 Future 实例。</p></li><li><p>业务线程紧接着调用 Future.get() 阻塞等待请求结果返回。</p></li><li><p>当响应返回之后，交由连接关联的独立线程池进行反序列化等解析处理。</p></li><li><p>待处理完成之后，将业务结果通过 Future.set() 方法返回给业务线程。</p></li></ol><p>在这个设计里面，Consumer 端会维护一个线程池，而且线程池是按照连接隔离的，即每个连接独享一个线程池。这样，当面临需要消费大量服务且并发数比较大的场景时，例如，典型网关类场景，可能会导致 Consumer 端线程个数不断增加，导致线程调度消耗过多 CPU ，也可能因为线程创建过多而导致 OOM。</p><p>为了解决上述问题，Dubbo 在 2.7.5 版本之后，<strong>引入了 ThreadlessExecutor</strong>，将线程模型修改成了下图的样子：</p>",5),C=p(`<p>引入 ThreadlessExecutor 后的结构图</p><ol><li><p>业务线程发出请求之后，拿到一个 Future 对象。</p></li><li><p>业务线程会调用 ThreadlessExecutor.waitAndDrain() 方法，waitAndDrain() 方法会在阻塞队列上等待。</p></li><li><p>当收到响应时，IO 线程会生成一个任务，填充到 ThreadlessExecutor 队列中，</p></li><li><p>业务线程会将上面添加的任务取出，并在本线程中执行。得到业务结果之后，调用 Future.set() 方法进行设置，此时 waitAndDrain() 方法返回。</p></li><li><p>业务线程从 Future 中拿到结果值。</p></li></ol><p>了解了 ThreadlessExecutor 出现的缘由之后，接下来我们再深入了解一下 ThreadlessExecutor 的核心实现。首先是 ThreadlessExecutor 的核心字段，有如下几个。</p><ul><li><p>queue（LinkedBlockingQueue类型）：阻塞队列，用来在 IO 线程和业务线程之间传递任务。</p></li><li><p>waiting、finished（Boolean类型）：ThreadlessExecutor 中的 waitAndDrain() 方法一般与一次 RPC 调用绑定，只会执行一次。当后续再次调用 waitAndDrain() 方法时，会检查 finished 字段，若为true，则此次调用直接返回。当后续再次调用 execute() 方法提交任务时，会根据 waiting 字段决定任务是放入 queue 队列等待业务线程执行，还是直接由 sharedExecutor 线程池执行。</p></li><li><p>sharedExecutor（ExecutorService类型）：ThreadlessExecutor 底层关联的共享线程池，当业务线程已经不再等待响应时，会由该共享线程执行提交的任务。</p></li><li><p>waitingFuture（CompletableFuture类型）：指向请求对应的 DefaultFuture 对象，其具体实现我们会在后面的课时详细展开介绍。</p></li></ul><p><strong>ThreadlessExecutor 的核心逻辑在 execute() 方法和 waitAndDrain() 方法</strong>**。**execute() 方法相对简单，它会根据 waiting 状态决定任务提交到哪里，相关示例代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(Runnable runnable) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (lock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">waiting) { </span><span style="color:#6A737D;">// 判断业务线程是否还在等待响应结果</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 不等待，则直接交给共享线程池处理任务</span></span>
<span class="line"><span style="color:#E1E4E8;">            sharedExecutor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(runnable); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;">// 业务线程还在等待，则将任务写入队列，然后由业务线程自己执行</span></span>
<span class="line"><span style="color:#E1E4E8;">            queue.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(runnable);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(Runnable runnable) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (lock) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">waiting) { </span><span style="color:#6A737D;">// 判断业务线程是否还在等待响应结果</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 不等待，则直接交给共享线程池处理任务</span></span>
<span class="line"><span style="color:#24292E;">            sharedExecutor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(runnable); </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;">// 业务线程还在等待，则将任务写入队列，然后由业务线程自己执行</span></span>
<span class="line"><span style="color:#24292E;">            queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(runnable);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>waitAndDrain() 方法中首先会检测 finished 字段值，然后获取阻塞队列中的全部任务并执行，执行完成之后会修改finished和 waiting 字段，标识当前 ThreadlessExecutor 已使用完毕，无业务线程等待。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">waitAndDrain</span><span style="color:#E1E4E8;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (finished) { </span><span style="color:#6A737D;">// 检测当前ThreadlessExecutor状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取阻塞队列中获取任务</span></span>
<span class="line"><span style="color:#E1E4E8;">    Runnable runnable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue.</span><span style="color:#B392F0;">take</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (lock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        waiting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 修改waiting状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        runnable.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 执行任务</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    runnable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue.</span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 如果阻塞队列中还有其他任务，也需要一并执行</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (runnable </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        runnable.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 省略异常处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        runnable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue.</span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    finished </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 修改finished状态</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">waitAndDrain</span><span style="color:#24292E;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finished) { </span><span style="color:#6A737D;">// 检测当前ThreadlessExecutor状态</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取阻塞队列中获取任务</span></span>
<span class="line"><span style="color:#24292E;">    Runnable runnable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (lock) {</span></span>
<span class="line"><span style="color:#24292E;">        waiting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 修改waiting状态</span></span>
<span class="line"><span style="color:#24292E;">        runnable.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 执行任务</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    runnable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 如果阻塞队列中还有其他任务，也需要一并执行</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (runnable </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        runnable.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 省略异常处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">        runnable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    finished </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 修改finished状态</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到此为止，Transporter 层对 ChannelHandler 的实现就介绍完了，其中涉及了多个 ChannelHandler 的装饰器，为了帮助你更好地理解，这里我们回到 NettyServer 中，看看它是如何对上层 ChannelHandler 进行封装的。</p><p>在 NettyServer 的构造方法中会调用 ChannelHandlers.wrap() 方法对传入的 ChannelHandler 对象进行修饰：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> ChannelHandler </span><span style="color:#B392F0;">wrapInternal</span><span style="color:#E1E4E8;">(ChannelHandler handler, URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MultiMessageHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HeartbeatHandler</span><span style="color:#E1E4E8;">(ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Dispatcher.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">getAdaptiveExtension</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(handler, url)));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> ChannelHandler </span><span style="color:#6F42C1;">wrapInternal</span><span style="color:#24292E;">(ChannelHandler handler, URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MultiMessageHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HeartbeatHandler</span><span style="color:#24292E;">(ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Dispatcher.class)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">getAdaptiveExtension</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(handler, url)));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>结合前面的分析，我们可以得到下面这张图：</p>`,12),F=l("p",null,"Server 端 ChannelHandler 结构图",-1),A=l("p",null,"我们可以在创建 NettyServerHandler 的地方添加断点 Debug 得到下图，也印证了上图的内容：",-1),D=l("h3",{id:"总结",tabindex:"-1"},[s("总结 "),l("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),g=l("p",null,"本课时我们重点介绍了 Dubbo Transporter 层中 Client、 Channel、ChannelHandler 相关的实现以及优化。",-1),b=l("p",null,"首先我们介绍了 AbstractClient 抽象接口以及基于 Netty 4 的 NettyClient 实现。接下来，介绍了 AbstractChannel 抽象类以及 NettyChannel 实现。最后，我们深入分析了 ChannelHandler 接口实现，其中详细分析 WrappedChannelHandler 等关键 ChannelHandler 实现，以及 ThreadlessExecutor 优化。",-1),v=l("p",null,"关于Dubbo 的 Transporter 层，你若还有什么疑问或想法，欢迎你留言跟我分享。",-1);function _(x,T,B,m,H,N){const n=o("Image");return t(),c("div",null,[E,a(n,{alt:"Lark20200930-161759.png",src:"https://s0.lgstatic.com/i/image/M00/5A/2F/Ciqc1F90P1yAYThvAADLV6SJeac973.png"}),s(),y,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/58/FF/CgqCHl9wcRiAZFTaAADTxIPND7k175.png"}),s(),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/58/F3/Ciqc1F9wcSGAXo7JAANZ2BjquOE739.png"}),s(),d,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/58/FF/CgqCHl9wcTGAdInYAAJOSSxusf4539.png"}),s(),u,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/58/FF/CgqCHl9wcUWAY3b0AAFKI4e5Oa0017.png"}),s(),h,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/58/FF/CgqCHl9wcVCAQdJjAAFE8eFivcY750.png"}),s(),C,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/58/F4/Ciqc1F9wcV-AFAcTAADpElrp-Wc888.png"}),s(),F,A,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/58/FF/CgqCHl9wcWaAJVA3AACBSF4eCzg786.png"}),s(),D,g,b,v])}const S=e(r,[["render",_]]);export{w as __pageData,S as default};
