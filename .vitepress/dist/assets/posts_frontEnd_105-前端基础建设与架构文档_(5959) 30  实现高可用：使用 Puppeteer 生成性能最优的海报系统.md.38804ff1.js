import{_ as o,j as e,o as t,g as c,k as a,Q as l,s,h as p}from"./chunks/framework.e0c66c3f.js";const b=JSON.parse('{"title":"Puppeteer 介绍和原理 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5959) 30  实现高可用：使用 Puppeteer 生成性能最优的海报系统.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5959) 30  实现高可用：使用 Puppeteer 生成性能最优的海报系统.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5959) 30  实现高可用：使用 Puppeteer 生成性能最优的海报系统.md"},E=l(`<p>在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5957&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 28 讲&quot;设计性能守卫系统：完善 CI/CD 流程&quot;</a>中我们提到了 Puppeteer。事实上，以 Puppeteer 为代表的 Headless 浏览器在 Node.js 中的应用极为广泛，这一讲，就让我们对 Puppeteer 进行深入分析和应用。</p><h3 id="puppeteer-介绍和原理" tabindex="-1">Puppeteer 介绍和原理 <a class="header-anchor" href="#puppeteer-介绍和原理" aria-label="Permalink to &quot;Puppeteer 介绍和原理&quot;">​</a></h3><p>我们先对 Puppeteer 进行一个基本介绍。（<a href="https://github.com/puppeteer?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Puppeteer 官方地址</a>）</p><blockquote><p>Puppeteer 是一个 Node 库，它提供了一整套高级 API，通过 DevTools 协议控制 Chromium 或 Chrome。正如其翻译为&quot;操纵木偶的人&quot;一样，你可以通过 Puppeteer 提供的 API 直接控制 Chrome，模拟大部分用户操作，进行 UI 测试或者作为爬虫访问页面来收集数据。</p></blockquote><p>整个定义非常好理解，这里需要开发者注意的是，Puppeteer 在 1.7.0 版本之后，会同时给开发者提供：</p><ul><li><p>Puppeteer</p></li><li><p>Puppeteer-core</p></li></ul><p>两个版本。它们的区别在于载入安装 Puppeteer 时，是否会下载 Chromium。Puppeteer-core 默认不下载 Chromium，同时会忽略所有 puppeteer_* 环境变量。对于开发者来说，使用 Puppeteer-core 无疑更加轻便，但是<strong>需要提前保证环境中已经具有可执行的 Chromium</strong> （具体说明可见<a href="https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#puppeteer-vs-puppeteer-core?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">puppeteer vs puppeteer-core</a>）。</p><p>具体 Puppeteer 的应用场景有：</p><ul><li><p>为网页生成页面 PDF 或者截取图片；</p></li><li><p>抓取 SPA（单页应用）并生成预渲染内容；</p></li><li><p>自动提交表单，进行 UI 测试、键盘输入等；</p></li><li><p>创建一个随时更新的自动化测试环境，使用最新的 JavaScript 和浏览器功能直接在最新版本的 Chrome 中执行测试；</p></li><li><p>捕获网站的<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">timeline trace</a>，用来帮助分析性能问题；</p></li><li><p>测试浏览器扩展。</p></li></ul><p>下面我们就梳理一些 Puppeteer 应用的重点场景，并详细介绍如何使用 Puppeteer 实现一个高性能的海报 Node.js 服务。</p><h3 id="puppeteer-在-ssr-中的应用" tabindex="-1">Puppeteer 在 SSR 中的应用 <a class="header-anchor" href="#puppeteer-在-ssr-中的应用" aria-label="Permalink to &quot;Puppeteer 在 SSR 中的应用&quot;">​</a></h3><p>区别于第 27 讲介绍的<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5956&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">&quot;同构渲染架构：实现一个 SSR 应用&quot;</a>，使用 Puppeteer 实现服务端预渲染出发点完全不同。这种方案最大的好处是不需要对项目代码进行任何调整，却能获取到 SSR 应用的收益。当然，相比同构渲染，基于 Puppeteer 技术的 SSR 在灵活性和扩展性上都有所局限。甚至在 Node.js 端渲染的性能成本也较高，不过该技术也逐渐落地，并在很多场景发挥了重要价值。</p><p>比如对于这样的一个页面，代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;container&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- Populated by the JS below. --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">// 使用 JavaScript 脚本，进行 CSR 渲染</span></span>
<span class="line"><span style="color:#E1E4E8;">function renderPosts(posts, container) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  const html </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> posts.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">html</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">post</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">html</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;li class=&quot;post&quot;&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        &lt;h2&gt;\${</span><span style="color:#E1E4E8;">post</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">title</span><span style="color:#9ECBFF;">}&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        &lt;div class=&quot;summary&quot;&gt;\${</span><span style="color:#E1E4E8;">post</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">summary</span><span style="color:#9ECBFF;">}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        &lt;p&gt;\${</span><span style="color:#E1E4E8;">post</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">content</span><span style="color:#9ECBFF;">}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;/li&gt;\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  container.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`&lt;ul id=&quot;posts&quot;&gt;\${</span><span style="color:#E1E4E8;">html</span><span style="color:#9ECBFF;">}&lt;/ul&gt;\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">(async() =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  const container </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#container&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 发送数据请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  const posts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/posts&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> resp.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">renderPosts</span><span style="color:#E1E4E8;">(posts, container);</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;container&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- Populated by the JS below. --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">// 使用 JavaScript 脚本，进行 CSR 渲染</span></span>
<span class="line"><span style="color:#24292E;">function renderPosts(posts, container) {</span></span>
<span class="line"><span style="color:#24292E;">  const html </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> posts.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">html</span><span style="color:#24292E;">, </span><span style="color:#E36209;">post</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">html</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">      &lt;li class=&quot;post&quot;&gt;</span></span>
<span class="line"><span style="color:#032F62;">        &lt;h2&gt;\${</span><span style="color:#24292E;">post</span><span style="color:#032F62;">.</span><span style="color:#24292E;">title</span><span style="color:#032F62;">}&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#032F62;">        &lt;div class=&quot;summary&quot;&gt;\${</span><span style="color:#24292E;">post</span><span style="color:#032F62;">.</span><span style="color:#24292E;">summary</span><span style="color:#032F62;">}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#032F62;">        &lt;p&gt;\${</span><span style="color:#24292E;">post</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#032F62;">      &lt;/li&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  container.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`&lt;ul id=&quot;posts&quot;&gt;\${</span><span style="color:#24292E;">html</span><span style="color:#032F62;">}&lt;/ul&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">(async() =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  const container </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#container&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 发送数据请求</span></span>
<span class="line"><span style="color:#24292E;">  const posts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/posts&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> resp.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">renderPosts</span><span style="color:#24292E;">(posts, container);</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>该页面是一个典型的 CSR 页面，依靠 Ajax，实现了页面动态化渲染。</p><p>当在 Node.js 端使用 Puppeteer 渲染时，我们可以实现<code>ssr.mjs</code>，完成渲染任务，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> puppeteer from &#39;puppeteer&#39;;</span></span>
<span class="line"><span style="color:#6A737D;">// 将已经渲染过的页面，缓存在内存中</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> RENDER_CACHE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">async function </span><span style="color:#B392F0;">ssr</span><span style="color:#E1E4E8;">(url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 命中缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (RENDER_CACHE.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(url)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {html</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> RENDER_CACHE.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(url), ttRenderMs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用 Puppeteer launch 一个无头浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> browser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await puppeteer.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await browser.</span><span style="color:#B392F0;">newPage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 访问页面地址直到页面网络状态为 idle</span></span>
<span class="line"><span style="color:#E1E4E8;">    await page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(url, {waitUntil</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;networkidle0&#39;</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 确保 #posts 节点已经存在</span></span>
<span class="line"><span style="color:#E1E4E8;">    await page.</span><span style="color:#B392F0;">waitForSelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#posts&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;page.goto/waitForSelector timed out.&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 获取 html 内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> html </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await page.</span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 关闭无头浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">  await browser.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ttRenderMs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(\`Headless rendered page in</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \${ttRenderMs}ms\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 进行缓存存储</span></span>
<span class="line"><span style="color:#E1E4E8;">  RENDER_CACHE.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(url, html);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {html, ttRenderMs};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">export {ssr as </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> puppeteer from &#39;puppeteer&#39;;</span></span>
<span class="line"><span style="color:#6A737D;">// 将已经渲染过的页面，缓存在内存中</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> RENDER_CACHE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">async function </span><span style="color:#6F42C1;">ssr</span><span style="color:#24292E;">(url) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 命中缓存</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (RENDER_CACHE.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(url)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {html</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> RENDER_CACHE.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(url), ttRenderMs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用 Puppeteer launch 一个无头浏览器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> browser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await puppeteer.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await browser.</span><span style="color:#6F42C1;">newPage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 访问页面地址直到页面网络状态为 idle</span></span>
<span class="line"><span style="color:#24292E;">    await page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(url, {waitUntil</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;networkidle0&#39;</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 确保 #posts 节点已经存在</span></span>
<span class="line"><span style="color:#24292E;">    await page.</span><span style="color:#6F42C1;">waitForSelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#posts&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;page.goto/waitForSelector timed out.&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 获取 html 内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> html </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await page.</span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 关闭无头浏览器</span></span>
<span class="line"><span style="color:#24292E;">  await browser.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ttRenderMs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(\`Headless rendered page in</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \${ttRenderMs}ms\`);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 进行缓存存储</span></span>
<span class="line"><span style="color:#24292E;">  RENDER_CACHE.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(url, html);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {html, ttRenderMs};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">export {ssr as </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">};</span></span></code></pre></div><p>对应<code>server.mjs</code>代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express from &#39;express&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ssr from &#39;./ssr.mjs&#39;;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> (req, res, next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 调用 SSR 方法渲染页面</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {html, ttRenderMs} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">ssr</span><span style="color:#E1E4E8;">(\`xxx</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.html\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Server-Timing&#39;</span><span style="color:#E1E4E8;">, \`Prerender;dur</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">\${ttRenderMs};desc</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Headless render time (ms)&quot;</span><span style="color:#E1E4E8;">\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(html);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Server started. Press Ctrl+C to quit&#39;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express from &#39;express&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ssr from &#39;./ssr.mjs&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> (req, res, next) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 调用 SSR 方法渲染页面</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {html, ttRenderMs} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">ssr</span><span style="color:#24292E;">(\`xxx</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">index.html\`);</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Server-Timing&#39;</span><span style="color:#24292E;">, \`Prerender;dur</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">\${ttRenderMs};desc</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Headless render time (ms)&quot;</span><span style="color:#24292E;">\`);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(html);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Server started. Press Ctrl+C to quit&#39;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>当然上述实现比较简陋，只是进行原理说明。如果更进一步，我们可以从以下几个角度进行优化：</p><ul><li><p>改造浏览器端代码，防止重复请求接口；</p></li><li><p>在 Node.js 端，abort 掉不必要的请求，以得到更快的服务端渲染响应速度；</p></li><li><p>将关键资源内连进 HTML；</p></li><li><p>自动压缩静态资源；</p></li><li><p>在 Node.js 端，渲染页面时，重复利用 Chrome 实例。</p></li></ul><p>这里我们用简单代码进行说明：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express from &#39;express&#39;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> puppeteer from &#39;puppeteer&#39;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ssr from &#39;./ssr.mjs&#39;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 重复使用 Chrome 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  let browserWSEndpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> (req, res, next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">browserWSEndpoint) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 一下两行代码不必随着渲染重复执行</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> browser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await puppeteer.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      browserWSEndpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await browser.</span><span style="color:#B392F0;">wsEndpoint</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`\${req.protocol}</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//\${req.get(&#39;host&#39;)}/index.html\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {html} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">ssr</span><span style="color:#E1E4E8;">(url, browserWSEndpoint);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(html);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express from &#39;express&#39;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> puppeteer from &#39;puppeteer&#39;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ssr from &#39;./ssr.mjs&#39;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 重复使用 Chrome 实例</span></span>
<span class="line"><span style="color:#24292E;">  let browserWSEndpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> (req, res, next) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">browserWSEndpoint) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 一下两行代码不必随着渲染重复执行</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> browser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await puppeteer.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      browserWSEndpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await browser.</span><span style="color:#6F42C1;">wsEndpoint</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`\${req.protocol}</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//\${req.get(&#39;host&#39;)}/index.html\`;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {html} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">ssr</span><span style="color:#24292E;">(url, browserWSEndpoint);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(html);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p>至此，我们从原理和代码层面分析了 Puppeteer 在 SSR 中的应用。接下来我们来了解更多的 Puppeteer 使用场景，请你继续阅读。</p><h3 id="puppeteer-在-ui-测试中的应用" tabindex="-1">Puppeteer 在 UI 测试中的应用 <a class="header-anchor" href="#puppeteer-在-ui-测试中的应用" aria-label="Permalink to &quot;Puppeteer 在 UI 测试中的应用&quot;">​</a></h3><p>Puppeteer 在 UI 测试（即端到端测试）中也可以大显身手，比如和 Jest 结合，通过断言能力实现一个完备的端到端测试系统。</p><p>比如下面代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> puppeteer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;puppeteer&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 测试页面 title 符合预期</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;baidu title is correct&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 启动一个无头浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> browser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await puppeteer.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 通过无头浏览器访问页面</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await browser.</span><span style="color:#B392F0;">newPage</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  await page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://xxxxx&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取页面 title</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await page.</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用 Jest 的 test 和 expect 两个全局函数进行断言</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(title).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xxxx&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  await browser.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> puppeteer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;puppeteer&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 测试页面 title 符合预期</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;baidu title is correct&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 启动一个无头浏览器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> browser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await puppeteer.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 通过无头浏览器访问页面</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await browser.</span><span style="color:#6F42C1;">newPage</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  await page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://xxxxx&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取页面 title</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await page.</span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用 Jest 的 test 和 expect 两个全局函数进行断言</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(title).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xxxx&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  await browser.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>上面代码简单清晰地勾勒出了 Puppeteer 结合 Jest 实现端到端测试的场景。实际上，现在流行的主流端到端测试框架，比如 Cypress 原理都如上代码所示。</p><p>接下来，我们来分析 Puppeteer 结合 Lighthouse 应用场景。</p><h3 id="puppeteer-结合-lighthouse-应用场景" tabindex="-1">Puppeteer 结合 Lighthouse 应用场景 <a class="header-anchor" href="#puppeteer-结合-lighthouse-应用场景" aria-label="Permalink to &quot;Puppeteer 结合 Lighthouse 应用场景&quot;">​</a></h3><p>在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5957&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 28 讲&quot;设计性能守卫系统：完善 CI/CD 流程&quot;</a>中我们也提到了 Lighthouse，既然 Puppeteer 可以和 Jest 结合实现一个端到端测试框架，当然也可以和 Lighthouse 结合------这就是一个简单的性能守卫系统的雏形。</p><p>我们再通过代码来说明，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> chromeLauncher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;chrome-launcher&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> puppeteer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;puppeteer&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> lighthouse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lighthouse&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lighthouse/lighthouse-core/config/lr-desktop-config.js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> reportGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lighthouse/lighthouse-core/report/report-generator&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> util </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;util&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> fs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 默认配置 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> opts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logLevel</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        output</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;json&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        disableDeviceEmulation</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        defaultViewport</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">900</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        chromeFlags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--disable-mobile-emulation&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 使用 chromeLauncher 启动一个 chrome 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> chrome </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await chromeLauncher.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;">(opts);</span></span>
<span class="line"><span style="color:#E1E4E8;">    opts.port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chrome.port;</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 puppeteer.connect 连接 chrome 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await util.</span><span style="color:#B392F0;">promisify</span><span style="color:#E1E4E8;">(request)(\`http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:\${opts.port}/json/version\`);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {webSocketDebuggerUrl} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JSON.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(resp.body);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> browser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await puppeteer.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">({browserWSEndpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> webSocketDebuggerUrl});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Puppeteer 访问逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (await browser.</span><span style="color:#B392F0;">pages</span><span style="color:#E1E4E8;">())[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    await page.</span><span style="color:#B392F0;">setViewport</span><span style="color:#E1E4E8;">({ width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1200</span><span style="color:#E1E4E8;">, height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">900</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 lighthouse 产出报告</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> report </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">lighthouse</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(), opts, config).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(results </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> results;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> html </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reportGenerator.</span><span style="color:#B392F0;">generateReport</span><span style="color:#E1E4E8;">(report.lhr, </span><span style="color:#9ECBFF;">&#39;html&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reportGenerator.</span><span style="color:#B392F0;">generateReport</span><span style="color:#E1E4E8;">(report.lhr, </span><span style="color:#9ECBFF;">&#39;json&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    await browser.</span><span style="color:#B392F0;">disconnect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    await chrome.</span><span style="color:#B392F0;">kill</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 将报告写入文件系统</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;report.html&#39;</span><span style="color:#E1E4E8;">, html, (err) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;report.json&#39;</span><span style="color:#E1E4E8;">, json, (err) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> chromeLauncher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;chrome-launcher&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> puppeteer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;puppeteer&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> lighthouse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lighthouse&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lighthouse/lighthouse-core/config/lr-desktop-config.js&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> reportGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lighthouse/lighthouse-core/report/report-generator&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> util </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;util&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 默认配置 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> opts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        logLevel</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        output</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;json&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        disableDeviceEmulation</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        defaultViewport</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">900</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        chromeFlags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--disable-mobile-emulation&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 使用 chromeLauncher 启动一个 chrome 实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> chrome </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await chromeLauncher.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;">(opts);</span></span>
<span class="line"><span style="color:#24292E;">    opts.port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chrome.port;</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 puppeteer.connect 连接 chrome 实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await util.</span><span style="color:#6F42C1;">promisify</span><span style="color:#24292E;">(request)(\`http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:\${opts.port}/json/version\`);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {webSocketDebuggerUrl} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JSON.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(resp.body);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> browser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await puppeteer.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">({browserWSEndpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> webSocketDebuggerUrl});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Puppeteer 访问逻辑</span></span>
<span class="line"><span style="color:#24292E;">    page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (await browser.</span><span style="color:#6F42C1;">pages</span><span style="color:#24292E;">())[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    await page.</span><span style="color:#6F42C1;">setViewport</span><span style="color:#24292E;">({ width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1200</span><span style="color:#24292E;">, height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">900</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(page.</span><span style="color:#6F42C1;">url</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 lighthouse 产出报告</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> report </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">lighthouse</span><span style="color:#24292E;">(page.</span><span style="color:#6F42C1;">url</span><span style="color:#24292E;">(), opts, config).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(results </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> results;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> html </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reportGenerator.</span><span style="color:#6F42C1;">generateReport</span><span style="color:#24292E;">(report.lhr, </span><span style="color:#032F62;">&#39;html&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reportGenerator.</span><span style="color:#6F42C1;">generateReport</span><span style="color:#24292E;">(report.lhr, </span><span style="color:#032F62;">&#39;json&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    await browser.</span><span style="color:#6F42C1;">disconnect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    await chrome.</span><span style="color:#6F42C1;">kill</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 将报告写入文件系统</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;report.html&#39;</span><span style="color:#24292E;">, html, (err) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;report.json&#39;</span><span style="color:#24292E;">, json, (err) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><p>整体流程非常清晰，是一个典型的 Puppeteer 与 Lighthouse 结合的案例。事实上，我们看到 Puppeteer 或 Headless 浏览器可以和多个领域能力相结合，在 Node.js 服务上实现平台化能力。接下来，我们再看最后一个案例，请读者继续阅读。</p><h3 id="puppeteer-实现海报-node-js-服务" tabindex="-1">Puppeteer 实现海报 Node.js 服务 <a class="header-anchor" href="#puppeteer-实现海报-node-js-服务" aria-label="Permalink to &quot;Puppeteer 实现海报 Node.js 服务&quot;">​</a></h3><p>社区上我们常见生成海报的技术分享。应用场景很多，比如文稿中划线，进行&quot;金句分享&quot;，如下图所示：</p>`,37),y=s("p",null,[p("一般来说，生成海报可以使用"),s("a",{href:"https://github.com/niklasvh/html2canvas?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"html2canvas"),p("这样的类库完成，这里面的技术难点主要有跨域处理、分页处理、页面截图时机处理等。整体来说，并不难实现，但是稳定性一般。另一种生成海报的方式就是使用 Puppeteer，构建一个 Node.js 服务来做页面截图。")],-1),i=s("p",null,"下面我们来实现一个名叫 posterMan 的海报服务，整体技术链路如下图：",-1),F=s("p",null,"核心技术无外乎使用 Puppeteer，访问页面并截图，这与前面几个场景是一样的，如下图所示：",-1),u=s("p",null,[p("这里需要特别强调的是，为了实现最好的性能，我们"),s("strong",null,"设计了一个链接池来存储 Puppeteer 实例"),p("，以备所需，如下图所示：")],-1),g=l(`<p>在实现上，我们依赖<a href="https://www.npmjs.com/package/generic-pool?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">generic-pool</a>库，这个库提供了 Promise 风格的通用池，可以用来对一些高消耗、高成本资源的调用实现<strong>防抖或拒绝服务</strong>能力，一个典型场景是对数据库的连接。这里我们把它用于 Puppeteer 实例的创建，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> puppeteer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;puppeteer&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> genericPool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;generic-pool&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> createPuppeteerPool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// pool 的最大容量</span></span>
<span class="line"><span style="color:#E1E4E8;">  max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// pool 的最小容量</span></span>
<span class="line"><span style="color:#E1E4E8;">  min </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 连接在池中保持空闲而不被回收的最小时间值</span></span>
<span class="line"><span style="color:#E1E4E8;">  idleTimeoutMillis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最大使用数</span></span>
<span class="line"><span style="color:#E1E4E8;">  maxUses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在连接池交付实例前是否先经过 factory.validate 测试</span></span>
<span class="line"><span style="color:#E1E4E8;">  testOnBorrow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  puppeteerArgs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  validator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...otherConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 创建实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      puppeteer.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;">(puppeteerArgs).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(instance </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        instance.useCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 销毁实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    destroy</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 验证实例可用性</span></span>
<span class="line"><span style="color:#E1E4E8;">    validate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validator</span><span style="color:#E1E4E8;">(instance).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(valid </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// maxUses 小于 0 或者 instance 使用计数小于 maxUses 时可用</span></span>
<span class="line"><span style="color:#E1E4E8;">        Promise.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(valid </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (maxUses </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> instance.useCount </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> maxUses))</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    max,</span></span>
<span class="line"><span style="color:#E1E4E8;">    min,</span></span>
<span class="line"><span style="color:#E1E4E8;">    idleTimeoutMillis,</span></span>
<span class="line"><span style="color:#E1E4E8;">    testOnBorrow,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...otherConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建连接池</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> pool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> genericPool.</span><span style="color:#B392F0;">createPool</span><span style="color:#E1E4E8;">(factory, config)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> genericAcquire </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pool.acquire.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(pool)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 池中资源连接时进行的操作</span></span>
<span class="line"><span style="color:#E1E4E8;">  pool.acquire </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">genericAcquire</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(instance </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance.useCount </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  pool.use </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fn </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    let resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> pool</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">acquire</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(r </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> r</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(fn)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">          pool.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">(resource)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          pool.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">(resource)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> pool</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> createPuppeteerPool</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> puppeteer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;puppeteer&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> genericPool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;generic-pool&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> createPuppeteerPool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// pool 的最大容量</span></span>
<span class="line"><span style="color:#24292E;">  max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// pool 的最小容量</span></span>
<span class="line"><span style="color:#24292E;">  min </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 连接在池中保持空闲而不被回收的最小时间值</span></span>
<span class="line"><span style="color:#24292E;">  idleTimeoutMillis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 最大使用数</span></span>
<span class="line"><span style="color:#24292E;">  maxUses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在连接池交付实例前是否先经过 factory.validate 测试</span></span>
<span class="line"><span style="color:#24292E;">  testOnBorrow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  puppeteerArgs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">  validator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  ...otherConfig</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 创建实例</span></span>
<span class="line"><span style="color:#24292E;">    create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      puppeteer.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;">(puppeteerArgs).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(instance </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        instance.useCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 销毁实例</span></span>
<span class="line"><span style="color:#24292E;">    destroy</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      instance.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 验证实例可用性</span></span>
<span class="line"><span style="color:#24292E;">    validate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validator</span><span style="color:#24292E;">(instance).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(valid </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// maxUses 小于 0 或者 instance 使用计数小于 maxUses 时可用</span></span>
<span class="line"><span style="color:#24292E;">        Promise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(valid </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (maxUses </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> instance.useCount </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> maxUses))</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    max,</span></span>
<span class="line"><span style="color:#24292E;">    min,</span></span>
<span class="line"><span style="color:#24292E;">    idleTimeoutMillis,</span></span>
<span class="line"><span style="color:#24292E;">    testOnBorrow,</span></span>
<span class="line"><span style="color:#24292E;">    ...otherConfig</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建连接池</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> genericPool.</span><span style="color:#6F42C1;">createPool</span><span style="color:#24292E;">(factory, config)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> genericAcquire </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool.acquire.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(pool)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 池中资源连接时进行的操作</span></span>
<span class="line"><span style="color:#24292E;">  pool.acquire </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">genericAcquire</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(instance </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      instance.useCount </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  pool.use </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    let resource</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pool</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">acquire</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(r </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> r</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(fn)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#24292E;">          pool.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">(resource)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          pool.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">(resource)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pool</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> createPuppeteerPool</span></span></code></pre></div><p>使用连接池的方式也很简单，如下代码，<code>./pool.js</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> pool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPuppeteerPool</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  puppeteerArgs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> config.browserArgs</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pool</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPuppeteerPool</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  puppeteerArgs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> config.browserArgs</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool</span></span></code></pre></div><p>有了&quot;武器弹药&quot;，我们来看看渲染一个页面为海报的具体逻辑。如下代码所示<code>render</code>方法，该方法支持接受一个 URL 也支持接受具体的 HTML 字符串去生成相应海报：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 获取连接池</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> pool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./pool&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./config&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ctx, handleFetchPicoImageError) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用连接池资源</span></span>
<span class="line"><span style="color:#E1E4E8;">  pool.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(async browser </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { body, query } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 打开新的页面</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await browser.</span><span style="color:#B392F0;">newPage</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 服务支持直接传递 HTML 字符串内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    let html </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 从请求服务的 query 获取默认参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      width </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">480</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ratio</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> deviceScaleFactor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;png&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      filename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;poster&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      waitUntil </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;domcontentloaded&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      quality </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      omitBackground,</span></span>
<span class="line"><span style="color:#E1E4E8;">      fullPage,</span></span>
<span class="line"><span style="color:#E1E4E8;">      url,</span></span>
<span class="line"><span style="color:#E1E4E8;">      useCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;true&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      usePicoAutoJPG </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> query</span></span>
<span class="line"><span style="color:#E1E4E8;">    let image</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// 设置浏览器视口</span></span>
<span class="line"><span style="color:#E1E4E8;">      await page.</span><span style="color:#B392F0;">setViewport</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(width),</span></span>
<span class="line"><span style="color:#E1E4E8;">        height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(height),</span></span>
<span class="line"><span style="color:#E1E4E8;">        deviceScaleFactor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(deviceScaleFactor)</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (html.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.25e6</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image size out of limits, at most 1 MB&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 访问 URL 页面</span></span>
<span class="line"><span style="color:#E1E4E8;">      await page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(url </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> \`data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">text</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">html,\${html}\`, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        waitUntil</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> waitUntil.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 进行截图</span></span>
<span class="line"><span style="color:#E1E4E8;">      image </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await page.</span><span style="color:#B392F0;">screenshot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;jpg&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;jpeg&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> type,</span></span>
<span class="line"><span style="color:#E1E4E8;">        quality</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;png&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> undefined </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(quality),</span></span>
<span class="line"><span style="color:#E1E4E8;">        omitBackground</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> omitBackground </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;true&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        fullPage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fullPage </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> error</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ctx.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">, \`image</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${type}\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ctx.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Content-Disposition&#39;</span><span style="color:#E1E4E8;">, \`inline; filename</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">\${filename}.\${type}\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">    await page.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> image</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> render</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取连接池</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./pool&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./config&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ctx, handleFetchPicoImageError) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用连接池资源</span></span>
<span class="line"><span style="color:#24292E;">  pool.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(async browser </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { body, query } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 打开新的页面</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await browser.</span><span style="color:#6F42C1;">newPage</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 服务支持直接传递 HTML 字符串内容</span></span>
<span class="line"><span style="color:#24292E;">    let html </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 从请求服务的 query 获取默认参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">480</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      ratio</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> deviceScaleFactor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;png&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;poster&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      waitUntil </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;domcontentloaded&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      quality </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      omitBackground,</span></span>
<span class="line"><span style="color:#24292E;">      fullPage,</span></span>
<span class="line"><span style="color:#24292E;">      url,</span></span>
<span class="line"><span style="color:#24292E;">      useCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;true&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      usePicoAutoJPG </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> query</span></span>
<span class="line"><span style="color:#24292E;">    let image</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// 设置浏览器视口</span></span>
<span class="line"><span style="color:#24292E;">      await page.</span><span style="color:#6F42C1;">setViewport</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(width),</span></span>
<span class="line"><span style="color:#24292E;">        height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(height),</span></span>
<span class="line"><span style="color:#24292E;">        deviceScaleFactor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(deviceScaleFactor)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (html.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.25e6</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;image size out of limits, at most 1 MB&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 访问 URL 页面</span></span>
<span class="line"><span style="color:#24292E;">      await page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(url </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> \`data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">text</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">html,\${html}\`, {</span></span>
<span class="line"><span style="color:#24292E;">        waitUntil</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> waitUntil.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 进行截图</span></span>
<span class="line"><span style="color:#24292E;">      image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await page.</span><span style="color:#6F42C1;">screenshot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;jpg&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;jpeg&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> type,</span></span>
<span class="line"><span style="color:#24292E;">        quality</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;png&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> undefined </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(quality),</span></span>
<span class="line"><span style="color:#24292E;">        omitBackground</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> omitBackground </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;true&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        fullPage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fullPage </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> error</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ctx.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">, \`image</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\${type}\`)</span></span>
<span class="line"><span style="color:#24292E;">    ctx.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Content-Disposition&#39;</span><span style="color:#24292E;">, \`inline; filename</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">\${filename}.\${type}\`)</span></span>
<span class="line"><span style="color:#24292E;">    await page.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> image</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> render</span></span></code></pre></div><p>至此，基于 Puppeteer 的海报系统就已经开发完成了。它是一个对外的 Node.js 服务。</p><p>我们也可以生成各种语言的 SDK 客户端，调用该海报服务。比如一个简单的 Python 版 SDK 客户端实现如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">class</span><span style="color:#E1E4E8;"> PosterGenerator(object):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    def generate(self,</span><span style="color:#FDAEB7;font-style:italic;"> **</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        生成海报图片，返回二进制海报数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        :param kwargs: 渲染时需要传递的参数字典</span></span>
<span class="line"><span style="color:#E1E4E8;">        :</span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;">: 二进制图片数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        html_content = render(self._syntax, self._template_content,</span><span style="color:#FDAEB7;font-style:italic;"> **</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">        url = POSTER_MAN_HA_PROXIES[self._api_env.value]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        		</span><span style="color:#6A737D;">// post 请求海报服务</span></span>
<span class="line"><span style="color:#E1E4E8;">            resp = requests.post(</span></span>
<span class="line"><span style="color:#E1E4E8;">                url,</span></span>
<span class="line"><span style="color:#E1E4E8;">                data=html_content.encode(&#39;utf8&#39;),</span></span>
<span class="line"><span style="color:#E1E4E8;">                headers={</span></span>
<span class="line"><span style="color:#E1E4E8;">                    &#39;Content</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">Type&#39;: &#39;text/plain&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">                timeout=</span><span style="color:#FDAEB7;font-style:italic;">60</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                params=self.config</span></span>
<span class="line"><span style="color:#E1E4E8;">            )</span></span>
<span class="line"><span style="color:#E1E4E8;">        except RequestException as err:</span></span>
<span class="line"><span style="color:#E1E4E8;">            raise GenerateFailed(err.message)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> not resp:</span></span>
<span class="line"><span style="color:#E1E4E8;">                raise GenerateFailed(u&quot;Failed to generate poster, got NOTHING from poster</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">man&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FDAEB7;font-style:italic;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                resp.raise_for_status()</span></span>
<span class="line"><span style="color:#E1E4E8;">            except requests.HTTPError as err:</span></span>
<span class="line"><span style="color:#E1E4E8;">                raise GenerateFailed(err.message)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FDAEB7;font-style:italic;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> resp.content</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">class</span><span style="color:#24292E;"> PosterGenerator(object):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    def generate(self,</span><span style="color:#B31D28;font-style:italic;"> **</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        生成海报图片，返回二进制海报数据</span></span>
<span class="line"><span style="color:#24292E;">        :param kwargs: 渲染时需要传递的参数字典</span></span>
<span class="line"><span style="color:#24292E;">        :</span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;">: 二进制图片数据</span></span>
<span class="line"><span style="color:#24292E;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        html_content = render(self._syntax, self._template_content,</span><span style="color:#B31D28;font-style:italic;"> **</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">        url = POSTER_MAN_HA_PROXIES[self._api_env.value]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        		</span><span style="color:#6A737D;">// post 请求海报服务</span></span>
<span class="line"><span style="color:#24292E;">            resp = requests.post(</span></span>
<span class="line"><span style="color:#24292E;">                url,</span></span>
<span class="line"><span style="color:#24292E;">                data=html_content.encode(&#39;utf8&#39;),</span></span>
<span class="line"><span style="color:#24292E;">                headers={</span></span>
<span class="line"><span style="color:#24292E;">                    &#39;Content</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">Type&#39;: &#39;text/plain&#39;</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">                timeout=</span><span style="color:#B31D28;font-style:italic;">60</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                params=self.config</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        except RequestException as err:</span></span>
<span class="line"><span style="color:#24292E;">            raise GenerateFailed(err.message)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> not resp:</span></span>
<span class="line"><span style="color:#24292E;">                raise GenerateFailed(u&quot;Failed to generate poster, got NOTHING from poster</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">man&quot;)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#B31D28;font-style:italic;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                resp.raise_for_status()</span></span>
<span class="line"><span style="color:#24292E;">            except requests.HTTPError as err:</span></span>
<span class="line"><span style="color:#24292E;">                raise GenerateFailed(err.message)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#B31D28;font-style:italic;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> resp.content</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们介绍了 Puppeteer 的各种应用场景，并重点介绍了一个基于 Puppeteer 设计实现的海报服务系统。</p><p>本讲内容总结如下：</p>`,12),A=s("p",null,"通过这几讲的学习，希望你能够从实践出发，对 Node.js 落地应用有一个更全面的认知。这里我也给大家留一个思考题，你平时开发中使用过 Puppeteer 吗？你还能基于 Puppeteer 想到哪些使用场景呢？欢迎在留言区和我分享你的经验。",-1);function D(d,h,C,m,B,f){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/21/5C/CioPOWBURyGAdWWfAAVd4uI0v5k453.png"}),y,i,a(n,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M01/25/41/Cgp9HWBZg66ADjAJAAJBHVTqmKw043.png"}),F,a(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M01/25/3D/CioPOWBZg8GAX2qJAALAFyJ2lc8362.png"}),u,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/21/5F/Cgp9HWBUR3WAUmueAAEA26Dx-54108.png"}),g,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/21/60/Cgp9HWBUR8mAUFYXAALdEMP1LzI390.png"}),A])}const q=o(r,[["render",D]]);export{b as __pageData,q as default};
