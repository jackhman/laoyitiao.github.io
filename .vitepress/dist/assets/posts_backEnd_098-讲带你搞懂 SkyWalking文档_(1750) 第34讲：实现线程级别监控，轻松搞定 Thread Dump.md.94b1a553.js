import{_ as o,j as e,o as t,g as r,k as p,h as a,s,Q as l}from"./chunks/framework.cfb14fe0.js";const L=JSON.parse('{"title":"第34讲：实现线程级别监控，轻松搞定ThreadDump","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1750) 第34讲：实现线程级别监控，轻松搞定 Thread Dump.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1750) 第34讲：实现线程级别监控，轻松搞定 Thread Dump.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1750) 第34讲：实现线程级别监控，轻松搞定 Thread Dump.md"},E=s("h1",{id:"第34讲-实现线程级别监控-轻松搞定threaddump",tabindex:"-1"},[a("第34讲：实现线程级别监控，轻松搞定ThreadDump "),s("a",{class:"header-anchor",href:"#第34讲-实现线程级别监控-轻松搞定threaddump","aria-label":'Permalink to "第34讲：实现线程级别监控，轻松搞定ThreadDump"'},"​")],-1),y=s("p",null,"本课时我们来学习 Thread Dump 功能。",-1),i=s("h3",{id:"背景",tabindex:"-1"},[a("背景 "),s("a",{class:"header-anchor",href:"#背景","aria-label":'Permalink to "背景"'},"​")],-1),d=s("p",null,"通过前面课时的介绍我们知道，SkyWalking 提供的 Agent 可以收集服务的 Metrics、Trace、Log 等维度的数据，然后发送到后端的 OAP 进行分析并进行持久化存储，我们可以使用 SkyWalking Rocketbot UI（或是直接使用 GraphQL）​ 从不同的维度查询上述数据，评估系统的各项性能和某些具体行为。",-1),u=s("p",null,"例如，我们可以通过 ServiceRespTimeMetrics、ServiceP99Metrics、ServiceCpmMetrics 等 Metrics 了解一个服务的整体吞吐量；可以通过 Trace 信息了解某个具体请求经过的核心组件和服务，以及在这些组件和服务上的耗时情况；可以通过 Trace 上携带的 Log 信息了解相应的异常信息；还可以根据 Trace 信息分析得到 Relation 信息，画出整个服务架构的拓扑图，了解各个服务之间的调用关系以及拓扑图每条调用边上的响应时间、SLA 等信息。这就可以帮助开发和运维人员更好地管理整个服务集群，更快地定位系统的热点和瓶颈，降低运维和问题定位的成本。",-1),F=s("p",null,"SkyWalking 已经满足了我们日常监控和运维的绝大多数需求，但是并没有覆盖到所有运维场景。假设我们发现请求在某个服务中的耗时特别长，远远超过了预期，例如开篇示例中的 demo-webapp ，如下图所示，在 HelloWorldController 在开始调用 Dubbo 服务的前后，会有耗时超过 1s 以上情况：",-1),g=l('<p>此时，SkyWalking 的 Trace 信息只能提示我们 HelloWorldController.hello() 方法中有一些耗时的逻辑，但是耗时的具体原因是什么无法准确地说明。实际的业务逻辑比较复杂，请求处理耗时高的原因也可能千奇百怪，例如（可能但不限于）：</p><ul><li><p>多个线程并发竞争同一把锁；</p></li><li><p>读写文件，线程等待 I/O 操作；</p></li><li><p>代码逻辑本身的性能有问题，时间复杂度太高。</p></li></ul><p>如果通过 Trace 以及 Metrics 不能明确定位高耗时的问题，我们使用 jstack 工具将线程的栈信息 dump 下来，然后分析线程在哪一个调用中耗时较长。在现实场景中，往往一次 dump 的信息是不足以确认问题的，为了反映线程状态的动态变化，需要连续多次做 Thread Dump，每次间隔根据具体的场景决定，建议至少产生三次以上的 Thread Dump 信息，如果每次 Thread Dump 都指向同一个问题，一般就能够确定具体的问题。</p><p>在实际的微服务场景中进行 Thread Dump 时，你可能会遇到几个问题：</p><ul><li><p>如果多个服务都有耗时高的情况，就需要我们去多个服务的机器上进行 Thread Dump，比较麻烦，而且也很难确定不同服务的 Thread Dump 信息是否存在关联。</p></li><li><p>请求一般会经过多个服务端处理，每个服务又是单独的一个集群。如果是某些特殊参数的请求触发了高耗时，我们很难手动捕捉到该请求走到了服务的那个实例上，这台机器上去进行 Thread Dump 就比较困难。</p></li><li><p>如果要求某些服务的响应时延非常低的情况下，虽然服务的延迟高了，但是相对人来说的时间是非常短的，而我们手动 Thread Dump 的速度和次数都是有限的，可能错过问题所在的逻辑，导致问题定位错误。</p></li></ul><h3 id="thread-dump-需求" tabindex="-1">Thread Dump 需求 <a class="header-anchor" href="#thread-dump-需求" aria-label="Permalink to &quot;Thread Dump 需求&quot;">​</a></h3><p>为了解决在上述场景下手动 Thread Dump 带来的问题，本课时将为 SkyWalking 添加 Thread Dump 功能。下面先说明一下 Thread Dump 的需求：一般场景中，用户会通过一个外网的入口请求我们的接入层（例如机房的 Nginx 集群），然后接入层会进行负载均衡，将请求发送到后端的 API 服务集群进行处理（例如 Tomcat 集群），API 服务会根据业务需求调用后端的 RPC 服务（例如 Dubbo、gRPC 等），在 RPC 服务中会调用 Service 层、DAO 层等完成存储的读写或是再次调用其他 RPC 服务。单个请求的路径如下图所示：</p>',7),C=l(`<p>为了实现自动 Thread Dump 功能，我们会在入口处为 Http 请求追加一个 Http Header（Key 为 ENABLE_DUMP_FLAG，Value 为&quot;true&quot;），作为是否进行 Thread Dump 的标识。如果请求带有该标识，线程在处理该请求时每隔一段时间（例如 300ms）会被 dump 一次，这些 dump 下来的信息会记录到请求的 Trace 中，一并发送给 SkyWalking OAP 进行持久化存储。在后续通过 query-graphql-plugin 插件查询某条 Trace 信息的时候，可以将这些 dump 信息一起查询出来，在 SkyWalking Rocketbot UI 进行展示时，可以根据 Thread Dump 的时间将其显示在相应的 Span 处，当然，也可以在 OAP 接收到 Trace 数据时对其中的 Thread Dump 信息进出分析并完成与 Span 的关联。</p><p>首先要了解，在 Java 代码中使用 ThreadMXBean 即可完成全部线程的 Thread Dump ，下面是一段简单的示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ThreadMXBean bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ManagementFactory.</span><span style="color:#B392F0;">getThreadMXBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">ThreadInfo</span><span style="color:#E1E4E8;">[] threadInfos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bean.</span><span style="color:#B392F0;">dumpAllThreads</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ThreadInfo threadInfo </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> threadInfos) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(threadInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 部分输出如所示，我们可以看到每个线程的状态信息以及具体的调用栈：</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Reference Handler&quot;</span><span style="color:#E1E4E8;"> Id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> WAITING on java.lang.ref.Reference$Lock@</span><span style="color:#F97583;">1517365b</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.lang.Object.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">(Native Method)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">  waiting on java.lang.ref.Reference$Lock@</span><span style="color:#F97583;">1517365b</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.lang.Object.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">(Object.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">502</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.lang.ref.Reference.</span><span style="color:#B392F0;">tryHandlePending</span><span style="color:#E1E4E8;">(Reference.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">191</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.lang.ref.Reference$ReferenceHandler.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Reference.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">153</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;"> Id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> RUNNABLE</span></span>
<span class="line"><span style="color:#E1E4E8;">	at sun.management.ThreadImpl.</span><span style="color:#B392F0;">dumpThreads0</span><span style="color:#E1E4E8;">(Native Method)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at sun.management.ThreadImpl.</span><span style="color:#B392F0;">dumpAllThreads</span><span style="color:#E1E4E8;">(ThreadImpl.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">454</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at com.xxx.sw.Main.</span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(Main.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ThreadMXBean bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ManagementFactory.</span><span style="color:#6F42C1;">getThreadMXBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">ThreadInfo</span><span style="color:#24292E;">[] threadInfos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bean.</span><span style="color:#6F42C1;">dumpAllThreads</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ThreadInfo threadInfo </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> threadInfos) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(threadInfo);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 部分输出如所示，我们可以看到每个线程的状态信息以及具体的调用栈：</span></span>
<span class="line"><span style="color:#032F62;">&quot;Reference Handler&quot;</span><span style="color:#24292E;"> Id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> WAITING on java.lang.ref.Reference$Lock@</span><span style="color:#D73A49;">1517365b</span></span>
<span class="line"><span style="color:#24292E;">	at java.lang.Object.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">(Native Method)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">  waiting on java.lang.ref.Reference$Lock@</span><span style="color:#D73A49;">1517365b</span></span>
<span class="line"><span style="color:#24292E;">	at java.lang.Object.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">(Object.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">502</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.lang.ref.Reference.</span><span style="color:#6F42C1;">tryHandlePending</span><span style="color:#24292E;">(Reference.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">191</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.lang.ref.Reference$ReferenceHandler.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Reference.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">153</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;"> Id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> RUNNABLE</span></span>
<span class="line"><span style="color:#24292E;">	at sun.management.ThreadImpl.</span><span style="color:#6F42C1;">dumpThreads0</span><span style="color:#24292E;">(Native Method)</span></span>
<span class="line"><span style="color:#24292E;">	at sun.management.ThreadImpl.</span><span style="color:#6F42C1;">dumpAllThreads</span><span style="color:#24292E;">(ThreadImpl.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">454</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at com.xxx.sw.Main.</span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(Main.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="thread-dump-功能实现" tabindex="-1">Thread Dump 功能实现 <a class="header-anchor" href="#thread-dump-功能实现" aria-label="Permalink to &quot;Thread Dump 功能实现&quot;">​</a></h3><p>从 demo-webapp 这个 API 服务处理&quot;/hello/xxx&quot;接口请求的 Trace 中可以看到，请求首先到达了 Spring Boot 内嵌的 Tomcat 容器，然后走到 Spring Container 中调用 HelloWorldController.hello() 方法 ，最后调用 demo-provider 这个 Dubbo 服务。下图展示了请求的全过程、涉及插件以及插件做的事情：</p>`,5),h=l(`<p>请求的第一站是 Tomcat ，我们可以在 tomcat-7.x-8.x-plugin 插件创建 TracingContext 之前将请求 Header 中携带的 ENABLE_DUMP_FLAG 标记提取出来，并记录到 Trace 的 RuntimeContext 上下文中，这样就可以让 ENABLE_DUMP_FLAG 标记随 Trace 在当前线程继续传播了，实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ENABLE_DUMP_FLAG 标记在Http Header 和 RuntimeContext中使用相应的Key</span></span>
<span class="line"><span style="color:#6A737D;">// 可以将&quot;ENABLE_DUMP_FLAG&quot;字符串抽到 Constants作为常量，后续可以重复使用</span></span>
<span class="line"><span style="color:#E1E4E8;">ContextManager.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ENABLE_DUMP_FLAG&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ENABLE_DUMP_FLAG&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 对 ContextCarrier 的处理后面会介绍</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ENABLE_DUMP_FLAG 标记在Http Header 和 RuntimeContext中使用相应的Key</span></span>
<span class="line"><span style="color:#6A737D;">// 可以将&quot;ENABLE_DUMP_FLAG&quot;字符串抽到 Constants作为常量，后续可以重复使用</span></span>
<span class="line"><span style="color:#24292E;">ContextManager.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ENABLE_DUMP_FLAG&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ENABLE_DUMP_FLAG&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 对 ContextCarrier 的处理后面会介绍</span></span></code></pre></div><p>前面在介绍 SkyWalking Agent 的时候提到，在 TracingContext 关闭的时候会回调全部 TracingContextListener 监听器，其中就包括 TraceSegmentServiceClient，它会将该 Trace 发送到后端的 OAP 服务，这是典型的观察者模式的应用。我们可以参考这种实现，定义一个 TracingContextPostConstructListener 接口来处理 TracingContext 创建的事件，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TracingContextPostConstructListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postConstruct</span><span style="color:#E1E4E8;">(TracingContext </span><span style="color:#FFAB70;">tracingContext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TracingContextPostConstructListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postConstruct</span><span style="color:#24292E;">(TracingContext </span><span style="color:#E36209;">tracingContext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 TracingContext 中新增 postConstruct() 方法回调全部 TracingContextPostConstructListener 实现，并在 TracingContext 构造方法最后调用该方法，其具体剩下如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postConstruct</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    TracingContext.ListenerManager.</span><span style="color:#B392F0;">notifyPostConstruct</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postConstruct</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    TracingContext.ListenerManager.</span><span style="color:#6F42C1;">notifyPostConstruct</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 TracingContext.ListenerManager 中会新增 POST_CONSTRUCT_LISTENERS 字段（List <code>&lt;TracingContextPostConstructListener&gt;</code> 类型）来记录当前全部的 TracingContextPostConstructListener 对象，并提供相应 add()、addFirst() 、remove() 等方法，这里的 notifyPostConstruct() 方法会回调全部的 TracingContextPostConstructListener 对象，通知它们该 TracingContext 对象构造完毕。这与 TracingContext.ListenerManager 处理 TracingContextListener 的方式一模一样，具体实现不再展开。</p><p>下面我们需要提供了一个 TracingContextPostConstructListener 接口的实现 ------ ThreadDumpManager，它同时实现了 BootService、TracingContextListener、TracingContextPostConstructListener 三个接口，如下图所示，下面将详细分析该实现针对每个接口的实现逻辑：</p>`,8),m=l(`<p>首先在 onComplete() 方法（对 BootService 接口的实现）中会启动一个单独的线程执行一个定时任务，该定时任务主要做两件事：</p><ul><li><p>定时通过 ThreadMXBean 获取线程的 dump 信息。</p></li><li><p>查找到处理 ENABLE_DUMP_FLAG 标记请求的线程，并将该线程的 dump 信息与 Trace 关联起来。</p></li></ul><p>具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 其中 Key处理标记请求的线程 ID，Value是线程的 dump 信息，该线程在处理标记请求</span></span>
<span class="line"><span style="color:#6A737D;">// 的过程中，可能会被 dump 多次，所以 Value 是 List&lt;ThreadDump&gt;集合</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">ThreadDump</span><span style="color:#E1E4E8;">&gt;&gt; dumpStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    Maps.</span><span style="color:#B392F0;">newConcurrentMap</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ScheduledExecutorService scheduledExecutorService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onComplete</span><span style="color:#E1E4E8;">() throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建并启动后台线程</span></span>
<span class="line"><span style="color:#E1E4E8;">    scheduledExecutorService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">newSingleThreadScheduledExecutor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    scheduledExecutorService.</span><span style="color:#B392F0;">scheduleAtFixedRate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunnableWithExceptionProtection</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">doThreadDump,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    t </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;thread dump error.&quot;</span><span style="color:#E1E4E8;">, t)), </span></span>
<span class="line"><span style="color:#E1E4E8;">             dumpPeriod, dumpPeriod, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将 ThreadDumpManager作为 TracingContextListener接口实现进行注册</span></span>
<span class="line"><span style="color:#E1E4E8;">    TracingContext.ListenerManager.</span><span style="color:#B392F0;">addFirst</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            (TracingContextListener) </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将 ThreadDumpManager作为 TracingContextPostConstructListener</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 接口实现进行注册</span></span>
<span class="line"><span style="color:#E1E4E8;">    TracingContext.ListenerManager.</span><span style="color:#B392F0;">addFirst</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            (TracingContextPostConstructListener) </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 其中 Key处理标记请求的线程 ID，Value是线程的 dump 信息，该线程在处理标记请求</span></span>
<span class="line"><span style="color:#6A737D;">// 的过程中，可能会被 dump 多次，所以 Value 是 List&lt;ThreadDump&gt;集合</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">ThreadDump</span><span style="color:#24292E;">&gt;&gt; dumpStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    Maps.</span><span style="color:#6F42C1;">newConcurrentMap</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ScheduledExecutorService scheduledExecutorService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onComplete</span><span style="color:#24292E;">() throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建并启动后台线程</span></span>
<span class="line"><span style="color:#24292E;">    scheduledExecutorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">newSingleThreadScheduledExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    scheduledExecutorService.</span><span style="color:#6F42C1;">scheduleAtFixedRate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunnableWithExceptionProtection</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">doThreadDump,</span></span>
<span class="line"><span style="color:#24292E;">                    t </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> logger.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;thread dump error.&quot;</span><span style="color:#24292E;">, t)), </span></span>
<span class="line"><span style="color:#24292E;">             dumpPeriod, dumpPeriod, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将 ThreadDumpManager作为 TracingContextListener接口实现进行注册</span></span>
<span class="line"><span style="color:#24292E;">    TracingContext.ListenerManager.</span><span style="color:#6F42C1;">addFirst</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            (TracingContextListener) </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将 ThreadDumpManager作为 TracingContextPostConstructListener</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接口实现进行注册</span></span>
<span class="line"><span style="color:#24292E;">    TracingContext.ListenerManager.</span><span style="color:#6F42C1;">addFirst</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            (TracingContextPostConstructListener) </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ThreadDumpManager.doThreadDump() 方法是后台线程的核心，它会请求 ThreadMXBean 获取线程的 dump 信息并记录到 dumpStore 集合中，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doThreadDump</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> dumpTimestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ThreadMXBean bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ManagementFactory.</span><span style="color:#B392F0;">getThreadMXBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取全部线程的 dump信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">ThreadInfo</span><span style="color:#E1E4E8;">[] threadInfos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bean.</span><span style="color:#B392F0;">dumpAllThreads</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ThreadInfo threadInfo </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> threadInfos) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> threadId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> threadInfo.</span><span style="color:#B392F0;">getThreadId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据监控的线程ID，将相应的 dump信息记录到 dumpStore集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">ThreadDump</span><span style="color:#E1E4E8;">&gt; threadDumps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dumpStore.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(threadId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (threadDumps </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 创建 ThreadDump来记录线程 dump信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            ThreadDump threadDump </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ThreadDump.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">setDumpTime</span><span style="color:#E1E4E8;">(dumpTimestamp)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">setThreadInfo</span><span style="color:#E1E4E8;">(threadInfo.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            threadDumps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(threadDump);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doThreadDump</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> dumpTimestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ThreadMXBean bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ManagementFactory.</span><span style="color:#6F42C1;">getThreadMXBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取全部线程的 dump信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">ThreadInfo</span><span style="color:#24292E;">[] threadInfos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bean.</span><span style="color:#6F42C1;">dumpAllThreads</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ThreadInfo threadInfo </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> threadInfos) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> threadId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> threadInfo.</span><span style="color:#6F42C1;">getThreadId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据监控的线程ID，将相应的 dump信息记录到 dumpStore集合中</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">ThreadDump</span><span style="color:#24292E;">&gt; threadDumps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dumpStore.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(threadId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (threadDumps </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建 ThreadDump来记录线程 dump信息</span></span>
<span class="line"><span style="color:#24292E;">            ThreadDump threadDump </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ThreadDump.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">setDumpTime</span><span style="color:#24292E;">(dumpTimestamp)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">setThreadInfo</span><span style="color:#24292E;">(threadInfo.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            threadDumps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(threadDump);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里使用到了一个新类型 ------ ThreadDump ，然后将其定义添加到 trace.proto 文件中，并在 SegmentObject 中添加一个 threadDumps 字段，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">message SegmentObject {</span></span>
<span class="line"><span style="color:#E1E4E8;">    UniqueId traceSegmentId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    repeated SpanObjectV2 spans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ...</span><span style="color:#6A737D;">// 省略3~5的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    repeated ThreadDump threadDumps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">message ThreadDump {</span></span>
<span class="line"><span style="color:#E1E4E8;">    int64 dumpTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    string threadInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">message SegmentObject {</span></span>
<span class="line"><span style="color:#24292E;">    UniqueId traceSegmentId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    repeated SpanObjectV2 spans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    ... ...</span><span style="color:#6A737D;">// 省略3~5的字段</span></span>
<span class="line"><span style="color:#24292E;">    repeated ThreadDump threadDumps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">message ThreadDump {</span></span>
<span class="line"><span style="color:#24292E;">    int64 dumpTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    string threadInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ThreadDump 主要用于记录一条 Thread Dump 数据以及 dump 操作的时间戳，后续会在 ThreadDumpManager 中将其添加到关联的 SegmentObject 对象中。</p><p>回到 ThreadDumpManager，作为 TracingContextPostConstructListener 接口的实现，在其 postConstruct() 方法中会从 TracingContext 关联的 RuntimeContext 中获取 ENABLE_DUMP_FLAG 标记，如果标记为 true，则将当前线程 ID 添加到 dumpStore 集合中存储，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postConstruct</span><span style="color:#E1E4E8;">(TracingContext tracingContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    RuntimeContext runtimeContext</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ContextManager.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object enableDumpFlag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           runtimeContext.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Constants.ENABLE_DUMP_FLAG);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Constants.ENABLE_DUMP_VAULES.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">               enableDumpFlag.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 将当前线程的ID添加到 dumpStore集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">       dumpStore.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">            Lists.</span><span style="color:#B392F0;">newLinkedList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 在TracingContext中也添加了显影的</span></span>
<span class="line"><span style="color:#E1E4E8;">       tracingContext.</span><span style="color:#B392F0;">setEnableDumpFlag</span><span style="color:#E1E4E8;">(Constants.ENABLE_DUMP_VAULES);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postConstruct</span><span style="color:#24292E;">(TracingContext tracingContext) {</span></span>
<span class="line"><span style="color:#24292E;">    RuntimeContext runtimeContext</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ContextManager.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Object enableDumpFlag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           runtimeContext.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Constants.ENABLE_DUMP_FLAG);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Constants.ENABLE_DUMP_VAULES.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">               enableDumpFlag.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 将当前线程的ID添加到 dumpStore集合中</span></span>
<span class="line"><span style="color:#24292E;">       dumpStore.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">            Lists.</span><span style="color:#6F42C1;">newLinkedList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 在TracingContext中也添加了显影的</span></span>
<span class="line"><span style="color:#24292E;">       tracingContext.</span><span style="color:#6F42C1;">setEnableDumpFlag</span><span style="color:#24292E;">(Constants.ENABLE_DUMP_VAULES);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ThreadDumpManager 作为 TracingContextListener 的实现，其 afterFinished() 方法实现会在 TracingContext 关闭之后，立即关联相应的 Thread Dump 信息，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterFinished</span><span style="color:#E1E4E8;">(TraceSegment traceSegment) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> threadId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">ThreadDump</span><span style="color:#E1E4E8;">&gt; threadDumps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dumpStore.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(threadId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    traceSegment.</span><span style="color:#B392F0;">setThreadDumps</span><span style="color:#E1E4E8;">(threadDumps);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeThread</span><span style="color:#E1E4E8;">(threadId);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterFinished</span><span style="color:#24292E;">(TraceSegment traceSegment) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> threadId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">ThreadDump</span><span style="color:#24292E;">&gt; threadDumps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dumpStore.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(threadId);</span></span>
<span class="line"><span style="color:#24292E;">    traceSegment.</span><span style="color:#6F42C1;">setThreadDumps</span><span style="color:#24292E;">(threadDumps);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeThread</span><span style="color:#24292E;">(threadId);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，ThreadDumpManager 作为 TracingContextListener 需要先于 TraceSegmentServiceClient 这个监听执行，否则是在 Trace 数据发送出去之后再进行关联，后端 OAP 感知不到 ThreadDump 信息。</p><h3 id="跨进程-跨线程传播" tabindex="-1">跨进程/跨线程传播 <a class="header-anchor" href="#跨进程-跨线程传播" aria-label="Permalink to &quot;跨进程/跨线程传播&quot;">​</a></h3><p>在上一课时，我们重点处理了入口 Http 服务携带的 ENABLE_DUMP_FLAG 标记。在微服务架构中，如果入口的 Http 请求带了 ENABLE_DUMP_FLAG 标记，后续跨进程的 RPC 调用也是需要传递该标记的。这里将改造 ContextCarrier 以及 TracingContext 的相关方法，实现传播 ENABLE_DUMP_FLAG 标记的功能。</p><p>首先需要修改一下 ContextCarrier 序列化之后的字符串结构，SkyWalking 原始的 ContextCarrier 持久化后的字符串包括下面 9 个部分，且相互之间通过字符串&quot;-&quot;连接起来：</p><ol><li><p>固定字符串&quot;1&quot;</p></li><li><p>TraceId</p></li><li><p>TraceSegmentId</p></li><li><p>SpanId</p></li><li><p>ParentServiceInstanceId</p></li><li><p>EntryServiceInstanceId</p></li><li><p>PeerHost</p></li><li><p>EntryEndpointName</p></li><li><p>ParentEndpointName</p></li></ol><p>这里需要添加一个新的部分用于记录当前线程的 ENABLE_DUMP_FLAG 标记。在 serialize() 方法中针对 V2 版本 ContextCarrier 持久化逻辑修改如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">serialize</span><span style="color:#E1E4E8;">(HeaderVersion version) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> StringUtil.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Base64.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getPrimaryDistributedTraceId</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">        Base64.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getTraceSegmentId</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getSpanId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getParentServiceInstanceId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getEntryServiceInstanceId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Base64.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getPeerHost</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">        Base64.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getEntryEndpointName</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">        Base64.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getParentEndpointName</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.enableDumpFlag); </span><span style="color:#6A737D;">// 新增 enableDumpFlag 部分</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String </span><span style="color:#6F42C1;">serialize</span><span style="color:#24292E;">(HeaderVersion version) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> StringUtil.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Base64.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getPrimaryDistributedTraceId</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">        Base64.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getTraceSegmentId</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getSpanId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getParentServiceInstanceId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getEntryServiceInstanceId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        Base64.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getPeerHost</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">        Base64.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getEntryEndpointName</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">        Base64.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getParentEndpointName</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.enableDumpFlag); </span><span style="color:#6A737D;">// 新增 enableDumpFlag 部分</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>enableDumpFlag 是 ContextCarrier 中新增的一个字段，用于记录当前线程的标记信息。</p><p>接下来看 deserialize() 方法，其中兼容了原始 ContextCarrier 字符串以及上述改造后的 ContextCarrier 字符串，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ContextCarrier </span><span style="color:#B392F0;">deserialize</span><span style="color:#E1E4E8;">(String text, HeaderVersion version) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] parts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">-&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parts.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> parts.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// parts[0] is sample flag, always trace if header exists.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.primaryDistributedTraceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PropagatedTraceId</span><span style="color:#E1E4E8;">(Base64.</span><span style="color:#B392F0;">decode2UTFString</span><span style="color:#E1E4E8;">(parts[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.traceSegmentId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ID</span><span style="color:#E1E4E8;">(Base64.</span><span style="color:#B392F0;">decode2UTFString</span><span style="color:#E1E4E8;">(parts[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.spanId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(parts[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.parentServiceInstanceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(parts[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entryServiceInstanceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(parts[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.peerHost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Base64.</span><span style="color:#B392F0;">decode2UTFString</span><span style="color:#E1E4E8;">(parts[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entryEndpointName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Base64.</span><span style="color:#B392F0;">decode2UTFString</span><span style="color:#E1E4E8;">(parts[</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.parentEndpointName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Base64.</span><span style="color:#B392F0;">decode2UTFString</span><span style="color:#E1E4E8;">(parts[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parts.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.enableDumpFlag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parts[</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ContextCarrier </span><span style="color:#6F42C1;">deserialize</span><span style="color:#24292E;">(String text, HeaderVersion version) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] parts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">-&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parts.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> parts.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// parts[0] is sample flag, always trace if header exists.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.primaryDistributedTraceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropagatedTraceId</span><span style="color:#24292E;">(Base64.</span><span style="color:#6F42C1;">decode2UTFString</span><span style="color:#24292E;">(parts[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.traceSegmentId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ID</span><span style="color:#24292E;">(Base64.</span><span style="color:#6F42C1;">decode2UTFString</span><span style="color:#24292E;">(parts[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.spanId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(parts[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.parentServiceInstanceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(parts[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.entryServiceInstanceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(parts[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.peerHost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Base64.</span><span style="color:#6F42C1;">decode2UTFString</span><span style="color:#24292E;">(parts[</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.entryEndpointName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Base64.</span><span style="color:#6F42C1;">decode2UTFString</span><span style="color:#24292E;">(parts[</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.parentEndpointName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Base64.</span><span style="color:#6F42C1;">decode2UTFString</span><span style="color:#24292E;">(parts[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parts.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.enableDumpFlag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parts[</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，在 TracingContext.inject() 方法填充 ContextCarrier 对象的时候，需要同时填充 enableDumpFlag 字段，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">inject</span><span style="color:#E1E4E8;">(ContextCarrier carrier) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ...</span><span style="color:#6A737D;">// 省略前面的原始代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object enableDumpFlag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ContextManager.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Constants.ENABLE_DUMP_FLAG);</span></span>
<span class="line"><span style="color:#E1E4E8;">    carrier.</span><span style="color:#B392F0;">setEnableDumpFlag</span><span style="color:#E1E4E8;">(enableDumpFlag </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">       enableDumpFlag.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inject</span><span style="color:#24292E;">(ContextCarrier carrier) {</span></span>
<span class="line"><span style="color:#24292E;">    ... ...</span><span style="color:#6A737D;">// 省略前面的原始代码</span></span>
<span class="line"><span style="color:#24292E;">    Object enableDumpFlag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ContextManager.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Constants.ENABLE_DUMP_FLAG);</span></span>
<span class="line"><span style="color:#24292E;">    carrier.</span><span style="color:#6F42C1;">setEnableDumpFlag</span><span style="color:#24292E;">(enableDumpFlag </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       enableDumpFlag.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以在 TracingContext.extract() 方法中检测 ContextCarrier 对象携带的 ENABLE_DUMP_FLAG 标记值，之后通过前文介绍的 ThreadDumpManager 记录线程 ID 并由后台线程进行 dump。这种实现方式会与前文添加的 TracingContextPostConstructListener 接口的目的冲突。</p><p>另一种实现方式是在各个 agent-plugin 的入口（创建 TracingContext 之前）处理 ContextCarrier 对象携带的 ENABLE_DUMP_FLAG 标记，并设置到 RuntimeContext 中。例如通过 Dubbo 实现的 RPC 调用，我们可以对 apm-dubbo-plugin 插件中的 DubboInterceptor 进行如下修改：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeMethod</span><span style="color:#E1E4E8;">(...) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isConsumer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... ... </span><span style="color:#6A737D;">// 省略Consumer创建 ExitSpan以及ContextCarrier的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... ... </span><span style="color:#6A737D;">// 从 RpcContext中获取 ContextCarrier字符串并反序列化(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将ENABLE_DUMP_FLAG标记记录到 RuntimeContext中</span></span>
<span class="line"><span style="color:#E1E4E8;">        ContextManager.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(Constants</span></span>
<span class="line"><span style="color:#E1E4E8;">            .ENABLE_DUMP_FLAG,contextCarrier.</span><span style="color:#B392F0;">getEnableDumpFlag</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建 TracingContext，其中会触发</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// TracingContextPostConstructListener，从而记录需要dump的线程</span></span>
<span class="line"><span style="color:#E1E4E8;">        span </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ContextManager.</span><span style="color:#B392F0;">createEntrySpan</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">generateOperationName</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            requestURL, invocation), contextCarrier);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略后续设置 Tag、Component以及SpanLayer的相关代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeMethod</span><span style="color:#24292E;">(...) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isConsumer) {</span></span>
<span class="line"><span style="color:#24292E;">        ... ... </span><span style="color:#6A737D;">// 省略Consumer创建 ExitSpan以及ContextCarrier的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ... ... </span><span style="color:#6A737D;">// 从 RpcContext中获取 ContextCarrier字符串并反序列化(略)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将ENABLE_DUMP_FLAG标记记录到 RuntimeContext中</span></span>
<span class="line"><span style="color:#24292E;">        ContextManager.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(Constants</span></span>
<span class="line"><span style="color:#24292E;">            .ENABLE_DUMP_FLAG,contextCarrier.</span><span style="color:#6F42C1;">getEnableDumpFlag</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建 TracingContext，其中会触发</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// TracingContextPostConstructListener，从而记录需要dump的线程</span></span>
<span class="line"><span style="color:#24292E;">        span </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ContextManager.</span><span style="color:#6F42C1;">createEntrySpan</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">generateOperationName</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            requestURL, invocation), contextCarrier);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略后续设置 Tag、Component以及SpanLayer的相关代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，在跨线程调用的时候，TracingContext 信息会通过其 capture() 方法生成的 ContextSnapshot 对象传递，在接收调用的线程中会通过 TracingContext.continued() 方法从 ContextSnapshot 中还原数据。这里需要在 ContextSnapshot 中添加相应字段并改造 capture() 方法以及 continued() 方法，具体逻辑与跨进程调用类似，这里就不再重复，留给你动手实践。</p><h3 id="oap-改造" tabindex="-1">OAP 改造 <a class="header-anchor" href="#oap-改造" aria-label="Permalink to &quot;OAP 改造&quot;">​</a></h3><p>完成 apm-agent-core 以及 tomcat-7.x-8.x-plugin、apm-dubbo-plugin 插件的改造之后，带有 Thread Dump 的 Trace 可以重构传递到后端 OAP 服务。</p><p>通过前文对 trace-receiver-plugin 插件的介绍我们知道，其中的 SegmentParseV2 会解析收到的 UpstreamSegment 得到相应的 TraceSegment，然后交给所有 RecordStreamProcessor 处理，如果存储选择 ElasticSearch，则 TraceSegment 的全部数据最终会按照序列化的格式存储到 segment-yyyyMMdd 索引中的 data_binary 字段中，当然也包括前面新增的 Thread Dump 信息。因此，整个 trace-receiver-plugin 插件以及 OAP 中存储相关的逻辑是无须进行改动的。</p><p>需要改动的是 OAP 查询 Trace 的相关逻辑。首先是 query-graphql-plugin 插件，在 trace.graphqls 中我们新增一个 ThreadDump 类型用于展示线程 dump 信息，具体实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type ThreadDump{</span></span>
<span class="line"><span style="color:#E1E4E8;">    dumpTimestamp</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Long</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">    threadInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">type Trace {</span></span>
<span class="line"><span style="color:#E1E4E8;">    spans</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [Span</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">    threadDumps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [ThreadDump</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 在 Trace 中添加 threadDumps集合</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type ThreadDump{</span></span>
<span class="line"><span style="color:#24292E;">    dumpTimestamp</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Long</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">    threadInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">type Trace {</span></span>
<span class="line"><span style="color:#24292E;">    spans</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [Span</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">    threadDumps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [ThreadDump</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 在 Trace 中添加 threadDumps集合</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相应的，需要修改 GraphQL​ 相应的 Java 对象。首先在 server-core 模块的org.apache.skywalking.oap.server.core.query.entity 包添加一个 ThreadDump 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Setter</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadDump</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> dumpTimestamp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String threadInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Setter</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadDump</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> dumpTimestamp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String threadInfo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相应的 Trace 类中也要添加 threadDumps 字段（List <code>&lt;ThreadDump&gt;</code> 类型），如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Trace</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Span</span><span style="color:#E1E4E8;">&gt; spans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">ThreadDump</span><span style="color:#E1E4E8;">&gt; threadDumps;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Trace</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Span</span><span style="color:#24292E;">&gt; spans;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">ThreadDump</span><span style="color:#24292E;">&gt; threadDumps;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来就是填充该 ThreadDump 集合，TraceQuery.queryTrace() 方法是查询 Trace 详细信息的入口。在其中完成所有 SegmentRecord 的查询之后，我们可以将每个 Segment 携带的 ThreadDump 取出来填充上述 ThreadDump 集合。具体实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Trace </span><span style="color:#B392F0;">queryTrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String traceId) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Trace trace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Trace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据traceId查询所有关联的 SegmentObject</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">SegmentRecord</span><span style="color:#E1E4E8;">&gt; segmentRecords </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">getTraceQueryDAO</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">queryByTraceId</span><span style="color:#E1E4E8;">(traceId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (SegmentRecord segment </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> segmentRecords) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 反序列化 SegmentObject</span></span>
<span class="line"><span style="color:#E1E4E8;">        SegmentObject segmentObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">               SegmentObject.</span><span style="color:#B392F0;">parseFrom</span><span style="color:#E1E4E8;">(segment.</span><span style="color:#B392F0;">getDataBinary</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 解析 SegmentObject中的 Span，填充到 Trace中</span></span>
<span class="line"><span style="color:#E1E4E8;">        trace.</span><span style="color:#B392F0;">getSpans</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">buildSpanV2List</span><span style="color:#E1E4E8;">(traceId, </span></span>
<span class="line"><span style="color:#E1E4E8;">              segment.</span><span style="color:#B392F0;">getSegmentId</span><span style="color:#E1E4E8;">(), segment.</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">                 segmentObject.</span><span style="color:#B392F0;">getSpansList</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 填充 ThreadDump集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        trace.</span><span style="color:#B392F0;">getThreadDumps</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">buildThreadDumpList</span><span style="color:#E1E4E8;">(segmentObject.</span><span style="color:#B392F0;">getThreadDumpsList</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ...</span><span style="color:#6A737D;">// 省略整理Trace中Span的顺序等操作，</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 这些逻辑在前文f分析query-graphql-plugin插件时已经详细分析过</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> trace;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Trace </span><span style="color:#6F42C1;">queryTrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String traceId) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    Trace trace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Trace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据traceId查询所有关联的 SegmentObject</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">SegmentRecord</span><span style="color:#24292E;">&gt; segmentRecords </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">getTraceQueryDAO</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">queryByTraceId</span><span style="color:#24292E;">(traceId);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (SegmentRecord segment </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> segmentRecords) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 反序列化 SegmentObject</span></span>
<span class="line"><span style="color:#24292E;">        SegmentObject segmentObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">               SegmentObject.</span><span style="color:#6F42C1;">parseFrom</span><span style="color:#24292E;">(segment.</span><span style="color:#6F42C1;">getDataBinary</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 解析 SegmentObject中的 Span，填充到 Trace中</span></span>
<span class="line"><span style="color:#24292E;">        trace.</span><span style="color:#6F42C1;">getSpans</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">buildSpanV2List</span><span style="color:#24292E;">(traceId, </span></span>
<span class="line"><span style="color:#24292E;">              segment.</span><span style="color:#6F42C1;">getSegmentId</span><span style="color:#24292E;">(), segment.</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">                 segmentObject.</span><span style="color:#6F42C1;">getSpansList</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 填充 ThreadDump集合</span></span>
<span class="line"><span style="color:#24292E;">        trace.</span><span style="color:#6F42C1;">getThreadDumps</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">buildThreadDumpList</span><span style="color:#24292E;">(segmentObject.</span><span style="color:#6F42C1;">getThreadDumpsList</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... ...</span><span style="color:#6A737D;">// 省略整理Trace中Span的顺序等操作，</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 这些逻辑在前文f分析query-graphql-plugin插件时已经详细分析过</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> trace;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，在 SkyWalking 源码目录下执行如下 maven 命令重新编译打包：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mvn clean</span></span>
<span class="line"><span style="color:#E1E4E8;">mvn </span><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">-D</span><span style="color:#E1E4E8;">checkstyle.skip </span><span style="color:#FDAEB7;font-style:italic;">-D</span><span style="color:#E1E4E8;">skip</span><span style="color:#FDAEB7;font-style:italic;">T</span><span style="color:#E1E4E8;">ests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mvn clean</span></span>
<span class="line"><span style="color:#24292E;">mvn </span><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">-D</span><span style="color:#24292E;">checkstyle.skip </span><span style="color:#B31D28;font-style:italic;">-D</span><span style="color:#24292E;">skip</span><span style="color:#B31D28;font-style:italic;">T</span><span style="color:#24292E;">ests</span></span></code></pre></div><p>执行完成后，首先启动 ElasticSearch 和 ZooKeeper 两个服务，然后依次启动 OAP、demo-provider、demo-webapp 以及 apm-webapp，请求 <a href="http://localhost:8000/hello/xxx" target="_blank" rel="noreferrer">http://localhost:8000/hello/xxx</a> 地址可以正常相应，且能够在 SkyWalking Rocketbot UI 中看到相应 Trace 信息表名修改未破坏对原始 Trace 的兼容。我们还可以使用 PostMan 在 Http 请求中携带 ENABLE_DUMP_FLAG:true 的 Header，然后通过 GraphQL Playground 查询，可以得到类似如下的结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;trace&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;spans&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... ... </span><span style="color:#6A737D;">// 省略该 Trace中的Span信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;threadDumps&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [ </span><span style="color:#6A737D;">// 该Trace携带的ThreadDump信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;dumpTimestamp&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1580029989057</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;threadInfo&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">DubboServerHandler-172.17.32.91:20880-thread-36</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> Id=106 TIMED_WAITING</span><span style="color:#79B8FF;">\\n\\t</span><span style="color:#9ECBFF;">at java.lang.Thread.sleep(Native Method)</span><span style="color:#79B8FF;">\\n\\t</span><span style="color:#9ECBFF;">at com.xxx.service.DefaultHelloService.say$original$MUzxmS45(DefaultHelloService.java:15)</span><span style="color:#79B8FF;">\\n\\t</span><span style="color:#9ECBFF;"> ... ...&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 省略其他 ThreadDump信息</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;trace&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;spans&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        ... ... </span><span style="color:#6A737D;">// 省略该 Trace中的Span信息 </span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;threadDumps&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [ </span><span style="color:#6A737D;">// 该Trace携带的ThreadDump信息</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;dumpTimestamp&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1580029989057</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;threadInfo&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">DubboServerHandler-172.17.32.91:20880-thread-36</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> Id=106 TIMED_WAITING</span><span style="color:#005CC5;">\\n\\t</span><span style="color:#032F62;">at java.lang.Thread.sleep(Native Method)</span><span style="color:#005CC5;">\\n\\t</span><span style="color:#032F62;">at com.xxx.service.DefaultHelloService.say$original$MUzxmS45(DefaultHelloService.java:15)</span><span style="color:#005CC5;">\\n\\t</span><span style="color:#032F62;"> ... ...&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 省略其他 ThreadDump信息</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时最后将通过一张图来总结 Thread Dump 功能的关键点：</p>`,46),D=s("ul",null,[s("li",null,[s("p",null,"Http 请求进入 demo-webapp 之后，tomcat-7.x-8.x-plugin 插件会从其 Header 中查找 ENABLE_DUMP_FLAG 标记并记录到 RuntimeContext 中。之后通过 ContextManager 创建此次请求对应的 TracingContext 对象以及 EntrySpan，在完成 TracingContext 的初始化之后会触发 TracingContextPostConstructListener，即 ThreadDumpManager，记录需要进行 dump 的线程 ID。后续请求执行过程中会调用 create*Span() 方法创建 Span，同时 ThreadDumpManager 中的后台线程也会定时 dump 线程信息，如图中（3）和（4）处所示。")]),s("li",null,[s("p",null,"接下来，在 demo-webapp 通过 Dubbo 调用 demo-provider 服务的时候，会将生成的 ContextCarrier 对象（包含 ENABLE_DUMP_FLAG 标记）序列化成字符串添加到 RpcContext 中，随 Dubbo 请求发送到下游的 demo-provider。在 demo-provider 服务的 dubbo-plugin 插件中会处理 ContextCarrier，当然也会处理 ENABLE_DUMP_FLAG 标记。")]),s("li",null,[s("p",null,"回到（5）处，demo-webapp 处理完请求后会关闭 TracingContext，同时会触发所有 TraceContextListener 监听器，其中 ThreadDumpManager 会根据记录的线程 ID 关联 ThreadDump 与 TraceSegment，TraceSegmentServiceClient 则负责通过 gRPC 将序列化后的 TraceSegment 数据发送到后端的 OAP 集群。")]),s("li",null,[s("p",null,"OAP 服务中的 trace-receiver-plugin 负责接收 Agent 发送的 TraceSegment 数据，解析之后会由 RecordStreamProcessor 存储到 ElasticSearch 中。")]),s("li",null,[s("p",null,"OAP 服务中的 query-graphql-plugin 插件负责处理查询 Trace 的请求，这里会从 SegmentObject 中获取全部 ThreadDump 填充到 Trace 中返回给用户。")])],-1),T=s("p",null,"好了，本专栏的全部内容就讲完了，最后的彩蛋我将带你回顾 SkyWalking 架构并展望未来。",-1);function A(B,v,b,S,x,_){const n=e("Image");return t(),r("div",null,[E,y,i,d,u,F,p(n,{alt:"耗时高Trace截图.png",src:"https://s0.lgstatic.com/i/image/M00/32/07/CgqCHl8NcY-AR8DqAAE4jw3ZU4w560.png"}),a(),g,p(n,{alt:"image (16).png",src:"https://s0.lgstatic.com/i/image/M00/32/07/CgqCHl8NcbiATQCtAAFX5iKjEXQ354.png"}),a(),C,p(n,{alt:"image (17).png",src:"https://s0.lgstatic.com/i/image/M00/32/07/CgqCHl8NcdWAM9Y7AAHmR7mU2eY385.png"}),a(),h,p(n,{alt:"ThreadDumpManager继承关系图.png",src:"https://s0.lgstatic.com/i/image/M00/31/FC/Ciqc1F8NcZ6AU8e4AABDtSvDmRA656.png"}),a(),m,p(n,{alt:"image (18).png",src:"https://s0.lgstatic.com/i/image/M00/31/FD/Ciqc1F8NcpiAEXK3AANCpmKvbm8849.png"}),a(),D,T])}const k=o(c,[["render",A]]);export{L as __pageData,k as default};
