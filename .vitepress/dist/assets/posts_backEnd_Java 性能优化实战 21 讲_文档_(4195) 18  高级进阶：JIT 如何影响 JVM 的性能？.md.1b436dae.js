import{_ as l,j as p,o,g as e,k as n,h as t,s as c,Q as a}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"方法内联 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4195) 18  高级进阶：JIT 如何影响 JVM 的性能？.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4195) 18  高级进阶：JIT 如何影响 JVM 的性能？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4195) 18  高级进阶：JIT 如何影响 JVM 的性能？.md"},E=c("p",null,"我们在上一课时，我们了解到 Java 虚拟机栈，其实是一个双层的栈，如下图所示，第一层就是针对 method 的栈帧，第二层是针对字节码指令的操作数栈。",-1),y=a(`<p>Java 虚拟机栈图</p><p>栈帧的创建是需要耗费资源的，尤其是对于 Java 中常见的 getter、setter 方法来说，这些代码通常只有一行，每次都创建栈帧的话就太浪费了。</p><p>另外，Java 虚拟机栈对代码的执行，采用的是字节码解释的方式，考虑到下面这段代码，变量 a 声明之后，就再也不被使用，要是按照字节码指令解释执行的话，就要做很多无用功。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> attr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> attr;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ok&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> attr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> attr;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ok&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面是这段代码的字节码指令，我们能够看到 aload_0，getfield ，istore_1 这三个无用的字节码指令操作。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> public </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    descriptor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ()</span><span style="color:#79B8FF;">V</span></span>
<span class="line"><span style="color:#E1E4E8;">    flags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ACC_PUBLIC</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Code</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      stack</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, locals</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, args_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_0</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> getfield      #</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Field attr:I</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> istore_1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> getstatic     #</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ldc           #</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// String ok</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">LineNumberTable</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        line </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">        line </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">        line </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> public </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    descriptor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ()</span><span style="color:#005CC5;">V</span></span>
<span class="line"><span style="color:#24292E;">    flags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ACC_PUBLIC</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      stack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, locals</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, args_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_0</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> getfield      #</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field attr:I</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> istore_1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> getstatic     #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ldc           #</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// String ok</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">LineNumberTable</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        line </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">        line </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">        line </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span></span></code></pre></div><p>另外，我们了解到垃圾回收器回收的目标区域主要是堆，堆上创建的对象越多，GC 的压力就越大。要是能把一些变量，直接在栈上分配，那 GC 的压力就会小一些。</p><p>其实，我们说的这几个优化的可能性，JVM 已经通过 JIT 编译器（Just In Time Compiler）去做了，JIT 最主要的目标是把解释执行变成编译执行。</p><p>为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，这就是 JIT 编译器的功能。</p>`,9),i=a(`<p>如上图，JVM 会将调用次数很高，或者在 for 循环里频繁被使用的代码，编译成机器码，然后缓存在 CodeCache 区域里，下次调用相同方法的时候，就可以直接使用。</p><p>那 JIT 编译都有哪些手段呢？接下来我们详细介绍。</p><h3 id="方法内联" tabindex="-1">方法内联 <a class="header-anchor" href="#方法内联" aria-label="Permalink to &quot;方法内联&quot;">​</a></h3><p>在 <strong>&quot;05 | 工具实践：基准测试 JMH，精确测量方法性能&quot;</strong> 提到 JMH 的时候，我们就了解到 CompilerControl 注解可以控制 JIT 编译器的一些行为。</p><p>其中，有一个模式叫作<strong>inline</strong>，就是内联的意思，它会把一些短小的方法体，直接纳入目标方法的作用范围之内，就像是直接在代码块中追加代码。这样，就少了一次方法调用，执行速度就能够得到提升，这就是方法内联的概念。</p><p>可以使用 -XX:-Inline 参数来禁用方法内联，如果想要更细粒度的控制，可以使用 CompileCommand 参数，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#B392F0;">XX</span><span style="color:#E1E4E8;">:CompileCommand</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">exclude,java</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lang</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">String.indexOf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">XX</span><span style="color:#24292E;">:CompileCommand</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">exclude,java</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lang</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">String.indexOf</span></span></code></pre></div><p>JMH 就是使用这个参数来实现的自定义编译特性。</p><p>在 JDK 的源码里，也有很多被 <strong>@ForceInline</strong>注解的方法，这些方法，会在执行的时候被强制进行内联；而被**@DontInline**注解的方法，则始终不会被内联。</p><p>我们从 <strong>&quot;05 | 工具实践：基准测试 JMH，精确测量方法性能&quot;</strong> 获取第 16 个代码示例，来看一下 JIT 这些优化的效果，主要代码块如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">target_blank</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// this method was intentionally left blank</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CompilerControl</span><span style="color:#E1E4E8;">(CompilerControl.Mode.DONT_INLINE)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">target_dontInline</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// this method was intentionally left blank</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CompilerControl</span><span style="color:#E1E4E8;">(CompilerControl.Mode.INLINE)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">target_inline</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// this method was intentionally left blank</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CompilerControl</span><span style="color:#E1E4E8;">(CompilerControl.Mode.EXCLUDE)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">target_exclude</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// this method was intentionally left blank</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">target_blank</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// this method was intentionally left blank</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CompilerControl</span><span style="color:#24292E;">(CompilerControl.Mode.DONT_INLINE)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">target_dontInline</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// this method was intentionally left blank</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CompilerControl</span><span style="color:#24292E;">(CompilerControl.Mode.INLINE)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">target_inline</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// this method was intentionally left blank</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CompilerControl</span><span style="color:#24292E;">(CompilerControl.Mode.EXCLUDE)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">target_exclude</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// this method was intentionally left blank</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行结果如下，可以看到不使用 JIT 编译和使用了 JIT 编译的性能差距达到了 100 多倍，使用了内联比不使用内联，速度快了 5 倍。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Benchmark                                Mode  Cnt   Score   Error  Units</span></span>
<span class="line"><span style="color:#E1E4E8;">JMHSample_16_CompilerControl.baseline    avgt    </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0.485</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">1.492</span><span style="color:#E1E4E8;">  ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op</span></span>
<span class="line"><span style="color:#E1E4E8;">JMHSample_16_CompilerControl.blank       avgt    </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0.483</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">1.518</span><span style="color:#E1E4E8;">  ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op</span></span>
<span class="line"><span style="color:#E1E4E8;">JMHSample_16_CompilerControl.dontinline  avgt    </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1.934</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">3.112</span><span style="color:#E1E4E8;">  ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op</span></span>
<span class="line"><span style="color:#E1E4E8;">JMHSample_16_CompilerControl.exclude     avgt    </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">57.603</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">4.435</span><span style="color:#E1E4E8;">  ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op</span></span>
<span class="line"><span style="color:#E1E4E8;">JMHSample_16_CompilerControl.inline      avgt    </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0.483</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">1.520</span><span style="color:#E1E4E8;">  ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Benchmark                                Mode  Cnt   Score   Error  Units</span></span>
<span class="line"><span style="color:#24292E;">JMHSample_16_CompilerControl.baseline    avgt    </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0.485</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">1.492</span><span style="color:#24292E;">  ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op</span></span>
<span class="line"><span style="color:#24292E;">JMHSample_16_CompilerControl.blank       avgt    </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0.483</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">1.518</span><span style="color:#24292E;">  ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op</span></span>
<span class="line"><span style="color:#24292E;">JMHSample_16_CompilerControl.dontinline  avgt    </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1.934</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">3.112</span><span style="color:#24292E;">  ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op</span></span>
<span class="line"><span style="color:#24292E;">JMHSample_16_CompilerControl.exclude     avgt    </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">57.603</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">4.435</span><span style="color:#24292E;">  ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op</span></span>
<span class="line"><span style="color:#24292E;">JMHSample_16_CompilerControl.inline      avgt    </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0.483</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">1.520</span><span style="color:#24292E;">  ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op</span></span></code></pre></div>`,13),F=a(`<p>JIT 编译之后的二进制代码，是放在 Code Cache 区域里的。这个区域的大小是固定的，而且一旦启动无法扩容。如果 Code Cache 满了，JVM 并不会报错，但会停止编译。所以编译执行就会退化为解释执行，性能就会降低。不仅如此，JIT 编译器会一直尝试去优化你的代码，造成 CPU 占用上升。</p><p>通过参数 -XX:ReservedCodeCacheSize 可以指定 Code Cache 区域的大小，如果你通过监控发现空间达到了上限，就要适当的增加它的大小。</p><h3 id="编译层次" tabindex="-1">编译层次 <a class="header-anchor" href="#编译层次" aria-label="Permalink to &quot;编译层次&quot;">​</a></h3><p>HotSpot 虚拟机包含多个即时编译器，有 C1，C2 和 Graal，JDK8 以后采用的是分层编译的模式。使用 jstack 命令获得的线程信息，经常能看到它们的身影。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;C2 CompilerThread0&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> cpu</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">830.</span><span style="color:#E1E4E8;">41ms elapsed</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4252.</span><span style="color:#E1E4E8;">14s tid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x00007ffaed023000</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x5a03</span><span style="color:#E1E4E8;"> waiting </span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> condition  [</span><span style="color:#79B8FF;">0x0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.</span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">State</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RUNNABLE</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">No</span><span style="color:#E1E4E8;"> compile task</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;C1 CompilerThread0&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> cpu</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">549.</span><span style="color:#E1E4E8;">91ms elapsed</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4252.</span><span style="color:#E1E4E8;">14s tid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x00007ffaed831800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x5c03</span><span style="color:#E1E4E8;"> waiting </span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> condition  [</span><span style="color:#79B8FF;">0x0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.</span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">State</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RUNNABLE</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">No</span><span style="color:#E1E4E8;"> compile task</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;C2 CompilerThread0&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> cpu</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">830.</span><span style="color:#24292E;">41ms elapsed</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4252.</span><span style="color:#24292E;">14s tid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x00007ffaed023000</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x5a03</span><span style="color:#24292E;"> waiting </span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> condition  [</span><span style="color:#005CC5;">0x0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.</span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">State</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RUNNABLE</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">No</span><span style="color:#24292E;"> compile task</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;C1 CompilerThread0&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> cpu</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">549.</span><span style="color:#24292E;">91ms elapsed</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4252.</span><span style="color:#24292E;">14s tid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x00007ffaed831800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x5c03</span><span style="color:#24292E;"> waiting </span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> condition  [</span><span style="color:#005CC5;">0x0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.</span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">State</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RUNNABLE</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">No</span><span style="color:#24292E;"> compile task</span></span></code></pre></div><p>使用额外线程进行即时编译，可以不用阻塞解释执行的逻辑。JIT 通常会在触发之后就在后台运行，编译完成之后就将相应的字节码替换为编译后的代码。</p><p>JIT 编译方式有两种：一种是编译方法，另一种是编译循环。</p><p>分层编译将 Java 虚拟机的执行状态分为了五个层次。</p><ul><li><p>字节码的解释执行;</p></li><li><p>执行不带 profiling 的 C1 代码;</p></li><li><p>执行仅带方法调用次数以及循环执行次数 profiling 的 C1 代码;</p></li><li><p>执行带所有 profiling 的 C1 代码;</p></li><li><p>执行 C2 代码。</p></li></ul><p>其中，Profiling 指的是运行时的程序的执行状态数据，比如循环调用的次数、方法调用的次数、分支跳转次数、类型转换次数等。比如 JDK 中的 hprof 工具，就是一种 profiler，说白了就是一些中间的统计数据。</p><p>在不启用分层编译的情况下，当方法的调用次数和循环回边的次数的总和，超过由参数 -XX:CompileThreshold 指定的阈值时，便会触发即时编译；但当启用分层编译时，这个参数将会失效，会采用一套动态调整进行调整。</p><h3 id="逃逸分析" tabindex="-1">逃逸分析 <a class="header-anchor" href="#逃逸分析" aria-label="Permalink to &quot;逃逸分析&quot;">​</a></h3><p><strong>下面着重讲解一下逃逸分析，这个知识点在面试的时候经常会被问到。</strong></p><p>我们先回顾一下上一课时留下的问题：我们常说的对象，除了基本数据类型，一定是在堆上分配的吗？</p><p>答案是否定的，通过逃逸分析，JVM 能够分析出一个新的对象的使用范围，从而决定是否要将这个对象分配到堆上。逃逸分析现在是 JVM 的默认行为，可以通过参数 -XX:-DoEscapeAnalysis 关掉它。</p><p>那什么样的对象算是逃逸的呢？可以看一下下面的两种典型情况。</p><p>如代码所示，对象被赋值给成员变量或者静态变量，可能被外部使用，变量就发生了逃逸。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EscapeAttr</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object attr;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        attr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EscapeAttr</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Object attr;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        attr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再看下面这段代码，对象通过 return 语句返回。由于程序并不能确定这个对象后续会不会被使用，外部的线程能够访问到这个结果，对象也发生了逃逸。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EscapeReturn</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object attr;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EscapeReturn</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Object attr;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Object obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那逃逸分析有什么好处呢？<br><strong>1. 栈上分配</strong></p><p>如果一个对象在子程序中被分配，指向该对象的指针永远不会逃逸，对象有可能会被优化为栈分配。栈分配可以快速地在栈帧上创建和销毁对象，不用再分配到堆空间，可以有效地减少 GC 的压力。</p><p><strong>2. 分离对象或标量替换</strong></p><p>但对象结构通常都比较复杂，如何将对象保存在栈上呢？</p><p>JIT 可以将对象打散，全部替换为一个个小的局部变量，这个打散的过程，就叫作标量替换（标量就是不能被进一步分割的变量，比如 int、long 等基本类型）。也就是说，标量替换后的对象，全部变成了局部变量，可以方便地进行栈上分配，而无须改动其他的代码。</p><p>从上面的描述我们可以看到，并不是所有的对象或者数组，都会在堆上分配。由于JIT的存在，如果发现某些对象没有逃逸出方法，那么就有可能被优化成栈分配。</p><p><strong>3.同步消除</strong></p><p>如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p><p>注意这是针对 synchronized 来说的，JUC 中的 Lock 并不能被消除。</p><p>要开启同步消除，需要加上 -XX:+EliminateLocks 参数。由于这个参数依赖逃逸分析，所以同时要打开 -XX:+DoEscapeAnalysis 选项。</p><p>比如下面这段代码，JIT 判断对象锁只能被一个线程访问，就可以去掉这个同步的影响。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncEliminate</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncEliminate</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>仓库中也有一个 StringBuffer 和 StringBuilder 的 JMH 测试对比，可以看到在开启了锁消除的情况下，它们的效率相差并不大。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Benchmark                          Mode  Cnt       Score       Error   Units</span></span>
<span class="line"><span style="color:#E1E4E8;">BuilderVsBufferBenchmark.buffer   thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">90085.927</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">95174.289</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span>
<span class="line"><span style="color:#E1E4E8;">BuilderVsBufferBenchmark.builder  thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">103280.200</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">76172.538</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Benchmark                          Mode  Cnt       Score       Error   Units</span></span>
<span class="line"><span style="color:#24292E;">BuilderVsBufferBenchmark.buffer   thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">90085.927</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">95174.289</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span>
<span class="line"><span style="color:#24292E;">BuilderVsBufferBenchmark.builder  thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">103280.200</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">76172.538</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span></code></pre></div><h3 id="jitwatch" tabindex="-1">JITWatch <a class="header-anchor" href="#jitwatch" aria-label="Permalink to &quot;JITWatch&quot;">​</a></h3><p>可以使用 jitwatch 工具来观测 JIT 的一些行为。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/AdoptOpenJDK/jitwatch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/AdoptOpenJDK/jitwatch</span></span></code></pre></div><p>在代码的启动参数里加入 LogCompilation 等参数开启记录，将生成一个 jitdemo.log 文件。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading  -XX:+PrintAssembly -XX:+LogCompilation -XX:LogFile=jitdemo.log</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">-XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading  -XX:+PrintAssembly -XX:+LogCompilation -XX:LogFile=jitdemo.log</span></span></code></pre></div><p>使用 jitwatch 工具，可打开这个文件，看到详细的编译结果。</p>`,40),d=a(`<p>下面是一段测试代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleInliningTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleInliningTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1_000_000 is F4240 in hex</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1_000_000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(sum, </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 63 hex</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Sum:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> sum);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleInliningTest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleInliningTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleInliningTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1_000_000 is F4240 in hex</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1_000_000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(sum, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 63 hex</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Sum:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sum);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleInliningTest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从执行后的结果可以看到，热点 for 循环已经使用 JIT 进行了编译，而里面应用的 add 方法，也已经被内联。</p>`,3),C=a(`<h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>JIT 是现代 JVM 主要的优化点，能够显著地提升程序的执行效率。从解释执行到最高层次的 C2，一个数量级的性能提升也是有可能的。但即时编译的过程是非常缓慢的，既耗时间也费空间，所以这些优化操作会和解释执行同时进行。</p><p>值得注意的是，JIT 在某些情况下还会出现逆优化。比如一些热部署方式触发的 redefineClass，就会造成 JIT 编译结果的失效，相关的内联代码也需要重新生成。</p><p>JIT 优化并不见得每次都有用，比如下面这段代码，编译后执行，会发生死循环。但如果你在启动的时候，加上 <strong>-Djava.compiler=NONE</strong> 参数，禁用 JIT，它就能够执行下去。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestThread</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isStop</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> stop;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">			} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				ex.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">			System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;END&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		TestThread test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestThread</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">		test.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">isStop</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">			System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;--&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">			i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestThread</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isStop</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> stop;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				ex.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;END&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		TestThread test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		test.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">isStop</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">			System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;--&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>我们主要看了方法内联、逃逸分析等概念，了解到一些方法在被优化后，对象并不一定是在堆上分配的，它可能在被标量替换后，直接在栈上分配。这几个知识点也是在面试中经常被问到的。</strong></p><p>JIT 的这些优化一般都是在后台进程默默地去做了，我们不需要关注太多。Code Cache 的容量达到上限，会影响程序执行的效率，但除非你有特别多的代码，默认的 240M 一般来说，足够用了。</p>`,7);function g(u,h,A,D,m,v){const s=p("Image");return o(),e("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/4C/B4/CgqCHl9YevCARjawAAC9Bvf_IoE321.png"}),t(),y,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/4C/B4/CgqCHl9YeyCAWROAAABdUyAOP5E893.png"}),i,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/4C/B4/CgqCHl9Ye0KASdaPAAFd8UGlCRY151.png"}),F,n(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/4C/A9/Ciqc1F9Ye36AMYIDAAcn4iSavAY997.png"}),d,n(s,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/4C/B5/CgqCHl9Ye4eAaVmXAATwlN8rh4w940.png"}),C])}const _=l(r,[["render",g]]);export{B as __pageData,_ as default};
