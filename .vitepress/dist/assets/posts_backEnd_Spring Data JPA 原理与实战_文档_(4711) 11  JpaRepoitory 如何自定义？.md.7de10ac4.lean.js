import{_ as o,j as e,o as t,g as r,k as p,h as a,s,Q as l}from"./chunks/framework.4e7d56ce.js";const U=JSON.parse('{"title":"11JpaRepoitory如何自定义？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4711) 11  JpaRepoitory 如何自定义？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4711) 11  JpaRepoitory 如何自定义？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4711) 11  JpaRepoitory 如何自定义？.md"},y=s("h1",{id:"_11jparepoitory如何自定义",tabindex:"-1"},[a("11JpaRepoitory如何自定义？ "),s("a",{class:"header-anchor",href:"#_11jparepoitory如何自定义","aria-label":'Permalink to "11JpaRepoitory如何自定义？"'},"​")],-1),E=s("p",null,"通过前面课时的内容，相信你已经掌握了很多 Repository 的高级用法，但是在实际工作场景中也难免会出现自定义 Repsitory 实现类的场景，这一课时我们就来看一下如何定义自己的 Repository 实现类。要知道 JPA 的操作核心是 EntityManager，那么我们先看看 Entitymanager 究竟为何物。",-1),i=s("h3",{id:"entitymanager-介绍",tabindex:"-1"},[a("EntityManager 介绍 "),s("a",{class:"header-anchor",href:"#entitymanager-介绍","aria-label":'Permalink to "EntityManager 介绍"'},"​")],-1),F=s("p",null,"Java Persistence API 规定，操作数据库实体必须要通过 EntityManager 进行，而我们前面看到了所有的 Repository 在 JPA 里面的实现类是 SimpleJpaRepository，它在真正操作实体的时候都是调用 EntityManager 里面的方法。",-1),g=s("p",null,"我们在 SimpleJpaRepository 里面设置一个断点，这样可以很容易看得出来 EntityManger 是 JPA 的接口协议，而其现类是 Hibernate 里面的 SessionImpl，如下图所示：",-1),d=l("",64),u=s("p",null,"JpaRepositoriesAutoConfiguration 里面再进行 @Import(JpaRepositoriesRegistrar.class) 操作，显示如下：",-1),A=s("p",null,"而 JpaRepositoriesRegistrar.class 里面配置了 @EnableJpaRepositories，从而使默认值产生了如下效果：",-1),C=l("",19),m=s("p",null,"设置一个断点，就会发现，每个 Repository 都会构建一个 JpaRepositoryFactory，当 JpaRepositoryFactory 加载完之后会执行 afterPropertiesSet() 方法，找到 UserRepository 的 Fragment（即我们自定义的 CustomizedUserRepositoryImpl），如下所示：",-1),D=s("p",null,"我们再看 RepositoryFactory 里面的所有方法，如下图，一看就是动态代理生成 Repository 的实现类，我们进到这个方法里面设置个断点继续观察。",-1),h=s("p",null,"然后我们通过断点可以看到，fragments 放到了 composition 里面，最后又放到了 advice 里面，最后才生成了我们的 repository 的代理类。这时我们再打开 repository 详细地看看里面的值。",-1),b=s("p",null,"可以看到 repository 里面的 interfaces，就是我们刚才测试 userRepository 里面的接口定义的。",-1),R=l("",16),B=s("p",null,"我们还看刚才的方法的断点，如下：",-1),v=l("",12);function f(k,_,T,q,M,S){const n=e("Image");return t(),r("div",null,[y,E,i,F,g,p(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/60/71/CgqCHl-NSiyAayfKAAd_nCX2604232.png"}),a(),d,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/60/71/CgqCHl-NSnqAe4i7AAHNYXt2Rbo960.png"}),a(),u,p(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/60/66/Ciqc1F-NSoOAZLC9AAFKgEB_ZbM671.png"}),a(),A,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/60/66/Ciqc1F-NSoqAC5SBAAGV8mrWK7o741.png"}),a(),C,p(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/60/72/CgqCHl-NSq6AFAjuAAD93443waY861.png"}),a(),m,p(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/60/72/CgqCHl-NSrSAZj08AALzEQG8Sws504.png"}),a(),D,p(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/60/72/CgqCHl-NSrmANrzIAALtqlmUVEE696.png"}),a(),h,p(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/60/72/CgqCHl-NSr-AfcXSAAQrh_gENO8150.png"}),a(),b,p(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/60/66/Ciqc1F-NSsaAeUC3AALLvvFPRrM408.png"}),a(),R,p(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/60/67/Ciqc1F-NS0KACTP-AAHMT_HqmJA240.png"}),a(),B,p(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/60/67/Ciqc1F-NS0iAQ1eDAAFzL2qkapU450.png"}),a(),v])}const j=o(c,[["render",f]]);export{U as __pageData,j as default};
