import{_ as o,j as p,o as e,g as t,k as a,s,h as c,Q as l}from"./chunks/framework.e0c66c3f.js";const D=JSON.parse('{"title":"JConsole 介绍 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3156) 第26讲：JConole 与四字母命令：如何监控服务器上 ZooKeeper 的运行状态？.md","filePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3156) 第26讲：JConole 与四字母命令：如何监控服务器上 ZooKeeper 的运行状态？.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/ZooKeeper源码分析与实战_文档/(3156) 第26讲：JConole 与四字母命令：如何监控服务器上 ZooKeeper 的运行状态？.md"},y=s("p",null,"在上节课中我们学习了在生产环境中，如何部署 ZooKeeper 集群服务。为了我们的程序服务能够持续稳定地对外提供服务，除了在部署的时候尽量采用分布式、集群服务等方式提高 ZooKeeper 服务的可靠性外，在服务上线运行的时候，我们还可以通过对 ZooKeeper 服务的运行状态进行监控，如运行 ZooKeeper 服务的生产服务器的 CPU 、内存、磁盘等使用情况来达到目的。在系统性能达到瓶颈的时候，可以增加服务器资源，以保证服务的稳定性。",-1),E=s("h3",{id:"jconsole-介绍",tabindex:"-1"},[c("JConsole 介绍 "),s("a",{class:"header-anchor",href:"#jconsole-介绍","aria-label":'Permalink to "JConsole 介绍"'},"​")],-1),i=s("p",null,"通常使用 Java 语言进行开发的技术人员对 JConsole 并不陌生。JConsole 是 JDK 自带的工具，用来监控程序运行的状态信息。如下图所示，我们打开系统的控制终端，输入 JConsole 就会弹出一个这样的监控界面。",-1),F=l("",9),d=l("",31);function C(_,h,m,u,k,v){const n=p("Image");return e(),t("div",null,[y,E,i,a(n,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/3B/72/CgqCHl8kAy2ANt38AADolBOTa2s256.png"}),F,a(n,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/3B/67/Ciqc1F8kA0CAF9c9AACQw_N29Fg373.png"}),d])}const A=o(r,[["render",C]]);export{D as __pageData,A as default};
