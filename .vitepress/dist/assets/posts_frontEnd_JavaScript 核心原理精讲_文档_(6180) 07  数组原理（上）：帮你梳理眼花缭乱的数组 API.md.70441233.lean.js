import{_ as o,j as e,o as r,h as t,k as n,f as l,Q as p,s}from"./chunks/framework.d3daa342.js";const b=JSON.parse('{"title":"07数组原理（上）：帮你梳理眼花缭乱的数组API","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6180) 07  数组原理（上）：帮你梳理眼花缭乱的数组 API.md","filePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6180) 07  数组原理（上）：帮你梳理眼花缭乱的数组 API.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/JavaScript 核心原理精讲_文档/(6180) 07  数组原理（上）：帮你梳理眼花缭乱的数组 API.md"},y=p("",32),E=p("",57),i=s("p",null,"以上，数组的各方法基本讲解完毕，这些方法之间存在很多共性，如下：",-1),F=s("ul",null,[s("li",null,[s("p",null,"所有插入元素的方法，比如 push、unshift 一律返回数组新的长度；")]),s("li",null,[s("p",null,"所有删除元素的方法，比如 pop、shift、splice 一律返回删除的元素，或者返回删除的多个元素组成的数组；")]),s("li",null,[s("p",null,"部分遍历方法，比如 forEach、every、some、filter、map、find、findIndex，它们都包含 function(value,index,array){} 和 thisArg 这样两个形参。")])],-1),u=s("p",null,"在日常的前端开发工作中，开发者往往会忽视对数组 API 方法的系统性学习，但其实因为数组的方法较多，每个方法的参数和细节也比较零散，很多开发者很难有一个系统的、整体的认识，在开发过程中还要频繁地查询 MDN 文档，造成效率低下以及代码能力难以进一步提升等问题。",-1),A=s("p",null,"因此我希望通过这一讲的学习，你能很好地掌握数组的 API 方法，以便在开发中规避我所说的这些问题。",-1),C=s("p",null,"在后续的课程中，我将继续带领你尝试一些数组 API 方法的手工实现。同时希望你多动手练习以熟练使用所学的知识点，也欢迎你在下方留言讨论自己在学习过程中遇到的困惑，以及学习感悟等，让我们共同进步。",-1);function D(B,d,v,q,g,h){const a=e("Image");return r(),t("div",null,[y,n(a,{alt:"WechatIMG13.png",src:"https://s0.lgstatic.com/i/image2/M01/09/B2/CgpVE2APjSiAGLqXAAB5v09b2C4966.png"}),l(),E,n(a,{alt:"Lark20210126-164334.png",src:"https://s0.lgstatic.com/i/image2/M01/09/CC/Cip5yGAP1k2ACVqpAAE5zFVPD7o375.png"}),l(),i,F,u,A,C])}const m=o(c,[["render",D]]);export{b as __pageData,m as default};
