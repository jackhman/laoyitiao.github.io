import{_ as s,j as o,o as i,g as n,k as c,h as a,Q as l,s as e}from"./chunks/framework.4e7d56ce.js";const S=JSON.parse('{"title":"第13讲：如何完整学习MC协议及优化client访问？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/300分钟吃透分布式缓存_文档/(172) 第13讲：如何完整学习MC协议及优化client访问？.md","filePath":"posts/backEnd/300分钟吃透分布式缓存_文档/(172) 第13讲：如何完整学习MC协议及优化client访问？.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/300分钟吃透分布式缓存_文档/(172) 第13讲：如何完整学习MC协议及优化client访问？.md"},r=l("",23),d=e("h6",{id:"获取命令",tabindex:"-1"},[a("获取命令 "),e("a",{class:"header-anchor",href:"#获取命令","aria-label":'Permalink to "获取命令"'},"​")],-1),_=e("p",null,"Mc 的获取协议，只有 get、gets 两种指令，如下图所示。格式为 get/gets 后，跟随若干个 key，然后 \\r\\n 结束请求命令。get 指令只获取 key 的 flag 及 value，gets 会额外多获取一个 cas unique id值。gets 主要是为 cas 指令服务的。",-1),u=e("p",null,"获取命令的响应，就是 value 字串，后面跟上 key、flag、value 字节数，以及 value 的 data block 块。最后跟一个 END\\r\\n 表明所有存在的 key/value 已经返回，如果没有返回的 key，则表明这个 key 在 Mc 中不存在。",-1),h=l("",24),M=e("p",null,"回顾一下最近几节课的内容。首先，学习了 Mc 的系统架构，学习了 Mc 基于 libevent 的网络模型，学习了 Mc 的多线程处理，包括主线程、工作线程如何进行网络 IO 协调及处理，学习了 Mc 的状态机。然后，继续学习了 Mc 用于定位 key 的哈希表，学习了用于数据生命周期管理的 LRU，还学习 slab 分配机制，以及 Mc 数据的存储机理。最后，还完整学习了 Mc的协议，了解了以 Java 语言为例的 3 种 Mc client，以及 Mc client 在线上使用过程中，如何进行调优及改进。",-1),k=e("p",null,"根据下面 Mc 协议的思维导图，查看自己是否对所有指令都有理解，可以结合 Mc 的协议文档，启动一个 Mc 实例，进行各个命令的实际操练。",-1),m=e("p",null,'OK，这节课就讲到这里啦，下一课时我将分享"Memcached 经典问题及解决方案"，记得按时来听课哈。好，下节课见，拜拜！',-1),b=e("br",null,null,-1),g=e("br",null,null,-1);function q(y,T,R,v,E,C){const t=o("Image");return i(),n("div",null,[r,c(t,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/99/E6/CgotOV2lNqOABAkvAAC0oNkHCok972.png"}),a(),d,_,u,c(t,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/99/C6/CgoB5l2lNqOAd_DsAADGwh4XXXo008.png"}),a(),h,c(t,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/99/E6/CgotOV2lNqOAbxgDAAFIRc23upk013.png"}),a(),M,k,c(t,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/99/C6/CgoB5l2lNqOASrF2AADzbaPtWVI518.png"}),a(),m,b,g])}const f=s(p,[["render",q]]);export{S as __pageData,f as default};
