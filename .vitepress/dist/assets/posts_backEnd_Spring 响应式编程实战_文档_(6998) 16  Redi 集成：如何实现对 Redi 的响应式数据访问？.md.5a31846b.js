import{_ as l,j as o,o as e,g as t,k as a,h as p,Q as s}from"./chunks/framework.e0c66c3f.js";const C=JSON.parse('{"title":"Spring Data Redis Reactive 技术栈 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6998) 16  Redi 集成：如何实现对 Redi 的响应式数据访问？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6998) 16  Redi 集成：如何实现对 Redi 的响应式数据访问？.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/Spring 响应式编程实战_文档/(6998) 16  Redi 集成：如何实现对 Redi 的响应式数据访问？.md"},r=s(`<p>上一讲，我们介绍了 Spring Data MongoDB Reactive 组件，它是 Spring Data MongoDB 的响应式版本。今天我们要讨论的是 Spring Data Redis Reactive 组件，它专门针对 Redis 这款 NoSQL 数据库提供了响应式编程能力。</p><p>使用该组件的步骤与 MongoDB 类似，我们同样围绕开发环境的初始化、Repository 的创建以及与 Service 层之间的集成这些步骤展开讨论，并结合 ReactiveSpringCSS 案例来集成这款主流的缓存中间件。</p><h3 id="spring-data-redis-reactive-技术栈" tabindex="-1">Spring Data Redis Reactive 技术栈 <a class="header-anchor" href="#spring-data-redis-reactive-技术栈" aria-label="Permalink to &quot;Spring Data Redis Reactive 技术栈&quot;">​</a></h3><p>我们可以通过导入 spring-boot-starter-data-redis-reactive 依赖来集成 Spring Data Reactive Redis 模块。与上一讲介绍的 MongoDB 不同，Redis 不提供响应式存储库，也就没有 ReactiveMongoRepository 这样的工具类可以直接使用。因此，ReactiveRedisTemplate 类成为响应式 Redis 数据访问的核心工具类。与 ReactiveMongoTemplate 和 ReactiveMongoOperations 之间的关系类似，ReactiveRedisTemplate 模板类实现了 ReactiveRedisOperations 接口定义的 API。</p><p>ReactiveRedisOperations 中定义了一批针对 Redis 各种数据结构的操作方法，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveRedisOperations</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">HK</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HV</span><span style="color:#E1E4E8;">&gt; ReactiveHashOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HK</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HV</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForHash</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HK</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HV</span><span style="color:#E1E4E8;">&gt; ReactiveHashOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HK</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HV</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForHash</span><span style="color:#E1E4E8;">(RedisSerializationContext&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serializationContext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveListOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; ReactiveListOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForList</span><span style="color:#E1E4E8;">(RedisSerializationContext&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serializationContext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveSetOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForSet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; ReactiveSetOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForSet</span><span style="color:#E1E4E8;">(RedisSerializationContext&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serializationContext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveValueOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; ReactiveValueOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForValue</span><span style="color:#E1E4E8;">(RedisSerializationContext&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serializationContext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveZSetOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForZSet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; ReactiveZSetOperations&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">opsForZSet</span><span style="color:#E1E4E8;">(RedisSerializationContext&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serializationContext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveRedisOperations</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">HK</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HV</span><span style="color:#24292E;">&gt; ReactiveHashOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HK</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HV</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForHash</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HK</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HV</span><span style="color:#24292E;">&gt; ReactiveHashOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HK</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HV</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForHash</span><span style="color:#24292E;">(RedisSerializationContext&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serializationContext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ReactiveListOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; ReactiveListOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForList</span><span style="color:#24292E;">(RedisSerializationContext&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serializationContext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ReactiveSetOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForSet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; ReactiveSetOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForSet</span><span style="color:#24292E;">(RedisSerializationContext&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serializationContext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ReactiveValueOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; ReactiveValueOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">(RedisSerializationContext&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serializationContext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ReactiveZSetOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForZSet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; ReactiveZSetOperations&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">opsForZSet</span><span style="color:#24292E;">(RedisSerializationContext&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serializationContext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述方法分别对应了 Redis 中 String、List、Set、ZSet 和 Hash 这五种常见的数据结构。同时，我们还看到了一个用于序列化管理的上下文对象 RedisSerializationContext。ReactiveRedisTemplate 提供了所有必需的序列化/反序列化过程，所支持的序列化方式包括常见的 Jackson2JsonRedisSerializer、JdkSerializationRedisSerializer、StringRedisSerializer 等。</p><p>除了序列化管理，ReactiveRedisTemplate 的另一个核心功能是完成自动化的连接过程管理。应用程序想要访问 Redis，就需要获取 RedisConnection，而获取 RedisConnection 的途径是通过注入 RedisConnectionFactory 到 ReactiveRedisTemplate 中，该 ReactiveRedisTemplate 就能获取 RedisConnection。</p><p>在 Redis 中，常见的 ConnectionFactory 有两种，一种是传统的 JedisConnectionFactory，而另一种就是新型的 LettuceConnectionFactory。LettuceConnectionFactory 基于 Netty 创建连接实例，可以在多个线程间实现线程安全，满足多线程环境下的并发访问要求。更为重要的是，LettuceConnectionFactory 同时支持响应式的数据访问用法，它是 ReactiveRedisConnectionFactory 接口的一种实现。Lettuce 也是目前 Redis 唯一的响应式 Java 连接器。Lettuce 4.x 版本使用 RxJava 作为底层响应式流实现方案。但是，该库的 5.x 分支切换到了 Project Reactor。</p><h3 id="应用-reactive-redis" tabindex="-1">应用 Reactive Redis <a class="header-anchor" href="#应用-reactive-redis" aria-label="Permalink to &quot;应用 Reactive Redis&quot;">​</a></h3><p>在你对这一组件有一定的解了之后，接下来，我将要为你介绍使用 Spring Data Redis Reactive 进行系统开发的具体过程，首先要说的同样是初始化运行环境。</p><h4 id="初始化-reactive-redis-运行环境" tabindex="-1">初始化 Reactive Redis 运行环境 <a class="header-anchor" href="#初始化-reactive-redis-运行环境" aria-label="Permalink to &quot;初始化 Reactive Redis 运行环境&quot;">​</a></h4><p>首先我们在 pom 文件中添加 spring-boot-starter-data-redis-reactive 依赖，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">org.springframework.boot</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">boot</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">starter</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">redis</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">reactive</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">org.springframework.boot</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">boot</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">starter</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">redis</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">reactive</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>然后我们通过 Maven 可以得到如下图所示的组件依赖图，可以看到 spring-boot-starter-data-redis-reactive 组件同时依赖于 spring-data-redis 和 luttuce-core 组件。</p>`,15),E=s(`<p>spring-boot-starter-data-redis-reactive 组件依赖图</p><p>在上图中，我们同时看到 luttuce-core 组件中使用了 Project Reactor 框架中的 reactor-core 组件，这点与前面介绍的技术栈是完全一致的。</p><p>为了获取连接，我们需要初始化 LettuceConnectionFactory。LettuceConnectionFactory 类的最简单使用方法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ReactiveRedisConnectionFactory </span><span style="color:#B392F0;">lettuceConnectionFactory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LettuceConnectionFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ReactiveRedisConnectionFactory </span><span style="color:#B392F0;">lettuceConnectionFactory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LettuceConnectionFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6379</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ReactiveRedisConnectionFactory </span><span style="color:#6F42C1;">lettuceConnectionFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LettuceConnectionFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ReactiveRedisConnectionFactory </span><span style="color:#6F42C1;">lettuceConnectionFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LettuceConnectionFactory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6379</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然，LettuceConnectionFactory 也提供了一系列配置项供我们在初始化时进行设置，示例代码如下所示，我们可以对连接的安全性、超时时间等参数进行设置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ReactiveRedisConnectionFactory </span><span style="color:#B392F0;">lettuceConnectionFactory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RedisStandaloneConfiguration redisStandaloneConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RedisStandaloneConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        redisStandaloneConfiguration.</span><span style="color:#B392F0;">setDatabase</span><span style="color:#E1E4E8;">(database);</span></span>
<span class="line"><span style="color:#E1E4E8;">        redisStandaloneConfiguration.</span><span style="color:#B392F0;">setHostName</span><span style="color:#E1E4E8;">(host);</span></span>
<span class="line"><span style="color:#E1E4E8;">        redisStandaloneConfiguration.</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(port);</span></span>
<span class="line"><span style="color:#E1E4E8;">     redisStandaloneConfiguration.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(RedisPassword.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(password));</span></span>
<span class="line"><span style="color:#E1E4E8;">        LettuceClientConfiguration.LettuceClientConfigurationBuilder lettuceClientConfigurationBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LettuceClientConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        LettuceConnectionFactory factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LettuceConnectionFactory</span><span style="color:#E1E4E8;">(redisStandaloneConfiguration,</span></span>
<span class="line"><span style="color:#E1E4E8;">               lettuceClientConfigurationBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> factory;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ReactiveRedisConnectionFactory </span><span style="color:#6F42C1;">lettuceConnectionFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        RedisStandaloneConfiguration redisStandaloneConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RedisStandaloneConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        redisStandaloneConfiguration.</span><span style="color:#6F42C1;">setDatabase</span><span style="color:#24292E;">(database);</span></span>
<span class="line"><span style="color:#24292E;">        redisStandaloneConfiguration.</span><span style="color:#6F42C1;">setHostName</span><span style="color:#24292E;">(host);</span></span>
<span class="line"><span style="color:#24292E;">        redisStandaloneConfiguration.</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(port);</span></span>
<span class="line"><span style="color:#24292E;">     redisStandaloneConfiguration.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(RedisPassword.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(password));</span></span>
<span class="line"><span style="color:#24292E;">        LettuceClientConfiguration.LettuceClientConfigurationBuilder lettuceClientConfigurationBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LettuceClientConfiguration</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        LettuceConnectionFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LettuceConnectionFactory</span><span style="color:#24292E;">(redisStandaloneConfiguration,</span></span>
<span class="line"><span style="color:#24292E;">               lettuceClientConfigurationBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> factory;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了 LettuceConnectionFactory，就可以用它来进一步初始化 ReactiveRedisTemplate。ReactiveRedisTemplate 的创建方式如下所示。与传统 RedisTemplate 创建方式的主要区别在于，ReactiveRedisTemplate 依赖于 ReactiveRedisConnectionFactory 来获取 ReactiveRedisConnection。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">ReactiveRedisTemplate</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">reactiveRedisTemplate</span><span style="color:#E1E4E8;">(ReactiveRedisConnectionFactory factory) {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ReactiveRedisTemplate&lt;&gt;(factory, </span></span>
<span class="line"><span style="color:#E1E4E8;">	RedisSerializationContext.</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveRedisTemplate</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Account</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">redisOperations</span><span style="color:#E1E4E8;">(ReactiveRedisConnectionFactory factory) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Jackson2JsonRedisSerializer&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; serializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	Jackson2JsonRedisSerializer&lt;&gt;(Account.class);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        RedisSerializationContext.RedisSerializationContextBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Account</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RedisSerializationContext</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">newSerializationContext</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringRedisSerializer</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    RedisSerializationContext&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	builder.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">(serializer).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ReactiveRedisTemplate&lt;&gt;(factory, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">ReactiveRedisTemplate</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">reactiveRedisTemplate</span><span style="color:#24292E;">(ReactiveRedisConnectionFactory factory) {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ReactiveRedisTemplate&lt;&gt;(factory, </span></span>
<span class="line"><span style="color:#24292E;">	RedisSerializationContext.</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    ReactiveRedisTemplate</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Account</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">redisOperations</span><span style="color:#24292E;">(ReactiveRedisConnectionFactory factory) {</span></span>
<span class="line"><span style="color:#24292E;">	Jackson2JsonRedisSerializer&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; serializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	Jackson2JsonRedisSerializer&lt;&gt;(Account.class);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        RedisSerializationContext.RedisSerializationContextBuilder</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Account</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RedisSerializationContext</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">newSerializationContext</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringRedisSerializer</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    RedisSerializationContext&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	builder.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">(serializer).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ReactiveRedisTemplate&lt;&gt;(factory, context);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码中，我们使用了 Jackson2 作为数据存储的序列化方式，并对 Account 对象映射的规则做了初始化。</p><h4 id="创建-reactive-redis-repository" tabindex="-1">创建 Reactive Redis Repository <a class="header-anchor" href="#创建-reactive-redis-repository" aria-label="Permalink to &quot;创建 Reactive Redis Repository&quot;">​</a></h4><p>因为没有直接可用的 Reactive Repository，所以在创建针对 Redis 的响应式 Repository 时，我们将采用&quot;14 | 响应式全栈：响应式编程能为数据访问过程带来什么样的变化&quot;中介绍的第三种方法，即自定义数据访问层接口。这里创建了 AccountRedisRepository 接口，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountRedisRepository</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">saveAccount</span><span style="color:#E1E4E8;">(Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">updateAccount</span><span style="color:#E1E4E8;">(Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">deleteAccount</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Flux&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllAccounts</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountRedisRepository</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">saveAccount</span><span style="color:#24292E;">(Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">updateAccount</span><span style="color:#24292E;">(Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">deleteAccount</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Flux&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllAccounts</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后我们创建了 AccountRedisRepositoryImpl 类来实现 AccountRedisRepository 接口中定义的方法，这里就会用到前面初始化的 ReactiveRedisTemplate。AccountRedisRepositoryImpl 类代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Repository</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountRedisRepositoryImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountRedisRepository</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ReactiveRedisTemplate&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; reactiveRedisTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String HASH_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Account:&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">saveAccount</span><span style="color:#E1E4E8;">(Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reactiveRedisTemplate.</span><span style="color:#B392F0;">opsForValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(HASH_NAME </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), account);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">updateAccount</span><span style="color:#E1E4E8;">(Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reactiveRedisTemplate.</span><span style="color:#B392F0;">opsForValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(HASH_NAME </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), account);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">deleteAccount</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reactiveRedisTemplate.</span><span style="color:#B392F0;">opsForValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(HASH_NAME </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> accountId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reactiveRedisTemplate.</span><span style="color:#B392F0;">opsForValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(HASH_NAME </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> accountId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Flux&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllAccounts</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reactiveRedisTemplate.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(HASH_NAME </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">((String key) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; mono </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reactiveRedisTemplate.</span><span style="color:#B392F0;">opsForValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mono;</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Repository</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountRedisRepositoryImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountRedisRepository</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ReactiveRedisTemplate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; reactiveRedisTemplate;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String HASH_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Account:&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">saveAccount</span><span style="color:#24292E;">(Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reactiveRedisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(HASH_NAME </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), account);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">updateAccount</span><span style="color:#24292E;">(Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reactiveRedisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(HASH_NAME </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), account);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">deleteAccount</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reactiveRedisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(HASH_NAME </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> accountId);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reactiveRedisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(HASH_NAME </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> accountId);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Flux&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllAccounts</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reactiveRedisTemplate.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(HASH_NAME </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">((String key) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; mono </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reactiveRedisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mono;</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中的 reactiveRedisTemplate.opsForValue() 方法将使用 ReactiveValueOperations 来实现对 Redis 中数据的具体操作。与传统的 RedisOperations 工具类一样，响应式 Redis 也提供了 ReactiveHashOperations、ReactiveListOperations、ReactiveSetOperations、ReactiveValueOperations 和 ReactiveZSetOperations 类来分别处理不同的数据类型。</p><p>同时，在最后的 findAllAccounts() 方法中，我也演示了如何使用&quot;07 | Reactor 操作符（上）：如何快速转换响应式流&quot;中介绍的 flatMap 操作符，来根据 Redis 中的 Key 获取具体实体对象的处理方式，这种处理方式在响应式编程过程中应用非常广泛。</p><h4 id="在-service-层中调用-reactive-repository" tabindex="-1">在 Service 层中调用 Reactive Repository <a class="header-anchor" href="#在-service-层中调用-reactive-repository" aria-label="Permalink to &quot;在 Service 层中调用 Reactive Repository&quot;">​</a></h4><p>在 Service 层中调用 AccountRedisRepository 的过程比较简单，我们创建了对应的 AccountService 类，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AccountRedisRepository </span></span>
<span class="line"><span style="color:#E1E4E8;">	accountRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">saveAccount</span><span style="color:#E1E4E8;">(account);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">deleteAccount</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(id).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;findOneAccount&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Flux&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllAccounts</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">findAllAccounts</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;findAllAccounts&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountRedisRepository </span></span>
<span class="line"><span style="color:#24292E;">	accountRepository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">saveAccount</span><span style="color:#24292E;">(account);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">deleteAccount</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(id).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;findOneAccount&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Flux&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllAccounts</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">findAllAccounts</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;findAllAccounts&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这些方法都只是对 AccountRedisRepository 中对应方法的简单调用。在每次调用中，我们也通过 log 操作符进行了日志的记录。</p><h3 id="案例集成-在-reactivespringcss-案例中整合-redis" tabindex="-1">案例集成：在 ReactiveSpringCSS 案例中整合 Redis <a class="header-anchor" href="#案例集成-在-reactivespringcss-案例中整合-redis" aria-label="Permalink to &quot;案例集成：在 ReactiveSpringCSS 案例中整合 Redis&quot;">​</a></h3><p>在 ReactiveSpringCSS 中，Redis 的作用是实现缓存，这里就需要考虑它的具体应用场景。我们知道，在整体架构上，customer-service 一般会与用户服务 account-service 进行交互，但因为用户账户信息的更新属于低频事件，所以我们设计的实现方式是 account-service 通过消息中间件的方式将用户账户变更信息主动推送给 customer--service。而在这个时候，customer--service 就可以把接收到的用户账户信息保存在 Redis 中，两者之间的交互过程如下图所示。</p>`,22),y=s(`<p>customer-service 服务与 account-service 服务交互图</p><p>在&quot;10 | WebFlux（上）：如何使用注解编程模式构建异步非阻塞服务&quot;中，我们已经梳理了 customer-service 中用于生成客户工单的 generateCustomerTicket 方法的整体流程，我带你回顾一下其伪代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">generateCustomerTicket {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    创建 CustomerTicket 对象</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	从远程 account</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service 中获取 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	从远程 order</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service 中获取Order对象</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	设置 CustomerTicket 对象属性</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	保存 CustomerTicket 对象并返回</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">generateCustomerTicket {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    创建 CustomerTicket 对象</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	从远程 account</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service 中获取 Account 对象</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	从远程 order</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service 中获取Order对象</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	设置 CustomerTicket 对象属性</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	保存 CustomerTicket 对象并返回</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，customer-service 已经可以从 Redis 缓存中获取变更之后的用户账户信息了。但如果用户信息没有变更，那么 Redis 中就不存在相关数据，我们还是需要访问远程服务。因此，整体流程需要做相应的调整，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">generateCustomerTicket {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    创建 CustomerTicket 对象</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(Redis 中已存在目标 Account 对象) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        从 Redis 中获取 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    从远程 account</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service 中获取 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	从远程 order</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service 中获取 Order 对象</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	设置 CustomerTicket 对象属性</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	保存 CustomerTicket 对象并返回</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">generateCustomerTicket {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    创建 CustomerTicket 对象</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(Redis 中已存在目标 Account 对象) {</span></span>
<span class="line"><span style="color:#24292E;">        从 Redis 中获取 Account 对象</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	    从远程 account</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service 中获取 Account 对象</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	从远程 order</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service 中获取 Order 对象</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	设置 CustomerTicket 对象属性</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	保存 CustomerTicket 对象并返回</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>让我们把上述流程的调整反映在案例代码上。针对上述流程，我先基于第 10 讲中的实现方法给出原始 ReactiveAccountClient 类的实现过程，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveAccountClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:8082/accounts/{accountId}&quot;</span><span style="color:#E1E4E8;">, accountId) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(AccountMapper.class).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAccountFromRemote&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> account;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveAccountClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://127.0.0.1:8082/accounts/{accountId}&quot;</span><span style="color:#24292E;">, accountId) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(AccountMapper.class).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAccountFromRemote&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> account;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里直接使用 WebClient 类完成了对 account-service 的远程调用。现在，流程做了调整，我们需要在进行远程调用之前，先访问 Redis。因此，我们先在 ReactiveAccountClient 类中添加针对访问 Redis 的相关代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AccountRedisRepository accountRedisRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccountMapper</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAccountFromCache</span><span style="color:#E1E4E8;">(String accountId) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRedisRepository.</span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(accountId);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountRedisRepository accountRedisRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccountMapper</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAccountFromCache</span><span style="color:#24292E;">(String accountId) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRedisRepository.</span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(accountId);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里使用AccountRedisRepository完成数据的查询。然后，我们再基于该方法来重构 ReactiveAccountClient 中的 findAccountById 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccountMapper</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(String accountId){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//先从 Redis 中获取目标 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; accountMonoFromCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAccountFromCache</span><span style="color:#E1E4E8;">(accountId); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//如果 Redis 中没有目标 Account 对象，则进行远程获取</span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; accountMono </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> accountMonoFromCache.</span><span style="color:#B392F0;">switchIfEmpty</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getAccountFromRemote</span><span style="color:#E1E4E8;">(accountId));</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountMono;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccountMapper</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(String accountId){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//先从 Redis 中获取目标 Account 对象</span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; accountMonoFromCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAccountFromCache</span><span style="color:#24292E;">(accountId); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//如果 Redis 中没有目标 Account 对象，则进行远程获取</span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; accountMono </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accountMonoFromCache.</span><span style="color:#6F42C1;">switchIfEmpty</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getAccountFromRemote</span><span style="color:#24292E;">(accountId));</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountMono;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里用到了 Reactor 提供的switchIfEmpty 操作符来判断是否能够从 Redis 中获取目标 Account 对象，如果不能则再调用getAccountFromRemote 进行远程获取。getAccountFromRemote 方法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccountMapper</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAccountFromRemote</span><span style="color:#E1E4E8;">(String accountId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//远程获取 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; accountMonoFromRemote</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:8082/accounts/{accountId}&quot;</span><span style="color:#E1E4E8;">, accountId) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(AccountMapper.class).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAccountFromRemote&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//将获取到的 Account 对象放入 Redis 中</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountMonoFromRemote.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">putAccountIntoCache);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccountMapper</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAccountFromRemote</span><span style="color:#24292E;">(String accountId) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//远程获取 Account 对象</span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; accountMonoFromRemote</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://127.0.0.1:8082/accounts/{accountId}&quot;</span><span style="color:#24292E;">, accountId) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(AccountMapper.class).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAccountFromRemote&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//将获取到的 Account 对象放入 Redis 中</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountMonoFromRemote.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">putAccountIntoCache);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们先从 account-service 中远程获取 Account 对象，然后再把获取到的对象通过 putAccountIntoCache 方法放入 Redis 中以便下次直接从缓存中进行获取。putAccountIntoCache 方法实现如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccountMapper</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">putAccountIntoCache</span><span style="color:#E1E4E8;">(AccountMapper account) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRedisRepository.</span><span style="color:#B392F0;">saveAccount</span><span style="color:#E1E4E8;">(account).</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">( saved </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; savedAccount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> accountRedisRepository.</span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> savedAccount;</span></span>
<span class="line"><span style="color:#E1E4E8;">     });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccountMapper</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">putAccountIntoCache</span><span style="color:#24292E;">(AccountMapper account) {</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRedisRepository.</span><span style="color:#6F42C1;">saveAccount</span><span style="color:#24292E;">(account).</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">( saved </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; savedAccount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accountRedisRepository.</span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> savedAccount;</span></span>
<span class="line"><span style="color:#24292E;">     });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中我们首先通过 accountRedisRepository 的 saveAccount 方法将对象保存到 Redis 中，然后再通过 findAccountById 从 Redis 中获取所保存的数据进行返回。<strong>请注意，accountRedisRepository 的 saveAccount 方法的返回值是 Mono<code>&lt;Boolean&gt;</code>，而我们想要获取的目标对象类型是 Mono<code>&lt;AccountMapper&gt;</code>，所以这里使用了 flatMap 操作符完成了两者之间的转换</strong>。这也是 flatMap 操作符非常常见的一种用法。</p><p>最后，让我们确认一下重构之后的 ReactiveAccountClient 的完整代码，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveAccountClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AccountRedisRepository accountRedisRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountFromCache</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRedisRepository.</span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(accountId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">putAccountIntoCache</span><span style="color:#E1E4E8;">(AccountMapper </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRedisRepository.</span><span style="color:#B392F0;">saveAccount</span><span style="color:#E1E4E8;">(account).</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">( saved </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; savedAccount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> accountRedisRepository.</span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> savedAccount;</span></span>
<span class="line"><span style="color:#E1E4E8;">     });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//先从 Redis 中获取目标 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; accountMonoFromCache</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAccountFromCache</span><span style="color:#E1E4E8;">(accountId); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//如果 Redis 中没有目标 Account 对象，则进行远程获取</span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; accountMono </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> accountMonoFromCache.</span><span style="color:#B392F0;">switchIfEmpty</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getAccountFromRemote</span><span style="color:#E1E4E8;">(accountId));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountMono;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountFromRemote</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//远程获取 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; accountMonoFromRemote</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:8082/accounts/{accountId}&quot;</span><span style="color:#E1E4E8;">, accountId) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(AccountMapper.class).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAccountFromRemote&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//将获取到的 Account 对象放入 Redis 中</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountMonoFromRemote.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">putAccountIntoCache);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveAccountClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountRedisRepository accountRedisRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountFromCache</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRedisRepository.</span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(accountId);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">putAccountIntoCache</span><span style="color:#24292E;">(AccountMapper </span><span style="color:#E36209;">account</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRedisRepository.</span><span style="color:#6F42C1;">saveAccount</span><span style="color:#24292E;">(account).</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">( saved </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; savedAccount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accountRedisRepository.</span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> savedAccount;</span></span>
<span class="line"><span style="color:#24292E;">     });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//先从 Redis 中获取目标 Account 对象</span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; accountMonoFromCache</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAccountFromCache</span><span style="color:#24292E;">(accountId); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//如果 Redis 中没有目标 Account 对象，则进行远程获取</span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; accountMono </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accountMonoFromCache.</span><span style="color:#6F42C1;">switchIfEmpty</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getAccountFromRemote</span><span style="color:#24292E;">(accountId));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountMono;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountFromRemote</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//远程获取 Account 对象</span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; accountMonoFromRemote</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://127.0.0.1:8082/accounts/{accountId}&quot;</span><span style="color:#24292E;">, accountId) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(AccountMapper.class).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAccountFromRemote&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//将获取到的 Account 对象放入 Redis 中</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountMonoFromRemote.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">putAccountIntoCache);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，当我们访问 customer-service 里面 CustomerTicketService 中的 generateCustomerTicket 方法时，就会从 Redis 中获取数据从而提高访问效率。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>Redis 是一款主流的缓存数据库，和 MongoDB 一样提供了实现响应式流的驱动程序。而 Spring 家族中的 Spring Data Redis Reactive 组件则提供了以响应式流的方法访问 Redis 的高效开发模式，本讲结合案例对这一组件的使用方式进行了详细的讨论。</p><p>最后给你留一道思考题：在使用 Spring Data Redis Reactive 时，如果想要实现一个自定义的响应式 Repository 应该怎么做？</p><p>在 Spring Data 中，除了 MongoDB 和 Redis 之外，还针对 Cassandra 和 CouchBase 提供了响应式驱动程序，对于关系型数据库而言则没有直接的解决方案。因此，如何在系统中为关系型数据库添加响应式数据访问机制，从而确保全栈式的响应式数据流是一大挑战。下一讲，我们将深入讨论这一话题。</p><blockquote><p>点击链接，获取课程相关代码 ↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,24);function i(u,d,F,A,g,R){const n=o("Image");return e(),t("div",null,[r,a(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M01/3A/1D/Cgp9HWB-UKuAHIxRAA0aJtyWMgI410.png"}),p(),E,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/39/FD/CioPOWB9VM-AZWmYAADG17Qg_-g409.png"}),p(),y])}const D=l(c,[["render",i]]);export{C as __pageData,D as default};
