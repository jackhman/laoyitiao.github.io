import{_ as s,o as a,g as n,Q as p}from"./chunks/framework.f949202b.js";const m=JSON.parse('{"title":"什么是联合文件系统 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/045_由浅入深吃透 Docker/(4585) 14  文件存储驱动：AUFS 文件系统原理及生产环境的最佳配置.md","filePath":"posts/backEnd/045_由浅入深吃透 Docker/(4585) 14  文件存储驱动：AUFS 文件系统原理及生产环境的最佳配置.md","lastUpdated":null}'),l={name:"posts/backEnd/045_由浅入深吃透 Docker/(4585) 14  文件存储驱动：AUFS 文件系统原理及生产环境的最佳配置.md"},o=p(`<p>我们知道，Docker 主要是基于 Namespace、cgroups 和联合文件系统这三大核心技术实现的。前面的课时我详细讲解了 Namespace 和 cgroups 的相关原理，那么你知道联合文件系统是什么吗？它的原理又是什么呢？</p><p>首先我们来了解一下什么是联合文件系统。</p><h3 id="什么是联合文件系统" tabindex="-1">什么是联合文件系统 <a class="header-anchor" href="#什么是联合文件系统" aria-label="Permalink to &quot;什么是联合文件系统&quot;">​</a></h3><p>联合文件系统（Union File System，Unionfs）是一种分层的轻量级文件系统，它可以把多个目录内容联合挂载到同一目录下，从而形成一个单一的文件系统，这种特性可以让使用者像是使用一个目录一样使用联合文件系统。</p><p>那联合文件系统对于 Docker 是一个怎样的存在呢？它可以说是 Docker 镜像和容器的基础，因为它可以使 Docker 可以把镜像做成分层的结构，从而使得镜像的每一层可以被共享。例如两个业务镜像都是基于 CentOS 7 镜像构建的，那么这两个业务镜像在物理机上只需要存储一次 CentOS 7 这个基础镜像即可，从而节省大量存储空间。</p><p>说到这儿，你有没有发现，联合文件系统只是一个概念，真正实现联合文件系统才是关键，那如何实现呢？其实实现方案有很多，Docker 中最常用的联合文件系统有三种：AUFS、Devicemapper 和 OverlayFS。</p><p>今天我主要讲解 Docker 中最常用的联合文件系统里的 AUFS，为什么呢？因为 AUFS 是 Docker 最早使用的文件系统驱动，多用于 Ubuntu 和 Debian 系统中。在 Docker 早期，OverlayFS 和 Devicemapper 相对不够成熟，AUFS 是最早也是最稳定的文件系统驱动。 Devicemapper 和 OverlayFS 联合文件系统，我将在第 15 和 16 课时为你详细剖析 。</p><p>接下来，我们就看看如何配置 Docker 的 AUFS 模式。</p><h3 id="如何配置-docker-的-aufs-模式" tabindex="-1">如何配置 Docker 的 AUFS 模式 <a class="header-anchor" href="#如何配置-docker-的-aufs-模式" aria-label="Permalink to &quot;如何配置 Docker 的 AUFS 模式&quot;">​</a></h3><p>AUFS 目前并未被合并到 Linux 内核主线，因此只有 Ubuntu 和 Debian 等少数操作系统支持 AUFS。你可以使用以下命令查看你的系统是否支持 AUFS：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ grep aufs </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">proc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">filesystems</span></span>
<span class="line"><span style="color:#E1E4E8;">nodev   aufs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ grep aufs </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">proc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">filesystems</span></span>
<span class="line"><span style="color:#24292E;">nodev   aufs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>执行以上命令后，如果输出结果包含<code>aufs</code>，则代表当前操作系统支持 AUFS。AUFS 推荐在 Ubuntu 或 Debian 操作系统下使用，如果你想要在 CentOS 等操作系统下使用 AUFS，需要单独安装 AUFS 模块（生产环境不推荐在 CentOS 下使用 AUFS，如果你想在 CentOS 下安装 AUFS 用于研究和测试，可以参考这个<a href="https://github.com/bnied/kernel-ml-aufs" target="_blank" rel="noreferrer">链接</a>），安装完成后使用上述命令输出结果中有<code>aufs</code>即可。</p><p>当确认完操作系统支持 AUFS 后，你就可以配置 Docker 的启动参数了。</p><p>先在 /etc/docker 下新建 daemon.json 文件，并写入以下内容：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;storage-driver&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;aufs&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;storage-driver&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;aufs&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后使用以下命令重启 Docker：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ sudo systemctl restart docker</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ sudo systemctl restart docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Docker 重启以后使用<code>docker info</code>命令即可查看配置是否生效：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ sudo docker info</span></span>
<span class="line"><span style="color:#E1E4E8;">Client</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;"> Debug Mode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">Server</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;"> Containers</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  Running</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  Paused</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  Stopped</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;"> Images</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;"> Server Version</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19.03</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">12</span></span>
<span class="line"><span style="color:#E1E4E8;"> Storage Driver</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aufs</span></span>
<span class="line"><span style="color:#E1E4E8;">  Root Dir</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs</span></span>
<span class="line"><span style="color:#E1E4E8;">  Backing Filesystem</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> extfs</span></span>
<span class="line"><span style="color:#E1E4E8;">  Dirs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  Dirperm1 Supported</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ sudo docker info</span></span>
<span class="line"><span style="color:#24292E;">Client</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;"> Debug Mode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">Server</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;"> Containers</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  Running</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  Paused</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  Stopped</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;"> Images</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;"> Server Version</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19.03</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">12</span></span>
<span class="line"><span style="color:#24292E;"> Storage Driver</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aufs</span></span>
<span class="line"><span style="color:#24292E;">  Root Dir</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">docker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs</span></span>
<span class="line"><span style="color:#24292E;">  Backing Filesystem</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> extfs</span></span>
<span class="line"><span style="color:#24292E;">  Dirs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  Dirperm1 Supported</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>可以看到 Storage Driver 已经变为 aufs，证明配置已经生效，配置生效后就可以使用 AUFS 为 Docker 提供联合文件系统了。</p><p>配置好 Docker 的 AUFS 联合文件系统后，你一定很好奇 AUFS 到底是如何工作的呢？下面我带你详细学习一下 AUFS 的工作原理。</p><h3 id="aufs-工作原理" tabindex="-1">AUFS 工作原理 <a class="header-anchor" href="#aufs-工作原理" aria-label="Permalink to &quot;AUFS 工作原理&quot;">​</a></h3><h4 id="aufs-是如何存储文件的" tabindex="-1">AUFS 是如何存储文件的？ <a class="header-anchor" href="#aufs-是如何存储文件的" aria-label="Permalink to &quot;AUFS 是如何存储文件的？&quot;">​</a></h4><p>AUFS 是联合文件系统，意味着它在主机上使用多层目录存储，<strong>每一个目录在 AUFS 中都叫作分支，而在 Docker 中则称之为层（layer），但最终呈现给用户的则是一个普通单层的文件系统，我们把多层以单一层的方式呈现出来的过程叫作联合挂载。</strong></p><p><img src="https://s0.lgstatic.com/i/image/M00/5E/82/CgqCHl-GwcCAOu4aAABzKSlpRlI180.png" alt="Lark20201014-171313.png"><br> 图 1 AUFS 工作原理示意图</p><p>如图 1 所示，每一个镜像层和容器层都是 /var/lib/docker 下的一个子目录，镜像层和容器层都在 aufs/diff 目录下，每一层的目录名称是镜像或容器的 ID 值，联合挂载点在 aufs/mnt 目录下，mnt 目录是真正的容器工作目录。</p><p>下面我们针对 aufs 文件夹下的各目录结构，在创建容器前后的变化做详细讲述。</p><p>当一个镜像未生成容器时，AUFS 的存储结构如下。</p><ul><li><p>diff 文件夹：存储镜像内容，每一层都存储在以镜像层 ID 命名的子文件夹中。</p></li><li><p>layers 文件夹：存储镜像层关系的元数据，在 diif 文件夹下的每个镜像层在这里都会有一个文件，文件的内容为该层镜像的父级镜像的 ID。</p></li><li><p>mnt 文件夹：联合挂载点目录，未生成容器时，该目录为空。</p></li></ul><p>当一个镜像已经生成容器时，AUFS 存储结构会发生如下变化。</p><ul><li><p>diff 文件夹：当容器运行时，会在 diff 目录下生成容器层。</p></li><li><p>layers 文件夹：增加容器层相关的元数据。</p></li><li><p>mnt 文件夹：容器的联合挂载点，这和容器中看到的文件内容一致。</p></li></ul><p>以上便是 AUFS 的工作原理，那你知道容器的在工作过程中是如何使用 AUFS 的吗？</p><h4 id="aufs-是如何工作的" tabindex="-1">AUFS 是如何工作的？ <a class="header-anchor" href="#aufs-是如何工作的" aria-label="Permalink to &quot;AUFS 是如何工作的？&quot;">​</a></h4><p>AUFS 的工作过程中对文件的操作分为读取文件和修改文件。下面我们分别来看下 AUFS 对于不同的文件操作是如何工作的。</p><h5 id="_1-读取文件" tabindex="-1">1. 读取文件 <a class="header-anchor" href="#_1-读取文件" aria-label="Permalink to &quot;1. 读取文件&quot;">​</a></h5><p>当我们在容器中读取文件时，可能会有以下场景。</p><ul><li><p>文件在容器层中存在时：当文件存在于容器层时，直接从容器层读取。</p></li><li><p>当文件在容器层中不存在时：当容器运行时需要读取某个文件，如果容器层中不存在时，则从镜像层查找该文件，然后读取文件内容。</p></li><li><p>文件既存在于镜像层，又存在于容器层：当我们读取的文件既存在于镜像层，又存在于容器层时，将会从容器层读取该文件。</p></li></ul><h5 id="_2-修改文件或目录" tabindex="-1">2. 修改文件或目录 <a class="header-anchor" href="#_2-修改文件或目录" aria-label="Permalink to &quot;2. 修改文件或目录&quot;">​</a></h5><p>AUFS 对文件的修改采用的是写时复制的工作机制，这种工作机制可以最大程度节省存储空间。</p><p>具体的文件操作机制如下。</p><ul><li>第一次修改文件：当我们第一次在容器中修改某个文件时，AUFS 会触发写时复制操作，AUFS 首先从镜像层复制文件到容器层，然后再执行对应的修改操作。</li></ul><blockquote><p>AUFS 写时复制的操作将会复制整个文件，如果文件过大，将会大大降低文件系统的性能，因此当我们有大量文件需要被修改时，AUFS 可能会出现明显的延迟。好在，写时复制操作只在第一次修改文件时触发，对日常使用没有太大影响。</p></blockquote><ul><li>删除文件或目录：当文件或目录被删除时，AUFS 并不会真正从镜像中删除它，因为镜像层是只读的，AUFS 会创建一个特殊的文件或文件夹，这种特殊的文件或文件夹会阻止容器的访问。</li></ul><p>下面我们通过一个实例来演示一下 AUFS 。</p><h3 id="aufs-演示" tabindex="-1">AUFS 演示 <a class="header-anchor" href="#aufs-演示" aria-label="Permalink to &quot;AUFS 演示&quot;">​</a></h3><h4 id="准备演示目录和文件" tabindex="-1">准备演示目录和文件 <a class="header-anchor" href="#准备演示目录和文件" aria-label="Permalink to &quot;准备演示目录和文件&quot;">​</a></h4><p>首先我们在 /tmp 目录下创建 aufs 目录：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ cd </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp$ mkdir aufs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ cd </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp$ mkdir aufs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>准备挂载点目录：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp$ cd aufs</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ mkdir mnt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp$ cd aufs</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ mkdir mnt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接下来准备容器层内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">## 创建镜像层目录</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ mkdir container1</span></span>
<span class="line"><span style="color:#E1E4E8;">## 在镜像层目录下准备一个文件</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ echo Hello, Container layer</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> container1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">container1.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">## 创建镜像层目录</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ mkdir container1</span></span>
<span class="line"><span style="color:#24292E;">## 在镜像层目录下准备一个文件</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ echo Hello, Container layer</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> container1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">container1.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>最后准备镜像层内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">## 创建两个镜像层目录</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ mkdir image1 </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mkdir image2</span></span>
<span class="line"><span style="color:#E1E4E8;">## 分别写入数据</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ echo Hello, Image layer1</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> image1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">image1.txt</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ echo Hello, Image layer2</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> image2</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">image2.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">## 创建两个镜像层目录</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ mkdir image1 </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mkdir image2</span></span>
<span class="line"><span style="color:#24292E;">## 分别写入数据</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ echo Hello, Image layer1</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> image1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">image1.txt</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ echo Hello, Image layer2</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> image2</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">image2.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>准备好的目录和文件结构如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ tree .</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> container1</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   \`</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> container1.txt</span></span>
<span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> image1</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   \`</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> image1.txt</span></span>
<span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> image2</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   \`</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> image2.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">\`</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> mnt</span></span>
<span class="line"><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> directories, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> files</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ tree .</span></span>
<span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> container1</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   \`</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> container1.txt</span></span>
<span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> image1</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   \`</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> image1.txt</span></span>
<span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> image2</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   \`</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> image2.txt</span></span>
<span class="line"><span style="color:#24292E;">\`</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> mnt</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> directories, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> files</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="创建-aufs-联合文件系统" tabindex="-1">创建 AUFS 联合文件系统 <a class="header-anchor" href="#创建-aufs-联合文件系统" aria-label="Permalink to &quot;创建 AUFS 联合文件系统&quot;">​</a></h4><p>使用 mount 命令可以创建 AUFS 类型的文件系统，命令如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ sudo mount </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t aufs </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o dirs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">container1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">image2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">image1  none .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mnt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ sudo mount </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t aufs </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o dirs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">container1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">image2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">image1  none .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mnt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>mount 命令创建 AUFS 类型文件系统时，这里要注意，<strong>dirs 参数第一个冒号默认为读写权限，后面的目录均为只读权限，与 Docker 容器使用 AUFS 的模式一致。</strong></p><p>执行完上述命令后，mnt 变成了 AUFS 的联合挂载目录，我们可以使用 mount 命令查看一下已经创建的 AUFS 文件系统：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ mount </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t aufs</span></span>
<span class="line"><span style="color:#E1E4E8;">none on </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mnt type </span><span style="color:#B392F0;">aufs</span><span style="color:#E1E4E8;"> (rw,relatime,si</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">4174b83d649ffb7c)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ mount </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t aufs</span></span>
<span class="line"><span style="color:#24292E;">none on </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mnt type </span><span style="color:#6F42C1;">aufs</span><span style="color:#24292E;"> (rw,relatime,si</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">4174b83d649ffb7c)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们每创建一个 AUFS 文件系统，AUFS 都会为我们生成一个 ID，这个 ID 在 /sys/fs/aufs/ 会创建对应的目录，在这个 ID 的目录下可以查看文件挂载的权限。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ cat </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sys</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">si_4174b83d649ffb7c</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">/tmp/aufs/container1=rw</span></span>
<span class="line"><span style="color:#6A737D;">/tmp/aufs/image2=ro</span></span>
<span class="line"><span style="color:#6A737D;">/tmp/aufs/image1=ro</span></span>
<span class="line"><span style="color:#6A737D;">64</span></span>
<span class="line"><span style="color:#6A737D;">65</span></span>
<span class="line"><span style="color:#6A737D;">66</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ cat </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sys</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">si_4174b83d649ffb7c</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">/tmp/aufs/container1=rw</span></span>
<span class="line"><span style="color:#6A737D;">/tmp/aufs/image2=ro</span></span>
<span class="line"><span style="color:#6A737D;">/tmp/aufs/image1=ro</span></span>
<span class="line"><span style="color:#6A737D;">64</span></span>
<span class="line"><span style="color:#6A737D;">65</span></span>
<span class="line"><span style="color:#6A737D;">66</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可以看到 container1 目录的权限为 rw（代表可读写），image1 和 image2 的权限为 ro（代表只读）。</p><p>为了验证 mnt 目录下可以看到 container1、image1 和 image2 目录下的所有内容，我们使用 ls 命令查看一下 mnt 目录：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l mnt</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">total </span><span style="color:#79B8FF;">12</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ubuntu ubuntu </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> Sep  </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;"> container1.txt</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ubuntu ubuntu </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> Sep  </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">59</span><span style="color:#E1E4E8;"> image1.txt</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ubuntu ubuntu </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> Sep  </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">59</span><span style="color:#E1E4E8;"> image2.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l mnt</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">total </span><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ubuntu ubuntu </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> Sep  </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#24292E;"> container1.txt</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ubuntu ubuntu </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> Sep  </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">59</span><span style="color:#24292E;"> image1.txt</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ubuntu ubuntu </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> Sep  </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">59</span><span style="color:#24292E;"> image2.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以看到 mnt 目录下已经出现了我们准备的所有镜像层和容器层的文件。下面让我们来验证一下 AUFS 的写时复制。</p><h4 id="验证-aufs-的写时复制" tabindex="-1">验证 AUFS 的写时复制 <a class="header-anchor" href="#验证-aufs-的写时复制" aria-label="Permalink to &quot;验证 AUFS 的写时复制&quot;">​</a></h4><p>AUFS 的写时复制是指在容器中，只有需要修改某个文件时，才会把文件从镜像层复制到容器层，下面我们通过修改联合挂载目录 mnt 下的内容来验证下这个过程。</p><p>我们使用以下命令修改 mnt 目录下的 image1.txt 文件：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ echo Hello, Image layer1 changed</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> mnt</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">image1.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ echo Hello, Image layer1 changed</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mnt</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">image1.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后我们查看下 image1/image1.txt 文件内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ cat image1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">image1.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello, Image layer1</span><span style="color:#F97583;">!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ cat image1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">image1.txt</span></span>
<span class="line"><span style="color:#24292E;">Hello, Image layer1</span><span style="color:#D73A49;">!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>发现&quot;镜像层&quot;的 image1.txt 文件并未被修改。</p><p>然后我们查看一下&quot;容器层&quot;对应的 image1.txt 文件内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l container1</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">total </span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ubuntu ubuntu </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> Sep  </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;"> container1.txt</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ubuntu ubuntu </span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;"> Sep  </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> image1.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">## 查看文件内容</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">aufs$ cat container1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">image1.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello, Image layer1 changed</span><span style="color:#F97583;">!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l container1</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">total </span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ubuntu ubuntu </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> Sep  </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#24292E;"> container1.txt</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ubuntu ubuntu </span><span style="color:#005CC5;">29</span><span style="color:#24292E;"> Sep  </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> image1.txt</span></span>
<span class="line"><span style="color:#24292E;">## 查看文件内容</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">aufs$ cat container1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">image1.txt</span></span>
<span class="line"><span style="color:#24292E;">Hello, Image layer1 changed</span><span style="color:#D73A49;">!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>发现 AUFS 在&quot;容器层&quot;自动创建了 image1.txt 文件，并且内容为我们刚才写入的内容。</p><p>至此，我们完成了 AUFS 写时复制的验证。我们在第一次修改镜像内某个文件时，AUFS 会复制这个文件到容器层，然后在容器层对该文件进行修改操作，这就是 AUFS 最典型的特性写时复制。</p><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>到此，相信你知道了联合文件系统是一种分层的轻量级文件系统，它可以把多个目录内容联合挂载到同一目录下，从而形成一个单一的文件系统。同时也学会了如何配置 Docker 使用 AUFS ，并且明白了 AUFS 的工作原理。</p><p>那么你知道 AUFS 为什么一直没能成功进入 Linux 内核主线吗？ 思考后，可以把你的想法写在留言区。</p><p>下一课时，我将讲解 Docker 的另一个文件存储驱动：Devicemapper 文件系统原理及生产环境的最佳配置。</p>`,83),e=[o];function r(t,c,y,i,E,u){return a(),n("div",null,e)}const b=s(l,[["render",r]]);export{m as __pageData,b as default};
