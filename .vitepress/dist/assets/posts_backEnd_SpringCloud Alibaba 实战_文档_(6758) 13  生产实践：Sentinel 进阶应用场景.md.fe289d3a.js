import{_ as o,j as e,o as t,g as c,k as a,h as s,Q as l,s as p}from"./chunks/framework.4e7d56ce.js";const k=JSON.parse('{"title":"13生产实践：Sentinel进阶应用场景","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6758) 13  生产实践：Sentinel 进阶应用场景.md","filePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6758) 13  生产实践：Sentinel 进阶应用场景.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/SpringCloud Alibaba 实战_文档/(6758) 13  生产实践：Sentinel 进阶应用场景.md"},E=l(`<h1 id="_13生产实践-sentinel进阶应用场景" tabindex="-1">13生产实践：Sentinel进阶应用场景 <a class="header-anchor" href="#_13生产实践-sentinel进阶应用场景" aria-label="Permalink to &quot;13生产实践：Sentinel进阶应用场景&quot;">​</a></h1><p>上一讲我为各位讲解了 Nacos 配置中心的用途及配置技巧。本讲咱们基于上一讲的成果，学习如何在生产环境下通过 Nacos 实现 Sentinel 规则持久化。本讲咱们将介绍三方面内容：</p><ul><li><p>Sentinel 与Nacos整合实现规则持久化；</p></li><li><p>自定义资源点进行熔断保护；</p></li><li><p>开发友好的异常处理程序。</p></li></ul><h3 id="sentinel-与-nacos-整合实现规则持久化" tabindex="-1">Sentinel 与 Nacos 整合实现规则持久化 <a class="header-anchor" href="#sentinel-与-nacos-整合实现规则持久化" aria-label="Permalink to &quot;Sentinel 与 Nacos 整合实现规则持久化&quot;">​</a></h3><p>细心的你肯定在前面 Sentinel的使用过程中已经发现，当微服务重启以后所有的配置规则都会丢失，其中的根源是默认微服务将 Sentinel 的规则保存在 JVM 内存中，当应用重启后 JVM 内存销毁，规则就会丢失。为了解决这个问题，我们就需要通过某种机制将配置好的规则进行持久化保存，同时这些规则变更后还能及时通知微服务进行变更。</p><p>正好，上一讲我们讲解了 Nacos 配置中心的用法，无论是配置数据的持久化特性还是配置中心主动推送的特性都是我们需要的，因此 Nacos 自然就成了 Sentinel 规则持久化的首选。</p><p>本讲我们仍然通过实例讲解 Sentinel 与 Nacos 的整合过程。</p><h4 id="案例准备" tabindex="-1">案例准备 <a class="header-anchor" href="#案例准备" aria-label="Permalink to &quot;案例准备&quot;">​</a></h4><p>首先，咱们快速构建演示工程 sentinel-sample。</p><p><strong>1</strong>. 利用 Spring Initializr 向导创建 sentinel-sample 工程，pom.xml 增加以下三项依赖。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Nacos 客户端 Starter--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- Sentinel 客户端 Starter--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-alibaba-sentinel&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 对外暴露 Spring Boot 监控指标--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-actuator&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Nacos 客户端 Starter--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- Sentinel 客户端 Starter--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-sentinel&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 对外暴露 Spring Boot 监控指标--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-actuator&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>2</strong>. 配置 Nacos 与 Sentinel 客户端。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">sentinel-sample</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#应用名&amp;微服务 id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">sentinel</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#Sentinel Dashboard 通信地址</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">transport</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">dashboard</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">192.168.31.10:9100</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">eager</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#取消控制台懒加载</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">nacos</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#Nacos 通信地址</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">server-addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">192.168.31.10:8848</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">jackson</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">default-property-inclusion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">non_null</span></span>
<span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#85E89D;">management</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">endpoints</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">web</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#将所有可用的监控指标项对外暴露</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">exposure</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#可以访问 /actuator/sentinel进行查看Sentinel监控项</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">include</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;*&#39;</span></span>
<span class="line"><span style="color:#85E89D;">logging</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">level</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">debug</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#开启 debug 是学习需要，生产改为 info 即可</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">sentinel-sample</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#应用名&amp;微服务 id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">sentinel</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#Sentinel Dashboard 通信地址</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">transport</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">dashboard</span><span style="color:#24292E;">: </span><span style="color:#032F62;">192.168.31.10:9100</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">eager</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#取消控制台懒加载</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#Nacos 通信地址</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">192.168.31.10:8848</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">jackson</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">default-property-inclusion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">non_null</span></span>
<span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#22863A;">management</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">endpoints</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">web</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#将所有可用的监控指标项对外暴露</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">exposure</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#可以访问 /actuator/sentinel进行查看Sentinel监控项</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">include</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;*&#39;</span></span>
<span class="line"><span style="color:#22863A;">logging</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">level</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">root</span><span style="color:#24292E;">: </span><span style="color:#032F62;">debug</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#开启 debug 是学习需要，生产改为 info 即可</span></span></code></pre></div><p><strong>3</strong>. 在 sentinel-sample服务中，增加 SentinelSampleController 类，用于演示运行效果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SentinelSampleController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//演示用的业务逻辑类</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SampleService sampleService;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 流控测试接口</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/test_flow_rule&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseObject </span><span style="color:#B392F0;">testFlowRule</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//code=0 代表服务器处理成功</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResponseObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;success!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 熔断测试接口</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/test_degrade_rule&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseObject </span><span style="color:#B392F0;">testDegradeRule</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            sampleService.</span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IllegalStateException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//当 createOrder 业务处理过程中产生错误时会抛出IllegalStateException</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//IllegalStateException 是 JAVA 内置状态异常，在项目开发时可以更换为自己项目的自定义异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//出现错误后将异常封装为响应对象后JSON输出</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResponseObject</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">(),e.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResponseObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;order created!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SentinelSampleController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//演示用的业务逻辑类</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SampleService sampleService;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 流控测试接口</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test_flow_rule&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseObject </span><span style="color:#6F42C1;">testFlowRule</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//code=0 代表服务器处理成功</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResponseObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;success!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 熔断测试接口</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test_degrade_rule&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseObject </span><span style="color:#6F42C1;">testDegradeRule</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            sampleService.</span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IllegalStateException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//当 createOrder 业务处理过程中产生错误时会抛出IllegalStateException</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//IllegalStateException 是 JAVA 内置状态异常，在项目开发时可以更换为自己项目的自定义异常</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//出现错误后将异常封装为响应对象后JSON输出</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResponseObject</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">(),e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResponseObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;order created!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此外，ResponseObject 对象封装了响应的数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 封装响应数据的对象</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResponseObject</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String code; </span><span style="color:#6A737D;">//结果编码，0-固定代表处理成功</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String message;</span><span style="color:#6A737D;">//响应消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Object data;</span><span style="color:#6A737D;">//响应附加数据（可选）</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResponseObject</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> code;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//Getter/Setter省略</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 封装响应数据的对象</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResponseObject</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String code; </span><span style="color:#6A737D;">//结果编码，0-固定代表处理成功</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String message;</span><span style="color:#6A737D;">//响应消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Object data;</span><span style="color:#6A737D;">//响应附加数据（可选）</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResponseObject</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">code</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> code;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//Getter/Setter省略</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>4</strong>. 额外增加 SampleService 用于模拟业务逻辑，等下我们将用它讲解自定义资源点与熔断设置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 演示用的业务逻辑类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SampleService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//模拟创建订单业务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//模拟处理业务逻辑需要101毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;订单已创建&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 演示用的业务逻辑类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SampleService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//模拟创建订单业务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//模拟处理业务逻辑需要101毫秒</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;订单已创建&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>启动 sentinel-sample，访问<a href="http://localhost/test_flow_rule?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost/test_flow_rule</a>，浏览器出现code=0 的 JSON 响应，说明 sentinel-sample 服务启动成功。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;success!&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;success!&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="流控规则持久化" tabindex="-1">流控规则持久化 <a class="header-anchor" href="#流控规则持久化" aria-label="Permalink to &quot;流控规则持久化&quot;">​</a></h4><p>工程创建完成，下面咱们将 Sentinel接入 Nacos 配置中心。</p><p>第一步，pom.xml 新增 sentinel-datasource-nacos 依赖。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.csp&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sentinel-datasource-nacos&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.csp&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sentinel-datasource-nacos&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>sentinel-datasource-nacos 是 Sentinel 为 Nacos 扩展的数据源模块，允许将规则数据存储在 Nacos 配置中心，在微服务启动时利用该模块 Sentinel 会自动在 Nacos下载对应的规则数据。</p><p>第二步，在application.yml 文件中增加 Nacos下载规则，在原有的sentinel 配置下新增 datasource 选项。这里咱们暂时只对流控规则进行设置，重要配置项我在代码中进行了注释，请同学们仔细阅读。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">sentinel-sample</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#应用名&amp;微服务id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">sentinel</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#Sentinel Dashboard通信地址</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">transport</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">dashboard</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">192.168.31.10:9100</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">eager</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#取消控制台懒加载</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">datasource</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">flow</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#数据源名称，可以自定义</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">nacos</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#nacos配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">#Nacos内置配置中心，因此重用即可</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">server-addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${spring.cloud.nacos.server-addr}</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">dataId</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${spring.application.name}-flow-rules</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#定义流控规则data-id，完整名称为:sentinel-sample-flow-rules，在配置中心设置时data-id必须对应。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">SAMPLE_GROUP</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#gourpId对应配置文件分组，对应配置中心groups项</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">rule-type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">flow</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#flow固定写死，说明这个配置是流控规则</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#nacos通信的用户名与密码</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">nacos</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#Nacos通信地址</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">server-addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">192.168.31.10:8848</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">sentinel-sample</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#应用名&amp;微服务id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">sentinel</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#Sentinel Dashboard通信地址</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">transport</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">dashboard</span><span style="color:#24292E;">: </span><span style="color:#032F62;">192.168.31.10:9100</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">eager</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#取消控制台懒加载</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">datasource</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">flow</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#数据源名称，可以自定义</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#nacos配置中心</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">#Nacos内置配置中心，因此重用即可</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${spring.cloud.nacos.server-addr}</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">dataId</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${spring.application.name}-flow-rules</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#定义流控规则data-id，完整名称为:sentinel-sample-flow-rules，在配置中心设置时data-id必须对应。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">: </span><span style="color:#032F62;">SAMPLE_GROUP</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#gourpId对应配置文件分组，对应配置中心groups项</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">rule-type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">flow</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#flow固定写死，说明这个配置是流控规则</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#nacos通信的用户名与密码</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#Nacos通信地址</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">192.168.31.10:8848</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>通过这一份配置，微服务在启动时就会自动从 Nacos 配置中心 SAMPLE_GROUP 分组下载 data-id 为 sentinel-sample-flow-rules 的配置信息并将其作为流控规则生效。</p><p>第三步，在 Nacos 配置中心页面，新增 data-id 为sentinel-sample-flow-rules 的配置项。</p>`,30),y=l(`<p>流控规则设置</p><p>这里 data-id 与 groups 与微服务应用的配置保持对应，最核心的配置内容采用 JSON 格式进行书写，我们来分析下这段流控规则。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;resource&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;/test_flow_rule&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#资源名，说明对那个URI进行流控</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;limitApp&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#FDAEB7;font-style:italic;">#命名空间，默认default</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;grade&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#类型</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">0-线程</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">1-QPS</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;count&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#超过2个QPS限流将被限流</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;strategy&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#限流策略</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;font-style:italic;">-直接</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;font-style:italic;">-关联</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;font-style:italic;">-链路</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;controlBehavior&quot;</span><span style="color:#FDAEB7;font-style:italic;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#控制行为</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;font-style:italic;">-快速失败</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;font-style:italic;">-WarmUp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;font-style:italic;">-排队等待</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;clusterMode&quot;</span><span style="color:#FDAEB7;font-style:italic;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">#是否集群模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;resource&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;/test_flow_rule&quot;</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#资源名，说明对那个URI进行流控</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;limitApp&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">,  </span><span style="color:#B31D28;font-style:italic;">#命名空间，默认default</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;grade&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#类型</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">0-线程</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">1-QPS</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;count&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#超过2个QPS限流将被限流</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;strategy&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#限流策略</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;font-style:italic;">-直接</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#B31D28;font-style:italic;">-关联</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;font-style:italic;">-链路</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;controlBehavior&quot;</span><span style="color:#B31D28;font-style:italic;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#控制行为</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;font-style:italic;">-快速失败</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#B31D28;font-style:italic;">-WarmUp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;font-style:italic;">-排队等待</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;clusterMode&quot;</span><span style="color:#B31D28;font-style:italic;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">#是否集群模式</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>仔细观察不难发现，这些配置项与 Dashboard UI 中的选项是对应的，其实使用 DashboardUI 最终目的是为了生成这段 JSON 数据而已，只不过通过 UI 更容易使用罢了。</p>`,4),i=l(`<p>Sentinel Dashboard 流控设置界面</p><p>关于这些设置项的各种细节，有兴趣的同学可以访问 Sentinel 的 GitHub 文档进行学习。</p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6</a></p><p>最后，我们启动应用来验证流控效果。</p><p>访问 <a href="http://localhost/test_flow_rule?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost/test_flow_rule</a>，在日志中将会看到这条 Debug 信息，说明在服务启动时已向 Nacos 配置中心获取到流控规则。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DEBUG </span><span style="color:#79B8FF;">12728</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [main] s.n.www.protocol.http.HttpURLConnection  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sun.net.www.MessageHeader@</span><span style="color:#F97583;">5432948015</span><span style="color:#E1E4E8;"> pairs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {GET </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nacos</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">configs</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">dataId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sentinel</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sample</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">flow</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rules</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">accessToken</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxMDg3NTA1M30.Hq561OkXuAqPI20IBsnPIn0ia86R9sZgdWwa_K8zwvw</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">group</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SAMPLE_GROUP HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">}...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DEBUG </span><span style="color:#005CC5;">12728</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [main] s.n.www.protocol.http.HttpURLConnection  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sun.net.www.MessageHeader@</span><span style="color:#D73A49;">5432948015</span><span style="color:#24292E;"> pairs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {GET </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nacos</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">configs</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">dataId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sentinel</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sample</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">flow</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rules</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">accessToken</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxMDg3NTA1M30.Hq561OkXuAqPI20IBsnPIn0ia86R9sZgdWwa_K8zwvw</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">group</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SAMPLE_GROUP HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">}...</span></span></code></pre></div><p>咱们在浏览器反复刷新，当 test_flow_rule 接口每秒超过 2 次访问，就会出现&quot;Blocked by Sentinel (flow limiting)&quot;的错误信息，说明流控规则已生效。</p><p>之后我们再来验证能否自动推送新规则，将Nacos 配置中心中流控规则 count 选项改为 1。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;resource&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;/test_flow_rule&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;limitApp&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;grade&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;count&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#2改为1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;strategy&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;controlBehavior&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;clusterMode&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;resource&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;/test_flow_rule&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;limitApp&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;grade&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;count&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#2改为1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;strategy&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;controlBehavior&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;clusterMode&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>修改后的流控规则</p><p>当新规则发布后，sentinel-sample控制台会立即收到下面的日志，说明新的流控规则即时生效。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DEBUG </span><span style="color:#79B8FF;">12728</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">31</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">10_8848</span><span style="color:#E1E4E8;">] s.n.www.protocol.http.HttpURLConnection  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sun.net.www.MessageHeader@</span><span style="color:#F97583;">41257f3915</span><span style="color:#E1E4E8;"> pairs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {GET </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nacos</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">configs</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">dataId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sentinel</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sample</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">flow</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rules</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">accessToken</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxMDg3NTA1M30.Hq561OkXuAqPI20IBsnPIn0ia86R9sZgdWwa_K8zwvw</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">group</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SAMPLE_GROUP HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DEBUG </span><span style="color:#005CC5;">12728</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">31</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">10_8848</span><span style="color:#24292E;">] s.n.www.protocol.http.HttpURLConnection  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sun.net.www.MessageHeader@</span><span style="color:#D73A49;">41257f3915</span><span style="color:#24292E;"> pairs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {GET </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nacos</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">configs</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">dataId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sentinel</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sample</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">flow</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rules</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">accessToken</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxMDg3NTA1M30.Hq561OkXuAqPI20IBsnPIn0ia86R9sZgdWwa_K8zwvw</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">group</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SAMPLE_GROUP HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">}</span></span></code></pre></div><p>在无须重启的情况下，test_flow_rule 接口 QPS 超过 1 就会直接报错。</p><p>与此同时，我们还可以通过 Spring Boot Actuator 提供的监控指标确认流控规则已生效。</p><p>访问 <a href="http://localhost/actuator/sentinel?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost/actuator/sentinel</a>，在 flowRules 这个数组中，可以看到 test_flow_rule 的限流规则，每一次流控规则产生改变时 Nacos 都会主动推送到微服务并立即生效。</p>`,15),d=l(`<p>新的流控规则</p><h3 id="自定义资源点进行熔断保护" tabindex="-1">自定义资源点进行熔断保护 <a class="header-anchor" href="#自定义资源点进行熔断保护" aria-label="Permalink to &quot;自定义资源点进行熔断保护&quot;">​</a></h3><p>讲到这，我们已经实现了 test_flow_rule 接口的流控规则，但你发现了没有，在前面一系列 Sentinel 的讲解中我们都是针对 RESTful 的接口进行限流熔断设置，但是在项目中有的时候是要针对某一个 Service 业务逻辑方法进行限流熔断等规则设置，这要怎么办呢？</p><p>在 sentinel-core 客户端中为开发者提供了 @SentinelResource 注解，该注解允许在程序代码中自定义 Sentinel 资源点来实现对特定方法的保护，下面我们以熔断降级规则为例来进行讲解。熔断降级是指在某个服务接口在执行过程中频繁出现故障的情况下，在一段时间内将服务停用的保护措施。</p><p>在 sentinel-core 中基于 Spring AOP（面向切面技术）可在目标 Service 方法执行前按熔断规则进行检查，只允许有效的数据被送入目标方法进行处理。</p><p>还是以 sentinel-sample 工程为例，我希望对 SampleSerivce.createOrder方法进行熔断保护，该如何设置呢？</p><p><strong>第一步，声明切面类。</strong></p><p>在应用入口 SentinelSampleApplication声明 SentinelResourceAspect，SentinelResourceAspect就是 Sentinel 提供的切面类，用于进行熔断的前置检查。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SentinelSampleApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注解支持的配置Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SentinelResourceAspect </span><span style="color:#B392F0;">sentinelResourceAspect</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SentinelResourceAspect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(SentinelSampleApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SentinelSampleApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注解支持的配置Bean</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SentinelResourceAspect </span><span style="color:#6F42C1;">sentinelResourceAspect</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SentinelResourceAspect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(SentinelSampleApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步，声明资源点。</p><p>在 SampleService.createOrder 方法上增加 @SentinelResource 注解用于声明 Sentinel 资源点，只有声明了资源点，Sentinel 才能实施限流熔断等保护措施。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 演示用的业务逻辑类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SampleService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//资源点名称为createOrder</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SentinelResource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;createOrder&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 模拟创建订单业务</span></span>
<span class="line"><span style="color:#6A737D;">     * 抛出IllegalStateException异常用于模拟业务逻辑执行失败的情况</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IllegalStateException{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//模拟处理业务逻辑需要101毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;订单已创建&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 演示用的业务逻辑类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SampleService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//资源点名称为createOrder</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SentinelResource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;createOrder&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 模拟创建订单业务</span></span>
<span class="line"><span style="color:#6A737D;">     * 抛出IllegalStateException异常用于模拟业务逻辑执行失败的情况</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IllegalStateException{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//模拟处理业务逻辑需要101毫秒</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;订单已创建&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>修改完毕，启动服务访问 <a href="http://localhost/test_degrade_rule?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost/test_degrade_rule</a>，当见到 code=0 的JSON 响应便代表应用运行正常。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    code</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;order created!&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    code</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;order created!&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后打开访问 Sentinel Dashboard，在簇点链路中要确认 createOrder资源点已存在。</p>`,15),u=l(`<p>createOrder 资源点已生效</p><p>第三步，获取熔断规则。</p><p>打开sentinel-sample 工程的 application.yml 文件，将服务接入 Nacos 配置中心的参数以获取熔断规则。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">datasource</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">flow</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#之前的流控规则，直接忽略</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">degrade</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#熔断规则</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">nacos</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">server-addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${spring.cloud.nacos.server-addr}</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">dataId</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${spring.application.name}-degrade-rules</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">SAMPLE_GROUP</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">rule-type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">degrade</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#代表熔断</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">datasource</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">flow</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#之前的流控规则，直接忽略</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">degrade</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#熔断规则</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${spring.cloud.nacos.server-addr}</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">dataId</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${spring.application.name}-degrade-rules</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">: </span><span style="color:#032F62;">SAMPLE_GROUP</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">rule-type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">degrade</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#代表熔断</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span></code></pre></div><p>熔断规则的获取过程和前面流控规则类似，只不过 data-id 改为sentinel-sample-degrade-rules，以及 rule-type 更改为 degrade。</p><p>启动过程中，出现下面日志代表配置成功。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[main] s.n.www.protocol.http.HttpURLConnection  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sun.net.www.MessageHeader@</span><span style="color:#F97583;">d96945215</span><span style="color:#E1E4E8;"> pairs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {GET </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nacos</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">configs</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">dataId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sentinel</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sample</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">degrade</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rules</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">accessToken</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxMDg5MDMwNH0.ooHkFb4zX14klmHMuLXTDkHSoCrwI8LtN7ex__9tMHg</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">group</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SAMPLE_GROUP HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">}...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[main] s.n.www.protocol.http.HttpURLConnection  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sun.net.www.MessageHeader@</span><span style="color:#D73A49;">d96945215</span><span style="color:#24292E;"> pairs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {GET </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nacos</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">configs</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">dataId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sentinel</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sample</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">degrade</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rules</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">accessToken</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxMDg5MDMwNH0.ooHkFb4zX14klmHMuLXTDkHSoCrwI8LtN7ex__9tMHg</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">group</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SAMPLE_GROUP HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">}...</span></span></code></pre></div><p>第四步，在 Nacos 配置熔断规则。</p><p>设置 data-id 为 sentinel-sample-degrade-rules，Groups 为 SAMPLE_GROUP与微服务的设置保持一致。</p>`,9),F=l(`<p>配置内容如下，我对每一项也做了说明。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;resource&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;createOrder&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#自定义资源名</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;limitApp&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#命名空间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;grade&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#0-慢调用比例</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">1-异常比例</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">2-异常数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;count&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#最大RT</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">100毫秒执行时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;timeWindow&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#时间窗口5秒</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;minRequestAmount&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">#最小请求数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;slowRatioThreshold&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">#比例阈值</span></span>
<span class="line"><span style="color:#E1E4E8;">}]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;resource&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;createOrder&quot;</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#自定义资源名</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;limitApp&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#命名空间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;grade&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#0-慢调用比例</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">1-异常比例</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">2-异常数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;count&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#最大RT</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">100毫秒执行时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;timeWindow&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#时间窗口5秒</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;minRequestAmount&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">#最小请求数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;slowRatioThreshold&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">#比例阈值</span></span>
<span class="line"><span style="color:#24292E;">}]</span></span></code></pre></div><p>上面这段 JSON 完整的含义是：在过去 1 秒内，如果 createOrder资源被访问 1 次后便开启熔断检查，如果其中有 10% 的访问处理时间超过 100 毫秒，则触发熔断 5 秒钟，这期间访问该方法所有请求都将直接抛出 DegradeException，5 秒后该资源点回到&quot;半开&quot;状态等待新的访问，如果下一次访问处理成功，资源点恢复正常状态，如果下一次处理失败，则继续熔断 5 秒钟。</p>`,3),A=p("p",null,"熔断机制示意图",-1),D=p("p",null,[s("设置成功，访问 Spring Boot Actuator"),p("a",{href:"http://localhost/actuator/sentinel?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"http://localhost/actuator/sentinel"),s("，可以看到此时 gradeRules 数组下 createOrder 资源点的熔断规则已被 Nacos推送并立即生效。")],-1),g=l(`<p>自定义资源点熔断规则</p><p>下面咱们来验证下，因为规则允许最大时长为 100 毫秒，而在 createOrder 方法中模拟业务处理需要 101 毫秒，显然会触发熔断。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SentinelResource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;createOrder&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//模拟创建订单业务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//模拟处理业务逻辑需要101毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;订单已创建&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SentinelResource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;createOrder&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//模拟创建订单业务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//模拟处理业务逻辑需要101毫秒</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;订单已创建&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>连续访问 <a href="http://localhost/test_degrade_rule?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost/test_degrade_rule</a>，当第二次访问时便会出现 500 错误。</p>`,4),h=l(`<p>已触发熔断的错误提示</p><p>在控制台日志也看到了 ERROR 日志，说明熔断已生效。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">44.795</span><span style="color:#E1E4E8;"> ERROR </span><span style="color:#79B8FF;">13244</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [p</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">80</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] o.a.c.c.C.[.[.[</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">].[dispatcherServlet]    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Servlet.</span><span style="color:#B392F0;">service</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.reflect.UndeclaredThrowableException] with root cause</span></span>
<span class="line"><span style="color:#E1E4E8;">com.alibaba.csp.sentinel.slots.block.degrade.DegradeException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">44.795</span><span style="color:#24292E;"> ERROR </span><span style="color:#005CC5;">13244</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [p</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">80</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] o.a.c.c.C.[.[.[</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">].[dispatcherServlet]    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Servlet.</span><span style="color:#6F42C1;">service</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.reflect.UndeclaredThrowableException] with root cause</span></span>
<span class="line"><span style="color:#24292E;">com.alibaba.csp.sentinel.slots.block.degrade.DegradeException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span></code></pre></div><p>看到 DegradeException 就说明之前配置的熔断规则已经生效。</p><p>讲到这，我们已经将 Sentinel 规则在 Nacos配置中心进行了持久化，并通过 Nacos 的推送机制做到新规则的实时更新，但在刚才的过程中，我们在触发流控或熔断后默认的错误提示是非常不友好的，在真正的项目中还需要对异常进行二次处理才能满足要求。</p><h3 id="开发友好的异常处理程序" tabindex="-1">开发友好的异常处理程序 <a class="header-anchor" href="#开发友好的异常处理程序" aria-label="Permalink to &quot;开发友好的异常处理程序&quot;">​</a></h3><p>对于 Sentinel 的异常处理程序要区分为两种情况：</p><ul><li><p>针对 RESTful 接口的异常处理；</p></li><li><p>针对自定义资源点的异常处理。</p></li></ul><h4 id="针对-restful-接口的异常处理" tabindex="-1">针对 RESTful 接口的异常处理 <a class="header-anchor" href="#针对-restful-接口的异常处理" aria-label="Permalink to &quot;针对 RESTful 接口的异常处理&quot;">​</a></h4><p>默认情况下如果访问触发了流控规则，则会直接响应异常信息&quot;BlockedbySentinel (flow limiting)&quot;。</p>`,10),C=l(`<p>触发流控的默认错误信息</p><p>我们都知道，RESTful接口默认应返回 JSON 格式数据，如果直接返回纯文本，调用者将无法正确解析，所以咱们要对其进行封装提供更友好的 JSON 格式数据。</p><p>针对 RESTful 接口的统一异常处理需要实现 BlockExceptionHandler，我们先给出完整代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//Spring IOC实例化并管理该对象</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UrlBlockHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BlockExceptionHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * RESTFul异常信息处理器</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">httpServletRequest</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">httpServletResponse</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">e</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">Exception</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">httpServletRequest</span><span style="color:#E1E4E8;">, HttpServletResponse </span><span style="color:#FFAB70;">httpServletResponse</span><span style="color:#E1E4E8;">, BlockException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> FlowException){</span><span style="color:#6A737D;">//限流异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;接口已被限流&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DegradeException){</span><span style="color:#6A737D;">//熔断异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;接口已被熔断,请稍后再试&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ParamFlowException){ </span><span style="color:#6A737D;">//热点参数限流</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;热点参数限流&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SystemBlockException){ </span><span style="color:#6A737D;">//系统规则异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;系统规则(负载/....不满足要求)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> AuthorityException){ </span><span style="color:#6A737D;">//授权规则异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;授权规则不通过&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        httpServletResponse.</span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        httpServletResponse.</span><span style="color:#B392F0;">setCharacterEncoding</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        httpServletResponse.</span><span style="color:#B392F0;">setContentType</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;application/json;charset=utf-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//ObjectMapper是内置Jackson的序列化工具类,这用于将对象转为JSON字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">        ObjectMapper mapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//某个对象属性为null时不进行序列化输出</span></span>
<span class="line"><span style="color:#E1E4E8;">        mapper.</span><span style="color:#B392F0;">setSerializationInclusion</span><span style="color:#E1E4E8;">(JsonInclude.Include.NON_NULL);</span></span>
<span class="line"><span style="color:#E1E4E8;">        mapper.</span><span style="color:#B392F0;">writeValue</span><span style="color:#E1E4E8;">(httpServletResponse.</span><span style="color:#B392F0;">getWriter</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResponseObject</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">(), msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//Spring IOC实例化并管理该对象</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UrlBlockHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BlockExceptionHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * RESTFul异常信息处理器</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">httpServletRequest</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">httpServletResponse</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">e</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">Exception</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">httpServletRequest</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">httpServletResponse</span><span style="color:#24292E;">, BlockException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> FlowException){</span><span style="color:#6A737D;">//限流异常</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;接口已被限流&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DegradeException){</span><span style="color:#6A737D;">//熔断异常</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;接口已被熔断,请稍后再试&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ParamFlowException){ </span><span style="color:#6A737D;">//热点参数限流</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;热点参数限流&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SystemBlockException){ </span><span style="color:#6A737D;">//系统规则异常</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;系统规则(负载/....不满足要求)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> AuthorityException){ </span><span style="color:#6A737D;">//授权规则异常</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;授权规则不通过&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        httpServletResponse.</span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        httpServletResponse.</span><span style="color:#6F42C1;">setCharacterEncoding</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        httpServletResponse.</span><span style="color:#6F42C1;">setContentType</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;application/json;charset=utf-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//ObjectMapper是内置Jackson的序列化工具类,这用于将对象转为JSON字符串</span></span>
<span class="line"><span style="color:#24292E;">        ObjectMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//某个对象属性为null时不进行序列化输出</span></span>
<span class="line"><span style="color:#24292E;">        mapper.</span><span style="color:#6F42C1;">setSerializationInclusion</span><span style="color:#24292E;">(JsonInclude.Include.NON_NULL);</span></span>
<span class="line"><span style="color:#24292E;">        mapper.</span><span style="color:#6F42C1;">writeValue</span><span style="color:#24292E;">(httpServletResponse.</span><span style="color:#6F42C1;">getWriter</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResponseObject</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">(), msg)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>BlockExceptionHandler.handle() 方法第三个参数类型是 BlockException，它有五种子类代表不同类型的规则异常。</p><p><strong>1</strong> . FlowException：流控规则异常。<br><strong>2</strong> . DegradeException：熔断规则异常。<br><strong>3</strong>. ParamFlowException：热点参数规则异常。</p><p>例如：针对 id=5 的冷门商品编号时不开启限流，针对 id=10 的热门商品编号则需要进行限流，当 10 号商品被限流时抛出热点参数异常。</p><p><strong>4</strong>.SystemBlockException：系统规则异常。</p><p>例如：服务器 CPU 负载超过80%，抛出系统规则异常。</p><p><strong>5</strong>. AuthorityException：授权规则异常。</p><p>例如：某个 IP 被列入黑名单，该 IP 在访问时就会抛出授权规则异常。</p><p>我们利用 instanceof关键字确定具体的规则异常后，便通过response 响应对象将封装好的 ResponseObject对象返回给应用前端，此时响应中 code 值不再为 0，而是对应的异常类型。</p><p>例如，当 RESTful触发流控规则后，前端响应如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;FlowException&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;接口已被限流&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;FlowException&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;接口已被限流&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当触发熔断规则后，前端响应如下。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;DegradeException&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;接口已被熔断,请稍后再试&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;DegradeException&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;接口已被熔断,请稍后再试&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过这种统一而通用的异常处理机制，对RESTful 屏蔽了sentinel-core默认的错误文本，让项目采用统一的 JSON 规范进行输出。</p><p>说完了 RESTful 的异常处理，咱们再来说一说自定义资源点如何控制异常信息。</p><h4 id="自定义资源点的异常处理" tabindex="-1">自定义资源点的异常处理 <a class="header-anchor" href="#自定义资源点的异常处理" aria-label="Permalink to &quot;自定义资源点的异常处理&quot;">​</a></h4><p>自定义资源点的异常处理与 RESTful 接口处理略有不同，我们需要在 @SentinelResource 注解上额外附加 blockHandler属性进行异常处理，这里先给出完整代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 演示用的业务逻辑类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SampleService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SentinelResource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;createOrder&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">blockHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;createOrderBlockHandler&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 模拟创建订单业务</span></span>
<span class="line"><span style="color:#6A737D;">     * 抛出 IllegalStateException 异常用于模拟业务逻辑执行失败的情况</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IllegalStateException{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//模拟处理业务逻辑需要 101 毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;订单已创建&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createOrderBlockHandler</span><span style="color:#E1E4E8;">(BlockException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IllegalStateException{</span></span>
<span class="line"><span style="color:#E1E4E8;">        String msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> FlowException){</span><span style="color:#6A737D;">//限流异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;资源已被限流&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DegradeException){</span><span style="color:#6A737D;">//熔断异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;资源已被熔断,请稍后再试&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ParamFlowException){ </span><span style="color:#6A737D;">//热点参数限流</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;热点参数限流&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SystemBlockException){ </span><span style="color:#6A737D;">//系统规则异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;系统规则(负载/....不满足要求)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> AuthorityException){ </span><span style="color:#6A737D;">//授权规则异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;授权规则不通过&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 演示用的业务逻辑类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SampleService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SentinelResource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;createOrder&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">blockHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;createOrderBlockHandler&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 模拟创建订单业务</span></span>
<span class="line"><span style="color:#6A737D;">     * 抛出 IllegalStateException 异常用于模拟业务逻辑执行失败的情况</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IllegalStateException{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//模拟处理业务逻辑需要 101 毫秒</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;订单已创建&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createOrderBlockHandler</span><span style="color:#24292E;">(BlockException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IllegalStateException{</span></span>
<span class="line"><span style="color:#24292E;">        String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> FlowException){</span><span style="color:#6A737D;">//限流异常</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;资源已被限流&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DegradeException){</span><span style="color:#6A737D;">//熔断异常</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;资源已被熔断,请稍后再试&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ParamFlowException){ </span><span style="color:#6A737D;">//热点参数限流</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;热点参数限流&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SystemBlockException){ </span><span style="color:#6A737D;">//系统规则异常</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;系统规则(负载/....不满足要求)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> AuthorityException){ </span><span style="color:#6A737D;">//授权规则异常</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;授权规则不通过&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这份代码中可以清楚地看到以下两点变化。</p><p>第一，我们为 @SentinelResource 附加了 blockHandler 属性，这个属性指向 createOrderBlockHandler 方法名，它的作用是当 sentinel-core 触发规则异常后，自动执行 createOrderBlockHandler 方法进行异常处理。</p><p>第二，createOrderBlockHandler 方法的书写有两个要求：</p><ul><li><p>方法返回值、访问修饰符、抛出异常要与原始的 createOrder 方法完全相同。</p></li><li><p>createOrderBlockHandler 方法名允许自定义，但最后一个参数必须是 BlockException 对象，这是所有规则异常的父类，通过判断 BlockException 我们就知道触发了哪种规则异常。</p></li></ul><p>至于 createOrderBlockHandler 方法的代码和 RESTful 异常处理基本一致，先判断规则异常的种类再对外抛出 IllegalStateException异常。SampleController 会对 IllegalStateException 异常进行捕获，对外输出为 JSON 响应。</p><p>当程序运行后，咱们看一下结果。</p><p>访问 <a href="http://localhost/test_degrade_rule?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost/test_degrade_rule</a> 当触发流控规则后，响应如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;IllegalStateException&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;资源已被限流&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;IllegalStateException&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;资源已被限流&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当触发熔断规则后，响应如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;IllegalStateException&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;资源已被熔断,请稍后再试&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">code</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;IllegalStateException&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;资源已被熔断,请稍后再试&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>讲到这里，我们针对在生产实践中 Sentinel 必然会涉及的应用场景进行了讲解，下面咱们进行总结。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本讲咱们学习了三方面内容，首先通过流控案例说明如何利用 Nacos 配置中心将 Sentinel 规则持久化存储，并利用 Nacos 的推送功能实现新规则的实时更新；其次咱们通过熔断规则学习了 @SentinelResource 注解的用法，同时将自定义资源点的熔断规则放入 Nacos 进行持久化；最后针对流控熔断中默认非常不友好的异常输出，咱们利用Sentinel 自带的机制逐一进行的优化，生成了符合项目要求的友好的 JSON 格式数据。</p><p>在这里我为你留一道自习题：Sentinel 除了流控与熔断外，还有三种不常用的规则：</p><ul><li><p>热点参数流控；</p></li><li><p>系统规则；</p></li><li><p>授权规则（黑白名单）。</p></li></ul><p>请你自行前往 Sentinel 官网文档<a href="https://github.com/alibaba/Sentinel/wiki?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/alibaba/Sentinel/wiki</a> 进行学习。</p><p>到这里关于 Sentinel 的话题咱们告一段落。下一讲开始进入新的篇章，学习微服务架构下的链路追踪技术。</p>`,38);function B(q,S,v,m,b,f){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/27/B7/Cgp9HWBdlU2AH_74AADL3_g2qEo343.png"}),s(),y,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/27/B4/CioPOWBdlVmAUv8YAADoB7vbrZs676.png"}),s(),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/27/B7/Cgp9HWBdlZCALcRVAADl835eOig018.png"}),s(),d,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/27/B7/Cgp9HWBdlaqATmTiAAFaj_pNHQg367.png"}),s(),u,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M01/27/B7/Cgp9HWBdlbaAND8LAAChJna7ALA579.png"}),s(),F,a(n,{alt:"图片1-.png",src:"https://s0.lgstatic.com/i/image6/M01/2A/57/Cgp9HWBihaeAcu_rAADj7f0dzWU991.png"}),s(),A,D,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M01/27/B4/CioPOWBdldiAfwYZAADXzZezOVY956.png"}),s(),g,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/27/B4/CioPOWBdlfWASfRYAACZB-pUThM812.png"}),s(),h,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M00/27/B7/Cgp9HWBdlgWAeKZlAAAq3uzq-uA090.png"}),s(),C])}const w=o(r,[["render",B]]);export{k as __pageData,w as default};
