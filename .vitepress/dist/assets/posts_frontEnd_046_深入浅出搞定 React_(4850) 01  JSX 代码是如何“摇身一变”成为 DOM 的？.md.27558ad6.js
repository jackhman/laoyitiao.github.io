import{_ as o,j as e,o as t,g as c,k as l,h as s,Q as p,s as n}from"./chunks/framework.4e7d56ce.js";const k=JSON.parse('{"title":"01JSX代码是如何“摇身一变”成为DOM的？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/046_深入浅出搞定 React/(4850) 01  JSX 代码是如何“摇身一变”成为 DOM 的？.md","filePath":"posts/frontEnd/046_深入浅出搞定 React/(4850) 01  JSX 代码是如何“摇身一变”成为 DOM 的？.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/046_深入浅出搞定 React/(4850) 01  JSX 代码是如何“摇身一变”成为 DOM 的？.md"},E=p(`<h1 id="_01jsx代码是如何-摇身一变-成为dom的" tabindex="-1">01JSX代码是如何“摇身一变”成为DOM的？ <a class="header-anchor" href="#_01jsx代码是如何-摇身一变-成为dom的" aria-label="Permalink to &quot;01JSX代码是如何“摇身一变”成为DOM的？&quot;">​</a></h1><p>时下虽然接入 JSX 语法的框架越来越多，但与之缘分最深的毫无疑问仍然是 React。2013 年，当 React 带着 JSX 横空出世时，社区曾对 JSX 有过不少的争议，但如今，越来越多的人面对 JSX 都要说上一句&quot;真香&quot;！本课时我们就来一起认识下这个&quot;真香&quot;的 JSX，聊一聊&quot;JSX 代码是如何&#39;摇身一变&#39;成为 DOM 的&quot;。</p><h3 id="关于-jsx-的-3-个-大问题" tabindex="-1">关于 JSX 的 3 个&quot;大问题&quot; <a class="header-anchor" href="#关于-jsx-的-3-个-大问题" aria-label="Permalink to &quot;关于 JSX 的 3 个&quot;大问题&quot;&quot;">​</a></h3><p>在日常的 React 开发工作中，我们已经习惯了使用 JSX 来描述 React 的组件内容。关于 JSX 语法本身，相信每位 React 开发者都不陌生。这里我用一个简单的 React 组件，来帮你迅速地唤醒自己脑海中与 JSX 相关的记忆。下面这个组件中的 render 方法返回值，就是用 JSX 代码来填充的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ReactDOM </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;App&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">&gt;I am the title&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#E1E4E8;">&gt;I am the content&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rootElement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">App</span><span style="color:#E1E4E8;"> /&gt;, rootElement);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ReactDOM </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;App&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">&gt;I am the title&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#24292E;">&gt;I am the content&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rootElement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(&lt;</span><span style="color:#005CC5;">App</span><span style="color:#24292E;"> /&gt;, rootElement);</span></span></code></pre></div><p>由于本专栏的整体目标是帮助你在 React 这个领域完成从&quot;小工&quot;到&quot;行家&quot;的进阶，此处我无意再去带你反复咀嚼 JSX 的基础语法，而是希望能够引导你去探寻 JSX 背后的故事。针对这&quot;背后的故事&quot;，我总结了 3 个最具代表性和区分度的问题。</p><p>在开始正式讲解之前，我希望你能在自己心中尝试回答这 3 个问题：</p><ul><li><p>JSX 的本质是什么，它和 JS 之间到底是什么关系？</p></li><li><p>为什么要用 JSX？不用会有什么后果？</p></li><li><p>JSX 背后的功能模块是什么，这个功能模块都做了哪些事情？</p></li></ul><p>面对以上问题，如果你无法形成清晰且系统的思路，那么很可能是你把 JSX 想得过于简单了。大多数人只是简单地把它理解为模板语法的一种，但事实上，JSX 作为 React 框架的一大特色，它与 React 本身的运作机制之间存在着千丝万缕的联系。</p><p>上述 3 个问题的答案，就恰恰隐藏在这层&quot;联系&quot;中，在面试场景下，候选人对这层&quot;联系&quot;吃得透不透，是我们评价其在 React 方面是否&quot;资深&quot;的一个重要依据。</p><p>接下来，我就将带你由表及里地起底 JSX 相关的底层原理，帮助你吃透这层&quot;联系&quot;，建立起强大的理论自信。你可以将&quot;能够用自己的话回答上面 3 个问题&quot;来作为本课时的学习目标，待课时结束后，记得回来检验自己的学习成果^_^。</p><h3 id="jsx-的本质-javascript-的语法扩展" tabindex="-1">JSX 的本质：JavaScript 的语法扩展 <a class="header-anchor" href="#jsx-的本质-javascript-的语法扩展" aria-label="Permalink to &quot;JSX 的本质：JavaScript 的语法扩展&quot;">​</a></h3><p>JSX 到底是什么，我们先来看看 <a href="https://reactjs.org/docs/glossary.html#jsx" target="_blank" rel="noreferrer">React 官网</a>给出的一段定义：</p><blockquote><p>JSX 是 JavaScript 的一种语法扩展，它和模板语言很接近，但是它充分具备 JavaScript 的能力。</p></blockquote><p>&quot;语法扩展&quot;这一点在理解上几乎不会产生歧义，不过&quot;它充分具备 JavaScript 的能力&quot;这句，却总让人摸不着头脑，JSX 和 JS 怎么看也不像是一路人啊？这就引出了&quot;<strong>JSX 语法是如何在 JavaScript 中生效的</strong>&quot;这个问题。</p><h4 id="jsx-语法是如何在-javascript-中生效的-认识-babel" tabindex="-1">JSX 语法是如何在 JavaScript 中生效的：认识 Babel <a class="header-anchor" href="#jsx-语法是如何在-javascript-中生效的-认识-babel" aria-label="Permalink to &quot;JSX 语法是如何在 JavaScript 中生效的：认识 Babel&quot;">​</a></h4><p>Facebook 公司给 JSX 的定位是 JavaScript 的&quot;扩展&quot;，而非 JavaScript 的&quot;某个版本&quot;，这就直接决定了浏览器并不会像天然支持 JavaScript 一样地支持 JSX。那么，JSX 的语法是如何在 JavaScript 中生效的呢？<a href="https://reactjs.org/docs/glossary.html#jsx" target="_blank" rel="noreferrer">React 官网</a>其实早已给过我们线索：</p><blockquote><p>JSX 会被编译为 React.createElement()， React.createElement() 将返回一个叫作&quot;React Element&quot;的 JS 对象。</p></blockquote><p>这里提到，JSX 在被<strong>编译</strong>后，会变成一个针对 React.createElement 的调用，此时你大可不必急于关注 React.createElement 这个 API 到底做了什么（下文会单独讲解）。咱们先来说说这个&quot;编译&quot;是怎么回事：&quot;编译&quot;这个动作，是由 Babel 来完成的。</p><p><strong>什么是 Babel 呢？</strong></p><blockquote><p>Babel 是一个工具链，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><p>------ Babel 官网</p></blockquote><p>比如说，ES2015+ 版本推出了一种名为&quot;模板字符串&quot;的新语法，这种语法在一些低版本的浏览器里并不兼容。下面是一段模板字符串的示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Guy Fieri&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> place </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Flavortown&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">\`Hello \${name}, ready </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> \${place}</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">\`;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Guy Fieri&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> place </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Flavortown&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">\`Hello \${name}, ready </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> \${place}</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">\`;</span></span></code></pre></div><p>Babel 就可以帮我们把这段代码转换为大部分低版本浏览器也能够识别的 ES5 代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Guy Fieri&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> place </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Flavortown&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Hello &quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(name, </span><span style="color:#9ECBFF;">&quot;, ready for &quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(place, </span><span style="color:#9ECBFF;">&quot;?&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Guy Fieri&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> place </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Flavortown&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#032F62;">&quot;Hello &quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(name, </span><span style="color:#032F62;">&quot;, ready for &quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(place, </span><span style="color:#032F62;">&quot;?&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>类似的，<strong>Babel 也具备将 JSX 语法转换为 JavaScript 代码的能力</strong> 。</p><p>那么 Babel 具体会将 JSX 处理成什么样子呢？我们不如直接打开 Babel 的 playground 来看一看。这里我仍然键入文章开头示例代码中的JSX 部分：</p>`,27),y=n("p",null,[s('可以看到，所有的 JSX 标签都被转化成了 React.createElement 调用，这也就意味着，我们写的 JSX 其实写的就是 React.createElement，虽然它看起来有点像 HTML，但也只是"看起来像"而已。'),n("strong",null,"JSX 的本质是"),s(" React.createElement"),n("strong",null,"这个 JavaScript 调用的语法糖"),s(' ，这也就完美地呼应上了 React 官方给出的"'),n("strong",null,"JSX 充分具备 JavaScript 的能力"),s('"这句话。')],-1),i=n("h4",{id:"react-选用-jsx-语法的动机",tabindex:"-1"},[s("React 选用 JSX 语法的动机 "),n("a",{class:"header-anchor",href:"#react-选用-jsx-语法的动机","aria-label":'Permalink to "React 选用 JSX 语法的动机"'},"​")],-1),u=n("p",null,"换个角度想想，既然 JSX 等价于一次 React.createElement 调用，那么 React 官方为什么不直接引导我们用 React.createElement 来创建元素呢？",-1),d=n("p",null,"原因非常简单，我们来看一个相对复杂一些的组件的 JSX 代码和 React.createElement 调用之间的对比。它们各自的形态如下图所示，图中左侧是 JSX 代码，右侧是 React.createElement 调用：",-1),F=p(`<p>你会发现，在实际功能效果一致的前提下，JSX 代码层次分明、嵌套关系清晰；而 React.createElement 代码则给人一种非常混乱的&quot;杂糅感&quot;，这样的代码不仅读起来不友好，写起来也费劲。</p><p><strong>JSX 语法糖允许前端开发者使用我们最为熟悉的类 HTML 标签语法来创建虚拟 DOM，在降低学习成本的同时，也提升了研发效率与研发体验。</strong></p><p>读到这里，相信你已经充分理解了&quot;<strong>JSX 是 JavaScript 的一种语法扩展，它和模板语言很接近，但是它充分具备 JavaScript 的能力</strong>。 &quot;这一定义背后的深意。那么我们文中反复提及的 React.createElement 又是何方神圣呢？下面我们就深入相关源码来一窥究竟。</p><h3 id="jsx-是如何映射为-dom-的-起底-createelement-源码" tabindex="-1">JSX 是如何映射为 DOM 的：起底 createElement 源码 <a class="header-anchor" href="#jsx-是如何映射为-dom-的-起底-createelement-源码" aria-label="Permalink to &quot;JSX 是如何映射为 DOM 的：起底 createElement 源码&quot;">​</a></h3><p>在分析开始之前，你可以先尝试阅读我追加进源码中的逐行代码解析，大致理解 createElement 中每一行代码的作用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> 101. React的创建元素方法</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(type, config, children) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// propName 变量用于储存后面需要用到的元素属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  let propName; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// props 变量用于储存元素属性的键值对集合</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// key、ref、self、source 均为 React 元素的属性，此处不必深究</span></span>
<span class="line"><span style="color:#E1E4E8;">  let key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  let ref </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  let self </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  let source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// config 对象中存储的是元素的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (config </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 进来之后做的第一件事，是依次对 ref、key、self 和 source 属性赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">hasValidRef</span><span style="color:#E1E4E8;">(config)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ref </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.ref;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 此处将 key 值字符串化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">hasValidKey</span><span style="color:#E1E4E8;">(config)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> config.key; </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    self </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.__self </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> undefined </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> config.__self;</span></span>
<span class="line"><span style="color:#E1E4E8;">    source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.__source </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> undefined </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> config.__source;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 接着就是要把 config 里面的属性都一个一个挪到 props 这个之前声明好的对象里面</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (propName in config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 筛选出可以提进 props 对象里的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(config, propName) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">RESERVED_PROPS.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(propName) </span></span>
<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        props[propName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config[propName]; </span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// childrenLength 指的是当前元素的子元素的个数，减去的 2 是 type 和 config 两个参数占用的长度</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> childrenLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arguments.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果抛去type和config，就只剩下一个参数，一般意味着文本节点出现了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (childrenLength </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 直接把这个参数的值赋给props.children</span></span>
<span class="line"><span style="color:#E1E4E8;">    props.children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理嵌套多个子元素的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (childrenLength </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 声明一个子元素数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> childArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(childrenLength); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 把子元素推进数组里</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> childrenLength; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      childArray[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arguments[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 最后把这个数组赋值给props.children</span></span>
<span class="line"><span style="color:#E1E4E8;">    props.children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childArray; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 defaultProps</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> type.defaultProps) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> defaultProps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> type.defaultProps;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (propName in defaultProps) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (props[propName] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> undefined) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        props[propName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultProps[propName];</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最后返回一个调用ReactElement执行方法，并传入刚才处理过的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactElement</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    type,</span></span>
<span class="line"><span style="color:#E1E4E8;">    key,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ref,</span></span>
<span class="line"><span style="color:#E1E4E8;">    self,</span></span>
<span class="line"><span style="color:#E1E4E8;">    source,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactCurrentOwner.current,</span></span>
<span class="line"><span style="color:#E1E4E8;">    props,</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> 101. React的创建元素方法</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(type, config, children) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// propName 变量用于储存后面需要用到的元素属性</span></span>
<span class="line"><span style="color:#24292E;">  let propName; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// props 变量用于储存元素属性的键值对集合</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// key、ref、self、source 均为 React 元素的属性，此处不必深究</span></span>
<span class="line"><span style="color:#24292E;">  let key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  let ref </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  let self </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  let source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// config 对象中存储的是元素的属性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (config </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 进来之后做的第一件事，是依次对 ref、key、self 和 source 属性赋值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">hasValidRef</span><span style="color:#24292E;">(config)) {</span></span>
<span class="line"><span style="color:#24292E;">      ref </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.ref;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 此处将 key 值字符串化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">hasValidKey</span><span style="color:#24292E;">(config)) {</span></span>
<span class="line"><span style="color:#24292E;">      key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> config.key; </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    self </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.__self </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> undefined </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> config.__self;</span></span>
<span class="line"><span style="color:#24292E;">    source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.__source </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> undefined </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> config.__source;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接着就是要把 config 里面的属性都一个一个挪到 props 这个之前声明好的对象里面</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (propName in config) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 筛选出可以提进 props 对象里的属性</span></span>
<span class="line"><span style="color:#24292E;">        hasOwnProperty.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(config, propName) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">RESERVED_PROPS.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(propName) </span></span>
<span class="line"><span style="color:#24292E;">      ) {</span></span>
<span class="line"><span style="color:#24292E;">        props[propName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config[propName]; </span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// childrenLength 指的是当前元素的子元素的个数，减去的 2 是 type 和 config 两个参数占用的长度</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> childrenLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arguments.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果抛去type和config，就只剩下一个参数，一般意味着文本节点出现了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (childrenLength </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 直接把这个参数的值赋给props.children</span></span>
<span class="line"><span style="color:#24292E;">    props.children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> children; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理嵌套多个子元素的情况</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (childrenLength </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 声明一个子元素数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> childArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(childrenLength); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 把子元素推进数组里</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> childrenLength; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      childArray[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arguments[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 最后把这个数组赋值给props.children</span></span>
<span class="line"><span style="color:#24292E;">    props.children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> childArray; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理 defaultProps</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> type.defaultProps) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> defaultProps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> type.defaultProps;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (propName in defaultProps) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (props[propName] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> undefined) {</span></span>
<span class="line"><span style="color:#24292E;">        props[propName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultProps[propName];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 最后返回一个调用ReactElement执行方法，并传入刚才处理过的参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactElement</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    type,</span></span>
<span class="line"><span style="color:#24292E;">    key,</span></span>
<span class="line"><span style="color:#24292E;">    ref,</span></span>
<span class="line"><span style="color:#24292E;">    self,</span></span>
<span class="line"><span style="color:#24292E;">    source,</span></span>
<span class="line"><span style="color:#24292E;">    ReactCurrentOwner.current,</span></span>
<span class="line"><span style="color:#24292E;">    props,</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面是对源码细节的初步展示，接下来我会带你逐步提取源码中的关键知识点和核心思想。</p><h4 id="入参解读-创造一个元素需要知道哪些信息" tabindex="-1">入参解读：创造一个元素需要知道哪些信息 <a class="header-anchor" href="#入参解读-创造一个元素需要知道哪些信息" aria-label="Permalink to &quot;入参解读：创造一个元素需要知道哪些信息&quot;">​</a></h4><p>我们先来看看方法的入参：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(type, config, children)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(type, config, children)</span></span></code></pre></div><p>createElement 有 3 个入参，这 3 个入参囊括了 React 创建一个元素所需要知道的全部信息。</p><ul><li><p>type：用于标识节点的类型。它可以是类似&quot;h1&quot;&quot;div&quot;这样的标准 HTML 标签字符串，也可以是 React 组件类型或 React fragment 类型。</p></li><li><p>config：以对象形式传入，组件所有的属性都会以键值对的形式存储在 config 对象中。</p></li><li><p>children：以对象形式传入，它记录的是组件标签之间嵌套的内容，也就是所谓的&quot;子节点&quot;&quot;子元素&quot;。</p></li></ul><p>如果文字描述使你觉得抽象，下面这个调用示例可以帮你增进对概念的理解：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ul&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 传入属性键值对</span></span>
<span class="line"><span style="color:#E1E4E8;">  className</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;list&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 从第三个入参开始往后，传入的参数都是 children</span></span>
<span class="line"><span style="color:#E1E4E8;">}, React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;li&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">), React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;li&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ul&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 传入属性键值对</span></span>
<span class="line"><span style="color:#24292E;">  className</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;list&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 从第三个入参开始往后，传入的参数都是 children</span></span>
<span class="line"><span style="color:#24292E;">}, React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;li&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">), React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;li&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2&quot;</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>这个调用对应的 DOM 结构如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">&gt;1&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">&gt;2&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">&gt;1&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">&gt;2&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>对入参的形式和内容有了大致的把握之后，下面我们继续来讲解 createElement 的函数逻辑。</p><h4 id="createelement-函数体拆解" tabindex="-1">createElement 函数体拆解 <a class="header-anchor" href="#createelement-函数体拆解" aria-label="Permalink to &quot;createElement 函数体拆解&quot;">​</a></h4><p>前面你已经阅读过 createElement 源码细化到每一行的解读，这里我想和你探讨的是 createElement<strong>在逻辑层面的任务流转</strong>。针对这个过程，我为你总结了下面这张流程图：</p>`,19),g=n("p",null,[s("这个流程图，或许会打破不少同学对 createElement 的幻想。"),n("strong",null,'在实际的面试场景下，许多候选人由于缺乏对源码的了解，谈及 createElement 时总会倾向于去夸大它的"工作量"'),s(" 。但其实，相信你也已经发现了，createElement 中并没有十分复杂的涉及算法或真实 DOM 的逻辑，它的"),n("strong",null,"每一个步骤几乎都是在格式化数据"),s("。")],-1),A=n("p",null,[s('说得更直白点，createElement 就像是开发者和 ReactElement 调用之间的一个"'),n("strong",null,"转换器"),s(' "、一个'),n("strong",null,"数据处理层"),s("。它可以从开发者处接受相对简单的参数，然后将这些参数按照 ReactElement 的预期做一层格式化，最终通过调用 ReactElement 来实现元素的创建。整个过程如下图所示：")],-1),D=p(`<p>现在看来，createElement 原来只是个&quot;参数中介&quot;。此时我们的注意力自然而然地就聚焦在了 ReactElement 上，接下来我们就乘胜追击，一起去挖一挖 ReactElement 的源码吧！</p><h4 id="出参解读-初识虚拟-dom" tabindex="-1">出参解读：初识虚拟 DOM <a class="header-anchor" href="#出参解读-初识虚拟-dom" aria-label="Permalink to &quot;出参解读：初识虚拟 DOM&quot;">​</a></h4><p>上面已经分析过，createElement 执行到最后会 return 一个针对 ReactElement 的调用。这里关于 ReactElement，我依然先给出源码 + 注释形式的解析：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ReactElement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(type, key, ref, self, source, owner, props) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// REACT_ELEMENT_TYPE是一个常量，用来标识该对象是一个ReactElement</span></span>
<span class="line"><span style="color:#E1E4E8;">    $$typeof</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> REACT_ELEMENT_TYPE,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 内置属性赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> type,</span></span>
<span class="line"><span style="color:#E1E4E8;">    key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> key,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ref</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ref,</span></span>
<span class="line"><span style="color:#E1E4E8;">    props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> props,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录创造该元素的组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    _owner</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> owner,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里是一些针对 __DEV__ 环境下的处理，对于大家理解主要逻辑意义不大，此处我直接省略掉，以免混淆视听</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> element;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ReactElement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(type, key, ref, self, source, owner, props) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// REACT_ELEMENT_TYPE是一个常量，用来标识该对象是一个ReactElement</span></span>
<span class="line"><span style="color:#24292E;">    $$typeof</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> REACT_ELEMENT_TYPE,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 内置属性赋值</span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> type,</span></span>
<span class="line"><span style="color:#24292E;">    key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> key,</span></span>
<span class="line"><span style="color:#24292E;">    ref</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ref,</span></span>
<span class="line"><span style="color:#24292E;">    props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> props,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录创造该元素的组件</span></span>
<span class="line"><span style="color:#24292E;">    _owner</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> owner,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里是一些针对 __DEV__ 环境下的处理，对于大家理解主要逻辑意义不大，此处我直接省略掉，以免混淆视听</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> element;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>ReactElement 的代码出乎意料的简短，从逻辑上我们可以看出，ReactElement 其实只做了一件事情，那就是&quot;<strong>创建</strong> &quot;，说得更精确一点，是&quot;<strong>组装</strong>&quot;：ReactElement 把传入的参数按照一定的规范，&quot;组装&quot;进了 element 对象里，并把它返回给了 React.createElement，最终 React.createElement 又把它交回到了开发者手中。整个过程如下图所示：</p>`,5),h=p(`<p>如果你想要验证这一点，可以尝试输出我们示例中 App 组件的 JSX 部分：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AppJSX</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;App&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">&gt;I am the title&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#E1E4E8;">&gt;I am the content&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(AppJSX)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AppJSX</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;App&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">&gt;I am the title&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#24292E;">&gt;I am the content&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(AppJSX)</span></span></code></pre></div><p>你会发现它确实是一个标准的 ReactElement 对象实例，如下图（生产环境下的输出结果）所示：</p>`,3),m=p(`<p>这个 ReactElement 对象实例，本质上是<strong>以 JavaScript 对象形式存在的对 DOM 的描述</strong> ，也就是老生常谈的&quot;虚拟 DOM&quot;（<strong>准确地说，是虚拟 DOM 中的一个节点</strong>。关于虚拟 DOM， 我们将在专栏的&quot;模块二：核心原理&quot;中花大量的篇幅来研究它，此处你只需要能够结合源码，形成初步认知即可）。</p><p>既然是&quot;虚拟 DOM&quot;，那就意味着和渲染到页面上的真实 DOM 之间还有一些距离，这个&quot;距离&quot;，就是由大家喜闻乐见的<strong>ReactDOM.render</strong>方法来填补的。</p><p>在每一个 React 项目的入口文件中，都少不了对 React.render 函数的调用。下面我简单介绍下 ReactDOM.render 方法的入参规则：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 需要渲染的元素（ReactElement）</span></span>
<span class="line"><span style="color:#E1E4E8;">    element, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 元素挂载的目标容器（一个真实DOM）</span></span>
<span class="line"><span style="color:#E1E4E8;">    container,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 回调函数，可选参数，可以用来处理渲染结束后的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    [callback]</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 需要渲染的元素（ReactElement）</span></span>
<span class="line"><span style="color:#24292E;">    element, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 元素挂载的目标容器（一个真实DOM）</span></span>
<span class="line"><span style="color:#24292E;">    container,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 回调函数，可选参数，可以用来处理渲染结束后的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    [callback]</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>ReactDOM.render 方法可以接收 3 个参数，其中<strong>第二个参数就是一个真实的 DOM 节点</strong> ，<strong>这个真实的 DOM 节点充当&quot;容器&quot;的角色</strong>，React 元素最终会被渲染到这个&quot;容器&quot;里面去。比如，示例中的 App 组件，它对应的 render 调用是这样的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> rootElement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">App </span><span style="color:#F97583;">/&gt;</span><span style="color:#E1E4E8;">, rootElement);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> rootElement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">App </span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;">, rootElement);</span></span></code></pre></div><p>注意，这个真实 DOM 一定是确实存在的。比如，在 App 组件对应的 index.html 中，已经提前预置 了 id 为 root 的根节点：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span></code></pre></div>`,8);function q(_,f,C,v,S,R){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5C/73/CgqCHl-BegWAbxNEAAH9HxafvWE988.png"}),s(),y,i,u,d,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/5C/73/CgqCHl-Beg-AXBihAA4t3S7nxKc532.png"}),s(),F,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5C/69/Ciqc1F-BeuGAepNsAACqreYXrj0410.png"}),s(),g,A,l(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/5C/69/Ciqc1F-BevGANuu4AACN5mBDMlg569.png"}),s(),D,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/5C/74/CgqCHl-Bex6AM5rhAACJMrix5bk913.png"}),s(),h,l(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/5C/69/Ciqc1F-BezKAW4rXAAIUYQW6Lk0911.png"}),s(),m])}const b=o(r,[["render",q]]);export{k as __pageData,b as default};
