import{_ as e,D as o,o as t,g as r,J as p,h as n,m as s,Q as l}from"./chunks/framework.f67d7268.js";const os=JSON.parse('{"title":"22运行管理：如何使用AdminServer管理Spring应用程序？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Boot 实战开发_文档/(5737) 22  运行管理：如何使用 Admin Server 管理 Spring 应用程序？.md","filePath":"posts/backEnd/Spring Boot 实战开发_文档/(5737) 22  运行管理：如何使用 Admin Server 管理 Spring 应用程序？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Boot 实战开发_文档/(5737) 22  运行管理：如何使用 Admin Server 管理 Spring 应用程序？.md"},i=s("h1",{id:"_22运行管理-如何使用adminserver管理spring应用程序",tabindex:"-1"},[n("22运行管理：如何使用AdminServer管理Spring应用程序？ "),s("a",{class:"header-anchor",href:"#_22运行管理-如何使用adminserver管理spring应用程序","aria-label":'Permalink to "22运行管理：如何使用AdminServer管理Spring应用程序？"'},"​")],-1),E=s("p",null,"前面 2 讲通过引入 Actuator 组件，我们为 Spring Boot 应用程序添加了系统监控功能。基于 Actuator 暴露的各种 HTTP 端点，开发人员可以获取系统的运行时状态。而端点是一种底层的监控技术，这就要求我们对 HTTP 协议和 Spring Boot 应用程序的构建方式有一定的了解。",-1),d=s("p",null,"那么，有没有更简单的、基于可视化的方式获取这些端点背后的信息呢？答案是肯定的。因此，这一讲我们将要介绍 Spring Boot Admin 组件。",-1),y=s("h3",{id:"引入-spring-boot-admin-组件",tabindex:"-1"},[n("引入 Spring Boot Admin 组件 "),s("a",{class:"header-anchor",href:"#引入-spring-boot-admin-组件","aria-label":'Permalink to "引入 Spring Boot Admin 组件"'},"​")],-1),g=s("p",null,"Spring Boot Admin 是一个用于监控 Spring Boot 的应用程序，它的基本原理是通过统计、集成 Spring Boot Actuator 中提供的各种 HTTP 端点，从而提供简洁的可视化 WEB UI，如下图所示：",-1),A=l("",11),u=l("",8),m=s("p",null,"Spring Boot Admin Server 添加了应用程序之后的效果图",-1),h=s("p",null,"在图中，我们看到 APPLICATIONS 和 INSTANCES 的数量都是 1，代表 Admin Server 管理着一个应用程序，而该应用程序只有一个运行实例。在界面的下方，我们还能看到这个应用的名称及实例地址。这里你可以尝试使用不同的端口启动应用程序的不同实例，然后观察这个列表的变化。",-1),_=s("h4",{id:"基于注册中心构建-admin-server",tabindex:"-1"},[n("基于注册中心构建 Admin Server "),s("a",{class:"header-anchor",href:"#基于注册中心构建-admin-server","aria-label":'Permalink to "基于注册中心构建 Admin Server"'},"​")],-1),v=s("p",null,"虽然基于独立服务构建 Admin Server 和 Admin Client 非常简单，但是需要我们在每个应用程序中添加对 Spring Boot Admin 的 Maven 依赖，并指定 Admin Server 地址。这实际上是一种代码侵入，意味着应用程序与 Admin Server 之间有一种强耦合。",-1),S=s("p",null,"那么，有没有更好的办法分离或转嫁这种耦合呢？",-1),k=s("p",null,"联想到 Admin Server 和 Admin Client 之间需要建立类似服务注册的关联关系，我们可以认为这是服务注册和发现机制的一种表现形式。",-1),b=s("p",null,"在 Spring 家族中，存在一个用于构建微服务架构的 Spring Cloud 框架，而该框架中恰好存在一款专门实现服务注册和发现的组件------服务注册中心 Spring Cloud Netflix Eureka ，且 Spring Boot Admin 内置了与这款注册中心实现工具的无缝集成。",-1),C=s("p",null,"基于注册中心，Admin Server 与各个 Admin Client 之间的交互方式如下图所示：",-1),D=l("",7),I=l("",15),f=s("p",null,"Admin Server 应用墙",-1),B=s("p",null,"点击应用墙中的某个应用，我们就能进入针对该应用的监控信息主界面。在该界面的左侧，包含了监控功能的各级目录，如下图所示：",-1),T=s("p",null,"Admin Server 监控信息主界面",-1),x=s("p",null,'在图中，我们看到了最重要的"Health"信息，显然，这一信息来自 Spring Boot Actuator 组件的 Health 端点，这里你可以参考《服务监控：如何使用 Actuator 组件实现系统监控？》的内容进行回顾。',-1),F=s("p",null,"在这个界面上继续往下滑动，我们将看到一些与 JVM 相关的监控信息，比如非常有用的线程、垃圾回收、内存状态等数据，如下图所示：",-1),q=s("p",null,"Admin Server 中的 JVM 监控信息",-1),M=s("p",null,"这些 JVM 数据都是通过可视化的方式进行展现，并随着运行时状态的变化而实时更新。",-1),P=s("p",null,'在 21 讲中，我们详细讨论了 Spring Boot Actuator 中的度量指标。而在 Admin Server 中，同样存在一个"Metrics"菜单，展示效果如下图所示：',-1),w=s("p",null,"Admin Server 中的 Metrics 信息",-1),V=s("p",null,'在"Metrics"菜单中，开发人员可以通过对各种条件进行筛选，然后添加对应的度量指标。比如上图中，我们针对 HTTP 请求中 /actuator/health 端点进行了过滤，从而得到了度量结果。',-1),H=s("p",null,"接着我们一起看看系统环境方面的属性，因为这方面的属性非常之多，所以 Admin Server 也提供了一个过滤器，如下图所示：",-1),N=s("p",null,"Admin Server 中的 Environment 信息",-1),G=s("p",null,'在上图中，通过输入"spring."参数，我们就能获取一系列与该参数相关的环境属性。',-1),R=s("p",null,'日志也是我们监控系统的一个重要途径，在 Admin Server 的"Loggers"菜单中，可以看到该应用程序的所有日志信息，如下图所示：',-1),J=s("p",null,"Admin Server 中的 Loggers 信息",-1),K=s("p",null,'通过"springcss"关键词对这些日志进行过滤，我们就可以获取 SpringCSS 案例中的日志详细了，图中也显示了每个日志记录器对应的日志级别。',-1),O=s("p",null,'最后，我们来看一下 Admin Server 中的"JVM"菜单，该菜单下存在两个子菜单："Thread Dump"和"Heap Dump"。',-1),U=s("p",null,'以"Thread Dump"为例，尽管 Actuator 提供了 /threaddump 端点，但开发人员只能获取触发该端点时的 Dump 信息，而 Admin Server 则提供了一个连续性的可视化监控界面，如下图所示：',-1),W=l("",10),L=s("p",null,"Admin Server 的安全登录界面",-1),j=s("h3",{id:"小结与预告",tabindex:"-1"},[n("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),Y=s("p",null,"可视化监控一直是开发和运维人员管理应用程序运行时状态的基础诉求，而 Spring Boot Admin 组件正是这样一款可视化的工具。它基于 Spring Boot Actuator 中各个端点所暴露的监控信息，并加以整合和集成。今天的内容首先介绍了构建 Admin Server 以及 Admin Client 的方法，并剖析了 Admin Server 中所具有的一整套的可视化解决方案。",-1),$=s("p",null,"这里给你留一道思考题：在使用 Spring Boot Admin 组件时，构建 Admin Server 有哪两种方法？欢迎你在留言区进行互动、交流。",-1),Q=s("p",null,"介绍完系统监控主题之后，我们将进入到整个课程的最后一个主题，即系统测试。23讲我们将介绍如何对数据访问层组件进行有效测试。",-1),Z=s("p",null,"另外，如果你觉得本专栏有价值，欢迎分享给好友哦~",-1);function X(z,ss,ns,as,ps,ls){const a=o("Image");return t(),r("div",null,[i,E,d,y,g,p(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/93/0C/Ciqc1GATrxuABqR3AAC7e5_Dyo4605.png"}),n(),A,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/90/48/CgqCHmAKf-WAFILtAAAsRr3Jgfg085.png"}),n(),u,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/90/3D/Ciqc1GAKf--ATR-aAAAxAFlSEVc094.png"}),n(),m,h,_,v,S,k,b,C,p(a,{alt:"图片13.png",src:"https://s0.lgstatic.com/i/image/M00/93/17/CgqCHmATr26AO1VxAACbHS3yQHY687.png"}),n(),D,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/08/31/Cip5yGAKgDuAcMmLAAB_2n8YYlw199.png"}),n(),I,p(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image2/M01/08/32/Cip5yGAKgE2AdGRqAABpdUogwxw880.png"}),n(),f,B,p(a,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image/M00/93/0C/Ciqc1GATr3-ATLpGAAOgyIEu7Sk069.png"}),n(),T,x,F,p(a,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image/M00/93/17/CgqCHmATr5KAJhb-AANDUbOuW2I534.png"}),n(),q,M,P,p(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/90/49/CgqCHmAKgGSAaC9sAAA-CBnX4LI723.png"}),n(),w,V,H,p(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/90/3E/Ciqc1GAKgGuAaRNpAABIghaOFVg132.png"}),n(),N,G,R,p(a,{alt:"图片10.png",src:"https://s0.lgstatic.com/i/image/M00/93/0C/Ciqc1GATr7OAegcuAAGy8bdkv4k234.png"}),n(),J,K,O,U,p(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/90/49/CgqCHmAKgHuAcsFSAABDhuAgJBY760.png"}),n(),W,p(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image2/M01/08/34/CgpVE2AKgImAOicJAAAiQ2MCOts677.png"}),n(),L,j,Y,$,Q,Z])}const ts=e(c,[["render",X]]);export{os as __pageData,ts as default};
