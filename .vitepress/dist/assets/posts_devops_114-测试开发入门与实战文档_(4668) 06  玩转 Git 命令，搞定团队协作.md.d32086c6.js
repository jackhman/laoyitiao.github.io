import{_ as o,j as e,o as t,g as c,k as n,h as s,Q as p,s as l}from"./chunks/framework.4e7d56ce.js";const A=JSON.parse('{"title":"06玩转Git命令，搞定团队协作","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4668) 06  玩转 Git 命令，搞定团队协作.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4668) 06  玩转 Git 命令，搞定团队协作.md","lastUpdated":1696682708000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4668) 06  玩转 Git 命令，搞定团队协作.md"},i=p('<h1 id="_06玩转git命令-搞定团队协作" tabindex="-1">06玩转Git命令，搞定团队协作 <a class="header-anchor" href="#_06玩转git命令-搞定团队协作" aria-label="Permalink to &quot;06玩转Git命令，搞定团队协作&quot;">​</a></h1><p>上节课我们一起学习了 Python 的高阶编程知识，本课时我将向你讲解 Git 的使用方法，以及如何使用 Git 搞定团队协作。</p><h3 id="git-简述" tabindex="-1">Git 简述 <a class="header-anchor" href="#git-简述" aria-label="Permalink to &quot;Git 简述&quot;">​</a></h3><p>如果说功能测试工程师的日常工作被测试用例文档和执行用例包围，那么测试开发工程师的日常工作就要从代码提交上说起了。</p><p>在高度协作化的今天，由于效率的因素，即使是测试平台，一个人完成一个系统的全部开发这种模式逐渐变得不再适用；如今大部分情况，测试开发任务会被分解成一个个模块，分别由不同的人负责，这就带来了以下问题：</p><ul><li><p>假设你和别人负责同一个页面的不同模块，你们的代码应该如何提交整合？</p></li><li><p>假设你要修改一段公用代码，而别人正好也在修改了这个代码，这个代码如何提交？以及如何保存？</p></li><li><p>假设一个功能经过多次代码演变后再被你接手，你想看下这块代码的演变历史，该怎么办？</p></li></ul><p>说到这里，我相信你肯定明白了，我们需要版本控制系统来追踪代码的历史演变过程，从而更好地解决上述可能的冲突。</p><p>作为市面上最好的开源分布式版本控制系统，Git 就闪亮登场了。那么 Git 为什么这么受追捧呢? 这与它的原理有很大关系。</p><h4 id="_1-高效的数据存储方式" tabindex="-1">1. 高效的数据存储方式 <a class="header-anchor" href="#_1-高效的数据存储方式" aria-label="Permalink to &quot;1. 高效的数据存储方式&quot;">​</a></h4><p>与其他版本控制软件不同，Git 并不以文件变更列表的方式存储信息（该类版本控制方式也叫基于差异（delta-based）的版本控制），而是采用<strong>快照流</strong>的方式对信息进行存储。</p><p>在 Git 中，当你提交、更新时， Git 会对项目的全部文件<strong>创建一个快照并保存这个快照的索引；<strong>当你再次提交、更新时，如果存在没有修改的文件，则 Git 只保留一个链接指向之前存储的文件，而</strong>不再重新存储该文件</strong>，这样就提高了存储效率。</p><h4 id="_2-几乎所有操作都是本地执行" tabindex="-1">2. 几乎所有操作都是本地执行 <a class="header-anchor" href="#_2-几乎所有操作都是本地执行" aria-label="Permalink to &quot;2. 几乎所有操作都是本地执行&quot;">​</a></h4><p>在 Git 中， 绝大多数操作都只需要访问本地文件和资源而无须联网。因为 Git 是分布式的，所以你的本地磁盘上就有项目的完整历史。</p><p>这种独特的方式可以使你在离线时也能进行 Git 操作并且提交数据，而用 Subversion 和 CVS 的话， 你能修改文件，但不能向数据库提交修改（因为你的本地数据库离线了）。</p><h4 id="_3-具备数据完整性保障" tabindex="-1">3. 具备数据完整性保障 <a class="header-anchor" href="#_3-具备数据完整性保障" aria-label="Permalink to &quot;3. 具备数据完整性保障&quot;">​</a></h4><p>在 Git 中，你的任何操作在被存储前都会使用SHA-1散列（Hash，哈希）计算校验和（checksummed）来保障数据的完整性。（例如，你的每个 commit ID 的信息就是一个 SHA-1 Hash 值）。</p><p>在实际工作中，我们通过 GitHub、Bitbucket 或者 GitLab 这样的云服务平台来管理项目，大型的公司也会通过在内部搭建<strong>私有 Git 仓库</strong>的方式来管理，无论是哪种方式，背后都离不开 Git。</p><h3 id="git-工作流程" tabindex="-1">Git 工作流程 <a class="header-anchor" href="#git-工作流程" aria-label="Permalink to &quot;Git 工作流程&quot;">​</a></h3><h4 id="_1-git-中的三种文件状态" tabindex="-1">1.Git 中的三种文件状态 <a class="header-anchor" href="#_1-git-中的三种文件状态" aria-label="Permalink to &quot;1.Git 中的三种文件状态&quot;">​</a></h4><p>在 Git 里，你的项目文件可能处于以下三种状态之一：</p><ul><li><p>已修改（modified），表示修改了文件，但还没保存到数据库中；</p></li><li><p>已暂存（staged），表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中；</p></li><li><p>已提交（committed），表示数据已经安全地保存在本地数据库中。</p></li></ul><h4 id="_2-git-项目的三个阶段" tabindex="-1">2.Git 项目的三个阶段 <a class="header-anchor" href="#_2-git-项目的三个阶段" aria-label="Permalink to &quot;2.Git 项目的三个阶段&quot;">​</a></h4><p>相应地，我们的 Git 项目就分别对应着三个阶段： 工作区、暂存区和 Git 目录。</p><ul><li><strong>工作区</strong></li></ul><p>工作区是从 Git 仓库提取出来的数据，也就是我们本地看到的代码目录，这里改动的代码都在<strong>已修改</strong>状态。</p><ul><li><strong>暂存区</strong></li></ul><p>暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。当处于已修改状态的文件被放入暂存区（Git Add）时，这些文件则会变为<strong>已暂存</strong>状态。</p><ul><li><strong>Git 目录</strong></li></ul><p>Git 仓库目录是 Git 用来保存<strong>项目的元数据和对象数据库</strong> 的地方。从其他计算机克隆仓库时，复制的就是这里的数据。当暂存区的文件被提交（Git Commit），则这些文件属于<strong>已提交</strong>状态。</p>',29),y=p(`<p>Git 项目的阶段图</p><h4 id="_3-git-基本工作流程" tabindex="-1">3. Git 基本工作流程 <a class="header-anchor" href="#_3-git-基本工作流程" aria-label="Permalink to &quot;3. Git 基本工作流程&quot;">​</a></h4><p>了解了这些，我们来看下 Git 的基本工作流程：</p><ul><li><p>工作区进行代码新建、修改、删除；</p></li><li><p>将你下次要提交的改动全部或者选择性的暂存到暂存区（Git Add）；</p></li><li><p>提交你的改动（Git Commit）。</p></li></ul><h3 id="git-实践" tabindex="-1">Git 实践 <a class="header-anchor" href="#git-实践" aria-label="Permalink to &quot;Git 实践&quot;">​</a></h3><p>当你了解了 Git 的基本知识后，就可以开始实践了。</p><h4 id="_1-git-安装" tabindex="-1">1.Git 安装 <a class="header-anchor" href="#_1-git-安装" aria-label="Permalink to &quot;1.Git 安装&quot;">​</a></h4><p>使用不同操作系统的安装方式各有不同。</p><ul><li><strong>Mac 系统安装</strong></li></ul><p>在 Mac 系统下可以直接使用 homebrew 安装：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">brew install git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">brew install git</span></span></code></pre></div><p>如果 homebrew 没有安装，则可以采用如下方式安装 homebrew 后再执行上述命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bash </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c </span><span style="color:#9ECBFF;">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bash </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c </span><span style="color:#032F62;">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span></span></code></pre></div><ul><li><strong>Window 系统安装</strong></li></ul><p>在 Window 系统下安装，可直接点击访问 <a href="https://git-scm.com/download/win" target="_blank" rel="noreferrer">Git 网站</a>下载安装包进行安装：</p><ul><li><strong>Linux 系统安装</strong></li></ul><p>在 Linux 系统下，可以直接通过输入如下命令行进行安装：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ sudo dnf install git</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">all</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ sudo dnf install git</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">all</span></span></code></pre></div><ul><li><strong>Ubuntu 系统安装</strong></li></ul><p>在 Ubuntu 系统下，你可以通过输入如下命令行进行安装：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ sudo apt install git</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">all</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ sudo apt install git</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">all</span></span></code></pre></div><h4 id="_2-git-设置" tabindex="-1">2.Git 设置 <a class="header-anchor" href="#_2-git-设置" aria-label="Permalink to &quot;2.Git 设置&quot;">​</a></h4><p>在安装 Git 后，一般要进行用户设置，因为你的每一次 Git 提交都需要用户信息，你可以采用如下步骤配置你的信息。</p><ul><li><strong>打开命令行工具：</strong></li></ul><p>若你使用的是 Windows 系统，通过&quot;win+ R&quot;快捷键组合，然后输入&quot;cmd&quot;进入；</p><p>若你使用的是 Mac 系统，则通过&quot;Command + 空格&quot;，然后输入&quot;Terminal&quot;的方式。</p><ul><li><strong>输入如下命令：</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#设置你的Git提交的用户名</span></span>
<span class="line"><span style="color:#E1E4E8;">$ git config </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">global user.name </span><span style="color:#9ECBFF;">&quot;Kevin Cai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">#设置你的邮箱地址</span></span>
<span class="line"><span style="color:#E1E4E8;">$ git config </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">global user.email TesterTalk@</span><span style="color:#F97583;">outlook</span><span style="color:#E1E4E8;">.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#设置你的Git提交的用户名</span></span>
<span class="line"><span style="color:#24292E;">$ git config </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">global user.name </span><span style="color:#032F62;">&quot;Kevin Cai&quot;</span></span>
<span class="line"><span style="color:#24292E;">#设置你的邮箱地址</span></span>
<span class="line"><span style="color:#24292E;">$ git config </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">global user.email TesterTalk@</span><span style="color:#D73A49;">outlook</span><span style="color:#24292E;">.com</span></span></code></pre></div><ul><li><strong>通过如下命令查看是否设置成功：</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ git config </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">list</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ git config </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">list</span></span></code></pre></div><p>当你设置好用户信息后，以后通过 Git 提交代码，Git 会自动使用你配置的用户信息进行提交。</p><h4 id="_3-git-基本操作" tabindex="-1">3.Git 基本操作 <a class="header-anchor" href="#_3-git-基本操作" aria-label="Permalink to &quot;3.Git 基本操作&quot;">​</a></h4><p>好了，现在我们已经了解了 Git 的原理并已经安装好 Git，下面就来看看 Git 的基本操作吧。</p><p>正常情况下，公司的代码都是通过 GitHub 企业版或者 GitLab 来进行托管。我以 GitHub 为例，来讲解下 Git 的使用和协作交互（GitLab 大体相同）。</p><p>还记得我在 <strong>&quot;课前必读2 | 测试开发的职业生涯是怎样的?&quot;</strong> 中讲过的测试开发流程吗？我把有关Git 操作的部分截取过来：</p>`,35),E=p(`<p>可以看到，涉及代码提交的步骤有：</p><ul><li><p>Task 开发，开发人员在本地 feature 分支进行功能开发；</p></li><li><p>提交测试，新功能开发完成后，开发人员在本地分支自测，然后通过 pull request 的方式提交代码；</p></li><li><p>测试验证，GitHub 根据条件自动触发测试验证流程；</p></li><li><p>代码 Merge，测试通过后，代码被 Merge 到 master 分支。</p></li></ul><p>如上流程几乎是各个互联网公司通用的开发协作流程，下面我就来详细讲解 Task 开发中的 Git 操作及其作用。</p><p>要进行 Task 开发，就必须有相应的 Git 项目，那么 Git 项目如何生成呢？</p><p>一般情况下，都是直接拉取已经存在的项目，而在拉取项目之前，你最好配置下 SSH，<strong>SSH 协议</strong>用来连接远程服务器和服务并向它们认证，使用 SSH 连接 GitHub 无须每次访问都提供用户名和密码。</p><p>配置 SSH 的方法直接参考 <a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noreferrer">GitHub 官网</a>链接即可，配置好 SSH 后，你可以直接通过如下命令拉取你的项目。</p><ul><li><strong>git init</strong></li></ul><p>如果是创建全新的项目，你可以通过如下方式：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#首先，通过命令行进入到你想创建 Git 仓库的目录，然后再目录下执行</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#首先，通过命令行进入到你想创建 Git 仓库的目录，然后再目录下执行</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span></code></pre></div><p>例如你在文件夹 lagouTest 下执行 git init，则 git 将在 lagouTest 下创建一个 .git 子目录，这意味着 lagouTest 这个目录已经转变成了一个 Git 仓库，我们可以对它进行版本管理了。</p><ul><li><strong>git add .</strong></li></ul><p>如果是通过 git init 立的项目，此时你的 Git 仓库是空的，你可以通过新建文件的方式来编写你的代码，比如新建一个 newcase.py 并且编写。等你编写好后，可以通过 git add 的方式将它提交到暂存区。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#把本地文件newcase.py的改变提交到暂存区</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newcase.py</span></span>
<span class="line"><span style="color:#6A737D;">#如果更改的文件过多，可以直接把本地所有的改变提交到暂存区</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#把本地文件newcase.py的改变提交到暂存区</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newcase.py</span></span>
<span class="line"><span style="color:#6A737D;">#如果更改的文件过多，可以直接把本地所有的改变提交到暂存区</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span></code></pre></div><ul><li><strong>git rm</strong></li></ul><p>当你想删除某个文件时，可以使用 git rm</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 删除文件</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">fil</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">#删除README file</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">README</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 删除文件</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">fil</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">#删除README file</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">README</span></span></code></pre></div><ul><li><strong>git status</strong></li></ul><p>如果你想查看当前版本库的状态，可以使用 git status</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">status</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">status</span></span></code></pre></div><p>git status 将列出文件/文件夹在工作区和暂存区的状态。</p><ul><li><strong>git commit -m</strong></li></ul><p>接着把暂存区的改动提交到本地版本库。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 通过-m参数输入本次提交的改动信息，方便我们了解本次的代码变更</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;我的第一次提交&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 通过-m参数输入本次提交的改动信息，方便我们了解本次的代码变更</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;我的第一次提交&quot;</span></span></code></pre></div><ul><li><strong>git remote add</strong></li></ul><p>项目要多人协作就必须把本地仓库提交到远程。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#如下语法用来添加一个远程仓库</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">remote</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> [shortname] [url]</span></span>
<span class="line"><span style="color:#6A737D;">#将本地仓库lagouTest和远程仓库建立连接</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">remote</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/yourCompany/lagouTest.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#如下语法用来添加一个远程仓库</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remote</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> [shortname] [url]</span></span>
<span class="line"><span style="color:#6A737D;">#将本地仓库lagouTest和远程仓库建立连接</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remote</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/yourCompany/lagouTest.git</span></span></code></pre></div><p>如果是新建立的项目，需要用这个方式建立远程仓库。待远程仓库建好后，还需要将本地的改动通过 git push 到远程去。</p><ul><li><strong>git push - u</strong></li></ul><p>既然是团队协作就必须把本地版本库上传到远程库，这样别的开发人员才能拉取你的改动。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 如果是本地新仓库第一次push到远程，你需要执行如下操作</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 如果是本地新仓库第一次push到远程，你需要执行如下操作</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span></code></pre></div><p>通过上述方式，你的代码已经存在远程仓库的 master 分支了，别的开发人员就可以拉取你的代码进行修改了。</p><ul><li><strong>git clone</strong></li></ul><p>要通过 git 协作，首先要 clone 远程仓库到本地。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#在命令行中执行如下操作</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">你的项目地址</span></span>
<span class="line"><span style="color:#6A737D;"># 譬如，如下命令将Copy lagouTest到本地。</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/yourCompany/lagouTest.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#在命令行中执行如下操作</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">你的项目地址</span></span>
<span class="line"><span style="color:#6A737D;"># 譬如，如下命令将Copy lagouTest到本地。</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/yourCompany/lagouTest.git</span></span></code></pre></div><ul><li><strong>git checkout-b</strong></li></ul><p>项目被拉取到本地后，开发人员就可以进行分支开发，通常情况下不会在 master 分支进行开发，而是采取新 feature 分支开发的方式。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#创建并切换feature分支</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newFeature</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#创建并切换feature分支</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newFeature</span></span></code></pre></div><p>假如分支 newFeature 已经存在，你想要切换到这个分支工作，则使用如下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newFeature</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newFeature</span></span></code></pre></div><p>当 feature 分支创建好后，开发人员就可以新建代码文件并进行代码的编写；代码编写好后，开发人员就会提交，此时仍然采用 &quot;git add&quot; 和 &quot;git commit&quot;提交即可；当你 commit 后，也要提交到远程仓库。</p><ul><li><strong>git push-set-upstream</strong></li></ul><p>因为我们是本地创建的 feature 分支，远程并没有对应的分支，故需要远程分支关联。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 把本地分支newFeature关联到远程分支origin</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--set-upstream</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newFeature</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 把本地分支newFeature关联到远程分支origin</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--set-upstream</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newFeature</span></span></code></pre></div><p>此时远程分支除去 master 分支外，还有我们新建立的 newFeature 分支。当关联远程分支后，我们在 newFeature 分支上再做任何改动，需要 push 到远程分支，就可以直接使用 &quot;git push&quot; 而无须再次进行关联。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># newFeature的再次改动提交到远程库，仅需执行git push即可。</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># newFeature的再次改动提交到远程库，仅需执行git push即可。</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span></span></code></pre></div><ul><li><strong>pull request</strong></li></ul><p>pull request（通常被简称为 PR）是 GitHub 的一个通知机制，通过它开发人员可以进行更好的协作。pull request 通常要指定 reviewer（评审者），它告诉项目成员我的 feature 功能开发已经完毕，希望合并到代码主分支（master）。</p><p>创建 PR 通常是使用 GitHub 界面完成的。仍然拿项目 lagouTest 为例，我们需要把 feature 分支 newFeature 上的改动 merge 到 master，就需要提交 pull request。</p><p>在 GitHub 项目目录选择 &quot;compare &amp; pull request&quot; 来建立一个 pull request。</p>`,49),g=l("p",null,'在创建 pull request 页面，可以看到我们是要把 newFeature 的改动 merge 到 master 里去。正文的输入框中，输入本次提交都修改了哪些内容，然后在右侧的 Reviewers 里添加需要协作的同事，然后点击 "Create pull request" 即可。',-1),d=p(`<p>提交后你的同事会收到邀请，当他们 Approve 你的改动后，你的代码就进入了 master 仓库（关于如何 review 一个 pull request，请参考 <a href="https://docs.github.com/en/enterprise/2.13/user/articles/reviewing-proposed-changes-in-a-pull-request" target="_blank" rel="noreferrer">Review Pull Request</a>）。</p><ul><li><strong>git branch -d</strong></li></ul><p>当你的分支被 merge 后，你的 feature 分支和远程分支就不需要了，最好把它们删除以保持 git 分支的清爽。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#删除本地分支</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">branch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> [branchname]</span></span>
<span class="line"><span style="color:#6A737D;">#譬如删除本地分支newFeature</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">branch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newFeature</span></span>
<span class="line"><span style="color:#6A737D;">#删除远程分支</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--delete</span><span style="color:#E1E4E8;"> [branchname]</span></span>
<span class="line"><span style="color:#6A737D;"># 删除远程分支newFeature</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--delete</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newFeature</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#删除本地分支</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> [branchname]</span></span>
<span class="line"><span style="color:#6A737D;">#譬如删除本地分支newFeature</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newFeature</span></span>
<span class="line"><span style="color:#6A737D;">#删除远程分支</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--delete</span><span style="color:#24292E;"> [branchname]</span></span>
<span class="line"><span style="color:#6A737D;"># 删除远程分支newFeature</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--delete</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newFeature</span></span></code></pre></div><h3 id="git-常见问题" tabindex="-1">Git 常见问题 <a class="header-anchor" href="#git-常见问题" aria-label="Permalink to &quot;Git 常见问题&quot;">​</a></h3><p>除了上述 Git 常用的操作外，在日常工作和面试中，我们经常会遇见如下问题。</p><h4 id="_1-如何查看提交历史" tabindex="-1">1. 如何查看提交历史 <a class="header-anchor" href="#_1-如何查看提交历史" aria-label="Permalink to &quot;1. 如何查看提交历史&quot;">​</a></h4><p>当你需要查看某个文件的提交历史时，使用如下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filename</span></span>
<span class="line"><span style="color:#6A737D;">#查看 newcases.py的提交历史</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newcases.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filename</span></span>
<span class="line"><span style="color:#6A737D;">#查看 newcases.py的提交历史</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newcases.py</span></span></code></pre></div><h4 id="_2-本地正在开发-远程-master-有了更新-如何应用更新到本地分支" tabindex="-1">2. 本地正在开发，远程 master 有了更新，如何应用更新到本地分支？ <a class="header-anchor" href="#_2-本地正在开发-远程-master-有了更新-如何应用更新到本地分支" aria-label="Permalink to &quot;2. 本地正在开发，远程 master 有了更新，如何应用更新到本地分支？&quot;">​</a></h4><p>当远程有更新且需要应用到本地时，可以采用如下操作：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 假设本地feature分支为newFeature</span></span>
<span class="line"><span style="color:#6A737D;"># 首先需要提交本地分支newFeature的改动至代码仓库</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;本地分支修改comments&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 然后，执行git merge</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span>
<span class="line"><span style="color:#6A737D;"># 最后，再次提交</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;merge master 分支&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 假设本地feature分支为newFeature</span></span>
<span class="line"><span style="color:#6A737D;"># 首先需要提交本地分支newFeature的改动至代码仓库</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;本地分支修改comments&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 然后，执行git merge</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span>
<span class="line"><span style="color:#6A737D;"># 最后，再次提交</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;merge master 分支&quot;</span></span></code></pre></div><h4 id="_3-提交时文件有冲突怎么办" tabindex="-1">3. 提交时文件有冲突怎么办？ <a class="header-anchor" href="#_3-提交时文件有冲突怎么办" aria-label="Permalink to &quot;3. 提交时文件有冲突怎么办？&quot;">​</a></h4><p>当多人同时改动一个文件并且当你提交时，这个文件已经被先行 merge 到 master 时，就会出现冲突。</p><p>当出现冲突后， git 会列出来冲突的内容，你可以通过手动选择保留哪个版本的方式来解决冲突，解决冲突后，通过&quot;git add&quot; 和&quot;git commit&quot;再次提交即可。</p><h4 id="_4-当你正在进行分支开发时-接到一个紧急任务-如何将当前的改动保留和后续恢复" tabindex="-1">4. 当你正在进行分支开发时，接到一个紧急任务，如何将当前的改动保留和后续恢复？ <a class="header-anchor" href="#_4-当你正在进行分支开发时-接到一个紧急任务-如何将当前的改动保留和后续恢复" aria-label="Permalink to &quot;4. 当你正在进行分支开发时，接到一个紧急任务，如何将当前的改动保留和后续恢复？&quot;">​</a></h4><p>当你的 feature 分支开发了一半，然后接到了紧急任务需要支持，但是你又不想把功能不完善的代码提交到代码仓库，此时可以使用 git stash 命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 如果你要切换新分支但是有未保存的更改使用git checkout -b会报错。此# 时可以通过git stash将所有未提交的修改（工作区和暂存区）保存至堆栈# # 中，可用于后续恢复.</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stash</span></span>
<span class="line"><span style="color:#6A737D;"># 等你想恢复你保存的改动时，执行git stash pop。 它将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下。</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stash</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pop</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 如果你要切换新分支但是有未保存的更改使用git checkout -b会报错。此# 时可以通过git stash将所有未提交的修改（工作区和暂存区）保存至堆栈# # 中，可用于后续恢复.</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span></span>
<span class="line"><span style="color:#6A737D;"># 等你想恢复你保存的改动时，执行git stash pop。 它将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下。</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pop</span></span></code></pre></div><h4 id="_5-本地提交已提交到暂存区-但是不想要了怎么办" tabindex="-1">5. 本地提交已提交到暂存区，但是不想要了怎么办？ <a class="header-anchor" href="#_5-本地提交已提交到暂存区-但是不想要了怎么办" aria-label="Permalink to &quot;5. 本地提交已提交到暂存区，但是不想要了怎么办？&quot;">​</a></h4><p>假设你的某次改动已经提交到暂存区，还没有 push，但是你想丢弃这个改动，可以采用如下办法：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reset</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--hard</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HEAD</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reset</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--hard</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HEAD</span></span></code></pre></div><p>git reset 有 hard 和 soft 两个模式，感兴趣的同学可以自行了解下其中的区别。</p><h4 id="_6-提交后发现把本次修改的内容写错了-怎么办" tabindex="-1">6. 提交后发现把本次修改的内容写错了，怎么办？ <a class="header-anchor" href="#_6-提交后发现把本次修改的内容写错了-怎么办" aria-label="Permalink to &quot;6. 提交后发现把本次修改的内容写错了，怎么办？&quot;">​</a></h4><p>当你只想 git commit 后发现遗漏或者写错了本次修改的内容， 可以采用如下方式：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--amend</span></span>
<span class="line"><span style="color:#6A737D;"># git会出现一个编辑框，你可以更改你的提交信息。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--amend</span></span>
<span class="line"><span style="color:#6A737D;"># git会出现一个编辑框，你可以更改你的提交信息。</span></span></code></pre></div><h4 id="_7-上线后有问题-代码需要回退怎么办" tabindex="-1">7. 上线后有问题，代码需要回退怎么办？ <a class="header-anchor" href="#_7-上线后有问题-代码需要回退怎么办" aria-label="Permalink to &quot;7. 上线后有问题，代码需要回退怎么办？&quot;">​</a></h4><p>如果发现发布上线的功能有问题，需要回退的情况，执行如下操作：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HEAD</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HEAD</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本节课我介绍了 Git 的原理、用法和常见问题。Git 命令本身比较多，也难以全部熟记，在工作中，我们常用的就是 git init、git add、git commit、git push、git merge 这几个命令，把这些常用的命令记清楚，有助于你快速地进行团队协作。</p><p>为了方便大家记忆 git 命令，我将本节所讲内容制作成一个表格，供大家查阅。</p>`,31),u=l("hr",null,null,-1),h=l("p",null,[s('"'),l("a",{href:"http://wmb.qingculture.com/WeiCycle/WeiCycleShow?id=24381",target:"_blank",rel:"noreferrer"},'测试开发工程师名企直推营"入口，免费领取 50G 资料包')],-1);function F(C,m,b,v,B,k){const a=e("Image");return t(),c("div",null,[i,n(a,{alt:"111.png",src:"https://s0.lgstatic.com/i/image/M00/59/88/Ciqc1F9xpYWAJWJAAAB5JDsw3PU387.png"}),s(),y,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/55/2D/CgqCHl9pzUiAEU8PAABRHAYUORg999.png"}),s(),E,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/55/22/Ciqc1F9pzbuANFMuAAFn0LrDY28731.png"}),s(),g,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/55/2E/CgqCHl9pzcOAPs_DAAJnDDt2At0692.png"}),s(),d,n(a,{alt:"112.png",src:"https://s0.lgstatic.com/i/image/M00/59/93/CgqCHl9xpZyAB2lwAAN5ch5Exp0821.png"}),s(),u,h])}const q=o(r,[["render",F]]);export{A as __pageData,q as default};
