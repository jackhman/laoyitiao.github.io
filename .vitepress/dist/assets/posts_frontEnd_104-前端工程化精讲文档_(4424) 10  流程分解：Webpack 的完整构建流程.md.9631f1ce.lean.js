import{_ as o,j as e,o as t,g as c,k as p,Q as l,s,h as a}from"./chunks/framework.e0c66c3f.js";const w=JSON.parse('{"title":"Webpack 的基本工作流程 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/104-前端工程化精讲文档/(4424) 10  流程分解：Webpack 的完整构建流程.md","filePath":"posts/frontEnd/104-前端工程化精讲文档/(4424) 10  流程分解：Webpack 的完整构建流程.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/104-前端工程化精讲文档/(4424) 10  流程分解：Webpack 的完整构建流程.md"},i=l("",51),E=l("",7),y=s("p",null,"根据这样的输出结果，我们就可以分析项目里各阶段的耗时情况，再进行针对性地优化。这个统计插件将在后面几课的优化实践中运用。",-1),k=s("p",null,[a("除了这类自己编写的统计插件外，Webpack 社区中也有一些较成熟的统计插件，例如"),s("a",{href:"https://github.com/stephencookdev/speed-measure-webpack-plugin",target:"_blank",rel:"noreferrer"},"speed-measure-webpack-plugin"),a("等，感兴趣的话，你可以进一步了解。")],-1),m=s("h3",{id:"总结",tabindex:"-1"},[a("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),d=s("p",null,"这一课时起，我们进入了 Webpack 构建优化的主题。在这节课中，我主要为你勾画了一个 Webpack 工作流程的轮廓，通过对三个源码文件的分析，让你对执行构建命令后的内部流程有一个基本概念。然后我们讨论了 Compiler 和 Compilation 工作流程中的生命周期 Hooks，以及插件的基本工作方式。最后，我们编写了一个简单的统计插件，用于实践上面所讲的课程内容。",-1),h=s("p",null,"今天的课后思考题是：在今天介绍的 Compiler 和 Compilation 的各生命周期阶段里，通常耗时最长的分别是哪个阶段呢？可以结合自己所在的项目测试分析一下。",-1);function b(u,F,g,C,f,A){const n=e("Image");return t(),c("div",null,[i,p(n,{alt:"image (4).png",src:"https://s0.lgstatic.com/i/image/M00/4D/B4/Ciqc1F9bGtqAJo4uAABnYGwsyYs218.png"}),E,p(n,{alt:"image (5).png",src:"https://s0.lgstatic.com/i/image/M00/4D/B4/Ciqc1F9bGvGAFRmpAAGFrvBhTHE475.png"}),y,k,m,d,h])}const D=o(r,[["render",b]]);export{w as __pageData,D as default};
