import{_ as l,j as e,o as t,g as r,k as p,h as n,s,Q as o}from"./chunks/framework.4e7d56ce.js";const j=JSON.parse('{"title":"20SpringJPA中的Hibernate加载过程与配置项是怎么回事？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4720) 20  Spring JPA 中的 Hibernate 加载过程与配置项是怎么回事？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4720) 20  Spring JPA 中的 Hibernate 加载过程与配置项是怎么回事？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4720) 20  Spring JPA 中的 Hibernate 加载过程与配置项是怎么回事？.md"},E=s("h1",{id:"_20springjpa中的hibernate加载过程与配置项是怎么回事",tabindex:"-1"},[n("20SpringJPA中的Hibernate加载过程与配置项是怎么回事？ "),s("a",{class:"header-anchor",href:"#_20springjpa中的hibernate加载过程与配置项是怎么回事","aria-label":'Permalink to "20SpringJPA中的Hibernate加载过程与配置项是怎么回事？"'},"​")],-1),i=s("p",null,"你好，欢迎来到第 20 讲。前面我们已经学习完了两个模块：基础知识以及高阶用法与实战的内容，不知道你掌握得如何，有疑问的地方一定要留言提问，或者和大家一起讨论，请记住学习的路上你不是一个人在战斗。",-1),y=s("p",null,'那么从这一讲开始，我们进入"模块三：原理与问题排查"知识的学习。这一模块，我将带你了解Hibernate 的加载过程、Session 和事务之间的关系，帮助你知道在遇到 LazyException 以及经典的 N+1 SQL 问题时该如何解决，希望你在工作中可以灵活运用所学知识。',-1),_=s("p",null,"这一讲，我们来分析一下在 Spring Data JPA 的项目下面 Hibernate 的配置参数有哪些，先从 Hibernate 的整体架构进行分析。",-1),u=s("h3",{id:"hibernate-架构分析",tabindex:"-1"},[n("Hibernate 架构分析 "),s("a",{class:"header-anchor",href:"#hibernate-架构分析","aria-label":'Permalink to "Hibernate 架构分析"'},"​")],-1),A=s("p",null,"首先看一下 Hibernate 5.2 版本中，官方提供的架构图。",-1),F=s("p",null,"从架构图上，我们可以知道 Hiberante 实现的 ORM 的接口有两种，一种是 Hiberante 自己的 API 接口；一种是 Java Persistence API 的接口实现。",-1),g=s("p",null,"因为 Hibernate 其实是比 Java Persistence API 早几年发展的，后来才有了 Java 的持久化协议。以我个人的观点来看，随着时间的推移，Hiberante 的实现逻辑可能会逐渐被弱化，由 Java Persistence API 统一对外提供服务。",-1),S=s("p",null,"那么有了这个基础，我们研究 Hibernate 在 Spring Data JPA 里面的作用，得出的结论就是：Hibernate 5.2 是 Spring Data JPA 持久化操作的核心。我们再从类上面具体看一下，关键类的图如下所示：",-1),C=s("p",null,"结合类的关系图来看，Session 接口和 SessionFactory 接口都是 Hibernate 的概念，而 EntityManger 和 EntityManagerFactory 都是 Java Persistence API 协议规定的接口。",-1),q=s("p",null,"不过 HibernateEntityManger 从 Hibernate 5.2 之后就开始不推荐使用了，而是建议直接使用 EntityManager 接口即可。那么我们看看 Hibernate 在 Spring BOOT 里面是如何被加载进去的。",-1),h=s("h3",{id:"hibernate-5-在-spring-boot-2-里面的加载过程",tabindex:"-1"},[n("Hibernate 5 在 Spring Boot 2 里面的加载过程 "),s("a",{class:"header-anchor",href:"#hibernate-5-在-spring-boot-2-里面的加载过程","aria-label":'Permalink to "Hibernate 5 在 Spring Boot 2 里面的加载过程"'},"​")],-1),b=s("p",null,"不同的 Spring Boot 版本，可能加载类的实现逻辑是不一样的，但是分析过程都是相同的。我们先打开 spring.factories 文件，如下图所示，其中可以自动加载 Hibernate 的只有一个类，那就是 HibernateJpaAutoConfiguration。",-1),D=o(`<p>HibernateJpaAutoConfiguration 就是 Spring Boot 加载 Hibernate 的主要入口，所以我们可以直接打开这个类看一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">({ LocalContainerEntityManagerFactoryBean.class, EntityManager.class, SessionImplementor.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(JpaProperties.class)</span><span style="color:#6A737D;">//JPAProperties的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureAfter</span><span style="color:#E1E4E8;">({ DataSourceAutoConfiguration.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(HibernateJpaConfiguration.class) </span><span style="color:#6A737D;">//hibernate加载的关键类</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HibernateJpaAutoConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">({ LocalContainerEntityManagerFactoryBean.class, EntityManager.class, SessionImplementor.class })</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(JpaProperties.class)</span><span style="color:#6A737D;">//JPAProperties的配置</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureAfter</span><span style="color:#24292E;">({ DataSourceAutoConfiguration.class })</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(HibernateJpaConfiguration.class) </span><span style="color:#6A737D;">//hibernate加载的关键类</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HibernateJpaAutoConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，我们第一个需要关注的就是 JpaProperties 类，因为通过这个类我们可以间接知道，application.properties 里面可以配置的 spring.jpa 的属性有哪些。</p><h4 id="jpaproperties-属性" tabindex="-1">JpaProperties 属性 <a class="header-anchor" href="#jpaproperties-属性" aria-label="Permalink to &quot;JpaProperties 属性&quot;">​</a></h4><p>我们打开 JpaProperties 类看一下，如下图所示。</p>`,5),d=o(`<p>通过这个类，我们可以在 application.properties 里面得到如下配置项。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 可以配置JPA的实现者的原始属性的配置，如：这里我们用的JPA的实现者是hibernate</span></span>
<span class="line"><span style="color:#6A737D;"># 那么hibernate里面的一些属性设置就可以通过如下方式实现，具体properties里面有哪些，本讲会详细介绍，我们先知道这里可以设置即可</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.properties.hibernate.hbm2ddl.auto=none</span></span>
<span class="line"><span style="color:#6A737D;">#hibernate的persistence.xml文件有哪些，目前已经不推荐使用</span></span>
<span class="line"><span style="color:#6A737D;">#spring.jpa.mapping-resources=</span></span>
<span class="line"><span style="color:#6A737D;"># 指定数据源的类型，如果不指定，Spring Boot加载Datasource的时候会根据URL的协议自己判断</span></span>
<span class="line"><span style="color:#6A737D;"># 如：spring.datasource.url=jdbc:mysql://localhost:3306/test 上面可以明确知道是mysql数据源，所以这个可以不需要指定；</span></span>
<span class="line"><span style="color:#6A737D;"># 应用场景，当我们通过代理的方式，可能通过datasource.url没办法判断数据源类型的时候，可以通过如下方式指定，可选的值有：DB2,H2,HSQL,INFORMIX,MYSQL,ORACLE,POSTGRESQL,SQL_SERVER,SYBASE)</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.database=mysql</span></span>
<span class="line"><span style="color:#6A737D;"># 是否在启动阶段根据实体初始化数据库的schema，默认false，当我们用内存数据库做测试的时候可以打开，很有用</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.generate-ddl=false</span></span>
<span class="line"><span style="color:#6A737D;"># 和spring.jpa.database用法差不多，指定数据库的平台，默认会自己发现；一般不需要指定，database-platform指定的必须是org.hibernate.dialect.Dialect的子类，如mysql默认是用下面的platform</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.database-platform=org.hibernate.dialect.MySQLInnoDBDialect</span></span>
<span class="line"><span style="color:#6A737D;"># 是否在view层打开session，默认是true，其实大部分场景不需要打开，我们可以设置成false，</span></span>
<span class="line"><span style="color:#6A737D;"># 22课时我们再详细讲解</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.open-in-view=false</span></span>
<span class="line"><span style="color:#6A737D;"># 是否显示sql，当执行JPA的数据库操作的时候，默认是false，在本地开发的时候我们可以把这个打开，有助于分析sql是不是我们预期的</span></span>
<span class="line"><span style="color:#6A737D;"># 在生产环境的时候建议给这个设置成false，改由logging.level.org.hibernate.SQL=DEBUG代替，这样的话日志默认是基于logback输出的</span></span>
<span class="line"><span style="color:#6A737D;"># 而不是直接打印到控制台的，有利于增加traceid和线程ID等信息，便于分析</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.show-sql=true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 可以配置JPA的实现者的原始属性的配置，如：这里我们用的JPA的实现者是hibernate</span></span>
<span class="line"><span style="color:#6A737D;"># 那么hibernate里面的一些属性设置就可以通过如下方式实现，具体properties里面有哪些，本讲会详细介绍，我们先知道这里可以设置即可</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.properties.hibernate.hbm2ddl.auto=none</span></span>
<span class="line"><span style="color:#6A737D;">#hibernate的persistence.xml文件有哪些，目前已经不推荐使用</span></span>
<span class="line"><span style="color:#6A737D;">#spring.jpa.mapping-resources=</span></span>
<span class="line"><span style="color:#6A737D;"># 指定数据源的类型，如果不指定，Spring Boot加载Datasource的时候会根据URL的协议自己判断</span></span>
<span class="line"><span style="color:#6A737D;"># 如：spring.datasource.url=jdbc:mysql://localhost:3306/test 上面可以明确知道是mysql数据源，所以这个可以不需要指定；</span></span>
<span class="line"><span style="color:#6A737D;"># 应用场景，当我们通过代理的方式，可能通过datasource.url没办法判断数据源类型的时候，可以通过如下方式指定，可选的值有：DB2,H2,HSQL,INFORMIX,MYSQL,ORACLE,POSTGRESQL,SQL_SERVER,SYBASE)</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.database=mysql</span></span>
<span class="line"><span style="color:#6A737D;"># 是否在启动阶段根据实体初始化数据库的schema，默认false，当我们用内存数据库做测试的时候可以打开，很有用</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.generate-ddl=false</span></span>
<span class="line"><span style="color:#6A737D;"># 和spring.jpa.database用法差不多，指定数据库的平台，默认会自己发现；一般不需要指定，database-platform指定的必须是org.hibernate.dialect.Dialect的子类，如mysql默认是用下面的platform</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.database-platform=org.hibernate.dialect.MySQLInnoDBDialect</span></span>
<span class="line"><span style="color:#6A737D;"># 是否在view层打开session，默认是true，其实大部分场景不需要打开，我们可以设置成false，</span></span>
<span class="line"><span style="color:#6A737D;"># 22课时我们再详细讲解</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.open-in-view=false</span></span>
<span class="line"><span style="color:#6A737D;"># 是否显示sql，当执行JPA的数据库操作的时候，默认是false，在本地开发的时候我们可以把这个打开，有助于分析sql是不是我们预期的</span></span>
<span class="line"><span style="color:#6A737D;"># 在生产环境的时候建议给这个设置成false，改由logging.level.org.hibernate.SQL=DEBUG代替，这样的话日志默认是基于logback输出的</span></span>
<span class="line"><span style="color:#6A737D;"># 而不是直接打印到控制台的，有利于增加traceid和线程ID等信息，便于分析</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.show-sql=true</span></span></code></pre></div><p>其中，spring.jpa.show-sql=true 输出的 sql 效果如下所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate: </span><span style="color:#F97583;">insert into</span><span style="color:#E1E4E8;"> user_info (create_time, create_user_id, last_modified_time, last_modified_user_id, </span><span style="color:#F97583;">version</span><span style="color:#E1E4E8;">, ages, email_address, last_name, telephone, id) </span><span style="color:#F97583;">values</span><span style="color:#E1E4E8;"> (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate: </span><span style="color:#D73A49;">insert into</span><span style="color:#24292E;"> user_info (create_time, create_user_id, last_modified_time, last_modified_user_id, </span><span style="color:#D73A49;">version</span><span style="color:#24292E;">, ages, email_address, last_name, telephone, id) </span><span style="color:#D73A49;">values</span><span style="color:#24292E;"> (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</span></span></code></pre></div><p>上面是孤立无援的 System.out.println 的效果，如果是在线上环境，多线程的情况下就不知道是哪个线程输出来的，而 logging.level.org.hibernate.SQL=DEBUG 输出的 sql 效果如下所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">08</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">54</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">275</span><span style="color:#E1E4E8;"> DEBUG </span><span style="color:#79B8FF;">6589</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">--- [nio-8087-exec-1] org.hibernate.SQL                        : insert into user_info (create_time, create_user_id, last_modified_time, last_modified_user_id, version, ages, email_address, last_name, telephone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">08</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">54</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">22</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">275</span><span style="color:#24292E;"> DEBUG </span><span style="color:#005CC5;">6589</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">--- [nio-8087-exec-1] org.hibernate.SQL                        : insert into user_info (create_time, create_user_id, last_modified_time, last_modified_user_id, version, ages, email_address, last_name, telephone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</span></span></code></pre></div><p>这样我们可以轻易知道线程 ID 和执行时间，甚至可以有 tranceID 和 spanID 进行日志跟踪，方便分析是哪个线程打印的。</p><p>我们了解完了 JpaProperties，下面再看另外一个关键类 HibernateJpaConfiguration，它也是 HibernateJpaAutoConfiguration 导入进来加载的。</p><h4 id="hibernatejpaconfiguration-分析" tabindex="-1">HibernateJpaConfiguration 分析 <a class="header-anchor" href="#hibernatejpaconfiguration-分析" aria-label="Permalink to &quot;HibernateJpaConfiguration 分析&quot;">​</a></h4><p>我们通过上述 HibernateJpaAutoConfiguration 里面的 @Import(HibernateJpaConfiguration.class)，打开 HibernateJpaConfiguration.class 看看是什么情况。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(HibernateProperties.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnSingleCandidate</span><span style="color:#E1E4E8;">(DataSource.class)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HibernateJpaConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaBaseConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">.......</span><span style="color:#6A737D;">//其他我们暂不关心的代码我们可以先省略}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(HibernateProperties.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnSingleCandidate</span><span style="color:#24292E;">(DataSource.class)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HibernateJpaConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaBaseConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">.......</span><span style="color:#6A737D;">//其他我们暂不关心的代码我们可以先省略}</span></span></code></pre></div><p>通过源码我们可以得到 Hibernate 在 JPA 中配置的三个重要线索，下面详细说明。</p><p><strong>第一个线索：HibernatePropertes 这个配置类对应的是 spring.jpa.hibernate 的配置。</strong></p><p>我们通过源码可以看得出来，@EnableConfigurationProperties(HibernateProperties.class) 启用了 HibernatePropertes 的配置类，如下图所示。</p>`,14),T=o(`<p>其中可以看到 application.properties 的配置项，如下所示。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 正如我们之前课时讲到的nameing的物理策略值有：org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy(默认)和org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.hibernate.naming.physical-strategy=</span></span>
<span class="line"><span style="color:#6A737D;"># ddl的生成策略，默认none；如果我们没有指定任何数据源的url，采用的是spring的集成数据源，也就是内存数据源H2的时候，默认值是create-drop；</span></span>
<span class="line"><span style="color:#6A737D;"># 所以你会发现当我们每次用H2的时候什么都没做，它就会自动帮我们创建表等，内存数据库和写测试用的时候，create-drop就非常方便了；不过，当我们生产数据库的时候一定要设置成none;</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.hibernate.ddl-auto=none</span></span>
<span class="line"><span style="color:#6A737D;"># 当我们的@Id配置成@GeneratedValue(strategy= GenerationType.AUTO)的时候是否采用hibernate的Id-generator-mappings(即会默认帮我们创建一张表hibernate_sequence来存储和生成ID)，默认是true</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.hibernate.use-new-id-generator-mappings=true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 正如我们之前课时讲到的nameing的物理策略值有：org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy(默认)和org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.hibernate.naming.physical-strategy=</span></span>
<span class="line"><span style="color:#6A737D;"># ddl的生成策略，默认none；如果我们没有指定任何数据源的url，采用的是spring的集成数据源，也就是内存数据源H2的时候，默认值是create-drop；</span></span>
<span class="line"><span style="color:#6A737D;"># 所以你会发现当我们每次用H2的时候什么都没做，它就会自动帮我们创建表等，内存数据库和写测试用的时候，create-drop就非常方便了；不过，当我们生产数据库的时候一定要设置成none;</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.hibernate.ddl-auto=none</span></span>
<span class="line"><span style="color:#6A737D;"># 当我们的@Id配置成@GeneratedValue(strategy= GenerationType.AUTO)的时候是否采用hibernate的Id-generator-mappings(即会默认帮我们创建一张表hibernate_sequence来存储和生成ID)，默认是true</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.hibernate.use-new-id-generator-mappings=true</span></span></code></pre></div><p><strong>第二个线索：通过源码我们还可以看得出来，HibernateJpaConfiguration 的父类 JpaBaseConfiguration 也会优先加载，此类就是 Spring Boot 加载 JPA 的核心逻辑。</strong></p><p>那么我们打开 JpaBaseConfiguration 类看一下源码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(JpaProperties.class)</span></span>
<span class="line"><span style="color:#6A737D;">//DataSourceInitializedPublisher用来进行数据源的初始化操作</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(DataSourceInitializedPublisher.Registrar.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaBaseConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanFactoryAware</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaBaseConfiguration</span><span style="color:#E1E4E8;">(DataSource </span><span style="color:#FFAB70;">dataSource</span><span style="color:#E1E4E8;">, JpaProperties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ObjectProvider&lt;</span><span style="color:#F97583;">JtaTransactionManager</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">jtaTransactionManager</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> properties;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//jtaTransactionManager赋值，正常情况下我们用不到，一般用来解决分布式事务的场景才会用到。</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.jtaTransactionManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jtaTransactionManager.</span><span style="color:#B392F0;">getIfAvailable</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//加载JPA的实现方式</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> JpaVendorAdapter </span><span style="color:#B392F0;">jpaVendorAdapter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//createJpaVendorAdapter是由子类HibernateJpaConfiguration实现的，创建JPA的实现类</span></span>
<span class="line"><span style="color:#E1E4E8;">   AbstractJpaVendorAdapter adapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createJpaVendorAdapter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   adapter.</span><span style="color:#B392F0;">setShowSql</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties.</span><span style="color:#B392F0;">isShowSql</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties.</span><span style="color:#B392F0;">getDatabase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      adapter.</span><span style="color:#B392F0;">setDatabase</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties.</span><span style="color:#B392F0;">getDatabase</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties.</span><span style="color:#B392F0;">getDatabasePlatform</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   adapter.</span><span style="color:#B392F0;">setDatabasePlatform</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties.</span><span style="color:#B392F0;">getDatabasePlatform</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   adapter.</span><span style="color:#B392F0;">setGenerateDdl</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.properties.</span><span style="color:#B392F0;">isGenerateDdl</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> adapter;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">.......其他我们暂时不关心的代码先省略}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(JpaProperties.class)</span></span>
<span class="line"><span style="color:#6A737D;">//DataSourceInitializedPublisher用来进行数据源的初始化操作</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(DataSourceInitializedPublisher.Registrar.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaBaseConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanFactoryAware</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaBaseConfiguration</span><span style="color:#24292E;">(DataSource </span><span style="color:#E36209;">dataSource</span><span style="color:#24292E;">, JpaProperties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      ObjectProvider&lt;</span><span style="color:#D73A49;">JtaTransactionManager</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">jtaTransactionManager</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataSource;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//jtaTransactionManager赋值，正常情况下我们用不到，一般用来解决分布式事务的场景才会用到。</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.jtaTransactionManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jtaTransactionManager.</span><span style="color:#6F42C1;">getIfAvailable</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//加载JPA的实现方式</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> JpaVendorAdapter </span><span style="color:#6F42C1;">jpaVendorAdapter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//createJpaVendorAdapter是由子类HibernateJpaConfiguration实现的，创建JPA的实现类</span></span>
<span class="line"><span style="color:#24292E;">   AbstractJpaVendorAdapter adapter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createJpaVendorAdapter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   adapter.</span><span style="color:#6F42C1;">setShowSql</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties.</span><span style="color:#6F42C1;">isShowSql</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties.</span><span style="color:#6F42C1;">getDatabase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      adapter.</span><span style="color:#6F42C1;">setDatabase</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties.</span><span style="color:#6F42C1;">getDatabase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties.</span><span style="color:#6F42C1;">getDatabasePlatform</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   adapter.</span><span style="color:#6F42C1;">setDatabasePlatform</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties.</span><span style="color:#6F42C1;">getDatabasePlatform</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   adapter.</span><span style="color:#6F42C1;">setGenerateDdl</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.properties.</span><span style="color:#6F42C1;">isGenerateDdl</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> adapter;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">.......其他我们暂时不关心的代码先省略}</span></span></code></pre></div><p>我们从上面的源码中可以看到，@Import(DataSourceInitializedPublisher.Registrar.class) 是用来初始化数据的；从构造函数中我们也可以看到其是否有用到 jtaTransactionManager（这个是分布式事务才会用到）；而 createJpaVendorAdapter() 是在 HibernateJpaConfiguration 里面实现的，这个要重点说一下，关键代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HibernateJpaConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaBaseConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//这里是hibernate和Jpa的结合，可以看到使用的HibernateJpaVendorAdapter作为JPA的实现者，感兴趣的话你可以打开HibernateJpaVendorAdapter里面设置一些断点，就会知道Spring boot是如何一步一步加载Hibernate的了；</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> AbstractJpaVendorAdapter </span><span style="color:#B392F0;">createJpaVendorAdapter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HibernateJpaVendorAdapter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">.......}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HibernateJpaConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaBaseConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//这里是hibernate和Jpa的结合，可以看到使用的HibernateJpaVendorAdapter作为JPA的实现者，感兴趣的话你可以打开HibernateJpaVendorAdapter里面设置一些断点，就会知道Spring boot是如何一步一步加载Hibernate的了；</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> AbstractJpaVendorAdapter </span><span style="color:#6F42C1;">createJpaVendorAdapter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HibernateJpaVendorAdapter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">.......}</span></span></code></pre></div><p>现在我们知道了 HibernateJpaVendorAdapter 的加载逻辑，而 HibernateJpaVendorAdapter 里面实现了 Hibernate 的初始化逻辑，我在这里不多说了，你过后可以仔细 debug 看一下，基本上就是 Hibernate 5.2 官方的加载逻辑。那么 Hibernate Jpa 对应的原始配置有哪些呢？</p><p><strong>第三个线索：spring.jpa.properties 配置项有哪些？</strong></p><p>我们如果接着在 HibernateJpaConfiguration 类里面 debug 查看关键代码的话，可以找到如下代码。</p>`,10),R=o(`<p>上图中的代码显示，JpaProperties 类里面的 properties 属性，也就是 spring.jpa.properties 的配置加载到了 vendorProperties（即 Hibernate 5.2）里面。而 properties 里面是 HashMap 结构，那么它都可以支持哪些配置呢？</p><p>我们打开 org.hibernate.cfg.AvailableSettings 可以看到 Hibernate 支持的配置项大概有 100 多个配置信息，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String JPA_PERSISTENCE_PROVIDER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.provider&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_TRANSACTION_TYPE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.transactionType&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_JTA_DATASOURCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.jtaDataSource&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_NON_JTA_DATASOURCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.nonJtaDataSource&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_JDBC_DRIVER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.jdbc.driver&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_JDBC_URL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.jdbc.url&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_JDBC_USER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.jdbc.user&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_JDBC_PASSWORD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.jdbc.password&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_SHARED_CACHE_MODE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.sharedCache.mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_SHARED_CACHE_RETRIEVE_MODE </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;javax.persistence.cache.retrieveMode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_SHARED_CACHE_STORE_MODE </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;javax.persistence.cache.storeMode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_VALIDATION_MODE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.validation.mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_VALIDATION_FACTORY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.validation.factory&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_PERSIST_VALIDATION_GROUP </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.validation.group.pre-persist&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_UPDATE_VALIDATION_GROUP </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.validation.group.pre-update&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_REMOVE_VALIDATION_GROUP </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.validation.group.pre-remove&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_LOCK_SCOPE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.lock.scope&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_LOCK_TIMEOUT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.lock.timeout&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CDI_BEAN_MANAGER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.bean.manager&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CLASSLOADERS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.classLoaders&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String TC_CLASSLOADER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.classLoader.tccl_lookup_precedence&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String APP_CLASSLOADER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.classLoader.application&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String RESOURCES_CLASSLOADER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.classLoader.resources&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HIBERNATE_CLASSLOADER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.classLoader.hibernate&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ENVIRONMENT_CLASSLOADER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.classLoader.environment&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_METAMODEL_GENERATION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.ejb.metamodel.generation&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_METAMODEL_POPULATION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.ejb.metamodel.population&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String STATIC_METAMODEL_POPULATION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa.static_metamodel.population&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CONNECTION_PROVIDER </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.connection.provider_class&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DRIVER </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.connection.driver_class&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String URL </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.connection.url&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USER </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.connection.username&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PASS </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.connection.password&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ISOLATION </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.connection.isolation&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String AUTOCOMMIT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection.autocommit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String POOL_SIZE </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.connection.pool_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DATASOURCE </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.connection.datasource&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CONNECTION_PROVIDER_DISABLES_AUTOCOMMIT</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection.provider_disables_autocommit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CONNECTION_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JNDI_CLASS </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.jndi.class&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JNDI_URL </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.jndi.url&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JNDI_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jndi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DIALECT </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.dialect&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DIALECT_RESOLVERS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.dialect_resolvers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String STORAGE_ENGINE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.dialect.storage_engine&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SCHEMA_MANAGEMENT_TOOL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.schema_management_tool&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String TRANSACTION_COORDINATOR_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.transaction.coordinator_class&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JTA_PLATFORM </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.transaction.jta.platform&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PREFER_USER_TRANSACTION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jta.prefer_user_transaction&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JTA_PLATFORM_RESOLVER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.transaction.jta.platform_resolver&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JTA_CACHE_TM </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jta.cacheTransactionManager&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JTA_CACHE_UT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jta.cacheUserTransaction&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JDBC_TYLE_PARAMS_ZERO_BASE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.sql.jdbc_style_params_base&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DEFAULT_CATALOG </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.default_catalog&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DEFAULT_SCHEMA </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.default_schema&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DEFAULT_CACHE_CONCURRENCY_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.default_cache_concurrency_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_NEW_ID_GENERATOR_MAPPINGS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.id.new_generator_mappings&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String FORCE_DISCRIMINATOR_IN_SELECTS_BY_DEFAULT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.discriminator.force_in_select&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String IMPLICIT_DISCRIMINATOR_COLUMNS_FOR_JOINED_SUBCLASS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.discriminator.implicit_for_joined&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String IGNORE_EXPLICIT_DISCRIMINATOR_COLUMNS_FOR_JOINED_SUBCLASS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.discriminator.ignore_explicit_for_joined&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_NATIONALIZED_CHARACTER_DATA </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.use_nationalized_character_data&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SCANNER_DEPRECATED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.ejb.resource_scanner&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SCANNER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.archive.scanner&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SCANNER_ARCHIVE_INTERPRETER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.archive.interpreter&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SCANNER_DISCOVERY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.archive.autodetection&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String IMPLICIT_NAMING_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.implicit_naming_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PHYSICAL_NAMING_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.physical_naming_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ARTIFACT_PROCESSING_ORDER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.mapping.precedence&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String KEYWORD_AUTO_QUOTING_ENABLED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.auto_quote_keyword&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String XML_MAPPING_ENABLED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.xml_mapping_enabled&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SESSION_FACTORY_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.session_factory_name&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SESSION_FACTORY_NAME_IS_JNDI </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.session_factory_name_is_jndi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SHOW_SQL </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.show_sql&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String FORMAT_SQL </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.format_sql&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_SQL_COMMENTS </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;hibernate.use_sql_comments&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String MAX_FETCH_DEPTH </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.max_fetch_depth&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DEFAULT_BATCH_FETCH_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.default_batch_fetch_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_STREAMS_FOR_BINARY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.use_streams_for_binary&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_SCROLLABLE_RESULTSET </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.use_scrollable_resultset&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_GET_GENERATED_KEYS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.use_get_generated_keys&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String STATEMENT_FETCH_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.fetch_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String STATEMENT_BATCH_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.batch_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String BATCH_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.factory_class&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String BATCH_VERSIONED_DATA </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.batch_versioned_data&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JDBC_TIME_ZONE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.time_zone&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String AUTO_CLOSE_SESSION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.transaction.auto_close_session&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String FLUSH_BEFORE_COMPLETION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.transaction.flush_before_completion&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ACQUIRE_CONNECTIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection.acquisition_mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String RELEASE_CONNECTIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection.release_mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CONNECTION_HANDLING </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection.handling_mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CURRENT_SESSION_CONTEXT_CLASS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.current_session_context_class&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_IDENTIFIER_ROLLBACK </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.use_identifier_rollback&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_REFLECTION_OPTIMIZER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.bytecode.use_reflection_optimizer&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ENFORCE_LEGACY_PROXY_CLASSNAMES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.bytecode.enforce_legacy_proxy_classnames&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ALLOW_ENHANCEMENT_AS_PROXY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.bytecode.allow_enhancement_as_proxy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_TRANSLATOR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.factory_class&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_SUBSTITUTIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.substitutions&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_STARTUP_CHECKING </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.startup_check&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CONVENTIONAL_JAVA_CONSTANTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.conventional_java_constants&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SQL_EXCEPTION_CONVERTER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.sql_exception_converter&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String WRAP_RESULT_SETS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.wrap_result_sets&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String NATIVE_EXCEPTION_HANDLING_51_COMPLIANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.native_exception_handling_51_compliance&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ORDER_UPDATES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.order_updates&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ORDER_INSERTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.order_inserts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_CALLBACKS_ENABLED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa_callbacks.enabled&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DEFAULT_NULL_ORDERING </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.order_by.default_null_ordering&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String LOG_JDBC_WARNINGS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.log.warnings&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String BEAN_CONTAINER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.resource.beans.container&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String C3P0_CONFIG_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.c3p0&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String C3P0_MAX_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.c3p0.max_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String C3P0_MIN_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.c3p0.min_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String C3P0_TIMEOUT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.c3p0.timeout&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String C3P0_MAX_STATEMENTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.c3p0.max_statements&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String C3P0_ACQUIRE_INCREMENT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.c3p0.acquire_increment&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String C3P0_IDLE_TEST_PERIOD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.c3p0.idle_test_period&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PROXOOL_CONFIG_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.proxool&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PROXOOL_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PROXOOL_CONFIG_PREFIX;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PROXOOL_XML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.proxool.xml&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PROXOOL_PROPERTIES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.proxool.properties&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PROXOOL_EXISTING_POOL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.proxool.existing_pool&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PROXOOL_POOL_ALIAS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.proxool.pool_alias&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CACHE_REGION_FACTORY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.region.factory_class&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CACHE_KEYS_FACTORY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.keys_factory&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CACHE_PROVIDER_CONFIG </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.provider_configuration_file_resource_path&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_SECOND_LEVEL_CACHE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.use_second_level_cache&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_QUERY_CACHE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.use_query_cache&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_CACHE_FACTORY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.query_cache_factory&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CACHE_REGION_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.region_prefix&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_MINIMAL_PUTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.use_minimal_puts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_STRUCTURED_CACHE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.use_structured_entries&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String AUTO_EVICT_COLLECTION_CACHE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.auto_evict_collection_cache&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_DIRECT_REFERENCE_CACHE_ENTRIES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.cache.use_reference_entries&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DEFAULT_ENTITY_MODE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.default_entity_mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String GLOBALLY_QUOTED_IDENTIFIERS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.globally_quoted_identifiers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String GLOBALLY_QUOTED_IDENTIFIERS_SKIP_COLUMN_DEFINITIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.globally_quoted_identifiers_skip_column_definitions&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CHECK_NULLABILITY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.check_nullability&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String BYTECODE_PROVIDER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.bytecode.provider&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPAQL_STRICT_COMPLIANCE</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.jpaql_strict_compliance&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PREFER_POOLED_VALUES_LO </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.id.optimizer.pooled.prefer_lo&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PREFERRED_POOLED_OPTIMIZER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.id.optimizer.pooled.preferred&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_PLAN_CACHE_MAX_STRONG_REFERENCES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.plan_cache_max_strong_references&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_PLAN_CACHE_MAX_SOFT_REFERENCES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.plan_cache_max_soft_references&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_PLAN_CACHE_MAX_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.plan_cache_max_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_PLAN_CACHE_PARAMETER_METADATA_MAX_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.plan_parameter_metadata_max_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String NON_CONTEXTUAL_LOB_CREATION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jdbc.lob.non_contextual_creation&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_AUTO </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.auto&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_DATABASE_ACTION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation.database.action&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_SCRIPTS_ACTION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation.scripts.action&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_CONNECTION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation-connection&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_DB_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.database-product-name&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_DB_MAJOR_VERSION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.database-major-version&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_DB_MINOR_VERSION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.database-minor-version&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_CREATE_SOURCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation.create-source&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_DROP_SOURCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation.drop-source&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_CREATE_SCRIPT_SOURCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation.create-script-source&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_DROP_SCRIPT_SOURCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation.drop-script-source&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_SCRIPTS_CREATE_TARGET </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation.scripts.create-target&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_SCRIPTS_DROP_TARGET </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.schema-generation.scripts.drop-target&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_IMPORT_FILES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.import_files&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_LOAD_SCRIPT_SOURCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.sql-load-script-source&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_IMPORT_FILES_SQL_EXTRACTOR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.import_files_sql_extractor&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_CREATE_NAMESPACES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.create_namespaces&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DLL_CREATE_NAMESPACES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2dll.create_namespaces&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_CREATE_SCHEMAS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javax.persistence.create-database-schemas&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DLL_CREATE_SCHEMAS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HBM2DDL_CREATE_SCHEMAS;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_FILTER_PROVIDER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.schema_filter_provider&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_JDBC_METADATA_EXTRACTOR_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.jdbc_metadata_extraction_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_DELIMITER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.delimiter&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_CHARSET_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.charset_name&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HBM2DDL_HALT_ON_ERROR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.halt_on_error&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JMX_ENABLED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jmx.enabled&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JMX_PLATFORM_SERVER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jmx.usePlatformServer&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JMX_AGENT_ID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jmx.agentId&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JMX_DOMAIN_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jmx.defaultDomain&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JMX_SF_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jmx.sessionFactoryName&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JMX_DEFAULT_OBJ_NAME_DOMAIN </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;org.hibernate.core&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CUSTOM_ENTITY_DIRTINESS_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.entity_dirtiness_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_ENTITY_WHERE_CLAUSE_FOR_COLLECTIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.use_entity_where_clause_for_collections&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String MULTI_TENANT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.multiTenancy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String MULTI_TENANT_CONNECTION_PROVIDER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.multi_tenant_connection_provider&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String MULTI_TENANT_IDENTIFIER_RESOLVER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.tenant_identifier_resolver&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String INTERCEPTOR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.session_factory.interceptor&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SESSION_SCOPED_INTERCEPTOR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.session_factory.session_scoped_interceptor&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String STATEMENT_INSPECTOR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.session_factory.statement_inspector&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ENABLE_LAZY_LOAD_NO_TRANS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.enable_lazy_load_no_trans&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String HQL_BULK_ID_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hql.bulk_id_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String BATCH_FETCH_STYLE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.batch_fetch_style&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DELAY_ENTITY_LOADER_CREATIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.loader.delay_entity_loader_creations&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JTA_TRACK_BY_THREAD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jta.track_by_thread&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JACC_CONTEXT_ID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jacc_context_id&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JACC_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jacc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JACC_ENABLED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jacc.enabled&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ENABLE_SYNONYMS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.synonyms&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String EXTRA_PHYSICAL_TABLE_TYPES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2ddl.extra_physical_table_types&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String DEPRECATED_EXTRA_PHYSICAL_TABLE_TYPES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.hbm2dll.extra_physical_table_types&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String UNIQUE_CONSTRAINT_SCHEMA_UPDATE_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.schema_update.unique_constraint_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String GENERATE_STATISTICS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.generate_statistics&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String LOG_SESSION_METRICS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.session.events.log&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String LOG_SLOW_QUERY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String AUTO_SESSION_EVENTS_LISTENER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.session.events.auto&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PROCEDURE_NULL_PARAM_PASSING </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.proc.param_null_passing&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CREATE_EMPTY_COMPOSITES_ENABLED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.create_empty_composites.enabled&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ALLOW_JTA_TRANSACTION_ACCESS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jta.allowTransactionAccess&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ALLOW_UPDATE_OUTSIDE_TRANSACTION </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.allow_update_outside_transaction&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String COLLECTION_JOIN_SUBQUERY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.collection_join_subquery&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String ALLOW_REFRESH_DETACHED_ENTITY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.allow_refresh_detached_entity&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String MERGE_ENTITY_COPY_OBSERVER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.event.merge.entity_copy_observer&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String USE_LEGACY_LIMIT_HANDLERS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.legacy_limit_handler&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String VALIDATE_QUERY_PARAMETERS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.validate_parameters&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String CRITERIA_LITERAL_HANDLING_MODE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.criteria.literal_handling_mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PREFER_GENERATOR_NAME_AS_DEFAULT_SEQUENCE_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.model.generator_name_as_sequence_name&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_TRANSACTION_COMPLIANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa.compliance.transaction&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_QUERY_COMPLIANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa.compliance.query&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_LIST_COMPLIANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa.compliance.list&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_CLOSED_COMPLIANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa.compliance.closed&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_PROXY_COMPLIANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa.compliance.proxy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_CACHING_COMPLIANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa.compliance.caching&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String JPA_ID_GENERATOR_GLOBAL_SCOPE_COMPLIANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.jpa.compliance.global_id_generators&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String TABLE_GENERATOR_STORE_LAST_USED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.id.generator.stored_last_used&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String FAIL_ON_PAGINATION_OVER_COLLECTION_FETCH </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.fail_on_pagination_over_collection_fetch&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String IMMUTABLE_ENTITY_UPDATE_QUERY_HANDLING_MODE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.immutable_entity_update_query_handling_mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String IN_CLAUSE_PARAMETER_PADDING </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.in_clause_parameter_padding&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String QUERY_STATISTICS_MAX_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.statistics.query_max_size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String SEQUENCE_INCREMENT_SIZE_MISMATCH_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.id.sequence.increment_size_mismatch_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String OMIT_JOIN_OF_SUPERCLASS_TABLES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.query.omit_join_of_superclass_tables&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String JPA_PERSISTENCE_PROVIDER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.provider&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_TRANSACTION_TYPE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.transactionType&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_JTA_DATASOURCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.jtaDataSource&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_NON_JTA_DATASOURCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.nonJtaDataSource&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_JDBC_DRIVER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.jdbc.driver&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_JDBC_URL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.jdbc.url&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_JDBC_USER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.jdbc.user&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_JDBC_PASSWORD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.jdbc.password&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_SHARED_CACHE_MODE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.sharedCache.mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_SHARED_CACHE_RETRIEVE_MODE </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;javax.persistence.cache.retrieveMode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_SHARED_CACHE_STORE_MODE </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;javax.persistence.cache.storeMode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_VALIDATION_MODE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.validation.mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_VALIDATION_FACTORY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.validation.factory&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_PERSIST_VALIDATION_GROUP </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.validation.group.pre-persist&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_UPDATE_VALIDATION_GROUP </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.validation.group.pre-update&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_REMOVE_VALIDATION_GROUP </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.validation.group.pre-remove&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_LOCK_SCOPE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.lock.scope&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_LOCK_TIMEOUT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.lock.timeout&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CDI_BEAN_MANAGER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.bean.manager&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CLASSLOADERS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.classLoaders&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String TC_CLASSLOADER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.classLoader.tccl_lookup_precedence&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String APP_CLASSLOADER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.classLoader.application&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String RESOURCES_CLASSLOADER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.classLoader.resources&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HIBERNATE_CLASSLOADER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.classLoader.hibernate&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ENVIRONMENT_CLASSLOADER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.classLoader.environment&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_METAMODEL_GENERATION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.ejb.metamodel.generation&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_METAMODEL_POPULATION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.ejb.metamodel.population&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String STATIC_METAMODEL_POPULATION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa.static_metamodel.population&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CONNECTION_PROVIDER </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.connection.provider_class&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DRIVER </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.connection.driver_class&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String URL </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.connection.url&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USER </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.connection.username&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PASS </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.connection.password&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ISOLATION </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.connection.isolation&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String AUTOCOMMIT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection.autocommit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String POOL_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.connection.pool_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DATASOURCE </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.connection.datasource&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CONNECTION_PROVIDER_DISABLES_AUTOCOMMIT</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection.provider_disables_autocommit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CONNECTION_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JNDI_CLASS </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.jndi.class&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JNDI_URL </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.jndi.url&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JNDI_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jndi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DIALECT </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.dialect&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DIALECT_RESOLVERS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.dialect_resolvers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String STORAGE_ENGINE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.dialect.storage_engine&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SCHEMA_MANAGEMENT_TOOL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.schema_management_tool&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String TRANSACTION_COORDINATOR_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.transaction.coordinator_class&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JTA_PLATFORM </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.transaction.jta.platform&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PREFER_USER_TRANSACTION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jta.prefer_user_transaction&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JTA_PLATFORM_RESOLVER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.transaction.jta.platform_resolver&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JTA_CACHE_TM </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jta.cacheTransactionManager&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JTA_CACHE_UT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jta.cacheUserTransaction&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JDBC_TYLE_PARAMS_ZERO_BASE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.sql.jdbc_style_params_base&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DEFAULT_CATALOG </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.default_catalog&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DEFAULT_SCHEMA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.default_schema&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DEFAULT_CACHE_CONCURRENCY_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.default_cache_concurrency_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_NEW_ID_GENERATOR_MAPPINGS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.id.new_generator_mappings&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String FORCE_DISCRIMINATOR_IN_SELECTS_BY_DEFAULT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.discriminator.force_in_select&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String IMPLICIT_DISCRIMINATOR_COLUMNS_FOR_JOINED_SUBCLASS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.discriminator.implicit_for_joined&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String IGNORE_EXPLICIT_DISCRIMINATOR_COLUMNS_FOR_JOINED_SUBCLASS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.discriminator.ignore_explicit_for_joined&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_NATIONALIZED_CHARACTER_DATA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.use_nationalized_character_data&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SCANNER_DEPRECATED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.ejb.resource_scanner&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SCANNER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.archive.scanner&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SCANNER_ARCHIVE_INTERPRETER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.archive.interpreter&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SCANNER_DISCOVERY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.archive.autodetection&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String IMPLICIT_NAMING_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.implicit_naming_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PHYSICAL_NAMING_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.physical_naming_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ARTIFACT_PROCESSING_ORDER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.mapping.precedence&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String KEYWORD_AUTO_QUOTING_ENABLED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.auto_quote_keyword&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String XML_MAPPING_ENABLED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.xml_mapping_enabled&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SESSION_FACTORY_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.session_factory_name&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SESSION_FACTORY_NAME_IS_JNDI </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.session_factory_name_is_jndi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SHOW_SQL </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.show_sql&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String FORMAT_SQL </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.format_sql&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_SQL_COMMENTS </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hibernate.use_sql_comments&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String MAX_FETCH_DEPTH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.max_fetch_depth&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DEFAULT_BATCH_FETCH_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.default_batch_fetch_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_STREAMS_FOR_BINARY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.use_streams_for_binary&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_SCROLLABLE_RESULTSET </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.use_scrollable_resultset&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_GET_GENERATED_KEYS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.use_get_generated_keys&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String STATEMENT_FETCH_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.fetch_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String STATEMENT_BATCH_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.batch_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String BATCH_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.factory_class&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String BATCH_VERSIONED_DATA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.batch_versioned_data&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JDBC_TIME_ZONE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.time_zone&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String AUTO_CLOSE_SESSION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.transaction.auto_close_session&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String FLUSH_BEFORE_COMPLETION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.transaction.flush_before_completion&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ACQUIRE_CONNECTIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection.acquisition_mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String RELEASE_CONNECTIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection.release_mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CONNECTION_HANDLING </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection.handling_mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CURRENT_SESSION_CONTEXT_CLASS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.current_session_context_class&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_IDENTIFIER_ROLLBACK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.use_identifier_rollback&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_REFLECTION_OPTIMIZER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.bytecode.use_reflection_optimizer&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ENFORCE_LEGACY_PROXY_CLASSNAMES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.bytecode.enforce_legacy_proxy_classnames&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ALLOW_ENHANCEMENT_AS_PROXY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.bytecode.allow_enhancement_as_proxy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_TRANSLATOR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.factory_class&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_SUBSTITUTIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.substitutions&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_STARTUP_CHECKING </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.startup_check&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CONVENTIONAL_JAVA_CONSTANTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.conventional_java_constants&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SQL_EXCEPTION_CONVERTER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.sql_exception_converter&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String WRAP_RESULT_SETS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.wrap_result_sets&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String NATIVE_EXCEPTION_HANDLING_51_COMPLIANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.native_exception_handling_51_compliance&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ORDER_UPDATES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.order_updates&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ORDER_INSERTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.order_inserts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_CALLBACKS_ENABLED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa_callbacks.enabled&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DEFAULT_NULL_ORDERING </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.order_by.default_null_ordering&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String LOG_JDBC_WARNINGS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;hibernate.jdbc.log.warnings&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String BEAN_CONTAINER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.resource.beans.container&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String C3P0_CONFIG_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.c3p0&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String C3P0_MAX_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.c3p0.max_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String C3P0_MIN_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.c3p0.min_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String C3P0_TIMEOUT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.c3p0.timeout&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String C3P0_MAX_STATEMENTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.c3p0.max_statements&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String C3P0_ACQUIRE_INCREMENT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.c3p0.acquire_increment&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String C3P0_IDLE_TEST_PERIOD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.c3p0.idle_test_period&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PROXOOL_CONFIG_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.proxool&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PROXOOL_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PROXOOL_CONFIG_PREFIX;</span></span>
<span class="line"><span style="color:#24292E;">String PROXOOL_XML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.proxool.xml&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PROXOOL_PROPERTIES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.proxool.properties&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PROXOOL_EXISTING_POOL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.proxool.existing_pool&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PROXOOL_POOL_ALIAS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.proxool.pool_alias&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CACHE_REGION_FACTORY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.region.factory_class&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CACHE_KEYS_FACTORY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.keys_factory&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CACHE_PROVIDER_CONFIG </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.provider_configuration_file_resource_path&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_SECOND_LEVEL_CACHE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.use_second_level_cache&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_QUERY_CACHE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.use_query_cache&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_CACHE_FACTORY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.query_cache_factory&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CACHE_REGION_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.region_prefix&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_MINIMAL_PUTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.use_minimal_puts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_STRUCTURED_CACHE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.use_structured_entries&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String AUTO_EVICT_COLLECTION_CACHE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.auto_evict_collection_cache&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_DIRECT_REFERENCE_CACHE_ENTRIES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.cache.use_reference_entries&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DEFAULT_ENTITY_MODE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.default_entity_mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String GLOBALLY_QUOTED_IDENTIFIERS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.globally_quoted_identifiers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String GLOBALLY_QUOTED_IDENTIFIERS_SKIP_COLUMN_DEFINITIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.globally_quoted_identifiers_skip_column_definitions&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CHECK_NULLABILITY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.check_nullability&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String BYTECODE_PROVIDER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.bytecode.provider&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPAQL_STRICT_COMPLIANCE</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.jpaql_strict_compliance&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PREFER_POOLED_VALUES_LO </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.id.optimizer.pooled.prefer_lo&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PREFERRED_POOLED_OPTIMIZER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.id.optimizer.pooled.preferred&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_PLAN_CACHE_MAX_STRONG_REFERENCES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.plan_cache_max_strong_references&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_PLAN_CACHE_MAX_SOFT_REFERENCES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.plan_cache_max_soft_references&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_PLAN_CACHE_MAX_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.plan_cache_max_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_PLAN_CACHE_PARAMETER_METADATA_MAX_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.plan_parameter_metadata_max_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String NON_CONTEXTUAL_LOB_CREATION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jdbc.lob.non_contextual_creation&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_AUTO </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.auto&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_DATABASE_ACTION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation.database.action&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_SCRIPTS_ACTION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation.scripts.action&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_CONNECTION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation-connection&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_DB_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.database-product-name&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_DB_MAJOR_VERSION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.database-major-version&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_DB_MINOR_VERSION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.database-minor-version&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_CREATE_SOURCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation.create-source&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_DROP_SOURCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation.drop-source&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_CREATE_SCRIPT_SOURCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation.create-script-source&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_DROP_SCRIPT_SOURCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation.drop-script-source&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_SCRIPTS_CREATE_TARGET </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation.scripts.create-target&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_SCRIPTS_DROP_TARGET </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.schema-generation.scripts.drop-target&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_IMPORT_FILES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.import_files&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_LOAD_SCRIPT_SOURCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.sql-load-script-source&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_IMPORT_FILES_SQL_EXTRACTOR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.import_files_sql_extractor&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_CREATE_NAMESPACES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.create_namespaces&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DLL_CREATE_NAMESPACES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2dll.create_namespaces&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_CREATE_SCHEMAS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javax.persistence.create-database-schemas&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DLL_CREATE_SCHEMAS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HBM2DDL_CREATE_SCHEMAS;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_FILTER_PROVIDER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.schema_filter_provider&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_JDBC_METADATA_EXTRACTOR_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.jdbc_metadata_extraction_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_DELIMITER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.delimiter&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_CHARSET_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.charset_name&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HBM2DDL_HALT_ON_ERROR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.halt_on_error&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JMX_ENABLED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jmx.enabled&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JMX_PLATFORM_SERVER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jmx.usePlatformServer&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JMX_AGENT_ID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jmx.agentId&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JMX_DOMAIN_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jmx.defaultDomain&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JMX_SF_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jmx.sessionFactoryName&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JMX_DEFAULT_OBJ_NAME_DOMAIN </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org.hibernate.core&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CUSTOM_ENTITY_DIRTINESS_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.entity_dirtiness_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_ENTITY_WHERE_CLAUSE_FOR_COLLECTIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.use_entity_where_clause_for_collections&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String MULTI_TENANT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.multiTenancy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String MULTI_TENANT_CONNECTION_PROVIDER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.multi_tenant_connection_provider&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String MULTI_TENANT_IDENTIFIER_RESOLVER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.tenant_identifier_resolver&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String INTERCEPTOR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.session_factory.interceptor&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SESSION_SCOPED_INTERCEPTOR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.session_factory.session_scoped_interceptor&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String STATEMENT_INSPECTOR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.session_factory.statement_inspector&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ENABLE_LAZY_LOAD_NO_TRANS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.enable_lazy_load_no_trans&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String HQL_BULK_ID_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hql.bulk_id_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String BATCH_FETCH_STYLE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.batch_fetch_style&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DELAY_ENTITY_LOADER_CREATIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.loader.delay_entity_loader_creations&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JTA_TRACK_BY_THREAD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jta.track_by_thread&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JACC_CONTEXT_ID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jacc_context_id&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JACC_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jacc&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JACC_ENABLED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jacc.enabled&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ENABLE_SYNONYMS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.synonyms&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String EXTRA_PHYSICAL_TABLE_TYPES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2ddl.extra_physical_table_types&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String DEPRECATED_EXTRA_PHYSICAL_TABLE_TYPES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.hbm2dll.extra_physical_table_types&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String UNIQUE_CONSTRAINT_SCHEMA_UPDATE_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.schema_update.unique_constraint_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String GENERATE_STATISTICS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.generate_statistics&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String LOG_SESSION_METRICS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.session.events.log&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String LOG_SLOW_QUERY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String AUTO_SESSION_EVENTS_LISTENER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.session.events.auto&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PROCEDURE_NULL_PARAM_PASSING </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.proc.param_null_passing&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CREATE_EMPTY_COMPOSITES_ENABLED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.create_empty_composites.enabled&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ALLOW_JTA_TRANSACTION_ACCESS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jta.allowTransactionAccess&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ALLOW_UPDATE_OUTSIDE_TRANSACTION </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.allow_update_outside_transaction&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String COLLECTION_JOIN_SUBQUERY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.collection_join_subquery&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ALLOW_REFRESH_DETACHED_ENTITY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.allow_refresh_detached_entity&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String MERGE_ENTITY_COPY_OBSERVER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.event.merge.entity_copy_observer&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String USE_LEGACY_LIMIT_HANDLERS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.legacy_limit_handler&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String VALIDATE_QUERY_PARAMETERS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.validate_parameters&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String CRITERIA_LITERAL_HANDLING_MODE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.criteria.literal_handling_mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PREFER_GENERATOR_NAME_AS_DEFAULT_SEQUENCE_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.model.generator_name_as_sequence_name&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_TRANSACTION_COMPLIANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa.compliance.transaction&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_QUERY_COMPLIANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa.compliance.query&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_LIST_COMPLIANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa.compliance.list&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_CLOSED_COMPLIANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa.compliance.closed&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_PROXY_COMPLIANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa.compliance.proxy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_CACHING_COMPLIANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa.compliance.caching&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String JPA_ID_GENERATOR_GLOBAL_SCOPE_COMPLIANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.jpa.compliance.global_id_generators&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String TABLE_GENERATOR_STORE_LAST_USED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.id.generator.stored_last_used&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String FAIL_ON_PAGINATION_OVER_COLLECTION_FETCH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.fail_on_pagination_over_collection_fetch&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String IMMUTABLE_ENTITY_UPDATE_QUERY_HANDLING_MODE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.immutable_entity_update_query_handling_mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String IN_CLAUSE_PARAMETER_PADDING </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.in_clause_parameter_padding&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String QUERY_STATISTICS_MAX_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.statistics.query_max_size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String SEQUENCE_INCREMENT_SIZE_MISMATCH_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.id.sequence.increment_size_mismatch_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String OMIT_JOIN_OF_SUPERCLASS_TABLES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.query.omit_join_of_superclass_tables&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>我担心有些同学懒得去看源码，所以就都贴到这里来了，你可以大概了解一下，做到心中有数。</p><p>那么接下来我们看看该怎么使用 AvailableSettings 里面的配置呢？</p><p><strong>AvailableSettings 里面的配置项的用法</strong></p><p>我们只需要将 AvailableSettings 变量的值放到 spring.jpa.properties 里面即可，如下这些是我们常用的。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">##开启hibernate statistics的信息，如session、连接等日志：</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.properties.hibernate.generate_statistics=true</span></span>
<span class="line"><span style="color:#6A737D;"># 格式化 SQL</span></span>
<span class="line"><span style="color:#85E89D;">spring.jpa.properties.hibernate.format_sql</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#6A737D;"># 显示 SQL</span></span>
<span class="line"><span style="color:#85E89D;">spring.jpa.properties.hibernate.show_sql</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#6A737D;"># 添加 HQL 相关的注释信息</span></span>
<span class="line"><span style="color:#85E89D;">spring.jpa.properties.hibernate.use_sql_comments</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#6A737D;"># hbm2ddl的策略 validate, update, create, create-drop, none，建议配置成validate，</span></span>
<span class="line"><span style="color:#6A737D;"># 这样在我们启动项目的时候就知道生产数据库的表结构是否正确的了，而不用等到运行期间才发现问题。</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.properties.hibernate.hbm2ddl.auto=validate</span></span>
<span class="line"><span style="color:#6A737D;"># 关联关系的时候取数据的深度，默认是3层，我们可以设置成2级，防止其他开发乱用，提高sql性能</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.properties.hibernate.max_fetch_depth=2</span></span>
<span class="line"><span style="color:#6A737D;"># 批量fetch大小默认 -1</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.properties.hibernate.default_batch_fetch_size= 100</span></span>
<span class="line"><span style="color:#6A737D;"># 事务完成之前是否进行flush操作，即同步到db里面去，默认是true</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.properties.hibernate.transaction.flush_before_completion=true</span></span>
<span class="line"><span style="color:#6A737D;"># 事务结束之后是否关闭session，默认false</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.properties.hibernate.transaction.auto_close_session=false</span></span>
<span class="line"><span style="color:#6A737D;"># 有的时候不只要批量查询，也会批量更新，默认batch size是15，我们可以根据实际情况自由调整，可以提高批量更新的效率；</span></span>
<span class="line"><span style="color:#9ECBFF;">spring.jpa.properties.hibernate.jdbc.batch_size=100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">##开启hibernate statistics的信息，如session、连接等日志：</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.properties.hibernate.generate_statistics=true</span></span>
<span class="line"><span style="color:#6A737D;"># 格式化 SQL</span></span>
<span class="line"><span style="color:#22863A;">spring.jpa.properties.hibernate.format_sql</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#6A737D;"># 显示 SQL</span></span>
<span class="line"><span style="color:#22863A;">spring.jpa.properties.hibernate.show_sql</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#6A737D;"># 添加 HQL 相关的注释信息</span></span>
<span class="line"><span style="color:#22863A;">spring.jpa.properties.hibernate.use_sql_comments</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#6A737D;"># hbm2ddl的策略 validate, update, create, create-drop, none，建议配置成validate，</span></span>
<span class="line"><span style="color:#6A737D;"># 这样在我们启动项目的时候就知道生产数据库的表结构是否正确的了，而不用等到运行期间才发现问题。</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.properties.hibernate.hbm2ddl.auto=validate</span></span>
<span class="line"><span style="color:#6A737D;"># 关联关系的时候取数据的深度，默认是3层，我们可以设置成2级，防止其他开发乱用，提高sql性能</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.properties.hibernate.max_fetch_depth=2</span></span>
<span class="line"><span style="color:#6A737D;"># 批量fetch大小默认 -1</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.properties.hibernate.default_batch_fetch_size= 100</span></span>
<span class="line"><span style="color:#6A737D;"># 事务完成之前是否进行flush操作，即同步到db里面去，默认是true</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.properties.hibernate.transaction.flush_before_completion=true</span></span>
<span class="line"><span style="color:#6A737D;"># 事务结束之后是否关闭session，默认false</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.properties.hibernate.transaction.auto_close_session=false</span></span>
<span class="line"><span style="color:#6A737D;"># 有的时候不只要批量查询，也会批量更新，默认batch size是15，我们可以根据实际情况自由调整，可以提高批量更新的效率；</span></span>
<span class="line"><span style="color:#032F62;">spring.jpa.properties.hibernate.jdbc.batch_size=100</span></span></code></pre></div><p>其他的配置不经常用，我们就不需要关心了，你只知道在哪里看就好，实际用到时，发现哪些是我没举例的，你直接看源码会非常好理解的。</p><p>这里我为什么要特别强调这个 Hibernate 的配置类呢？因为有的时候我们遇到问题会去网上搜索解决方案，发现别人给的配置可能不对，那么你就可以想到从这个源码中进行查看，并找到解决办法。</p><p>本讲我们只关心了 JpaVendorAdapter 和 properties 的创建逻辑，我们前面在讲数据源的时候也说过这个类，里面有我们关心的 PlatformTransactionManager transactionManager 和 LocalContainerEntityManagerFactoryBean entityManagerFactory 的创建逻辑，而 JpaBaseConfiguration 这个类实现的逻辑还有很多，我在第 22 讲介绍 Session 的配置 open-in-view 的时候还会再详细介绍这个类。</p><p>那么说了这么多加载的类，它们之间是什么关系呢？我们通过一个图来知晓一下。</p><h4 id="自动加载过程类之间的关系图" tabindex="-1">自动加载过程类之间的关系图 <a class="header-anchor" href="#自动加载过程类之间的关系图" aria-label="Permalink to &quot;自动加载过程类之间的关系图&quot;">​</a></h4>`,13),O=o('<p>从上图中，我们可以看出以下几点内容。</p><ol><li><p>JpaBaseConfiguration 是 Jpa 和 Hibernate 被加载的基石，里面通过 BeanFactoryAware 的接口的 bean 加载生命周期也实现了一些逻辑。</p></li><li><p>HibernateJpaConfiguration 是 JpaBaseConfiguration 的子类，覆盖了一些父类里面的配置相关的特殊逻辑，并且里面引用了 JpaPropeties 和 HibernateProperties 的配置项。</p></li><li><p>HibernateJpaAutoConfiguration 是 Spring Boot 自动加载 HibernateJpaConfiguration 的桥梁，起到了 importHibernateJpaConfiguration 和加载 HibernateJpaConfiguration 的作用。</p></li><li><p>JpaRepositoriesAutoConfiguration 和 HibernateJpaAutoConfiguration、DataSourceAutoConfiguration 分别加载 JpaRepositories 的逻辑和 HibernateJPA、数据源，都是被 spring.factories 自动装配进入到 Spring Boot 里面的，而三者之间有加载的先后顺序。</p></li><li><p>上图的 UML 还展示了几个 Configuration 类的加载顺序和依赖关系，顺序是从上到下进行加载的，其中 DataSourceAutoConfiguration 最先加载、HibernateJpaAutoConfiguration 第二顺序加载、JpaRepositoriesAutoConfiguration 最后加载。</p></li></ol><p>我们了解完了 Hibernate 5 在 Spring Boot 里面的加载过程，那么来看下 JpaRepositoriesAutoConfiguration 的主要作用有哪些。</p><h3 id="spring-data-jpa-repositories-bootstrap-mode" tabindex="-1">Spring Data JPA Repositories Bootstrap Mode <a class="header-anchor" href="#spring-data-jpa-repositories-bootstrap-mode" aria-label="Permalink to &quot;Spring Data JPA Repositories Bootstrap Mode&quot;">​</a></h3><p>我们通过上面分享的整个加载过程可以发现，DataSourceAutoConfiguration 完成了数据源的加载，HibernateJpaAutoConfiguration 完成了 Hibernate 的加载过程，而 JpaRepositoriesAutoConfiguration 要做的就是解决我们之前定义的 Repositories 相关的实体和接口的加载初始化过程，这是 Spring Data JPA 的主要实现逻辑，和 Hiberante、数据源没什么关系了。</p><p>我们可以通过 JpaRepositoriesAutoConfiguration 的源码发现其主要职责和实现方式，利用异步线程池初始化 repositories，关键源码如下：</p>',6),I=o('<p>而其中加载 repositories 有三种方式，即 spring.data.jpa.repositories.bootstrap-mode 的三个值，分别为 deferred、 lazy、 default，下面详细说明。</p><ul><li><p>deferred：是默认值，表示在启动的时候会进行数据库字段的检查，而 repositories 相关的实例的初始化是 lazy 模式，也就是在第一次用到 repositories 实例的时候再进行初始化。这个比较适合用在测试环境和生产环境中，因为测试不可能覆盖所有场景，万一谁多加个字段或者少一个字段，这样在启动的阶段就可以及时发现问题，不能等进行到生产环境才暴露。</p></li><li><p>lazy：表示启动阶段不会进行数据库字段的检查，也不会初始化 repositories 相关的实例，而是在第一次用到 repositories 实例的时候再进行初始化。这个比较适合用在开发的阶段，可以加快应用的启动速度。如果生产环境中，我们为了提高业务高峰期间水平来扩展应用的启动速度，也可以采用这种模式。</p></li><li><p>default：默认加载方式，但从 Spring Boot 2.0 之后就不是默认值了，表示立即验证、立即初始化 repositories 实例，这种方式启动的速度最慢，但是最保险，运行期间的请求最快，因为避免了第一次请求初始化 repositories 实例的过程。</p></li></ul><p>我们通过在 application.properties 里面修改这一行代码，来测试一下 lazy 的加载方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.data.jpa.repositories.bootstrap</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">mode</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">lazy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.data.jpa.repositories.bootstrap</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">mode</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">lazy</span></span></code></pre></div><p>然后启动我们的项目，就会发现在 tomcat 容器加载完之后，没有用到 UserInfoRepository 之前，这个 UserInfoRepository 是不会进行初始化的。而当我们发一个请求用到了 UserInfoRepository，就进行了初始化。</p><p>我们通过日志也可以看到，启动的线程和初始化的线程是不一样的，而初始化的线程是 NIO 线程的名字，表示 request 的 http 线程池里面的线程，具体如下图所示。</p>',6),N=o(`<p>我们在分析 Hibernate 的加载方式的时候，会发现日志的重要性，那么都有哪些日志供我们观察呢？如何开启？</p><h3 id="debug-时候-日志的配置" tabindex="-1">Debug 时候，日志的配置 <a class="header-anchor" href="#debug-时候-日志的配置" aria-label="Permalink to &quot;Debug 时候，日志的配置&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">### 日志级别的灵活运用</span></span>
<span class="line"><span style="color:#6A737D;">## hibernate相关</span></span>
<span class="line"><span style="color:#6A737D;"># 显示sql的执行日志，如果开了这个,show_sql就可以不用了</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.SQL=debug</span></span>
<span class="line"><span style="color:#6A737D;"># hibernate id的生成日志</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.id=debug</span></span>
<span class="line"><span style="color:#6A737D;"># hibernate所有的操作都是PreparedStatement，把sql的执行参数显示出来</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE</span></span>
<span class="line"><span style="color:#6A737D;"># sql执行完提取的返回值</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.type.descriptor.sql=trace</span></span>
<span class="line"><span style="color:#6A737D;"># 请求参数</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.type=debug</span></span>
<span class="line"><span style="color:#6A737D;"># 缓存相关</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.cache=debug</span></span>
<span class="line"><span style="color:#6A737D;"># 统计hibernate的执行状态</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.stat=debug</span></span>
<span class="line"><span style="color:#6A737D;"># 查看所有的缓存操作</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.event.internal=trace</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.springframework.cache=trace</span></span>
<span class="line"><span style="color:#6A737D;"># hibernate 的监控指标日志</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.engine.internal.StatisticalLoggingSessionEventListener=DEBUG</span></span>
<span class="line"><span style="color:#6A737D;">### 连接池的相关日志</span></span>
<span class="line"><span style="color:#6A737D;">## hikari连接池的状态日志，以及连接池是否完好 #连接池的日志效果：HikariCPPool - Pool stats (total=20, active=0, idle=20, waiting=0)</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.com.zaxxer.hikari=TRACE</span></span>
<span class="line"><span style="color:#6A737D;">#开启 debug可以看到 AvailableSettings里面的默认配置的值都有哪些，会输出类似下面的日志格式</span></span>
<span class="line"><span style="color:#6A737D;"># org.hibernate.cfg.Settings               : Statistics: enabled</span></span>
<span class="line"><span style="color:#6A737D;"># org.hibernate.cfg.Settings               : Default batch fetch size: -1</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.cfg=debug</span></span>
<span class="line"><span style="color:#6A737D;">#hikari数据的配置项日志</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.com.zaxxer.hikari.HikariConfig=TRACE</span></span>
<span class="line"><span style="color:#6A737D;">### 查看事务相关的日志，事务获取，释放日志</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.springframework.orm.jpa=DEBUG</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.springframework.transaction=TRACE</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=DEBUG</span></span>
<span class="line"><span style="color:#6A737D;">### 分析connect 以及 orm和 data的处理过程更全的日志</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.springframework.data=trace</span></span>
<span class="line"><span style="color:#9ECBFF;">logging.level.org.springframework.orm=trace</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">### 日志级别的灵活运用</span></span>
<span class="line"><span style="color:#6A737D;">## hibernate相关</span></span>
<span class="line"><span style="color:#6A737D;"># 显示sql的执行日志，如果开了这个,show_sql就可以不用了</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.SQL=debug</span></span>
<span class="line"><span style="color:#6A737D;"># hibernate id的生成日志</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.id=debug</span></span>
<span class="line"><span style="color:#6A737D;"># hibernate所有的操作都是PreparedStatement，把sql的执行参数显示出来</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE</span></span>
<span class="line"><span style="color:#6A737D;"># sql执行完提取的返回值</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.type.descriptor.sql=trace</span></span>
<span class="line"><span style="color:#6A737D;"># 请求参数</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.type=debug</span></span>
<span class="line"><span style="color:#6A737D;"># 缓存相关</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.cache=debug</span></span>
<span class="line"><span style="color:#6A737D;"># 统计hibernate的执行状态</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.stat=debug</span></span>
<span class="line"><span style="color:#6A737D;"># 查看所有的缓存操作</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.event.internal=trace</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.springframework.cache=trace</span></span>
<span class="line"><span style="color:#6A737D;"># hibernate 的监控指标日志</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.engine.internal.StatisticalLoggingSessionEventListener=DEBUG</span></span>
<span class="line"><span style="color:#6A737D;">### 连接池的相关日志</span></span>
<span class="line"><span style="color:#6A737D;">## hikari连接池的状态日志，以及连接池是否完好 #连接池的日志效果：HikariCPPool - Pool stats (total=20, active=0, idle=20, waiting=0)</span></span>
<span class="line"><span style="color:#032F62;">logging.level.com.zaxxer.hikari=TRACE</span></span>
<span class="line"><span style="color:#6A737D;">#开启 debug可以看到 AvailableSettings里面的默认配置的值都有哪些，会输出类似下面的日志格式</span></span>
<span class="line"><span style="color:#6A737D;"># org.hibernate.cfg.Settings               : Statistics: enabled</span></span>
<span class="line"><span style="color:#6A737D;"># org.hibernate.cfg.Settings               : Default batch fetch size: -1</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.cfg=debug</span></span>
<span class="line"><span style="color:#6A737D;">#hikari数据的配置项日志</span></span>
<span class="line"><span style="color:#032F62;">logging.level.com.zaxxer.hikari.HikariConfig=TRACE</span></span>
<span class="line"><span style="color:#6A737D;">### 查看事务相关的日志，事务获取，释放日志</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.springframework.orm.jpa=DEBUG</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.springframework.transaction=TRACE</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=DEBUG</span></span>
<span class="line"><span style="color:#6A737D;">### 分析connect 以及 orm和 data的处理过程更全的日志</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.springframework.data=trace</span></span>
<span class="line"><span style="color:#032F62;">logging.level.org.springframework.orm=trace</span></span></code></pre></div><p>上面是我在分析复杂问题和原理的时候常用的日志配置项目，这里给你提供一个技巧，当我们分析一个问题的时候，如果不知道日志具体在哪个类里面，通过设置 logging.level.root=trace 的话，日志又非常多几乎没有办法看，那么我们可以缩小范围，不如说我们分析的是 hikari 包里面相关的问题。</p><p>我们可以把整个日志级别 logging.level.root=info 设置成 info，把其他所有的日志都关闭，并把 logging.level.com.zaxxer=trace 设置成最大的，保持日志不受干扰，然后观察日志再逐渐减少查看范围。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我通过源码分析，帮助你了解了 JpaRepositoriesAutoConfiguration、HibernateJpaAutoConfiguration、DataSourceAutoConfiguration 的主要作用和加载顺序的依赖，还介绍了 Spring Hibernate 的配置项有哪些。</p><p>你在工作中可以举一反三，通过 debug 断点一步一步分析出来这一讲没涉及的东西。比如可以自己做一个项目，跟着我的步骤操作，你会对这部分的内容有更深刻的体会。这样当遇到一些问题，并且网上没有合适的资料时，你可以试着采用本讲中我分享给你的思路来解决。</p><p>下一讲，我会为你介绍一个 Hibernate 实现的 JPA 的概念：Persistence Context。欢迎你提前预习，并结合这一讲内容去思考，有疑问的地方请留言，我会及时给予答复。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,10);function B(L,m,P,M,v,f){const a=e("Image");return t(),r("div",null,[E,i,y,_,u,A,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/6F/45/CgqCHl-08OiAT8tUAAAtx02IC70594.png"}),n(),F,g,S,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/6F/45/CgqCHl-08PGACMAWAABkBYWN3EQ292.png"}),n(),C,q,h,b,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/6F/3A/Ciqc1F-08PqAOGq1AAPvvo_ZD7w314.png"}),n(),D,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/6F/3A/Ciqc1F-08Q6AR-PoAAGybbuAJ7g272.png"}),n(),d,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/6F/45/CgqCHl-08RuALMNSAAKTACKebbE349.png"}),n(),T,p(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/6F/45/CgqCHl-08SmAc9J8AARC3m5NP2o468.png"}),n(),R,p(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/6F/45/CgqCHl-08UuABFufAAFail5ZuqU603.png"}),n(),O,p(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/6F/45/CgqCHl-08VmASV72AAJavgahY_A852.png"}),n(),I,p(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/6F/3A/Ciqc1F-08WGAaqVkAAR8a19UBFQ188.png"}),n(),N])}const J=l(c,[["render",B]]);export{j as __pageData,J as default};
