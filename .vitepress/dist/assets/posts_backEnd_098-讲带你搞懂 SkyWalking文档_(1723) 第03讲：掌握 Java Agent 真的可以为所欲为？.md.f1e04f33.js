import{_ as l,j as p,o,g as t,k as n,Q as s}from"./chunks/framework.e0c66c3f.js";const v=JSON.parse('{"title":"什么是 Java Agent ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1723) 第03讲：掌握 Java Agent 真的可以为所欲为？.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1723) 第03讲：掌握 Java Agent 真的可以为所欲为？.md","lastUpdated":1696338709000}'),e={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1723) 第03讲：掌握 Java Agent 真的可以为所欲为？.md"},c=s(`<p>我们在上一课时中，将 demo-provider 和 demo-webapp 接入 SkyWalking Agent 的时候，只需要在 VM options 中添加下面这一行配置即可：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#B392F0;">javaagent</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">to</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">skywalking</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">agent.jar \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dskywalking_config</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">to</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">agent.config</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">javaagent</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">to</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">skywalking</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">agent.jar \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dskywalking_config</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">to</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">agent.config</span></span></code></pre></div><p>并没有修改任何一行 Java 代码。这里便使用到了 Java Agent 技术，本课时我们将对 Java Agent 技术进行简单介绍并通过示例演示 Java Agent 技术的基本使用。</p><h3 id="什么是-java-agent" tabindex="-1">什么是 Java Agent <a class="header-anchor" href="#什么是-java-agent" aria-label="Permalink to &quot;什么是 Java Agent&quot;">​</a></h3><p>Java Agent 是从 JDK1.5 开始引入的，算是一个比较老的技术了。作为 Java 的开发工程师，我们常用的命令之一就是 java 命令，而 Java Agent 本身就是 java 命令的一个参数（即 -javaagent）。正如上一课时接入 SkyWalking Agent 那样，-javaagent 参数之后需要指定一个 jar 包，这个 jar 包需要同时满足下面两个条件：</p><ol><li>在 META-INF 目录下的 MANIFEST.MF 文件中必须指定 premain-class 配置项。</li><li>premain-class 配置项指定的类必须提供了 premain() 方法。</li></ol><p>在 Java 虚拟机启动时，执行 main() 函数之前，虚拟机会先找到 -javaagent 命令指定 jar 包，然后执行 premain-class 中的 premain() 方法。用一句概括其功能的话就是：main() 函数之前的一个拦截器。</p><p>使用 Java Agent 的步骤大致如下：</p><ol><li><p>定义一个 MANIFEST.MF 文件，在其中添加 premain-class 配置项。</p></li><li><p>创建 premain-class 配置项指定的类，并在其中实现 premain() 方法，方法签名如下：</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">premain</span><span style="color:#E1E4E8;">(String agentArgs, Instrumentation inst){</span></span>
<span class="line"><span style="color:#E1E4E8;">   ... </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">premain</span><span style="color:#24292E;">(String agentArgs, Instrumentation inst){</span></span>
<span class="line"><span style="color:#24292E;">   ... </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li><p>将 MANIFEST.MF 文件和 premain-class 指定的类一起打包成一个 jar 包。</p></li><li><p>使用 -javaagent 指定该 jar 包的路径即可执行其中的 premain() 方法。</p></li></ol><h3 id="java-agent-示例" tabindex="-1">Java Agent 示例 <a class="header-anchor" href="#java-agent-示例" aria-label="Permalink to &quot;Java Agent 示例&quot;">​</a></h3><p>首先，我们创建一个最基本的 Maven 项目，然后创建 TestAgent.java 这一个类，项目的整体结构如图所示。</p>`,13),r=s(`<p>TestAgent 中提供了 premain() 方法的实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestAgent</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">premain</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">agentArgs</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">            Instrumentation </span><span style="color:#FFAB70;">inst</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this is a java agent with two args&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;参数:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> agentArgs </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">premain</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">agentArgs</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this is a java agent only one args&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;参数:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> agentArgs </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestAgent</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">premain</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">agentArgs</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            Instrumentation </span><span style="color:#E36209;">inst</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this is a java agent with two args&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;参数:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> agentArgs </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">premain</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">agentArgs</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this is a java agent only one args&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;参数:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> agentArgs </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>premain() 方法有两个重载，如下所示，如果两个重载同时存在，【1】将会被忽略，只执行【2】：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">premain</span><span style="color:#E1E4E8;">(String agentArgs) [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">premain</span><span style="color:#E1E4E8;">(String agentArgs, </span></span>
<span class="line"><span style="color:#E1E4E8;">      Instrumentation inst); [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">premain</span><span style="color:#24292E;">(String agentArgs) [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">premain</span><span style="color:#24292E;">(String agentArgs, </span></span>
<span class="line"><span style="color:#24292E;">      Instrumentation inst); [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span></code></pre></div><p>代码中有两个参数需要我们注意。</p><ul><li><strong>agentArgs 参数</strong>：-javaagent 命令携带的参数。在前面介绍 SkyWalking Agent 接入时提到，agent.service_name 这个配置项的默认值有三种覆盖方式，其中，使用探针配置进行覆盖，探针配置的值就是通过该参数传入的。</li><li><strong>inst 参数</strong>：java.lang.instrumen.Instrumentation 是 Instrumention 包中定义的一个接口，它提供了操作类定义的相关方法。</li></ul><p>确定 premain() 方法的两个重载优先级的逻辑在 sun.instrument.InstrumentationImpl.java 中实现，相关代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadClassAndCallPremain</span><span style="color:#E1E4E8;">(String  String  optionsString)</span></span>
<span class="line"><span style="color:#E1E4E8;">            throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">loadClassAndStartAgent</span><span style="color:#E1E4E8;">( classname, </span><span style="color:#9ECBFF;">&quot;premain&quot;</span><span style="color:#E1E4E8;">, optionsString );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadClassAndStartAgent</span><span style="color:#E1E4E8;">(String  classname, </span></span>
<span class="line"><span style="color:#E1E4E8;">        String  methodname, String  optionsString) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ... </span><span style="color:#6A737D;">// 省略变量定义,下面省略 try/catch代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查找两个参数的 premain()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> javaAgentClass.</span><span style="color:#B392F0;">getDeclaredMethod</span><span style="color:#E1E4E8;">( methodname,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] {String.class, </span></span>
<span class="line"><span style="color:#E1E4E8;">                java.lang.instrument.Instrumentation.class});</span></span>
<span class="line"><span style="color:#E1E4E8;">    twoArgAgent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (m </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 查找一个参数的 premain()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> javaAgentClass.</span><span style="color:#B392F0;">getDeclaredMethod</span><span style="color:#E1E4E8;">(methodname,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] { String.class });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ...</span><span style="color:#6A737D;">// 省略其他查找 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(m, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用查找到的 premain()重载</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (twoArgAgent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] { optionsString, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] { optionsString });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(m, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadClassAndCallPremain</span><span style="color:#24292E;">(String  String  optionsString)</span></span>
<span class="line"><span style="color:#24292E;">            throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">loadClassAndStartAgent</span><span style="color:#24292E;">( classname, </span><span style="color:#032F62;">&quot;premain&quot;</span><span style="color:#24292E;">, optionsString );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadClassAndStartAgent</span><span style="color:#24292E;">(String  classname, </span></span>
<span class="line"><span style="color:#24292E;">        String  methodname, String  optionsString) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    ... ... </span><span style="color:#6A737D;">// 省略变量定义,下面省略 try/catch代码块</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查找两个参数的 premain()方法</span></span>
<span class="line"><span style="color:#24292E;">    m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> javaAgentClass.</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">( methodname,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] {String.class, </span></span>
<span class="line"><span style="color:#24292E;">                java.lang.instrument.Instrumentation.class});</span></span>
<span class="line"><span style="color:#24292E;">    twoArgAgent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (m </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 查找一个参数的 premain()方法</span></span>
<span class="line"><span style="color:#24292E;">        m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> javaAgentClass.</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">(methodname,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] { String.class });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... ...</span><span style="color:#6A737D;">// 省略其他查找 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(m, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用查找到的 premain()重载</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (twoArgAgent) {</span></span>
<span class="line"><span style="color:#24292E;">        m.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] { optionsString, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        m.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] { optionsString });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(m, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span></code></pre></div><p>接下来还需要创建 MANIFEST.MF 文件并打包，这里我们直接使用 maven-assembly-plugin 打包插件来完成这两项功能。在 pom.xml 中引入 maven-assembly-plugin 插件并添加相应的配置，如下所示：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;maven-assembly-plugin&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;2.4&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">appendAssemblyId</span><span style="color:#E1E4E8;">&gt;false&lt;/</span><span style="color:#FDAEB7;font-style:italic;">appendAssemblyId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!-- 将TestAgent的所有依赖包都打到jar包中--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">descriptorRefs</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#FDAEB7;font-style:italic;">descriptorRef</span><span style="color:#E1E4E8;">&gt;jar-with-dependencies&lt;/</span><span style="color:#FDAEB7;font-style:italic;">descriptorRef</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#FDAEB7;font-style:italic;">descriptorRefs</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">archive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">&lt;!-- 添加MANIFEST.MF中的各项配置--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#FDAEB7;font-style:italic;">manifest</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">&lt;!-- 添加 mplementation-*和Specification-*配置项--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#FDAEB7;font-style:italic;">addDefaultImplementationEntries</span><span style="color:#E1E4E8;">&gt;true</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;/</span><span style="color:#FDAEB7;font-style:italic;">addDefaultImplementationEntries</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#FDAEB7;font-style:italic;">addDefaultSpecificationEntries</span><span style="color:#E1E4E8;">&gt;true</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;/</span><span style="color:#FDAEB7;font-style:italic;">addDefaultSpecificationEntries</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#FDAEB7;font-style:italic;">manifest</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">&lt;!-- 将 premain-class 配置项设置为com.xxx.TestAgent--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#FDAEB7;font-style:italic;">manifestEntries</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">Premain-Class</span><span style="color:#E1E4E8;">&gt;com.xxx.TestAgent&lt;/</span><span style="color:#85E89D;">Premain-Class</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#FDAEB7;font-style:italic;">manifestEntries</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#FDAEB7;font-style:italic;">archive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">executions</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">execution</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">&lt;!-- 绑定到package生命周期阶段上 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#FDAEB7;font-style:italic;">phase</span><span style="color:#E1E4E8;">&gt;package&lt;/</span><span style="color:#FDAEB7;font-style:italic;">phase</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#FDAEB7;font-style:italic;">goals</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">&lt;!-- 绑定到package生命周期阶段上 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#FDAEB7;font-style:italic;">goal</span><span style="color:#E1E4E8;">&gt;single&lt;/</span><span style="color:#FDAEB7;font-style:italic;">goal</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#FDAEB7;font-style:italic;">goals</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#FDAEB7;font-style:italic;">execution</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">executions</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;maven-assembly-plugin&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;2.4&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">appendAssemblyId</span><span style="color:#24292E;">&gt;false&lt;/</span><span style="color:#B31D28;font-style:italic;">appendAssemblyId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!-- 将TestAgent的所有依赖包都打到jar包中--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">descriptorRefs</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#B31D28;font-style:italic;">descriptorRef</span><span style="color:#24292E;">&gt;jar-with-dependencies&lt;/</span><span style="color:#B31D28;font-style:italic;">descriptorRef</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#B31D28;font-style:italic;">descriptorRefs</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">archive</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!-- 添加MANIFEST.MF中的各项配置--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#B31D28;font-style:italic;">manifest</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">&lt;!-- 添加 mplementation-*和Specification-*配置项--&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#B31D28;font-style:italic;">addDefaultImplementationEntries</span><span style="color:#24292E;">&gt;true</span></span>
<span class="line"><span style="color:#24292E;">                &lt;/</span><span style="color:#B31D28;font-style:italic;">addDefaultImplementationEntries</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#B31D28;font-style:italic;">addDefaultSpecificationEntries</span><span style="color:#24292E;">&gt;true</span></span>
<span class="line"><span style="color:#24292E;">                &lt;/</span><span style="color:#B31D28;font-style:italic;">addDefaultSpecificationEntries</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#B31D28;font-style:italic;">manifest</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!-- 将 premain-class 配置项设置为com.xxx.TestAgent--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#B31D28;font-style:italic;">manifestEntries</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">Premain-Class</span><span style="color:#24292E;">&gt;com.xxx.TestAgent&lt;/</span><span style="color:#22863A;">Premain-Class</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#B31D28;font-style:italic;">manifestEntries</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#B31D28;font-style:italic;">archive</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">executions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">execution</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!-- 绑定到package生命周期阶段上 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#B31D28;font-style:italic;">phase</span><span style="color:#24292E;">&gt;package&lt;/</span><span style="color:#B31D28;font-style:italic;">phase</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#B31D28;font-style:italic;">goals</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">&lt;!-- 绑定到package生命周期阶段上 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#B31D28;font-style:italic;">goal</span><span style="color:#24292E;">&gt;single&lt;/</span><span style="color:#B31D28;font-style:italic;">goal</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#B31D28;font-style:italic;">goals</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#B31D28;font-style:italic;">execution</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">executions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">plugin</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>最后执行 maven 命令进行打包，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mvn </span><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">-D</span><span style="color:#E1E4E8;">checkstyle.skip </span><span style="color:#FDAEB7;font-style:italic;">-D</span><span style="color:#E1E4E8;">skip</span><span style="color:#FDAEB7;font-style:italic;">T</span><span style="color:#E1E4E8;">ests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mvn </span><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">-D</span><span style="color:#24292E;">checkstyle.skip </span><span style="color:#B31D28;font-style:italic;">-D</span><span style="color:#24292E;">skip</span><span style="color:#B31D28;font-style:italic;">T</span><span style="color:#24292E;">ests</span></span></code></pre></div><p>完成打包之后，我们可以解压 target 目录下的 test-agent.jar，在其 META-INF 目录下可以找到 MANIFEST.MF 文件，其内容如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Manifest</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Version</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1.0</span></span>
<span class="line"><span style="color:#E1E4E8;">Implementation</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Title</span><span style="color:#E1E4E8;">: TestAgent</span></span>
<span class="line"><span style="color:#E1E4E8;">Premain</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">: com.xxx.TestAgent       # 关注这一项</span></span>
<span class="line"><span style="color:#E1E4E8;">Implementation</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Versioclearn</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">SNAPSHOT</span></span>
<span class="line"><span style="color:#E1E4E8;">Archiver</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Version</span><span style="color:#E1E4E8;">: Plexus Archiver</span></span>
<span class="line"><span style="color:#E1E4E8;">Built</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">By</span><span style="color:#E1E4E8;">: xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">Specification</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Title</span><span style="color:#E1E4E8;">: TestAgent</span></span>
<span class="line"><span style="color:#E1E4E8;">Implementation</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Vendor</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Id</span><span style="color:#E1E4E8;">: com.xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">Created</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">By</span><span style="color:#E1E4E8;">: Apache Maven </span><span style="color:#79B8FF;">3.6</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">Build</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Jdk</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1.8</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0_191</span></span>
<span class="line"><span style="color:#E1E4E8;">Specification</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Version</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">SNAPSHOT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Manifest</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Version</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.0</span></span>
<span class="line"><span style="color:#24292E;">Implementation</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Title</span><span style="color:#24292E;">: TestAgent</span></span>
<span class="line"><span style="color:#24292E;">Premain</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">: com.xxx.TestAgent       # 关注这一项</span></span>
<span class="line"><span style="color:#24292E;">Implementation</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Versioclearn</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">SNAPSHOT</span></span>
<span class="line"><span style="color:#24292E;">Archiver</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Version</span><span style="color:#24292E;">: Plexus Archiver</span></span>
<span class="line"><span style="color:#24292E;">Built</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">By</span><span style="color:#24292E;">: xxx</span></span>
<span class="line"><span style="color:#24292E;">Specification</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Title</span><span style="color:#24292E;">: TestAgent</span></span>
<span class="line"><span style="color:#24292E;">Implementation</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Vendor</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Id</span><span style="color:#24292E;">: com.xxx</span></span>
<span class="line"><span style="color:#24292E;">Created</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">By</span><span style="color:#24292E;">: Apache Maven </span><span style="color:#005CC5;">3.6</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">Build</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Jdk</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.8</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0_191</span></span>
<span class="line"><span style="color:#24292E;">Specification</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Version</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">SNAPSHOT</span></span></code></pre></div><p>到此为止，Java Agent 使用的 jar 包创建完成了。</p><p>下面再创建一个普通的 Maven 项目：TestMain，项目结构与 TestAgent 类似，如图所示：</p>`,16),E=s(`<p>在 Main 这个类中定义了该项目的入口 main() 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TestMain Main!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TestMain Main!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在启动 TestMain 项目之前，需要在 VM options 中使用 -javaagent 命令指定前面创建的 test-agent.jar，如图所示：</p>`,3),y=s(`<p>启动 TestMain 之后得到了如下输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> is a java agent.</span></span>
<span class="line"><span style="color:#E1E4E8;">参数</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">option1</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">value2,option2</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">value2</span></span>
<span class="line"><span style="color:#E1E4E8;">TestMain Main</span><span style="color:#F97583;">!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;"> is a java agent.</span></span>
<span class="line"><span style="color:#24292E;">参数</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">option1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">value2,option2</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">value2</span></span>
<span class="line"><span style="color:#24292E;">TestMain Main</span><span style="color:#D73A49;">!</span></span></code></pre></div><h3 id="修改类实现" tabindex="-1">修改类实现 <a class="header-anchor" href="#修改类实现" aria-label="Permalink to &quot;修改类实现&quot;">​</a></h3><p>Java Agent 可以实现的功能远不止添加一行日志这么简单，这里需要关注一下 premain() 方法中的第二个参数：Instrumentation。Instrumentation 位于 java.lang.instrument 包中，通过这个工具包，我们可以编写一个强大的 Java Agent 程序，用来动态替换或是修改某些类的定义。</p><p>下面先来简单介绍一下 Instrumentation 中的核心 API 方法：</p><ul><li><strong>addTransformer()/removeTransformer() 方法</strong>：注册/注销一个 ClassFileTransformer 类的实例，该 Transformer 会在类加载的时候被调用，可用于修改类定义。</li><li><strong>redefineClasses() 方法</strong>：该方法针对的是已经加载的类，它会对传入的类进行重新定义。</li><li>**getAllLoadedClasses()方法：**返回当前 JVM 已加载的所有类。</li><li><strong>getInitiatedClasses() 方法</strong>：返回当前 JVM 已经初始化的类。</li><li><strong>getObjectSize()方法</strong>：获取参数指定的对象的大小。</li></ul><p>下面我们通过一个示例演示 Instrumentation 如何与 Java Agent 配合修改类定义。首先我们提供一个普通的 Java 类：TestClass，其中提供一个 getNumber() 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNumber</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNumber</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>编译生成 TestClass.class 文件之后，我们将 getNumber() 方法返回值修改为 2，然后再次编译，并将此次得到的 class 文件重命名为 TestClass.class.2 文件，如图所示，我们得到两个 TestClass.class 文件：</p>`,9),i=s(`<p>之后将 TestClass.getNumber() 方法返回值改回 1 ，重新编译。</p><p>然后编写一个 main() 方法，新建一个 TestClass 对象并输出其 getNumber() 方法的返回值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getNumber</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getNumber</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来编写 premain() 方法，并注册一个 Transformer 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestAgent</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">premain</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">agentArgs</span><span style="color:#E1E4E8;">, Instrumentation </span><span style="color:#FFAB70;">inst</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注册一个 Transformer，该 Transformer在类加载时被调用</span></span>
<span class="line"><span style="color:#E1E4E8;">        inst.</span><span style="color:#B392F0;">addTransformer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Transformer</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        inst.</span><span style="color:#B392F0;">retransformClasses</span><span style="color:#E1E4E8;">(TestClass.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;premain done&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestAgent</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">premain</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">agentArgs</span><span style="color:#24292E;">, Instrumentation </span><span style="color:#E36209;">inst</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注册一个 Transformer，该 Transformer在类加载时被调用</span></span>
<span class="line"><span style="color:#24292E;">        inst.</span><span style="color:#6F42C1;">addTransformer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Transformer</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        inst.</span><span style="color:#6F42C1;">retransformClasses</span><span style="color:#24292E;">(TestClass.class);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;premain done&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Transformer 实现了 ClassFileTransformer，其中的 transform() 方法实现可以修改加载到的类的定义，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Transformer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassFileTransformer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(ClassLoader </span><span style="color:#FFAB70;">l</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">className</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">       Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">, ProtectionDomain </span><span style="color:#FFAB70;">pd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">c.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TestClass&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 只修改TestClass的定义</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 读取 TestClass.class.2这个 class文件，作为 TestClass类的新定义</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBytesFromFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TestClass.class.2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Transformer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassFileTransformer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(ClassLoader </span><span style="color:#E36209;">l</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">className</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">       Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">c</span><span style="color:#24292E;">, ProtectionDomain </span><span style="color:#E36209;">pd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)  {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">c.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TestClass&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 只修改TestClass的定义</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 读取 TestClass.class.2这个 class文件，作为 TestClass类的新定义</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBytesFromFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TestClass.class.2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>之后还需要在 maven-assembly-plugin 插件中添加 Can-Retransform-Classes 参数：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">// 省略其他配置</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">manifestEntries</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">Premain-Class</span><span style="color:#E1E4E8;">&gt;com.xxx.TestAgent&lt;/</span><span style="color:#85E89D;">Premain-Class</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">Can-Retransform-Classes</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">Can-Retransform-Classes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">manifestEntries</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">// 省略其他配置</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">manifestEntries</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">Premain-Class</span><span style="color:#24292E;">&gt;com.xxx.TestAgent&lt;/</span><span style="color:#22863A;">Premain-Class</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">Can-Retransform-Classes</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">Can-Retransform-Classes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">manifestEntries</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>最后，打包启动应用，得到的输出如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">premain done</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"># 此输出说明，类TestClass的定义在加载时已经被 Transformer替换成 </span></span>
<span class="line"><span style="color:#E1E4E8;"># 文件 TestClass.class.</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;"> 中的定义</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">premain done</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"># 此输出说明，类TestClass的定义在加载时已经被 Transformer替换成 </span></span>
<span class="line"><span style="color:#24292E;"># 文件 TestClass.class.</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;"> 中的定义</span></span></code></pre></div><h3 id="统计方法耗时" tabindex="-1">统计方法耗时 <a class="header-anchor" href="#统计方法耗时" aria-label="Permalink to &quot;统计方法耗时&quot;">​</a></h3><p>介绍完 Java Agent 的基本使用流程之后，这里做一个简单的进阶示例，将 Java Agent 与 Byte Buddy 结合使用，统计 com.xxx 包下所有方法的耗时。</p><p>回到 TestAgent 项目，整个项目的结构不变，需要在 pom.xml 中添加 Byte Buddy 的依赖，如下所示：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;net.bytebuddy&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;byte-buddy&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;1.9.2&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;net.bytebuddy&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;byte-buddy-agent&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;1.9.2&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;net.bytebuddy&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;byte-buddy&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;1.9.2&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;net.bytebuddy&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;byte-buddy-agent&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;1.9.2&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Byte Buddy 是一个开源 Java 库，其主要功能是帮助用户屏蔽字节码操作，以及复杂的 Instrumentation API 。Byte Buddy 提供了一套类型安全的 API 和注解，我们可以直接使用这些 API 和注解轻松实现复杂的字节码操作。另外，Byte Buddy 提供了针对 Java Agent 的额外 API，帮助开发人员在 Java Agent 场景轻松增强已有代码。在 下一课时中，我们将深入介绍 SkyWalking 涉及的 Byte Buddy 的 API，这里不做深入研究，只对此处涉及的 API 和注解做简单说明。</p><p>接下来对 TestAgent.java 进行修改，使用 Byte Buddy 提供的 API 拦截指定的类和方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestAgent</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">premain</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">agentArgs</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        Instrumentation </span><span style="color:#FFAB70;">inst</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Byte Buddy会根据 Transformer指定的规则进行拦截并增强代码</span></span>
<span class="line"><span style="color:#E1E4E8;">        AgentBuilder.Transformer transformer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AgentBuilder.</span><span style="color:#B392F0;">Transformer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> builder,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        TypeDescription typeDescription, </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ClassLoader classLoader,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        JavaModule module) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// method()指定哪些方法需要被拦截，ElementMatchers.any()表                  // 示拦截所有方法</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                   ElementMatchers.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">MethodDescription</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">any</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#6A737D;">// intercept()指明拦截上述方法的拦截器</span></span>
<span class="line"><span style="color:#E1E4E8;">                     .</span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(MethodDelegation.</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                      TimeInterceptor.class));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Byte Buddy专门有个AgentBuilder来处理Java Agent的场景</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AgentBuilder </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">Default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 根据包名前缀拦截类</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(ElementMatchers.</span><span style="color:#B392F0;">nameStartsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.xxx&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 拦截到的类由transformer处理</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(transformer)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">installOn</span><span style="color:#E1E4E8;">(inst); </span><span style="color:#6A737D;">// 安装到 Instrumentation</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestAgent</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">premain</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">agentArgs</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        Instrumentation </span><span style="color:#E36209;">inst</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Byte Buddy会根据 Transformer指定的规则进行拦截并增强代码</span></span>
<span class="line"><span style="color:#24292E;">        AgentBuilder.Transformer transformer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AgentBuilder.</span><span style="color:#6F42C1;">Transformer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> builder,</span></span>
<span class="line"><span style="color:#24292E;">                        TypeDescription typeDescription, </span></span>
<span class="line"><span style="color:#24292E;">                        ClassLoader classLoader,</span></span>
<span class="line"><span style="color:#24292E;">                        JavaModule module) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// method()指定哪些方法需要被拦截，ElementMatchers.any()表                  // 示拦截所有方法</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                   ElementMatchers.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">MethodDescription</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">any</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#6A737D;">// intercept()指明拦截上述方法的拦截器</span></span>
<span class="line"><span style="color:#24292E;">                     .</span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(MethodDelegation.</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                      TimeInterceptor.class));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Byte Buddy专门有个AgentBuilder来处理Java Agent的场景</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AgentBuilder </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">Default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 根据包名前缀拦截类</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(ElementMatchers.</span><span style="color:#6F42C1;">nameStartsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.xxx&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 拦截到的类由transformer处理</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(transformer)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">installOn</span><span style="color:#24292E;">(inst); </span><span style="color:#6A737D;">// 安装到 Instrumentation</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当拦截到符合条件的类时，会交给我们的 AgentBuilder.Transformer 实现处理，当 Transformer 拦截到符合条件的方法时，会交给上面指定的 TimeInterceptor 处理。TimeInterceptor 的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TimeInterceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RuntimeType</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Origin</span><span style="color:#E1E4E8;"> Method </span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          @</span><span style="color:#F97583;">SuperCall</span><span style="color:#E1E4E8;"> Callable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">callable</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> callable.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 执行原函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ms&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TimeInterceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RuntimeType</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Origin</span><span style="color:#24292E;"> Method </span><span style="color:#E36209;">method</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          @</span><span style="color:#D73A49;">SuperCall</span><span style="color:#24292E;"> Callable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">callable</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> callable.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 执行原函数</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ms&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TimeInterceptor 就类似于 AOP 的环绕切面。这里通过 @SuperCall 注解注入的 Callable 实例可以调到被拦截的目标方法，需要注意的是，在通过 Callable 调用目标方法时，即使目标方法带参数，这里也不用显式的传递。这里 @Origin 注解注入了被拦截方法对应的 Method 对象。</p><p>完成 TestAgent 的修改之后，执行如下命令，重新打包 test-agent.jar：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mvn clean  </span><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">-D</span><span style="color:#E1E4E8;">checkstyle.skip </span><span style="color:#FDAEB7;font-style:italic;">-D</span><span style="color:#E1E4E8;">skip</span><span style="color:#FDAEB7;font-style:italic;">T</span><span style="color:#E1E4E8;">ests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mvn clean  </span><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">-D</span><span style="color:#24292E;">checkstyle.skip </span><span style="color:#B31D28;font-style:italic;">-D</span><span style="color:#24292E;">skip</span><span style="color:#B31D28;font-style:italic;">T</span><span style="color:#24292E;">ests</span></span></code></pre></div><p>打包完成，回到 TestMain 项目，所有代码和配置都无需修改，直接启动，会得到输出如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TestMain Main</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">:1003ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TestMain Main</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">:1003ms</span></span></code></pre></div><h3 id="attach-api-基础" tabindex="-1">Attach API 基础 <a class="header-anchor" href="#attach-api-基础" aria-label="Permalink to &quot;Attach API 基础&quot;">​</a></h3><p>在 Java 5 中，Java 开发者只能通过 Java Agent 中的 premain() 方法在 main() 方法执行之前进行一些操作，这种方式在一定程度上限制了灵活性。Java 6 针对这种状况做出了改进，提供了一个 agentmain() 方法，Java 开发者可以在 main() 方法执行以后执行 agentmain() 方法实现一些特殊功能。</p><p>agentmain() 方法同样有两个重载，它们的参数与 premain() 方法相同，而且前者优先级也是高于后者的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">agentmain</span><span style="color:#E1E4E8;"> (String agentArgs, </span></span>
<span class="line"><span style="color:#E1E4E8;">      Instrumentation inst);[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">agentmain</span><span style="color:#E1E4E8;"> (String agentArgs); [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">agentmain</span><span style="color:#24292E;"> (String agentArgs, </span></span>
<span class="line"><span style="color:#24292E;">      Instrumentation inst);[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">agentmain</span><span style="color:#24292E;"> (String agentArgs); [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span></code></pre></div><p>agentmain() 方法主要用在 JVM Attach 工具中，Attach API 是 Java 的扩展 API，可以向目标 JVM &quot;附着&quot;（Attach）一个代理工具程序，而这个代理工具程序的入口就是 agentmain() 方法。</p><p>Attach API 中有 2 个核心类需要特别说明：</p><ul><li><strong>VirtualMachine</strong> 是对一个 Java 虚拟机的抽象，在 Attach 工具程序监控目标虚拟机的时候会用到该类。VirtualMachine 提供了 JVM 枚举、Attach、Detach 等基本操作。</li><li><strong>VirtualMachineDescriptor</strong> 是一个描述虚拟机的容器类，后面示例中会介绍它如何与 VirtualMachine 配合使用。</li></ul><p>下面的示例依然通过用类文件替换的方式修改 TestClass 这个类的返回值。首先，前文使用到的 TestClass，以及 TestClass.class.2 文件不变。main() 方法略作修改，其中每隔 1s 创建一个新的 TestClass 对象并输出 getNumber() 方法返回值，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getNumber</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 注意，这里是新建TestClass对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getNumber</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getNumber</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 注意，这里是新建TestClass对象</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getNumber</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外，将 TestAgent 中的 premain() 方法修改成 agentmain() 方法（除了名称变化，没有任何其他变化）。</p><p>需要再添加一个 AttachMain 类，其中会通过 Attach API 监听上面 main() 方法的启动，这里每隔 1s 检查一次所有的 Java 虚拟机，当发现有新的虚拟机出现的时候，就调用 attach() 方法，将 TestAgent 所在的 jar 包&quot;附加&quot;上去，&quot;附加&quot;成功之后，TestAgent 就会通过 Transformer 修改TestClass 类定义。AttachMain 的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AttachMain</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">VirtualMachineDescriptor</span><span style="color:#E1E4E8;">&gt; listBefore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">             VirtualMachine.</span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String jar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.../test-agent.jar&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// agentmain()方法所在jar包</span></span>
<span class="line"><span style="color:#E1E4E8;">        VirtualMachine vm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">VirtualMachineDescriptor</span><span style="color:#E1E4E8;">&gt; listAfter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            listAfter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> VirtualMachine.</span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (VirtualMachineDescriptor vmd </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> listAfter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">listBefore.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(vmd)) { </span><span style="color:#6A737D;">// 发现新的JVM</span></span>
<span class="line"><span style="color:#E1E4E8;">                    vm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> VirtualMachine.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(vmd); </span><span style="color:#6A737D;">// attach到新JVM</span></span>
<span class="line"><span style="color:#E1E4E8;">                    vm.</span><span style="color:#B392F0;">loadAgent</span><span style="color:#E1E4E8;">(jar); </span><span style="color:#6A737D;">// 加载agentmain所在的jar包</span></span>
<span class="line"><span style="color:#E1E4E8;">                    vm.</span><span style="color:#B392F0;">detach</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// detach</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AttachMain</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">VirtualMachineDescriptor</span><span style="color:#24292E;">&gt; listBefore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">             VirtualMachine.</span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String jar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.../test-agent.jar&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// agentmain()方法所在jar包</span></span>
<span class="line"><span style="color:#24292E;">        VirtualMachine vm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">VirtualMachineDescriptor</span><span style="color:#24292E;">&gt; listAfter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            listAfter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> VirtualMachine.</span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (VirtualMachineDescriptor vmd </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> listAfter) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">listBefore.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(vmd)) { </span><span style="color:#6A737D;">// 发现新的JVM</span></span>
<span class="line"><span style="color:#24292E;">                    vm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> VirtualMachine.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(vmd); </span><span style="color:#6A737D;">// attach到新JVM</span></span>
<span class="line"><span style="color:#24292E;">                    vm.</span><span style="color:#6F42C1;">loadAgent</span><span style="color:#24292E;">(jar); </span><span style="color:#6A737D;">// 加载agentmain所在的jar包</span></span>
<span class="line"><span style="color:#24292E;">                    vm.</span><span style="color:#6F42C1;">detach</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// detach</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 pom.xml 文件中添加如下依赖，否则在编译的过程中会抛异常：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;com.sun&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;tools&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;1.8&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">scope</span><span style="color:#E1E4E8;">&gt;system&lt;/</span><span style="color:#FDAEB7;font-style:italic;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">systemPath</span><span style="color:#E1E4E8;">&gt;\${java.home}/../lib/tools.jar&lt;/</span><span style="color:#FDAEB7;font-style:italic;">systemPath</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;com.sun&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;tools&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;1.8&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">scope</span><span style="color:#24292E;">&gt;system&lt;/</span><span style="color:#B31D28;font-style:italic;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">systemPath</span><span style="color:#24292E;">&gt;\${java.home}/../lib/tools.jar&lt;/</span><span style="color:#B31D28;font-style:italic;">systemPath</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>另外，还要在 MANIFEST.MF 文件中添加 Agent-Class 这一项， pom.xml 文件中具体配置如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">manifestEntries</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">Can-Retransform-Classes</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">Can-Retransform-Classes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 指向agentmain()方法所在的类 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">Agent-Class</span><span style="color:#E1E4E8;">&gt;com.xxx.TestAgent&lt;/</span><span style="color:#85E89D;">Agent-Class</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">manifestEntries</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">manifestEntries</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">Can-Retransform-Classes</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">Can-Retransform-Classes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 指向agentmain()方法所在的类 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">Agent-Class</span><span style="color:#24292E;">&gt;com.xxx.TestAgent&lt;/</span><span style="color:#22863A;">Agent-Class</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">manifestEntries</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>最后，我们先启动 AttachMain 类，然后通过命令行启动 Main ：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cp .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">agent.jar com.xxx.attach.Main</span></span>
<span class="line"><span style="color:#F97583;">-------</span></span>
<span class="line"><span style="color:#E1E4E8;">输出：</span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">premain done # attach成功，Transformer会修改TestClass的定义</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">  # 修改后的TestClass.</span><span style="color:#B392F0;">getNumber</span><span style="color:#E1E4E8;">()方法返回值为 </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cp .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">agent.jar com.xxx.attach.Main</span></span>
<span class="line"><span style="color:#D73A49;">-------</span></span>
<span class="line"><span style="color:#24292E;">输出：</span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">premain done # attach成功，Transformer会修改TestClass的定义</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">  # 修改后的TestClass.</span><span style="color:#6F42C1;">getNumber</span><span style="color:#24292E;">()方法返回值为 </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#005CC5;">2</span></span></code></pre></div><p>在 SkyWalking Agent 中并没有使用到 Attach API，但是作为 Java Agent 的扩展，还是希望你对其有所了解。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时重点介绍了 Java Agent 技术的基础知识，然后通过 TestAgent 和 TestMain 两个示例项目简单展示了 Java Agent 技术的使用流程，之后通过 Java Agent 和 Byte Buddy 实现了统计方法耗时的功能，最后还简单介绍 Attach API 的相关功能并进行了示例演示。</p><p>希望你在课后可以自己多加练习。</p>`,47);function g(d,F,A,u,m,D){const a=p("Image");return o(),t("div",null,[c,n(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/73/51/Cgq2xl5p4auAbrrvAACRfWvGnT4223.png"}),r,n(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/73/51/CgpOIF5p4auARfNmAACdrDhFMHg352.png"}),E,n(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/73/51/Cgq2xl5p4ayACZVOAABtprd-NZA652.png"}),y,n(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/73/51/CgpOIF5p4ayAQ7QjAAAJJFmWXV4100.png"}),i])}const C=l(e,[["render",g]]);export{v as __pageData,C as default};
