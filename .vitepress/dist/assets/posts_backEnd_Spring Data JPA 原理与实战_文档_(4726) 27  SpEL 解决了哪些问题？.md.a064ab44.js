import{_ as o,j as e,o as t,h as r,k as p,f as n,Q as l,s}from"./chunks/framework.d3daa342.js";const I=JSON.parse('{"title":"27SpEL解决了哪些问题？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4726) 27  SpEL 解决了哪些问题？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4726) 27  SpEL 解决了哪些问题？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4726) 27  SpEL 解决了哪些问题？.md"},E=l('<h1 id="_27spel解决了哪些问题" tabindex="-1">27SpEL解决了哪些问题？ <a class="header-anchor" href="#_27spel解决了哪些问题" aria-label="Permalink to &quot;27SpEL解决了哪些问题？&quot;">​</a></h1><p>实际工作中，我们经常会在一些注解中使用 SpEL 表达式，当然在 JPA 里也不例外，如果想知道它在 JPA 中的使用详情，必须要先从了解开始。那么这一讲，我们就来聊聊 SpEL 表达式相关知识。</p><h3 id="spel-基础语法" tabindex="-1">SpEL 基础语法 <a class="header-anchor" href="#spel-基础语法" aria-label="Permalink to &quot;SpEL 基础语法&quot;">​</a></h3><h4 id="spel-大纲" tabindex="-1">SpEL 大纲 <a class="header-anchor" href="#spel-大纲" aria-label="Permalink to &quot;SpEL 大纲&quot;">​</a></h4><p>SpEL 的全称为 Spring Expression Language，即 Spring 表达式语言，是 Spring framework 里面的核心项目。我们先来看一下 spring-expression 的 jar 包的引用关系，如下图所示。</p>',5),y=s("p",null,"从核心引用来看，SpEL 贯穿所有 Spring 的核心功能。当然了，SpEL 可以脱离 Spring 工程独立使用，其项目里有三个重要的接口：ExpressionParser、Expression、EvaluationContext，我从官方文档中找了一张图来说明它们之间的关系。",-1),i=l(`<p>注：图片来自网络</p><p><strong>ExpressionParser</strong></p><p>它是 SpEL 的处理接口，默认实现类是 SpelExpressionParser，对外提供的只有两个方法，如下述代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExpressionParser</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 根据传入的表达式生成Expression</span></span>
<span class="line"><span style="color:#E1E4E8;">   Expression </span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">expressionString</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ParseException;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 根据传入的表达式和ParserContext生成Expression对象</span></span>
<span class="line"><span style="color:#E1E4E8;">   Expression </span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">expressionString</span><span style="color:#E1E4E8;">, ParserContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ParseException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExpressionParser</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 根据传入的表达式生成Expression</span></span>
<span class="line"><span style="color:#24292E;">   Expression </span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">expressionString</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ParseException;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 根据传入的表达式和ParserContext生成Expression对象</span></span>
<span class="line"><span style="color:#24292E;">   Expression </span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">expressionString</span><span style="color:#24292E;">, ParserContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ParseException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以看到，这两个方法的目的都是生成 Expression。</p><p><strong>Expression</strong></p><p>它默认的实现是 SpELExpression，主要对外提供的接口就是根据表达式获得表达式响应的结果，如下图所示。</p>`,7),u=s("p",null,"而它的这些方法中，最重的一个参数就是 EvaluationContext。",-1),F=s("p",null,[s("strong",null,"EvaluationContext")],-1),d=s("p",null,"表示解析 String 表达式所需要的上下文，例如寻找 ROOT 是谁，反射解析的 Method、Field、Constructor 的解析器和取值所需要的上下文。我们看一下其接口提供的方法，如下图所示。",-1),A=l(`<p>现在对这三个接口有了初步认识之后，我们通过实例来看一下基本用法。</p><h4 id="spel-的基本用法" tabindex="-1">SpEL 的基本用法 <a class="header-anchor" href="#spel-的基本用法" aria-label="Permalink to &quot;SpEL 的基本用法&quot;">​</a></h4><p>下面是一个 SpEL 基本用法的例子，你可以结合注释来理解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//ExpressionParser是操作SpEL的总入口，创建一个接口ExpressionParser对应的实例SpelExpressionParser</span></span>
<span class="line"><span style="color:#E1E4E8;">ExpressionParser parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpelExpressionParser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//通过上面我们讲的parser.parseExpression方法获得一个Expression的实例，里面实现的就是new一个SpelExpression对象；而parseExpression的参数就是SpEL的使用重点，各种表达式的字符串</span></span>
<span class="line"><span style="color:#6A737D;">//1.简单的string类型用&#39;&#39; 引用</span></span>
<span class="line"><span style="color:#E1E4E8;">Expression exp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;Hello World&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//2.SpEL支持很多功能特性，如调用方法、访问属性、调用构造函数，我们可以直接调用String对象里面的concat方法进行字符串拼接</span></span>
<span class="line"><span style="color:#E1E4E8;">Expression exp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;Hello World&#39;.concat(&#39;!&#39;)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//通过getValue方法可以得到经过Expresion计算parseExpression方法的字符串参数(符合SpEL语法的表达式)的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">String message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String) exp.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//ExpressionParser是操作SpEL的总入口，创建一个接口ExpressionParser对应的实例SpelExpressionParser</span></span>
<span class="line"><span style="color:#24292E;">ExpressionParser parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpelExpressionParser</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//通过上面我们讲的parser.parseExpression方法获得一个Expression的实例，里面实现的就是new一个SpelExpression对象；而parseExpression的参数就是SpEL的使用重点，各种表达式的字符串</span></span>
<span class="line"><span style="color:#6A737D;">//1.简单的string类型用&#39;&#39; 引用</span></span>
<span class="line"><span style="color:#24292E;">Expression exp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&#39;Hello World&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//2.SpEL支持很多功能特性，如调用方法、访问属性、调用构造函数，我们可以直接调用String对象里面的concat方法进行字符串拼接</span></span>
<span class="line"><span style="color:#24292E;">Expression exp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&#39;Hello World&#39;.concat(&#39;!&#39;)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//通过getValue方法可以得到经过Expresion计算parseExpression方法的字符串参数(符合SpEL语法的表达式)的结果</span></span>
<span class="line"><span style="color:#24292E;">String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String) exp.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span></code></pre></div><p>而访问属性值如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//3.invokes getBytes()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">Expression exp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;Hello World&#39;.bytes&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[]) exp.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//得到 byte[]类型的结果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//3.invokes getBytes()方法</span></span>
<span class="line"><span style="color:#24292E;">Expression exp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&#39;Hello World&#39;.bytes&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[]) exp.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//得到 byte[]类型的结果</span></span></code></pre></div><p>SpEL 字符串表达式还支持使用&quot;.&quot;进行嵌套属性 prop1.prop2.prop3 访问，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// invokes getBytes().length</span></span>
<span class="line"><span style="color:#E1E4E8;">Expression exp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;Hello World&#39;.bytes.length&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Integer) exp.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// invokes getBytes().length</span></span>
<span class="line"><span style="color:#24292E;">Expression exp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&#39;Hello World&#39;.bytes.length&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Integer) exp.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span></code></pre></div><p>访问构造方法，例如字符串的构造方法，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Expression exp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;new String(&#39;hello world&#39;).toUpperCase()&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">String message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exp.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(String.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Expression exp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new String(&#39;hello world&#39;).toUpperCase()&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exp.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(String.class);</span></span></code></pre></div><p>我们也可以通过 EvaluationContext 来配置一些根元素，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//我们通过一个Expression表达式想取name属性对应的值</span></span>
<span class="line"><span style="color:#E1E4E8;">ExpressionParser parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpelExpressionParser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Expression exp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//我们通过EvaluationContext设置rootObject等于我们new的UserInfo对象</span></span>
<span class="line"><span style="color:#E1E4E8;">UserInfo rootUserInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserInfo.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">EvaluationContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StandardEvaluationContext</span><span style="color:#E1E4E8;">(rootUserInfo);</span></span>
<span class="line"><span style="color:#6A737D;">//getValue根据我们设置context取值，可以得到jack字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String) exp.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#6A737D;">//我们也可以利用SpEL的表达式进行运算，判断名字是否等于字符串Nikola</span></span>
<span class="line"><span style="color:#E1E4E8;">Expression exp2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name == &#39;Nikola&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> result2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exp2.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(context, Boolean.class); </span><span style="color:#6A737D;">// 根据我们UserInfo的rootObject得到false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//我们通过一个Expression表达式想取name属性对应的值</span></span>
<span class="line"><span style="color:#24292E;">ExpressionParser parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpelExpressionParser</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Expression exp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//我们通过EvaluationContext设置rootObject等于我们new的UserInfo对象</span></span>
<span class="line"><span style="color:#24292E;">UserInfo rootUserInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserInfo.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">EvaluationContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardEvaluationContext</span><span style="color:#24292E;">(rootUserInfo);</span></span>
<span class="line"><span style="color:#6A737D;">//getValue根据我们设置context取值，可以得到jack字符串</span></span>
<span class="line"><span style="color:#24292E;">String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String) exp.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#6A737D;">//我们也可以利用SpEL的表达式进行运算，判断名字是否等于字符串Nikola</span></span>
<span class="line"><span style="color:#24292E;">Expression exp2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name == &#39;Nikola&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> result2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exp2.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(context, Boolean.class); </span><span style="color:#6A737D;">// 根据我们UserInfo的rootObject得到false</span></span></code></pre></div><p>我们在看 SpelExpressionParser 的构造方法时，会发现其还支持一些配置，例如我们经常遇到空指针异常和下标越界的问题，就可以通过 SpelParserConfiguration 配置：当 Null 的时候自动初始化，当 Collection 越界的时候自动扩容增加。我们看一下例子，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//构造一个Class，方便测试</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyUser</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//开启自动初始化null和自动扩容collection</span></span>
<span class="line"><span style="color:#E1E4E8;">SpelParserConfiguration config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpelParserConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//利用config生成ExpressionParser的实例</span></span>
<span class="line"><span style="color:#E1E4E8;">ExpressionParser parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpelExpressionParser</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#6A737D;">//我们通过表达式取这个用户的第三个地址</span></span>
<span class="line"><span style="color:#E1E4E8;">Expression expression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address[3]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">MyUser demo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyUser</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#6A737D;">//new一个对象，但是没有初始化MyUser里面的address，由于我们配置了自动初始化和扩容，所以通过下面的计算，没有得到异常，o可以得到一个空的字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">Object o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> expression.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(demo);</span><span style="color:#6A737D;">// 空字符串</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//构造一个Class，方便测试</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyUser</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; address;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//开启自动初始化null和自动扩容collection</span></span>
<span class="line"><span style="color:#24292E;">SpelParserConfiguration config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpelParserConfiguration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//利用config生成ExpressionParser的实例</span></span>
<span class="line"><span style="color:#24292E;">ExpressionParser parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpelExpressionParser</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#6A737D;">//我们通过表达式取这个用户的第三个地址</span></span>
<span class="line"><span style="color:#24292E;">Expression expression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address[3]&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">MyUser demo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyUser</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#6A737D;">//new一个对象，但是没有初始化MyUser里面的address，由于我们配置了自动初始化和扩容，所以通过下面的计算，没有得到异常，o可以得到一个空的字符串</span></span>
<span class="line"><span style="color:#24292E;">Object o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> expression.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(demo);</span><span style="color:#6A737D;">// 空字符串</span></span></code></pre></div><p>通过上面的介绍，你大概就知道 SpEL 是什么意思了，也知道了该怎么单独使用它，其实不难理解。不过 SpEL 的功能远不止这么简单，我们通过在 Spring 中常见的应用场景，看一下它还有哪些功能。</p><h3 id="spel-在-spring-中常见的使用场景" tabindex="-1">SpEL 在 Spring 中常见的使用场景 <a class="header-anchor" href="#spel-在-spring-中常见的使用场景" aria-label="Permalink to &quot;SpEL 在 Spring 中常见的使用场景&quot;">​</a></h3><p>SpEL 在 @Value 里面的用法最常见，我们通过 @Value 来了解一下。</p><h4 id="value-的应用场景" tabindex="-1">@Value 的应用场景 <a class="header-anchor" href="#value-的应用场景" aria-label="Permalink to &quot;@Value 的应用场景&quot;">​</a></h4><p>新建一个 DemoProperties 对象，用 Spring 装载，测试一下两个语法点：运算符和 Map、List。</p><p>**第一个语法：通过 @Value 展示 SpEL 里面支持的各种运算符的写法。**如下面的表格所示。</p><table><thead><tr><th><strong>类型</strong></th><th><strong>操作符</strong></th></tr></thead><tbody><tr><td>逻辑运算</td><td>+, -, *, /, %, ^, div, mod</td></tr><tr><td>逻辑比较符号</td><td>&lt;, &gt;, ==, !=, &lt;=, &gt;=, lt, gt, eq, ne, le, ge</td></tr><tr><td>逻辑关系</td><td>and, or, not, &amp;&amp;, ||, !</td></tr><tr><td>三元表达式</td><td>?:</td></tr><tr><td>正则表达式</td><td>matches</td></tr></tbody></table><p>我们通过四部分代码展示一下 SpEL 里面支持的各种运算符，用法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//通过@Value使用SpEL的地方，一定要将此对象交由Spring进行管理</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoProperties</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//第一部分：逻辑运算操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{19 + 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 20</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> add;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{&#39;String1 &#39; + &#39;string2&#39;}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;String1 string2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String addString;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{20 - 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 19</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> subtract;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{10 * 2}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 20</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> multiply;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{36 / 2}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 19</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> divide;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{36 div 2}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 18, the same as for / operator</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> divideAlphabetic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{37 % 10}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> modulo;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{37 mod 10}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 7, the same as for % operator</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> moduloAlphabetic;</span></span>
<span class="line"><span style="color:#6A737D;">// 第二部分：逻辑比较符号</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 == 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> equal;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 eq 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> equalAlphabetic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 != 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> notEqual;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 ne 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> notEqualAlphabetic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 &lt; 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> lessThan;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 lt 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> lessThanAlphabetic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 &lt;= 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> lessThanOrEqual;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 le 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> lessThanOrEqualAlphabetic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 &gt; 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> greaterThan;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 gt 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> greaterThanAlphabetic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 &gt;= 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> greaterThanOrEqual;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{1 ge 1}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> greaterThanOrEqualAlphabetic;</span></span>
<span class="line"><span style="color:#6A737D;">//第三部分：逻辑关系运算符    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{250 &gt; 200 &amp;&amp; 200 &lt; 4000}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> and;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{250 &gt; 200 and 200 &lt; 4000}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> andAlphabetic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{400 &gt; 300 || 150 &lt; 100}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> or;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{400 &gt; 300 or 150 &lt; 100}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> orAlphabetic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{!true}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> not;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{not true}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> notAlphabetic;    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#6A737D;">//第四部分：三元表达式 &amp; Elvis运算符</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{2 &gt; 1 ? &#39;a&#39; : &#39;b&#39;}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;b&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String ternary;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//demoProperties就是我们通过spring加载的当前对象，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//我们取spring容器里面的某个bean的属性，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//这里我们取的是demoProperties对象里面的someProperty属性，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//如果不为null就直接用，如果为null返回&#39;default&#39;字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{demoProperties.someProperty != null ? demoProperties.someProperty : &#39;default&#39;}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String ternaryProperty;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Elvis运算符是三元表达式简写的方式，和上面一样的结果。如果someProperty为null则返回default值。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{demoProperties.someProperty ?: &#39;default&#39;}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String elvis;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 取系统环境的属性，如果系统属性pop3.port已定义会直接注入，如果未定义，则返回默认值25。systemProperties是spring容器里面的systemProperties实体；</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{systemProperties[&#39;pop3.port&#39;] ?: 25}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer port;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 还可以用于安全引用运算符主要为了避免空指针，源于Groovy语言。</span></span>
<span class="line"><span style="color:#6A737D;">     * 很多时候你引用一个对象的方法或者属性时都需要做非空校验。</span></span>
<span class="line"><span style="color:#6A737D;">     * 为了避免此类问题，使用安全引用运算符只会返回null而不是抛出一个异常。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//@Value(&quot;#{demoPropertiesx?:someProperty}&quot;) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果demoPropertiesx不为null，则返回someProperty值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String someProperty;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#6A737D;">//第五部分：正则表达式的支持</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{&#39;100&#39; matches &#39;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+&#39; }&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> validNumericStringResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{&#39;100fghdjf&#39; matches &#39;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+&#39; }&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> invalidNumericStringResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 利用matches匹配正则表达式，返回true</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{&#39;valid alphabetic string&#39; matches &#39;[a-zA-Z</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">s]+&#39; }&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> validAlphabeticStringResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{&#39;invalid alphabetic string #$1&#39; matches &#39;[a-zA-Z</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">s]+&#39; }&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> invalidAlphabeticStringResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//如果someValue只有数字</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{demoProperties.someValue matches &#39;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+&#39;}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> validNumericValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//新增一个空的someValue属性方便测试</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String someValue</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//通过@Value使用SpEL的地方，一定要将此对象交由Spring进行管理</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoProperties</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//第一部分：逻辑运算操作</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{19 + 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 20</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> add;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{&#39;String1 &#39; + &#39;string2&#39;}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;String1 string2&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String addString;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{20 - 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 19</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> subtract;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{10 * 2}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 20</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> multiply;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{36 / 2}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 19</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> divide;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{36 div 2}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 18, the same as for / operator</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> divideAlphabetic;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{37 % 10}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> modulo;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{37 mod 10}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 7, the same as for % operator</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> moduloAlphabetic;</span></span>
<span class="line"><span style="color:#6A737D;">// 第二部分：逻辑比较符号</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 == 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> equal;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 eq 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> equalAlphabetic;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 != 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> notEqual;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 ne 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> notEqualAlphabetic;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 &lt; 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> lessThan;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 lt 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> lessThanAlphabetic;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 &lt;= 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> lessThanOrEqual;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 le 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> lessThanOrEqualAlphabetic;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 &gt; 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> greaterThan;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 gt 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> greaterThanAlphabetic;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 &gt;= 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> greaterThanOrEqual;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{1 ge 1}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> greaterThanOrEqualAlphabetic;</span></span>
<span class="line"><span style="color:#6A737D;">//第三部分：逻辑关系运算符    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{250 &gt; 200 &amp;&amp; 200 &lt; 4000}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> and;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{250 &gt; 200 and 200 &lt; 4000}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> andAlphabetic;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{400 &gt; 300 || 150 &lt; 100}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> or;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{400 &gt; 300 or 150 &lt; 100}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> orAlphabetic;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{!true}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> not;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{not true}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> notAlphabetic;    </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;">//第四部分：三元表达式 &amp; Elvis运算符</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{2 &gt; 1 ? &#39;a&#39; : &#39;b&#39;}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;b&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String ternary;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//demoProperties就是我们通过spring加载的当前对象，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//我们取spring容器里面的某个bean的属性，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//这里我们取的是demoProperties对象里面的someProperty属性，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//如果不为null就直接用，如果为null返回&#39;default&#39;字符串</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{demoProperties.someProperty != null ? demoProperties.someProperty : &#39;default&#39;}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String ternaryProperty;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Elvis运算符是三元表达式简写的方式，和上面一样的结果。如果someProperty为null则返回default值。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{demoProperties.someProperty ?: &#39;default&#39;}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String elvis;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 取系统环境的属性，如果系统属性pop3.port已定义会直接注入，如果未定义，则返回默认值25。systemProperties是spring容器里面的systemProperties实体；</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{systemProperties[&#39;pop3.port&#39;] ?: 25}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer port;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 还可以用于安全引用运算符主要为了避免空指针，源于Groovy语言。</span></span>
<span class="line"><span style="color:#6A737D;">     * 很多时候你引用一个对象的方法或者属性时都需要做非空校验。</span></span>
<span class="line"><span style="color:#6A737D;">     * 为了避免此类问题，使用安全引用运算符只会返回null而不是抛出一个异常。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//@Value(&quot;#{demoPropertiesx?:someProperty}&quot;) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果demoPropertiesx不为null，则返回someProperty值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String someProperty;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;">//第五部分：正则表达式的支持</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{&#39;100&#39; matches &#39;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+&#39; }&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> validNumericStringResult;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{&#39;100fghdjf&#39; matches &#39;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+&#39; }&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> invalidNumericStringResult;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 利用matches匹配正则表达式，返回true</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{&#39;valid alphabetic string&#39; matches &#39;[a-zA-Z</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s]+&#39; }&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> validAlphabeticStringResult;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{&#39;invalid alphabetic string #$1&#39; matches &#39;[a-zA-Z</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s]+&#39; }&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> invalidAlphabeticStringResult;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//如果someValue只有数字</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{demoProperties.someValue matches &#39;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+&#39;}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> validNumericValue;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//新增一个空的someValue属性方便测试</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String someValue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以通过 @Value 测试各种 SpEL 的表达式，这和放在 parser.parseExpression(&quot;SpEL 的表达式字符串&quot;); 里面的效果是一样的。我们可以写一个测试用例来看一下，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ExtendWith</span><span style="color:#E1E4E8;">(SpringExtension.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(TestConfiguration.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ComponentScan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;com.example.jpa.demo.config.DemoProperties&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoPropertiesTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">required</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DemoProperties demoProperties;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testSpel</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过测试用例就可以测试@Value里面不同表达式的值了</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(demoProperties.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DemoProperties </span><span style="color:#B392F0;">demoProperties</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ExtendWith</span><span style="color:#24292E;">(SpringExtension.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(TestConfiguration.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;com.example.jpa.demo.config.DemoProperties&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoPropertiesTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">required</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DemoProperties demoProperties;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testSpel</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过测试用例就可以测试@Value里面不同表达式的值了</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(demoProperties.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestConfiguration</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DemoProperties </span><span style="color:#6F42C1;">demoProperties</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>或者你可以启动一下项目，也能看到结果。</p><p>下面我们通过源码来分析一下 @Value 的解析原理。Spring 项目启动的时候会根据 @Value 的注解，去加载 SpelExpressionResolver 及算出来需要的 StandardEvaluationContext，然后再调用 Expression 方法进行 getValue 操作，其中计算 StandardEvaluationContext 的关键源码如下面两张图所示。</p>`,27),g=l(`<p><strong>第二个语法：@Value 展示了 SpEL 可以直接读取 Map 和 List 里面的值</strong>，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//我们通过@Component加载一个类，并且给其中的List和Map附上值</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;workersHolder&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WorkersHolder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; workers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; salaryByWorkers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WorkersHolder</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        workers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        workers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Susie&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        workers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Alex&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        workers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;George&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        salaryByWorkers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">35000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        salaryByWorkers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Susie&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">47000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        salaryByWorkers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Alex&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        salaryByWorkers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;George&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">14000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//Getters and setters ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//SpEL直接读取Map和List里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{workersHolder.salaryByWorkers[&#39;John&#39;]}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 35000</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer johnSalary;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{workersHolder.salaryByWorkers[&#39;George&#39;]}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 14000</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer georgeSalary;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{workersHolder.salaryByWorkers[&#39;Susie&#39;]}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 47000</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer susieSalary;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{workersHolder.workers[0]}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// John</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String firstWorker;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{workersHolder.workers[3]}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// George</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String lastWorker;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#{workersHolder.workers.size()}&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer numberOfWorkers;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//我们通过@Component加载一个类，并且给其中的List和Map附上值</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;workersHolder&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WorkersHolder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; workers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; salaryByWorkers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WorkersHolder</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        workers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;John&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        workers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Susie&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        workers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Alex&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        workers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;George&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        salaryByWorkers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;John&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">35000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        salaryByWorkers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Susie&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">47000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        salaryByWorkers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Alex&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        salaryByWorkers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;George&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//Getters and setters ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//SpEL直接读取Map和List里面的值</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{workersHolder.salaryByWorkers[&#39;John&#39;]}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 35000</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer johnSalary;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{workersHolder.salaryByWorkers[&#39;George&#39;]}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 14000</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer georgeSalary;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{workersHolder.salaryByWorkers[&#39;Susie&#39;]}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 47000</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer susieSalary;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{workersHolder.workers[0]}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// John</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String firstWorker;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{workersHolder.workers[3]}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// George</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String lastWorker;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#{workersHolder.workers.size()}&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer numberOfWorkers;</span></span></code></pre></div><p>以上就是 SpEL 的运算符和对 Map、List、SpringBeanFactory 里面的 Bean 的调用情况，不知道你是否掌握了？那么使用 @Value 都有哪些需要注意的呢？</p><p><strong>@Value 使用的注意事项 # 与 $ 的区别</strong></p><p>SpEL 表达式默认以 # 开始，以大括号进行包住，如 #{expression}。默认规则在 ParserContext 里面设置，我们也可以自定义，但是一般建议不要动。</p>`,5),D=l(`<p>这里注意要与 Spring 中的 Properties 进行区别，Properties 相关的表达式是以 $ 开始的大括号进行包住的，如 \${property.name}。</p><p>也就是说 @Value 的值有两类：</p><ul><li><p>\${ property**:**default_value }</p></li><li><p>#{ obj.property**? :**default_value }</p></li></ul><p>第一个注入的是外部参数对应的 Property，第二个则是 SpEL 表达式对应的内容。</p><p>而 Property placeholders 不能包含 SpEL 表达式，但是 SpEL 表达式可以包含 Property 的引用。如 #{\${someProperty} + 2}，如果 someProperty=1，那么效果将是 #{ 1 + 2}，最终的结果将是 3。</p><p>上面我们通过 @Value 的应用场景讲解了一部分 SpEL 的语法，此外它同样适用于 @Query 注解，那么我们通过 @Query 再学习一些 SpEL 的其他语法。</p><h4 id="jpa-中-query-的应用场景" tabindex="-1">JPA 中 @Query 的应用场景 <a class="header-anchor" href="#jpa-中-query-的应用场景" aria-label="Permalink to &quot;JPA 中 @Query 的应用场景&quot;">​</a></h4><p>SpEL 除了能在 @Value 里面使用外，也能在 @Query 里使用，而在 @Query 里还有一个特殊的地方，就是它可以用来取方法的参数。</p><p><strong>通过 SpEL 取被 @Query 注解的方法参数</strong></p><p>在 @Query 注解中使用 SpEL 的主要目的是取方法的参数，主要有三种用法，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//用法一：根据下标取方法里面的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from User u where u.age = ?#{[0]}&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findUsersByAge</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age);</span></span>
<span class="line"><span style="color:#6A737D;">//用法二：#customer取@Param(&quot;customer&quot;)里面的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from User u where u.firstname = :#{#customer.firstname}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findUsersByCustomersFirstname</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;customer&quot;</span><span style="color:#E1E4E8;">) Customer customer);</span></span>
<span class="line"><span style="color:#6A737D;">//用法三：用JPA约定的变量entityName取得当前实体的实体名字</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;from #{#entityName}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UserInfo</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findAllByEntityName</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//用法一：根据下标取方法里面的参数</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from User u where u.age = ?#{[0]}&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findUsersByAge</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age);</span></span>
<span class="line"><span style="color:#6A737D;">//用法二：#customer取@Param(&quot;customer&quot;)里面的参数</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from User u where u.firstname = :#{#customer.firstname}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findUsersByCustomersFirstname</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;customer&quot;</span><span style="color:#24292E;">) Customer customer);</span></span>
<span class="line"><span style="color:#6A737D;">//用法三：用JPA约定的变量entityName取得当前实体的实体名字</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;from #{#entityName}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UserInfo</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findAllByEntityName</span><span style="color:#24292E;">();</span></span></code></pre></div><p>其中，</p><ul><li><p>方法一可以通过 [0] 的方式，根据下标取到方法的参数；</p></li><li><p>方法二通过 #customer 可以根据 @Param 注解的参数的名字取到参数，必须通过 ?#{} 和 :#{} 来触发 SpEL 的表达式语法；</p></li><li><p>方法三通过 #{#entityName} 取约定的实体的名字。</p></li></ul><p>你要注意区别我们在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=490#/detail/pc?id=4705" target="_blank" rel="noreferrer">05 | @Query 解决了什么问题？什么时候应该选择它？</a>&quot;中介绍的取 @Param 的用法<code>:lastname</code>这种方式。</p><p>下面我们再来看一个更复杂一点的例子，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// JPA约定的变量entityName取得当前实体的实体名字</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;from #{#entityName}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllByEntityName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//一个查询中既可以支持SpEL也可以支持普通的:ParamName的方式</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Modifying</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;update #{#entityName} u set u.name = :name where u.id =:id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateUserActiveState</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">) Long </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//演示SpEL根据数组下标取参数，和根据普通的Parma的名字:name取参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from UserInfo u where u.lastName like %:#{[0]} and u.name like %:name%&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findContainingEscaped</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//SpEL取Parma的名字customer里面的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from UserInfo u where u.name = :#{#customer.name}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findUsersByCustomersFirstname</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;customer&quot;</span><span style="color:#E1E4E8;">) UserInfo </span><span style="color:#FFAB70;">customer</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//利用SpEL根据一个写死的&#39;jack&#39;字符串作为参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from UserInfo u where u.name = ?#{&#39;jack&#39;}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findOliverBySpELExpressionWithoutArgumentsWithQuestionmark</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//同时SpEL支持特殊函数escape和escapeCharacter</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from UserInfo u where u.lastName like %?#{escape([0])}% escape ?#{escapeCharacter()}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByNameWithSpelExpression</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// #entityName和#[]同时使用</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from #{#entityName} u where u.name = ?#{[0]} and u.lastName = ?#{[1]}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findUsersByFirstnameForSpELExpressionWithParameterIndexOnlyWithEntityExpression</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">lastName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//对于 native SQL同样适用，并且同样支持取pageable分页里面的属性值</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;select * from (&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;select u.*, rownum() as RN from (&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;select * from user_info ORDER BY ucase(firstname)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;) u&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;) where RN between ?#{ #pageable.offset +1 } and ?#{#pageable.offset + #pageable.pageSize}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">countQuery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;select count(u.id) from user_info u&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">nativeQuery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   Page&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findUsersInNativeQueryWithPagination</span><span style="color:#E1E4E8;">(Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// JPA约定的变量entityName取得当前实体的实体名字</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;from #{#entityName}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllByEntityName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//一个查询中既可以支持SpEL也可以支持普通的:ParamName的方式</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Modifying</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;update #{#entityName} u set u.name = :name where u.id =:id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateUserActiveState</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">) Long </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//演示SpEL根据数组下标取参数，和根据普通的Parma的名字:name取参数</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from UserInfo u where u.lastName like %:#{[0]} and u.name like %:name%&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findContainingEscaped</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//SpEL取Parma的名字customer里面的属性</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from UserInfo u where u.name = :#{#customer.name}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findUsersByCustomersFirstname</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;customer&quot;</span><span style="color:#24292E;">) UserInfo </span><span style="color:#E36209;">customer</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//利用SpEL根据一个写死的&#39;jack&#39;字符串作为参数</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from UserInfo u where u.name = ?#{&#39;jack&#39;}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findOliverBySpELExpressionWithoutArgumentsWithQuestionmark</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//同时SpEL支持特殊函数escape和escapeCharacter</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from UserInfo u where u.lastName like %?#{escape([0])}% escape ?#{escapeCharacter()}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByNameWithSpelExpression</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// #entityName和#[]同时使用</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from #{#entityName} u where u.name = ?#{[0]} and u.lastName = ?#{[1]}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findUsersByFirstnameForSpELExpressionWithParameterIndexOnlyWithEntityExpression</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">lastName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//对于 native SQL同样适用，并且同样支持取pageable分页里面的属性值</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;select * from (&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;select u.*, rownum() as RN from (&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;select * from user_info ORDER BY ucase(firstname)&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;) u&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;) where RN between ?#{ #pageable.offset +1 } and ?#{#pageable.offset + #pageable.pageSize}&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">countQuery</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;select count(u.id) from user_info u&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">nativeQuery</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   Page&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findUsersInNativeQueryWithPagination</span><span style="color:#24292E;">(Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我个人比较推荐使用 @Param 的方式，这样语义清晰，参数换位置了也不影响执行结果。</p><p>关于源码的实现，你可以到 ExpressionBasedStringQuery.class 里面继续研究，关键代码如下图所示。</p>`,18),m=l(`<p>好了，以上就是 @Query 支持的 SpEL 的基本语法，其他场景我就不多列举了。那么其实 JPA 还支持自定义 rootObject，我们看一下。</p><p><strong>spring-security-data 在 @Query 中的用法</strong></p><p>在实际工作中，我发现有些同事会用 spring-security 做鉴权，详细的 Spring Secrity 如何集成不是我们的重点，我就不多介绍了，具体怎么集成你可以查看官方文档：<a href="https://spring.io/projects/spring-security#learn" target="_blank" rel="noreferrer">https://spring.io/projects/spring-security#learn</a>。</p><p>我想说的是，当我们用 Spring Secrity 的时候，其实可以额外引入 jai 包 spring-security-data。如果我们使用了 JPA 和 Spring Secrity 的话，build.gradle 最终会变成如下形式，请看代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//引入spring data jpa</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-data-jpa&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//集成spring security</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-security&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 集成spring security data对JPA的支持</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.security:spring-security-data&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//引入spring data jpa</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-data-jpa&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//集成spring security</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-security&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 集成spring security data对JPA的支持</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;org.springframework.security:spring-security-data&#39;</span></span></code></pre></div><p>我们假设继承 Spring Security 之后，SecurityContextHolder 里面放置的 Authentication 是 UserInfo，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//应用上下文中设置登录用户信息，此时Authentication类型为UserInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">SecurityContextHolder.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setAuthentication</span><span style="color:#E1E4E8;">(authentication);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//应用上下文中设置登录用户信息，此时Authentication类型为UserInfo</span></span>
<span class="line"><span style="color:#24292E;">SecurityContextHolder.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setAuthentication</span><span style="color:#24292E;">(authentication);</span></span></code></pre></div><p>这样 JPA 里面的 @Query 就可以取到当前的 SecurityContext 信息，其用法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 根据当前用户email取当前用户的信息</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select u from UserInfo u where u.emailAddress = ?#{principal.email}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UserInfo</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findCurrentUserWithCustomQuery</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//如果当前用户是admin，我们就返回某业务的所有对象；如果不是admin角色，就只给当前用户的某业务数据</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select o from BusinessObject o where o.owner.emailAddress like &quot;</span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;?#{hasRole(&#39;ROLE_ADMIN&#39;) ? &#39;%&#39; : principal.emailAddress}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">BusinessObject</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findBusinessObjectsForCurrentUser</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 根据当前用户email取当前用户的信息</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select u from UserInfo u where u.emailAddress = ?#{principal.email}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UserInfo</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findCurrentUserWithCustomQuery</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//如果当前用户是admin，我们就返回某业务的所有对象；如果不是admin角色，就只给当前用户的某业务数据</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select o from BusinessObject o where o.owner.emailAddress like &quot;</span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;?#{hasRole(&#39;ROLE_ADMIN&#39;) ? &#39;%&#39; : principal.emailAddress}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">BusinessObject</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findBusinessObjectsForCurrentUser</span><span style="color:#24292E;">();</span></span></code></pre></div><p>我们通过看源码会发现，spring-security-data 就帮我们做了一件事情：实现 EvaluationContextExtension，设置了 SpEL 所需要的 rootObject 为 SecurityExpressionRoot。关键代码如下图所示。</p>`,10),q=s("p",null,"由于 SecurityExpressionRoot 是 rootObject，根据我们上面介绍的 SpEL 的基本用法，SecurityExpressionRoot 里面的各种属性和方法都可以在 SpEL 中使用，如下图所示。",-1),h=l(`<p>这其实也给了我们一些启发：当需要自动 rootObject 给 @Query 使用的时候，也可以采用这种方式，这样 @Query 的灵活性会增强很多。</p><p>最后我们再看看 SpEL 在 @Cacheable 里面做了哪些支持。</p><h4 id="spel-在-cacheable-中的应用场景" tabindex="-1">SpEL 在 @Cacheable 中的应用场景 <a class="header-anchor" href="#spel-在-cacheable-中的应用场景" aria-label="Permalink to &quot;SpEL 在 @Cacheable 中的应用场景&quot;">​</a></h4><p>我们在实际工作中还有一个经常用到 SpEL 的场景，就是在 Cache 的时候，也就是 Spring Cache 的相关注解里面，如 @Cacheable、@CachePut、@CacheEvict 等。我们还是通过例子来体会一下，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//缓存key取当前方法名，判断一下只有返回结果不为null或者非empty才进行缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Cacheable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;APP&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#root.methodName&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">cacheManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;redis.cache&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">unless</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#result == null || #result.isEmpty()&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAppGlobalSettings</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#6A737D;">//evict策略的key是当前参数customer里面的name属性</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Caching</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">evict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CacheEvict</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;directory&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">key</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;#customer.name&quot;</span><span style="color:#E1E4E8;">) })</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(Customer customer) {...}</span></span>
<span class="line"><span style="color:#6A737D;">//在condition里面使用，当参数里面customer的name属性的值等于字符串Tom才放到缓存里面</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CachePut</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;addresses&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">condition</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;#customer.name==&#39;Tom&#39;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(Customer customer) {...}</span></span>
<span class="line"><span style="color:#6A737D;">//用在unless里面，利用SpEL的条件表达式判断，排除返回的结果地址长度小于64的请求</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CachePut</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;addresses&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">unless</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;#result.length()&lt;64&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(Customer customer) {...}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//缓存key取当前方法名，判断一下只有返回结果不为null或者非empty才进行缓存</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Cacheable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;APP&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#root.methodName&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">cacheManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;redis.cache&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">unless</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#result == null || #result.isEmpty()&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAppGlobalSettings</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#6A737D;">//evict策略的key是当前参数customer里面的name属性</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Caching</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">evict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CacheEvict</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;directory&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;#customer.name&quot;</span><span style="color:#24292E;">) })</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(Customer customer) {...}</span></span>
<span class="line"><span style="color:#6A737D;">//在condition里面使用，当参数里面customer的name属性的值等于字符串Tom才放到缓存里面</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CachePut</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;addresses&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">condition</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;#customer.name==&#39;Tom&#39;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(Customer customer) {...}</span></span>
<span class="line"><span style="color:#6A737D;">//用在unless里面，利用SpEL的条件表达式判断，排除返回的结果地址长度小于64的请求</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CachePut</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;addresses&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">unless</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;#result.length()&lt;64&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(Customer customer) {...}</span></span></code></pre></div><p><strong>Spring Cache 中 SpEL 支持的上下文语法</strong></p><p>Spring Cache 提供了一些供我们使用的 SpEL 上下文数据，如下表所示（摘自 Spring 官方文档）。</p><table><thead><tr><th>支持的属性</th><th>作用域</th><th>功能描述</th><th>使用方法</th></tr></thead><tbody><tr><td>methodName</td><td>root 对象</td><td>当前被调用的方法名</td><td>#root.methodName</td></tr><tr><td>method</td><td>root 对象</td><td>当前被调用的方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>root 对象</td><td>当前被调用的目标对象</td><td>#root.target</td></tr><tr><td>targetClass</td><td>root 对象</td><td>当前被调用的目标对象类</td><td>#root.targetClass</td></tr><tr><td>args</td><td>root 对象</td><td>当前被调用的方法的参数列表</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>root 对象</td><td>当前方法调用使用的缓存列表（如@Cacheable(value={&quot;cache1&quot;, &quot;cache2&quot;})），则有两个 cache</td><td>#root.caches[0].name</td></tr><tr><td>argument name</td><td>执行上下文</td><td>当前被调用的方法的参数，如 findById(Long id)，我们可以通过 #id 拿到参数</td><td>#user.id 表示参数 user 里面的 id</td></tr><tr><td>result</td><td>执行上下文</td><td>方法执行后的返回值（仅当方法执行之后的判断有效，如&#39;unless&#39;，&#39;cache evict&#39;的 beforeInvocation=false）</td><td>#result</td></tr></tbody></table><p>有兴趣的话，你可以看一下 Spring Cache 中 SpEL 的 EvaluationContext 加载方式，关键源码如下图所示。</p>`,9),C=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),v=s("p",null,"本讲内容到这里就结束了。这一讲我们通过 SpEL 的基本语法介绍，分别介绍了其在 @Value、@Query、@Cache 注解里面的使用场景和方法，其中 # 和 $ 是容易在 @Value 里面犯错的地方；@Param 的用法 : 和 # 也是 @Query 里面容易犯错的地方，你要注意一下。",-1),b=s("p",null,"其实任何形式的 SpEL 的变化都离不开它基本的三个接口：ExpressionParser、Expression、EvaluationContext，只不过框架提供了不同形式的封装，你也可以根据实际场景自由扩展。",-1),S=s("p",null,"关于这一讲内容，希望你能认真去思考，有问题可以在下方留言，我们一起讨论。下一讲我们来聊聊 Hibernate 中一级缓存的概念，到时见。",-1),B=s("blockquote",null,[s("p",null,[n("点击下方链接查看源码（不定时更新）"),s("br"),s("a",{href:"https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa",target:"_blank",rel:"noreferrer"},"https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa")])],-1);function f(x,P,k,_,V,L){const a=e("Image");return t(),r("div",null,[E,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/84/88/Ciqc1F_TZgOAeZinAAWQDYZICUE395.png"}),n(),y,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/84/93/CgqCHl_TZg6AAkIJAADdShpwElA350.png"}),n(),i,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/84/88/Ciqc1F_TZhaAXrP7AAH3T5PfIR8675.png"}),n(),u,F,d,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/84/93/CgqCHl_TZhyAfk9oAADDsWDvRJM660.png"}),n(),A,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/84/93/CgqCHl_TZjOAeGv_AATHsCZz1as768.png"}),n(),p(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/84/93/CgqCHl_TZjmAW5suAARIid5TtLA365.png"}),n(),g,p(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/84/93/CgqCHl_TZkSAcGUfAAIDnxtLZsQ409.png"}),n(),D,p(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/84/88/Ciqc1F_TZlOAIupqAALzhPEi9nM327.png"}),n(),m,p(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/84/93/CgqCHl_TZl2AIjYgAAYG1kqP1Zw860.png"}),n(),q,p(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/84/88/Ciqc1F_TZmKAbFerAAHOBNbwd44831.png"}),n(),h,p(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/84/93/CgqCHl_TZm6AaOt5AAFe2hVbtrM473.png"}),n(),C,v,b,S,B])}const T=o(c,[["render",f]]);export{I as __pageData,T as default};
