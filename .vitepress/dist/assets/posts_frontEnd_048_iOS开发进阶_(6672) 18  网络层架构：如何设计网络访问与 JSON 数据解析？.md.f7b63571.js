import{_ as l,j as e,o as t,h as c,k as o,f as a,s,Q as p}from"./chunks/framework.d3daa342.js";const T=JSON.parse('{"title":"18网络层架构：如何设计网络访问与JSON数据解析？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6672) 18  网络层架构：如何设计网络访问与 JSON 数据解析？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6672) 18  网络层架构：如何设计网络访问与 JSON 数据解析？.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6672) 18  网络层架构：如何设计网络访问与 JSON 数据解析？.md"},E=s("h1",{id:"_18网络层架构-如何设计网络访问与json数据解析",tabindex:"-1"},[a("18网络层架构：如何设计网络访问与JSON数据解析？ "),s("a",{class:"header-anchor",href:"#_18网络层架构-如何设计网络访问与json数据解析","aria-label":'Permalink to "18网络层架构：如何设计网络访问与JSON数据解析？"'},"​")],-1),y=s("p",null,"为了存取服务器上的数据，并与其他用户进行通信，几乎所有的 iOS App 都会访问后台 API 。目前流行的后台 API 设计有几种方案： RESTful、gRPC、GraphQL 和 WebSocket。其中，gRPC 使用 Protobuf 进行数据传输， GraphQL 和 RESTful 往往使用 JSON 进行传输。",-1),i=s("p",null,"为了把访问后台 API 的网络传输细节给屏蔽掉，并为上层模块提供统一的访问接口，我们在架构 App 的时候，往往会把网络访问封装成一个独立的 Networking 模块。像我们的 Moments App 也不例外，它的这个模块负责访问 BFF，同时把返回的 JSON 数据进行解码。所以，这一讲，我主要介绍下 Networking 模块的架构设计与实现，以及如何使用 Swift 的 Codable 来解码返回的 JSON 数据。",-1),d=s("h3",{id:"networking-模块架构",tabindex:"-1"},[a("Networking 模块架构 "),s("a",{class:"header-anchor",href:"#networking-模块架构","aria-label":'Permalink to "Networking 模块架构"'},"​")],-1),F=s("p",null,"下图是朋友圈功能 Networking 模块的具体架构。",-1),u=p("<p>从上面的图可以看到，作为 Networking 模块的使用者，Repository 模块位于 Networking 模块的上层。在朋友圈功能里面， Repository 模块负责统一管理所有朋友圈的数据，由<code>MomentsRepo</code>和<code>MomentsRepoType</code>所组成。</p><p>其中<code>MomentsRepoType</code>是用于定义接口的协议，实现的逻辑都在遵循了该协议的<code>MomentsRepo</code>结构体里面。 当<code>MomentsRepo</code>需要访问网络数据时，就需要使用到 Networking 模块的组件。</p><p>在朋友圈功能里面，<code>MomentsRepo</code>使用了<code>GetMomentsByUserIDSessionType</code>来获取朋友圈信息，并使用了<code>UpdateMomentLikeSessionType</code>来更新点赞信息。</p><p><code>GetMomentsByUserIDSessionType</code>和<code>UpdateMomentLikeSessionType</code>是 Networking 模块里的两个协议， 它们的实现类型分别是<code>GetMomentsByUserIDSession</code>和<code>UpdateMomentLikeSession</code>结构体。其中，<code>GetMomentsByUserIDSession</code>通过访问 BFF 来读取朋友圈信息，而<code>UpdateMomentLikeSession</code>通过 BFF 来更新点赞信息。当 BFF 返回时，它们都会使用<code>JSONDecoder</code>来把返回的 JSON 数据解码成名为<code>MomentsDetails</code>的 Model 数据。</p><p>那为什么<code>MomentsRepo</code>依赖<code>GetMomentsByUserIDSessionType</code>协议而不是<code>GetMomentsByUserIDSession</code>结构体？因为这样能使<code>MomentsRepo</code>依赖于抽象的接口，而不是具体实现，在 Swift 中，这种模式叫作面对协议编程（Protocol Oriented Programming）。使用了这种模式以后，我们可以很灵活地替换具体的实现类型，提高架构的可扩展性和灵活性。</p><p>目前，我们把访问 GraphQL 的技术细节封装在<code>GetMomentsByUserIDSession</code>里面。假如以后需要把后台改成 gRPC API，在 Moments App 中可以实现另一个结构体来遵循<code>GetMomentsByUserIDSessionType</code>协议，比如命名为<code>GetMomentsByUserIDSessionGRPC</code>，然后把所有访问的 gRPC 的操作都封装在里面（如下图所示），这样我们在不改变<code>MomentsRepo</code>的情况下就支持了新的网络 API。</p>",6),g=p(`<h3 id="networking-模块实现" tabindex="-1">Networking 模块实现 <a class="header-anchor" href="#networking-模块实现" aria-label="Permalink to &quot;Networking 模块实现&quot;">​</a></h3><p>有了架构设计以后我们一起看看 Networking 模块的实现。首先，我会先介绍下底层 HTTP 网络通信模块，然后以 Moments App 朋友圈信息的网络请求为例，为你介绍下怎样开发一个网络请求模块，以及解码 JSON 返回数据。</p><h4 id="底层-http-网络通信模块" tabindex="-1">底层 HTTP 网络通信模块 <a class="header-anchor" href="#底层-http-网络通信模块" aria-label="Permalink to &quot;底层 HTTP 网络通信模块&quot;">​</a></h4><p>为了方便访问支持 RESTFul 和 GraphQL 的 API， 在 Moments App 中，我们开发了一个底层 HTTP 网络通信模块，该模块把所有 HTTP 请求封装起来，核心是<code>APISession</code>协议。下面是它的定义。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">APISession</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">associatedtype</span><span style="color:#E1E4E8;"> ReponseType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Codable</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> path: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">parameters</span><span style="color:#E1E4E8;">: Parameters</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">headers</span><span style="color:#E1E4E8;">: HTTPHeaders) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;ReponseType&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">APISession</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">associatedtype</span><span style="color:#24292E;"> ReponseType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Codable</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> path: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">parameters</span><span style="color:#24292E;">: Parameters</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">headers</span><span style="color:#24292E;">: HTTPHeaders) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;ReponseType&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>APISession</code>定义了<code>post(_ path: String, parameters: Parameters?, headers: HTTPHeaders) -&gt; Observable&lt;ReponseType&gt;</code>方法来发起 HTTP POST 请求，然后返回<code>Observable&lt;ReponseType&gt;</code>。有了 Observable 序列，我们就能把网络返回数据引进到以 RxSwift 所连接的 MVVM 框架中。</p><p>你可能问，为什么<code>Observable</code>存放的是<code>ReponseType</code>类型呢？由于<code>APISession</code>并不知道每一个网络请求返回数据的具体类型，因此使用<code>associatedtype</code>来定义<code>ReponseType</code>，以迫使所有遵循它的实现类型都必须指定<code>ReponseType</code>的具体数据类型。</p><p>例如在<code>GetMomentsByUserIDSession</code>里面的<code>Session</code>结构体，我们使用<code>typealias</code>来指定<code>ReponseType</code>的具体类型为<code>Response</code>，其代码示例如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typealias</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReponseType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Response</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typealias</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReponseType</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Response</span></span></code></pre></div><p>为了方便共享 HTTP 网络请求的功能，我们为<code>APISession</code>定义了协议扩展，并给<code>post(_ path: String, parameters: Parameters?, headers: HTTPHeaders) -&gt; Observable&lt;ReponseType&gt;</code>方法提供默认的实现。具体代码示例如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">APISession</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> path: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">headers</span><span style="color:#E1E4E8;">: HTTPHeaders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">], </span><span style="color:#B392F0;">parameters</span><span style="color:#E1E4E8;">: Parameters</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;ReponseType&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;">(path, </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;">: .post, </span><span style="color:#79B8FF;">headers</span><span style="color:#E1E4E8;">: headers, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: parameters, </span><span style="color:#79B8FF;">encoding</span><span style="color:#E1E4E8;">: JSONEncoding.default)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">APISession</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> path: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">headers</span><span style="color:#24292E;">: HTTPHeaders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">], </span><span style="color:#6F42C1;">parameters</span><span style="color:#24292E;">: Parameters</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;ReponseType&gt; {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">request</span><span style="color:#24292E;">(path, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;">: .post, </span><span style="color:#005CC5;">headers</span><span style="color:#24292E;">: headers, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: parameters, </span><span style="color:#005CC5;">encoding</span><span style="color:#24292E;">: JSONEncoding.default)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了提高代码的可重用性，我们定义了名叫<code>request(_ path: String, method: HTTPMethod, headers: HTTPHeaders, parameters: Parameters?, encoding: ParameterEncoding) -&gt; Observable&lt;ReponseType&gt;</code>的私有方法，来支持 HTTP 的其他 Method，代码示例如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> path: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">: HTTPMethod, </span><span style="color:#B392F0;">headers</span><span style="color:#E1E4E8;">: HTTPHeaders, </span><span style="color:#B392F0;">parameters</span><span style="color:#E1E4E8;">: Parameters</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">encoding</span><span style="color:#E1E4E8;">: ParameterEncoding) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;ReponseType&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> baseUrl.</span><span style="color:#79B8FF;">appendingPathComponent</span><span style="color:#E1E4E8;">(path)</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> allHeaders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HTTPHeaders</span><span style="color:#E1E4E8;">(defaultHeaders.</span><span style="color:#79B8FF;">dictionary</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">merging</span><span style="color:#E1E4E8;">(headers.</span><span style="color:#79B8FF;">dictionary</span><span style="color:#E1E4E8;">) { </span><span style="color:#79B8FF;">$1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Observable.create { observer </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Disposable </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> queue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DispatchQueue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">label</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;moments.app.api&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">qos</span><span style="color:#E1E4E8;">: .background, </span><span style="color:#79B8FF;">attributes</span><span style="color:#E1E4E8;">: .concurrent)</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AF.</span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;">(url, </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;">: method, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: parameters, </span><span style="color:#79B8FF;">encoding</span><span style="color:#E1E4E8;">: encoding, </span><span style="color:#79B8FF;">headers</span><span style="color:#E1E4E8;">: allHeaders, </span><span style="color:#79B8FF;">interceptor</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">requestModifier</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#79B8FF;">validate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#79B8FF;">responseJSON</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">queue</span><span style="color:#E1E4E8;">: queue) { response </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#6A737D;">// 处理返回的 JSON 数据</span></span>
<span class="line"><span style="color:#E1E4E8;">               }</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Disposables.create {</span></span>
<span class="line"><span style="color:#E1E4E8;">               request.</span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> path: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">: HTTPMethod, </span><span style="color:#6F42C1;">headers</span><span style="color:#24292E;">: HTTPHeaders, </span><span style="color:#6F42C1;">parameters</span><span style="color:#24292E;">: Parameters</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">encoding</span><span style="color:#24292E;">: ParameterEncoding) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;ReponseType&gt; {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> baseUrl.</span><span style="color:#005CC5;">appendingPathComponent</span><span style="color:#24292E;">(path)</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> allHeaders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HTTPHeaders</span><span style="color:#24292E;">(defaultHeaders.</span><span style="color:#005CC5;">dictionary</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">merging</span><span style="color:#24292E;">(headers.</span><span style="color:#005CC5;">dictionary</span><span style="color:#24292E;">) { </span><span style="color:#005CC5;">$1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Observable.create { observer </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Disposable </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DispatchQueue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">label</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;moments.app.api&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">qos</span><span style="color:#24292E;">: .background, </span><span style="color:#005CC5;">attributes</span><span style="color:#24292E;">: .concurrent)</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AF.</span><span style="color:#005CC5;">request</span><span style="color:#24292E;">(url, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;">: method, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: parameters, </span><span style="color:#005CC5;">encoding</span><span style="color:#24292E;">: encoding, </span><span style="color:#005CC5;">headers</span><span style="color:#24292E;">: allHeaders, </span><span style="color:#005CC5;">interceptor</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">requestModifier</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#005CC5;">validate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#005CC5;">responseJSON</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">queue</span><span style="color:#24292E;">: queue) { response </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#6A737D;">// 处理返回的 JSON 数据</span></span>
<span class="line"><span style="color:#24292E;">               }</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Disposables.create {</span></span>
<span class="line"><span style="color:#24292E;">               request.</span><span style="color:#005CC5;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span></code></pre></div><p>有了<code>request()</code>方法，我们就可以支持不同的 HTTP Method 了。如果需要支持 HTTP GET 请求的时候，只需把<code>HTTPMethod.get</code>传递给该方法就可以了。</p><p><code>request()</code>方法的核心逻辑是怎么样的呢？在该方法里面，我们首先使用<code>Observable.create()</code>方法来创建一个 Observable 序列并返回给调用者，然后在<code>create()</code>方法的封包里使用 Alamofire 的<code>request()</code>方法发起网络请求。为了不阻挡 UI 的响应，我们把该请求安排到后台队列中执行。当我们得到返回的 JSON 以后，会使用下面的代码进行处理。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> response.result {</span></span>
<span class="line"><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> .success</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.data </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// if no error provided by Alamofire return .noData error instead.</span></span>
<span class="line"><span style="color:#E1E4E8;">        observer.</span><span style="color:#79B8FF;">onError</span><span style="color:#E1E4E8;">(response.</span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> APISessionError.noData)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSONDecoder</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">decode</span><span style="color:#E1E4E8;">(ReponseType.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: data)</span></span>
<span class="line"><span style="color:#E1E4E8;">        observer.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(model)</span></span>
<span class="line"><span style="color:#E1E4E8;">        observer.</span><span style="color:#79B8FF;">onCompleted</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        observer.</span><span style="color:#79B8FF;">onError</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">failure</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> error)</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> statusCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.response</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.statusCode {</span></span>
<span class="line"><span style="color:#E1E4E8;">        observer.</span><span style="color:#79B8FF;">onError</span><span style="color:#E1E4E8;">(APISessionError.</span><span style="color:#79B8FF;">networkError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;">: error, </span><span style="color:#79B8FF;">statusCode</span><span style="color:#E1E4E8;">: statusCode))</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        observer.</span><span style="color:#79B8FF;">onError</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> response.result {</span></span>
<span class="line"><span style="color:#D73A49;">case</span><span style="color:#24292E;"> .success</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.data </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// if no error provided by Alamofire return .noData error instead.</span></span>
<span class="line"><span style="color:#24292E;">        observer.</span><span style="color:#005CC5;">onError</span><span style="color:#24292E;">(response.</span><span style="color:#005CC5;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> APISessionError.noData)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSONDecoder</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">decode</span><span style="color:#24292E;">(ReponseType.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: data)</span></span>
<span class="line"><span style="color:#24292E;">        observer.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(model)</span></span>
<span class="line"><span style="color:#24292E;">        observer.</span><span style="color:#005CC5;">onCompleted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        observer.</span><span style="color:#005CC5;">onError</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">case</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">failure</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> error)</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> statusCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.response</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.statusCode {</span></span>
<span class="line"><span style="color:#24292E;">        observer.</span><span style="color:#005CC5;">onError</span><span style="color:#24292E;">(APISessionError.</span><span style="color:#005CC5;">networkError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">error</span><span style="color:#24292E;">: error, </span><span style="color:#005CC5;">statusCode</span><span style="color:#24292E;">: statusCode))</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        observer.</span><span style="color:#005CC5;">onError</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其逻辑是，当网络请求成功了，就把返回的 JSON 数据通过<code>JSONDecoder</code>解码成<code>ReponseType</code>类型，并通过<code>onNext</code>方法发送到 Observable 序列中，接着调用<code>onCompleted</code>方法来关闭数据流；如果发生网络错误，就通过<code>onError</code>方法来发送错误事件。</p><h4 id="请求朋友圈信息模块" tabindex="-1">请求朋友圈信息模块 <a class="header-anchor" href="#请求朋友圈信息模块" aria-label="Permalink to &quot;请求朋友圈信息模块&quot;">​</a></h4><p>有了底层 HTTP 网络通信模块以后，我们来看看怎样开发一个网络请求模块。</p><p>在 Moments App 中，为了分离责任和方便管理，我们为每一个网络请求都定义了一个协议以及对应的实现结构体。在我们的例子中，它们分别是<code>GetMomentsByUserIDSessionType</code>协议和<code>GetMomentsByUserIDSession</code>结构体。</p><p>其中<code>GetMomentsByUserIDSessionType</code>协议的定义如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetMomentsByUserIDSessionType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;MomentsDetails&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetMomentsByUserIDSessionType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;MomentsDetails&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该协议只定义了一个<code>getMoments(userID: String) -&gt; Observable&lt;MomentsDetails&gt;</code>方法来提供访问朋友圈信息的接口。因为每个用户的朋友圈信息都不一样，我们需要把用户 ID 传递给该方法，并返回包含了<code>MomentsDetails</code>的 Observable 序列。</p><p>接下来看看<code>GetMomentsByUserIDSession</code>结构体的实现。因为<code>GetMomentsByUserIDSession</code>遵循了<code>etMomentsByUserIDSessionType</code>协议，因此必须实现来自该协议的<code>getMoments(userID: String) -&gt; Observable&lt;MomentsDetails&gt;</code>方法。具体实现如下所示。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;MomentsDetails&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Session</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sessionHandler</span><span style="color:#E1E4E8;">(session).</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.data.getMomentsDetailsByUserID }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;MomentsDetails&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Session</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: userID)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sessionHandler</span><span style="color:#24292E;">(session).</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.data.getMomentsDetailsByUserID }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法通过<code>sessionHandler</code>来获取网络请求的结果。其中<code>sessionHandler</code>是一个封包，它接收了类型为<code>Session</code>的入口参数，我们可以在<code>init</code>方法里面看到<code>sessionHandler</code>的具体实现，如下所示：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">togglesDataStore</span><span style="color:#E1E4E8;">: TogglesDataStoreType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> InternalTogglesDataStore.shared, </span><span style="color:#B392F0;">sessionHandler</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">@escaping</span><span style="color:#E1E4E8;"> (Session) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;Response&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.path, </span><span style="color:#79B8FF;">headers</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.headers, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.parameters)</span></span>
<span class="line"><span style="color:#E1E4E8;">}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.togglesDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> togglesDataStore</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.sessionHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sessionHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">togglesDataStore</span><span style="color:#24292E;">: TogglesDataStoreType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InternalTogglesDataStore.shared, </span><span style="color:#6F42C1;">sessionHandler</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">@escaping</span><span style="color:#24292E;"> (Session) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;Response&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">post</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.path, </span><span style="color:#005CC5;">headers</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.headers, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.parameters)</span></span>
<span class="line"><span style="color:#24292E;">}) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.togglesDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> togglesDataStore</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.sessionHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sessionHandler</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中<code>$0</code>表示入口参数<code>Session</code>的对象， 由于<code>Session</code>遵循了<code>APISession</code>协议，它可以直接调用<code>APISession</code>的扩展方法<code>post</code>来发起 HTTP POST 请求，并获取类型为<code>Response</code>的返回值。</p><p>那返回值<code>Response</code>的类型是怎样定义出来的呢？其实它的定义来自 BFF 返回值 JSON 的数据结构，该 JSON 包含了<code>data</code>属性，<code>data</code>下有一个<code>getMomentsDetailsByUserID</code>属性，具体数据结构如下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;getMomentsDetailsByUserID&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// MomentsDetails object</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;userDetails&quot;</span><span style="color:#E1E4E8;">: {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;moments&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;getMomentsDetailsByUserID&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// MomentsDetails object</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;userDetails&quot;</span><span style="color:#24292E;">: {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;moments&quot;</span><span style="color:#24292E;">: [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以根据 JSON 的数据结构来定义 Swift 的<code>Response</code>类型，它也有类型为<code>Data</code>的<code>data</code>属性。在<code>Data</code>类型下还包含了类型为<code>MomentsDetails</code>的<code>getMomentsDetailsByUserID</code>属性。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">: Codable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data: Data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">: Codable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> getMomentsDetailsByUserID: MomentsDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">: Codable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data: Data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">: Codable {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> getMomentsDetailsByUserID: MomentsDetails</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了把 Observable 序列的类型从<code>Response</code>转换成<code>MomentsDetails</code>类型，我们在<code>getMoments</code>方法里调用了转换操作符<code>map { $0.data.getMomentsDetailsByUserID }</code>从<code>Response</code>里抽出<code>getMomentsDetailsByUserID</code>进行返回。</p><p>接着我们看看<code>Session</code>结构体的具体实现。 该结构体负责准备 GraphQL 请求的数据，这些数据包括 URL 路径、HTTP 头和参数。URL 路径比较简单，是一个值为<code>/graphql</code>的常量。HTTP 头也是一个默认的<code>HTTPHeaders</code>对象。最重要的数据是类型为<code>Parameters</code>的<code>parameters</code>属性。我们通过<code>init</code>方法来看看该属性是怎样进行初始化的。它的实现代码如下所示。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> variables: [</span><span style="color:#79B8FF;">AnyHashable</span><span style="color:#E1E4E8;">: Encodable] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;userID&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> userID]</span></span>
<span class="line"><span style="color:#E1E4E8;">    parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;query&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Self</span><span style="color:#E1E4E8;">.query,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">&quot;variables&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> variables]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> variables: [</span><span style="color:#005CC5;">AnyHashable</span><span style="color:#24292E;">: Encodable] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;userID&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> userID]</span></span>
<span class="line"><span style="color:#24292E;">    parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;query&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Self</span><span style="color:#24292E;">.query,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&quot;variables&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> variables]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先我们把传递进来的<code>userID</code>存放到类型为<code>[AnyHashable: Encodable]</code>的<code>variables</code>变量里面，然后把它与<code>query</code>属性一同赋值给<code>parameters</code>。</p><p>那么<code>query</code>是怎样来的呢？因为所有的 GraphQL 的请求都需要发送 Query，在朋友圈信息请求的例子也不例外，<code>query</code>属性就是用于定义要发送的 Query 的，其定义如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    query getMomentsDetailsByUserID($userID: ID!) {</span></span>
<span class="line"><span style="color:#9ECBFF;">      getMomentsDetailsByUserID(userID: $userID) {</span></span>
<span class="line"><span style="color:#9ECBFF;">        userDetails {</span></span>
<span class="line"><span style="color:#9ECBFF;">          id</span></span>
<span class="line"><span style="color:#9ECBFF;">          name</span></span>
<span class="line"><span style="color:#9ECBFF;">          avatar</span></span>
<span class="line"><span style="color:#9ECBFF;">          backgroundImage</span></span>
<span class="line"><span style="color:#9ECBFF;">        }</span></span>
<span class="line"><span style="color:#9ECBFF;">        moments {</span></span>
<span class="line"><span style="color:#9ECBFF;">          id</span></span>
<span class="line"><span style="color:#9ECBFF;">          userDetails {</span></span>
<span class="line"><span style="color:#9ECBFF;">            name</span></span>
<span class="line"><span style="color:#9ECBFF;">            avatar</span></span>
<span class="line"><span style="color:#9ECBFF;">          }</span></span>
<span class="line"><span style="color:#9ECBFF;">          type</span></span>
<span class="line"><span style="color:#9ECBFF;">          title</span></span>
<span class="line"><span style="color:#9ECBFF;">          photos</span></span>
<span class="line"><span style="color:#9ECBFF;">          createdDate</span></span>
<span class="line"><span style="color:#9ECBFF;">        }</span></span>
<span class="line"><span style="color:#9ECBFF;">      }</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    query getMomentsDetailsByUserID($userID: ID!) {</span></span>
<span class="line"><span style="color:#032F62;">      getMomentsDetailsByUserID(userID: $userID) {</span></span>
<span class="line"><span style="color:#032F62;">        userDetails {</span></span>
<span class="line"><span style="color:#032F62;">          id</span></span>
<span class="line"><span style="color:#032F62;">          name</span></span>
<span class="line"><span style="color:#032F62;">          avatar</span></span>
<span class="line"><span style="color:#032F62;">          backgroundImage</span></span>
<span class="line"><span style="color:#032F62;">        }</span></span>
<span class="line"><span style="color:#032F62;">        moments {</span></span>
<span class="line"><span style="color:#032F62;">          id</span></span>
<span class="line"><span style="color:#032F62;">          userDetails {</span></span>
<span class="line"><span style="color:#032F62;">            name</span></span>
<span class="line"><span style="color:#032F62;">            avatar</span></span>
<span class="line"><span style="color:#032F62;">          }</span></span>
<span class="line"><span style="color:#032F62;">          type</span></span>
<span class="line"><span style="color:#032F62;">          title</span></span>
<span class="line"><span style="color:#032F62;">          photos</span></span>
<span class="line"><span style="color:#032F62;">          createdDate</span></span>
<span class="line"><span style="color:#032F62;">        }</span></span>
<span class="line"><span style="color:#032F62;">      }</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在该 Query 定义中，我们定义了类型为<code>ID!</code>的入口参数<code>$userID</code>，同时定义了返回值的数据结构，例如返回<code>getMomentsDetailsByUserID</code>，在它里面包含<code>userDetails</code>和<code>moments</code>两个属性。在开发过程中我们往往要经常调试 Query，你可以使用 GraphiQL 工具来进行调试。你可以在 Moments App 的 <a href="http://momentsapi.herokuapp.com/playground?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">BFF</a>来尝试调试上面的 Query，执行效果如下。</p>`,39),C=p(`<p>在此，我们已经讲完<code>Session</code>的实现了，有了 URL 路径，HTTP 头和参数。<code>sessionHandler</code>就可以使用它来发起 HTTP POST 请求。具体调用如下所示。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">session.</span><span style="color:#79B8FF;">post</span><span style="color:#E1E4E8;">(session.path, </span><span style="color:#79B8FF;">headers</span><span style="color:#E1E4E8;">: session.headers, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: session.parameters)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">session.</span><span style="color:#005CC5;">post</span><span style="color:#24292E;">(session.path, </span><span style="color:#005CC5;">headers</span><span style="color:#24292E;">: session.headers, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: session.parameters)</span></span></code></pre></div><h4 id="解码-json-返回数据" tabindex="-1">解码 JSON 返回数据 <a class="header-anchor" href="#解码-json-返回数据" aria-label="Permalink to &quot;解码 JSON 返回数据&quot;">​</a></h4><p>当我们从 BFF 取得 JSON 返回数据的时候，需要把它解析为 Swift Model 来引入 MVVM 架构里面。那怎样才能把 JSON 数据解码成 Model 类型<code>MomentsDetails</code>呢？</p><p>这要从返回 JSON 的数据结构入手。JSON 返回结果是由上面的 Query 定义所决定的，在<code>getMomentsDetailsByUserID</code>对象里面包含了<code>userDetails</code>和<code>moments</code>属性，具体的 JSON 如下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userDetails&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Jake Lin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;avatar&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://avatar-url&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;backgroundImage&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://background-image-url&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;moments&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;userDetails&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Taylor Swift&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;avatar&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://another-avatar-url&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     },</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;PHOTOS&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;photos&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;https://photo-url&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     ],</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;createdDate&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1615899003&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userDetails&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Jake Lin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;avatar&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://avatar-url&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;backgroundImage&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://background-image-url&quot;</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;moments&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;userDetails&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Taylor Swift&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;avatar&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://another-avatar-url&quot;</span></span>
<span class="line"><span style="color:#24292E;">     },</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;PHOTOS&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;photos&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;https://photo-url&quot;</span></span>
<span class="line"><span style="color:#24292E;">     ],</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;createdDate&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1615899003&quot;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了 JSON 数据结构，我们就可以定义一个 Swift 的 Model 来进行映射，例如把该 Model 命名为<code>MomentsDetails</code>。它也包含了<code>userDetails</code>和<code>moments</code>两个属性，但我们没办法从 JSON 中看出来，所幸 GraphQL 为我们提供了 Schema ，它可以描述各个数据的具体类型。</p><p>下面是<code>MomentsDetails</code>及其子类型的 Schema 定义。其中<code>MomentsDetails</code>包含了<code>userDetails</code>和<code>moments</code>两个属性 ，<code>userDetails</code>为非空的<code>UserDetails</code>类型。而<code>moments</code>的类型是包含非空的<code>Moment</code>数组，同样地，该数组自己也不能为空。具体定义如下所示。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentsDetails</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> userDetails: UserDetails!</span></span>
<span class="line"><span style="color:#E1E4E8;"> moments: [Moment!]!</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Moment</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> id: ID!</span></span>
<span class="line"><span style="color:#E1E4E8;"> userDetails: UserDetails!</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: MomentType</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">: String</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">photos</span><span style="color:#E1E4E8;">: [String</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createdDate</span><span style="color:#E1E4E8;">: String</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserDetails</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: ID!</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: String!</span></span>
<span class="line"><span style="color:#E1E4E8;">  avatar: String!</span></span>
<span class="line"><span style="color:#E1E4E8;">  backgroundImage: String!</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PHOTOS</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentsDetails</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> userDetails: UserDetails!</span></span>
<span class="line"><span style="color:#24292E;"> moments: [Moment!]!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Moment</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> id: ID!</span></span>
<span class="line"><span style="color:#24292E;"> userDetails: UserDetails!</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: MomentType</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">: String</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">url</span><span style="color:#24292E;">: String</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">photos</span><span style="color:#24292E;">: [String</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createdDate</span><span style="color:#24292E;">: String</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDetails</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: ID!</span></span>
<span class="line"><span style="color:#24292E;">  name: String!</span></span>
<span class="line"><span style="color:#24292E;">  avatar: String!</span></span>
<span class="line"><span style="color:#24292E;">  backgroundImage: String!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">PHOTOS</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了上面的 GraphQL Schema，加上 JSON 数据结构，我们可以完成<code>MomentsDetails</code>的映射。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentsDetails</span><span style="color:#E1E4E8;">: Codable {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> userDetails: UserDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> moments: [Moment]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentsDetails</span><span style="color:#24292E;">: Codable {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> userDetails: UserDetails</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> moments: [Moment]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>具体做法是把 GraphQL 中的<code>type</code>映射成<code>struct</code>，然后每个属性都使用<code>let</code>来定义成常量。在 GraphQL 中,<code>!</code>符合表示非空类型，因此在 Swift 中也使用非空类型。在我们的例子中<code>userDetails</code>属性的类型为非空的<code>UserDetails</code>，而<code>moments</code>是<code>Moment</code>类型的数组。下面是<code>UserDetails</code>类型的定义，它有<code>id</code>,<code>name</code>等属性。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserDetails</span><span style="color:#E1E4E8;">: Codable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> id: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> avatar: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> backgroundImage: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDetails</span><span style="color:#24292E;">: Codable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> id: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> avatar: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> backgroundImage: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着我们看看<code>Moment</code>类型定义。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Moment</span><span style="color:#E1E4E8;">: Codable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> id: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> userDetails: MomentUserDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> type: MomentType</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> url: </span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> photos: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> createdDate: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentUserDetails</span><span style="color:#E1E4E8;">: Codable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> avatar: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentType</span><span style="color:#E1E4E8;">: String, Codable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;URL&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> photos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;PHOTOS&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Moment</span><span style="color:#24292E;">: Codable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> id: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> userDetails: MomentUserDetails</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> type: MomentType</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> url: </span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> photos: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> createdDate: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentUserDetails</span><span style="color:#24292E;">: Codable {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> avatar: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentType</span><span style="color:#24292E;">: String, Codable {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;URL&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> photos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;PHOTOS&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>Moment</code>类型包含了<code>id</code>,<code>title</code>,<code>userDetails</code>和<code>type</code>等属性。其中<code>title</code>在 GraphQL 中 Schema 里面没有定义为<code>!</code>，表示这个属性可能为空，当我们映射成 Swift 类型时使用了<code>?</code>来表示这个属性是可空类型（Optional）。<br><code>userDetails</code>属性的类型是一个嵌套类型<code>MomentUserDetails</code>，我推荐把所有的子类型都内嵌到父类型里面，这样能把所有的类型定义统一封装在<code>MomentsDetails</code>里面，访问的时候就有命名空间。</p><p>最后我们看一下<code>type</code>属性，它在 GraphQL 里的定义是一个枚举。我们把它映射为类型是<code>MomentType</code>的一个枚举。由于 GraphQL 会通过字符串来传输<code>enum</code>，当我们在 Swift 中映射成枚举类型时，需要把该<code>enum</code>定义为字符串类型，并为每一个<code>case</code>都指定需要映射的字符串值。例如我们给<code>url</code>指定为<code>&quot;URL&quot;</code>。</p><p>为了让 Swift 帮我们进行自动的解码与编码，我们把所有所有类型都遵守了<code>Codable</code>协议，下面是<code>Codable</code>协议的定义。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typealias</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Codable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Decodable </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Encodable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typealias</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Codable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Decodable </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Encodable</span></span></code></pre></div><p><code>Codable</code>其实是<code>Decodable</code>和<code>Encodable</code>两个协议合体，一个类型遵循了<code>Codable</code>表示该类型同时遵循<code>Decodable</code>和<code>Encodable</code>两个协议。如下图所示，因为 BFF 返回的是 JSON 数据，我们可以使用<code>JSONDecoder</code>把 JSON 数据解码成 Swift 的 Model 类型，反过来，我们可以使用<code>JSONEncoder</code>把 Swift 的 Model 编码成 JSON 数据。</p>`,20),D=p('<p>在 Swift 4 之前，我们需要使用<code>JSONSerialization</code>来反序列化 JSON 数据，然后把每一个属性单独转换成所需的类型。后来出现 SwiftyJSON 等库，帮我们减轻了一部分 JSON 转型工作，但还是需要大量手工编码来完成映射。</p><p>Swift 4 以后，出现了<code>Codable</code>协议，我们只需要把所定义的 Model 类型遵守该协议，Swift 在调用<code>JSONDecoder</code>的<code>decode</code>方法时就能自动完成转型。这样既能减少编写代码的数量，还能获得原生的性能。以下是<code>APISession</code>里面转换 JSON 到 Model 类型的代码：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSONDecoder</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">decode</span><span style="color:#E1E4E8;">(ReponseType.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSONDecoder</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">decode</span><span style="color:#24292E;">(ReponseType.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: data)</span></span></code></pre></div><p>我们只需要把转换的 Model 类型告诉<code>decode</code>方法即可。为了处理转换失败的情况，我们使用了<code>try</code>语句。当转型失败时，它会返回<code>nil</code>，使得我们的程序不会崩溃。</p><p>这里有一个技巧，假如你在开发中转型失败了，可以把 Model 定义的一部分属性先注释起来，找出引起转型失败的那个属性；然后，通过 GraphQL Schema 来检查该属性的数据类型，并判断该属性能否为空，最后根据 Schema 的定义来修改转型失败的属性。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>至此，我们就有了一个开发网络模块的模板，下面我来总结一下开发网络模块的具体流程。</p><ol><li><p>根据 BFF 返回的 JSON 数据以及 GraphQL 的 Schema ，定义 Model 的数据类型，请记住所有类型都需要遵循<code>Codable</code>协议。</p></li><li><p>定义一个网络请求的协议，并提供一个请求的方法，该方法需要接收请求所需的所有参数，并返回包含 Model 类型的 Observable 序列。这样上层模块就能使用响应式编程的方式来处理网络请求的结果了。</p></li><li><p>遵循上述的协议并实现一个网络请求的结构体。在该结构体里定义一个遵循了<code>APISession</code>协议的<code>Session</code>结构体，并在<code>Session</code>结构体内定义发送给 GraphQL 的<code>query</code>属性，我们可以通过 GraphiQL 工具来测试 Query 的定义。</p></li></ol><p>思考题：</p><blockquote><p>请问在你们项目中是如何解析网络返回的 JSON 数据呢？能否分享一下经验。</p></blockquote><p>可以把你的答案写得留言区哦，下一讲我将介绍如何使用仓库模式设计数据存储层。</p><p><strong>源码地址：</strong></p><blockquote><p>底层 HTTP 网络通信模块：<a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/Networking?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/Networking</a></p><p>请求朋友圈信息模块:<a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/Moments/Networking?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/Moments/Networking</a></p></blockquote>',13);function m(h,b,B,S,q,v){const n=e("Image");return t(),c("div",null,[E,y,i,d,F,o(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M01/3A/82/Cgp9HWB_3o2AYfKOAAONWHcpJpI148.png"}),a(),u,o(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/3A/82/Cgp9HWB_3pmAR0JMAAGYfVaC1qI931.png"}),a(),g,o(n,{alt:"图片10.png",src:"https://s0.lgstatic.com/i/image6/M01/3A/82/Cgp9HWB_3tuABbZnAAUdSISnc44399.png"}),a(),C,o(n,{alt:"图片11.png",src:"https://s0.lgstatic.com/i/image6/M00/3A/8A/CioPOWB_3yGAbcmbAAT0CvLwTTw986.png"}),a(),D])}const M=l(r,[["render",m]]);export{T as __pageData,M as default};
