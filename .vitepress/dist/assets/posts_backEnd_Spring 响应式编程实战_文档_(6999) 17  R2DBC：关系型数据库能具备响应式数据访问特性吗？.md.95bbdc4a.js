import{_ as l,j as o,o as t,g as e,k as n,h as p,Q as s}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"17R2DBC：关系型数据库能具备响应式数据访问特性吗？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6999) 17  R2DBC：关系型数据库能具备响应式数据访问特性吗？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6999) 17  R2DBC：关系型数据库能具备响应式数据访问特性吗？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring 响应式编程实战_文档/(6999) 17  R2DBC：关系型数据库能具备响应式数据访问特性吗？.md"},r=s('<h1 id="_17r2dbc-关系型数据库能具备响应式数据访问特性吗" tabindex="-1">17R2DBC：关系型数据库能具备响应式数据访问特性吗？ <a class="header-anchor" href="#_17r2dbc-关系型数据库能具备响应式数据访问特性吗" aria-label="Permalink to &quot;17R2DBC：关系型数据库能具备响应式数据访问特性吗？&quot;">​</a></h1><p>在&quot;14 | 响应式全栈：响应式编程能为数据访问过程带来什么样的变化&quot;中我们提到了全栈响应式编程的概念，知道了数据访问层同样需要处理响应式场景。而在日常开发过程中被广泛采用的关系型数据库，采用的都是非响应式的数据访问机制。那么，关系型数据库能否具备响应式数据访问特性呢？这就是这一讲将要探讨的话题。</p><h3 id="jdbc-规范与-spring-data" tabindex="-1">JDBC 规范与 Spring Data <a class="header-anchor" href="#jdbc-规范与-spring-data" aria-label="Permalink to &quot;JDBC 规范与 Spring Data&quot;">​</a></h3><p>在讨论如何让关系型数据访问也能具备响应式特性之前，我们有必要回顾一下 Java 领域中使用最广泛的 JDBC 规范，以及 Spring Data 中包含的实现方案。</p><h4 id="阻塞式-jdbc" tabindex="-1">阻塞式 JDBC <a class="header-anchor" href="#阻塞式-jdbc" aria-label="Permalink to &quot;阻塞式 JDBC&quot;">​</a></h4><p>JDBC 是 Java DataBase Connectivity 的全称，它的设计初衷是提供一套能够应用于各种数据库的统一标准。而不同的数据库厂家共同遵守这套标准，并提供各自的实现方案供应用程序调用。作为统一标准，JDBC 规范具有完整的架构体系，如下所示。</p>',6),E=s(`<p>JDBC 规范整体架构图</p><p>正如上图所示，JDBC 中通过驱动管理器 DriverManager 加载各种针对不同数据库的驱动程序 Driver；而应用程序通过调用 JDBC API 来实现对数据库的操作，包括初始化和执行 SELECT、CREATE、INSERT、UPDATE、DELETE 等 SQL 语句。</p><p>基于驱动程序的数据库通信过程，与调用 Web 服务的通信过程，本质上没有什么太大的差别。但是，任何的数据访问操作都必须包含在 JDBC 级别的同步阻塞调用中，也就是说，JDBC 是一款被设计成同步和阻塞式的规范，并没有提供类似 WebFlux 这样的响应式编程组件。</p><p>我们把讨论的范围再扩大一些，无论是 Spring 框架，还是其他 Java 领域的关系型数据持久化方案，所有的工具库本身都是同步和阻塞的。这里面讨论的对象包括 JDBC、JPA、Hibernate、EclipseLink、Spring JDBC 和 Spring Data JDBC 等。这些工具库在使用时都会涉及通过网络调用完成数据访问，但它们不允许非阻塞交互。向数据库发出查询的 Java 线程注定要被阻塞，直到第一个数据到达或发生超时。因此，这些工具库都与响应式编程的理念相冲突。</p><h4 id="spring-data-与关系型数据访问" tabindex="-1">Spring Data 与关系型数据访问 <a class="header-anchor" href="#spring-data-与关系型数据访问" aria-label="Permalink to &quot;Spring Data 与关系型数据访问&quot;">​</a></h4><p>尽管我们已经知道 Spring Data 并没有提供对关系型数据库的响应式组件，但还是有必要对其展开讨论，看看有没有办法让它具备响应性。Spring Data 中针对关系型数据库提供的技术体系比较丰富，下面我就针对其中的 JdbcTemplate、JPA 等核心组件进行一一说明。</p><p>首先，因为 JDBC 是一种比较偏向底层的开发规范，需要处理连接获取、资源释放、结果集处理等一系列烦琐而又重复的工作，所以并不太适合直接应用到业务开发过程中。为了简化原生 JDBC 的开发复杂性，Spring 提供了一个 JdbcTemplate 模板工具类，它有助于执行查询并将数据结果集映射到实体对象。它还能自动处理资源的创建和释放，有助于避免忘记关闭连接等常见错误。</p><p>JdbcTemplate 模板工具类诞生已久，但开发起来也还是有一定的复杂度，例如需要手工对结果集进行处理，一定程度上也属于偏中底层的开发技术。为此，Spring Data JDBC 就诞生了，它是 Spring Data 家族中一个比较新的模块。与 Spring Data 中的其他组件一样，Spring Data JDBC 旨在简化基于 JDBC 的 Repository 的实现。我们已经在第 14 讲中介绍了 Spring Data 中的 CrudRepository 接口，基于这个接口同样可以实现对关系型数据库的有效访问。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CrudRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountByAccountCode</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountCode</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CrudRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountByAccountCode</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountCode</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Spring Data JDBC 是一个非常小的模块，它的设计目标是简便性，而不是面向 ORM 的缓存、实体延迟加载和复杂实体关系等需求。如果想要实现这些功能，Java 生态系统有一个单独的规范，称为 JPA（Java Persistence API，Java 持久化 API），也存在 Hibernate 和 EclipseLink 等一批主流的实现框架。Spring Data 同样提供了 JpaRepository 接口，允许我们像 Spring Data JDBC 那样构建 Repository，但在内部它使用了更强大的基于 JPA 的实现。使用 JpaRepository 的方式也非常简单。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountByAccountCode</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountCode</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountByAccountCode</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountCode</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以用一张图来展示 Spring Data 中与关系型数据访问相关的技术组件。</p>`,12),y=s('<p>Spring Data JDBC 阻塞式技术体系</p><h4 id="使关系型数据访问具有响应性" tabindex="-1">使关系型数据访问具有响应性 <a class="header-anchor" href="#使关系型数据访问具有响应性" aria-label="Permalink to &quot;使关系型数据访问具有响应性&quot;">​</a></h4><p>从技术体系而言，越偏向底层的技术越容易完成改造和集成。但不幸的是，没有简单的解决方案可以用来调整 JDBC 并使它具备响应式访问特性。</p><p>对应的，针对 JPA 这种高级开发框架，可以说很难对其开展异步或响应性的改造工作。一方面，这样的工作同样需要建立 JDBC 的异步或响应式组件；另一方面，JPA 中的实体关系映射、实体缓存或延迟加载等功能丰富且复杂，各个实现框架中的巨大代码库使得响应式重构困难重重。</p><blockquote><p>如果你想深入了解 JPA，我推荐你去看看拉勾教育的另一门专栏<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=490#/content&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《Spring Data JPA 原理与实战》</a>。</p></blockquote><p>我们回到 Spring 家族，JdbcTemplate 以及 Spring Data JDBC 都需要用到 JDBC，因此同样不适用于响应式技术栈。但是，Spring Data 团队还是做出了很多尝试工作，并最终开发了 R2DBC 规范。R2DBC 是 Reactive Relational Database Connectivity 的全称，即响应式关系型数据库连接，该规范允许驱动程序提供与关系型数据库之间的响应式和非阻塞集成。</p><p>Spring Data 中同样采用了 R2DBC 规范，并开发了另一个独立模块 Spring Data R2DBC。下图展示了 JDBC 规范与 R2DBC 规范的对应关系，以及所涉及的技术栈。</p>',7),i=s(`<p>Spring Data JDBC 和 Spring Data R2DBC</p><p>接下来的内容，我们将重点讨论 R2DBC 规范以及 Spring Data R2DBC，看看如何让关系型数据库能够具备响应式访问特性。</p><h3 id="spring-data-r2dbc" tabindex="-1">Spring Data R2DBC <a class="header-anchor" href="#spring-data-r2dbc" aria-label="Permalink to &quot;Spring Data R2DBC&quot;">​</a></h3><h4 id="r2dbc-核心组件" tabindex="-1">R2DBC 核心组件 <a class="header-anchor" href="#r2dbc-核心组件" aria-label="Permalink to &quot;R2DBC 核心组件&quot;">​</a></h4><p>R2DBC 是由 Spring Data 团队领导的一项探索响应式数据库访问的尝试。R2DBC 的目标是定义具有背压支持的响应式数据库访问 API，该项目包含了三个核心组件。</p><ul><li><p>R2DBC SPI：定义了实现驱动程序的简约 API。该 API 非常简洁，以便彻底减少驱动程序实现者必须遵守的 API。SPI 并不是面向业务开发人员的 API，不适合在应用程序代码中直接使用；相反，它面向的是框架开发人员，用来设计并实现专用的客户端库。任何人都可以直接使用 SPI 或通过 R2DBC SPI 实现自己的客户端库。</p></li><li><p>R2DBC 客户端：提供了一个人性化的 API 和帮助类，可将用户请求转换为 SPI，也就是说面向业务开发人员提供了对底层 SPI 的访问入口。</p></li><li><p>R2DBC 驱动：截至目前，为 PostgreSQL、H2、Microsoft SQL Server、MariaDB 以及 MySQL 提供了 R2DBC 驱动程序。</p></li></ul><h4 id="引入-spring-data-r2dbc" tabindex="-1">引入 Spring Data R2DBC <a class="header-anchor" href="#引入-spring-data-r2dbc" aria-label="Permalink to &quot;引入 Spring Data R2DBC&quot;">​</a></h4><p>想要在应用程序中引入 Spring Data R2DBC，需要在 Maven 的 pom 文件中添加如下依赖项。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- spring data r2dbc --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-data-r2dbc&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- r2dbc 连接池 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.r2dbc&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;r2dbc-pool&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--r2dbc mysql 库 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;dev.miku&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;r2dbc-mysql&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- spring data r2dbc --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-data-r2dbc&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- r2dbc 连接池 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.r2dbc&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;r2dbc-pool&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--r2dbc mysql 库 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;dev.miku&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;r2dbc-mysql&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>我们知道在 Spring Data Reactive 中，存在一个 ReactiveCrudRepository 接口用于实现响应式数据访问。而 Spring Data R2DBC 也提供了一个专门的 R2dbcRepository，定义如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">R2dbcRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveCrudRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">R2dbcRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveCrudRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; {}</span></span></code></pre></div><p>可以看到，R2dbcRepository 接口实际上只是直接继承了 ReactiveCrudRepository 的现有方法而已。而 Spring Data R2DBC 提供了一个 SimpleR2dbcRepository 实现类，该实现类使用 R2DBC 规范实现了 R2dbcRepository 中的接口。值得注意的是，SimpleR2dbcRepository 类不使用默认的 R2DBC 客户端，而是定义自己的客户端以使用 R2DBC SPI。</p><p>同时，Spring Data R2DBC 也提供了一个 @Query 注解，这个注解的功能与 Spring Data 中通用的 @Query 注解类似，用于指定需要执行的 SQL 语句。我们可以基于方法名衍生查询机制定义各种数据访问操作。</p><h4 id="使用-spring-data-r2dbc-实现数据访问" tabindex="-1">使用 Spring Data R2DBC 实现数据访问 <a class="header-anchor" href="#使用-spring-data-r2dbc-实现数据访问" aria-label="Permalink to &quot;使用 Spring Data R2DBC 实现数据访问&quot;">​</a></h4><p>在引入 Spring Data R2DBC 之后，我们来使用该组件完成一个示例应用程序的实现。让我们先使用 MySQL 数据库来定义一张 ACCOUNT 表。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">USE \`r2dbcs_account\`;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">DROP TABLE IF EXISTS \`ACCOUNT\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">CREATE TABLE \`ACCOUNT\`(</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`ID\` </span><span style="color:#B392F0;">bigint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`ACCOUNT_CODE\` </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">) NOT NULL,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`ACCOUNT_NAME\` </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">) NOT NULL,</span></span>
<span class="line"><span style="color:#E1E4E8;">  PRIMARY </span><span style="color:#B392F0;">KEY</span><span style="color:#E1E4E8;"> (\`ID\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">) ENGINE</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">InnoDB DEFAULT CHARSET</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">utf8;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">INSERT INTO \`account\` </span><span style="color:#B392F0;">VALUES</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;account1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">INSERT INTO \`account\` </span><span style="color:#B392F0;">VALUES</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;account2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name2&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">USE \`r2dbcs_account\`;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">DROP TABLE IF EXISTS \`ACCOUNT\`;</span></span>
<span class="line"><span style="color:#24292E;">CREATE TABLE \`ACCOUNT\`(</span></span>
<span class="line"><span style="color:#24292E;">  \`ID\` </span><span style="color:#6F42C1;">bigint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#24292E;">  \`ACCOUNT_CODE\` </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">) NOT NULL,</span></span>
<span class="line"><span style="color:#24292E;">  \`ACCOUNT_NAME\` </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">) NOT NULL,</span></span>
<span class="line"><span style="color:#24292E;">  PRIMARY </span><span style="color:#6F42C1;">KEY</span><span style="color:#24292E;"> (\`ID\`)</span></span>
<span class="line"><span style="color:#24292E;">) ENGINE</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">InnoDB DEFAULT CHARSET</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">utf8;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">INSERT INTO \`account\` </span><span style="color:#6F42C1;">VALUES</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;account1&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">INSERT INTO \`account\` </span><span style="color:#6F42C1;">VALUES</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;account2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name2&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>然后，基于该数据库表定义一个实体对象。请注意，这里使用了一个 @Table 注解指定了目标表名，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.annotation.Id;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.relational.core.mapping.Table;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;account&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String accountCode;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String accountName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.annotation.Id;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.relational.core.mapping.Table;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;account&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String accountCode;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String accountName;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>基于 Account 对象，我们可以设计如下所示的 Repository。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.r2dbc.repository.Query;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.r2dbc.repository.R2dbcRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveAccountRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">R2dbcRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;insert into ACCOUNT (ACCOUNT_CODE, ACCOUNT_NAME) values (:accountCode,:accountName)&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">addAccount</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountCode</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">accountName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SELECT * FROM account WHERE id =:id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.r2dbc.repository.Query;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.r2dbc.repository.R2dbcRepository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveAccountRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">R2dbcRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;insert into ACCOUNT (ACCOUNT_CODE, ACCOUNT_NAME) values (:accountCode,:accountName)&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">addAccount</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountCode</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">accountName</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SELECT * FROM account WHERE id =:id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，ReactiveAccountRepository 扩展了 Spring Data R2DBC 所提供的 R2dbcRepository 接口，然后使用 @Query 注解分别定义了一个查询和插入方法。</p><p>为了访问数据库，最后要做的一件事情就是指定访问数据库的地址，如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">   r2dbc:</span></span>
<span class="line"><span style="color:#E1E4E8;">     url: r2dbcs:mysql://127.0.0.1:3306/r2dbcs_account</span></span>
<span class="line"><span style="color:#E1E4E8;">     username: root</span></span>
<span class="line"><span style="color:#E1E4E8;">     password: root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">   r2dbc:</span></span>
<span class="line"><span style="color:#24292E;">     url: r2dbcs:mysql://127.0.0.1:3306/r2dbcs_account</span></span>
<span class="line"><span style="color:#24292E;">     username: root</span></span>
<span class="line"><span style="color:#24292E;">     password: root</span></span></code></pre></div><p>这里要注意的是 spring.r2dbc.url 的格式，需要根据数据库类型来指定，在示例中我们使用的是 MySQL 数据库。</p><p>最后，我们构建一个 AccountController 来对 ReactiveAccountRepository 进行验证。为了简单起见，这里直接在 Controller 中嵌入 Repository，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;accounts&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ReactiveAccountRepository reactiveAccountRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/{accountId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;accountId&quot;</span><span style="color:#E1E4E8;">) Long </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reactiveAccountRepository.</span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(accountId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> account;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">addAccount</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reactiveAccountRepository.</span><span style="color:#B392F0;">addAccount</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getAccountCode</span><span style="color:#E1E4E8;">(), account.</span><span style="color:#B392F0;">getAccountName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;accounts&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ReactiveAccountRepository reactiveAccountRepository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/{accountId}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;accountId&quot;</span><span style="color:#24292E;">) Long </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reactiveAccountRepository.</span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(accountId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> account;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">addAccount</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reactiveAccountRepository.</span><span style="color:#6F42C1;">addAccount</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getAccountCode</span><span style="color:#24292E;">(), account.</span><span style="color:#6F42C1;">getAccountName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>分别访问这两个 HTTP 端点，就能正确查询和插入数据库中的数据了。你可以自己做一些测试，相关代码我也放在了<a href="https://github.com/lagoueduCol/ReactiveSpring?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveSpring</a>中。</p><p>这个示例介绍到这里就结束了，应该说，R2DBC 目前仍处于试验阶段，还不是很明确是否或何时可能成为面向生产的软件，让我们一起期待吧。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>JDBC 规范是 Java EE 领域中进行关系型数据库访问的标准规范，在业界应用非常广泛，但它却是阻塞式的。如何让关系型数据库具备响应式数据访问特性是一大技术难题，在今天的课程中，我们对这个难题进行了分析，并引出了 Spring Data 中专门用于实现响应式关系型数据访问的 Spring Data R2DBC 组件，我们讨论了这个组件的核心功能并给出了相关的代码示例。</p><p>这里给你留一道思考题：R2DBC 中包含了哪些核心组件，分别有什么作用？</p><p>在讨论完响应式数据访问机制之后，下一讲我们来说说消息驱动架构。消息驱动是实现系统弹性的核心手段，而 Spring 家族中的 Spring Cloud Stream 框架则为实现消息驱动架构提供了友好的开发支持。下一讲不见不散。</p><blockquote><p>点击链接，获取课程相关代码 ↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,33);function d(g,u,A,D,C,F){const a=o("Image");return t(),e("div",null,[r,n(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/3A/92/CioPOWB_7m6ATPDOAAC6qJ6NFjY094.png"}),p(),E,n(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/3A/89/Cgp9HWB_7mKABH4JAACvK4xBoeQ240.png"}),p(),y,n(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/3A/92/CioPOWB_7leAU1vHAADmOWkELiQ045.png"}),p(),i])}const R=l(c,[["render",d]]);export{B as __pageData,R as default};
