import{_ as a,j as l,o as p,g as o,k as e,h as t,Q as s}from"./chunks/framework.b3d8e22e.js";const A=JSON.parse('{"title":"Scheme ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3527) 10  路由设计：Flutter 中是如何实现 Scheme 跳转的.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3527) 10  路由设计：Flutter 中是如何实现 Scheme 跳转的.md","lastUpdated":1696417798000}'),c={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3527) 10  路由设计：Flutter 中是如何实现 Scheme 跳转的.md"},r=s(`<p>上一课时我们已经创建好了项目的基础框架结构，其中有一个 router.dart 文件，该文件的作用是实现 App 内的一个路由管理和跳转。本课时是基于该功能模块，着重介绍如何实现 App 内外的路由跳转。</p><h3 id="scheme" tabindex="-1">Scheme <a class="header-anchor" href="#scheme" aria-label="Permalink to &quot;Scheme&quot;">​</a></h3><p>在介绍路由跳转实现之前，我们先来了解下 Scheme 的概念，Scheme 是一种 App 内跳转协议，通过 Scheme 协议在 APP 内实现一些页面的互相跳转。一般可以使用以下格式协议。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[scheme]</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//[host]/[path]?[query]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[scheme]</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//[host]/[path]?[query]</span></span></code></pre></div><p>这种格式不仅可以使用在 App 内部实现可跳转，还可以适用于外部拉起 App 指定页面的功能。内部跳转类似于前端的页面路由，只不过前端的页面路由是直接用链接来处理，在 App 中是无法像前端一样能够使用链接实现路由管理。外部跳转则需要分别从 Android 和 iOS 来介绍，其中主要的不同点是一些平台配置，下面我们先来看看内部如何实现路由跳转。</p><h3 id="内部跳转" tabindex="-1">内部跳转 <a class="header-anchor" href="#内部跳转" aria-label="Permalink to &quot;内部跳转&quot;">​</a></h3><p>按照上面的协议规则，我们将 Scheme 设置为项目 App 名字 tyfApp ，由于是 App 跳转 host 可以不设置，path 为具体的 pages 页面，query 则为 pages 需要的参数，举例如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tyfapp</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//userPageIndex?userId=1001</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tyfapp</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//userPageIndex?userId=1001</span></span></code></pre></div><h4 id="基础版本" tabindex="-1">基础版本 <a class="header-anchor" href="#基础版本" aria-label="Permalink to &quot;基础版本&quot;">​</a></h4><p>根据这个规则，实现 router.dart 逻辑。首先需要 import 相应的 pages 页面，例如这里我们需要两个页面的跳转和一个 Web 页面。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/pages/common/web_view_page.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/pages/home_page/index.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/pages/user_page/index.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/pages/common/web_view_page.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/pages/home_page/index.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/pages/user_page/index.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>web_view_page.dart 使用第三方库，在遇到 http 或者 https 的协议时，使用该页面去打开，具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter_webview_plugin/flutter_webview_plugin.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// 通用跳转逻辑</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonWebViewPage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// url 地址</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">CommonWebViewPage</span><span style="color:#E1E4E8;">({</span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;"> key, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.url}) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> key);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WebviewScaffold</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> url,</span></span>
<span class="line"><span style="color:#E1E4E8;">      appBar</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AppBar</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        backgroundColor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.blue,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter_webview_plugin/flutter_webview_plugin.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// 通用跳转逻辑</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonWebViewPage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// url 地址</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">CommonWebViewPage</span><span style="color:#24292E;">({</span><span style="color:#005CC5;">Key</span><span style="color:#24292E;"> key, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.url}) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> key);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">WebviewScaffold</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> url,</span></span>
<span class="line"><span style="color:#24292E;">      appBar</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AppBar</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        backgroundColor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.blue,</span></span>
<span class="line"><span style="color:#24292E;">      ),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用第三方库 flutter_webview_plugin 来打开具体的网页地址，该组件一个是 url 具体的网址，一个是 appBar 包含 title 和主题信息。如果非网页地址，并符合页面规范的协议时，我们需要解析出跳转的页面以及页面需要的参数。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 解析跳转的url，并且分析其内部参数</span></span>
<span class="line"><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">_parseUrl</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(appScheme)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> placeIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(url </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (placeIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> url, </span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> action </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, placeIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> paramStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(placeIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (paramStr </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> action, </span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">&gt; paramsStrArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> paramStr.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&amp;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> singleParamsStr </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> paramsStrArr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">&gt; singleParamsArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> singleParamsStr.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    params[singleParamsArr[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> singleParamsArr[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> action, </span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> params};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 解析跳转的url，并且分析其内部参数</span></span>
<span class="line"><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">_parseUrl</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> url) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(appScheme)) {</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> placeIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(url </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;params&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (placeIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> url, </span><span style="color:#032F62;">&#39;params&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> action </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, placeIndex);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> paramStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(placeIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (paramStr </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> action, </span><span style="color:#032F62;">&#39;params&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">&gt; paramsStrArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paramStr.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&amp;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> singleParamsStr </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> paramsStrArr) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">&gt; singleParamsArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> singleParamsStr.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    params[singleParamsArr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> singleParamsArr[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> action, </span><span style="color:#032F62;">&#39;params&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> params};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面这段代码和前端解析 url 的代码逻辑完全一致，使用 ? 来分割 path 和参数两部分，再使用 &amp; 来获取参数的 key 和 value。解析出 path 和页面参数后，我们需要根据具体的 path 来跳转到相应的组件页面，并将解析出来的页面参数带入到组件中，代码如下。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 根据url处理获得需要跳转的action页面以及需要携带的参数</span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getPage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> url, </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt; urlParseRet) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (url.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonWebViewPage</span><span style="color:#E1E4E8;">(url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> url);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(appScheme)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断是否解析出 path action，并且能否在路由配置中找到</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> pathAction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> urlParseRet[</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (pathAction) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;homepage&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_buildPage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HomePageIndex</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userpage&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 必要性检查，如果没有参数则不做任何处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(urlParseRet[</span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;user_id&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_buildPage</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">UserPageIndex</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                userId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> urlParseRet[</span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;user_id&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            )</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_buildPage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HomePageIndex</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 根据url处理获得需要跳转的action页面以及需要携带的参数</span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getPage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> url, </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt; urlParseRet) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (url.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonWebViewPage</span><span style="color:#24292E;">(url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> url);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(appScheme)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断是否解析出 path action，并且能否在路由配置中找到</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> pathAction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> urlParseRet[</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (pathAction) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;homepage&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_buildPage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">HomePageIndex</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userpage&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 必要性检查，如果没有参数则不做任何处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(urlParseRet[</span><span style="color:#032F62;">&#39;params&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_buildPage</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">UserPageIndex</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                userId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> urlParseRet[</span><span style="color:#032F62;">&#39;params&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_buildPage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">HomePageIndex</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先就是判断是否以 http 和 https 开头，如果是则使用网页打开，如果不是则继续判断是否符合 App Scheme 信息，符合则解析出相应的 path 和参数信息，并且根据 path 调用对应的页面组件，打开相应的页面信息。如果匹配不到或者不符合 App Scheme 则不做任何处理。</p><p>最后为该 Router 类添加一个可外部调用的函数，执行页面跳转，代码如下。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 执行页面跳转</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt; urlParseRet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_parseUrl</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 不同页面，则跳转</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Navigator</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">MaterialPageRoute</span><span style="color:#E1E4E8;">(builder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getPage</span><span style="color:#E1E4E8;">(url, urlParseRet);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 执行页面跳转</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> url) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt; urlParseRet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_parseUrl</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不同页面，则跳转</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Navigator</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">MaterialPageRoute</span><span style="color:#24292E;">(builder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getPage</span><span style="color:#24292E;">(url, urlParseRet);</span></span>
<span class="line"><span style="color:#24292E;">  }));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面逻辑会存在一些问题，主要问题是没有考虑到当前页面，无论什么情况下都会打开一个新的页面，这样会很耗费机器资源，接下来我就介绍下如何优化这块逻辑。</p><h4 id="进阶版本" tabindex="-1">进阶版本 <a class="header-anchor" href="#进阶版本" aria-label="Permalink to &quot;进阶版本&quot;">​</a></h4><p>进阶版本的目的是判断当前是否有打开页面，如果打开了页面则替换和刷新旧页面，如果没有则打开新的页面。分为以下两点来分析：</p><ol><li><p>了解页面标识，具体打开的页面路由名称；</p></li><li><p>判断当前打开的页面，如果已经打开则更新，未打开则新建窗口；</p></li></ol><p>首先，我们需要使用到 Flutter 路由注册功能，我们需要修改 main.dart 中的代码，在 build MaterialApp 组件中增加两个函数，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MaterialApp</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Two You&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// APP 名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    debugShowCheckedModeBanner</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    theme</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ThemeData</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      primarySwatch</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.blue, </span><span style="color:#6A737D;">// APP 主题</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Router</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">registerRouter</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    home</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Scaffold</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        appBar</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AppBar</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Two You&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 页面名字</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">        body</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Center</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Entrance</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        )));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MaterialApp</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Two You&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// APP 名字</span></span>
<span class="line"><span style="color:#24292E;">    debugShowCheckedModeBanner</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    theme</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ThemeData</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      primarySwatch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.blue, </span><span style="color:#6A737D;">// APP 主题</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">    routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Router</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">registerRouter</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    home</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Scaffold</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        appBar</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AppBar</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Two You&#39;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// 页面名字</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">        body</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Center</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Entrance</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        )));</span></span></code></pre></div><p>上面代码中的第 7 行是注册路由名字，我们看下 Router 中的实现。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 注册路由事件</span></span>
<span class="line"><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;">)&gt; registerRouter () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;homepage&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_buildPage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">HomePageIndex</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;userpage&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_buildPage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">UserPageIndex</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 注册路由事件</span></span>
<span class="line"><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Function</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;">)&gt; registerRouter () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;homepage&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_buildPage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">HomePageIndex</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;userpage&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_buildPage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">UserPageIndex</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>按照这个方式注册其他的页面信息即可，接下来我们着重看下 push 的方法。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 执行页面跳转</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt; urlParseRet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_parseUrl</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Navigator</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">pushNamedAndRemoveUntil</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      context,</span></span>
<span class="line"><span style="color:#E1E4E8;">      urlParseRet[</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(), (route) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(route.settings.name </span><span style="color:#F97583;">==</span></span>
<span class="line"><span style="color:#E1E4E8;">                urlParseRet[</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          }, arguments</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> urlParseRet[</span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 执行页面跳转</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> url) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt; urlParseRet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_parseUrl</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Navigator</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">pushNamedAndRemoveUntil</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      context,</span></span>
<span class="line"><span style="color:#24292E;">      urlParseRet[</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(), (route) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(route.settings.name </span><span style="color:#D73A49;">==</span></span>
<span class="line"><span style="color:#24292E;">                urlParseRet[</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          }, arguments</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> urlParseRet[</span><span style="color:#032F62;">&#39;params&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在原来的基础上我们修改了方法，使用到了 pushNamedAndRemoveUntil 方法，并且在第二个回调参数中判断是否为当前页面，如果是则返回 false，否则返回 true。这种方式有个缺点就是在具体的 pages 页面中不能直接通过构造函数去获取参数，必须使用下面的方式。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;"> dataInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JsonConfig</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">objectToMap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">ModalRoute</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(context).settings.arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO: implement build</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;I am use page \${</span><span style="color:#79B8FF;">dataInfo</span><span style="color:#9ECBFF;">[&#39;userId&#39;]}&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;"> dataInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JsonConfig</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">objectToMap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">ModalRoute</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(context).settings.arguments</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TODO: implement build</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;I am use page \${</span><span style="color:#005CC5;">dataInfo</span><span style="color:#032F62;">[&#39;userId&#39;]}&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>获取的方式是第 3 到 5 行，这段逻辑还必须在 build 中，存在一定缺陷，现阶段还没有找到其他的解决方案，后续有解决方案再通过源码进行更新。</p><p>以上就是整个 router.dart 的实现逻辑，这样就可以在 APP 内的页面实现跳转，接下来我们看看如何在 App 外也能使用这个 Scheme，拉起 App。</p><h3 id="外部跳转" tabindex="-1">外部跳转 <a class="header-anchor" href="#外部跳转" aria-label="Permalink to &quot;外部跳转&quot;">​</a></h3><p>该功能的实现，需要使用 <a href="https://pub.dev/packages/uni_links" target="_blank" rel="noreferrer">uni_links</a> 第三方库来协助完成外部页面的 Scheme，在 pubspec.yaml 中增加依赖，然后更新本地库文件。由于 Android 和 iOS 在配置上会有点区别，因此这里分别来介绍。</p><h4 id="android-流程" tabindex="-1">Android 流程 <a class="header-anchor" href="#android-流程" aria-label="Permalink to &quot;Android 流程&quot;">​</a></h4><p>在项目中找到这个路径下的文件</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">android</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">main</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">AndroidManifest.xml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">android</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">main</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">AndroidManifest.xml</span></span></code></pre></div><p>在配置的 application 下的 activity 内增加如下配置：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">intent-filter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">action</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">android:name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;android.intent.action.VIEW&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">category</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">android:name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;android.intent.category.DEFAULT&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">category</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">android:name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;android.intent.category.BROWSABLE&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">android:scheme</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;tyfapp&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">intent-filter</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">intent-filter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">action</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">android:name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;android.intent.action.VIEW&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">category</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">android:name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;android.intent.category.DEFAULT&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">category</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">android:name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;android.intent.category.BROWSABLE&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">data</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">android:scheme</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;tyfapp&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">intent-filter</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>第 6 行代码就是声明这个 App 的 Scheme 的协议。</p><h4 id="ios-流程" tabindex="-1">iOS 流程 <a class="header-anchor" href="#ios-流程" aria-label="Permalink to &quot;iOS 流程&quot;">​</a></h4><p>在项目中找到这个路径下的文件</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ios</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Runner</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">info.plist</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ios</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Runner</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">info.plist</span></span></code></pre></div><p>在 dict 内增加下面的配置：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;CFBundleURLTypes&lt;/</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">array</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dict</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;CFBundleTypeRole&lt;/</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;Editor&lt;/</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;CFBundleURLName&lt;/</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;Two You&lt;/</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;CFBundleURLSchemes&lt;/</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">array</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;tyfapp&lt;/</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">array</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">dict</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">array</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;CFBundleURLTypes&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">array</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dict</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;CFBundleTypeRole&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;Editor&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;CFBundleURLName&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;Two You&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;CFBundleURLSchemes&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">array</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;tyfapp&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">array</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">dict</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">array</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>其中的第 9 行声明 App 的 Scheme。</p><p>以上就完成了基础的配置，接下来我们就使用 uni_links 来实现 Scheme 的监听。</p><h4 id="uni-links-实现外部跳转" tabindex="-1">Uni_links 实现外部跳转 <a class="header-anchor" href="#uni-links-实现外部跳转" aria-label="Permalink to &quot;Uni_links 实现外部跳转&quot;">​</a></h4><p>首先我们在 pages 目录下新建一个主入口文件 entrance.dart ，该文件需要设计为一个有状态类组件。在组件中最关键的是监听获取到打开 App 的链接地址，实现的方式如下代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 使用</span><span style="color:#FFAB70;">[String]</span><span style="color:#6A737D;">链接实现</span></span>
<span class="line"><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">initPlatformStateForStringUniLinks</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> initialLink;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Platform messages may fail, so we use a try/catch PlatformException.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    initialLink </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInitialLink</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (initialLink </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//  跳转到指定页面</span></span>
<span class="line"><span style="color:#E1E4E8;">      router.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(context, initialLink);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PlatformException</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    initialLink </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Failed to get initial link.&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FormatException</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    initialLink </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Failed to parse the initial link as Uri.&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Attach a listener to the links stream</span></span>
<span class="line"><span style="color:#E1E4E8;">  _sub </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getLinksStream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">((</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> link) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mounted </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> link </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  跳转到指定页面</span></span>
<span class="line"><span style="color:#E1E4E8;">    router.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(context, link);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, onError</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;"> err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mounted) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 使用</span><span style="color:#E36209;">[String]</span><span style="color:#6A737D;">链接实现</span></span>
<span class="line"><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">initPlatformStateForStringUniLinks</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> initialLink;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Platform messages may fail, so we use a try/catch PlatformException.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    initialLink </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInitialLink</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (initialLink </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//  跳转到指定页面</span></span>
<span class="line"><span style="color:#24292E;">      router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(context, initialLink);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PlatformException</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    initialLink </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Failed to get initial link.&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FormatException</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    initialLink </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Failed to parse the initial link as Uri.&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Attach a listener to the links stream</span></span>
<span class="line"><span style="color:#24292E;">  _sub </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLinksStream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">((</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> link) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mounted </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> link </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//  跳转到指定页面</span></span>
<span class="line"><span style="color:#24292E;">    router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(context, link);</span></span>
<span class="line"><span style="color:#24292E;">  }, onError</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;"> err) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mounted) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p>其中第 6 行是处理在外部直接拉起 App 的业务逻辑，第 17 行则表示当前 App 处于打开状态，监听外部拉起事件，监听变化后处理相应的跳转逻辑。由于组件中有一个监听事件，为了避免组件被销毁后还在监听，因此需要在组件销毁阶段移除监听事件，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (_sub </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) _sub.</span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (_sub </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) _sub.</span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了验证效果，使用了一个 <a href="https://love-flutter.github.io/test-page/index.html" target="_blank" rel="noreferrer">github 上创建的测试页面</a>。接下来我们运行下程序，然后在手机模拟器中打开测试页面，可以看到如图 1 所示的效果。</p>`,55),E=s(`<p>图 1 Scheme 实现运行效果</p><p>以上就实现了 Scheme 可以直接在内外部使用的跳转逻辑。不过 Scheme 在 App 外部存在一些体验方面的问题，比如：</p><ul><li><p>当需要被拉起的 App 没有被安装时，这个链接就不会生效；</p></li><li><p>在大部分 App 内 Scheme 是被禁用的，因此在用户体验的时候会非常差；</p></li><li><p>注册的 Scheme 相同导致冲突；</p></li></ul><p>为了解决上述问题，Andorid 和 iOS 都提供了一套解决方案，在 Android 叫作 App link / Deep links ，在 iOS 叫作 Universal Links / Custom URL schemes。解决的方案就是在未安装 App 时可提供网页跳转，其次可以使用 https 和 http 域名链接的方式来进一步提升唯一性。</p><p><strong>App link / Deep links</strong></p><p>应用链接仅适用于 https 方案，并且需要指定的主机以及托管文件 assetlinks.json，该配置文件可参考如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;relation&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;delegate_permission/common.handle_all_urls&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;namespace&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;android_app&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;package_name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;com.example&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;sha256_cert_fingerprints&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;relation&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;delegate_permission/common.handle_all_urls&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;namespace&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;android_app&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;package_name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;com.example&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;sha256_cert_fingerprints&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#032F62;">&quot;14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }]</span></span></code></pre></div><ul><li><p>package_name，在应用的 build.gradle 文件中声明的应用 ID；</p></li><li><p>sha256_cert_fingerprints：应用签名证书的 SHA256 指纹，你可以利用 Java 密钥工具。</p></li></ul><p>配置好该文件后，同样是修改下面路径下的文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">android</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">main</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">AndroidManifest.xml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">android</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">main</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">AndroidManifest.xml</span></span></code></pre></div><p>在配置的 application 下的 activity 内增加如下配置：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- App Links --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">intent-filter</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">android:autoVerify</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">action</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">android:name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;android.intent.action.VIEW&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">category</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">android:name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;android.intent.category.DEFAULT&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">category</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">android:name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;android.intent.category.BROWSABLE&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!-- Accepts URIs that begin with https://YOUR_HOST --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">android:scheme</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">android:host</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;[YOUR_HOST]&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">intent-filter</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- App Links --&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">intent-filter</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">android:autoVerify</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">action</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">android:name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;android.intent.action.VIEW&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">category</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">android:name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;android.intent.category.DEFAULT&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">category</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">android:name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;android.intent.category.BROWSABLE&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!-- Accepts URIs that begin with https://YOUR_HOST --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">data</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">android:scheme</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https&quot;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">android:host</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;[YOUR_HOST]&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">intent-filter</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>具体的过程，你可以在线上项目开发过程中尝试应用。</p><p><strong>Universal Links / Custom URL schemes</strong></p><p>该方法也是需要一个主机域名来启动应用，因此需要服务的一个在线配置，例如：<a href="https://www.example.test" target="_blank" rel="noreferrer">https://www.example.test</a>/apple-app-site-association 获取 apple-app-site-association 的配置文件如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;applinks&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;apps&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;details&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;appID&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;8LX3M43WHV.me.gexiao.me&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;paths&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;/*&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;applinks&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;apps&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;details&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;appID&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;8LX3M43WHV.me.gexiao.me&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;paths&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;/*&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样我们需要修改下面路径的文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ios</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Runner</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">info.plist</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ios</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Runner</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">info.plist</span></span></code></pre></div><p>在 dict 内增加下面的配置：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;com.apple.developer.associated-domains&lt;/</span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">array</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;applinks:[YOUR_HOST]&lt;/</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;/</span><span style="color:#85E89D;">array</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;com.apple.developer.associated-domains&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">array</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;applinks:[YOUR_HOST]&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;/</span><span style="color:#22863A;">array</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>以上就是外部跳转的实现方案，实现外部跳转的 App Links 和 Universal Link 功能，由于需要域名部署，我这里就没有实际应用，具体你可以在项目开发中尝试。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时介绍了在 Flutter 中路由跳转以及外部 Scheme 启动 App 的方法，最后简单介绍了 App Links 和 Universal Link 的知识点。学完本课时你需要掌握开发 Flutter 路由跳转基础技巧，并且能够应用 uni_links 库实现外部 Scheme 启动 App 功能。</p><p>下一课时我将介绍 Flutter 中各种导航栏的设计，我会在本课时的基础上增加导航栏功能，其次我也会实现首页和个人页面的代码逻辑。</p><p><a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">点击链接，查看本课时源码。</a></p>`,25);function y(i,F,d,u,g,C){const n=l("Image");return p(),o("div",null,[r,e(n,{alt:"1.gif",src:"https://s0.lgstatic.com/i/image/M00/2F/E1/Ciqc1F8IDbaAIpJ7AESu3z7EomU793.gif"}),t(),E])}const m=a(c,[["render",y]]);export{A as __pageData,m as default};
