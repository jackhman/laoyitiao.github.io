import{_ as p,o as i,g as t,Q as a}from"./chunks/framework.f949202b.js";const _=JSON.parse('{"title":"浏览器的内部结构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/108-前端进阶笔记文档/(7204) 08  深入剖析浏览器中页面的渲染过程.md","filePath":"posts/frontEnd/108-前端进阶笔记文档/(7204) 08  深入剖析浏览器中页面的渲染过程.md","lastUpdated":null}'),l={name:"posts/frontEnd/108-前端进阶笔记文档/(7204) 08  深入剖析浏览器中页面的渲染过程.md"},e=a('<p>作为前端开发，我们的日常工作中除了编码以外，几乎大多数时间都在跟浏览器打交道。所以我们更加要吃透浏览器，掌握它到底是怎样将我们编写的代码渲染到页面中的。</p><p>所以，今天我主要结合浏览器的内部工作原理，深入剖析下浏览器中页面的渲染过程。</p><p>第 6 讲我们介绍了一个 HTTP 请求在浏览器中的请求过程，该过程将浏览器作为单独的对象，描述客户端和服务端之间的通信过程。那么，当我们在浏览器的地址栏中输入 URL，按下回车键，到页面在浏览器中渲染完成，这个过程中浏览器的内部发生了什么了呢？</p><p>为了了解这个过程，首先我们要了解浏览器的内部结构。</p><h3 id="浏览器的内部结构" tabindex="-1">浏览器的内部结构 <a class="header-anchor" href="#浏览器的内部结构" aria-label="Permalink to &quot;浏览器的内部结构&quot;">​</a></h3><p>从结构上来说，浏览器主要包括了八个子系统：用户界面、浏览器引擎、渲染引擎、网络子系统、JavaScript 解释器、XML 解析器、显示后端、数据持久性子系统。</p><p><img src="https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGef-AVdyVAAHZWEKP8kc582.png" alt="图片2.png"></p><p>这些子系统组合构成了我们的浏览器。页面的加载和渲染过程，离不开网络子系统、渲染引擎、JavaScript 解释器和浏览器引擎。</p><p>以前端开发最常使用的 Chrome 浏览器为例， Chrome 浏览器是使用多进程架构的方式来管理这些子系统。</p><h3 id="chrome-多进程架构" tabindex="-1">Chrome 多进程架构 <a class="header-anchor" href="#chrome-多进程架构" aria-label="Permalink to &quot;Chrome 多进程架构&quot;">​</a></h3><p>Chrome 浏览器采用的多进程架构，主要包括四个进程：</p><p><img src="https://s0.lgstatic.com/i/image6/M00/3A/95/CioPOWB_9faAVGKiAAHoS6wTpmU695.png" alt="Drawing 1.png"></p><ol><li><p><strong>浏览器进程</strong>：选项卡之外的所有内容都由浏览器进程处理，浏览器进程则主要用于控制和处理用户可见的 UI 部分（包括地址栏，书签，后退和前进按钮）和用户不可见的隐藏部分（例如网络请求和文件访问）。</p></li><li><p><strong>GPU 进程</strong>：该进程用于完成图像处理任务，同时还支持分解成多个进程进行处理。</p></li><li><p><strong>渲染器进程</strong>：Chrome 浏览器中支持多个选项卡，其中每个选项卡在单独的渲染器进程中运行，渲染器进程主要用于控制和处理选项卡中的网站内容显示。</p></li><li><p><strong>插件进程</strong>：管理 Chrome 浏览器中的各个插件。</p></li></ol><p>对于&quot;在浏览器的地址栏中输入 URL，按下回车键，到浏览器渲染页面&quot;这个过程，浏览器内部会通过浏览器进程和渲染器进程，进行很多交互逻辑，最终才得以将页面内容显示在屏幕上。</p><p>其中，浏览器进程和渲染器进程同样支持多线程，包括以下这些线程。</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGelWAbiaSAAEx45xN4zQ889.png" alt="图片9.png"><br><img src="https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGegmAGuduAAEB_cEYcEU948.png" alt="图片4.png"></p><p>这些线程其实并不陌生，在前面介绍的内容中有提到，比如：</p><ul><li><p>在页面的加载过程中，涉及 GUI 渲染线程与 JavaScript 引擎线程间的互斥关系，因此页面中的<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>元素设计不合理会影响页面加载速度；</p></li><li><p>在 UI 线程、网络线程、存储线程、浏览器事件触发线程、浏览器定时器触发线程中，I/O 事件通过异步任务完成时触发的函数回调，解决了单线程的 Javascript 阻塞问题。</p></li></ul><p>下面我们再来看下 Chrome 浏览器中页面的渲染过程，包括浏览器进程和线程如何通信来显示页面。</p><h3 id="浏览器中页面的渲染过程" tabindex="-1">浏览器中页面的渲染过程 <a class="header-anchor" href="#浏览器中页面的渲染过程" aria-label="Permalink to &quot;浏览器中页面的渲染过程&quot;">​</a></h3><p>首先我们将浏览器中页面的渲染过程分为两部分。</p><ul><li><p>页面导航：用户输入 URL，浏览器进程进行请求和准备处理。</p></li><li><p>页面渲染：获取到相关资源后，渲染器进程负责选项卡内部的渲染处理。</p></li></ul><h4 id="_1-页面导航过程" tabindex="-1">1. 页面导航过程 <a class="header-anchor" href="#_1-页面导航过程" aria-label="Permalink to &quot;1. 页面导航过程&quot;">​</a></h4><p>当用户在地址栏中输入内容时，浏览器内部会进行以下处理。</p><ol><li><p>首先浏览器进程的 UI 线程会进行处理：如果是 URI，则会发起网络请求来获取网站内容；如果不是，则进入搜索引擎。</p></li><li><p>如果需要发起网络请求，请求过程由网络线程来完成。HTTP 请求响应如果是 HTML 文件，则将数据传递到渲染器进程；如果是其他文件则意味着这是下载请求，此时会将数据传递到下载管理器。</p></li><li><p>如果请求响应为 HTML 内容，此时浏览器应导航到请求站点，网络线程便通知 UI 线程数据准备就绪。</p></li><li><p>接下来，UI 线程会寻找一个渲染器进程来进行网页渲染。当数据和渲染器进程都准备好后，HTML 数据通过 IPC 从浏览器进程传递到渲染器进程中。</p></li><li><p>渲染器进程接收 HTML 数据后，将开始加载资源并渲染页面。</p></li><li><p>渲染器进程完成渲染后，通过 IPC 通知浏览器进程页面已加载。</p></li></ol><p>以上是用户在地址栏输入网站地址，到页面开始渲染的整体过程。为了方便理解，我帮你梳理了一个流程图：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGemeAeLIdAAGeyyv3jvM989.png" alt="图片1.png"></p><p>如果当前页面跳转到其他网站，浏览器将调用一个单独的渲染进程来处理新导航，同时保留当前渲染进程来处理像<code>unload</code>这类事件。</p><p>在上面的过程中可以看到，页面导航主要依赖浏览器进程。其中，上述过程中的步骤 5 便是页面的渲染部分，该过程同样依赖渲染器进程，我们一起来看看。</p><h4 id="_2-页面渲染过程" tabindex="-1">2. 页面渲染过程 <a class="header-anchor" href="#_2-页面渲染过程" aria-label="Permalink to &quot;2. 页面渲染过程&quot;">​</a></h4><p>前面说过，渲染器进程负责选项卡内部发生的所有事情，它的核心工作是将 HTML、CSS 和 JavaScript 转换为可交互的页面。</p><p>整体上，渲染器进程渲染页面的流程基本如下。</p><ul><li><p>解析(Parser)：解析 HTML/CSS/JavaScript 代码。</p></li><li><p>布局(Layout)：定位坐标和大小、是否换行、各种<code>position</code>/<code>overflow</code>/<code>z-index</code>属性等计算。</p></li><li><p>绘制(Paint)：判断元素渲染层级顺序。</p></li><li><p>光栅化(Raster)：将计算后的信息转换为屏幕上的像素。</p></li></ul><p>大致流程如下图：</p><p><img src="https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGeqOATDmZAABqHA_KZjw863.png" alt="图片10.png"></p><p>我们来分别看下。</p><p><strong>1. 解析。</strong></p><p>渲染器进程的主线程会解析以下内容：</p><ul><li><p>解析 HTML 内容，产生一个 DOM 节点树；</p></li><li><p>解析 CSS，产生 CSS 规则树；</p></li><li><p>解析 Javascript 脚本，由于 Javascript 脚本可以通过 DOM API 和 CSSOM API 来操作 DOM 节点树和 CSS 规则树，因此该过程中会等待 JavaScript 运行完成才继续解析 HTML。</p></li></ul><p><img src="https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGeqqAJjA6AAN4ArIs9uY183.png" alt="图片6.png"></p><p>解析完成后，我们得到了 DOM 节点树和 CSS 规则树，布局过程便是通过 DOM 节点树和 CSS 规则树来构造渲染树（Render Tree）。</p><p><strong>2. 布局。</strong></p><p>通过解析之后，渲染器进程知道每个节点的结构和样式，但如果需要渲染页面，浏览器还需要进行布局，布局过程便是我们常说的渲染树的创建过程。</p><p>在这个过程中，像<code>header</code>或<code>display:none</code>的元素，它们会存在 DOM 节点树中，但不会被添加到渲染树里。</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGeq-AM147AAHqFon6pEw645.png" alt="图片7.png"></p><p>布局完成后，将会进入绘制环节。</p><p><strong>3. 绘制</strong></p><p>在绘制步骤中，渲染器主线程会遍历渲染树来创建绘制记录。</p><p>需要注意的是，如果渲染树发生了改变，则渲染器会触发重绘（Repaint）和重排（Reflow）。</p><ul><li><p>重绘：屏幕的一部分要重画，比如某个 CSS 的背景色变了，但是元素的几何尺寸没有变。</p></li><li><p>重排：元素的几何尺寸变了（渲染树的一部分或全部发生了变化），需要重新验证并计算渲染树。</p></li></ul><p>为了不对每个小的变化都进行完整的布局计算，渲染器会将更改的元素和它的子元素进行脏位标记，表示该元素需要重新布局。其中，全局样式更改会触发全局布局，部分样式或元素更改会触发增量布局，增量布局是异步完成的，全局布局则会同步触发。</p><p>重排需要涉及变更的所有的结点几何尺寸和位置，成本比重绘的成本高得多的多。所以我们要注意以避免频繁地进行增加、删除、修改 DOM 结点、移动 DOM 的位置、Resize 窗口、滚动等操作，因为这些操作可能会导致性能降低。</p><p><strong>4. 光栅化</strong></p><p>通过解析、布局和绘制过程，浏览器获得了文档的结构、每个元素的样式、绘制顺序等信息。将这些信息转换为屏幕上的像素，这个过程被称为光栅化。</p><p>光栅化可以被 GPU 加速，光栅化后的位图会被存储在 GPU 内存中。根据前面介绍的渲染流程，当页面布局变更了会触发重排和重绘，还需要重新进行光栅化。此时如果页面中有动画，则主线程中过多的计算任务很可能会影响动画的性能。</p><p>因此，现代的浏览器通常使用合成的方式，将页面的各个部分分成若干层，分别对其进行栅格化（将它们分割成了不同的瓦片），并通过合成器线程进行页面的合成。</p><p><img src="https://s0.lgstatic.com/i/image6/M00/3A/96/CioPOWB_9tKAP-iSAAAbxYxtmYI438.png" alt="Drawing 8.png"></p><p>合成过程如下：</p><ol><li><p>当主线程创建了合成层并确定了绘制顺序，便将这些信息提交给合成线程；</p></li><li><p>合成器线程将每个图层栅格化，然后将每个图块发送给光栅线程；</p></li><li><p>光栅线程栅格化每个瓦片，并将它们存储在 GPU 内存中；</p></li><li><p>合成器线程通过 IPC 提交给浏览器进程，这些合成器帧被发送到 GPU 进程处理，并显示在屏幕上。</p></li></ol><p><img src="https://s0.lgstatic.com/i/image6/M01/3A/8D/Cgp9HWB_9tiANnD-AAE0dHoZY_A915.png" alt="Drawing 9.png"></p><p>合成的真正目的是，在移动合成层的时候不用重新光栅化。因为有了合成器线程，页面才可以独立于主线程进行流畅的滚动。</p><p>到这里，页面才真正渲染到屏幕上。</p><p>我们在绘制页面的时候，也可能会遇到很多奇怪的渲染问题，比如使用了<code>transform:scale</code>可能会导致某些浏览器中渲染模糊，究其原因则是由于光栅化过程导致的。像前面所说，前端开发需要频繁跟浏览器打交道，所谓知己知彼百战不殆，我们应该对其运行过程有更好的了解。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>今天我主要介绍了浏览器的组成，可分为用户界面、浏览器引擎、渲染引擎、网络子系统、JavaScript 解释器、XML 解析器、显示后端、数据持久性子系统八个子系统，并以 Chrome 浏览器为例，从浏览器内部分工角度来介绍页面的渲染过程。</p><p>掌握页面的渲染过程，有利于我们进行一些性能优化，尤其如果涉及动画、游戏等频繁绘制的场景，渲染性能往往是需要不断进行优化的瓶颈。</p><p>今日小作业：</p><ol><li><p>你认为 Chrome 浏览器中，为什么每个选项卡都在单独的渲染器进程中运行呢？</p></li><li><p>如何检测页面是否无响应呢？</p></li></ol><p>把你的想法写在留言区吧！</p>',69),o=[e];function r(s,c,n,g,d,m){return i(),t("div",null,o)}const A=p(l,[["render",r]]);export{_ as __pageData,A as default};
