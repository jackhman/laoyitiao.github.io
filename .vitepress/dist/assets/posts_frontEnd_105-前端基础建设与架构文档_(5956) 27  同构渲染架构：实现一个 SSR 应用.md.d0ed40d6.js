import{_ as n,j as a,o as l,g as p,k as o,Q as e,s as t}from"./chunks/framework.e0c66c3f.js";const h=JSON.parse('{"title":"实现一个简易 SSR 应用 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5956) 27  同构渲染架构：实现一个 SSR 应用.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5956) 27  同构渲染架构：实现一个 SSR 应用.md","lastUpdated":1696338709000}'),c={name:"posts/frontEnd/105-前端基础建设与架构文档/(5956) 27  同构渲染架构：实现一个 SSR 应用.md"},r=e(`<p>从这一讲开始，我们正式进入 Node.js 主题学习。作为 Node.js 技术的重要应用场景，同构渲染 SSR 应用尤其重要。不管是服务端渲染还是服务端渲染衍生出的同构应用，现在来看已经并不新鲜了，实现起来也并不困难。可是有的开发者认为：同构应用不就是调用一个<code>renderToString</code>（React 中）类似的 API 吗？</p><p>讲道理，确实如此，但同构应用也不只是这么简单。就拿面试来说，同构应用的考察点不是&quot;纸上谈兵&quot;的理论，而是实际实施时的细节。这一讲我们就来一步步实现一个 SSR 应用，并分析 SSR 应用的重点环节。相关内容你可以参考：<a href="https://github.com/HOUCe/ssr" target="_blank" rel="noreferrer">实现一个简易 ssr</a>。</p><h3 id="实现一个简易-ssr-应用" tabindex="-1">实现一个简易 SSR 应用 <a class="header-anchor" href="#实现一个简易-ssr-应用" aria-label="Permalink to &quot;实现一个简易 SSR 应用&quot;">​</a></h3><p>SSR 渲染架构的优势已经非常明显了，不管是对SEO 友好还是性能提升，大部分开发者已经耳熟能详了。这一部分，我们以 React 技术栈为背景，实现一个 SSR 应用。</p><p>首先启动项目：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm init </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm init </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">yes</span></span></code></pre></div><p>配置 Babel 和Webpack，目的是将ESM 和React编译为 Node.js和浏览器能够理解的代码。相关<code>.babelrc</code>内容如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;presets&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;@babel/env&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;@babel/react&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;presets&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;@babel/env&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;@babel/react&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上代码，我们直接使用了<code>@babel/env</code>和<code>@babel/react</code>作为 presets。相关<code>webpack.config.js</code>内容如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        client</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./src/client.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        bundle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./src/bundle.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    output</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;assets&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[name].js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    module</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rules</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            { test</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\\.js$</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, exclude</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, loader</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;babel-loader&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    entry</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        client</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./src/client.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        bundle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./src/bundle.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    output</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;assets&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[name].js&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    module</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        rules</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            { test</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\\.js$</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, exclude</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, loader</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;babel-loader&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>配置入口文件为<code>./src/client.js</code>和<code>./src/bundle.js</code>，打包结果如下。</p><ul><li><p><code>assets/bundle.js</code>：CSR 架构下浏览器端脚本。</p></li><li><p><code>assets/client.js</code>：SSR 架构下浏览器端脚本，衔接 SSR 部分。</p></li></ul><p><code>src/</code>文件夹包含所有源码，Babel 将会编译该文件内代码到<code>views/</code>目录。这里需要你思考：为什么我们要编译源码呢？</p><p>业务源码中，我们使用 ESM 编写 React 和 Redux 代码，<strong>对于低版本 Node.js来说，并不能直接支持 ESM 规范</strong> ，因此需要使用 Babel 将<code>src/</code>文件夹内代码编译到<code>views/</code>目录中。相关命令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;babel&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;babel src -d views&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;babel&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;babel src -d views&quot;</span></span></code></pre></div><p>我们对项目目录进行说明：</p><ul><li><p><code>src/components</code>中我们存放 React 组件；</p></li><li><p><code>src/redux/</code>中我们存放 Redux 相关代码；</p></li><li><p><code>assets/</code>和<code>media/</code>中我们存放样式文件及图片；</p></li><li><p><code>src/server.js</code>和<code>src/template.js</code>是 Node.js环境相关脚本。</p></li></ul><p>接下来，我们进入 Node.js相关的<code>src/server.js</code>和<code>src/template.js</code>脚本的编写。</p><p><code>src/server.js</code>如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { renderToString } from &#39;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">dom/server&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Provider } from &#39;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">redux&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> configureStore from &#39;./redux/configureStore&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App from &#39;./components/app&#39;;</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(initialState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 初始化 redux store</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> store </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureStore</span><span style="color:#E1E4E8;">(initialState);</span></span>
<span class="line"><span style="color:#E1E4E8;">  let content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderToString</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Provider store</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{store} </span><span style="color:#F97583;">&gt;&lt;</span><span style="color:#E1E4E8;">App </span><span style="color:#F97583;">/&gt;&lt;/</span><span style="color:#E1E4E8;">Provider</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> preloadedState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> store.</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    content,</span></span>
<span class="line"><span style="color:#E1E4E8;">    preloadedState</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { renderToString } from &#39;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">dom/server&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Provider } from &#39;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">redux&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> configureStore from &#39;./redux/configureStore&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App from &#39;./components/app&#39;;</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(initialState) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 初始化 redux store</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> store </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureStore</span><span style="color:#24292E;">(initialState);</span></span>
<span class="line"><span style="color:#24292E;">  let content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderToString</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Provider store</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{store} </span><span style="color:#D73A49;">&gt;&lt;</span><span style="color:#24292E;">App </span><span style="color:#D73A49;">/&gt;&lt;/</span><span style="color:#24292E;">Provider</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> preloadedState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> store.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    content,</span></span>
<span class="line"><span style="color:#24292E;">    preloadedState</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>我们展开具体分析：</p><ul><li><p><code>initialState</code>作为参数传递给<code>configureStore()</code>方法，并实例化一个新的Store；</p></li><li><p>调用<code>renderToString()</code>方法，得到服务端渲染的 HTML 字符串<code>content</code>；</p></li><li><p>调用 Redux<code>getState()</code>方法，得到状态为<code>preloadedState</code>；</p></li><li><p>返回 HTML 字符串<code>content</code>和 preloadedState。</p></li></ul><p><code>src/template.js</code>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">template</span><span style="color:#E1E4E8;">(title, initialState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}, content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let scripts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否有 content 内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (content) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scripts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \` </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                   window.__STATE__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(initialState)}</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;assets/client.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                \`</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scripts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \` </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;assets/bundle.js&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> \`</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  let page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`</span><span style="color:#F97583;">&lt;!</span><span style="color:#E1E4E8;">DOCTYPE html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">html lang</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">head</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">meta charset</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">title</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> \${title} </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">title</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">link rel</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;stylesheet&quot;</span><span style="color:#E1E4E8;"> href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;assets/style.css&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">head</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">body</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;wrap-inner&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                      \${content}</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                  \${scripts}</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">body</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              \`;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> page;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">template</span><span style="color:#24292E;">(title, initialState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}, content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  let scripts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否有 content 内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (content) {</span></span>
<span class="line"><span style="color:#24292E;">    scripts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \` </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                   window.__STATE__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(initialState)}</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;assets/client.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                \`</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    scripts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \` </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;assets/bundle.js&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> \`</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  let page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`</span><span style="color:#D73A49;">&lt;!</span><span style="color:#24292E;">DOCTYPE html</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">html lang</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">head</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">meta charset</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">title</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> \${title} </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">title</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">link rel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;stylesheet&quot;</span><span style="color:#24292E;"> href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;assets/style.css&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">head</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">body</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;wrap-inner&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                      \${content}</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                  \${scripts}</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">body</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              \`;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> page;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们对上述代码进行解读：<code>template</code>函数接受<code>title</code>、<code>state</code>和<code>content</code>作为参数，拼凑成最终的 HTML 文档，并将<code>state</code>挂载到<code>window.__STATE__</code>中，作为 script 标签内联到 HTML 文档，同时将 SSR 架构下<code>assets/client.js</code>脚本或<code>assets/bundle.js</code>嵌入。</p><p>下面，我们再聚焦同构部分的浏览器端脚本。</p><p>在CSR 架构下，<code>src/bundle.js</code>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { render } from &#39;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">dom&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Provider } from &#39;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">redux&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> configureStore from &#39;./redux/configureStore&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App from &#39;./components/app&#39;;</span></span>
<span class="line"><span style="color:#6A737D;">// 获取 store</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> store </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureStore</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Provider store</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{store} </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">App </span><span style="color:#F97583;">/&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">Provider</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { render } from &#39;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">dom&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Provider } from &#39;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">redux&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> configureStore from &#39;./redux/configureStore&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App from &#39;./components/app&#39;;</span></span>
<span class="line"><span style="color:#6A737D;">// 获取 store</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> store </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureStore</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Provider store</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{store} </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">App </span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">Provider</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>而 SSR 架构下，<code>src/client.js</code>代码类似：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hydrate } from &#39;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">dom&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Provider } from &#39;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">redux&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> configureStore from &#39;./redux/configureStore&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App from &#39;./components/app&#39;;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.__STATE__;</span></span>
<span class="line"><span style="color:#E1E4E8;">delete window.__STATE__;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> store </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureStore</span><span style="color:#E1E4E8;">(state);</span></span>
<span class="line"><span style="color:#B392F0;">hydrate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Provider store</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{store} </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">App </span><span style="color:#F97583;">/&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">Provider</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hydrate } from &#39;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">dom&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Provider } from &#39;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">redux&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> configureStore from &#39;./redux/configureStore&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App from &#39;./components/app&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.__STATE__;</span></span>
<span class="line"><span style="color:#24292E;">delete window.__STATE__;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> store </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureStore</span><span style="color:#24292E;">(state);</span></span>
<span class="line"><span style="color:#6F42C1;">hydrate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Provider store</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{store} </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">App </span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">Provider</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p><code>src/client.js</code>对比<code>src/bundle.js</code>，比较关键的不同点在于<strong>使用了</strong> <code>window.__STATE__.</code><strong>获取初始状态，同时使用了</strong> <code>hydrate()</code><strong>方法代替了</strong> <code>render()</code>。</p><p>至此，我们就实现了一个简易的 SSR 应用。虽然简单，但完全体现了 SSR 架构的原理。然而生产情况复杂多变，我们继续往下看。</p><h3 id="同构应用中你容易忽略的细节" tabindex="-1">同构应用中你容易忽略的细节 <a class="header-anchor" href="#同构应用中你容易忽略的细节" aria-label="Permalink to &quot;同构应用中你容易忽略的细节&quot;">​</a></h3><p>接下来，我们对几个更细节的问题加以分析。这些问题的处理，不再是代码层面的解决方案，更是工程化方向的设计。</p><h4 id="环境区分" tabindex="-1">环境区分 <a class="header-anchor" href="#环境区分" aria-label="Permalink to &quot;环境区分&quot;">​</a></h4><p>我们知道，同构应用实现了客户端代码和服务端代码的基本统一，我们只需要编写一种组件，就能生成适用于服务端和客户端的组件案例。可是你是否知道，大多数情况下服务端代码和客户端代码需要单独处理？下面我简单举几个例子。</p><ul><li><strong>路由代码差别</strong></li></ul><p>服务端需要根据请求路径，匹配页面组件；客户端需要通过浏览器中的地址，匹配页面组件。</p><p>客户端代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Provider store</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{store}</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">BrowserRouter</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Route path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;"> component</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{Home}</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Route path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;/product&#39;</span><span style="color:#E1E4E8;"> component</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{Product}</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">BrowserRouter</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">Provider</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ReactDom.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">App</span><span style="color:#F97583;">/&gt;</span><span style="color:#E1E4E8;">, document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#root&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Provider store</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{store}</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">BrowserRouter</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Route path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;"> component</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{Home}</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Route path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;/product&#39;</span><span style="color:#24292E;"> component</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{Product}</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">BrowserRouter</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">Provider</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  ReactDom.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">App</span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;">, document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#root&#39;</span><span style="color:#24292E;">))</span></span></code></pre></div><p>BrowserRouter 组件根据 window.location 以及 history API 实现页面切换，而服务端肯定是无法获取 window.location 的。</p><p>服务端代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Provider store</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{store}</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">StaticRouter location</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{req.path} context</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{context}</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Route path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;"> component</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{Home}</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">StaticRouter</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">Provider</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  Return ReactDom.</span><span style="color:#B392F0;">renderToString</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">App</span><span style="color:#F97583;">/&gt;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Provider store</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{store}</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">StaticRouter location</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{req.path} context</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{context}</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Route path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;"> component</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{Home}</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">StaticRouter</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">Provider</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  Return ReactDom.</span><span style="color:#6F42C1;">renderToString</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">App</span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>在服务端，需要<strong>使用 StaticRouter 组件</strong>，并将请求地址和上下文信息作为 location 和 context 这两个props 传入 StaticRouter 中。</p><ul><li><strong>打包差别</strong></li></ul><p>服务端运行的代码如果需要依赖 Node 核心模块或者第三方模块，就不再需要把这些模块代码打包到最终代码中了。因为环境已经安装这些依赖，可以直接引用。这样一来，就需要我们<strong>在 Webpack 中配置 target：node</strong>，并借助 webpack-node-externals 插件，解决第三方依赖打包的问题。</p><h4 id="注水和脱水" tabindex="-1">注水和脱水 <a class="header-anchor" href="#注水和脱水" aria-label="Permalink to &quot;注水和脱水&quot;">​</a></h4><p>什么叫作注水和脱水呢？这个和同构应用中数据的获取有关：在服务器端渲染时，首先服务端请求接口拿到数据，并处理准备好数据状态（如果使用 Redux，就是进行Store 的更新），为了减少客户端的请求，我们需要保留住这个状态。</p><p>一般做法是在服务器端返回 HTML 字符串的时候，将数据 JSON.stringify 一并返回，这个过程，叫作脱水（dehydrate）；在客户端，就不再需要进行数据的请求了，可以直接使用服务端下发下来的数据，这个过程叫注水（hydrate）。</p><p>响应代码前面已经有所体现了，但是在服务端渲染时，服务端如何能够请求所有的 APIs，保障数据全部已经请求呢？</p><p>一般有两种方法进行服务端请求。</p><ul><li>react-router 的解决方案是配置路由route-config，结合 matchRoutes，找到页面上相关组件所需的请求接口的方法并执行请求。这就要求开发者通过路由配置信息，显式地告知服务端请求内容。如下代码：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> routes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      component</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Root,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loadData</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSomeData</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// etc.</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { routes } from &quot;./routes&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  function App() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;Switch&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {routes.map(route =&gt; (</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;Route {.</span><span style="color:#FDAEB7;font-style:italic;">..</span><span style="color:#E1E4E8;">route} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ))}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/Switch&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> routes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      component</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Root,</span></span>
<span class="line"><span style="color:#24292E;">      loadData</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSomeData</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// etc.</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { routes } from &quot;./routes&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  function App() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      &lt;Switch&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {routes.map(route =&gt; (</span></span>
<span class="line"><span style="color:#24292E;">          &lt;Route {.</span><span style="color:#B31D28;font-style:italic;">..</span><span style="color:#24292E;">route} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        ))}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/Switch&gt;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>在服务端代码中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { matchPath } from &quot;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">router</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">dom&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> promises = []</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes.some(route =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> match = matchPath(req.path, route)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> (match) promises.push(route.loadData(match))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> match</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  Promise.all(promises).then(data =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    putTheDataSomewhereTheClientCanFindIt(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { matchPath } from &quot;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">router</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">dom&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> promises = []</span></span>
<span class="line"><span style="color:#24292E;">  routes.some(route =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> match = matchPath(req.path, route)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> (match) promises.push(route.loadData(match))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> match</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  Promise.all(promises).then(data =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    putTheDataSomewhereTheClientCanFindIt(data)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span></code></pre></div><ul><li>另外一种思路类似 Next.js，我们需要在 React 组件上<strong>定义静态方法</strong>。比如定义静态 loadData 方法，在服务端渲染时，我们可以遍历所有组件的 loadData，获取需要请求的接口。</li></ul><h4 id="安全问题" tabindex="-1">安全问题 <a class="header-anchor" href="#安全问题" aria-label="Permalink to &quot;安全问题&quot;">​</a></h4><p>安全问题非常关键，尤其是涉及服务端渲染，开发者要格外小心。这里提出一个点：我们前面提到了注水和脱水过程，其中的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;!</span><span style="color:#E1E4E8;">DOCTYPE html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">html lang</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">head</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">meta charset</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">head</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">body</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        window.context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          initialState</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(store.</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">())}</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">body</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;!</span><span style="color:#24292E;">DOCTYPE html</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">html lang</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">head</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">meta charset</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">head</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">body</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        window.context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          initialState</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(store.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">())}</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">body</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">\`</span></span></code></pre></div><p>非常容易遭受 XSS 攻击，JSON.stringify 可能会造成 script 注入。因此，我们需要<strong>严格清洗 JSON 字符串中的 HTML 标签和其他危险的字符</strong>。我习惯使用 serialize-javascript 库进行处理，这也是同构应用中最容易被忽视的细节。</p><p>这里给大家留一个思考题，React<code>dangerouslySetInnerHTML</code>API 也有类似风险，React 是怎么处理这个安全隐患的呢？</p><h4 id="请求认证处理" tabindex="-1">请求认证处理 <a class="header-anchor" href="#请求认证处理" aria-label="Permalink to &quot;请求认证处理&quot;">​</a></h4><p>上面讲到服务端预先请求数据，那么请你思考这样一个场景：某个请求依赖 cookie 表明的用户信息，比如请求&quot;我的学习计划列表&quot;。这种情况下服务端请求是不同于客户端的，不会有浏览器添加 cookie 以及不含有其他相关的 header 信息。这个请求在服务端发送时，一定不会拿到预期的结果。</p><p>解决办法也很简单：服务端请求时需要保留客户端页面请求的信息（一般是 cookie），并在 API 请求时携带并透传这个信息（cookie）。</p><h4 id="样式问题处理" tabindex="-1">样式问题处理 <a class="header-anchor" href="#样式问题处理" aria-label="Permalink to &quot;样式问题处理&quot;">​</a></h4><p>同构应用的样式处理容易被开发者忽视，而一旦忽略，就会掉到坑里。比如，我们不能再使用 style-loader 了，因为这个WebpackLoader 会在编译时将样式模块载入到 HTML header 中。但是在服务端渲染环境下，没有Window 对象，style-loader就会报错。一般我们使用 isomorphic-style-loader 来实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    test</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\\.css$</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    use</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;isomorphic-style-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;postcss-loader&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    test</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\\.css$</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    use</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;isomorphic-style-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;postcss-loader&#39;</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>isomorphic-style-loader 的原理是什么呢？</p><p>我们知道，对于Webpack 来说，所有的资源都是模块。WebpackLoader 在编译过程中可以将导入的 CSS 文件转换成对象，拿到样式信息。因此<strong>isomorphic-style-loader 可以获取页面中所有组件样式</strong>。为了实现得更加通用化，isomorphic-style-loader 利用 context API，在渲染页面组件时获取所有 React 组件的样式信息，最终插入 HTML 字符串中。</p><p>在服务端渲染时，我们需要加入这样的逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express from &#39;express&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> React from &#39;react&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> ReactDOM from &#39;react</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">dom&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> StyleContext from &#39;isomorphic</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">style</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">loader/StyleContext&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> App from &#39;./App.js&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> server = express()</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> port = p<wbr>rocess.env.PORT || </span><span style="color:#FDAEB7;font-style:italic;">3000</span></span>
<span class="line"><span style="color:#E1E4E8;">server.get(&#39;</span><span style="color:#FDAEB7;font-style:italic;">*</span><span style="color:#E1E4E8;">&#39;, (req, res, next) =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//  css Set 类型来存储页面所有的样式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> css = </span><span style="color:#FDAEB7;font-style:italic;">new</span><span style="color:#E1E4E8;"> Set()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> insertCss = (.</span><span style="color:#FDAEB7;font-style:italic;">..</span><span style="color:#E1E4E8;">styles) =&gt; styles.forEach(style =&gt; css.add(style._getCss()))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> body = ReactDOM.renderToString(</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;StyleContext.Provider value={ { insertCss }}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;App /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/StyleContext.Provider&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> html = \`&lt;!doctype html&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;html&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;head&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;script src=&quot;client.js&quot; defer&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将样式内连进 html 当中</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;style&gt;\${[.</span><span style="color:#FDAEB7;font-style:italic;">..</span><span style="color:#E1E4E8;">css].join(&#39;&#39;)}&lt;/style&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/head&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;body&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;div id=&quot;root&quot;&gt;\${body}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/body&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/html&gt;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.status(</span><span style="color:#FDAEB7;font-style:italic;">200</span><span style="color:#E1E4E8;">).send(html)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">server.listen(port, () =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.log(\`Node.js app is running at http:</span><span style="color:#6A737D;">//localhost:\${port}/\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express from &#39;express&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> React from &#39;react&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> ReactDOM from &#39;react</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">dom&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> StyleContext from &#39;isomorphic</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">style</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">loader/StyleContext&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> App from &#39;./App.js&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> server = express()</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> port = p<wbr>rocess.env.PORT || </span><span style="color:#B31D28;font-style:italic;">3000</span></span>
<span class="line"><span style="color:#24292E;">server.get(&#39;</span><span style="color:#B31D28;font-style:italic;">*</span><span style="color:#24292E;">&#39;, (req, res, next) =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//  css Set 类型来存储页面所有的样式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> css = </span><span style="color:#B31D28;font-style:italic;">new</span><span style="color:#24292E;"> Set()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> insertCss = (.</span><span style="color:#B31D28;font-style:italic;">..</span><span style="color:#24292E;">styles) =&gt; styles.forEach(style =&gt; css.add(style._getCss()))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> body = ReactDOM.renderToString(</span></span>
<span class="line"><span style="color:#24292E;">    &lt;StyleContext.Provider value={ { insertCss }}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;App /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/StyleContext.Provider&gt;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> html = \`&lt;!doctype html&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;html&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;head&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;script src=&quot;client.js&quot; defer&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将样式内连进 html 当中</span></span>
<span class="line"><span style="color:#24292E;">        &lt;style&gt;\${[.</span><span style="color:#B31D28;font-style:italic;">..</span><span style="color:#24292E;">css].join(&#39;&#39;)}&lt;/style&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/head&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;body&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;div id=&quot;root&quot;&gt;\${body}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/body&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/html&gt;\`</span></span>
<span class="line"><span style="color:#24292E;">  res.status(</span><span style="color:#B31D28;font-style:italic;">200</span><span style="color:#24292E;">).send(html)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">server.listen(port, () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  console.log(\`Node.js app is running at http:</span><span style="color:#6A737D;">//localhost:\${port}/\`)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>分析上面代码，我们定义了 css Set 类型来存储页面所有的样式，并定义了 insertCss 方法。该方法通过 context 传给每个 React 组件，这样每个组件就可以调用 insertCss 方法。该方法调用时，会将组件样式加入 css Set 当中。</p><p>最后我们用<code>[...css].join(&#39;&#39;)</code>就可以获取页面的所有样式字符串。</p><p>强调一下，<a href="https://github.com/kriasoft/isomorphic-style-loader" target="_blank" rel="noreferrer">isomorphic-style-loader 的源码</a>目前已经更新，采用了最新的 ReactHooks API，我推荐给 React 开发者阅读，相信你一定收获很多！</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本小节前半部分我们&quot;手把手&quot;教你实现服务端渲染的同构应用，因为这些知识并不困难，社区上资料也很多。后半部分我们从更高的角度出发，剖析同构应用中那些关键的细节点和疑难问题的解决方案，这些经验源于真刀真枪的线上案例，即使你没有开发过同构应用，也能从中全方位地了解关键信息，一旦掌握了这些细节，同构应用的实现就会更稳、更可靠。</p><p>本讲内容总结如下：</p>`,77),E=t("p",null,"同构应用其实远比理论复杂，绝对不是几个 APIs 和几台服务器就能完成的，希望大家多思考、多动手，一定会更有体会。下一讲，我们进入 CI/CD 流程，设计一个性能守卫系统，以此帮助你了解：Node.js 除了同构直出、数据聚合以外，还能做一些重要的，且有趣的服务。",-1);function y(i,d,F,u,g,D){const s=a("Image");return l(),p("div",null,[r,o(s,{alt:"同构渲染架构： 实现一个 SSR 应用.png",src:"https://s0.lgstatic.com/i/image6/M00/16/ED/CioPOWBHGf-ANBuWAAJkpsrE7fA808.png"}),E])}const m=n(c,[["render",y]]);export{h as __pageData,m as default};
