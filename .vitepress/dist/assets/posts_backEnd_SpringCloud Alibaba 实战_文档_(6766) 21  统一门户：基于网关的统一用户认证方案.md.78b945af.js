import{_ as o,j as e,o as t,g as c,k as l,h as n,Q as p,s}from"./chunks/framework.4e7d56ce.js";const O=JSON.parse('{"title":"21统一门户：基于网关的统一用户认证方案","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6766) 21  统一门户：基于网关的统一用户认证方案.md","filePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6766) 21  统一门户：基于网关的统一用户认证方案.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/SpringCloud Alibaba 实战_文档/(6766) 21  统一门户：基于网关的统一用户认证方案.md"},E=p('<h1 id="_21统一门户-基于网关的统一用户认证方案" tabindex="-1">21统一门户：基于网关的统一用户认证方案 <a class="header-anchor" href="#_21统一门户-基于网关的统一用户认证方案" aria-label="Permalink to &quot;21统一门户：基于网关的统一用户认证方案&quot;">​</a></h1><p>前一讲我们学习了老项目向微服务架构转化的改造策略，通过开发绞杀者应用程序让应用进行平滑升级。本讲咱们继续学习另外一个关键的设计，如何设计微服务架构下的用户认证方案。</p><p>本讲咱们涉及以下三方面内容：</p><ul><li><p>传统的用户认证方案；</p></li><li><p>JWT 与 JJWT；</p></li><li><p>基于网关的统一用户认证。</p></li></ul><h3 id="传统的用户认证方案" tabindex="-1">传统的用户认证方案 <a class="header-anchor" href="#传统的用户认证方案" aria-label="Permalink to &quot;传统的用户认证方案&quot;">​</a></h3><p>我们直奔主题，什么是用户认证呢？对于大多数与用户相关的操作，软件系统首先要确认用户的身份，因此会提供一个用户登录功能。用户输入用户名、密码等信息，后台系统对其进行校验的操作就是用户认证。用户认证的形式有多种，最常见的有输入用户名密码、手机验证码、人脸识别、指纹识别等，但其目的都是为了确认用户的身份并与之提供服务。</p>',6),y=s("p",null,"用户认证",-1),i=s("p",null,"在传统的单体单点应用时代，我们会开发用户认证的服务类，从登录界面提交的用户名密码等信息通过用户认证类进行校验，然后获取该用户对象将其保存在 Tomcat 的 Session 中，如下所示：",-1),u=s("p",null,"单点应用认证方案",-1),d=s("p",null,"随着系统流量的增高，单点应用以无法支撑业务运行，应用出现高延迟、宕机等状况，此时很多公司会将应用改为 Nginx 软负载集群，通过水平扩展提高系统的性能，于是应用架构就变成了这个样子。",-1),g=s("p",null,"Java Web 应用集群",-1),F=s("p",null,"虽然改造后系统性能显著提高，但你发现了么，因为之前用户登录的会话数据都保存在本地，当 Nginx 将请求转发到其他节点后，因为其他节点没有此会话数据，系统就会认为没有登录过，请求的业务就会被拒绝。从使用者的角度会变成一刷新页面后，系统就让我重新登录，这个使用体验非常糟糕。",-1),h=s("p",null,"我们来分析下，这个问题的根本原因在于利用 Session 本地保存用户数据会让 Java Web 应用变成有状态的，在集群环境下必须保证每一个 Tomcat 节点的会话状态一致的才不会出问题。因此基于 Redis 的分布式会话存储方案应运而生，在原有架构后端增加 Redis 服务器，将用户会话统一转存至 Redis 中，因为该会话数据是集中存储的，所以不会出现数据一致性的问题。",-1),q=s("p",null,"Redis 统一存储用户会话",-1),C=s("p",null,"但是，传统方案在互联网环境下就会遇到瓶颈，Redis 充当了会话数据源，这也意味着 Redis 承担了所有的外部压力，在互联网数以亿计的庞大用户群规模下，如果出现突发流量洪峰，Redis 能否经受考验就会成为系统的关键风险，稍有差池系统就会崩溃。",-1),J=s("p",null,"那如何解决呢？其实还有一种巧妙的设计，在用户认证成功，后用户数据不再存储在后端，而改为在客户端存储，客户端每一次发送请求时附带用户数据到 Web 应用端，Java 应用读取用户数据进行业务处理，因为用户数据分散存储在客户端中，因此并不会对后端产生额外的负担，此时认证架构会变成下面的情况。",-1),A=p(`<p>客户端存储用户信息</p><p>当用户认证成功后，在客户端的 Cookie、LocalStorage 会持有当前用户数据，在 Tomcat 接收到请求后便可获取用户数据进行业务处理。但细心的你肯定也发现，用户的敏感数据是未经过加密的，在存储与传输过程中随时都有泄密的风险，决不能使用明文，必须要对其进行加密。</p><p>那如何进行加密处理呢？当然，你可以自己写加解密类，但更通用的做法是使用 JWT 这种标准的加密方案进行数据存储与传输。</p><h3 id="json-web-token-jwt-介绍" tabindex="-1">Json Web Token（JWT）介绍 <a class="header-anchor" href="#json-web-token-jwt-介绍" aria-label="Permalink to &quot;Json Web Token（JWT）介绍&quot;">​</a></h3><p>无论是微服务架构，还是前后端分离应用，在客户端存储并加密数据时有一个通用的方案：Json Web Token（JWT），JWT是一个经过加密的，包含用户信息的且具有时效性的固定格式字符串。下面这是一个标准的JWT字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJ1c2VySWRcIjoyLFwidXNlcm5hbWVcIjpcImxpc2lcIixcIm5hbWVcIjpcIuadjuWbm1wiLFwiZ3JhZGVcIjpcInZpcFwifSJ9.NT8QBdoK4S</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">PbnhS0msJAqL0FG2aruvlsBSyG226HiU</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJ1c2VySWRcIjoyLFwidXNlcm5hbWVcIjpcImxpc2lcIixcIm5hbWVcIjpcIuadjuWbm1wiLFwiZ3JhZGVcIjpcInZpcFwifSJ9.NT8QBdoK4S</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">PbnhS0msJAqL0FG2aruvlsBSyG226HiU</span></span></code></pre></div><p>这段加密字符串由三部分组成，中间由点&quot;.&quot;分隔，具体含义如下。</p><ul><li>第一部分 标头（Header）：标头通常由两部分组成：令牌的类型（即 JWT）和所使用的签名算法，例如 HMAC SHA256 或 RSA，下面是标头的原文：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;alg&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;HS256&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;typ&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;JWT&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;alg&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;HS256&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;typ&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;JWT&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，此 JSON 被 Base64 编码以形成 JWT 的第一部分。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">eyJhbGciOiJIUzI1NiJ9</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">eyJhbGciOiJIUzI1NiJ9</span></span></code></pre></div><ul><li>第二部分 载荷（Payload）：载荷就是实际的用户数据以及其他自定义数据。载荷原文如下所示。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;sub&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1234567890&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;John Doe&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;admin&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;sub&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1234567890&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;John Doe&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;admin&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后对原文进行 Base64 编码形成 JWT 的第二部分。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">eyJzdWIiOiJ7XCJ1c2VySWRcIjoyLFwidXNlcm5hbWVcIjpcImxpc2lcIixcIm5hbWVcIjpcIuadjuWbm1wiLFwiZ3JhZGVcIjpcInZpcFwifSJ9</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">eyJzdWIiOiJ7XCJ1c2VySWRcIjoyLFwidXNlcm5hbWVcIjpcImxpc2lcIixcIm5hbWVcIjpcIuadjuWbm1wiLFwiZ3JhZGVcIjpcInZpcFwifSJ9</span></span></code></pre></div><ul><li>第三部分 签名（Sign）：签名就是通过前面两部分标头+载荷+私钥再配合指定的算法，生成用于校验 JWT 是否有效的特殊字符串，签名的生成规则如下。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">HMACSHA256</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">base64UrlEncode</span><span style="color:#E1E4E8;">(header) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">base64UrlEncode</span><span style="color:#E1E4E8;">(payload),  secret)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">HMACSHA256</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">base64UrlEncode</span><span style="color:#24292E;">(header) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">base64UrlEncode</span><span style="color:#24292E;">(payload),  secret)</span></span></code></pre></div><p>生成的签名字符串为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">NT8QBdoK4S</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">PbnhS0msJAqL0FG2aruvlsBSyG226HiU</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">NT8QBdoK4S</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">PbnhS0msJAqL0FG2aruvlsBSyG226HiU</span></span></code></pre></div><p>将以上三部分通过&quot;.&quot;连接在一起，就是 JWT 的标准格式了。</p><h4 id="jwt-的创建与校验" tabindex="-1">JWT 的创建与校验 <a class="header-anchor" href="#jwt-的创建与校验" aria-label="Permalink to &quot;JWT 的创建与校验&quot;">​</a></h4><p>此时，你肯定有疑问 JWT 是如何生成的，又是如何完成有效性校验呢？因为 JWT 的格式与算法是固定的，在 Java 就有非常多的优秀开源项目帮我们实现了JWT 的创建与验签，其中最具代表性的产品就是 JJWT。JJWT 是一个提供端到端的 JWT 创建和验证的 Java 库，它的官网是：<a href="https://github.com/jwtk/jjwt?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/jwtk/jjwt</a>，有兴趣的话你可以到官网阅读它的源码。</p><p>JJWT 的使用是非常简单的，下面我们用代码进行说明，关键代码我已做好注释。</p><ul><li>第一步，pom.xml 引入 JJWT 的 Maven 依赖。</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.jsonwebtoken&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;jjwt-api&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;0.11.2&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.jsonwebtoken&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;jjwt-impl&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;0.11.2&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;runtime&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.jsonwebtoken&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;jjwt-jackson&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">&lt;!-- or jjwt-gson if Gson is preferred --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;0.11.2&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;runtime&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.jsonwebtoken&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;jjwt-api&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;0.11.2&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.jsonwebtoken&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;jjwt-impl&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;0.11.2&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;runtime&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.jsonwebtoken&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;jjwt-jackson&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">&lt;!-- or jjwt-gson if Gson is preferred --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;0.11.2&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;runtime&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>第二步，编写创建 JWT 的测试用例，模拟真实环境 UserID 为 123 号的用户登录后的 JWT 生成过程。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JwtTestor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 创建Token</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createJwt</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//私钥字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">        String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1234567890_1234567890_1234567890&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//1.对秘钥做BASE64编码</span></span>
<span class="line"><span style="color:#E1E4E8;">        String base64 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BASE64Encoder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(key.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//2.生成秘钥对象,会根据base64长度自动选择相应的 HMAC 算法</span></span>
<span class="line"><span style="color:#E1E4E8;">        SecretKey secretKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Keys.</span><span style="color:#B392F0;">hmacShaKeyFor</span><span style="color:#E1E4E8;">(base64.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//3.利用JJWT生成Token</span></span>
<span class="line"><span style="color:#E1E4E8;">        String data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">userId</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:123}&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//载荷数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        String jwt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Jwts.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setSubject</span><span style="color:#E1E4E8;">(data).</span><span style="color:#B392F0;">signWith</span><span style="color:#E1E4E8;">(secretKey).</span><span style="color:#B392F0;">compact</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(jwt);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JwtTestor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 创建Token</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createJwt</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//私钥字符串</span></span>
<span class="line"><span style="color:#24292E;">        String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1234567890_1234567890_1234567890&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1.对秘钥做BASE64编码</span></span>
<span class="line"><span style="color:#24292E;">        String base64 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BASE64Encoder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(key.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2.生成秘钥对象,会根据base64长度自动选择相应的 HMAC 算法</span></span>
<span class="line"><span style="color:#24292E;">        SecretKey secretKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Keys.</span><span style="color:#6F42C1;">hmacShaKeyFor</span><span style="color:#24292E;">(base64.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//3.利用JJWT生成Token</span></span>
<span class="line"><span style="color:#24292E;">        String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">userId</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:123}&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//载荷数据</span></span>
<span class="line"><span style="color:#24292E;">        String jwt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Jwts.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setSubject</span><span style="color:#24292E;">(data).</span><span style="color:#6F42C1;">signWith</span><span style="color:#24292E;">(secretKey).</span><span style="color:#6F42C1;">compact</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(jwt);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行结果产生 JWT 字符串如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJ1c2VySWRcIjoxMjN9In0.</span><span style="color:#FDAEB7;font-style:italic;">1p_VTN46sukRJTYFxUg93CmfR3nJZRBm99ZK0e3d9Hw</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJ1c2VySWRcIjoxMjN9In0.</span><span style="color:#B31D28;font-style:italic;">1p_VTN46sukRJTYFxUg93CmfR3nJZRBm99ZK0e3d9Hw</span></span></code></pre></div><ul><li>第三步，验签代码，从 JWT 中提取 123 号用户数据。这里要保证 JWT 字符串、key 私钥与生成时保持一致。否则就会抛出验签失败 JwtException。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 校验及提取JWT数据</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkJwt</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    String jwt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJ1c2VySWRcIjoxMjN9In0.1p_VTN46sukRJTYFxUg93CmfR3nJZRBm99ZK0e3d9Hw&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//私钥</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1234567890_1234567890_1234567890&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//1.对秘钥做BASE64编码</span></span>
<span class="line"><span style="color:#E1E4E8;">    String base64 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BASE64Encoder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(key.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//2.生成秘钥对象,会根据base64长度自动选择相应的 HMAC 算法</span></span>
<span class="line"><span style="color:#E1E4E8;">    SecretKey secretKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Keys.</span><span style="color:#B392F0;">hmacShaKeyFor</span><span style="color:#E1E4E8;">(base64.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//3.验证Token</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//生成JWT解析器 </span></span>
<span class="line"><span style="color:#E1E4E8;">        JwtParser parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Jwts.</span><span style="color:#B392F0;">parserBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setSigningKey</span><span style="color:#E1E4E8;">(secretKey).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//解析JWT</span></span>
<span class="line"><span style="color:#E1E4E8;">        Jws&lt;</span><span style="color:#F97583;">Claims</span><span style="color:#E1E4E8;">&gt; claimsJws </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parseClaimsJws</span><span style="color:#E1E4E8;">(jwt);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//得到载荷中的用户数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        String subject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> claimsJws.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSubject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(subject);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (JwtException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//所有关于Jwt校验的异常都继承自JwtException</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Jwt校验失败&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 校验及提取JWT数据</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkJwt</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    String jwt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJ1c2VySWRcIjoxMjN9In0.1p_VTN46sukRJTYFxUg93CmfR3nJZRBm99ZK0e3d9Hw&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//私钥</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1234567890_1234567890_1234567890&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//1.对秘钥做BASE64编码</span></span>
<span class="line"><span style="color:#24292E;">    String base64 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BASE64Encoder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(key.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//2.生成秘钥对象,会根据base64长度自动选择相应的 HMAC 算法</span></span>
<span class="line"><span style="color:#24292E;">    SecretKey secretKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Keys.</span><span style="color:#6F42C1;">hmacShaKeyFor</span><span style="color:#24292E;">(base64.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//3.验证Token</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//生成JWT解析器 </span></span>
<span class="line"><span style="color:#24292E;">        JwtParser parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Jwts.</span><span style="color:#6F42C1;">parserBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setSigningKey</span><span style="color:#24292E;">(secretKey).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//解析JWT</span></span>
<span class="line"><span style="color:#24292E;">        Jws&lt;</span><span style="color:#D73A49;">Claims</span><span style="color:#24292E;">&gt; claimsJws </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parseClaimsJws</span><span style="color:#24292E;">(jwt);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//得到载荷中的用户数据</span></span>
<span class="line"><span style="color:#24292E;">        String subject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> claimsJws.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSubject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(subject);</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (JwtException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//所有关于Jwt校验的异常都继承自JwtException</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Jwt校验失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;userId&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;userId&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">}</span></span></code></pre></div><p>以上便是 JWT 的生成与校验代码，你会发现在加解密过程中，服务器私钥 key 是保障 JWT 安全的命脉。对于这个私钥在生产环境它不能写死在代码中，而是加密后保存在 Nacos 配置中心统一存储，同时定期更换私钥以防止关键信息泄露。</p><p>讲到这应该你已掌握 JWT 的基本用法，但是在微服务架构下又该如何设计用户认证体系呢？</p><h3 id="基于网关的统一用户认证" tabindex="-1">基于网关的统一用户认证 <a class="header-anchor" href="#基于网关的统一用户认证" aria-label="Permalink to &quot;基于网关的统一用户认证&quot;">​</a></h3><p>下面我们结合场景讲解 JWT 在微服务架构下的认证过程。这里我将介绍两种方案：</p><ul><li><p>服务端自主验签方案；</p></li><li><p>API 网关统一验签方案。</p></li></ul><h4 id="服务端自主验签方案" tabindex="-1">服务端自主验签方案 <a class="header-anchor" href="#服务端自主验签方案" aria-label="Permalink to &quot;服务端自主验签方案&quot;">​</a></h4><p>首先咱们来看服务端验签的架构图。</p>`,40),b=p(`<p>服务端自主验签方案</p><p>首先梳理下执行流程：</p><ul><li><p>第一步，认证中心微服务负责用户认证任务，在启动时从 Nacos 配置中心抽取 JWT 加密用私钥；</p></li><li><p>第二步，用户在登录页输入用户名密码，客户端向认证中心服务发起认证请求：</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//usercenter/login #认证中心用户认证（登录）地址</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//usercenter/login #认证中心用户认证（登录）地址</span></span></code></pre></div><ul><li>第三步，认证中心服务根据输入在用户数据库中进行认证校验，如果校验成功则返回认证中心将生成用户的JSON数据并创建对应的 JWT 返回给客户端，下面是认证中心返回的数据样本；</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;data&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;user&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;userId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;username&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;token&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJ1c2VySWRcIjoxLFwidXNlcm5hbWVcIjpcInpoYW5nc2FuXCIsXCJuYW1lXCI6XCLlvKDkuIlcIixcImdyYWRlXCI6XCJub3JtYWxcIn0ifQ.1HtfszarTxLrqPktDkzArTEc4ah5VO7QaOOJqmSeXEM&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;data&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;user&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;userId&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;username&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;token&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJ1c2VySWRcIjoxLFwidXNlcm5hbWVcIjpcInpoYW5nc2FuXCIsXCJuYW1lXCI6XCLlvKDkuIlcIixcImdyYWRlXCI6XCJub3JtYWxcIn0ifQ.1HtfszarTxLrqPktDkzArTEc4ah5VO7QaOOJqmSeXEM&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>第四步，在收到上述 JSON 数据后，客户端将其中 token 数据保存在 cookie 或者本地缓存中；</p></li><li><p>第五步，随后客户端向具体某个微服务发起新的请求，这个 JWT 都会附加在请求头或者 cookie 中发往 API 网关，网关根据路由规则将请求与jwt数据转发至具体的微服务。中间过程网关不对 JWT 做任何处理；</p></li><li><p>第六步，微服务接收到请求后，发现请求附带 JWT 数据，于是将 JWT 再次转发给用户认证服务，此时用户认证服务对 JWT 进行验签，验签成功提取其中用户编号，查询用户认证与授权的详细数据，数据结构如下所示：</p></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;data&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;user&quot;</span><span style="color:#E1E4E8;">: { </span><span style="color:#FDAEB7;font-style:italic;">#用户详细数据</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;userId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;username&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;grade&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;normal&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#FDAEB7;font-style:italic;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;idno&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">130</span><span style="color:#FDAEB7;font-style:italic;">.......</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;authorization&quot;</span><span style="color:#E1E4E8;">:{ </span><span style="color:#FDAEB7;font-style:italic;">#权限数据</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;role&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;permissions&quot;</span><span style="color:#E1E4E8;"> : [{</span><span style="color:#79B8FF;">&quot;addUser&quot;</span><span style="color:#FDAEB7;font-style:italic;">,</span><span style="color:#79B8FF;">&quot;delUser&quot;</span><span style="color:#FDAEB7;font-style:italic;">,</span><span style="color:#79B8FF;">&quot;...&quot;</span><span style="color:#E1E4E8;">}]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;data&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;user&quot;</span><span style="color:#24292E;">: { </span><span style="color:#B31D28;font-style:italic;">#用户详细数据</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;userId&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;username&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;grade&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;normal&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#B31D28;font-style:italic;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;idno&quot;</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">130</span><span style="color:#B31D28;font-style:italic;">.......</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;authorization&quot;</span><span style="color:#24292E;">:{ </span><span style="color:#B31D28;font-style:italic;">#权限数据</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;role&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;permissions&quot;</span><span style="color:#24292E;"> : [{</span><span style="color:#005CC5;">&quot;addUser&quot;</span><span style="color:#B31D28;font-style:italic;">,</span><span style="color:#005CC5;">&quot;delUser&quot;</span><span style="color:#B31D28;font-style:italic;">,</span><span style="color:#005CC5;">&quot;...&quot;</span><span style="color:#24292E;">}]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>第七步，具体的微服务收到上述 JSON 后，对当前执行的操作进行判断，检查是否拥有执行权限，权限检查通过执行业务代码，权限检查失败返回错误响应。</li></ul><p>到此从登录创建 JWT 到验签后执行业务代码的完整流程已经完成。</p><p>下面咱们来聊一聊第二种方案：</p><h4 id="api-网关统一验签方案" tabindex="-1">API 网关统一验签方案 <a class="header-anchor" href="#api-网关统一验签方案" aria-label="Permalink to &quot;API 网关统一验签方案&quot;">​</a></h4>`,12),B=p('<p>API 网关统一验签方案</p><p>API 网关统一验签与服务端验签最大的区别是在 API 网关层面就发起 JWT 的验签请求，之后路由过程中附加的是从认证中心返回的用户与权限数据，其他的操作步骤与方案一是完全相同的。</p><p>在这你可能又会有疑惑，为什么要设计两种不同的方案呢？其实这对应了不同的应用场景：</p><ul><li><p>服务端验签的时机是在业务代码执行前，控制的粒度更细。比如微服务 A 提供了&quot;商品查询&quot;与&quot;创建订单&quot;两个功能，前者不需要登录用户就可以使用，因此不需要向认证中心额外发起验签工作；而后者是登录后的功能，因此必须验签后才可执行。因为服务端验签是方法层面上的，所以可以精确控制方法是否验签。但也有不足，正是因为验签是在方法前执行，所以需要在所有业务方法上声明是否需要额外验签，尽管这个工作可以通过 Spring AOP+注解的方式无侵入实现，但这也无疑需要程序员额外关注，分散了开发业务的精力。</p></li><li><p>相应的，服务端验签的缺点反而成为 API 网关验签的优势。API 网关不关心后端的服务逻辑，只要请求附带 JWT，就自动向认证中心进行验签。这种简单粗暴的策略确实让模块耦合有所降低，处理起来也更简单，但也带来了性能问题，因为只要请求包含 JWT 就会产生认证中心的远程通信。如果前端工程师没有对 JWT 进行精确控制，很可能带来大量多余的认证操作，系统性能肯定会受到影响。</p></li></ul><p>那在项目中到底如何选择呢？服务端验签控制力度更细，适合应用在低延迟、高并发的应用，例如导航、实时交易系统、军事应用。而 API 统一网关则更适合用在传统的企业应用，可以让程序员专心开发业务逻辑，同时程序也更容易维护。</p><h4 id="全新的挑战" tabindex="-1">全新的挑战 <a class="header-anchor" href="#全新的挑战" aria-label="Permalink to &quot;全新的挑战&quot;">​</a></h4><p>虽然 JWT 看似很美，在实施落地过程中也会遇到一些特有的问题，例如：</p><ul><li>JWT 生成后失效期是固定的，很多业务中需要客户端在不改变 JWT 的前提下，实现 JWT 的&quot;续签&quot;功能，但这单靠 JWT 自身特性是无法做到的，因为 JWT 的设计本身就不允许生成完全相同的字符串。为了解决这个问题，很多项目在生成的 JWT 设为&quot;永久生效&quot;，架构师利用 Redis 的 Expire 过期特性在后端控制 JWT 的时效性。这么做虽然让 JWT 本身变得有状态，但这可能也是在各种权衡后的&quot;最优解&quot;。类似的，例如：强制 JWT 立即失效、动态 JWT 有效期都可以使用这个办法解决。</li></ul>',8),I=s("p",null,"某个 JWT 在 3600 秒后过期",-1),_=s("ul",null,[s("li",null,"对于上面两种认证方案，还有优化的空间，比如在服务A第一次对某个 JWT 进行验签后获取用户与权限数据，那在 JWT 的有效期内便可将数据在本地内存或者 Redis 中进行缓存，这样下一次同样的 JWT 访问时直接从缓存中提取即可，可以节省大量服务间通信时间。但引入缓存后你也要时刻关注缓存与用户数据的一致性问题，是要性能还是要数据可靠，这又是一个架构师需要面对的抉择。")],-1),m=s("h3",{id:"小结与预告",tabindex:"-1"},[n("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),v=s("p",null,"本讲咱们学习了三方面内容，首先咱们回顾了基于 Session 的有状态用户认证解决方案，其次介绍了 JWT 与 JJWT 的使用，最后讲解了利用 JWT 实现微服务架构认证的两种方案，对产生的新问题也进行了梳理。",-1),T=s("p",null,"在多年的架构生涯中，我自己也在不断感慨，架构是一门取舍的艺术，没有完美的架构，只有适合的场景，希望未来同学们可以多学习一些前沿技术，兴许随着技术发展没准鱼和熊掌真的可以兼得呢。",-1),D=s("p",null,"下一讲，咱们学习在微服务架构中，有哪些成熟的一致性方案可以为我所用。",-1);function W(k,j,S,w,f,x){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/38/6C/CioPOWB5OhSAKQaJABYIev3QiUE757.png"}),n(),y,i,l(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/38/64/Cgp9HWB5Oh-ANQieAALBlYD72j0702.png"}),n(),u,d,l(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/38/64/Cgp9HWB5OiiAUBiSAAEie5jZpD4532.png"}),n(),g,F,h,l(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M00/38/64/Cgp9HWB5OjKAbiQDAAFw6rK2PgI811.png"}),n(),q,C,J,l(a,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M00/38/6C/CioPOWB5OjyAekTuAAE_RTg-3O8505.png"}),n(),A,l(a,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M00/38/6C/CioPOWB5OlCAfQy7AAJ62nTplCo660.png"}),n(),b,l(a,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image6/M00/38/64/Cgp9HWB5OlyAf4suAAJT3t1mTSg690.png"}),n(),B,l(a,{alt:"图片8.png",src:"https://s0.lgstatic.com/i/image6/M00/38/6C/CioPOWB5OmaAIYLtAAHj_0Wi_3w900.png"}),n(),I,_,m,v,T,D])}const P=o(r,[["render",W]]);export{O as __pageData,P as default};
