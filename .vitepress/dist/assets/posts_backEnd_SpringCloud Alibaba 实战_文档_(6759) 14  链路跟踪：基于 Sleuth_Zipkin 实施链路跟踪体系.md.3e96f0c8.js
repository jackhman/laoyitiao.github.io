import{_ as o,j as e,o as t,g as c,k as l,h as a,Q as p,s}from"./chunks/framework.4e7d56ce.js";const $=JSON.parse('{"title":"14链路跟踪：基于Sleuth+Zipkin实施链路跟踪体系","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6759) 14  链路跟踪：基于 Sleuth+Zipkin 实施链路跟踪体系.md","filePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6759) 14  链路跟踪：基于 Sleuth+Zipkin 实施链路跟踪体系.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/SpringCloud Alibaba 实战_文档/(6759) 14  链路跟踪：基于 Sleuth+Zipkin 实施链路跟踪体系.md"},y=p('<h1 id="_14链路跟踪-基于sleuth-zipkin实施链路跟踪体系" tabindex="-1">14链路跟踪：基于Sleuth+Zipkin实施链路跟踪体系 <a class="header-anchor" href="#_14链路跟踪-基于sleuth-zipkin实施链路跟踪体系" aria-label="Permalink to &quot;14链路跟踪：基于Sleuth+Zipkin实施链路跟踪体系&quot;">​</a></h1><p>在前面几讲我们主要讲解了基于 Sentinel 如何对微服务架构提供限流、熔断保护。从本讲开始，我们继续完善微服务架构，介绍如何在 Spring Cloud 架构下基于 Sleuth+Zipkin 实现微服务链路追踪。本讲咱们将学习以下三方面内容：</p><ul><li><p>介绍微服务链路追踪的原理；</p></li><li><p>讲解基于 Spring Cloud Sleuth 实现链路追踪；</p></li><li><p>构建 Zipkin Server 实现链路追踪的可视化管理。</p></li></ul><p>下面咱们先来介绍什么是微服务链路追踪。</p><h3 id="微服务链路追踪" tabindex="-1">微服务链路追踪 <a class="header-anchor" href="#微服务链路追踪" aria-label="Permalink to &quot;微服务链路追踪&quot;">​</a></h3><p>我们先看一个图，都知道在微服务架构下，系统的功能是由大量的微服务协调组成的，例如：电商创建订单业务就需要订单服务、库存服务、支付服务、短信通知服务逐级调用才能完成。而每个服务可能是由不同的团队进行开发，部署在成百上千台服务器上。</p>',6),E=p(`<p>复杂的调用链路</p><p>如此复杂的消息传递过程，当系统发生故障的时候，就需要一种机制对故障点进行快速定位，确认是哪个服务出了问题，链路追踪技术由此而生。所谓的链路追踪，就是运行时通过某种方式记录下服务之间的调用过程，在通过可视化的 UI 界面帮研发运维人员快速定位到出错点。引入链路追踪，是微服务架构运维的底层基础，没有它，运维人员就像盲人摸象一样，根本无法了解服务间通信过程。</p><p>在 Spring Cloud 标准生态下内置了 Sleuth 这个组件，它通过扩展 Logging 日志的方式实现微服务的链路追踪。说起来比较晦涩，咱们看一个实例就明白了，在标准的微服务下日志产生的格式是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">33.441</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">INFO</span><span style="color:#E1E4E8;"> [nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7000</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] c.netflix.config.ChainedDynamicProperty  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Flipping property</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service.ribbon.ActiveConnectionsLimit to use NEXT property</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2147483647</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">33.441</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">INFO</span><span style="color:#24292E;"> [nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7000</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] c.netflix.config.ChainedDynamicProperty  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Flipping property</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service.ribbon.ActiveConnectionsLimit to use NEXT property</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2147483647</span></span></code></pre></div><p>但是当引入 Spring Cloud Sleuth 链路追踪组件后就会变成下面的格式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">33.441</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">INFO</span><span style="color:#E1E4E8;"> [a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service,5f70945e0eefa832,5f70945e0eefa832,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">] </span><span style="color:#79B8FF;">18404</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7000</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] c.netflix.config.ChainedDynamicProperty  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Flipping property</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service.ribbon.ActiveConnectionsLimit to use NEXT property</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2147483647</span></span>
<span class="line"><span style="color:#E1E4E8;">比较后会发现，在原有日志中额外附加了下面的文本</span></span>
<span class="line"><span style="color:#E1E4E8;">[a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service,5f70945e0eefa832,5f70945e0eefa832,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">33.441</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">INFO</span><span style="color:#24292E;"> [a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service,5f70945e0eefa832,5f70945e0eefa832,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">] </span><span style="color:#005CC5;">18404</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7000</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] c.netflix.config.ChainedDynamicProperty  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Flipping property</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service.ribbon.ActiveConnectionsLimit to use NEXT property</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2147483647</span></span>
<span class="line"><span style="color:#24292E;">比较后会发现，在原有日志中额外附加了下面的文本</span></span>
<span class="line"><span style="color:#24292E;">[a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service,5f70945e0eefa832,5f70945e0eefa832,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">]</span></span></code></pre></div><p>这段文本就是 Sleuth 在微服务日志中附加的链路调用数据，它的格式是固定的，包含以下四部分：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[微服务 Id,TraceId,SpanId,isExport]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[微服务 Id,TraceId,SpanId,isExport]</span></span></code></pre></div>`,8),i=p(`<p>链路追踪数据的组成</p><ul><li><p><strong>微服务 Id</strong>，说明日志是由哪个微服务产生的。</p></li><li><p><strong>TraceId</strong>，轨迹编号。一次完整的业务处理过程被称为轨迹，例如：实现登录功能需要从服务 A 调用服务 B，服务B再调用服务 C，那这一次登录处理的过程就是一个轨迹，从前端应用发来请求到接收到响应，每一次完整的业务功能处理过程都对应唯一的 TraceId。</p></li><li><p><strong>SpanId</strong>，步骤编号。刚才要实现登录功能需要从服务 A 到服务 C 涉及 3 个微服务处理，按处理前后顺序，每一个微服务处理时日志都被赋予不同的 SpanId。一个 TraceId 拥有多个 SpanId，而 SpanId 只能隶属于某一个 TraceId。</p></li><li><p><strong>导出标识</strong>，当前这个日志是否被导出，该值为 true 的时候说明当前轨迹数据允许被其他链路追踪可视化服务收集展现。</p></li></ul><p>下面我们看一个完整的追踪数据实例：</p><p>我模拟了<strong>服务 A -&gt; 服务 B -&gt; 服务 C</strong>的调用链路，下面是分别产生的日志。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#服务 A 应用控制台日志</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54.394</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DEBUG</span><span style="color:#E1E4E8;"> [a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service,e8ca7047a782568b,e8ca7047a782568b,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">] </span><span style="color:#79B8FF;">21320</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7000</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ...</span></span>
<span class="line"><span style="color:#E1E4E8;">#服务 B 应用控制台日志</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54.402</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DEBUG</span><span style="color:#E1E4E8;"> [b</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service,e8ca7047a782568b,b6aa80fb33e71de6,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">] </span><span style="color:#79B8FF;">21968</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8000</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ...</span></span>
<span class="line"><span style="color:#E1E4E8;">#服务 C 应用控制台日志</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54.405</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DEBUG</span><span style="color:#E1E4E8;"> [c</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service,e8ca7047a782568b,537098c59827a242,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">] </span><span style="color:#79B8FF;">17184</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9000</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#服务 A 应用控制台日志</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54.394</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DEBUG</span><span style="color:#24292E;"> [a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service,e8ca7047a782568b,e8ca7047a782568b,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">] </span><span style="color:#005CC5;">21320</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7000</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ...</span></span>
<span class="line"><span style="color:#24292E;">#服务 B 应用控制台日志</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54.402</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DEBUG</span><span style="color:#24292E;"> [b</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service,e8ca7047a782568b,b6aa80fb33e71de6,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">] </span><span style="color:#005CC5;">21968</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8000</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ...</span></span>
<span class="line"><span style="color:#24292E;">#服务 C 应用控制台日志</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54.405</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DEBUG</span><span style="color:#24292E;"> [c</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service,e8ca7047a782568b,537098c59827a242,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">] </span><span style="color:#005CC5;">17184</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9000</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ...</span></span></code></pre></div><p>可以发现，在 DEBUG 级别下链路追踪数据被打印出来，按调用时间先后顺序分别是 A 到 C 依次出现。因为是一次完整业务处理，TraceId 都是相同的，SpanId 却各不相同，这些日志都已经被 Sleuth 导出，可以被 ZipKin 收集展示。</p><p>Zipkin 是 推特的一个开源项目，它能收集各个服务实例上的链路追踪数据并可视化展现。刚才 ABC 服务控制台产生的日志在 ZipKin 的 UI 界面中会以链路追踪图表的形式展现。</p>`,7),d=s("p",null,"链路追踪图表",-1),g=s("p",null,"通过这个图表可以非常直观的了解业务处理过程中服务间的依赖关系与处理时间、处理状态等信息，是开发运维人员进行故障分析时必要的工具。",-1),F=s("p",null,"说到这，想必你对服务链路追踪与 Sleuth+Zipkin 组合已经有了初步认识，下面咱们通过实例讲解如何在微服务架构中进行链路追踪。这个过程分为两个阶段：",-1),C=s("ul",null,[s("li",null,[s("p",null,"在服务中加入 Spring Cloud Sleuth 生成链路追踪日志；")]),s("li",null,[s("p",null,"通过 ZipKin 收集链路最终日志，生成可视化图表。")])],-1),u=s("h3",{id:"微服务整合-sleuth",tabindex:"-1"},[a("微服务整合 Sleuth "),s("a",{class:"header-anchor",href:"#微服务整合-sleuth","aria-label":'Permalink to "微服务整合 Sleuth"'},"​")],-1),A=s("p",null,"为了演示需要，这里创建 a-service、b-service、c-service 三个微服务工程，配置过程十分简单，我们把关键代码拿出来说明。",-1),h=p(`<p>调用链路示意图</p><p>第一步，创建 a-service、b-service、c-service 三个 Spring Boot 工程，pom.xml 依赖如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--Spring Web应用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--Nacos 客户端 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--服务间通信组件OpenFeign --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-openfeign&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;2.2.6.RELEASE&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">c-service的pom.xml依赖如下：</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--Spring Web应用 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--Nacos 客户端 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--服务间通信组件OpenFeign --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-openfeign&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;2.2.6.RELEASE&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">c-service的pom.xml依赖如下：</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>因为调用关系是服务 A 调用服务 B，服务 B 调用服务 C，所以在 A、B 两个服务中需要额外依赖 OpenFeign 实现服务间通信。</p><p>第二步，配置 ABC 服务的 application.yml，这三个配置文件除了应用名称与服务端口不同外，其他都一样。这里设置 A 服务端口为 7000，B 服务端口 8000，C 服务端口 9000。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">7000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#a:7000/b:8000/c:9000 </span></span>
<span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">nacos</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">discovery</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">server-addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">192.168.31.10:8848</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">a-service</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#a-service/b-service/c-service</span></span>
<span class="line"><span style="color:#85E89D;">logging</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">level</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">debug</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#为演示需要，开启debug级别日志</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">7000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#a:7000/b:8000/c:9000 </span></span>
<span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">discovery</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">192.168.31.10:8848</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">a-service</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#a-service/b-service/c-service</span></span>
<span class="line"><span style="color:#22863A;">logging</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">level</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">root</span><span style="color:#24292E;">: </span><span style="color:#032F62;">debug</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#为演示需要，开启debug级别日志</span></span></code></pre></div><p>第三步，实现业务逻辑，代码如下：</p><ul><li><strong>c-service 工程。</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SampleController，methodC方法产生响应字符串</span><span style="color:#9ECBFF;">&quot;-&gt; Service C&quot;</span><span style="color:#E1E4E8;">，方法映射地址</span><span style="color:#9ECBFF;">&quot;/c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SampleController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/c&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">methodC</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; Service C&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SampleController，methodC方法产生响应字符串</span><span style="color:#032F62;">&quot;-&gt; Service C&quot;</span><span style="color:#24292E;">，方法映射地址</span><span style="color:#032F62;">&quot;/c&quot;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SampleController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/c&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">methodC</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; Service C&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>b-service 工程。</strong></li></ul><p>CServiceFeignClient 通过 OpenFeign 实现了 C 服务的通信客户端，方法名为 methodC。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FeignClient</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c-service&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CServiceFeignClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/c&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">methodC</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">FeignClient</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;c-service&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CServiceFeignClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/c&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">methodC</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SampleController 通过 methodB 方法调用 methodC 的同时为响应附加的字符串&quot;-&gt; Service B&quot;，方法映射地址&quot;/b&quot;。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SampleController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CServiceFeignClient cService;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/b&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">methodB</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cService.</span><span style="color:#B392F0;">methodC</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; Service B&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SampleController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CServiceFeignClient cService;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/b&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">methodB</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cService.</span><span style="color:#6F42C1;">methodC</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; Service B&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>a-service 工程。</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">BServiceFeignClient通过OpenFeign实现了B服务的通信客户端，方法名为methodB</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FeignClient</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b-service&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BServiceFeignClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/b&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">methodB</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BServiceFeignClient通过OpenFeign实现了B服务的通信客户端，方法名为methodB</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">FeignClient</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b-service&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BServiceFeignClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/b&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">methodB</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SampleController 通过 methodA 方法调用 methodB 的同时，成为响应附加的字符串&quot;-&gt; Service A&quot;，方法映射地址&quot;/a&quot;。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SampleController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> BServiceFeignClient bService;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/a&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">methodA</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bService.</span><span style="color:#B392F0;">methodB</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-&gt; Service A&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SampleController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BServiceFeignClient bService;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/a&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">methodA</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bService.</span><span style="color:#6F42C1;">methodB</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&gt; Service A&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样一个完整的调用链路已形成。在 3 个服务实例启动后，访问 A 实例</p><p>访问 <a href="http://localhost:7000/a?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost:7000/a</a> 得到运行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> ServiceA </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Service B </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Service C</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ServiceA </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Service B </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Service C</span></span></code></pre></div><p>可以看到 ABC 三个服务按前后顺序依次产生结果，但目前在日志中并没有包含任何链路追踪数据，那如何引入 Sleuth 呢？</p><p>很简单，只需要打开三个服务工程的 pom.xml 文件分别引入 spring-cloud-starter-sleuth 依赖。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--添加Sleuth依赖 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-sleuth&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;2.2.6.RELEASE&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--添加Sleuth依赖 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-sleuth&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;2.2.6.RELEASE&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>加入依赖后，重启服务，无须做任何额外设置，Spring Cloud Sleuth 便自动为日志增加了链路追踪数据，下面是经过我整理后的追踪数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#服务 A 应用控制台日志，已附加链路追踪数据</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54.394</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DEBUG</span><span style="color:#E1E4E8;"> [a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service,e8ca7047a782568b,e8ca7047a782568b,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">] </span><span style="color:#79B8FF;">21320</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7000</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ...</span></span>
<span class="line"><span style="color:#E1E4E8;">#服务 B 应用控制台日志</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54.402</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DEBUG</span><span style="color:#E1E4E8;"> [b</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service,e8ca7047a782568b,b6aa80fb33e71de6,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">] </span><span style="color:#79B8FF;">21968</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8000</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ...</span></span>
<span class="line"><span style="color:#E1E4E8;">#服务 C 应用控制台日志</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54.405</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DEBUG</span><span style="color:#E1E4E8;"> [c</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service,e8ca7047a782568b,537098c59827a242,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">] </span><span style="color:#79B8FF;">17184</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9000</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">exec</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#服务 A 应用控制台日志，已附加链路追踪数据</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54.394</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DEBUG</span><span style="color:#24292E;"> [a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service,e8ca7047a782568b,e8ca7047a782568b,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">] </span><span style="color:#005CC5;">21320</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7000</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ...</span></span>
<span class="line"><span style="color:#24292E;">#服务 B 应用控制台日志</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54.402</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DEBUG</span><span style="color:#24292E;"> [b</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service,e8ca7047a782568b,b6aa80fb33e71de6,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">] </span><span style="color:#005CC5;">21968</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8000</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ...</span></span>
<span class="line"><span style="color:#24292E;">#服务 C 应用控制台日志</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54.405</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DEBUG</span><span style="color:#24292E;"> [c</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service,e8ca7047a782568b,537098c59827a242,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">] </span><span style="color:#005CC5;">17184</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9000</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">exec</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] org.apache.tomcat.util.http.Parameters   </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ...</span></span></code></pre></div><p>虽然数据已产生，但如果在生产环境靠人工组织数以万计的链路日志显然不现实，我们还需要部署链路追踪数据的分析工具 ZipKin 来简化这个过程。</p><h3 id="构建-zipkin-server-实现链路追踪的可视化管理" tabindex="-1">构建 Zipkin Server 实现链路追踪的可视化管理 <a class="header-anchor" href="#构建-zipkin-server-实现链路追踪的可视化管理" aria-label="Permalink to &quot;构建 Zipkin Server 实现链路追踪的可视化管理&quot;">​</a></h3><p>Zipkin 是由推特开发的分布式链路追踪系统，用于对 Sleuth 产生的日志加以收集并采用可视化的数据对链路追踪进行分析与图表展示，Zipkin 是典型的 C/S（客户端与服务端）架构模式，需要独立部署 Zipkin 服务器，同时也需要在微服务内部持有Zipkin客户端才可以自动实现日志的推送与展示。</p>`,29),D=s("p",null,"Zipkin 的架构示意图",-1),v=s("p",null,"在部署 Zipkin 服务端后，一旦微服务产生链路追踪日志，Zipkin 客户端便会自动以异步形式将日志数据推送至 Zipkin 服务端，Zipkin 服务端对数据进行组织整理，开发运维人员便可通过 Zipkin 服务端提供的 UI 界面进行查看。下面咱们来讲解 Zipkin 服务端与客户端的部署过程。",-1),b=s("h3",{id:"部署-zipkin-服务端",tabindex:"-1"},[a("部署 Zipkin 服务端 "),s("a",{class:"header-anchor",href:"#部署-zipkin-服务端","aria-label":'Permalink to "部署 Zipkin 服务端"'},"​")],-1),B=s("p",null,"Zipkin 服务端部署非常简单，可以通过官网快速上手。",-1),_=s("p",null,[s("a",{href:"https://zipkin.io/pages/quickstart.html?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"https://zipkin.io/pages/quickstart.html"),a("。")],-1),m=p(`<p>快速部署 Zipkin 服务端</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sSL https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//zipkin.io/quickstart.sh | bash -s</span></span>
<span class="line"><span style="color:#E1E4E8;">java </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jar zipkin.jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sSL https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//zipkin.io/quickstart.sh | bash -s</span></span>
<span class="line"><span style="color:#24292E;">java </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jar zipkin.jar</span></span></code></pre></div><p>因为 Zipkin 完全是基于 Java 开发的，在安装好 Java 环境后，只需要使用 Curl 命令下载 Zipkin 最新 Jar 包，并利用 Java 命令启动执行即可。</p>`,3),k=p('<p>Zipkin 服务端启动日志</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Armeria server started at ports</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9411</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">ServerPort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9411</span><span style="color:#E1E4E8;">, [http])}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Armeria server started at ports</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9411</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">ServerPort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9411</span><span style="color:#24292E;">, [http])}</span></span></code></pre></div><p>这里有一点需要注意，默认 Zipkin 监听本机 9411 端口，如果是网络远程访问，请在系统防火墙放行 9411 端口，否则无法通信。</p><p>启动成功后，访问 Zipkin 后台。</p><p><a href="http://localhost:9411/zipkin/?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost:9411/zipkin/</a></p>',5),S=p(`<p>Zipkin 服务端 UI</p><p>此时映入眼帘的就是 Zipkin 内置的分析 UI 界面，当前因为没有任何服务接入，查询不到任何数据，下面咱们进行 Zipkin 客户端接入。</p><h4 id="在微服务安装-zipkin-客户端" tabindex="-1">在微服务安装 Zipkin 客户端 <a class="header-anchor" href="#在微服务安装-zipkin-客户端" aria-label="Permalink to &quot;在微服务安装 Zipkin 客户端&quot;">​</a></h4><p>Zipkin 客户端是以 Maven 依赖的形式在微服务中进行安装。</p><p>第一步，打开 ABC 工程的 pom.xml 文件，引入 Zipkin 客户端。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-zipkin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;2.2.6.RELEASE&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-zipkin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;2.2.6.RELEASE&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>第二步，打开 ABC 工程的 application.yml 配置 Zipkin 通信地址以及采样率。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">sleuth</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">sampler</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#采样器</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">probability</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#采样率，采样率是采集Trace的比率，默认0.1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">rate</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#每秒数据采集量，最多n条/秒Trace</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">zipkin</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#设置zipkin服务端地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">base-url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">http://localhost:9411</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">sleuth</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">sampler</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#采样器</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">probability</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#采样率，采样率是采集Trace的比率，默认0.1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">rate</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#每秒数据采集量，最多n条/秒Trace</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">zipkin</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#设置zipkin服务端地址</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">base-url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">http://localhost:9411</span></span></code></pre></div><p>spring.zipkin.base-url 设置可用的 Zipkin 服务端IP端口即可。</p><p>另一个采样器的两个设置项需要重点说明：</p><ul><li><p>spring.sleuth.sampler.probability 是指采样率，假设在过去的 1 秒 a 服务实例产生了 10 个 Trace，如果采用默认采样率 0.1 则代表只有其中1条会被发送到 Zipkin 服务端进行分析整理，如果设为 1，则 10 条 Trace 都会被发送到服务端进行处理。</p></li><li><p>spring.sleuth.sampler.rate 指每秒最多采集量，说明每条最多允许采集多少条 Trace，超出部分将直接抛弃。</p></li></ul><p>将 ABC 服务都设置好后，启动应用，重新访问<a href="http://localhost:7000/a?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost:7000/a</a>地址，然后打开 Zipkin 服务端 UI 界面<a href="http://localhost:9411?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost:9411</a>，点击&quot;查找&quot;按钮，便会出现调用链路。</p>`,12),f=s("p",null,"查询调用链路",-1),I=s("p",null,"查询结果",-1),q=s("p",null,"点击执行之间的蓝条，便会出现对应的链路调用图。",-1),T=s("p",null,"链路条调用图",-1),x=s("p",null,"通过这个图可以直观了解到 ABC 三个服务的执行时间、执行顺序、访问地址、访问方式以及是否执行成功。如果你点击对应的色条，还可以看到更详细的内容。",-1),Z=s("p",null,"链路调用明细",-1),P=s("p",null,'下面咱们做一个实验，将 C 服务停止，看链路图会产生什么变化。停止后再次访问 A 服务报 500 错误"java.net.SocketTimeoutException: Read timed out"。此时链路追踪图会显示错误。',-1),j=s("p",null,"异常情况下的链路追踪",-1),R=s("p",null,"通过图表发现最后 b-service 只有 6 纳秒执行时间肯定是有问题的，点击后查看明细。",-1),G=s("p",null,"异常明细",-1),M=s("p",null,"异常信息已经非常清晰的说明 C 服务没有可用的实例导致处理失败，开发人员针对这个问题进行及时补救即可。",-1),V=s("p",null,"讲到这里，我们通过实例的形式带你搭建了基于 Sleuth+Zipkin 的链路追踪的基础架构，下面我们进行一下总结。",-1),z=s("h3",{id:"小结与总结",tabindex:"-1"},[a("小结与总结 "),s("a",{class:"header-anchor",href:"#小结与总结","aria-label":'Permalink to "小结与总结"'},"​")],-1),w=s("p",null,"本讲咱们学习了三方面内容，首先介绍了链路追踪的作用并分析了 Sleuth+Zipkin 基于日志追踪的原理；其次我们掌握了 Sleuth 的部署方法，只需要引入 Sleuth 的依赖即可；最后介绍了如何引入 Zipkin 实现可视化链路追踪，并模拟了异常情况。",-1),U=s("p",null,"这里咱们留一道讨论题：在日常的开发过程中，研发人员会开发各种不同功能的 RESTful 接口，如何将这些接口的文档化以及如何对这些接口进行版本管理呢？如果你有这方面经验，不妨写在评论中和大家一起分享下。",-1),N=s("p",null,"下一讲，我们将介绍另一款国产的链路跟踪产品 SkyWalking 的使用办法。",-1);function L(O,W,H,K,J,X){const n=e("Image");return t(),c("div",null,[y,l(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/A5/Cgp9HWBldo6APrO6AAEGOxZjZu0392.png"}),a(),E,l(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/AD/CioPOWBldpiAAEEzAAEIV3dI0v0620.png"}),a(),i,l(n,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/A5/Cgp9HWBldqaAet1VAAEhVL4p5dM017.png"}),a(),d,g,F,C,u,A,l(n,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/AD/CioPOWBldrOAGWTLAABgPlbPohY295.png"}),a(),h,l(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/A6/Cgp9HWBldtqACzyVAAEeD5EF8GE518.png"}),a(),D,v,b,B,_,l(n,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/A6/Cgp9HWBlduaAKJDQAAHelVn9Llw043.png"}),a(),m,l(n,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/AE/CioPOWBldu-AfKZTAAVsfFaI5dg233.png"}),a(),k,l(n,{alt:"图片8.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/A6/Cgp9HWBldvuAB7WhAACcYRFoBMA812.png"}),a(),S,l(n,{alt:"图片9.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/A6/Cgp9HWBldwyANV6BAAEIr9R5lAA439.png"}),a(),f,l(n,{alt:"图片10.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/A6/Cgp9HWBldxOAUW52AACpYTg2JiM395.png"}),a(),I,q,l(n,{alt:"图片11.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/A6/Cgp9HWBldxuAOUJJAADMMxuCCC4773.png"}),a(),T,x,l(n,{alt:"图片12.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/A6/Cgp9HWBldyKAKVZTAAFwUrk3trU141.png"}),a(),Z,P,l(n,{alt:"图片13.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/AF/CioPOWBldymALd3wAACKH8C4Co8299.png"}),a(),j,R,l(n,{alt:"图片14.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/AF/CioPOWBldzCAFF3MAAG2T6bpl4w635.png"}),a(),G,M,V,z,w,U,N])}const Y=o(r,[["render",L]]);export{$ as __pageData,Y as default};
