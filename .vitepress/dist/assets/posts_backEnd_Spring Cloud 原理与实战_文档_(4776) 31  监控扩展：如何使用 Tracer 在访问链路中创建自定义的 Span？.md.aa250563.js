import{_ as o,j as e,o as t,g as c,k as p,h as n,s,Q as l}from"./chunks/framework.e0c66c3f.js";const j=JSON.parse('{"title":"使用 Brave 创建自定义 Span ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4776) 31  监控扩展：如何使用 Tracer 在访问链路中创建自定义的 Span？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4776) 31  监控扩展：如何使用 Tracer 在访问链路中创建自定义的 Span？.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4776) 31  监控扩展：如何使用 Tracer 在访问链路中创建自定义的 Span？.md"},E=s("p",null,"在了解了 Spring Cloud Sleuth 的基本工作原理以及与 Zipkin 之间的集成方案之后，我们不禁要想，虽然内置的日志埋点和采集功能已经能够满足日常开发的大多数场景需要，但如果我想在业务系统中重点监控某些业务操作时，是不是有办法来创建自定义的 Span 并纳入可视化监控机制中呢？答案是肯定的，今天的内容我们就围绕如何使用 Spring Cloud Sleuth 底层的 Brave 框架在服务访问链路中添加自定义Span这一话题展开讨论。",-1),y=s("h3",{id:"使用-brave-创建自定义-span",tabindex:"-1"},[n("使用 Brave 创建自定义 Span "),s("a",{class:"header-anchor",href:"#使用-brave-创建自定义-span","aria-label":'Permalink to "使用 Brave 创建自定义 Span"'},"​")],-1),i=s("p",null,"从 2.X 版本开始，Spring Cloud Sleuth 全面使用 Brave 作为其底层的服务跟踪实现框架。原本在 1.X 版本中通过 Spring Cloud Sleuth 自带的 org.springframework.cloud.sleuth.Tracer 接口创建和管理自定义 Span 的方法将不再有效。因此，想要在访问链路中创建自定义的 Span，需要对 Brave 框架所提供的功能有足够的了解。",-1),d=s("p",null,"事实上，Brave 是 Java 版的 Zipkin 客户端，它将收集的跟踪信息，以 Span 的形式上报给 Zipkin 系统。我们首先来关注 Brave 中的 Span 类，该类的方法列表如下所示：",-1),u=l(`<p>Span 类的方法列表</p><p>注意到 Span 是一个抽象类，在上面的方法列表中，我们也看到该类的几乎所有方法都是抽象方法，需要子类进行实现。在 Brave 中，该抽象类的子类就是 RealSpan。RealSpan 中的 start 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Span </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timestamp) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      state.</span><span style="color:#B392F0;">startTimestamp</span><span style="color:#E1E4E8;">(timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Span </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timestamp) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">      state.</span><span style="color:#6F42C1;">startTimestamp</span><span style="color:#24292E;">(timestamp);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 state 是一个可变的 MutableSpan，而上述 start 方法就是为这个 MutableSpan 设置了开始时间。可以想象，对应的 finish 方法也会为 MutableSpan 设置结束时间，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finish</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timestamp) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pendingSpans.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(context)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      state.</span><span style="color:#B392F0;">finishTimestamp</span><span style="color:#E1E4E8;">(timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    finishedSpanHandler.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(context, state);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finish</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timestamp) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pendingSpans.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(context)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">      state.</span><span style="color:#6F42C1;">finishTimestamp</span><span style="color:#24292E;">(timestamp);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    finishedSpanHandler.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(context, state);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于关闭 Span 的操作而言，上述方法还添加了一个 Handler 以便执行回调逻辑，这也是非常常见的一种实现技巧。我们接着来看另一个非常有用的 annotate 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Span </span><span style="color:#B392F0;">annotate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timestamp, String value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;cs&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        state.</span><span style="color:#B392F0;">kind</span><span style="color:#E1E4E8;">(Span.Kind.CLIENT);</span></span>
<span class="line"><span style="color:#E1E4E8;">        state.</span><span style="color:#B392F0;">startTimestamp</span><span style="color:#E1E4E8;">(timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;sr&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        state.</span><span style="color:#B392F0;">kind</span><span style="color:#E1E4E8;">(Span.Kind.SERVER);</span></span>
<span class="line"><span style="color:#E1E4E8;">        state.</span><span style="color:#B392F0;">startTimestamp</span><span style="color:#E1E4E8;">(timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;cr&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        state.</span><span style="color:#B392F0;">kind</span><span style="color:#E1E4E8;">(Span.Kind.CLIENT);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">finish</span><span style="color:#E1E4E8;">(timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;ss&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        state.</span><span style="color:#B392F0;">kind</span><span style="color:#E1E4E8;">(Span.Kind.SERVER);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">finish</span><span style="color:#E1E4E8;">(timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        state.</span><span style="color:#B392F0;">annotate</span><span style="color:#E1E4E8;">(timestamp, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Span </span><span style="color:#6F42C1;">annotate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timestamp, String value) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;cs&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">        state.</span><span style="color:#6F42C1;">kind</span><span style="color:#24292E;">(Span.Kind.CLIENT);</span></span>
<span class="line"><span style="color:#24292E;">        state.</span><span style="color:#6F42C1;">startTimestamp</span><span style="color:#24292E;">(timestamp);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;sr&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">        state.</span><span style="color:#6F42C1;">kind</span><span style="color:#24292E;">(Span.Kind.SERVER);</span></span>
<span class="line"><span style="color:#24292E;">        state.</span><span style="color:#6F42C1;">startTimestamp</span><span style="color:#24292E;">(timestamp);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;cr&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">        state.</span><span style="color:#6F42C1;">kind</span><span style="color:#24292E;">(Span.Kind.CLIENT);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">finish</span><span style="color:#24292E;">(timestamp);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;ss&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">        state.</span><span style="color:#6F42C1;">kind</span><span style="color:#24292E;">(Span.Kind.SERVER);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">finish</span><span style="color:#24292E;">(timestamp);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">        state.</span><span style="color:#6F42C1;">annotate</span><span style="color:#24292E;">(timestamp, value);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>回顾《监控原理：如何理解服务监控和 Spring Cloud Sleuth 的基本原理？》中的介绍的四种监控事件，我们不难理解上述代码的作用就是为这些事件指定类型以及时间，从而为构建监控链路提供基础。</p><p>RealSpan 中最后一个值得介绍的方法是如下所示的 tag 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Span </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(String key, String value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      state.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(key, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Span </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(String key, String value) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (state) {</span></span>
<span class="line"><span style="color:#24292E;">      state.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(key, value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法为 Span 打上一个标签，其中两个参数分别代表标签的 Key 和 Value，开发人员可以根据需要对任何一个 Span 添加自定义的标签体系。</p><p>了解了 Span 的定义之后，我们就来讨论在业务代码中创建 Span 的两种方法。一种是使用 Brave 中的 Tracer 类，一种是使用注解。</p><h4 id="通过-tracer-类创建-span" tabindex="-1">通过 Tracer 类创建 Span <a class="header-anchor" href="#通过-tracer-类创建-span" aria-label="Permalink to &quot;通过 Tracer 类创建 Span&quot;">​</a></h4><p>Tracer 是一个工具类，提供了一批方法用于完成与 Span 相关的各种属性和操作。我们同样挑选几个常见的方法进行展开。</p><p>首先，我们来看如何通过 Tracer 创建一个新的根 Span，可以通过如下所示的 newTrace 方法进行实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Span </span><span style="color:#B392F0;">newTrace</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_toSpan</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">newRootContext</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Span </span><span style="color:#6F42C1;">newTrace</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_toSpan</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">newRootContext</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里用到了一个保存跟踪信息的 TraceContext 上下文对象，对于根 Span 而言，这个 TraceContext 就是全新的上下文，没有父 Span。而这里的 _toSpan 方法则最终构建了一个前面提到的 RealSpan 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Span </span><span style="color:#B392F0;">_toSpan</span><span style="color:#E1E4E8;">(TraceContext decorated) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isNoop</span><span style="color:#E1E4E8;">(decorated)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NoopSpan</span><span style="color:#E1E4E8;">(decorated);</span></span>
<span class="line"><span style="color:#E1E4E8;">    PendingSpan pendingSpan </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pendingSpans.</span><span style="color:#B392F0;">getOrCreate</span><span style="color:#E1E4E8;">(decorated, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RealSpan</span><span style="color:#E1E4E8;">(decorated, pendingSpans, pendingSpan.</span><span style="color:#B392F0;">state</span><span style="color:#E1E4E8;">(), pendingSpan.</span><span style="color:#B392F0;">clock</span><span style="color:#E1E4E8;">(), finishedSpanHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Span </span><span style="color:#6F42C1;">_toSpan</span><span style="color:#24292E;">(TraceContext decorated) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNoop</span><span style="color:#24292E;">(decorated)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoopSpan</span><span style="color:#24292E;">(decorated);</span></span>
<span class="line"><span style="color:#24292E;">    PendingSpan pendingSpan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pendingSpans.</span><span style="color:#6F42C1;">getOrCreate</span><span style="color:#24292E;">(decorated, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RealSpan</span><span style="color:#24292E;">(decorated, pendingSpans, pendingSpan.</span><span style="color:#6F42C1;">state</span><span style="color:#24292E;">(), pendingSpan.</span><span style="color:#6F42C1;">clock</span><span style="color:#24292E;">(), finishedSpanHandler);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里多了一个新建的对象叫 PendingSpan ，用于收集一条 Trace 上暂时被挂起的未完成的 Span。</p><p>一旦创建了根 Span，我们就可以在这个 Span 上执行 nextSpan 方法来添加新的 Span，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Span </span><span style="color:#B392F0;">nextSpan</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TraceContext parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentTraceContext.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newChild</span><span style="color:#E1E4E8;">(parent) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Span </span><span style="color:#6F42C1;">nextSpan</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    TraceContext parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentTraceContext.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newChild</span><span style="color:#24292E;">(parent) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里获取当前 TraceContext，如果该上下文不存在，就通过 newTrace 方法来创建一个新的根 Span；如果存在，则基于这个上下文并调用 newChild 方法来创建一个子 Span。newChild 方法也比较简单，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Span </span><span style="color:#B392F0;">newChild</span><span style="color:#E1E4E8;">(TraceContext parent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NullPointerException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;parent == null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_toSpan</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nextContext</span><span style="color:#E1E4E8;">(parent));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Span </span><span style="color:#6F42C1;">newChild</span><span style="color:#24292E;">(TraceContext parent) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NullPointerException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;parent == null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_toSpan</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nextContext</span><span style="color:#24292E;">(parent));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然，在很多场景下，我们首先需要获取当前的 Span，这时候就可以使用 Tracer 类所提供的 currentSpan 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Span </span><span style="color:#B392F0;">currentSpan</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TraceContext currentContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentTraceContext.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> currentContext </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toSpan</span><span style="color:#E1E4E8;">(currentContext) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Span </span><span style="color:#6F42C1;">currentSpan</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    TraceContext currentContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentTraceContext.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> currentContext </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toSpan</span><span style="color:#24292E;">(currentContext) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>基于 Tracer 提供的这些常见方法，我们可以梳理在业务代码中添加一个自定义的 Span 模版方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Tracer tracer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">perform</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">         Span newSpan </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tracer.</span><span style="color:#B392F0;">nextSpan</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;spanName&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//ScopedSpan newSpan = tracer.startScopedSpan(&quot;spanName&quot;);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//执行业务逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">          newSpan.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          newSpan.</span><span style="color:#B392F0;">annotate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;myannotation&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          newSpan.</span><span style="color:#B392F0;">finish</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Tracer tracer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">perform</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">         Span newSpan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tracer.</span><span style="color:#6F42C1;">nextSpan</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spanName&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//ScopedSpan newSpan = tracer.startScopedSpan(&quot;spanName&quot;);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//执行业务逻辑</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">          newSpan.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          newSpan.</span><span style="color:#6F42C1;">annotate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;myannotation&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          newSpan.</span><span style="color:#6F42C1;">finish</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，我们注入了一个 Tracer 对象，然后通过 nextSpan().name(&quot;findByDeviceCode&quot;).start() 方法创建并启动了一个&quot;spanName&quot;新的 Span。这是在业务代码中嵌入自定义 Span 的一种方法。另一种方法是使用注释行代码中的 ScopedSpan，ScopedSpan 代表包含一定操作延迟的 Span 对象，可以在操作不脱离当前进程时可以使用。当我们执行完各种业务逻辑之后，可以分别通过 tag 方法和 annotate 添加标签和定义事件，最后通过 finish 方法关闭 Span。这段模版代码可以直接引入到日常的开发过程中。</p><h4 id="使用注解创建-span" tabindex="-1">使用注解创建 Span <a class="header-anchor" href="#使用注解创建-span" aria-label="Permalink to &quot;使用注解创建 Span&quot;">​</a></h4><p>在 Brave 中，除了使用代码对创建 Span 的过程进行控制之外，我们还可以使用另一种更为简单的方法来创建 Span，这种方法就是使用注解。</p><p>我们先来看 @NewSpan 注解，这个注解可以自动创建一个新的 Span，使用方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NewSpan</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">myMethod</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NewSpan</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myMethod</span><span style="color:#24292E;">();</span></span></code></pre></div><p>当然，我们也可以把 @NewSpan 注解和 @SpanTag 注解结合在一起使用，@SpanTag 注解用于自动为通过 @NewSpan 注解所创建的 Span 添加标签，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NewSpan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myspan&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">myMethod</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">SpanTag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mykey&quot;</span><span style="color:#E1E4E8;">) String param);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NewSpan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myspan&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myMethod</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">SpanTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mykey&quot;</span><span style="color:#24292E;">) String param);</span></span></code></pre></div><p>上述代码示例中，我们定义了一个名为&quot;myspan&quot;的新 Span，并在 myMethod 方法中注入了一个标签并定了标签的键，而该标签的值就是方法的输入参数 param。如果我们执行这个 myMethod(@SpanTag(&quot;mykey&quot;) String param) 方法，那么将生成一个键为&quot;mykey&quot;，值为 param 的新标签。</p><p>现在，我们已经掌握了创建自定义 Span 的常见方法，让我们把这些方法都串联起来实现日常开发中常见的自定义 Span 的应用场景，并集成 Zipkin 来实现自定义的可视化跟踪效果。</p><h3 id="使用-zipkin-集成自定义跟踪" tabindex="-1">使用 Zipkin 集成自定义跟踪 <a class="header-anchor" href="#使用-zipkin-集成自定义跟踪" aria-label="Permalink to &quot;使用 Zipkin 集成自定义跟踪&quot;">​</a></h3><p>在上一课时的介绍中，我们都是基于几个微服务之间的调用关系来讨论 Zipkin 在服务监控可视化过程中发挥的作用，其中完整服务调用链路中的各个 Span 都是采用默认的服务调用结果。在大多数情况下，我们通过这些 Span 就可以分析和排查服务调用链路中可能存在的问题。但在某些特定场景下，我们希望在这些 Span 的基础上能够实现一些定制化的数据收集和展示方式。</p><p>我们来考虑如下场景，假设在服务调用链路中，某一个方法调用时间比较长，但通过默认所创建的基于该方法的 Span，通常无法判断响应时间过长的原因。那么就可能出现一个需求，即通过添加一系列的自定义 Span 的方式进一步对长时间的服务调用进行拆分，把该请求中所涉及的多种操作分别创建 Span，然后找到最影响性能的 Span 并进行优化，这也是服务监控系统实现过程中的一项最佳实践，如下图所示：</p>`,39),F=l(`<p>通过自定义 Span 找到性能瓶颈点示意图</p><h3 id="使用-tracer-添加自定义-span" tabindex="-1">使用 Tracer 添加自定义 Span <a class="header-anchor" href="#使用-tracer-添加自定义-span" aria-label="Permalink to &quot;使用 Tracer 添加自定义 Span&quot;">​</a></h3><p>让我们回到 SpringHealth 案例系统，来到 device-service。我们知道可以通过 Brave 的 Tracer 工具类创建 Span 并把该 Span 相关信息推送给 Zipkin。现在，我们希望在 DeviceService 的调用过程中添加一个新的 Span 以帮助 device-service 诊断响应时间过长问题，示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DeviceService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DeviceRepository deviceRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Tracer tracer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Device </span><span style="color:#B392F0;">getDeviceByCode</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">deviceCode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         Span newSpan </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tracer.</span><span style="color:#B392F0;">nextSpan</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;findByDeviceCode&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> deviceRepository.</span><span style="color:#B392F0;">findByDeviceCode</span><span style="color:#E1E4E8;">(deviceCode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">          newSpan.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;device&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;dababase&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          newSpan.</span><span style="color:#B392F0;">annotate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;deviceInfoObtained&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          newSpan.</span><span style="color:#B392F0;">finish</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DeviceService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DeviceRepository deviceRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Tracer tracer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Device </span><span style="color:#6F42C1;">getDeviceByCode</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">deviceCode</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         Span newSpan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tracer.</span><span style="color:#6F42C1;">nextSpan</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;findByDeviceCode&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> deviceRepository.</span><span style="color:#6F42C1;">findByDeviceCode</span><span style="color:#24292E;">(deviceCode);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">          newSpan.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;device&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;dababase&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          newSpan.</span><span style="color:#6F42C1;">annotate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;deviceInfoObtained&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          newSpan.</span><span style="color:#6F42C1;">finish</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述示例中，我们看到通过以下几个简单的方法调用就可以实现一个自定义 Span。这里基于前面介绍的自定义 Span 模版方法完成了 Span 的创建过程。我们使用 newTrace 方法创建一个自定义的 Span，并为该 Span 命名为&quot;findByDeviceCode&quot;。然后创建了一个键为&quot;device&quot;标签，并把标签值设置为&quot;dababase &quot;指明该标签与数据库操作相关。然后，我们又通过 annotate 方法记录了一个代表设备信息已经被获取的&quot;deviceInfoObtained&quot;事件。最后，我们执行了 finish 方法，在具体操作结束之后必须调用此方法，否则 Span 数据不会被发送到 Zipkin 中。</p><h3 id="可视化自定义-span" tabindex="-1">可视化自定义 Span <a class="header-anchor" href="#可视化自定义-span" aria-label="Permalink to &quot;可视化自定义 Span&quot;">​</a></h3><p>我们先来回顾在不添加上述自定义 Span 之前调用 <a href="http://localhost:5555/springhealth/device/devices/device1" target="_blank" rel="noreferrer">http://localhost:5555/springhealth/device/devices/device1</a> 时 Zipkin 上所生成的效果图，如下所示：</p>`,7),S=s("p",null,"Zipkin 中系统自动生成 Span 效果界面",-1),h=s("p",null,"显然，这三个 Span 都是系统自定生成的。现在我们重新启动 device-service，然后再次访问该端口，就会得到如下图所示的可视化效果：",-1),v=s("p",null,"Zipkin中添加自定义Span效果界面",-1),C=s("p",null,'请注意在上图中，我们看到在原有默认可视化效果的基础上又多了一个名为"findByDeviceCode"的自定义 Span。点击该 Span，我们也将得到这个 Span 对应的各项事件明细数据，如下图所示：',-1),g=s("p",null,"Zipkin 中自定义 Span 中每个关键事件明细数据界面",-1),m=s("p",null,'这里看到了"deviceObtained"这个自定义事件。同时，基于数据，我们也不难发现在 device-service 处理请求的时间中实际上大部分是消耗在访问数据库以获取设备数据的过程中。同样，我们也可以在其他服务中添加不同的 Span 以实现对服务调用过程更加精细化的管理。',-1),A=s("h3",{id:"小结与预告",tabindex:"-1"},[n("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),B=s("p",null,"自定义 Span 是我们在日常开发过程中进程使用的一项工程实践，通过在业务系统中嵌入各种 Span 能够帮助开发人员找到系统中的性能瓶颈点从而为系统重构和优化提供抓手。在 Spring Cloud Sleuth 中，Brave 框架可以用来创建自定义的 Span，而上一课时中介绍的 Zipkin 框架则也可以对这些自定义 Span 实现可视化。本课时对这些具体的开发工作做了详细的介绍并结合 SpringHealth 案例给出了示例代码。",-1),D=s("p",null,"这里给你留一道思考题：通过 Brave 框架，开发人员创建自定义 Span 有哪些具体的实现方法？",-1),_=s("p",null,"在介绍完服务监控之后，接下来是整个课程的最后一个主题，即微服务测试。我们将先从微服务系统中与测试相关的需求和解决方案讲起并引出 Spring 家族中的 Spring Cloud Contract 框架。",-1);function b(q,k,T,f,w,x){const a=e("Image");return t(),c("div",null,[E,y,i,d,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/04/49/CgpVE1_sSpqAX8fHAAAsCx2fAiU688.png"}),n(),u,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8C/65/Ciqc1F_sSrKAUJKgAAAtpNjayF4547.png"}),n(),F,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/8C/71/CgqCHl_sSr2AH503AABAn4kpV9A498.png"}),n(),S,h,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/8C/65/Ciqc1F_sSsiATG_0AABPUjTB7og302.png"}),n(),v,C,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/8C/65/Ciqc1F_sSs-ACuYCAABBZOB6BPU918.png"}),n(),g,m,A,B,D,_])}const R=o(r,[["render",b]]);export{j as __pageData,R as default};
