import{_ as o,j as r,o as i,g as s,k as t,h as e,Q as p,s as _}from"./chunks/framework.cfb14fe0.js";const k=JSON.parse('{"title":"24虚拟内存：一个程序最多能使用多少内存？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/重学操作系统_文档/(4633) 24  虚拟内存 ：一个程序最多能使用多少内存？.md","filePath":"posts/backEnd/重学操作系统_文档/(4633) 24  虚拟内存 ：一个程序最多能使用多少内存？.md","lastUpdated":1696682708000}'),l={name:"posts/backEnd/重学操作系统_文档/(4633) 24  虚拟内存 ：一个程序最多能使用多少内存？.md"},n=p("",14),c=p("",10),g=p("",5),h=p("",7),m=p("",6),d=p("",6),P=_("p",null,"上图中，进程内部需要一个页表存储进程的数据。如果进程的内存上不封顶，那么页表有多少个条目合适呢？ 进程分配多少空间合适呢？ 如果页表大小为 1024 个条目，那么可以支持 1024*4K = 4M 空间。按照这个计算，如果进程需要 1G 空间，则需要 256K 个条目。我们预先为进程分配这 256K 个条目吗？ 创建一个进程就划分这么多条目是不是成本太高了？",-1),A=_("p",null,"为了减少条目的创建，可以考虑进程内部用一个更大的页表（比如 4M），操作系统继续用 4K 的页表。这就形成了一个二级页表的结构，如下图所示：",-1),u=_("p",null,"这样 MMU 会先查询 1 级页表，再查询 2 级页表。在这个模型下，进程如果需要 1G 空间，也只需要 1024 个条目。比如 1 级页编号是 2， 那么对应 2 级页表中 [2* 1024, 3*1024-1] 的部分条目。而访问一个地址，需要同时给出一级页编号和二级页编号。整个地址，还可以用 64bit 组装，如下图所示：",-1),C=p("",7);function T(M,b,q,S,U,F){const a=r("Image");return i(),s("div",null,[n,t(a,{alt:"Lark20201202-184240.png",src:"https://s0.lgstatic.com/i/image/M00/75/44/Ciqc1F_Hb-GAermKAACje6hFwj4571.png"}),e(),c,t(a,{alt:"Lark20201202-184243.png",src:"https://s0.lgstatic.com/i/image/M00/75/44/Ciqc1F_Hb_aALLF_AABvGKciFvQ002.png"}),e(),g,t(a,{alt:"Lark20201202-184247.png",src:"https://s0.lgstatic.com/i/image/M00/75/4F/CgqCHl_HcAOAERr3AACsFab3D0g908.png"}),e(),h,t(a,{alt:"Lark20201202-184250.png",src:"https://s0.lgstatic.com/i/image/M00/75/44/Ciqc1F_HcBGANfB6AABfKTW4B2g866.png"}),e(),m,t(a,{alt:"Lark20201202-184252.png",src:"https://s0.lgstatic.com/i/image/M00/75/4F/CgqCHl_HcCiAXdDRAACAza-oxwo742.png"}),e(),d,t(a,{alt:"Lark20201202-184255.png",src:"https://s0.lgstatic.com/i/image/M00/75/45/Ciqc1F_HcJSAZ9IlAACGuMSlD50803.png"}),e(),P,A,t(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/8C/20/CgqCHl_lnEqAGPEZAAC-Dsux5E8250.png"}),e(),u,t(a,{alt:"Lark20201202-184238.png",src:"https://s0.lgstatic.com/i/image/M00/75/50/CgqCHl_HcK2AGh63AABHzfHvTfg888.png"}),e(),C])}const E=o(l,[["render",T]]);export{k as __pageData,E as default};
