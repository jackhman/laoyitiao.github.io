import{_ as n,D as l,o as p,g as o,J as e,h as t,Q as s}from"./chunks/framework.f67d7268.js";const S=JSON.parse('{"title":"13RSocket：一种新的高性能网络通信协议","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6995) 13  RSocket：一种新的高性能网络通信协议.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6995) 13  RSocket：一种新的高性能网络通信协议.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring 响应式编程实战_文档/(6995) 13  RSocket：一种新的高性能网络通信协议.md"},r=s('<h1 id="_13rsocket-一种新的高性能网络通信协议" tabindex="-1">13RSocket：一种新的高性能网络通信协议 <a class="header-anchor" href="#_13rsocket-一种新的高性能网络通信协议" aria-label="Permalink to &quot;13RSocket：一种新的高性能网络通信协议&quot;">​</a></h1><p>前面几讲我们讨论了如何使用 WebFlux 构建响应式 Web 服务的实现方案。WebFlux 和 WebMVC 一样，都是基于 HTTP 协议实现请求-响应式的交互方式。这种交互方案很简单，但不够灵活，也无法应对所有的响应式应用场景。那么，有没有在网络协议层上提供更加丰富的交互方式呢？答案是肯定的，那就是我们今天要讨论的 RSocket 协议。</p><p>这一讲，我将从 RSocket 协议的特性、交互模式以及与主流开发框架之间的集成等几个方面来和你讨论，相信学完之后，你就会发现 <strong>RSocket 是一款全新的协议，它基于响应式数据流，为我们提供了高性能的网络通信机制</strong>。</p><h3 id="rsocket-协议" tabindex="-1">RSocket 协议 <a class="header-anchor" href="#rsocket-协议" aria-label="Permalink to &quot;RSocket 协议&quot;">​</a></h3><p>在引入 RSocket 协议之前，我们先来讨论为什么需要这样一个协议。关于它的背景，让我从传统的请求-响应模式所存在的问题开始说起。</p><h4 id="请求-响应模式的问题" tabindex="-1">请求-响应模式的问题 <a class="header-anchor" href="#请求-响应模式的问题" aria-label="Permalink to &quot;请求-响应模式的问题&quot;">​</a></h4><p>我们知道常用的 HTTP 协议的优势在于其广泛的适用性，有非常多的服务器和客户端实现工具的支持，但 HTTP 协议本身比较简单，只支持请求-响应模式。而这种模式对于很多应用场景来说是不合适的。</p><p>典型的例子就是消息推送，以 HTTP 协议为例，如果客户端需要获取最新的推送消息，就必须使用轮询。客户端不停地发送请求到服务器来检查更新，这无疑造成了大量的资源浪费。请求-响应模式的另外一个问题是，如果某个请求的响应时间过长，会阻塞之后的其他请求的处理，正如&quot;09 | 框架升级：WebFlux 比 Web MVC 到底好在哪里&quot;中所分析的那样。</p><p>虽然服务器发送事件（Server-Sent Events，SSE）可以用来推送消息，不过，SSE 是一个简单的文本协议，仅提供有限的功能。此外，WebSocket 可以进行双向数据传输，但长连接会造成服务之间的紧密耦合，WebSocket 的使用就不符合响应式系统要求，因为协议不提供控制背压的可能性，而背压是回弹性系统的重要组成部分。</p><p>事实上，响应式编程的实施目前主要有两个障碍，一个是关系型数据访问，我们将在&quot;17 | R2DBC：关系型数据库能具备响应式数据访问特性吗&quot;中专门讨论这个话题；而另一个就是网络协议。幸运的是，响应式流规范背后的开发团队理解了跨网络、异步、低延迟通信的必要性。2015 年，RSocket 协议就在这样的背景下诞生了。</p><h4 id="rsocket-协议与交互模式" tabindex="-1">RSocket 协议与交互模式 <a class="header-anchor" href="#rsocket-协议与交互模式" aria-label="Permalink to &quot;RSocket 协议与交互模式&quot;">​</a></h4><p>RSocket 是一种新的第 7 层语言无关的应用网络协议，用来解决单一的请求-响应模式以及现有网络传输协议所存在的问题，提供 Java、JavaScript、C++ 和 Kotlin 等多种语言的实现版本。</p><p>RSocket 是一个二进制的协议，以异步消息的方式提供 4 种交互模式，除了请求-响应（request/response）模式之外，还包括请求-响应流（request/stream）、即发-即忘（fire-and-forget）和通道（channel）这三种新的交互模式。这些模式的基本特性如下所示。</p><ul><li><p>请求-响应模式：这是最典型也最常见的模式。发送方在发送消息给接收方之后，等待与之对应的响应消息。</p></li><li><p>请求-响应流模式：发送方的每个请求消息，都对应于接收方的一个消息流作为响应。</p></li><li><p>即发-即忘模式：发送方的请求消息没有与之对应的响应。</p></li><li><p>通道模式：在发送方和接收方之间建立一个双向传输的通道。</p></li></ul><p>RSocket 专门设计用来与响应式风格应用程序进行配合使用，在使用 RSocket 协议时，背压和流量控制仍然有效。</p><p>为了更好地理解 RSocket 协议，让我们将它与 HTTP 协议做一些对比。在第 9 讲中，我已经提到过 Servlet 是基于 HTTP 协议之上的一套 Java API 规范，将 HTTP 请求转化为一个 ServletRequest 对象，并将处理结果封装成一个 ServletResponse 对象进行返回。HTTP 协议为了兼容各种应用方式，本身有一定的复杂性，性能一般。而 RSocket 采用的是自定义二进制协议，其本身的定位就是高性能通信协议，性能上比 HTTP 高出一个数量级。</p><p>在交互模式上，与 HTTP 的请求-响应这种单向的交互模式不同，RSocket 倡导的是对等通信，不再使用传统的客户端-服务器端单向通信模式，而是在两端之间可以自由地相互发送和处理请求。RSocket 协议在交互方式上可以参考下图。</p>',17),E=s(`<p>RSocket 协议的交互方式</p><h3 id="使用-rsocket-实现远程交互" tabindex="-1">使用 RSocket 实现远程交互 <a class="header-anchor" href="#使用-rsocket-实现远程交互" aria-label="Permalink to &quot;使用 RSocket 实现远程交互&quot;">​</a></h3><p>想要在应用程序中使用 RSocket 协议，我们需要引入如下依赖。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">io.rsocket</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">rsocket</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">core</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">io.rsocket</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">rsocket</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">transport</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">netty</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">io.rsocket</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">rsocket</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">core</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">io.rsocket</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">rsocket</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">transport</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">netty</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>可以看到，这里使用了 rsocket-transport-netty 包，该包的底层实现就是 Reactor Netty 组件，支持 TCP 和 WebSocket 协议。如果你想使用 UDP 协议，那么可以引入 rsocket-transport-aeron 包。在引入这些包之后，就可以使用该协议中最核心的 RSocket 接口了，我们一起来看一下。</p><h4 id="rsocket-接口" tabindex="-1">RSocket 接口 <a class="header-anchor" href="#rsocket-接口" aria-label="Permalink to &quot;RSocket 接口&quot;">​</a></h4><p>RSocket 接口的定义如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.reactivestreams.Publisher;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> reactor.core.publisher.Flux;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> reactor.core.publisher.Mono;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RSocket</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Availability</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Closeable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//推送元信息，数据可以自定义</span></span>
<span class="line"><span style="color:#E1E4E8;">	Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">metadataPush</span><span style="color:#E1E4E8;">(Payload </span><span style="color:#FFAB70;">payload</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//请求-响应模式，发送一个请求并接收一个响应。该协议也比 HTTP 更具优势，因为它是异步且多路复用的</span></span>
<span class="line"><span style="color:#E1E4E8;">	Mono&lt;</span><span style="color:#F97583;">Payload</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">requestResponse</span><span style="color:#E1E4E8;">(Payload </span><span style="color:#FFAB70;">payload</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//即发-即忘模式，请求-响应的优化，在不需要响应时非常有用</span></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">fireAndForget</span><span style="color:#E1E4E8;">(Payload </span><span style="color:#FFAB70;">payload</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//请求-响应流模式，类似返回集合的请求/响应，集合将以流的方式返回，而不是等到查询完成</span></span>
<span class="line"><span style="color:#E1E4E8;">    Flux&lt;</span><span style="color:#F97583;">Payload</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">requestStream</span><span style="color:#E1E4E8;">(Payload </span><span style="color:#FFAB70;">payload</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//通道模式，允许任意交互模型的双向消息流</span></span>
<span class="line"><span style="color:#E1E4E8;">    Flux&lt;</span><span style="color:#F97583;">Payload</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">requestChannel</span><span style="color:#E1E4E8;">(Publisher&lt;</span><span style="color:#F97583;">Payload</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">payloads</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.reactivestreams.Publisher;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> reactor.core.publisher.Flux;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> reactor.core.publisher.Mono;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RSocket</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Availability</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Closeable</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//推送元信息，数据可以自定义</span></span>
<span class="line"><span style="color:#24292E;">	Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">metadataPush</span><span style="color:#24292E;">(Payload </span><span style="color:#E36209;">payload</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//请求-响应模式，发送一个请求并接收一个响应。该协议也比 HTTP 更具优势，因为它是异步且多路复用的</span></span>
<span class="line"><span style="color:#24292E;">	Mono&lt;</span><span style="color:#D73A49;">Payload</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">requestResponse</span><span style="color:#24292E;">(Payload </span><span style="color:#E36209;">payload</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//即发-即忘模式，请求-响应的优化，在不需要响应时非常有用</span></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">fireAndForget</span><span style="color:#24292E;">(Payload </span><span style="color:#E36209;">payload</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//请求-响应流模式，类似返回集合的请求/响应，集合将以流的方式返回，而不是等到查询完成</span></span>
<span class="line"><span style="color:#24292E;">    Flux&lt;</span><span style="color:#D73A49;">Payload</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">requestStream</span><span style="color:#24292E;">(Payload </span><span style="color:#E36209;">payload</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//通道模式，允许任意交互模型的双向消息流</span></span>
<span class="line"><span style="color:#24292E;">    Flux&lt;</span><span style="color:#D73A49;">Payload</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">requestChannel</span><span style="color:#24292E;">(Publisher&lt;</span><span style="color:#D73A49;">Payload</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">payloads</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，RSocket 接口通过四个方法分别实现了它所提供的四种交互模式，其中 requestResponse 方法返回的是一个 Mono<code>&lt;Payload&gt;</code> 对象，这里的 Payload 代表的就是一种消息对象，它由两部分组成：元信息 metadata 和数据 data，类似常见的消息通信中的消息头和消息体的概念。</p><p>然后，我们发现 fireAndForget 方法返回的是一个 Mono<code>&lt;Void&gt;</code> 流，符合即发-即忘模式的语义。而 requestStream 作为请求-响应流模式的实现，与 requestResponse 的区别在于它的返回值是一个 Flux 流，而不是一个 Mono 对象。</p><p>最后，我们注意到这几个方法的输入都是一个 Payload 消息对象，而不是一个响应式流对象。但 requestChannel 方法就不一样了，它的输入同样是一个代表响应式流的 Publisher 对象，这意味着此种模式下的输入输出都是响应式流，也就是说可以进行客户端和服务器端之间的双向交互。</p><p>rsocket-core 包针对 RSocket 接口提供了一个抽象的实现类 AbstractRSocket，对上述方法做了简单的实现封装。在使用过程中，我们可以基于这个 AbstractRSocket 类来提供某一个交互模式的具体实现逻辑，而不需要完全实现 RSocket 接口中的所有方法。</p><h4 id="使用-rsocket-的交互模式" tabindex="-1">使用 RSocket 的交互模式 <a class="header-anchor" href="#使用-rsocket-的交互模式" aria-label="Permalink to &quot;使用 RSocket 的交互模式&quot;">​</a></h4><p>介绍完 RSocket 接口之后，我们来看看具体如何使用它所提供的四种交互模式。这里以最常见的请求-响应交互模式为例，给出使用 RSocket 协议的使用方法。与使用 HTTP 协议一样，这个过程需要构建服务器端和客户端，并通过客户端发起请求。</p><p>我们先来看如何构建 RSocket 服务器端，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">RSocketFactory.</span><span style="color:#B392F0;">receive</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">acceptor</span><span style="color:#E1E4E8;">(((setup, sendingSocket) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractRSocket</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">              @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Payload</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">requestResponse</span><span style="color:#E1E4E8;">(Payload </span><span style="color:#FFAB70;">payload</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(DefaultPayload.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> payload.</span><span style="color:#B392F0;">getDataUtf8</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        )))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">transport</span><span style="color:#E1E4E8;">(TcpServerTransport.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7000</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">RSocketFactory.</span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">acceptor</span><span style="color:#24292E;">(((setup, sendingSocket) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractRSocket</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">              @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Payload</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">requestResponse</span><span style="color:#24292E;">(Payload </span><span style="color:#E36209;">payload</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(DefaultPayload.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> payload.</span><span style="color:#6F42C1;">getDataUtf8</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        )))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">transport</span><span style="color:#24292E;">(TcpServerTransport.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7000</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这里的 RSocketFactory.receive() 方法返回用来创建服务器的 ServerRSocketFactory 类的对象。ServerRSocketFactory 的 acceptor() 方法的输入参数是 SocketAcceptor 接口。</p><p>上述代码中，我们用到了前面介绍的 RSocket 抽象实现类 AbstractRSocket，重写了其中的 requestResponse() 方法，对输入的参数前面添加一个 &quot;Hello: &quot; 前缀并返回；接下来的 transport() 方法指定 ServerTransport 接口的实现类 TcpServerTransport 作为 RSocket 底层的传输层实现，通过该方法，服务器端就启动了本地 7000 端口并监听来自客户端的请求；最后，我们通过 start().subscribe() 来触发整个启动过程。</p><p>构建完服务器端，我们来构建客户端组件，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">RSocket socket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RSocketFactory.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">transport</span><span style="color:#E1E4E8;">(TcpClientTransport.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7000</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">block</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">RSocket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RSocketFactory.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">transport</span><span style="color:#24292E;">(TcpClientTransport.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7000</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">block</span><span style="color:#24292E;">();</span></span></code></pre></div><p>RSocketFactory.connect() 方法用来创建 RSocket 客户端，返回 ClientRSocketFactory 类的实例对象；接下来的 transport() 方法指定传输层 ClientTransport 实现；和服务器端组件 TcpServerTransport 对应，这里使用的是 TcpClientTransport 来连接本地服务器上的 7000 端口；最后调用 start().block() 方法等待客户端启动并返回 RSocket 对象。</p><p>现在，我们就可以使用 RSocket 的 requestResponse() 方法来发送请求并获取响应了，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">requestResponse</span><span style="color:#E1E4E8;">(DefaultPayload.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Payload</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getDataUtf8)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">doOnNext</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">doFinally</span><span style="color:#E1E4E8;">(signalType </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> socket.</span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">block</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">requestResponse</span><span style="color:#24292E;">(DefaultPayload.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Payload</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getDataUtf8)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">doOnNext</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">doFinally</span><span style="color:#24292E;">(signalType </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">block</span><span style="color:#24292E;">();</span></span></code></pre></div><p>我们可以使用 DefaultPayload.create() 方法来简单地创建 Payload 对象，然后通过 RSocket 类的 dispose() 方法用来销毁客户端对象。这样，整个调用过程就结束了。执行这次请求，我们会在控制台上获取&quot;Hello: World&quot;。</p><h3 id="rsocket-与框架集成" tabindex="-1">RSocket 与框架集成 <a class="header-anchor" href="#rsocket-与框架集成" aria-label="Permalink to &quot;RSocket 与框架集成&quot;">​</a></h3><p>通常，我们不会直接使用 RSocket 原生开发库进行应用程序的开发，而是借助特定的开发框架。在 Java 领域中，Spring Boot、Spring Cloud 以及 Dubbo 等主流开发框架都集成了 RSocket 协议。下面我就分别为你说明。</p><h4 id="集成-rsocket-与-spring-框架" tabindex="-1">集成 RSocket 与 Spring 框架 <a class="header-anchor" href="#集成-rsocket-与-spring-框架" aria-label="Permalink to &quot;集成 RSocket 与 Spring 框架&quot;">​</a></h4><p>想要在 Spring Boot 中使用 RSocket 协议，我们需要引入如下依赖。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">org.springframework.boot</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">boot</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">starter</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rsocket</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">org.springframework.boot</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">boot</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">starter</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rsocket</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>然后，我们同样先来构建一个请求-响应式交互方式。基于&quot;10 | WebFlux（上）：如何使用注解编程模式构建异步非阻塞服务&quot;中的内容，我们可以构建如下所示一个简单 Controller。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">MessageMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> input);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">MessageMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">input</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> input);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以注意到，这里我引入了一个新的注解 @MessageMapping。跟 @RequestMapping 注解类似，@MessageMapping 是 Spring 提供的一个注解，用来指定 WebSocket、RSocket 等协议中消息处理的目的地。然后，我们输入了一个 String 类型的参数并返回一个 Mono 对象，符合请求-响应交互模式的定义。</p><p>为了访问这个 RSocket 端点，我们需要构建一个 RSocketRequester 对象，构建方式如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">RSocketRequester.Builder builder;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">RSocketRequester requester </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">dataMimeType</span><span style="color:#E1E4E8;">(MimeTypeUtils.TEXT_PLAIN)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(TcpClientTransport.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7000</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">block</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">RSocketRequester.Builder builder;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">RSocketRequester requester </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">dataMimeType</span><span style="color:#24292E;">(MimeTypeUtils.TEXT_PLAIN)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(TcpClientTransport.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7000</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">block</span><span style="color:#24292E;">();</span></span></code></pre></div><p>基于这个 RSocketRequester 对象，我们就可以通过它的 route 方法路由到前面通过 @MessageMapping 注解构建的 &quot;hello&quot; 端点，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requester.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">retrieveMono</span><span style="color:#E1E4E8;">(String.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requester.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">retrieveMono</span><span style="color:#24292E;">(String.class);</span></span></code></pre></div><p>我们再来看一个请求-响应流的示例，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MessageMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;stream&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Message</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(Message request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Flux</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">interval</span><span style="color:#E1E4E8;">(Duration.</span><span style="color:#B392F0;">ofSeconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(index </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(request.getParam, index));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MessageMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;stream&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Flux</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Message</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(Message request) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Flux</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">interval</span><span style="color:#24292E;">(Duration.</span><span style="color:#6F42C1;">ofSeconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(index </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(request.getParam, index));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里根据输入的 Message 对象，返回一个 Flux 流，每一秒发送一个添加了 Index 的新 Message 对象。</p><h4 id="集成-rsocket-与其他框架" tabindex="-1">集成 RSocket 与其他框架 <a class="header-anchor" href="#集成-rsocket-与其他框架" aria-label="Permalink to &quot;集成 RSocket 与其他框架&quot;">​</a></h4><p>针对其他开发框架，Dubbo 在 3.0.0-SNAPSHOT 版本里基于 RSocket 对响应式编程提供了支持，开发人员可以非常方便地使用 RSocket 的 API。而随着 Spring 框架的持续升级，5.2 版本中也把 RSocket 作为缺省的通信协议。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>作为构建响应式 Web 服务的最后一环，本讲讨论了 RSocket 这款新的高性能网络通信协议。与 HTTP 协议相比，RSocket 提供了四种不同的交互模式来提供多样化的网络通信体验。同时，RSocket 也无缝集成了响应式流。我们可以通过 Spring Boot 框架来使用这款异步、非阻塞式通信协议。</p><p>这里给你留一道思考题：你知道 RSocket 提供了哪四种交互模式，各自与响应式流是怎么整合的？</p><p>下一讲就要开始讨论响应式数据访问层的构建过程，Spring 家族专门提供了 Spring Boot 框架来实现这一目标，我们下一讲再见。</p><blockquote><p>点击链接，获取课程相关代码 ↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,46);function y(i,d,u,F,g,k){const a=l("Image");return p(),o("div",null,[r,e(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/37/06/CioPOWB1XhiAZv3EAACVQCujHBw318.png"}),t(),E])}const b=n(c,[["render",y]]);export{S as __pageData,b as default};
