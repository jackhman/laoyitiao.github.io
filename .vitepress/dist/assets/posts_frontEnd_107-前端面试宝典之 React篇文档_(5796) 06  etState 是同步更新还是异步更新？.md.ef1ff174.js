import{_ as o,j as t,o as e,g as c,k as l,h as s,Q as p,s as n}from"./chunks/framework.4e7d56ce.js";const T=JSON.parse('{"title":"06etState是同步更新还是异步更新？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/107-前端面试宝典之 React篇文档/(5796) 06  etState 是同步更新还是异步更新？.md","filePath":"posts/frontEnd/107-前端面试宝典之 React篇文档/(5796) 06  etState 是同步更新还是异步更新？.md","lastUpdated":1696682708000}'),E={name:"posts/frontEnd/107-前端面试宝典之 React篇文档/(5796) 06  etState 是同步更新还是异步更新？.md"},r=p('<h1 id="_06etstate是同步更新还是异步更新" tabindex="-1">06etState是同步更新还是异步更新？ <a class="header-anchor" href="#_06etstate是同步更新还是异步更新" aria-label="Permalink to &quot;06etState是同步更新还是异步更新？&quot;">​</a></h1><p>本讲我们一起来探讨&quot;setState 是同步更新还是异步更新&quot;，这个问题在面试中应该如何回答。</p><h3 id="破题" tabindex="-1">破题 <a class="header-anchor" href="#破题" aria-label="Permalink to &quot;破题&quot;">​</a></h3><p>&quot;是 A 还是 B &quot;是一个在面试中经常会被问到的问题类型，这类问题有相当强的迷惑性，因为在不同的场景中会有不同的选择：</p><ul><li><p>可能是 A；</p></li><li><p>也可能是 B；</p></li><li><p>甚至 A 和 B 同时存在的可能性也是有的。</p></li></ul><p>所以就需要把问题放在具体的场景中探讨，才能有更加全面准确的回答。在面对类似的问题时，要先把场景理清楚，再去思考如何回答，一定不要让自己犯&quot;想当然&quot;的错误。这是回答类似问题第一个需要注意的点。</p><p>回到 setState 本身上来，setState 用于变更状态，触发组件重新渲染，更新视图 UI。有很多应聘者，并不清楚 state 在什么时候会被更新，所以难以解释到底是同步的还是异步的，也不清楚这个问题具体涉及哪些概念？</p><p>本题也是大厂面试中的一道高频题，常被用作检验应聘者的资深程度。</p><p>以上就是这个问题的&quot;碎碎念&quot;了，接下来是整理答题思路。</p><h3 id="承题" tabindex="-1">承题 <a class="header-anchor" href="#承题" aria-label="Permalink to &quot;承题&quot;">​</a></h3><p>回到问题本身上来，其实思路很简单，只要能说清楚什么是同步场景，什么是异步场景，那问题自然而然就解决了。</p>',11),y=p(`<h3 id="入手" tabindex="-1">入手 <a class="header-anchor" href="#入手" aria-label="Permalink to &quot;入手&quot;">​</a></h3><p>在分析场景之前，需要先补充一个很重要的知识点，即合成事件，同样它也是 React 面试中很容易被考察的点。合成事件与 setState 的触发更新有千丝万缕的关系，也只有在了解合成事件后，我们才能继续聊 setState。</p><h4 id="合成事件" tabindex="-1">合成事件 <a class="header-anchor" href="#合成事件" aria-label="Permalink to &quot;合成事件&quot;">​</a></h4><p>在没有合成事件前，大家是如何处理事件的呢？由于很多同学都是直接从 React 和 Vue 开始入门的，所以很可能不太清楚这样一个在过去非常常见的场景。</p><p>假设一个列表的 ul 标签下面有 10000 个 li 标签。现在需要添加点击事件，通过点击获取当前 li 标签中的文本。那该如何操作？如果按照现在 React 的编写方式，就是为每一个 li 标签添加 onclick 事件。有 10000 个 li 标签，则会添加 10000 个事件。这是一种非常不友好的方式，会对页面的性能产生影响。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ul</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li onclick</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;geText(this)&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li onclick</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;geText(this)&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li onclick</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;geText(this)&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li onclick</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;geText(this)&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li onclick</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;geText(this)&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li onclick</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;geText(this)&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">10000</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">ul</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ul</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;geText(this)&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;geText(this)&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;geText(this)&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;geText(this)&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;geText(this)&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;geText(this)&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">10000</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">ul</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>那该怎么优化呢？最恰当的处理方式是采用<strong>事件委托</strong>。通过将事件绑定在 ul 标签上这样的方式来解决。当 li 标签被点击时，由事件冒泡到父级的 ul 标签去触发，并在 ul 标签的 onclick 事件中，确认是哪一个 li 标签触发的点击事件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ul id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">10000</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">li</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">ul</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">getEventTarget</span><span style="color:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> window.event;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e.target </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> e.srcElement; </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ul </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  ul.onclick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEventTarget</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(target.innerHTML);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ul id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">10000</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">li</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">ul</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">getEventTarget</span><span style="color:#24292E;">(e) {</span></span>
<span class="line"><span style="color:#24292E;">      e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> window.event;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e.target </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> e.srcElement; </span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ul </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  ul.onclick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(event) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEventTarget</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(target.innerHTML);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>同样，出于性能考虑，合成事件也是如此：</p><ul><li><p>React 给 document 挂上事件监听；</p></li><li><p>DOM 事件触发后冒泡到 document；</p></li><li><p>React 找到对应的组件，造出一个合成事件出来；</p></li><li><p>并按组件树模拟一遍事件冒泡。</p></li></ul>`,10),i=n("p",null,"React 17 之前的事件冒泡流程图",-1),u=n("p",null,"所以这就造成了，在一个页面中，只能有一个版本的 React。如果有多个版本，事件就乱套了。值得一提的是，这个问题在 React 17 中得到了解决，事件委托不再挂在 document 上，而是挂在 DOM 容器上，也就是 ReactDom.Render 所调用的节点上。",-1),F=p(`<p>React 17 后的事件冒泡流程图</p><p>那到底哪些事件会被捕获生成合成事件呢？可以从 React 的源码测试文件中一探究竟。下面的测试快照中罗列了大量的事件名，也只有在这份快照中的事件，才会被捕获生成合成事件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// react/packages/react-dom/src/__tests__/__snapshots__/ReactTestUtils-test.js.snap</span></span>
<span class="line"><span style="color:#F97583;">Array</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;abort&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;animationEnd&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;animationIteration&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;animationStart&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;auxClick&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;beforeInput&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;blur&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;canPlay&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;canPlayThrough&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;cancel&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;change&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;compositionEnd&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;compositionStart&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;compositionUpdate&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;contextMenu&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;copy&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;cut&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;doubleClick&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;drag&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;dragEnd&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;dragEnter&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;dragExit&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;dragLeave&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;dragOver&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;dragStart&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;drop&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;durationChange&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;emptied&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;encrypted&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;ended&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;focus&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;gotPointerCapture&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;invalid&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;keyDown&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;keyPress&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;keyUp&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;load&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;loadStart&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;loadedData&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;loadedMetadata&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;lostPointerCapture&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;mouseDown&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;mouseEnter&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;mouseLeave&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;mouseMove&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;mouseOut&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;mouseOver&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;mouseUp&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;paste&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pause&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;play&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;playing&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pointerCancel&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pointerDown&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pointerEnter&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pointerLeave&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pointerMove&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pointerOut&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pointerOver&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;pointerUp&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;progress&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;rateChange&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;reset&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;scroll&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;seeked&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;seeking&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;select&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;stalled&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;submit&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;suspend&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;timeUpdate&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;toggle&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;touchCancel&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;touchEnd&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;touchMove&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;touchStart&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;transitionEnd&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;volumeChange&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;waiting&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#9ECBFF;">&quot;wheel&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// react/packages/react-dom/src/__tests__/__snapshots__/ReactTestUtils-test.js.snap</span></span>
<span class="line"><span style="color:#D73A49;">Array</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;abort&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;animationEnd&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;animationIteration&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;animationStart&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;auxClick&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;beforeInput&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;blur&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;canPlay&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;canPlayThrough&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;cancel&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;change&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;compositionEnd&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;compositionStart&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;compositionUpdate&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;contextMenu&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;copy&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;cut&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;doubleClick&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;drag&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;dragEnd&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;dragEnter&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;dragExit&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;dragLeave&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;dragOver&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;dragStart&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;drop&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;durationChange&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;emptied&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;encrypted&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;ended&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;focus&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;gotPointerCapture&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;input&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;invalid&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;keyDown&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;keyPress&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;keyUp&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;load&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;loadStart&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;loadedData&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;loadedMetadata&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;lostPointerCapture&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;mouseDown&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;mouseEnter&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;mouseLeave&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;mouseMove&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;mouseOut&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;mouseOver&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;mouseUp&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;paste&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pause&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;play&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;playing&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pointerCancel&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pointerDown&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pointerEnter&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pointerLeave&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pointerMove&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pointerOut&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pointerOver&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;pointerUp&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;progress&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;rateChange&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;reset&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;scroll&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;seeked&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;seeking&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;select&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;stalled&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;submit&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;suspend&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;timeUpdate&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;toggle&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;touchCancel&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;touchEnd&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;touchMove&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;touchStart&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;transitionEnd&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;volumeChange&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;waiting&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#032F62;">&quot;wheel&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	]</span></span></code></pre></div><p>在有了合成事件的基础后，就更容易理解后续的内容了。</p><h4 id="调用顺序" tabindex="-1">调用顺序 <a class="header-anchor" href="#调用顺序" aria-label="Permalink to &quot;调用顺序&quot;">​</a></h4><p>setState 是不是异步的？我们来从头梳理。</p><p><strong>异步场景</strong></p><p>通常我们认为 setState 是异步的，就像这样一个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">         }, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count) </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#E1E4E8;">         })</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">         }, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count) </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#24292E;">         })</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于我们接受 setState 是异步的，所以会认为回调函数是异步回调，打出 0 的 console.log 会先执行，打出 1 的会后执行。</p><p>那接下来这个案例的答案是什么呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">         }, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count)</span></span>
<span class="line"><span style="color:#E1E4E8;">         })</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">         }, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count)</span></span>
<span class="line"><span style="color:#E1E4E8;">         })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">         }, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count)</span></span>
<span class="line"><span style="color:#24292E;">         })</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">         }, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count)</span></span>
<span class="line"><span style="color:#24292E;">         })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果你觉得答案是 1,2，那肯定就错了。这种迷惑性极强的考题在面试中非常常见，因为它反直觉。</p><p>如果重新仔细思考，你会发现当前拿到的 this.state.count 的值并没有变化，都是 0，所以输出结果应该是 1,1。</p><p>当然，也可以在 setState 函数中获取修改后的 state 值进行修改。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          preState</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">            count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">preState.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        }),()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">           console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count)</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          preState</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">preState.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        }),()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">           console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count)</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          preState</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">            count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">preState.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        }),()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">           console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count)</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          preState</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">preState.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        }),()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">           console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count)</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这些通通是异步的回调，如果你以为输出结果是 1,2，那就又错了，实际上是 2,2。</p><p>为什么会这样呢？当调用 setState 函数时，就会把当前的操作放入队列中。React 根据队列内容，合并 state 数据，完成后再逐一执行回调，根据结果更新虚拟 DOM，触发渲染。所以回调时，state 已经合并计算完成了，输出的结果就是 2,2 了。</p><p>这非常反直觉，那为什么 React 团队选择了这样一个行为模式，而不是同步进行呢？一种常见的说法是为了优化。通过异步的操作方式，累积更新后，批量合并处理，减少渲染次数，提升性能。但同步就不能批量合并吗？这显然不能完全作为 setState 设计成异步的理由。</p><p>在 17 年的时候就有人提出这样一个疑问&quot;<a href="https://github.com/facebook/react/issues/11527" target="_blank" rel="noreferrer">为什么 setState 是异步的</a>&quot;，这个问题得到了官方团队的回复，原因有 2 个。</p><ul><li><p><strong>保持内部一致性</strong>。如果改为同步更新的方式，尽管 setState 变成了同步，但是 props 不是。</p></li><li><p><strong>为后续的架构升级启用并发更新</strong>。为了完成异步渲染，React 会在 setState 时，根据它们的数据来源分配不同的优先级，这些数据来源有：事件回调句柄、动画效果等，再根据优先级并发处理，提升渲染性能。</p></li></ul><p>从 React 17 的角度分析，异步的设计无疑是正确的，使异步渲染等最终能在 React 落地。那什么情况下它是同步的呢？</p><p><strong>同步场景</strong></p><p>异步场景中的案例使我们建立了这样一个认知：setState 是异步的，但下面这个案例又会颠覆你的认知。如果我们将 setState 放在 setTimeout 事件中，那情况就完全不同了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({ count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({ count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;setTimeout: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({ count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({ count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setTimeout: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count);</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那这时输出的应该是什么呢？如果你认为是 0,0，那么又错了。</p><p>正确的结果是 0,2。因为 setState 并不是真正的异步函数，它实际上是通过队列延迟执行操作实现的，通过 isBatchingUpdates 来判断 setState 是先存进 state 队列还是直接更新。值为 true 则执行异步操作，false 则直接同步更新。</p>`,27),q=p('<p>在 onClick、onFocus 等事件中，由于合成事件封装了一层，所以可以将 isBatchingUpdates 的状态更新为 true；在 React 的生命周期函数中，同样可以将 isBatchingUpdates 的状态更新为 true。那么在 React 自己的生命周期事件和合成事件中，可以拿到 isBatchingUpdates 的控制权，将状态放进队列，控制执行节奏。而在外部的原生事件中，并没有外层的封装与拦截，无法更新 isBatchingUpdates 的状态为 true。这就造成 isBatchingUpdates 的状态只会为 false，且立即执行。所以在 addEventListener 、setTimeout、setInterval 这些原生事件中都会同步更新。</p><h3 id="回答" tabindex="-1">回答 <a class="header-anchor" href="#回答" aria-label="Permalink to &quot;回答&quot;">​</a></h3><p>接下来我们可以答题了。</p><blockquote><p>setState 并非真异步，只是看上去像异步。在源码中，通过 isBatchingUpdates 来判断</p><p>setState 是先存进 state 队列还是直接更新，如果值为 true 则执行异步操作，为 false 则直接更新。</p><p>那么什么情况下 isBatchingUpdates 会为 true 呢？在 React 可以控制的地方，就为 true，比如在 React 生命周期事件和合成事件中，都会走合并操作，延迟更新的策略。</p><p>但在 React 无法控制的地方，比如原生事件，具体就是在 addEventListener 、setTimeout、setInterval 等事件中，就只能同步更新。</p><p>一般认为，做异步设计是为了性能优化、减少渲染次数，React 团队还补充了两点。</p><ol><li><p>保持内部一致性。如果将 state 改为同步更新，那尽管 state 的更新是同步的，但是 props不是。</p></li><li><p>启用并发更新，完成异步渲染。</p></li></ol></blockquote><p>综上所述，我们可以整理出下面的知识导图。</p>',5),C=p(`<h3 id="进阶" tabindex="-1">进阶 <a class="header-anchor" href="#进阶" aria-label="Permalink to &quot;进阶&quot;">​</a></h3><p>这是一道经常会出现的 React setState 笔试题：下面的代码输出什么呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React.Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  state  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.count);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React.Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  state  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.count);</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>我们可以进行如下的分析：</p><ul><li><p>首先第一次和第二次的 console.log，都在 React 的生命周期事件中，所以是异步的处理方式，则输出都为 0；</p></li><li><p>而在 setTimeout 中的 console.log 处于原生事件中，所以会同步的处理再输出结果，但需要注意，虽然 count 在前面经过了两次的 this.state.count + 1，但是每次获取的 this.state.count 都是初始化时的值，也就是 0；</p></li><li><p>所以此时 count 是 1，那么后续在 setTimeout 中的输出则是 2 和 3。</p></li></ul><p>所以完整答案是 0,0,2,3。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在本讲中，我们掌握了判断 setState 是同步还是异步的核心关键点：更新队列。不得不再强调一下，看 setState 的输出结果是面试的常考点。所以在面试前，可以再针对性的看一下这部分内容，然后自己执行几次试试。</p><p>下一讲我将为你介绍另一个常考点，React 的跨组件通信。</p><p>[</p>`,10),g=n("p",null,[s("]("),n("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/mka"),s(")")],-1),d=n("p",null,"《大前端高薪训练营》",-1),h=n("p",null,[s("对标阿里 P7 技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),n("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"点击链接"),s("，快来领取！")],-1);function B(A,D,_,m,v,S){const a=t("Image");return e(),c("div",null,[r,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/01/3D/Cip5yF_YUpOAALIlAABNx0PyF94306.png"}),s(),y,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/01/3E/CgpVE1_YUqKAA-jWAACt3Mh2xk8536.png"}),s(),i,u,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/01/3E/Cip5yF_YUzCAWTyoAAB1ljK7rSM539.png"}),s(),F,l(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image2/M01/01/47/Cip5yF_YYfCAXIxiAAEJsQbj_hs785.png"}),s(),q,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image2/M01/01/3E/CgpVE1_YU2KAStLdAAFVKxh7Dyg317.png"}),s(),C,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png"}),s(),g,d,h])}const b=o(E,[["render",B]]);export{T as __pageData,b as default};
