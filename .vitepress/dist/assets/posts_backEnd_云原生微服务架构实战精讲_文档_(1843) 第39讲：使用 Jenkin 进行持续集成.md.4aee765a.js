import{_ as s,o as a,g as n,Q as l}from"./chunks/framework.cfb14fe0.js";const u=JSON.parse('{"title":"第39讲：使用Jenkin进行持续集成","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1843) 第39讲：使用 Jenkin 进行持续集成.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1843) 第39讲：使用 Jenkin 进行持续集成.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1843) 第39讲：使用 Jenkin 进行持续集成.md"},o=l(`<h1 id="第39讲-使用jenkin进行持续集成" tabindex="-1">第39讲：使用Jenkin进行持续集成 <a class="header-anchor" href="#第39讲-使用jenkin进行持续集成" aria-label="Permalink to &quot;第39讲：使用Jenkin进行持续集成&quot;">​</a></h1><p>从本课时开始，我们将开始进入<strong>持续集成（Continuous Integration）</strong> 和<strong>持续部署（Continuous Deployment）</strong> 相关的内容，持续集成和部署是目前软件开发中的标准实践。在微服务架构的应用中，持续集成和部署的重要性和复杂度都提高了，因为每个服务都需要独立的集成和部署。本课时将介绍如何使用 Jenkins 进行持续集成。</p><p>我们首先要明确的是持续集成的目标，即从源代码到容器镜像，每一个源代码的提交，都应该创建出对应的不可变的容器镜像，这个构建过程是可重复的。对于同样的代码提交，无论在什么时候构建，所得到的容器镜像都应该是完全相同的，这就保证了容器镜像是可丢弃的，可以随时从源代码中构建出所需要的镜像，这使得我们可以把不同环境上的应用部署回退到任意版本。创建出来的镜像一般被发布到镜像注册表中，由 Kubernetes 在运行时拉取并运行。</p><p>下面首先介绍如何使用 Dockerfile 创建镜像。</p><h3 id="使用-dockerfile" tabindex="-1">使用 Dockerfile <a class="header-anchor" href="#使用-dockerfile" aria-label="Permalink to &quot;使用 Dockerfile&quot;">​</a></h3><p>为了部署在 Kubernetes 上，我们需要为每个微服务创建各自的容器镜像。</p><p>创建简单的 Docker 镜像并不是复杂的事情，只需要编写描述镜像内容的 Dockerfile 文件，再使用 docker build 命令来创建镜像即可。下面代码中的 Dockerfile 用来创建地址管理服务的镜像。</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> adoptopenjdk/openjdk8:jre8u262-b10-alpine </span></span>
<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> target/happyride-address-service-1.0.0-SNAPSHOT.jar /opt/app.jar </span></span>
<span class="line"><span style="color:#F97583;">ENTRYPOINT</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;java&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-jar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/opt/app.jar&quot;</span><span style="color:#E1E4E8;"> ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> adoptopenjdk/openjdk8:jre8u262-b10-alpine </span></span>
<span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> target/happyride-address-service-1.0.0-SNAPSHOT.jar /opt/app.jar </span></span>
<span class="line"><span style="color:#D73A49;">ENTRYPOINT</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;java&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-jar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/opt/app.jar&quot;</span><span style="color:#24292E;"> ]</span></span></code></pre></div><p>这个 Dockerfile 的内容很简单，只有 3 条指令，具体的说明如下表所示。</p><table><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>FROM</td><td>使用的基础镜像是 AdoptOpenJDK 的 JRE 8 的 Alpine 镜像</td></tr><tr><td>ADD</td><td>添加服务的 JAR 文件到 /opt 目录</td></tr><tr><td>ENTRYPOINT</td><td>设置容器镜像运行时的入口为使用 Java 命令来运行 JAR 文件</td></tr></tbody></table><p>这里利用了 Spring Boot 的 Maven 插件来把整个应用打包成单一的 JAR 文件。</p><p>我们使用下面的命令来创建并运行镜像，-t 参数的作用是为镜像指定一个标签：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">local/address-service:1.0.0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">local/address-service:1.0.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">local/address-service:1.0.0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">local/address-service:1.0.0</span></span></code></pre></div><p>在 Maven 构建过程的 package 阶段中，在 Spring Boot 的 Maven 插件产生了 JAR 文件之后，使用 Maven 的 exec-maven-plugin 插件来调用 docker build 命令。下面的代码给出了 Maven 插件的使用示例。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.codehaus.mojo&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;exec-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;3.0.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">phase</span><span style="color:#E1E4E8;">&gt;package&lt;/</span><span style="color:#85E89D;">phase</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt;exec&lt;/</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">executable</span><span style="color:#E1E4E8;">&gt;docker&lt;/</span><span style="color:#85E89D;">executable</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">arguments</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt;build&lt;/</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt;.&lt;/</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt;-f&lt;/</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt;\${project.basedir}/src/docker/Dockerfile&lt;/</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt;-t&lt;/</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt;happyride/\${project.artifactId}:\${project.version} </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">argument</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">arguments</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.codehaus.mojo&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;exec-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;3.0.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">phase</span><span style="color:#24292E;">&gt;package&lt;/</span><span style="color:#22863A;">phase</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt;exec&lt;/</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">executable</span><span style="color:#24292E;">&gt;docker&lt;/</span><span style="color:#22863A;">executable</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">arguments</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt;build&lt;/</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt;.&lt;/</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt;-f&lt;/</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt;\${project.basedir}/src/docker/Dockerfile&lt;/</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt;-t&lt;/</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt;happyride/\${project.artifactId}:\${project.version} </span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">argument</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">arguments</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在使用 Maven 插件完成构建之后，产生的容器镜像会缓存在本地，可以通过 docker images 命令来查看。</p><h3 id="oci-镜像规范" tabindex="-1">OCI 镜像规范 <a class="header-anchor" href="#oci-镜像规范" aria-label="Permalink to &quot;OCI 镜像规范&quot;">​</a></h3><p>虽然我们在谈论容器镜像时，通常会使用 Docker 镜像来代替，但两者并不是等同的。为了对容器镜像的格式进行规范化，Linux 基金会下的开放容器倡议（Open Container Initiative，OCI）组织负责维护容器镜像规范和容器运行规范。在 OCI 规范的基础上，不同的厂商可以开发自己的基于 OCI 规范的工具或产品。</p><p>OCI 镜像规范以 Docker 公司贡献的 Docker 镜像版本 2 格式作为基础。每个 OCI 镜像由下表中的几个部分组成：</p><table><thead><tr><th><strong>组成部分</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>清单文件</td><td>描述对应于特定底层架构和操作系统的容器镜像</td></tr><tr><td>清单文件索引</td><td>清单文件的索引</td></tr><tr><td>层（Layer）</td><td>对文件系统的改动</td></tr><tr><td>配置</td><td>与容器运行相关的配置</td></tr></tbody></table><p>在上表中，镜像中的层是开发中需要注意的概念。把镜像划分成多个层之后，可以更有效地利用缓存，从而加快构建的速度。在推送镜像到注册表时，只有改变的层才会被推送。以一个 Java 应用来说，如果把应用所依赖的第三方库和应用自身的类文件划分成不同的层，由于第三方库很少变化，在构建镜像时，只需要更新和推送类文件所在的层即可。如果整个 Java 应用的全部文件被划分在一个层中，那么每次构建镜像时，该层都必然被更新，即便其中的第三方库没有变化，这也会产生不必要的传输开销。</p><h3 id="使用-spring-boot-的-buildpacks" tabindex="-1">使用 Spring Boot 的 Buildpacks <a class="header-anchor" href="#使用-spring-boot-的-buildpacks" aria-label="Permalink to &quot;使用 Spring Boot 的 Buildpacks&quot;">​</a></h3><p>Dockerfile 虽然简单易懂，但是缺乏必要的组织，造成复用起来很困难，只能复制粘贴 Dockerfile 中的部分内容。如果有很多服务都使用 Spring Boot 开发，那么每个服务中都需要复制一份大部分内容都重复的 Dockerfile。解决这个问题的一种做法是使用 Buildpacks。</p><p><a href="https://buildpacks.io/" target="_blank" rel="noreferrer">Buildpacks</a>是 CNCF 之下的一个沙盒项目，其所要解决的问题是从源代码中构建出 OCI 容器镜像。与 Dockerfile 相比，Buildpacks 的抽象层次更高，更容易理解和复用，它的基本组成单元是 Buildpack。每个 Buildpack 分成<strong>检测</strong> 和<strong>构建</strong>两个步骤：检测步骤用来判断该 Buildpack 是否应该被应用；构建步骤则负责对镜像进行修改，包括修改层的内容，或是修改配置。每个 Buildpack 只对镜像做特定的改动。</p><p>在每一个应用的镜像构建过程中，会有多个 Buildpack 按照顺序来依次检测和应用修改。通过这种方式，不同的 Buildpack 可以进行组合和复用。</p><p>Spring Boot 从 2.3.0 版本开始，支持使用 Buildpacks 来创建 OCI 镜像。在 Maven 中，只需要使用 Spring Boot Maven 插件的 build-image 命令即可。下面的代码给出了插件的基本用法。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt;build-image&lt;/</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt;build-image&lt;/</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在生成的 Spring Boot 镜像中，不仅仅包含了 JRE 和应用的 JAR 文件，还包含了一些辅助的工具，如下表所示：</p><table><thead><tr><th><strong>工具</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>memory-calculator</td><td>计算 JVM 使用的内存大小</td></tr><tr><td>jvmkill</td><td>当无法分配内存或创建线程时，终止 JVM</td></tr><tr><td>class-counter</td><td>计算类文件的数量</td></tr><tr><td>link-local-dns</td><td>修改 DNS 设置</td></tr><tr><td>openssl-security-provider</td><td>加载 JRE 的权威机构证书</td></tr><tr><td>security-providers-configurer</td><td>配置 Java 的安全服务的提供者</td></tr><tr><td>java-security-properties</td><td>Java 安全属性</td></tr></tbody></table><p>这些工具的作用是优化 Java 应用在容器中的运行。下面的代码是 Spring Boot 应用的容器在运行时的输出，从中可以看到，JVM 的内存设置会根据容器的内存限制来做出调整。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Container memory limit unset. Configuring JVM </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> 1G container. </span></span>
<span class="line"><span style="color:#E1E4E8;">Calculated JVM Memory Configuration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">XX</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">MaxDirectMemorySize</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">10M </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">XX</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">MaxMetaspaceSize</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">126109K </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">XX</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">ReservedCodeCacheSize</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">240M </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Xss1M </span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Xmx410466K</span><span style="color:#E1E4E8;"> (Head Room</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">, Loaded Class Count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19851</span><span style="color:#E1E4E8;">, Thread Count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">250</span><span style="color:#E1E4E8;">, Total Memory</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1073741824</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">Adding </span><span style="color:#79B8FF;">127</span><span style="color:#E1E4E8;"> container CA certificates to JVM truststore</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Container memory limit unset. Configuring JVM </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> 1G container. </span></span>
<span class="line"><span style="color:#24292E;">Calculated JVM Memory Configuration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">XX</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">MaxDirectMemorySize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">10M </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">XX</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">MaxMetaspaceSize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">126109K </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">XX</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">ReservedCodeCacheSize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">240M </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Xss1M </span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Xmx410466K</span><span style="color:#24292E;"> (Head Room</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">, Loaded Class Count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19851</span><span style="color:#24292E;">, Thread Count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">250</span><span style="color:#24292E;">, Total Memory</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1073741824</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">Adding </span><span style="color:#005CC5;">127</span><span style="color:#24292E;"> container CA certificates to JVM truststore</span></span></code></pre></div><p>下面的代码给出了 Spring Boot 的 Buildpacks 在构建时的部分输出，从中可以看到，在检测阶段中，在 16 个 Buildpack 中， 只有 5 个会参与构建，并给出了每个 Buildpack 的名称和版本号。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[INFO]  </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Running creator </span></span>
<span class="line"><span style="color:#E1E4E8;">[INFO]     [creator]     </span><span style="color:#F97583;">===&gt;</span><span style="color:#E1E4E8;"> DETECTING </span></span>
<span class="line"><span style="color:#E1E4E8;">[INFO]     [creator]     </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> of </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> buildpacks participating </span></span>
<span class="line"><span style="color:#E1E4E8;">[INFO]     [creator]     paketo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">buildpacks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bellsoft</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">liberica </span><span style="color:#79B8FF;">2.11</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">[INFO]     [creator]     paketo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">buildpacks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">executable</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jar    </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">[INFO]     [creator]     paketo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">buildpacks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">apache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tomcat     </span><span style="color:#79B8FF;">1.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">[INFO]     [creator]     paketo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">buildpacks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">dist</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zip          </span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">8</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">[INFO]     [creator]     paketo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">buildpacks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">boot       </span><span style="color:#79B8FF;">2.3</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[INFO]  </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Running creator </span></span>
<span class="line"><span style="color:#24292E;">[INFO]     [creator]     </span><span style="color:#D73A49;">===&gt;</span><span style="color:#24292E;"> DETECTING </span></span>
<span class="line"><span style="color:#24292E;">[INFO]     [creator]     </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> of </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> buildpacks participating </span></span>
<span class="line"><span style="color:#24292E;">[INFO]     [creator]     paketo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">buildpacks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bellsoft</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">liberica </span><span style="color:#005CC5;">2.11</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">[INFO]     [creator]     paketo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">buildpacks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">executable</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jar    </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">[INFO]     [creator]     paketo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">buildpacks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">apache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tomcat     </span><span style="color:#005CC5;">1.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">[INFO]     [creator]     paketo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">buildpacks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">dist</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zip          </span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">8</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">[INFO]     [creator]     paketo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">buildpacks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">boot       </span><span style="color:#005CC5;">2.3</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span></span></code></pre></div><h3 id="使用-jib" tabindex="-1">使用 Jib <a class="header-anchor" href="#使用-jib" aria-label="Permalink to &quot;使用 Jib&quot;">​</a></h3><p><a href="https://github.com/GoogleContainerTools/jib" target="_blank" rel="noreferrer">Jib</a> 是由 Google 维护的工具，用来对 Java 应用进行容器化。其优势在于不需要依赖 Docker 守护进程，就可以创建出 OCI 容器镜像，构建镜像也不需要编写 Dockerfile。Jib 会自动把应用分成多层，把应用依赖的第三方库和应用自身的类文件分开。</p><p>Jib 支持 3 种不同的构建方式，对应于不同的 Maven 目标，如下表所示。</p><table><thead><tr><th><strong>Maven 目标</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>build</td><td>不使用 Docker 来构建镜像，并推送到注册表</td></tr><tr><td>dockerBuild</td><td>使用 Docker 来构建镜像</td></tr><tr><td>buildTar</td><td>把镜像打包成 tar 文件</td></tr></tbody></table><p>下面的代码给出了 jib 的 Maven 插件的基本用法，其中 from 表示基础镜像的名称，to 表示构建出来的镜像的发布地址。这里使用的是 build 目标来创建并发布 OCI 镜像，并不依赖 Docker。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.google.cloud.tools&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;jib-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;2.4.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">from</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">&gt;adoptopenjdk/openjdk8:jre8u262-b10-alpine&lt;/</span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">from</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">to</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        docker-registry:5000/happyride/\${project.artifactId}:\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}-\${git.commit.id.abbrev} </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">to</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">allowInsecureRegistries</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">allowInsecureRegistries</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">container</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">format</span><span style="color:#E1E4E8;">&gt;OCI&lt;/</span><span style="color:#85E89D;">format</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">container</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">phase</span><span style="color:#E1E4E8;">&gt;package&lt;/</span><span style="color:#85E89D;">phase</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt;build&lt;/</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.google.cloud.tools&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;jib-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;2.4.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">from</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">image</span><span style="color:#24292E;">&gt;adoptopenjdk/openjdk8:jre8u262-b10-alpine&lt;/</span><span style="color:#22863A;">image</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">from</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">to</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">image</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        docker-registry:5000/happyride/\${project.artifactId}:\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}-\${git.commit.id.abbrev} </span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">image</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">to</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">allowInsecureRegistries</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">allowInsecureRegistries</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">container</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">format</span><span style="color:#24292E;">&gt;OCI&lt;/</span><span style="color:#22863A;">format</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">container</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">phase</span><span style="color:#24292E;">&gt;package&lt;/</span><span style="color:#22863A;">phase</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt;build&lt;/</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>与 Spring Boot 构建镜像的方式相比，Jib 的优势在于可以对任意 Java 应用进行构建，并且不依赖 Docker 运行时的支持；不足之处在于缺少对 Java 应用运行的优化。</p><h3 id="容器镜像注册表" tabindex="-1">容器镜像注册表 <a class="header-anchor" href="#容器镜像注册表" aria-label="Permalink to &quot;容器镜像注册表&quot;">​</a></h3><p>在本地开发环境上运行 docker build 命令之后，产生的镜像会缓存在本地。当在 Kubernetes 上部署时，这些本地缓存的镜像并不能直接使用。根据部署环境的不同，可以通过相应的方式来使用镜像。</p><p>在本地开发环境中，Minikube 内置包含了 Docker 运行时，为 Kubernetes 提供容器运行时的支持。我们可以配置本地开发环境中的 docker 命令，来连接 Minikube 中的 Docker 守护进程。在本地上构建完成之后，得到的镜像会被缓存在 Minikube 的 Docker 进程中，从而可以在 Kubernetes 中直接使用。</p><p>使用下面的命令可以显示连接到 Minikube 的 Docker 守护进程的配置方式。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ minikube docker-env</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ minikube docker-env</span></span></code></pre></div><p>上述命令的输出如下所示，只是设置了一些环境变量：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export DOCKER_TLS_VERIFY</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">export DOCKER_HOST</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;tcp://192.168.64.9:2376&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">export DOCKER_CERT_PATH</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/Users/alexcheng/.minikube/certs&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">export MINIKUBE_ACTIVE_DOCKERD</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;minikube&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#F97583;">To</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">point</span><span style="color:#E1E4E8;"> your shell </span><span style="color:#F97583;">to</span><span style="color:#E1E4E8;"> minikube</span><span style="color:#9ECBFF;">&#39;s docker-daemon, run: </span></span>
<span class="line"><span style="color:#9ECBFF;"># eval $(minikube -p minikube docker-env)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export DOCKER_TLS_VERIFY</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">export DOCKER_HOST</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;tcp://192.168.64.9:2376&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">export DOCKER_CERT_PATH</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/Users/alexcheng/.minikube/certs&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">export MINIKUBE_ACTIVE_DOCKERD</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;minikube&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#D73A49;">To</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">point</span><span style="color:#24292E;"> your shell </span><span style="color:#D73A49;">to</span><span style="color:#24292E;"> minikube</span><span style="color:#032F62;">&#39;s docker-daemon, run: </span></span>
<span class="line"><span style="color:#032F62;"># eval $(minikube -p minikube docker-env)</span></span></code></pre></div><p>按照命令输出中的提示操作完成设置之后，在当前命令行窗口中使用 Maven 命令来构建镜像。在 Kubernetes 中，只需要重新创建 Pod，就可以使用新构建的镜像来进行测试。</p><p>如果应用安装在用户的私有环境中，并且不能自由的访问外部的网络，可以使用 docker export 命令把镜像导出成压缩文件，保存在移动存储设备中。在内部网络中，把镜像的压缩文件复制到 Kubernetes 的每个节点上，再使用 docker import 命令把镜像导入缓存中。</p><p>除了上述两种特殊情况之外，最常用的做法是使用容器镜像注册表来保存镜像。在持续集成中，容器镜像被发布到注册表中；在 Kubernetes 上运行时，容器镜像从注册表中下载到本地并运行。</p><p>云平台一般都提供各自的容器注册表服务，也可以使用独立的注册表服务。Docker 的注册表实现是开源的，可以在集群内部安装自己的私有注册表。</p><h3 id="容器镜像的标签" tabindex="-1">容器镜像的标签 <a class="header-anchor" href="#容器镜像的标签" aria-label="Permalink to &quot;容器镜像的标签&quot;">​</a></h3><p>在持续集成中，每次构建出来的容器镜像都应该有唯一的标签，如果不指定标签，那么默认使用的是 latest 标签。在实际的开发中，并不建议使用 latest 标签，因为该标签所指向的容器镜像的内容是不固定的。如果在测试或生产环境中使用了 latest 标签，那么一段时间之后重新运行测试或再次部署时，所得到的结果可能完全不同，因为对应的镜像可能被更新了。为了保证测试和部署的可重复性，所有的测试和部署都应该使用带标签的形式来引用镜像。</p><p>镜像标签最常用的格式是使用语义化版本号，目前绝大部分的公开镜像都使用版本号作为标签。在实际开发中，单纯使用版本号并不足以区分不同的构建版本，因为同一个版本在开发过程中可能多次构建。通常的做法是在版本号之后添加后缀，作为附加的区分信息。常用的后缀包括构建时间、构建编号和 Git 提交的标识符，如下表所示：</p><table><thead><tr><th><strong>后缀</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>构建时间</td><td>使用构建完成时的时间戳</td></tr><tr><td>构建编号</td><td>持续集成服务为每个构建分配的标识符</td></tr><tr><td>Git 提交标识符</td><td>触发持续集成的 Git 提交的标识符</td></tr></tbody></table><p>在上表的这 3 种后缀形式中，并不推荐使用构建时间，因为时间本身并不能提供更多有用的信息。使用构建编号的好处是方便与已有的项目管理系统和 bug 追踪系统进行集成。测试团队一般工作在特定的构建编号之上。推荐的做法是使用 Git 提交的标识符作为后缀，从使用的镜像标签就可以快速定位到产生该镜像的代码。</p><p>我们可以使用 Maven 的 git-commit-id-maven-plugin 插件来获取 Git 中提交的标识符，并在构建过程中引用。</p><p>下面的代码给出了该插件的使用示例。该插件会提供一系列与 Git 相关的属性，比如 git.commit.id.abbrev 属性表示 Git 提交标识符的缩略形式。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;pl.project13.maven&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;git-commit-id-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.0.1&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;get-the-git-infos&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt;revision&lt;/</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">phase</span><span style="color:#E1E4E8;">&gt;initialize&lt;/</span><span style="color:#85E89D;">phase</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;pl.project13.maven&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;git-commit-id-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.0.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;get-the-git-infos&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt;revision&lt;/</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">phase</span><span style="color:#24292E;">&gt;initialize&lt;/</span><span style="color:#22863A;">phase</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>最终生成的镜像标签类似与于 1.0.0-3228a39。</p><h3 id="使用-jenkins" tabindex="-1">使用 Jenkins <a class="header-anchor" href="#使用-jenkins" aria-label="Permalink to &quot;使用 Jenkins&quot;">​</a></h3><p>示例应用使用 Jenkins 作为持续集成的服务。Jenkins 使用 Helm 安装，运行在 Kubernetes 上。当需要运行构建任务时，Jenkins 会启动一个新的 Pod 来执行。</p><p>下面的代码是 Jenkins 中流水线的声明。构建的容器运行的是 Maven 的镜像，从 GitHub 获取源代码之后，通过 Maven 来执行构建过程，构建过程中会发布镜像到注册表中。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">podTemplate</span><span style="color:#E1E4E8;">(yaml</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;&#39; </span></span>
<span class="line"><span style="color:#9ECBFF;">apiVersion: v1 </span></span>
<span class="line"><span style="color:#9ECBFF;">kind: Pod </span></span>
<span class="line"><span style="color:#9ECBFF;">spec: </span></span>
<span class="line"><span style="color:#9ECBFF;">  securityContext: </span></span>
<span class="line"><span style="color:#9ECBFF;">    fsGroup: 1000 </span></span>
<span class="line"><span style="color:#9ECBFF;">  containers: </span></span>
<span class="line"><span style="color:#9ECBFF;">  - name: maven </span></span>
<span class="line"><span style="color:#9ECBFF;">    image: maven:3.6.3-jdk-8 </span></span>
<span class="line"><span style="color:#9ECBFF;">    command: </span></span>
<span class="line"><span style="color:#9ECBFF;">    - sleep </span></span>
<span class="line"><span style="color:#9ECBFF;">    args: </span></span>
<span class="line"><span style="color:#9ECBFF;">    - infinity </span></span>
<span class="line"><span style="color:#9ECBFF;">    resources: </span></span>
<span class="line"><span style="color:#9ECBFF;">      requests: </span></span>
<span class="line"><span style="color:#9ECBFF;">        cpu: 1 </span></span>
<span class="line"><span style="color:#9ECBFF;">        memory: 1Gi </span></span>
<span class="line"><span style="color:#9ECBFF;">    volumeMounts: </span></span>
<span class="line"><span style="color:#9ECBFF;">      - name: dockersock </span></span>
<span class="line"><span style="color:#9ECBFF;">        mountPath: &quot;/var/run/docker.sock&quot; </span></span>
<span class="line"><span style="color:#9ECBFF;">  volumes: </span></span>
<span class="line"><span style="color:#9ECBFF;">    - name: dockersock </span></span>
<span class="line"><span style="color:#9ECBFF;">      hostPath: </span></span>
<span class="line"><span style="color:#9ECBFF;">        path: /var/run/docker.sock </span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;&#39;&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">POD_LABEL</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        git </span><span style="color:#9ECBFF;">&#39;https://github.com/alexcheng1982/happyride&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">container</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;maven&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            sh </span><span style="color:#9ECBFF;">&#39;mvn -B -ntp -Dmaven.test.failure.ignore deploy&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        junit </span><span style="color:#9ECBFF;">&#39;**/target/surefire-reports/TEST-*.xml&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        archiveArtifacts </span><span style="color:#9ECBFF;">&#39;**/target/*.jar&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">podTemplate</span><span style="color:#24292E;">(yaml</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;&#39; </span></span>
<span class="line"><span style="color:#032F62;">apiVersion: v1 </span></span>
<span class="line"><span style="color:#032F62;">kind: Pod </span></span>
<span class="line"><span style="color:#032F62;">spec: </span></span>
<span class="line"><span style="color:#032F62;">  securityContext: </span></span>
<span class="line"><span style="color:#032F62;">    fsGroup: 1000 </span></span>
<span class="line"><span style="color:#032F62;">  containers: </span></span>
<span class="line"><span style="color:#032F62;">  - name: maven </span></span>
<span class="line"><span style="color:#032F62;">    image: maven:3.6.3-jdk-8 </span></span>
<span class="line"><span style="color:#032F62;">    command: </span></span>
<span class="line"><span style="color:#032F62;">    - sleep </span></span>
<span class="line"><span style="color:#032F62;">    args: </span></span>
<span class="line"><span style="color:#032F62;">    - infinity </span></span>
<span class="line"><span style="color:#032F62;">    resources: </span></span>
<span class="line"><span style="color:#032F62;">      requests: </span></span>
<span class="line"><span style="color:#032F62;">        cpu: 1 </span></span>
<span class="line"><span style="color:#032F62;">        memory: 1Gi </span></span>
<span class="line"><span style="color:#032F62;">    volumeMounts: </span></span>
<span class="line"><span style="color:#032F62;">      - name: dockersock </span></span>
<span class="line"><span style="color:#032F62;">        mountPath: &quot;/var/run/docker.sock&quot; </span></span>
<span class="line"><span style="color:#032F62;">  volumes: </span></span>
<span class="line"><span style="color:#032F62;">    - name: dockersock </span></span>
<span class="line"><span style="color:#032F62;">      hostPath: </span></span>
<span class="line"><span style="color:#032F62;">        path: /var/run/docker.sock </span></span>
<span class="line"><span style="color:#032F62;">&#39;&#39;&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">POD_LABEL</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        git </span><span style="color:#032F62;">&#39;https://github.com/alexcheng1982/happyride&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">container</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;maven&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            sh </span><span style="color:#032F62;">&#39;mvn -B -ntp -Dmaven.test.failure.ignore deploy&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        junit </span><span style="color:#032F62;">&#39;**/target/surefire-reports/TEST-*.xml&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        archiveArtifacts </span><span style="color:#032F62;">&#39;**/target/*.jar&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里需要着重介绍的是对 Docker 的使用。在构建过程中，单元测试和镜像发布都需要依赖 Docker 进程。在流水线的定义中，通过卷绑定的方式，把 Kubernetes 节点上的 /var/run/docker.sock 文件传到构建的 Pod 中，使得 Pod 中的容器可以访问节点上的 Docker 进程。通过这种方式，避免了在 Maven 容器中启动额外的 Docker 进程。</p><h3 id="其他构建镜像的工具" tabindex="-1">其他构建镜像的工具 <a class="header-anchor" href="#其他构建镜像的工具" aria-label="Permalink to &quot;其他构建镜像的工具&quot;">​</a></h3><p>目前所介绍的构建容器镜像的方式是使用 Docker，这也是目前比较主流的方式。Docker 在本地开发时很方便，但在持续集成中也有一些不足之处。</p><p>构建时需要有 Docker 守护进程存在，这就意味着需要在持续集成服务器上安装 Docker，并保持 Docker 在后台运行。如果在 Kubernetes 上运行，那么可以复用 Kubernetes 节点上的 Docker 进程。</p><p>另外一个问题来自 Docker 自身。随着多年的开发，Docker 自身已经过于臃肿，提供了非常多的功能。在持续集成中，我们只需要能够构建镜像，并推送到容器注册表即可，并不需要 Docker 提供的其他功能。</p><p>OCI 镜像规范的出现，使得容器镜像的格式不再锁定于特定的公司，从而促进了容器镜像构建相关工具的发展。目前已经有一些工具可以创建出 OCI 镜像，如下表所示。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>支持者</strong></th></tr></thead><tbody><tr><td><a href="https://github.com/moby/buildkit" target="_blank" rel="noreferrer">BuildKit</a></td><td>Docker Inc</td></tr><tr><td><a href="https://buildah.io/" target="_blank" rel="noreferrer">buildah</a></td><td>Red Hat</td></tr><tr><td><a href="https://umo.ci/" target="_blank" rel="noreferrer">umoci</a></td><td>SUSE</td></tr><tr><td><a href="https://github.com/GoogleContainerTools/kaniko" target="_blank" rel="noreferrer">Kaniko</a></td><td>Google</td></tr><tr><td><a href="https://github.com/uber/makisu" target="_blank" rel="noreferrer">Makisu</a></td><td>Uber</td></tr></tbody></table><p>在这些工具中，值得一提的是 Docker 的 BuildKit，其支持并发的构建，可以更高效地进行缓存，因此构建的速度更快。BuildKit 从 18.06 版本开始已经被集成到 Docker 中，可以通过下面的命令来启用 BuildKit。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DOCKER_BUILDKIT=1 docker build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DOCKER_BUILDKIT=1 docker build</span></span></code></pre></div><p>有一些其他工具对 BuildKit 进行了封装，可以简化它的使用，包括 <a href="https://github.com/genuinetools/img" target="_blank" rel="noreferrer">img</a>、阿里巴巴的 <a href="https://github.com/alibaba/pouch" target="_blank" rel="noreferrer">pouch</a> 和 Rancher 的 <a href="https://github.com/rancher/k3c" target="_blank" rel="noreferrer">k3c</a> 等。本课时不对这些工具进行具体的介绍，详细的使用请参考相关文档。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在微服务架构中，持续集成可以保证每一个代码提交都可以有与之对应的容器镜像，容器镜像是不可变的，而且构建的过程是可重复的。通过本课时的学习，你可以了解如何从 Dockerfile 中创建出 Docker 容器镜像，以及如何使用 Spring Boot 插件和 Google 的 Jib 工具来创建 Java 应用的容器镜像，还可以了解如何使用 Jenkins 来进行持续集成。</p><p>最后呢，成老师邀请你为本专栏课程进行结课评价，因为你的每一个观点都是我们最关注的点。<a href="https://wj.qq.com/s2/6902680/3fb2/" target="_blank" rel="noreferrer">点击链接，即可参与课程评价</a>。</p>`,77),t=[o];function e(c,r,E,y,i,g){return a(),n("div",null,t)}const k=s(p,[["render",e]]);export{u as __pageData,k as default};
