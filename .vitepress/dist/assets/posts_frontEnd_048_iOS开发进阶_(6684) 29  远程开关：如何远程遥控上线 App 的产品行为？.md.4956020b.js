import{_ as l,j as p,o as t,g as c,k as n,Q as e,s,h as o}from"./chunks/framework.4e7d56ce.js";const S=JSON.parse('{"title":"远程功能开关模块的架构与实现 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6684) 29  远程开关：如何远程遥控上线 App 的产品行为？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6684) 29  远程开关：如何远程遥控上线 App 的产品行为？.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6684) 29  远程开关：如何远程遥控上线 App 的产品行为？.md"},y=e('<p>在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=657&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6662&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《09 | 开关组件：如何使用功能开关，支持产品快速迭代》</a>那一讲中，我介绍过如何实现编译时开关和本地开关。有了这两种开关，我们就可以很方便地让测试人员在 App 里面手动启动或者关闭一些功能。那有没有什么好的办法可以让产品经理远程遥控功能呢？远程开关就能完成这一任务。</p><p><strong>通过远程开关，我们就可以在无须发布新版本的情况下开关 App 的某些功能，甚至可以为不同的用户群体提供不同的功能。</strong> 远程功能开关能帮助我们快速测试新功能，从而保证产品的快速迭代。</p><h3 id="远程功能开关模块的架构与实现" tabindex="-1">远程功能开关模块的架构与实现 <a class="header-anchor" href="#远程功能开关模块的架构与实现" aria-label="Permalink to &quot;远程功能开关模块的架构与实现&quot;">​</a></h3><p>下面我们通过 Moments App 来看看如何架构一个灵活的远程功能开关模块，并使用 Firebase 来实现一个远程功能开关。该模块主要由两部分所组成：<strong>Remote Config 模块</strong> 和<strong>Toggle 模块</strong>。远程功能开关模块的架构图如下所示：</p>',4),E=e(`<h4 id="_1-remote-config-模块的架构与实现" tabindex="-1">1. Remote Config 模块的架构与实现 <a class="header-anchor" href="#_1-remote-config-模块的架构与实现" aria-label="Permalink to &quot;1. Remote Config 模块的架构与实现&quot;">​</a></h4><p>由于 Toggle 模块依赖于 Remote Config 模块，所以我们就先看一下 Remote Config 模块的架构与实现。</p><p><strong>Remote Config 也叫作&quot;远程配置&quot;，它可以帮助我们把 App 所需的配置信息存储在服务端，让所有的 App 在启动的时候读取相关的配置信息，并根据这些配置信息来调整 App 的行为。</strong> Remote Config 应用广泛，可用于远程功能开关、 A/B 测试和强制更新等功能上。</p><p>Remote Config 的架构十分简单，由<code>RemoteConfigKey</code>和<code>RemoteConfigProvider</code>所组成，其中<code>RemoteConfigKey</code>是一个空协议（Protocol），用于存放配置信息的唯一标识，其定义如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RemoteConfigKey</span><span style="color:#E1E4E8;"> { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RemoteConfigKey</span><span style="color:#24292E;"> { }</span></span></code></pre></div><p>为了支持 Firebase 的 Remote Config 服务，我们定义一个遵循了<code>RemoteConfigKey</code>协议的枚举类型（Enum）， 其具体的代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FirebaseRemoteConfigKey</span><span style="color:#E1E4E8;">: String, RemoteConfigKey {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> isRoundedAvatar</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FirebaseRemoteConfigKey</span><span style="color:#24292E;">: String, RemoteConfigKey {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> isRoundedAvatar</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为 Firebase Remote Config 的标识都是字符串类型，所以我们把<code>FirebaseRemoteConfigKey</code>的<code>rawValue</code>也指定为<code>String</code>类型，这样就能很方便地取出<code>case</code>的值，例如，通过<code>FirebaseRemoteConfigKey.isRoundedAvatar.rawValue</code>来得到&quot;isRoundedAvatar&quot;字符串。</p><p>有了配置信息的标识以后，我们再来看看如何在 App 里面访问 Remote Config 服务。首先，我们定义一个名叫<code>RemoteConfigProvider</code>的协议，其定义如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RemoteConfigProvider</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">by</span><span style="color:#E1E4E8;"> key: RemoteConfigKey) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInt</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">by</span><span style="color:#E1E4E8;"> key: RemoteConfigKey) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Int</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBool</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">by</span><span style="color:#E1E4E8;"> key: RemoteConfigKey) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Bool</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RemoteConfigProvider</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">by</span><span style="color:#24292E;"> key: RemoteConfigKey) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">by</span><span style="color:#24292E;"> key: RemoteConfigKey) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Int</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBool</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">by</span><span style="color:#24292E;"> key: RemoteConfigKey) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Bool</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>RemoteConfigProvider</code>协议定义了<code>setup()</code>、<code>fetch()</code>等五个方法。为了使用 Firebase 的Remote Config 服务，我们定义了一个结构体<code>FirebaseRemoteConfigProvider</code>来遵循该协议，该结构体实现了协议里的五个方法。</p><p>我们先来看一下<code>setup()</code>和<code>fetch()</code>方法的具体代码实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> remoteConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RemoteConfig.</span><span style="color:#79B8FF;">remoteConfig</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    remoteConfig.</span><span style="color:#79B8FF;">setDefaults</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">fromPlist</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;FirebaseRemoteConfigDefaults&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    remoteConfig.</span><span style="color:#79B8FF;">fetchAndActivate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> remoteConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RemoteConfig.</span><span style="color:#005CC5;">remoteConfig</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    remoteConfig.</span><span style="color:#005CC5;">setDefaults</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">fromPlist</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;FirebaseRemoteConfigDefaults&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    remoteConfig.</span><span style="color:#005CC5;">fetchAndActivate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在初始化的时候，我们调用 Firebase SDK 所提供的<code>RemoteConfig.remoteConfig()</code>方法来生成一个<code>RemoteConfig</code>的实例并赋值给<code>remoteConfig</code>属性，然后在<code>setup()</code>里调用<code>remoteConfig.setDefaults(fromPlist:)</code>方法从 FirebaseRemoteConfigDefaults.plist 文件里读取配置的默认值。下图展示的就是该 plist 文件，在该文件里，我们把<code>isRoundedAvatar</code>的默认值设置为 false，这样能保证 App 在无法联网的情况下也能正常运行。</p>`,14),i=e(`<p>在<code>fetch()</code>里，我们调用了 Firebase SDK 里的<code>fetchAndActivate()</code>方法来获取远程配置信息。</p><p>接着我们再来看看另外三个方法的具体实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">by</span><span style="color:#E1E4E8;"> key: RemoteConfigKey) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> FirebaseRemoteConfigKey </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> remoteConfig[key.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">stringValue</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInt</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">by</span><span style="color:#E1E4E8;"> key: RemoteConfigKey) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Int</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> FirebaseRemoteConfigKey </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">truncating</span><span style="color:#E1E4E8;">: remoteConfig[key.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">].numberValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBool</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">by</span><span style="color:#E1E4E8;"> key: RemoteConfigKey) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> FirebaseRemoteConfigKey </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> remoteConfig[key.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">boolValue</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">by</span><span style="color:#24292E;"> key: RemoteConfigKey) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> FirebaseRemoteConfigKey </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> remoteConfig[key.</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">stringValue</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">by</span><span style="color:#24292E;"> key: RemoteConfigKey) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Int</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> FirebaseRemoteConfigKey </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">truncating</span><span style="color:#24292E;">: remoteConfig[key.</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">].numberValue)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBool</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">by</span><span style="color:#24292E;"> key: RemoteConfigKey) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> FirebaseRemoteConfigKey </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> remoteConfig[key.</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">boolValue</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这三个方法都使用了<code>RemoteConfigKey</code>作为标识符从<code>remoteConfig</code>对象里读取相关的配置信息，然后把获取到的信息分别转换成所需的类型，例如字符串、整型或者布尔类型。</p><p>至此，我们就实现了 Remote Config 模块，假如还需要支持其他的远程配置服务，只需为<code>RemoteConfigProvider</code>协议实现另外一个子类型即可，例如需要支持 Optimizely 的远程配置服务时，可以实现一个名叫<code>OptimizelyRemoteConfigProvider</code>的结构体来封装访问 Optimizely 后台服务的逻辑。</p><h4 id="_2-toggle-模块的架构与实现" tabindex="-1">2. Toggle 模块的架构与实现 <a class="header-anchor" href="#_2-toggle-模块的架构与实现" aria-label="Permalink to &quot;2. Toggle 模块的架构与实现&quot;">​</a></h4><p>有了 Remote Config 模块，实现 Toggle 模块就变得十分简单了。在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=657&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6662&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《09 | 开关组件：如何使用功能开关，支持产品快速迭代》</a>里面，我们讲过 Toggle 模块的架构与实现。要添加远程开关的支持，我们只需要增加两个实现类型：<code>RemoteToggle</code>和<code>FirebaseRemoteTogglesDataStore</code>结构体。我们先看一下<code>RemoteToggle</code>的实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RemoteToggle</span><span style="color:#E1E4E8;">: String, ToggleType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> isRoundedAvatar</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RemoteToggle</span><span style="color:#24292E;">: String, ToggleType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> isRoundedAvatar</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>和编译时开关以及本地开关一样，<code>RemoteToggle</code>也是一个遵循了<code>ToggleType</code>协议的枚举类型。所有的远程开关功能的名称都罗列在<code>case</code>里面，例如，<code>isRoundedAvatar</code>表示是否把朋友圈页面里的头像显示为圆形。</p><p>有了功能开关的名称定义以后，我们就要为<code>TogglesDataStoreType</code>提供一个远程开关的具体实现。因为我们使用了 Firebase 服务，所以就把它命名为<code>FirebaseRemoteTogglesDataStore</code>，其具体实现如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FirebaseRemoteTogglesDataStore</span><span style="color:#E1E4E8;">: TogglesDataStoreType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shared: FirebaseRemoteTogglesDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> remoteConfigProvider: RemoteConfigProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">remoteConfigProvider</span><span style="color:#E1E4E8;">: RemoteConfigProvider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FirebaseRemoteConfigProvider.shared) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.remoteConfigProvider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> remoteConfigProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.remoteConfigProvider.</span><span style="color:#79B8FF;">setup</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.remoteConfigProvider.</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isToggleOn</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> toggle: ToggleType) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> RemoteToggle, </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> remoteConfiKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FirebaseRemoteConfigKey</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">: toggle.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> remoteConfigProvider.</span><span style="color:#79B8FF;">getBool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: remoteConfiKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toggle</span><span style="color:#E1E4E8;">: ToggleType, </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">) { }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FirebaseRemoteTogglesDataStore</span><span style="color:#24292E;">: TogglesDataStoreType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> shared: FirebaseRemoteTogglesDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> remoteConfigProvider: RemoteConfigProvider</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">remoteConfigProvider</span><span style="color:#24292E;">: RemoteConfigProvider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FirebaseRemoteConfigProvider.shared) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.remoteConfigProvider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> remoteConfigProvider</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.remoteConfigProvider.</span><span style="color:#005CC5;">setup</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.remoteConfigProvider.</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isToggleOn</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> toggle: ToggleType) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> RemoteToggle, </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> remoteConfiKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FirebaseRemoteConfigKey</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">: toggle.</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> remoteConfigProvider.</span><span style="color:#005CC5;">getBool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: remoteConfiKey)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toggle</span><span style="color:#24292E;">: ToggleType, </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">) { }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>FirebaseRemoteTogglesDataStore</code>依赖了 Remote Config 模块。在<code>init()</code>方法里面，我们通过依赖注入的方式把<code>FirebaseRemoteConfigProvider</code>的实例传递进来，并调用<code>setup()</code>方法来初始化 Firebase 的 Remote Config 服务，然后调用<code>fetch()</code>方法来读取所有的配置信息。</p><p>因为<code>FirebaseRemoteTogglesDataStore</code>遵循了<code>TogglesDataStoreType</code>协议，所以必须实现<code>isToggleOn(_:)</code>和<code>update(toggle:value:)</code>两个方法。</p><p><code>isToggleOn(_:)</code>方法用于判断某个开关是否打开，在方法实现里，我们先判断传递进来的<code>toggle</code>是否为<code>RemoteToggle</code>类型，然后再判断该 Toggle 的名称是否匹配<code>FirebaseRemoteConfigKey</code>里的定义。如果都符合条件，那么就可以调用<code>remoteConfigProvider</code>的<code>getBool(by:)</code>方法来判断开关是否打开。</p><p><code>update(toggle: ToggleType, value: Bool)</code>方法的实现非常简单，因为 App 是无法更新远程开关信息的，所以它的实现为空。</p><p>至此，我们就为 Toggle 模块添加好了 Firebase 远程开关的支持。</p><h3 id="远程开关的使用与配置" tabindex="-1">远程开关的使用与配置 <a class="header-anchor" href="#远程开关的使用与配置" aria-label="Permalink to &quot;远程开关的使用与配置&quot;">​</a></h3><p><strong>使用远程开关仅仅需要两步</strong> ，下面我们就以<code>MomentListItemView</code>为例子看看如何使用远程开关来控制头像的显示风格吧。</p><p>第一步是在<code>init()</code>方法里面把<code>TogglesDataStoreType</code>子类型的实例通过依赖注入的方式传递进去，具体代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> let remoteTogglesDataStore</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> TogglesDataStoreType</span></span>
<span class="line"><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(frame</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> CGRect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .zero, ..., remoteTogglesDataStore</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> TogglesDataStoreType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FirebaseRemoteTogglesDataStore.shared) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    self.remoteTogglesDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> remoteTogglesDataStore</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(frame</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> frame)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> let remoteTogglesDataStore</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> TogglesDataStoreType</span></span>
<span class="line"><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(frame</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> CGRect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .zero, ..., remoteTogglesDataStore</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> TogglesDataStoreType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FirebaseRemoteTogglesDataStore.shared) {</span></span>
<span class="line"><span style="color:#24292E;">    self.remoteTogglesDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> remoteTogglesDataStore</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(frame</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> frame)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为 Moments App 使用了 Firebase 作为远程开关服务，所以我们就把<code>FirebaseRemoteTogglesDataStore</code>的实例赋值给<code>remoteTogglesDataStore</code>属性。</p><p>第二步是调用<code>isToggleOn(_:)</code>方法来判断远程开关是否开启，示例代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> remoteTogglesDataStore.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(RemoteToggle.isRoundedAvatar) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    avatarImageView.</span><span style="color:#79B8FF;">asAvatar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cornerRadius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> remoteTogglesDataStore.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(RemoteToggle.isRoundedAvatar) {</span></span>
<span class="line"><span style="color:#24292E;">    avatarImageView.</span><span style="color:#005CC5;">asAvatar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cornerRadius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们把<code>isRoundedAvatar</code>作为标识符来调用<code>isToggleOn(_:)</code>方法，如果该方法返回<code>true</code>，就把<code>avatarImageView</code>的圆角设置为 10 pt。因为<code>avatarImageView</code>的高度和宽度都为 20 pt，所以当圆角设置为 10 pt 时就会显示为圆形。</p><p>就这样，我们就能在 App 里使用名为<code>isRoundedAvatar</code>的远程开关了。假如要使用其他的远程开关，只需要在<code>RemoteToggle</code>和<code>FirebaseRemoteConfigKey</code>两个枚举类型里添加新的<code>case</code>，并在 FirebaseRemoteConfigDefaults.plist 文件设置默认值即可。</p><p>但是，产品经理怎样才能在 Firebase 服务端<strong>配置远程开关</strong>呢？下面我们一起看一下这个配置的步骤吧。</p>`,26),g=s("p",null,'我们可以在 Firebase 网站上点击 Engage -> Remote Config 菜单来打开 Remote Config 配置页面，然后点击"Add parameter"来添加一个名叫"isRoundedAvatar"的配置，如下图所示：',-1),d=s("p",null,'当添加或修改完配置后，一定要记住点击下图的"Publish changes"按钮来发布更新。',-1),F=s("p",null,'现在我们就能很方便地在 Firebase 网站上修改"isRoundedAvatar"配置的值来控制头像的显示风格了。',-1),C=s("p",null,"除了简单地启动或者关闭远程开关以外，Firebase 还可以帮我们根据用户的特征进行条件配置，例如，我们可以让所有使用中文的用户启动圆形头像风格，而让其他语言的用户保留原有风格。",-1),m=s("p",null,[o("下面我们就来看看如何在 Firebase 网站上"),s("strong",null,"进行条件配置"),o("。")],-1),u=s("p",null,'我们可以点击修改按钮的图标来打开修改弹框，然后点击"Add value for condition"按钮来添加条件。如下图所示，我们添加了一个名叫"Chinese users"的条件，该条件会判断用户是否使用中文作为他们设备的默认语言。',-1),f=s("p",null,[o('然后我们就可以为符合该条件的用户配置不同的值，例如在下图中，符合"Chinese users"条件的用户在读取"isRoundedAvatar"配置时都会得到'),s("code",null,"true"),o("。")],-1),A=s("p",null,"下面是 Moments App 运行在不同语言设备上的效果图，你可以对比一下。",-1),h=e('<h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲中，我们主要讲解了如何架构一个灵活的远程开关模块，该模块可以使用不同的后台服务来支持远程开关。接着我们以 Firebase 作为例子讲述了如何使用 Remote Config 来实现一个头像风格的远程开关，并且演示了如何根据用户的特征来为远程开关配置不同的值。</p><p>有了远程开关，产品经理就能很方便地遥控 App 的行为，并能快速地尝试新功能。但需要注意的是：<strong>不能滥用远程开关，并且最好能经常回顾上线的远程开关，把测试完毕的开关及时删除掉</strong>，否则会导致 App 里面的开关越来越多，使得程序的逻辑变得十分复杂且难以维护，再加上每个远程开关都需要从网络读取相关的配置信息，太多的开关还会影响到用户的使用体验。</p><p><strong>思考题</strong></p><blockquote><p>在 FirebaseRemoteTogglesDataStore 里面，为什么没有直接使用 Firebase SDK 来读取 Remote Config 呢？另外，把读取 Remote Config 的逻辑封装在 FirebaseRemoteConfigProvider 里有什么好处呢？</p></blockquote><p>可以把你的思考与答案写到留言区哦。下一讲我将介绍&quot;如何使用 A/B 测试协助产品抉择&quot;的相关内容，记得按时来听课哦。</p><p><strong>源码地址</strong></p><blockquote><p>RemoteConfig 源码地址：<a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/RemoteConfig?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/RemoteConfig</a></p><p>远程开关源码地址：<a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Moments/Moments/Foundations/Toggles/FirebaseRemoteTogglesDataStore.swift?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Moments/Moments/Foundations/Toggles/FirebaseRemoteTogglesDataStore.swift</a></p></blockquote>',8);function D(b,v,R,_,T,B){const a=p("Image");return t(),c("div",null,[y,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/42/48/CioPOWCwv2SADMy0AAaS5zXqWdw226.png"}),E,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/42/48/CioPOWCwv3SAVlZxAAEErVPTcjU511.png"}),i,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/42/40/Cgp9HWCwv4mAaXxBAAFQQUUchME827.png"}),g,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/42/40/Cgp9HWCwv46AJnkoAABDkckTx4Q957.png"}),d,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/42/48/CioPOWCwv5WAeslvAAA35s5FG6I535.png"}),F,C,m,u,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M00/42/48/CioPOWCwv5uAVDBQAABwa1bn3zE273.png"}),f,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M00/42/48/CioPOWCwv6CAVm2nAABefStzJKo444.png"}),A,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/42/40/Cgp9HWCwv6mALnzGAGJIzKWo3xc607.png"}),h])}const P=l(r,[["render",D]]);export{S as __pageData,P as default};
