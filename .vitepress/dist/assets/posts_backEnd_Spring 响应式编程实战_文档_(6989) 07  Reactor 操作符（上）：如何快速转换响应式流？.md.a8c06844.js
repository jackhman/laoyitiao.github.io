import{_ as p,j as o,o as e,g as t,k as n,h as l,Q as s}from"./chunks/framework.cfb14fe0.js";const k=JSON.parse('{"title":"07Reactor操作符（上）：如何快速转换响应式流？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6989) 07  Reactor 操作符（上）：如何快速转换响应式流？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6989) 07  Reactor 操作符（上）：如何快速转换响应式流？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring 响应式编程实战_文档/(6989) 07  Reactor 操作符（上）：如何快速转换响应式流？.md"},r=s(`<h1 id="_07reactor操作符-上-如何快速转换响应式流" tabindex="-1">07Reactor操作符（上）：如何快速转换响应式流？ <a class="header-anchor" href="#_07reactor操作符-上-如何快速转换响应式流" aria-label="Permalink to &quot;07Reactor操作符（上）：如何快速转换响应式流？&quot;">​</a></h1><p>上一讲，我系统地为你介绍了 Reactor 框架中创建 Flux 和 Mono 这两种数据流的各种方法。一旦我们得到了一个数据流，就可以使用它来完成某个特定的需求。</p><p>和其他主流的响应式编程框架一样，Reactor 框架的设计目标也是为了简化响应式流的使用方法。为此，Reactor 框架为我们提供了大量操作符，用于操作 Flux 和 Mono 对象。本讲和下一讲，我们将对常用的操作符展开讨论。</p><h3 id="操作符的分类" tabindex="-1">操作符的分类 <a class="header-anchor" href="#操作符的分类" aria-label="Permalink to &quot;操作符的分类&quot;">​</a></h3><p>在进行响应式编程时，灵活应用操作符是开发人员的核心工作。由于 Reactor 中所提供的操作符数量众多，本课程不打算对所有这些操作符进行全面而细致的介绍，而是尝试将操作符进行分类，然后对每一类中具有代表性的操作符展开讨论。</p><p>业界关于响应式操作符的分类并没有统一的说法，但针对数据流通常都会涉及转换、过滤、裁剪等核心操作，以及一些辅助性的操作。因此，本课程中我将 Flux 和 Mono 操作符分成如下六大类型：</p><ul><li><p>转换（Transforming）操作符，负责将序列中的元素转变成另一种元素；</p></li><li><p>过滤（Filtering）操作符，负责将不需要的数据从序列中剔除出去；</p></li><li><p>组合（Combining）操作符，负责将序列中的元素进行合并、连接和集成；</p></li><li><p>条件（Conditional）操作符，负责根据特定条件对序列中的元素进行处理；</p></li><li><p>裁剪（Reducing）操作符，负责对序列中的元素执行各种自定义的裁剪操作；</p></li><li><p>工具（Utility）操作符，负责一些针对流式处理的辅助性操作。</p></li></ul><p>其中，我把前面三种操作符统称为&quot;转换类&quot;操作符，剩余的三大类统称为&quot;裁剪类&quot;操作符。这一讲先来针对&quot;转换类&quot;的常见操作符做具体展开，&quot;裁剪类&quot;的操作符将放在下一讲中介绍。</p><h3 id="转换操作符" tabindex="-1">转换操作符 <a class="header-anchor" href="#转换操作符" aria-label="Permalink to &quot;转换操作符&quot;">​</a></h3><p>转换可以说是对数据流最常见的一种操作了，Reactor 中常用的转换操作符包括 buffer、window、map 和 flatMap 等。</p><h4 id="buffer-操作符" tabindex="-1">buffer 操作符 <a class="header-anchor" href="#buffer-操作符" aria-label="Permalink to &quot;buffer 操作符&quot;">​</a></h4><p>buffer 操作符的作用相当于把当前流中的元素统一收集到一个集合中，并把这个集合对象作为新的数据流。使用 buffer 操作符在进行元素收集时，可以指定集合对象所包含的元素的最大数量。buffer 操作符的一种用法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">buffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">buffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上代码先使用上一讲中介绍的 range() 方法创建 1~25 这 25 个元素，然后演示了通过 buffer 操作符从包含这 25 个元素的流中构建一组集合，每个集合包含 10 个元素，所以一共构建 3 个集合。显然，上面这段代码的执行效果如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="color:#E1E4E8;">[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]</span></span>
<span class="line"><span style="color:#E1E4E8;">[21, 22, 23, 24, 25]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="color:#24292E;">[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]</span></span>
<span class="line"><span style="color:#24292E;">[21, 22, 23, 24, 25]</span></span></code></pre></div><p>buffer 操作符的另一种用法是指定收集的时间间隔，由此演变出了一组 bufferTimeout() 方法，bufferTimeout() 方法可以指定时间间隔为一个 Duration 对象或毫秒数。</p><h4 id="window-操作符" tabindex="-1">window 操作符 <a class="header-anchor" href="#window-操作符" aria-label="Permalink to &quot;window 操作符&quot;">​</a></h4><p>window 操作符的作用类似于 buffer，不同的是 window 操作符是把当前流中的元素收集到另外的 Flux 序列中，而不是一个集合。因此该操作符的返回值类型就变成了 Flux&lt;Flux &gt;。window 操作符相对比较复杂，我们附上官方给出的弹珠图，如下所示。</p>`,18),E=s(`<p>window 操作符示意图（来自 Reactor 官网）</p><p>上图比较复杂，代表的是一种对序列进行开窗的操作。我们还是通过一个简单的示例来进一步阐述 window 操作符的作用，示例代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">window</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toIterable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(w </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        w.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-------&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">window</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toIterable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(w </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        w.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>这里我们生成了 5 个元素，然后通过 window 操作符把这 5 个元素转变成 3 个 Flux 对象。在将这些 Flux 对象转化为 Iterable 对象后，通过 forEach() 循环打印出来，执行效果如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">-------</span></span>
<span class="line"><span style="color:#E1E4E8;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">-------</span></span>
<span class="line"><span style="color:#E1E4E8;">5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1</span></span>
<span class="line"><span style="color:#24292E;">2</span></span>
<span class="line"><span style="color:#24292E;">-------</span></span>
<span class="line"><span style="color:#24292E;">3</span></span>
<span class="line"><span style="color:#24292E;">4</span></span>
<span class="line"><span style="color:#24292E;">-------</span></span>
<span class="line"><span style="color:#24292E;">5</span></span></code></pre></div><h4 id="map-操作符" tabindex="-1">map 操作符 <a class="header-anchor" href="#map-操作符" aria-label="Permalink to &quot;map 操作符&quot;">​</a></h4><p>map 操作符相当于一种映射操作，它对流中的每个元素应用一个映射函数从而达到转换效果，比较简单，你可以来看一下示例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;number-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;number-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>显然，这行代码的输入应该是这样：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">number-1</span></span>
<span class="line"><span style="color:#E1E4E8;">number-2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">number-1</span></span>
<span class="line"><span style="color:#24292E;">number-2</span></span></code></pre></div><h4 id="flatmap-操作符" tabindex="-1">flatMap 操作符 <a class="header-anchor" href="#flatmap-操作符" aria-label="Permalink to &quot;flatMap 操作符&quot;">​</a></h4><p>flatMap 操作符执行的也是一种映射操作，但与 map 不同，该操作符会把流中的每个元素映射成一个流而不是一个元素，然后再把得到的所有流中的元素进行合并，整个过程你可以通过 flapMap 操作符的弹珠图进行理解，如下所示。</p>`,12),y=s(`<p>flapMap 操作符示意图（来自 Reactor 官网）</p><p>上图比较复杂，而如下代码展示了 flatMap 操作符的一种常见的应用方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> x))</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> x))</span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上代码中，我们对 1 和 5 这两个元素使用了 flatMap 操作，操作的结果是返回它们的平方值并进行合并，执行效果如下。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">25</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1</span></span>
<span class="line"><span style="color:#24292E;">25</span></span></code></pre></div><p>事实上，flatMap 可以对任何你感兴趣的操作进行转换。例如，在系统开发过程中，我们经常会碰到对从数据库查询所获取的数据项逐一进行处理的场景，这时候就可以充分利用 flatMap 操作符的特性开展相关操作。</p><p>如下所示的代码演示了针对从数据库获取的 User 数据，如何使用该操作符逐一查询 User 所生成的订单信息的实现方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">getUsers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">users.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(u </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOrdersByUser</span><span style="color:#E1E4E8;">(u))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">getUsers</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">users.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(u </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOrdersByUser</span><span style="color:#24292E;">(u))</span></span></code></pre></div><p>flatMap 操作符非常强大而实用，在本课程的案例中，你会经常看到 flatMap 的这种使用方法。</p><p>以上就是常见的四种转换操作符，我通过文字描述以及代码演示，让你对此形成一定的认知，为后续的学习打下基础。下面再来说说过滤操作符。</p><h3 id="过滤操作符" tabindex="-1">过滤操作符 <a class="header-anchor" href="#过滤操作符" aria-label="Permalink to &quot;过滤操作符&quot;">​</a></h3><p>过滤类操作符的作用非常明确，就是从数据流中只获取自己想要的元素。Reactor 中的过滤操作符也有很多，常用的包括 filter、first/last、skip/skipLast、take/takeLast 等，这些操作符应用起来都相对比较简单。</p><h4 id="filter-操作符" tabindex="-1">filter 操作符 <a class="header-anchor" href="#filter-操作符" aria-label="Permalink to &quot;filter 操作符&quot;">​</a></h4><p>filter 操作符的含义与普通的过滤器类似，就是对流中包含的元素进行过滤，只留下满足指定过滤条件的元素，而过滤条件的指定一般是通过断言。</p><p>例如，我们想要对 1~10 这 10 个元素进行过滤，只获取能被 2 取余的元素，可以使用如下代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>这里的&quot;i % 2 == 0&quot;代表的就是一种断言。</p><h4 id="first-last-操作符" tabindex="-1">first/last 操作符 <a class="header-anchor" href="#first-last-操作符" aria-label="Permalink to &quot;first/last 操作符&quot;">​</a></h4><p>first 操作符的执行效果为返回流中的第一个元素，而 last 操作符的执行效果即返回流中的最后一个元素。这两个操作符很简单，但却很常用。不需要给出代码示例相信你也能明白它们的用法。</p><h4 id="skip-skiplast" tabindex="-1">skip/skipLast <a class="header-anchor" href="#skip-skiplast" aria-label="Permalink to &quot;skip/skipLast&quot;">​</a></h4><p>如果使用 skip 操作符，将会忽略数据流的前 n 个元素。类似的，如果使用 skipLast 操作符，将会忽略流的最后 n 个元素。</p><h4 id="take-takelast" tabindex="-1">take/takeLast <a class="header-anchor" href="#take-takelast" aria-label="Permalink to &quot;take/takeLast&quot;">​</a></h4><p>take 系列操作符用来从当前流中提取元素。我们可以按照指定的数量来提取元素，也可以按照指定的时间间隔来提取元素。类似的，takeLast 系列操作符用来从当前流的尾部提取元素。</p><p>take 和 takeLast 操作符的示例代码如下，我们不难得出它们的执行效果分别为返回 1 到 10，以及返回 991 到 1000 的 10 个数字。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">take</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">takeLast</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">takeLast</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上就是过滤操作符，下面再来说说组合操作符。</p><h3 id="组合操作符" tabindex="-1">组合操作符 <a class="header-anchor" href="#组合操作符" aria-label="Permalink to &quot;组合操作符&quot;">​</a></h3><p>Reactor 中常用的组合操作符有 then/when、merge、startWith 和 zip 等。相比过滤操作符，组合操作符要复杂一点，我们先从简单的看起。</p><h4 id="then-when-操作符" tabindex="-1">then/when 操作符 <a class="header-anchor" href="#then-when-操作符" aria-label="Permalink to &quot;then/when 操作符&quot;">​</a></h4><p>then 操作符的含义是等到上一个操作完成再进行下一个。以下代码展示了该操作符的用法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>这里尽管生成了一个包含 1、2、3 三个元素的 Flux 流，但 then 操作符在上游的元素执行完成之后才会触发新的数据流，也就是说会忽略所传入的元素，所以上述代码在控制台上实际并没有任何输出。</p><p>和 then 一起的还有一个 thenMany 操作服务，具有同样的含义，但可以初始化一个新的 Flux 流。示例代码如下所示，这次我们会看到控制台上输出了 4 和 5 这两个元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">thenMany</span><span style="color:#E1E4E8;">(Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">thenMany</span><span style="color:#24292E;">(Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>对应的，when 操作符的含义则是等到多个操作一起完成。如下代码很好地展示了 when 操作符的实际应用场景。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateOrders</span><span style="color:#E1E4E8;">(Flux</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Order</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> orders) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orders</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(file </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; saveOrderToDatabase </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span></span>
<span class="line"><span style="color:#E1E4E8;">                Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; sendMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(saveOrderToDatabase, </span></span>
<span class="line"><span style="color:#E1E4E8;">	sendMessage);</span></span>
<span class="line"><span style="color:#E1E4E8;">       });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateOrders</span><span style="color:#24292E;">(Flux</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Order</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> orders) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orders</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(file </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; saveOrderToDatabase </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...;</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"><span style="color:#24292E;">                Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; sendMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(saveOrderToDatabase, </span></span>
<span class="line"><span style="color:#24292E;">	sendMessage);</span></span>
<span class="line"><span style="color:#24292E;">       });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><p>在上述代码中，假设我们对订单列表进行批量更新，首先把订单数据持久化到数据库，然后再发送一条通知类的消息。我们需要确保这两个操作都完成之后方法才能返回，所以用到了 when 操作符。</p><h4 id="merge-操作符" tabindex="-1">merge 操作符 <a class="header-anchor" href="#merge-操作符" aria-label="Permalink to &quot;merge 操作符&quot;">​</a></h4><p>作为一种典型的组合类操作符，merge 操作符用来把多个 Flux 流合并成一个 Flux 序列，而合并的规则就是按照流中元素的实际生成的顺序进行，它的弹珠图如下所示。</p>`,40),i=s(`<p>merge 操作符示意图（来自 Reactor 官网）</p><p>merge 操作符的代码示例如下所示，我们通过 Flux.intervalMillis() 方法分别创建了两个 Flux 序列，然后将它们 merge 之后打印出来。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(Flux.</span><span style="color:#B392F0;">intervalMillis</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">take</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), Flux.</span><span style="color:#B392F0;">intervalMillis</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">take</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toStream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(Flux.</span><span style="color:#6F42C1;">intervalMillis</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), Flux.</span><span style="color:#6F42C1;">intervalMillis</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">toStream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>请注意，这里的第一个 intervalMillis 方法没有延迟，每隔 100 毫秒生成一个元素，而第二个 intervalMillis 方法则是延迟 50 毫秒之后才发送第一个元素，时间间隔同样是 100 毫秒。相当于两个数据序列会交错地生成数据，并合并在一起。所以以上代码的执行效果如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">0</span></span>
<span class="line"><span style="color:#24292E;">0</span></span>
<span class="line"><span style="color:#24292E;">1</span></span>
<span class="line"><span style="color:#24292E;">1</span></span></code></pre></div><p>和 merge 类似的还有一个 mergeSequential 方法。不同于 merge 操作符，mergeSequential 操作符则按照所有流被订阅的顺序，以流为单位进行合并。现在我们来看一下这段代码，这里仅仅将 merge 操作换成了 mergeSequential 操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">mergeSequential</span><span style="color:#E1E4E8;"> (Flux.</span><span style="color:#B392F0;">intervalMillis</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">take</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), Flux.</span><span style="color:#B392F0;">intervalMillis</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">take</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toStream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">mergeSequential</span><span style="color:#24292E;"> (Flux.</span><span style="color:#6F42C1;">intervalMillis</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), Flux.</span><span style="color:#6F42C1;">intervalMillis</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">toStream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>执行以上代码，我们将得到不同的结果，如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">0</span></span>
<span class="line"><span style="color:#24292E;">1</span></span>
<span class="line"><span style="color:#24292E;">0</span></span>
<span class="line"><span style="color:#24292E;">1</span></span></code></pre></div><p>显然从结果来看，mergeSequential 操作是等上一个流结束之后再 merge 新生成的流元素。</p><h4 id="zip-操作符" tabindex="-1">zip 操作符 <a class="header-anchor" href="#zip-操作符" aria-label="Permalink to &quot;zip 操作符&quot;">​</a></h4><p>zip 操作符的合并规则比较特别，是将当前流中的元素与另外一个流中的元素按照一对一的方式进行合并，如下所示。</p>`,12),d=s(`<p>zip 操作符示意图（来自 Reactor 官网）</p><p>使用 zip 操作符在合并时可以不做任何处理，由此得到的是一个元素类型为 Tuple2 的流，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux flux1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux flux2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">zip</span><span style="color:#E1E4E8;">(flux1, flux2).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux flux1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Flux flux2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">zip</span><span style="color:#24292E;">(flux1, flux2).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上代码执行效果如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[1,3]</span></span>
<span class="line"><span style="color:#E1E4E8;">[2,4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[1,3]</span></span>
<span class="line"><span style="color:#24292E;">[2,4]</span></span></code></pre></div><p>我们可以使用 zipWith 操作符实现同样的效果，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">zipWith</span><span style="color:#E1E4E8;">(Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">zipWith</span><span style="color:#24292E;">(Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>另一方面，我们也可以通过自定义一个 BiFunction 函数来对合并过程做精细化的处理，这时候所得到的流的元素类型即为该函数的返回值类似，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">zipWith</span><span style="color:#E1E4E8;">(Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">), (s1, s2) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s+%s=%s&quot;</span><span style="color:#E1E4E8;">, s1, s2, s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s2))</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">zipWith</span><span style="color:#24292E;">(Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">), (s1, s2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s+%s=%s&quot;</span><span style="color:#24292E;">, s1, s2, s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2))</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>以上代码执行效果如下，可以看到我们对输出内容做了自定义的格式化操作。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">1+3=4</span></span>
<span class="line"><span style="color:#E1E4E8;">2+4=6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1+3=4</span></span>
<span class="line"><span style="color:#24292E;">2+4=6</span></span></code></pre></div><p>关于组合操作符的大致情况我就介绍到这了，本讲内容也将告一段落。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>这一讲开始系统介绍 Reactor 框架所提供的各类操作符，使用操作符是我们开发响应式应用程序的主要工作。Reactor 框架中的操作符数量繁多，今天我们先给出了针对这些操作符的分类讨论，并重点对转换类、过滤类和组合类的操作符展开了详细的介绍，希望你能对此有一个清晰的认知，为后续的深入学习打下基础。</p><p>这里给你留一道思考题：在 Reactor 中，map 和 flatMap 操作符有什么区别？</p><p>下一讲将承接本讲内容继续讨论 Reactor 框架中的操作符，我们将讨论条件、裁剪和工具类的操作符使用方法，到时见。</p><blockquote><p>点击链接，获取课程相关代码↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=5qq2xRIWjHwZ6Uvr" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,17);function u(F,h,g,C,b,v){const a=o("Image");return e(),t("div",null,[r,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/29/9C/Cgp9HWBhfxqAbRiUAAQFjAhjF5U321.png"}),l(),E,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/29/A5/CioPOWBhfyaAdHDOAALuJxPlC4w200.png"}),l(),y,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M00/29/9C/Cgp9HWBhfz6ABVQNAANJ8ZXLXC8786.png"}),l(),i,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M00/29/A5/CioPOWBhf0-AMFkrAAMs-TKDoUM878.png"}),l(),d])}const B=p(c,[["render",u]]);export{k as __pageData,B as default};
