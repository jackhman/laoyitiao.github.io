import{_ as l,j as e,o as t,g as c,k as a,h as o,Q as p,s}from"./chunks/framework.a0d18f64.js";const x=JSON.parse('{"title":"22一致性挑战：微服务架构下的数据一致性解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6767) 22  一致性挑战：微服务架构下的数据一致性解决方案.md","filePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6767) 22  一致性挑战：微服务架构下的数据一致性解决方案.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/SpringCloud Alibaba 实战_文档/(6767) 22  一致性挑战：微服务架构下的数据一致性解决方案.md"},E=p('<h1 id="_22一致性挑战-微服务架构下的数据一致性解决方案" tabindex="-1">22一致性挑战：微服务架构下的数据一致性解决方案 <a class="header-anchor" href="#_22一致性挑战-微服务架构下的数据一致性解决方案" aria-label="Permalink to &quot;22一致性挑战：微服务架构下的数据一致性解决方案&quot;">​</a></h1><p>上一讲我们介绍了如何在微服务架构中设计统一的用户认证方案。本讲咱们填之前埋下的一个坑，如何在微服务架构下有效保障数据一致性问题。本讲咱们涉及三方面内容：</p><ul><li><p>CAP 原则与 BASE 定理；</p></li><li><p>TCC 一致性解决方案；</p></li><li><p>Seata TCC 模式。</p></li></ul><p>首先咱们了解什么是 CAP 原则与 BASE 定理。</p><h3 id="cap-原则与-base-定理" tabindex="-1">CAP 原则与 BASE 定理 <a class="header-anchor" href="#cap-原则与-base-定理" aria-label="Permalink to &quot;CAP 原则与 BASE 定理&quot;">​</a></h3><h4 id="cap-原则" tabindex="-1">CAP 原则 <a class="header-anchor" href="#cap-原则" aria-label="Permalink to &quot;CAP 原则&quot;">​</a></h4><p>CAP 是<strong>Consistency</strong> （一致性）、<strong>Availability</strong> （可用性）、<strong>Partition tolerance</strong>（分区容错性）的首字母组合，它是所有分布式系统在设计前设计师必须优先考虑的事情。</p>',7),y=s("p",null,"CAP 原则",-1),i=s("ul",null,[s("li",null,[s("p",null,"一致性 C 代表更新操作成功后，所有节点在同一时间的数据完全一致。")]),s("li",null,[s("p",null,"可用性 A 代表用户访问数据时，系统是否能在正常响应时间返回预期的结果。")]),s("li",null,[s("p",null,"分区容错性 P 代表分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性或可用性的服务。")])],-1),F=s("p",null,"CAP 是新人比较难理解的知识，我们通过实际案例进行说明。以订单系统与库存系统为例，",-1),C=p('<p>订单与库存系统</p><p>在实际业务中订单的创建会伴随着库存的减少，在原本单体架构中，这是一个应用中的两个模块，但随着业务发展库存模块压力增加，架构师就将其剥离为新的库存系统，库存数据也存放在单独的数据库中，两个系统间通过网络进行通信，架构模式自然也转为分布式。但与此同时，加入网络通信后系统故障概率也在增加，架构师必须考虑应用&quot;分区&quot;后的容错性问题，这就是 CAP 中的 P 分区容错性的含义，分区容错性是任何分布式系统必须包含的因素。</p><p>那么如何后续处理呢？有两种方案：</p><ul><li><p>第一种，放弃 C 一致性保障 A 可用性，简称 AP。具体表现为产生通信故障后，应用会完成新增订单放弃减少库存的操作，应用立即返回响应，并在响应中说明具体处理的细节，这种方案用户会有更好的体验，但数据层面是不完整的，需要后续补偿。</p></li><li><p>第二种，放弃 A 可用性保障一致性 C，简称 CP。具体表现为产生通信故障后，应用会进入阻塞状态，一直尝试与库存系统恢复通信直到完成所有数据处理。这种方案是优先保障数据完整性，但此方案用户体验极差，因为在所有操作完成前用户会一直处于等待的状态。</p></li></ul><p>我们发现，CAP 本身就是互斥的，只能三者选两个，对于 CA、AP、CP 都有它们自己的应用场景，要结合实际进行选择。例如，CA 因为不考虑分区容忍度，所以它所有操作需要在同一进程内完成（也就是我们常说的单体应用）；AP 因为放弃数据一致性，适合数据要求不高但强调用户体验的项目，如博客、新闻资讯等；CP 反之放弃了可用性，适合数据要求很高的交易系统，如银行交易、电商的订单交易等，就算是用户长时间等待，也要保障数据的完整可靠。</p><p>以上就是 CAP 原则在实际项目中的运用，对于互联网应用来说，如果为了用户体验完全放弃数据一致性这也是不可取的，毕竟数据才是根本。那怎么解决呢？这又衍生出一个新的理论：BASE 定理。</p><h4 id="base-定理" tabindex="-1">BASE 定理 <a class="header-anchor" href="#base-定理" aria-label="Permalink to &quot;BASE 定理&quot;">​</a></h4><p>BASE 定理是<strong>Basically Available</strong> (基本可用)，<strong>Soft State</strong> （软状态）和<strong>Eventually Consistent</strong>（最终一致性）三个短语的缩写。BASE 是对 CAP 中一致性和可用性权衡后的选择，其来源于对大规模互联网系统分布式实践的结论，是基于 CAP 定理逐步演化而来的，其核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。</p><p>在刚才案例中，订单与库存系统通信故障时，架构师选择AP方案保障了用户的响应速度，此时订单创建但库存并没有减少，这就是不一致的情况。为了解决这种问题，很多项目会写一个任务线程定时检查通信状态，当通信恢复后该任务会通知库存系统完成减库存的处理，使数据保持一致。</p><p>BASE 允许存在软状态，所谓软状态就是在上述案例中订单增加但库存没有减少时的中间状态，后续的补救措施中任务线程对库存进行补偿，此时数据最终做到了的一致，此时的状态就是最终一致性状态。BASE 定理只要求保障数据是最终一致的，因此存在中间的软状态。</p><p>保障最终一致性的措施有很多，如 TCC、任务定时检查、MQ 消息队列缓冲、ETL 做日终校对甚至人工补录都是常用策略。在这些策略中，TCC 是架构师门普遍采用的一致性实现方案，我们先来了解什么是 TCC。</p><h3 id="tcc-一致性方案" tabindex="-1">TCC 一致性方案 <a class="header-anchor" href="#tcc-一致性方案" aria-label="Permalink to &quot;TCC 一致性方案&quot;">​</a></h3><p>TCC 是三个字母<strong>Try</strong> （尝试）、<strong>Confirm</strong> （确认）与<strong>Cancel</strong>（取消）的首字母缩写。TCC 并不是指某一种技术，而是一种数据一致性方案，它将分布式处理过程分为两个阶段：</p><ul><li><p>Try 是第一个阶段，用于尝试并锁定资源；</p></li><li><p>如果资源锁定成功，第二个阶段进行 Confirm 提交完成数据操作；</p></li><li><p>如果资源锁定失败，第二个阶段进行 Cancel 将数据回滚；</p></li></ul><p>估计说完这些你还是很懵，让我们通过下面几个实例进行讲解。</p><p>假设张三购买了 10 瓶可乐总价 30 元，需要订单表增加一笔金额为 30元 的订单，库存表可乐减 10 瓶。如果是 TCC 方案，在订单表需要额外增加预增金额与状态两个字段，库存表额外增加冻结库存字段。因为 Try 阶段用于锁定资源，因此新订单的 30 元是在预增金额中，而不是直接更新订单金额字段，此时订单的状态是&quot;初始&quot;状态。同样的，库存表要冻结 10 瓶可乐，而不是直接将 100 更新为 90。</p>',16),A=s("p",null,"Try 阶段",-1),u=s("p",null,"当两个系统所有资源都锁定完毕，便进入第二阶段执行 Confirm 操作。Confirm 操作用于提交数据，提交数据的过程非常简单，将订单表预增金额移动到订单金额中，订单状态变为完成，商品库存对应减少。",-1),d=s("p",null,"二阶段 Confirm 操作",-1),m=s("p",null,'如果 Try 阶段锁定资源出现异常，比如出现"库存不足"的情况，则进入第二阶段执行 Cancel 操作撤销之前锁定的资源。订单表预增金额重置为 0，订单状态变为取消，而库存表冻结库存也重置为 0。',-1),g=p(`<p>二阶段 Cancel 操作</p><p>以上就是 TCC 在实际项目中的执行过程，你可以发现 TCC 是在数据源做文章，通过控制表上增加额外的锁定资源字段保障数据的一致性。那 TCC 方案中有哪些注意事项呢？</p><p>首先，要把绝大多数的业务逻辑在 Try 阶段完成，在 Try 阶段做尽可能多的事情。因为 TCC 设计之初认为 Confirm 或 Cancel 是一定要成功的，因此不要二阶段包含任何业务代码或者远程通信，只通过最简单的代码释放冻结资源。就像这个案例，Confirm 或 Cancel 只是在表上执行 update 语句来释放冻结资源，这个操作成功率 99.9999%，你可以认为二阶段是可靠的。</p><p>其次，假设 Confirm 或 Cancel 执行时出现错误，那具体的 TCC 框架也会不断重试执行操作来尽量保证执行成功，这个过程中可能会多次执行 update 语句，因此要注意代码的幂等性。</p><p>TIPS：幂等性是指1次操作与多次操作的结果是一致的，例如下面的例子。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 不具备幂等性的SQL，因为在重试过程中每执行1次，num就自增</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#F97583;">update</span><span style="color:#E1E4E8;"> tab </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;"># 具备幂等性的SQL，无论重试多少次更新结果num都是1760</span></span>
<span class="line"><span style="color:#F97583;">update</span><span style="color:#E1E4E8;"> tab </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1760</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 不具备幂等性的SQL，因为在重试过程中每执行1次，num就自增</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#D73A49;">update</span><span style="color:#24292E;"> tab </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;"># 具备幂等性的SQL，无论重试多少次更新结果num都是1760</span></span>
<span class="line"><span style="color:#D73A49;">update</span><span style="color:#24292E;"> tab </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1760</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span></code></pre></div><p>最后，极小概率下，Confim 或 Cancel 在多次重试后宣告失败，便会出现数据最终不一致的情况，这就需要自己开发额外的数据完整性校验程序补救或者通过人工进行补录。</p><p>说到这，想必你对 TCC 方案有了直观认识，但 TCC 方案终究是一种理论设计，需要厂商实现相应的框架给予支撑。在 Java 开源领域著名的 TCC 框架有：ByteTCC、Hmily、Tcc-transaction 与 Seata。没错，前面我们学过的分布式事务中间件 Seata 也支持 TCC 模式，下面我们来介绍 Seata 的 TCC 模式。</p><h3 id="seata-的-tcc-模式" tabindex="-1">Seata 的 TCC 模式 <a class="header-anchor" href="#seata-的-tcc-模式" aria-label="Permalink to &quot;Seata 的 TCC 模式&quot;">​</a></h3><h4 id="seata-tcc-的执行过程" tabindex="-1">Seata TCC 的执行过程 <a class="header-anchor" href="#seata-tcc-的执行过程" aria-label="Permalink to &quot;Seata TCC 的执行过程&quot;">​</a></h4><p>对于 Seata 的 TCC 模式，与之前我们学过的 AT 模式高度相似。你可以理解为 TCC 是 AT 模式的&quot;手动版&quot;，所有提交与回滚时的操作都要自己书写代码进行处理，而不能像 AT 那样自动执行反向 SQL 完成提交与回滚。</p>`,11),B=p(`<p>Seata TCC 模式执行流程</p><p>下面我们将执行步骤和伪代码结合在一起讲解 Seata TCC 模式的执行。</p><ul><li>第一步，TM 端商城应用执行 MallService.sale 方法，该方法用于实现完整的业务逻辑，同时定义了全局事务的边界。在 sale 方法上注意增加 @GlobalTransactional 注解，写上后在进入 sale 方法前会自动通知 TC 开启全局事务。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MallService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> OrderAction orderAction;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> StorageAction storageAction;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GlobalTransactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sale</span><span style="color:#E1E4E8;">(){ </span><span style="color:#6A737D;">//商城业务中销售商品方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderAction.</span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       storageAction.</span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;可乐&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MallService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OrderAction orderAction;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> StorageAction storageAction;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GlobalTransactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sale</span><span style="color:#24292E;">(){ </span><span style="color:#6A737D;">//商城业务中销售商品方法</span></span>
<span class="line"><span style="color:#24292E;">        orderAction.</span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       storageAction.</span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;可乐&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>第二步，sale 方法第一句调用了 OrderAction 的 prepare 方法。Action 是 Seata TCC 模式下的特有类，在 TM 端的 OrderAction 只是一个接口，定义了 TCC 中 Try、Commit、Cancel 对应的方法。在本例中定义的 prepare 方法就对应 TCC 的 Try 阶段用于锁定资源。我们需要在 prepare 方法外增加 @TwoPhaseBusinessAction 注解，声明 prepare 方法执行成功或失败后由哪个方法进行后续的提交或回滚，这个注解有三个参数：</li></ul><ol><li><p>name 代表分支事务的注册名称；</p></li><li><p>commitMethod 代表二阶段 TC 发来提交消息时执行哪个方法；</p></li><li><p>rollbackMethod 代表二阶段 TC 发来回滚消息时执行哪个方法。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderAction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TwoPhaseBusinessAction</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;TccOrderAction&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">commitMethod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;commit&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#79B8FF;">rollbackMethod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rollback&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//prepare对应TCC阶段一，用于锁定资源。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">actionContext</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                           @</span><span style="color:#F97583;">BusinessActionContextParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">paramName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;customer&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">customer</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                           @</span><span style="color:#F97583;">BusinessActionContextParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">paramName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;amount&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amount</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//提交方法定义</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">actionContext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//回滚方法定义</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">actionContext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderAction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TwoPhaseBusinessAction</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;TccOrderAction&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">commitMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;commit&quot;</span><span style="color:#24292E;"> , </span><span style="color:#005CC5;">rollbackMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rollback&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//prepare对应TCC阶段一，用于锁定资源。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">actionContext</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                           @</span><span style="color:#D73A49;">BusinessActionContextParameter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">paramName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;customer&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">customer</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                           @</span><span style="color:#D73A49;">BusinessActionContextParameter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">paramName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;amount&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amount</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//提交方法定义</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">actionContext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//回滚方法定义</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">actionContext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>OrderAction 具体的实现类则要在 RM 端订单服务中进行开发，下面是 OrderActionImpl 实现类的伪代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderActionImpl&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderActionImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderAction</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">propagation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Propagation.REQUIRES_NEW) </span><span style="color:#6A737D;">//本地事务控制</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">actionContext</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">customer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amount</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setCustomer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//客户</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setAmount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0f</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//订单金额</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setFrozenAmount</span><span style="color:#E1E4E8;">(amount); </span><span style="color:#6A737D;">//prepare用于锁定资源，因此金额应写入&quot;预增金额&quot;字段。</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//0代表初始状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(order);</span><span style="color:#6A737D;">//在RM端新建Order记录</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//true代表执行成功</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">propagation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">actionContext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//幂等性检查</span></span>
<span class="line"><span style="color:#E1E4E8;">        String orderCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String)actionContext.</span><span style="color:#B392F0;">getActionContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderCode&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order condition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        condition.</span><span style="color:#B392F0;">setOrderCode</span><span style="color:#E1E4E8;">(orderCode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Example&lt;</span><span style="color:#F97583;">Order</span><span style="color:#E1E4E8;">&gt; sample </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Example.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(condition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderRepository.</span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(sample).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(order.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){ </span><span style="color:#6A737D;">//订单状态不为0，代表这笔订单已被处理过，直接跳过</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//设置金额，释放锁定金额，订单状态改为&quot;完成&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setAmount</span><span style="color:#E1E4E8;">(order.</span><span style="color:#B392F0;">getFrozenAmount</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setFrozenAmount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(order);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">propagation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">actionContext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//幂等性检查</span></span>
<span class="line"><span style="color:#E1E4E8;">        String orderCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String)actionContext.</span><span style="color:#B392F0;">getActionContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderCode&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order condition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        condition.</span><span style="color:#B392F0;">setOrderCode</span><span style="color:#E1E4E8;">(orderCode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Example&lt;</span><span style="color:#F97583;">Order</span><span style="color:#E1E4E8;">&gt; sample </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Example.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(condition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderRepository.</span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(sample).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(order.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){</span><span style="color:#6A737D;">//订单状态不为0，代表这笔订单已被处理过，直接跳过</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//执行失败，订单金额回滚设置为0，订单状态改为&quot;取消&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setAmount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setFrozenAmount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0f</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(order);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderActionImpl&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderActionImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderAction</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">propagation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Propagation.REQUIRES_NEW) </span><span style="color:#6A737D;">//本地事务控制</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">actionContext</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">customer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amount</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setCustomer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//客户</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setAmount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0f</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//订单金额</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setFrozenAmount</span><span style="color:#24292E;">(amount); </span><span style="color:#6A737D;">//prepare用于锁定资源，因此金额应写入&quot;预增金额&quot;字段。</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//0代表初始状态</span></span>
<span class="line"><span style="color:#24292E;">        orderRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(order);</span><span style="color:#6A737D;">//在RM端新建Order记录</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//true代表执行成功</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">propagation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">actionContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//幂等性检查</span></span>
<span class="line"><span style="color:#24292E;">        String orderCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String)actionContext.</span><span style="color:#6F42C1;">getActionContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderCode&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Order condition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        condition.</span><span style="color:#6F42C1;">setOrderCode</span><span style="color:#24292E;">(orderCode);</span></span>
<span class="line"><span style="color:#24292E;">        Example&lt;</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">&gt; sample </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Example.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(condition);</span></span>
<span class="line"><span style="color:#24292E;">        Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderRepository.</span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(sample).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(order.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){ </span><span style="color:#6A737D;">//订单状态不为0，代表这笔订单已被处理过，直接跳过</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//设置金额，释放锁定金额，订单状态改为&quot;完成&quot;</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setAmount</span><span style="color:#24292E;">(order.</span><span style="color:#6F42C1;">getFrozenAmount</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setFrozenAmount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(order);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">propagation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">actionContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//幂等性检查</span></span>
<span class="line"><span style="color:#24292E;">        String orderCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String)actionContext.</span><span style="color:#6F42C1;">getActionContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderCode&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Order condition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        condition.</span><span style="color:#6F42C1;">setOrderCode</span><span style="color:#24292E;">(orderCode);</span></span>
<span class="line"><span style="color:#24292E;">        Example&lt;</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">&gt; sample </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Example.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(condition);</span></span>
<span class="line"><span style="color:#24292E;">        Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderRepository.</span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(sample).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(order.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){</span><span style="color:#6A737D;">//订单状态不为0，代表这笔订单已被处理过，直接跳过</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//执行失败，订单金额回滚设置为0，订单状态改为&quot;取消&quot;</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setAmount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setFrozenAmount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0f</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(order);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为 TM 商城应用与 RM 订单服务之间是远程调用。当 TM 端调用 prepare 方法时，实际是在订单服务中执行，此时订单服务也会通知 TC 开启分支事务。</p><p>第三步，TM 端 sale 方法执行到第二句，调用 StorageAction 的 prepare 方法，与前面一样在 TM 端持有 StorageAction 接口，该接口与 OrderAction 接口基本相同，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StorageAction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TwoPhaseBusinessAction</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;TccStorageAction&quot;</span><span style="color:#E1E4E8;"> ,</span><span style="color:#79B8FF;">commitMethod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;commit&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#79B8FF;">rollbackMethod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rollback&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                           @</span><span style="color:#F97583;">BusinessActionContextParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">paramName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;goodsCode&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">goodsCode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                           @</span><span style="color:#F97583;">BusinessActionContextParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">paramName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;quantity&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">quantity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StorageAction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TwoPhaseBusinessAction</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;TccStorageAction&quot;</span><span style="color:#24292E;"> ,</span><span style="color:#005CC5;">commitMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;commit&quot;</span><span style="color:#24292E;"> , </span><span style="color:#005CC5;">rollbackMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rollback&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                           @</span><span style="color:#D73A49;">BusinessActionContextParameter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">paramName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;goodsCode&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">goodsCode</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                           @</span><span style="color:#D73A49;">BusinessActionContextParameter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">paramName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;quantity&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">quantity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接口的实现类在 RM 端库存服务中，名为 StorageActionImpl。prepare 方法用于锁定库存，commit、rollback 实现提交与回滚。RM 端 StorageActionImpl 伪代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;storageActionImpl&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">propagation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StorageActionImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StorageAction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> StorageRepository storageRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">goodsCode</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">quantity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//实现锁定库存逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        检查库存是否足够，不够直接抛出异常;</span></span>
<span class="line"><span style="color:#E1E4E8;">        更新</span><span style="color:#9ECBFF;">&quot;锁定库存&quot;</span><span style="color:#E1E4E8;">字段，原商品库存不变。</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//实现提交逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        幂等性检查;</span></span>
<span class="line"><span style="color:#E1E4E8;">        更新商品库存</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">原库存</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">锁定库存，锁定库存重置为0; </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(BusinessActionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//实现回滚逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        幂等性检查;</span></span>
<span class="line"><span style="color:#E1E4E8;">        锁定库存重置为0; </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;storageActionImpl&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">propagation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StorageActionImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StorageAction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Logger logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> StorageRepository storageRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">goodsCode</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">quantity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//实现锁定库存逻辑</span></span>
<span class="line"><span style="color:#24292E;">        检查库存是否足够，不够直接抛出异常;</span></span>
<span class="line"><span style="color:#24292E;">        更新</span><span style="color:#032F62;">&quot;锁定库存&quot;</span><span style="color:#24292E;">字段，原商品库存不变。</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//实现提交逻辑</span></span>
<span class="line"><span style="color:#24292E;">        幂等性检查;</span></span>
<span class="line"><span style="color:#24292E;">        更新商品库存</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">原库存</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">锁定库存，锁定库存重置为0; </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//实现回滚逻辑</span></span>
<span class="line"><span style="color:#24292E;">        幂等性检查;</span></span>
<span class="line"><span style="color:#24292E;">        锁定库存重置为0; </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步，TM 端 sale 方法执行完毕，假如所有 Action 的 prepare 方法都正常执行，sale 会自动向 TC 发送&quot;全局事务提交&quot;消息。</p><p>第五步，TC 收到全局事务提交消息后，再下发给每个 RM 进行分支事务提交，这个过程中 OrderActionImpl.commit 方法与 StorageActionImpl.commit 方法都会自动执行完成数据提交。</p><p>相应的，如果 TM 的 sale 方法执行失败，则会全局事务回滚自动执行 OrderActionImpl 与 StorageActionImpl 的 rollback 方法实现回滚操作。</p><p>在执行过程中，如 commit 或者 rollback 执行失败，Seata 会不断重试尽可能保证操作成功，因此要做好幂等性检查。</p><h4 id="seata-at-与-tcc-如何取舍" tabindex="-1">Seata AT 与 TCC 如何取舍 <a class="header-anchor" href="#seata-at-与-tcc-如何取舍" aria-label="Permalink to &quot;Seata AT 与 TCC 如何取舍&quot;">​</a></h4><p>在本讲最后，你可能会想，既然 Seata 已经有了 AT 模式，为何还要引入 TCC 保障事务一致性?在前面我们是在介绍分布式事务时讲解了 Seata AT 模式，但你是否考虑过，在复杂的企业应用中，不可能完全要求底层数据库统一使用 MySQL，甚至都不能保证所有的数据源都支持事务。</p><p>以前我们就遇到过类似的问题，用户上传了文件后结果系统出现异常需要全局回滚，回滚时需要把这个文件删除，此时基于 Seata AT 模式的反向 SQL 就无能为力了。而 TCC 就能良好解决此类问题，因为 TCC 过程中所有的逻辑都是程序员通过代码控制的，能很好地解决这类非事务型数据处理场景。</p><p>那 Seata AT 与 TCC 又该如何取舍呢？这要根据具体的业务场景了，你如果在涉及的所有服务底层都是用 MySQL、Oracle 这样的事务型关系数据库，且业务都是对数据库的直接操作，那使用 AT 模式可以最快地实现分布式数据一致性，但是如果涉及非事务资源的操作，那 AT 模式就无能为力，必须采用 TCC 自己实现准备、提交、回滚的细节，但这也无疑对程序员的能力提出了更高的要求，因此尽量将这些任务安排给团队中技术好的核心工程师来实现。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本讲咱们学习了三方面内容，首先理解了CAP 原则与 BASE 定理，这是所有分布式系统必须考虑的设计准则；其次我们通过订单库存的案例介绍了 TCC 一致性方案的原理，TCC 通过手动锁定资源的方式保障一致性；最后咱们结合流程图与伪代码讲解了 Seata TCC 模式的执行过程，从技术上提供了相应的解决方案，同时也对比了 Seata AT 与 TCC 模式的区别。</p><p>下一讲我们来学习这两年大火的 DevOps（开发运维）与微服务之间千丝万缕的关系。</p>`,25);function D(b,h,T,_,S,q){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/39/E7/Cgp9HWB9O-qAebifAAXtieNHAz8084.png"}),o(),y,i,F,a(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/39/E7/Cgp9HWB9O_WAbY3zAAKaSH-d4yo726.png"}),o(),C,a(n,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/39/E7/Cgp9HWB9PAGAVyjTAAKnzSH8xiI436.png"}),o(),A,u,a(n,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M00/39/F0/CioPOWB9PBeAY0amAALwskGowW0522.png"}),o(),d,m,a(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M00/39/F0/CioPOWB9PCGAEXbZAAL9ujnrnC0066.png"}),o(),g,a(n,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M00/39/F0/CioPOWB9PCuAR_vQAAL51gK-oj0587.png"}),o(),B])}const P=l(r,[["render",D]]);export{x as __pageData,P as default};
