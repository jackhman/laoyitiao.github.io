import{_ as o,j as p,o as e,g as t,k as a,s,h as c,Q as l}from"./chunks/framework.b3d8e22e.js";const D=JSON.parse('{"title":"JConsole 介绍 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3156) 第26讲：JConole 与四字母命令：如何监控服务器上 ZooKeeper 的运行状态？.md","filePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3156) 第26讲：JConole 与四字母命令：如何监控服务器上 ZooKeeper 的运行状态？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/ZooKeeper源码分析与实战_文档/(3156) 第26讲：JConole 与四字母命令：如何监控服务器上 ZooKeeper 的运行状态？.md"},y=s("p",null,"在上节课中我们学习了在生产环境中，如何部署 ZooKeeper 集群服务。为了我们的程序服务能够持续稳定地对外提供服务，除了在部署的时候尽量采用分布式、集群服务等方式提高 ZooKeeper 服务的可靠性外，在服务上线运行的时候，我们还可以通过对 ZooKeeper 服务的运行状态进行监控，如运行 ZooKeeper 服务的生产服务器的 CPU 、内存、磁盘等使用情况来达到目的。在系统性能达到瓶颈的时候，可以增加服务器资源，以保证服务的稳定性。",-1),E=s("h3",{id:"jconsole-介绍",tabindex:"-1"},[c("JConsole 介绍 "),s("a",{class:"header-anchor",href:"#jconsole-介绍","aria-label":'Permalink to "JConsole 介绍"'},"​")],-1),i=s("p",null,"通常使用 Java 语言进行开发的技术人员对 JConsole 并不陌生。JConsole 是 JDK 自带的工具，用来监控程序运行的状态信息。如下图所示，我们打开系统的控制终端，输入 JConsole 就会弹出一个这样的监控界面。",-1),F=l(`<h3 id="jconsole-使用" tabindex="-1">JConsole 使用 <a class="header-anchor" href="#jconsole-使用" aria-label="Permalink to &quot;JConsole 使用&quot;">​</a></h3><p>介绍完 JConsole 的基本信息后，接下来我们来了解如何利用 JConsole 对远程 ZooKeeper 集群服务进行监控。之所以能够通过 JConsole 连接 ZooKeeper 服务进行监控，是因为 ZooKeeper 支持 JMX（Java Management Extensions），即 Java 管理扩展，它是一个为应用程序、设备、系统等植入管理功能的框架。</p><p>JMX 可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活地开发无缝集成的系统、网络和服务管理应用。我们可以通过 JMX 来访问和管理 ZooKeeper 服务集群。接下来我们就来介绍一下监控 ZooKeeper 集群服务的相关配置操作。</p><p>在 JConsole 配置信息中，连接我们要进行监控的 ZooKeeper 集群服务器。如下面的流程所示，在配置文件中输入 ZooKeeper 服务器的地址端口等相关信息。</p><h4 id="开启-jmx" tabindex="-1">开启 JMX <a class="header-anchor" href="#开启-jmx" aria-label="Permalink to &quot;开启 JMX&quot;">​</a></h4><p>首先，我们先开启 ZooKeeper 的 JMX 功能。在 ZooKeeper 安装目录下找到 bin 文件夹，在 bin 文件夹中 ，通过 vim 命令来编辑 zkServer.sh 文件。如下代码所示，输入 JMX 服务的端口号并禁止身份认证等配置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">50000</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.ssl</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.authenticate</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">50000</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.ssl</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.authenticate</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span></code></pre></div><h4 id="连接-zookeeper" tabindex="-1">连接 ZooKeeper <a class="header-anchor" href="#连接-zookeeper" aria-label="Permalink to &quot;连接 ZooKeeper&quot;">​</a></h4><p>配置完 JMX 的开启功能后，接下来我们通过系统终端启动 JConsole ，再在弹出的对话框中选择远程连接，然后在远程连接的地址中输入要监控的 ZooKeeper 服务器地址，之后就可以通过 JConsole 监控 ZooKeeper 服务器了。</p>`,9),d=l(`<h3 id="四字母命令" tabindex="-1">四字母命令 <a class="header-anchor" href="#四字母命令" aria-label="Permalink to &quot;四字母命令&quot;">​</a></h3><p>除了上面介绍的 JConsole 监控控制台之外，ZooKeeper 还提供了一些命令，可使我们更加灵活地统计监控 ZooKeeper 服务的状态信息。 ZooKeeper 提供的这些命令也叫作四字母命令，如它们的名字一样，每一个命令都是由四个字母组成的。如下代码所示，在操作时，我们会打开系统的控制台，并输入相关的命令来查询 ZooKeeper 服务，比如我们可以输入 stat 命令来查看数据节点等信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">echo {command} </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> nc </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2181</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">echo {command} </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> nc </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2181</span></span></code></pre></div><p>介绍完四字母命令的调用方式和执行格式后，接下来我们介绍几种常见的四字母命令，分别是 stat 、srvr，以及 cons 等。</p><h4 id="stat" tabindex="-1">stat <a class="header-anchor" href="#stat" aria-label="Permalink to &quot;stat&quot;">​</a></h4><p>stat 命令的作用是监控 ZooKeeper 服务器的状态，我们通过 stat 命令统计 ZooKeeper 服务器的 ZooKeeper 版本信息、集群数节点等信息，如下面的代码所示，我们在操作时会输入 echo stat 命令来输出查询到的服务状态信息到控制台。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ echo stat </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> nc localhost </span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Zookeeper version</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">13</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> built on </span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">29</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2018</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">04</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">05</span><span style="color:#E1E4E8;"> GMT </span></span>
<span class="line"><span style="color:#E1E4E8;">Clients</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">40598</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">](queued</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,recved</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,sent</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">Latency min</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">avg</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">max</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Received</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Sent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Connections</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Outstanding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Zxid</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> follower </span></span>
<span class="line"><span style="color:#E1E4E8;">Node count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ echo stat </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> nc localhost </span><span style="color:#005CC5;">2181</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Zookeeper version</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">13</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> built on </span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">29</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2018</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">04</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">05</span><span style="color:#24292E;"> GMT </span></span>
<span class="line"><span style="color:#24292E;">Clients</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">40598</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">](queued</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,recved</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,sent</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">Latency min</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">avg</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">max</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Received</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Sent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Connections</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Outstanding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Zxid</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> follower </span></span>
<span class="line"><span style="color:#24292E;">Node count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span></code></pre></div><h4 id="srvr" tabindex="-1">srvr <a class="header-anchor" href="#srvr" aria-label="Permalink to &quot;srvr&quot;">​</a></h4><p>srvr 命令与 stat 命令的功能十分相似，唯一不同的地方是 srvr 命令不会将与客户端的连接情况输出，通过 srvr 命令只会查询服务器的自身信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ echo srvr </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> nc localhost </span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Zookeeper version</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">13</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> built on </span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">29</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2018</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">04</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">05</span><span style="color:#E1E4E8;"> GMT </span></span>
<span class="line"><span style="color:#E1E4E8;">Latency min</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">avg</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">max</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Received</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Sent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Connections</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Outstanding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Zxid</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> follower </span></span>
<span class="line"><span style="color:#E1E4E8;">Node count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ echo srvr </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> nc localhost </span><span style="color:#005CC5;">2181</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Zookeeper version</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">13</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> built on </span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">29</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2018</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">04</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">05</span><span style="color:#24292E;"> GMT </span></span>
<span class="line"><span style="color:#24292E;">Latency min</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">avg</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">max</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Received</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Sent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Connections</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Outstanding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Zxid</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> follower </span></span>
<span class="line"><span style="color:#24292E;">Node count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span></code></pre></div><h4 id="cons" tabindex="-1">cons <a class="header-anchor" href="#cons" aria-label="Permalink to &quot;cons&quot;">​</a></h4><p>cons 命令用于输出当前这台服务器上所有客户端连接的详细信息，包括每个客户端的客户端 IP 、会话 ID 和最后一次与服务器交互的操作类型等。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ echo cons </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> nc localhost </span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">31569</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">](queued</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,recved</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,sent</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ echo cons </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> nc localhost </span><span style="color:#005CC5;">2181</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">31569</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">](queued</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,recved</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,sent</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="ruok" tabindex="-1">ruok <a class="header-anchor" href="#ruok" aria-label="Permalink to &quot;ruok&quot;">​</a></h4><p>ruok 命令的主要作用是查询 ZooKeeper 服务器是否正常运行。如果 ZooKeeper 服务器正常运行，执行完 ruok 命令后，会得到 &quot;imok&quot; 返回值。如果 ZooKeeper 服务没有正常运行，则不会有任何返回值。在使用 ruok 命令的时候，在这里我们要注意的一点是，有些时候即使返回了 &quot;imok&quot; 字段，ZooKeeper 服务也可能没有正常运行，唯一能确定的是该台服务器的 2181 端口是打开的，如下代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ echo ruok </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> nc localhost </span><span style="color:#79B8FF;">2181</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ echo ruok </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> nc localhost </span><span style="color:#005CC5;">2181</span></span></code></pre></div><h3 id="监控集群信息" tabindex="-1">监控集群信息 <a class="header-anchor" href="#监控集群信息" aria-label="Permalink to &quot;监控集群信息&quot;">​</a></h3><p>介绍完系统监控工具 JConsole 以及常用的命令后，接下来我们就从实际的生产角度出发，来看一下在 ZooKeeper 集群生产环境中如何监控系统集群运行情况，以及如何利用我们监控的数据诊断 ZooKeeper 服务的运行问题并解决问题。</p><p>虽然 ZooKeeper 服务提供了丰富的四字母命令，让我们可以通过命令来获得 ZooKeeper 服务相关的运行信息，但是在实际的生产环境中， ZooKeeper 集群的规模可能很大，逐一通过命令的方式监控 ZooKeeper 服务显然不可行。因此，这里我们会介绍一种自动的监控 ZooKeeper 集群运行服务的方式。</p><p>为了编写自动化监控 ZooKeeper 集群服务，首先我们要明确需要监控哪些数据类型，在这里我们主要对最小会话超时、最大会话超时、最大连接数、发送的数据包、接收的数据包进行监控，而具体的我们则会通过 Zabbix 来实现。</p><h4 id="zabbix" tabindex="-1">Zabbix <a class="header-anchor" href="#zabbix" aria-label="Permalink to &quot;Zabbix&quot;">​</a></h4><p>Zabbix 是一个性能监控的管理工具，它基于 Web 界面提供分布式系统监视，以及网络监视功能的企业级开源解决方案。</p><h4 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h4><p>我们可以通过 Maven 或 Gradle 项目管理工具下载 Zabbix，这里我们主要以 Maven 工程为例，如下代码所示，需要在 pom 文件中引入相关的配置信息。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">io.github.cgi</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">zabbix</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">api</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">io.github.cgi</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">zabbix</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">api</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h4 id="配置项" tabindex="-1">配置项 <a class="header-anchor" href="#配置项" aria-label="Permalink to &quot;配置项&quot;">​</a></h4><p>将 Zabbix 引入到我们的工程项目后，接下来，就可以编写一个程序来自动化地获取 ZooKeeper 服务的相关信息。这里我们创建一个 ZooKeeperInfo 脚本，如下代码所示，在脚本文件中我们创建了一个 mntr 数组变量用来设置我们想要监控的服务参数，比如 minSessionTimeout 最小超时时间、maxSessionTimeout 最大超时时间等。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">public class ZooKeepInfo(){</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">Static Final String ZookeeperServer = &#39;127.0.0.1&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">Static Final String ZookeeperPort = 2181</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">Static Final String ZookeeperCommand = &#39;mntr&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">Static Final String ZookeeperKey = &#39;zk_version</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">CommandKey={</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&#39;conf&#39;:[&#39;clientPort&#39;,&#39;dataDir&#39;,&#39;dataLogDir&#39;,&#39;tickTime&#39;,&#39;maxClientCnxns&#39;,&#39;minSessionTimeout&#39;,&#39;maxSessionTimeout&#39;,&#39;serverId&#39;,&#39;initLimit&#39;,&#39;syncLimit&#39;,&#39;electionAlg&#39;,&#39;electionPort&#39;,&#39;quorumPort&#39;,&#39;peerType&#39;],</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&#39;ruok&#39;:[&#39;state&#39;],</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&#39;mntr&#39;:[&#39;zk_version&#39;,&#39;zk_avg_latency&#39;,&#39;zk_max_latency&#39;,&#39;zk_min_latency&#39;,&#39;zk_packets_received&#39;,&#39;zk_packets_sent&#39;,&#39;zk_num_alive_connections&#39;,&#39;zk_outstanding_requests&#39;,&#39;zk_server_state&#39;,&#39;zk_znode_count&#39;,&#39;zk_watch_count&#39;,&#39;zk_ephemerals_count&#39;,&#39;zk_approximate_data_size&#39;,&#39;zk_open_file_descriptor_count&#39;,&#39;zk_max_file_descriptor_count&#39;,&#39;zk_followers&#39;,&#39;zk_synced_followers&#39;,&#39;zk_pending_syncs&#39;]</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#85E89D;">class ZooKeeperCommands(object)</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#85E89D;">def ZooKeeperCommands(self,server,port,zkCommand,zkKey)</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">self._server = server</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">self._port = port</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">self._zkCommand = zkCommand</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">self._zkKey = zkKey</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">self._value_raw = None</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">self._value = None</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#85E89D;">void zkExec(this)</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">self._exec_command()</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">self._parse_value()</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">return self._value</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#85E89D;">void _exec_command(this)</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">Telnet tn = Telnet(self._server, self._port, timeout=30)</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#85E89D;">tn.read_until(&#39;login</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;) </span></span>
<span class="line"><span style="color:#9ECBFF;">	        tn.write(username + &#39;\\n&#39;)</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#85E89D;">tn.read_until(&#39;password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;) </span></span>
<span class="line"><span style="color:#9ECBFF;">	        tn.write(password + &#39;\\n&#39;)</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#9ECBFF;">tn.read_until(finish)</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">public class ZooKeepInfo(){</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">Static Final String ZookeeperServer = &#39;127.0.0.1&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">Static Final String ZookeeperPort = 2181</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">Static Final String ZookeeperCommand = &#39;mntr&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">Static Final String ZookeeperKey = &#39;zk_version</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">CommandKey={</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&#39;conf&#39;:[&#39;clientPort&#39;,&#39;dataDir&#39;,&#39;dataLogDir&#39;,&#39;tickTime&#39;,&#39;maxClientCnxns&#39;,&#39;minSessionTimeout&#39;,&#39;maxSessionTimeout&#39;,&#39;serverId&#39;,&#39;initLimit&#39;,&#39;syncLimit&#39;,&#39;electionAlg&#39;,&#39;electionPort&#39;,&#39;quorumPort&#39;,&#39;peerType&#39;],</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&#39;ruok&#39;:[&#39;state&#39;],</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&#39;mntr&#39;:[&#39;zk_version&#39;,&#39;zk_avg_latency&#39;,&#39;zk_max_latency&#39;,&#39;zk_min_latency&#39;,&#39;zk_packets_received&#39;,&#39;zk_packets_sent&#39;,&#39;zk_num_alive_connections&#39;,&#39;zk_outstanding_requests&#39;,&#39;zk_server_state&#39;,&#39;zk_znode_count&#39;,&#39;zk_watch_count&#39;,&#39;zk_ephemerals_count&#39;,&#39;zk_approximate_data_size&#39;,&#39;zk_open_file_descriptor_count&#39;,&#39;zk_max_file_descriptor_count&#39;,&#39;zk_followers&#39;,&#39;zk_synced_followers&#39;,&#39;zk_pending_syncs&#39;]</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#22863A;">class ZooKeeperCommands(object)</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#22863A;">def ZooKeeperCommands(self,server,port,zkCommand,zkKey)</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">self._server = server</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">self._port = port</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">self._zkCommand = zkCommand</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">self._zkKey = zkKey</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">self._value_raw = None</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">self._value = None</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#22863A;">void zkExec(this)</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">self._exec_command()</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">self._parse_value()</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">return self._value</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	     </span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#22863A;">void _exec_command(this)</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">Telnet tn = Telnet(self._server, self._port, timeout=30)</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#22863A;">tn.read_until(&#39;login</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;) </span></span>
<span class="line"><span style="color:#032F62;">	        tn.write(username + &#39;\\n&#39;)</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#22863A;">tn.read_until(&#39;password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;) </span></span>
<span class="line"><span style="color:#032F62;">	        tn.write(password + &#39;\\n&#39;)</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#032F62;">tn.read_until(finish)</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="结束" tabindex="-1">结束 <a class="header-anchor" href="#结束" aria-label="Permalink to &quot;结束&quot;">​</a></h3><p>本节课我们主要学习了 ZooKeeper 集群在日常生产环境中的维护问题。首先介绍了 ZooKeeper 集群通过 JMX 方式进行远程监控的方法，然后学习了 JConsole 以及四字母命令的使用方式，最后介绍了在实际工作中，面对大规模的 ZooKeeper 集群时，我们如何做到自动化的获取监控数据。</p><p>本节课在实现自动化的数据获取时，利用了一个开源的性能监控工具 Zabbix 。除了课中提到的一些性能监控参数外，我们也可以利用 Zabbix 监控一些和自身业务相关的数据信息，比如在对数据节点的创建数量有严格要求的情况下，我们可以编写相关的脚本对某一个数据节点下子节点的创建个数进行监控，当该子节点个数大于我们设置的某一个临界值时，会给出报警或禁止该节点再进行创建操作。</p>`,31);function C(_,h,m,u,k,v){const n=p("Image");return e(),t("div",null,[y,E,i,a(n,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/3B/72/CgqCHl8kAy2ANt38AADolBOTa2s256.png"}),F,a(n,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/3B/67/Ciqc1F8kA0CAF9c9AACQw_N29Fg373.png"}),d])}const A=o(r,[["render",C]]);export{D as __pageData,A as default};
