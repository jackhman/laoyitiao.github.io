import{_ as p,j as o,o as e,g as t,k as l,h as n,s,Q as c}from"./chunks/framework.a0d18f64.js";const U=JSON.parse('{"title":"14红点组件：如何将红点设计做成Flutter组件","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3531) 14  红点组件：如何将红点设计做成 Flutter 组件.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3531) 14  红点组件：如何将红点设计做成 Flutter 组件.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3531) 14  红点组件：如何将红点设计做成 Flutter 组件.md"},E=s("h1",{id:"_14红点组件-如何将红点设计做成flutter组件",tabindex:"-1"},[n("14红点组件：如何将红点设计做成Flutter组件 "),s("a",{class:"header-anchor",href:"#_14红点组件-如何将红点设计做成flutter组件","aria-label":'Permalink to "14红点组件：如何将红点设计做成Flutter组件"'},"​")],-1),y=s("p",null,"上一课时我们完善了首页推荐功能，本课时将完善个人页面。个人页面涉及红点组件的知识点，因此本课时在完善个人页面的同时，会着重介绍下该功能的实现。",-1),i=s("h3",{id:"实现效果",tabindex:"-1"},[n("实现效果 "),s("a",{class:"header-anchor",href:"#实现效果","aria-label":'Permalink to "实现效果"'},"​")],-1),d=s("p",null,"我们先来看下本课时要完成的一个界面效果，如图 1 动画所示。",-1),F=s("p",null,"图 1 本课时目标效果",-1),g=s("p",null,"首先在最底部导航栏增加了消息未读数提示，当有新的未读消息时候，会有红点提示。个人界面展示了个人信息以及个人相关的操作栏（我的好友、我的消息和系统设置）。",-1),C=s("p",null,"接下来我们来看下实现该效果需要做哪些前期准备工作。",-1),u=s("h3",{id:"前期准备",tabindex:"-1"},[n("前期准备 "),s("a",{class:"header-anchor",href:"#前期准备","aria-label":'Permalink to "前期准备"'},"​")],-1),h=s("p",null,"基于图 1 的效果，我们首先要实现个人页面。个人页面是一个新页面，对于新页面我们按照第 7 课时的知识去设计页面。由于新增了红点功能，首先在 App 启动时 ，需要一个新的接口拉取服务器未读消息数，然后新增 API 来拉取该数据。其次这个数据状态，需要在多个组件中共享，因此要新增 Model 来管理该状态 。",-1),m=s("h4",{id:"组件设计",tabindex:"-1"},[n("组件设计 "),s("a",{class:"header-anchor",href:"#组件设计","aria-label":'Permalink to "组件设计"'},"​")],-1),A=s("p",null,"根据图 2 的界面效果，我们将页面拆分图 3 组件树。",-1),B=s("p",null,"图 2 个人页面效果",-1),D=c(`<p>图 3 个人页面组件树设计</p><p>图 3 组件树中， 左侧为最上面的头像和昵称，右侧为功能列表 。由于是一个有限的列表，因此可以使用 ListView 来封装组件。具体代码编写部分和之前所介绍的没有太大区别，详细代码可<a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">前往 github 参考</a>。</p><p>个人页面开发完成后，我们再来看下红点功能所涉及的 API 和 Model 功能部分。由于用户信息和红点未读消息，都需要状态共享，因此需要创建两个 Model 类 。 这两个 Model 类的代码逻辑基本一致，下面只介绍与红点未读消息有关的部分。</p><h4 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h4><p>在 App 启动时就需要拉取未读消息数，因此需要一个接口来获取未读消息内容 。在 api/user_info 目录下创建 message.dart 来管理消息接口 ，实现该 ApiUserInfoMessage 类，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 获取用户消息相关 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ApiUserInfoMessage</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 获取自己的个人信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUnReadMessageNum</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 获取用户消息相关 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ApiUserInfoMessage</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 获取自己的个人信息 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUnReadMessageNum</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面就是这个 API 的功能，里面包含一个 getUnReadMessageNum 方法，这里模拟返回一个假数据 18 个未读消息。</p><h4 id="model" tabindex="-1">Model <a class="header-anchor" href="#model" aria-label="Permalink to &quot;Model&quot;">​</a></h4><p>由于未读消息会被应用在底部导航栏和个人页面两个组件页面，因此需要使用 Provider 来做状态管理，在 model 下创建 new_message_model.dart ，并实现下面代码：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// name状态管理模块 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NewMessageModel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ChangeNotifier</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 系统未读新消息数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> newMessageNum; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">NewMessageModel</span><span style="color:#E1E4E8;">({</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.newMessageNum}); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 获取未读消息 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> newMessageNum; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 设置已经阅读消息 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readNewMessage</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newMessageNum </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    newMessageNum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">notifyListeners</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// name状态管理模块 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NewMessageModel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ChangeNotifier</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 系统未读新消息数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> newMessageNum; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">NewMessageModel</span><span style="color:#24292E;">({</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.newMessageNum}); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 获取未读消息 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> newMessageNum; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 设置已经阅读消息 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readNewMessage</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newMessageNum </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    newMessageNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">notifyListeners</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第 6 行是声明一个未读消息字段，保存未读消息数量。第 9 行是构造函数，第 12 行是设置一个 get 方法，第 14 行是设置已读状态，也可以在此调用服务端，将服务端未读状态清零，同时将本地的未读消息数清零。在写 Model 代码要特别注意，比如上面的第 16 行，目的就是避免没必要的 rebuild，当已经没有未读消息，则不需要处理任何行为。</p><p>在完成 API 和 Model 部分代码后，接下来修改入口文件 main.dart，在该入口文件中要多增加一个状态管理模块。</p><h4 id="main-dart" tabindex="-1">Main.dart <a class="header-anchor" href="#main-dart" aria-label="Permalink to &quot;Main.dart&quot;">​</a></h4><p>由于需求的改变，现在需要多个共享状态类，课时之前只有一个状态 like_num_model，现在需要新增一个 new_message_model 状态，这里就需要使用到 MultiProvider，避免嵌套多层。需要将 main.dart build 方法修改为下面逻辑：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getProviders</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    context, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">MaterialApp</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">        title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Two You&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// APP 名字 </span></span>
<span class="line"><span style="color:#E1E4E8;">        debugShowCheckedModeBanner</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        theme</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ThemeData</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          primarySwatch</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.blue, </span><span style="color:#6A737D;">// APP 主题 </span></span>
<span class="line"><span style="color:#E1E4E8;">        ), </span></span>
<span class="line"><span style="color:#E1E4E8;">        routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Router</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">registerRouter</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">        home</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Entrance</span><span style="color:#E1E4E8;">()), </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getProviders</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    context, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">MaterialApp</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">        title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Two You&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// APP 名字 </span></span>
<span class="line"><span style="color:#24292E;">        debugShowCheckedModeBanner</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        theme</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ThemeData</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          primarySwatch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.blue, </span><span style="color:#6A737D;">// APP 主题 </span></span>
<span class="line"><span style="color:#24292E;">        ), </span></span>
<span class="line"><span style="color:#24292E;">        routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Router</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">registerRouter</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">        home</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Entrance</span><span style="color:#24292E;">()), </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了保持代码的整洁，新增了一个 _getProviders 方法，然后将状态管理相关的逻辑放入 _getProviders 中，其他组件相关的逻辑还是在 build 中，具体在看下 _getProviders 中的代码逻辑：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 部分数据需要获取初始值 </span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getProviders</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> child) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;"> myUserInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ApiUserInfoIndex</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getSelfUserInfo</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(myUserInfo </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonError</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> unReadMessageNum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ApiUserInfoMessage</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getUnReadMessageNum</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MultiProvider</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    providers</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [ </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">ChangeNotifierProvider</span><span style="color:#E1E4E8;">(create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LikeNumModel</span><span style="color:#E1E4E8;">()), </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">ChangeNotifierProvider</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UserInfoModel</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">            myUserInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> myUserInfo </span></span>
<span class="line"><span style="color:#E1E4E8;">          ) </span></span>
<span class="line"><span style="color:#E1E4E8;">      ), </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">ChangeNotifierProvider</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NewMessageModel</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">              newMessageNum</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> unReadMessageNum </span></span>
<span class="line"><span style="color:#E1E4E8;">          ) </span></span>
<span class="line"><span style="color:#E1E4E8;">      ), </span></span>
<span class="line"><span style="color:#E1E4E8;">    ], </span></span>
<span class="line"><span style="color:#E1E4E8;">    child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> child, </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 部分数据需要获取初始值 </span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getProviders</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> child) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;"> myUserInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ApiUserInfoIndex</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getSelfUserInfo</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(myUserInfo </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonError</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> unReadMessageNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ApiUserInfoMessage</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getUnReadMessageNum</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MultiProvider</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    providers</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [ </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">ChangeNotifierProvider</span><span style="color:#24292E;">(create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LikeNumModel</span><span style="color:#24292E;">()), </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">ChangeNotifierProvider</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UserInfoModel</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">            myUserInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> myUserInfo </span></span>
<span class="line"><span style="color:#24292E;">          ) </span></span>
<span class="line"><span style="color:#24292E;">      ), </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">ChangeNotifierProvider</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NewMessageModel</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">              newMessageNum</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> unReadMessageNum </span></span>
<span class="line"><span style="color:#24292E;">          ) </span></span>
<span class="line"><span style="color:#24292E;">      ), </span></span>
<span class="line"><span style="color:#24292E;">    ], </span></span>
<span class="line"><span style="color:#24292E;">    child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> child, </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码第 3 到 7 行是从服务端调用未读消息接口，并获得用户信息和用户未读消息数 。第 9 行使用 MultiProvider 来封装所有需要状态管理的代码，其中每一个状态管理的格式按照下面的方式：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ChangeNotifierProvider</span><span style="color:#E1E4E8;">(create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LikeNumModel</span><span style="color:#E1E4E8;">()),</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ChangeNotifierProvider</span><span style="color:#24292E;">(create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LikeNumModel</span><span style="color:#24292E;">()),</span></span></code></pre></div><p>LikeNumModel 为 Model 类，可以为类增加初始赋值，比如上面的 UserInfoModel 和 NewMessageModel。</p><p>通过以上方法，我们就将用户信息和未读消息两个状态进行了组件共享，接下来我们看下如何设计红点组件。</p><h3 id="红点组件" tabindex="-1">红点组件 <a class="header-anchor" href="#红点组件" aria-label="Permalink to &quot;红点组件&quot;">​</a></h3><p>在 App 中红点和消息提醒是非常常见的应用，因此需要将该功能，设计为一个基础通用组件。在 Flutter 中是提供了一个比较通用的库 <a href="https://pub.dev/packages/badges" target="_blank" rel="noreferrer">badges</a>。如果你觉得不太适用也可以自己来封装，本课时主要是基于这个组件库实现一个二次封装应用，先来具体看下二次封装的红点组件实现部分。</p><h4 id="组件实现" tabindex="-1">组件实现 <a class="header-anchor" href="#组件实现" aria-label="Permalink to &quot;组件实现&quot;">​</a></h4><p>根据自身的业务，我们可以设计为两种， 一个是只显示红点，另一个是显示具体未读消息数的，先看下只显示红点的部分。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:badges/badges.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// 通用红点逻辑 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonRedMessage</span><span style="color:#E1E4E8;">  { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 只展示红点，不展示具体消息数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">showRedWidget</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> needRedWidget, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> newMessageNum) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newMessageNum </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 小于 1 的消息则无须设置 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> needRedWidget; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getBadge</span><span style="color:#E1E4E8;">(needRedWidget, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 获取 badge 组件 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getBadge</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> needRedWidget, </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> msgTips) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Badge</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      alignment</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Alignment</span><span style="color:#E1E4E8;">.bottomLeft, </span></span>
<span class="line"><span style="color:#E1E4E8;">      position</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">BadgePosition</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">topRight</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">      toAnimate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      badgeContent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;$</span><span style="color:#79B8FF;">msgTips</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        style</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TextStyle</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.white, </span></span>
<span class="line"><span style="color:#E1E4E8;">          fontSize</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          letterSpacing</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          wordSpacing</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        ), </span></span>
<span class="line"><span style="color:#E1E4E8;">      ), </span></span>
<span class="line"><span style="color:#E1E4E8;">      child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> needRedWidget, </span></span>
<span class="line"><span style="color:#E1E4E8;">    ); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:badges/badges.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// 通用红点逻辑 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonRedMessage</span><span style="color:#24292E;">  { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 只展示红点，不展示具体消息数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showRedWidget</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> needRedWidget, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> newMessageNum) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newMessageNum </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 小于 1 的消息则无须设置 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> needRedWidget; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getBadge</span><span style="color:#24292E;">(needRedWidget, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 获取 badge 组件 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getBadge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> needRedWidget, </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> msgTips) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Badge</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      alignment</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Alignment</span><span style="color:#24292E;">.bottomLeft, </span></span>
<span class="line"><span style="color:#24292E;">      position</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BadgePosition</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">topRight</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">      toAnimate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      badgeContent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;$</span><span style="color:#005CC5;">msgTips</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        style</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TextStyle</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.white, </span></span>
<span class="line"><span style="color:#24292E;">          fontSize</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          letterSpacing</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          wordSpacing</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        ), </span></span>
<span class="line"><span style="color:#24292E;">      ), </span></span>
<span class="line"><span style="color:#24292E;">      child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> needRedWidget, </span></span>
<span class="line"><span style="color:#24292E;">    ); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码第 7 行的方法 showRedWidget 就是只显示红点提醒，其调用的是 _getBadge 方法，该方法主要是应用 Badge 第三方组件，上面代码中的五个参数的作用分别是：</p><ul><li><p>alignment，child 组件的展示方式，这里是底部靠左；</p></li><li><p>position，红点或者未读消息数的位置，这里是右上角；</p></li><li><p>toAnimate，表示动画，这里直接去掉，感觉效果不太好，也没有必要；</p></li><li><p>badgeContent，则是红点的样式内容，需要 Text 组件；</p></li><li><p>child，就是需要展示红点的组件。</p></li></ul><p>未读消息也是使用到 _getBadge 方法，但这里传入的是具体的消息数，而不是一个空字符，具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 展示消息提醒 </span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">showRedNumWidget</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> needRedWidget, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> newMessageNum) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newMessageNum </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 小于1的消息则无须设置 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> needRedWidget; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 消息数大于99时，则只显示一个红点即可 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> msgTips </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newMessageNum </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;99+&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$</span><span style="color:#79B8FF;">newMessageNum</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getBadge</span><span style="color:#E1E4E8;">(needRedWidget, msgTips); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 展示消息提醒 </span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showRedNumWidget</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> needRedWidget, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> newMessageNum) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newMessageNum </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 小于1的消息则无须设置 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> needRedWidget; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 消息数大于99时，则只显示一个红点即可 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> msgTips </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newMessageNum </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;99+&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$</span><span style="color:#005CC5;">newMessageNum</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getBadge</span><span style="color:#24292E;">(needRedWidget, msgTips); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>考虑到未读消息数小于 1 不用展示，其次为了避免消息未读数量过大导致 UI 问题，这里在第 7 行代码也加了判断，具体还是根据业务场景来配置。完成基础组件后，我们再来看下该组件的应用部分。</p><h4 id="组件应用" tabindex="-1">组件应用 <a class="header-anchor" href="#组件应用" aria-label="Permalink to &quot;组件应用&quot;">​</a></h4><p>组件的应用包含在两部分，一部分是底部导航栏，另外一部分是个人页的&quot;我的消息&quot;按钮。我们先来看下底部导航栏部分，这部分代码在 pages/entrance.dart 中，我们只看修改的部分。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 获取页面内容部分 </span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getScaffold</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> newMessageModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Provider</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">NewMessageModel</span><span style="color:#E1E4E8;">&gt;(context);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 获取页面内容部分 </span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getScaffold</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> newMessageModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Provider</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">NewMessageModel</span><span style="color:#24292E;">&gt;(context);</span></span></code></pre></div><p>首先需要通过 Provider 获得 NewMessageModel 的操作句柄。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">BottomNavigationBarItem</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">  icon</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonRedMessage</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showRedWidget</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.person), </span></span>
<span class="line"><span style="color:#E1E4E8;">      newMessageModel.value </span></span>
<span class="line"><span style="color:#E1E4E8;">  ), </span></span>
<span class="line"><span style="color:#E1E4E8;">  title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;我&#39;</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">  activeIcon</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonRedMessage</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showRedWidget</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.person_outline), </span></span>
<span class="line"><span style="color:#E1E4E8;">      newMessageModel.value </span></span>
<span class="line"><span style="color:#E1E4E8;">  ), </span></span>
<span class="line"><span style="color:#E1E4E8;">),</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">BottomNavigationBarItem</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">  icon</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonRedMessage</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showRedWidget</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.person), </span></span>
<span class="line"><span style="color:#24292E;">      newMessageModel.value </span></span>
<span class="line"><span style="color:#24292E;">  ), </span></span>
<span class="line"><span style="color:#24292E;">  title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我&#39;</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">  activeIcon</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonRedMessage</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showRedWidget</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.person_outline), </span></span>
<span class="line"><span style="color:#24292E;">      newMessageModel.value </span></span>
<span class="line"><span style="color:#24292E;">  ), </span></span>
<span class="line"><span style="color:#24292E;">),</span></span></code></pre></div><p>修改底部导航栏的&quot;我&quot;，将其中的 icon 使用红点组件封装，代码在第 2 到 5 行，这里封装在 icon 上界面效果是最好的 ， 这样就在底部导航栏增加了未读消息红点提醒 。</p><p>为了演示红点和消息数两种场景，在导航上使用红点来演示效果，个人页面则演示展示具体未读消息数量。再来看下个人页面的代码部分，这部分逻辑在 widgets/user_page/button_list.dart 中。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 个人页面的功能列表 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UserPageButtonList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> newMessageModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Provider</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">NewMessageModel</span><span style="color:#E1E4E8;">&gt;(context); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[ </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">ListTile</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          leading</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.person_pin), </span></span>
<span class="line"><span style="color:#E1E4E8;">          title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;我的好友&#39;</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">          onTap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">        ), </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">ListTile</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          leading</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonRedMessage</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showRedNumWidget</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.email), </span></span>
<span class="line"><span style="color:#E1E4E8;">            newMessageModel.value </span></span>
<span class="line"><span style="color:#E1E4E8;">          ), </span></span>
<span class="line"><span style="color:#E1E4E8;">          title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;我的消息&#39;</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">          onTap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">        ), </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">ListTile</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          leading</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.settings), </span></span>
<span class="line"><span style="color:#E1E4E8;">          title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;系统设置&#39;</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">          onTap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">        ) </span></span>
<span class="line"><span style="color:#E1E4E8;">      ], </span></span>
<span class="line"><span style="color:#E1E4E8;">    ); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 个人页面的功能列表 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UserPageButtonList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> newMessageModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Provider</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">NewMessageModel</span><span style="color:#24292E;">&gt;(context); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[ </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">ListTile</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          leading</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.person_pin), </span></span>
<span class="line"><span style="color:#24292E;">          title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我的好友&#39;</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">          onTap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () {}, </span></span>
<span class="line"><span style="color:#24292E;">        ), </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">ListTile</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          leading</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonRedMessage</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showRedNumWidget</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.email), </span></span>
<span class="line"><span style="color:#24292E;">            newMessageModel.value </span></span>
<span class="line"><span style="color:#24292E;">          ), </span></span>
<span class="line"><span style="color:#24292E;">          title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我的消息&#39;</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">          onTap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () {}, </span></span>
<span class="line"><span style="color:#24292E;">        ), </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">ListTile</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          leading</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.settings), </span></span>
<span class="line"><span style="color:#24292E;">          title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;系统设置&#39;</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">          onTap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () {}, </span></span>
<span class="line"><span style="color:#24292E;">        ) </span></span>
<span class="line"><span style="color:#24292E;">      ], </span></span>
<span class="line"><span style="color:#24292E;">    ); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码中的第 18 行到 21 行，就是将 icon 封装在了红点组件内。未读消息展示已经介绍了，那么我们再来看下如何消除消息红点和未读消息。</p><h4 id="消除红点" tabindex="-1">消除红点 <a class="header-anchor" href="#消除红点" aria-label="Permalink to &quot;消除红点&quot;">​</a></h4><p>在 new_messsage_model 状态管理类中，有一个 readNewMessage 方法，该方法就是将未读消息设置为 0 ， 然后通知数据监听方，这里我们将点击行为在个人页面的&quot;我的消息&quot;来触发，将 widgets/user_page/button_list.dart 修改为下面的部分：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:provider/provider.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/model/new_message_model.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/widgets/common/red_message.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// 个人页面的功能列表 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UserPageButtonList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> newMessageModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Provider</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">NewMessageModel</span><span style="color:#E1E4E8;">&gt;(context); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[ </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">ListTile</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          leading</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.person_pin), </span></span>
<span class="line"><span style="color:#E1E4E8;">          title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;我的好友&#39;</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">          onTap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">        ), </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">ListTile</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          leading</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonRedMessage</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showRedNumWidget</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.email), </span></span>
<span class="line"><span style="color:#E1E4E8;">            newMessageModel.value </span></span>
<span class="line"><span style="color:#E1E4E8;">          ), </span></span>
<span class="line"><span style="color:#E1E4E8;">          title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;我的消息&#39;</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">          onTap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () { </span></span>
<span class="line"><span style="color:#E1E4E8;">            newMessageModel.</span><span style="color:#B392F0;">readNewMessage</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">          }, </span></span>
<span class="line"><span style="color:#E1E4E8;">        ), </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">ListTile</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          leading</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.settings), </span></span>
<span class="line"><span style="color:#E1E4E8;">          title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;系统设置&#39;</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">          onTap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">        ) </span></span>
<span class="line"><span style="color:#E1E4E8;">      ], </span></span>
<span class="line"><span style="color:#E1E4E8;">    ); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:provider/provider.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/model/new_message_model.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/widgets/common/red_message.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// 个人页面的功能列表 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UserPageButtonList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> newMessageModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Provider</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">NewMessageModel</span><span style="color:#24292E;">&gt;(context); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[ </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">ListTile</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          leading</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.person_pin), </span></span>
<span class="line"><span style="color:#24292E;">          title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我的好友&#39;</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">          onTap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () {}, </span></span>
<span class="line"><span style="color:#24292E;">        ), </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">ListTile</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          leading</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonRedMessage</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showRedNumWidget</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.email), </span></span>
<span class="line"><span style="color:#24292E;">            newMessageModel.value </span></span>
<span class="line"><span style="color:#24292E;">          ), </span></span>
<span class="line"><span style="color:#24292E;">          title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我的消息&#39;</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">          onTap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () { </span></span>
<span class="line"><span style="color:#24292E;">            newMessageModel.</span><span style="color:#6F42C1;">readNewMessage</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">          }, </span></span>
<span class="line"><span style="color:#24292E;">        ), </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">ListTile</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          leading</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.settings), </span></span>
<span class="line"><span style="color:#24292E;">          title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;系统设置&#39;</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">          onTap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () {}, </span></span>
<span class="line"><span style="color:#24292E;">        ) </span></span>
<span class="line"><span style="color:#24292E;">      ], </span></span>
<span class="line"><span style="color:#24292E;">    ); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中的第 28 行就是点击触发消息消除，接下来我们运行看下效果，如图 4 的动效所示。</p>`,44),M=s("p",null,"图 4 红点效果图",-1),_=s("p",null,"以上就实现了红点组件的设计，并应用红点组件完善了 Two You Friend 的个人页面功能。",-1),v=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),f=s("p",null,"本课时在实现 App 个人页面的过程中，着重介绍了红点组件的设计和应用，同时介绍到了 Provider 多状态管理的方法。学习完本课时后，你要熟练应用红点组件，并且掌握其业务组件设计的方法，其次需要掌握 Provider 的多状态管理方法 。",-1),b=s("p",null,"在本课时之前，所有的 API 接口都是一个假接口数据，下一课时我们将介绍如何进行网络请求，来完善 API 部分功能。谢谢大家。",-1),w=s("p",null,[s("a",{href:"https://github.com/love-flutter/flutter-column",target:"_blank",rel:"noreferrer"},"点击此链接查看本课时源码")],-1);function k(N,x,I,P,T,W){const a=o("Image");return e(),t("div",null,[E,y,i,d,l(a,{alt:"20200712_160246.gif",src:"https://s0.lgstatic.com/i/image/M00/37/AD/Ciqc1F8aewCAIDGrAAocYK2ZqIo350.gif"}),n(),F,g,C,u,h,m,A,l(a,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/37/B9/CgqCHl8aeySAO1UTAAIF-lgAvBA674.png"}),n(),B,l(a,{alt:"image (10).png",src:"https://s0.lgstatic.com/i/image/M00/37/AD/Ciqc1F8aezCAA5btAACFxGz_UhM158.png"}),n(),D,l(a,{alt:"20200712_160246 (1).gif",src:"https://s0.lgstatic.com/i/image/M00/37/AE/Ciqc1F8ae4WASR5LAAocYK2ZqIo031.gif"}),n(),M,_,v,f,b,w])}const S=p(r,[["render",k]]);export{U as __pageData,S as default};
