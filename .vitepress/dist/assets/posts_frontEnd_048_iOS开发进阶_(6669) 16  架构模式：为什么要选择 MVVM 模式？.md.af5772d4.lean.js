import{_ as n,j as s,o as p,g as l,k as t,h as i,s as e,Q as r}from"./chunks/framework.e0c66c3f.js";const U=JSON.parse('{"title":"MVVM 及其优点 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6669) 16  架构模式：为什么要选择 MVVM 模式？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6669) 16  架构模式：为什么要选择 MVVM 模式？.md","lastUpdated":1696338709000}'),d={name:"posts/frontEnd/048_iOS开发进阶/(6669) 16  架构模式：为什么要选择 MVVM 模式？.md"},V=e("p",null,"作为 iOS 开发者，我们都很熟悉 MVC 模式。根据苹果官方的解释， MVC 表示 Model-View-Controller， 也就是模型、视图和控制器。但是业界一直把 MVC 戏称为 Massive ViewController（臃肿的视图控制器）。因为当我们使用 MVC 的时候，随着功能越来越丰富， ViewController 往往变得臃肿和繁杂，而且模块之间相互耦合，难以维护。下图显示了苹果的 MVC 模式。",-1),a=e("p",null,"其中，Controller 通常指 ViewController ，是 MVC 的核心，ViewController 通过Target-Action、DataSource 和 Delegate 来接收来自 View 的用户事件，并通过 Outlet 来更新 View。同时 ViewController 还通过 Notification 和 KVO 来接收来自 Model 的通知，并通过变量来更新 Model。",-1),M=e("p",null,"除了与 View 和 Model 进行交互以外，ViewController 还负责导航、网络访问、数据缓存、错误处理以及 Model 对象的 Encode 和 Decode。由于 ViewController 承担多项责任，往往导致代码量极大，且由于强耦合，对 ViewController 的一点点改动都需要进行手工回归测试，费时费力。那么，有没有什么好的办法来解决这些问题呢？",-1),c=e("h3",{id:"mvvm-及其优点",tabindex:"-1"},[i("MVVM 及其优点 "),e("a",{class:"header-anchor",href:"#mvvm-及其优点","aria-label":'Permalink to "MVVM 及其优点"'},"​")],-1),_=e("p",null,"经过多年实践证明，MVVM 模式是目前解决臃肿 ViewController 问题的有效方法。MVVM 全称 Model-View-ViewModel （模型-视图-视图模型）。与 MVC 相比，它引入了一个名叫 ViewModel 的新概念。如下图所示。",-1),w=r("",6),m=r("",17),g=r("",15);function h(A,C,S,u,I,T){const o=s("Image");return p(),l("div",null,[V,t(o,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/36/5D/CioPOWBzrr2ASdn0AAB7aYkrITU199.png"}),a,M,c,_,t(o,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M01/37/48/Cgp9HWB2p8iAJEKQAAIqLJKlDBM196.png"}),w,t(o,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M01/37/48/Cgp9HWB2p72ADAbnAAJKuBdBnmc620.png"}),i(),m,t(o,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/37/48/Cgp9HWB2p7CAYGJyAALj6KlRJ98450.png"}),i(),g])}const D=n(d,[["render",h]]);export{U as __pageData,D as default};
