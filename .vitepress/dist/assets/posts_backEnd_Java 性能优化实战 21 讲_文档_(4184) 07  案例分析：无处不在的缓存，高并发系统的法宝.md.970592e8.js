import{_ as o,j as e,o as t,h as r,k as p,f as s,s as a,Q as l}from"./chunks/framework.d3daa342.js";const T=JSON.parse('{"title":"07案例分析：无处不在的缓存，高并发系统的法宝","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4184) 07  案例分析：无处不在的缓存，高并发系统的法宝.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4184) 07  案例分析：无处不在的缓存，高并发系统的法宝.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4184) 07  案例分析：无处不在的缓存，高并发系统的法宝.md"},E=a("h1",{id:"_07案例分析-无处不在的缓存-高并发系统的法宝",tabindex:"-1"},[s("07案例分析：无处不在的缓存，高并发系统的法宝 "),a("a",{class:"header-anchor",href:"#_07案例分析-无处不在的缓存-高并发系统的法宝","aria-label":'Permalink to "07案例分析：无处不在的缓存，高并发系统的法宝"'},"​")],-1),i=a("p",null,'在上一课时，我们介绍了"缓冲"，这一课时我将介绍"缓冲"的孪生兄弟"缓存"。',-1),y=a("p",null,"和缓冲类似，缓存可能是软件中使用最多的优化技术了，比如：在最核心的 CPU 中，就存在着多级缓存；为了消除内存和存储之间的差异，各种类似 Redis 的缓存框架更是层出不穷。",-1),g=a("p",null,"缓存的优化效果是非常好的，它既可以让原本载入非常缓慢的页面，瞬间秒开，也能让本是压力山大的数据库，瞬间清闲下来。",-1),d=a("p",null,[a("strong",null,"缓存"),s(" ，"),a("strong",null,"本质"),s("上是为了协调两个速度差异非常大的组件，如下图所示，通过加入一个中间层，将常用的数据存放在相对高速的设备中。")],-1),h=l(`<p>在我们平常的应用开发中，根据缓存所处的物理位置，一般分为<strong>进程内</strong> 缓存和<strong>进程外</strong>缓存。</p><p>本课时我们主要聚焦在进程内缓存上，在 Java 中，进程内缓存，就是我们常说的堆内缓存。Spring 的默认实现里，就包含 Ehcache、JCache、Caffeine、Guava Cache 等。</p><h3 id="guava-的-loadingcache" tabindex="-1">Guava 的 LoadingCache <a class="header-anchor" href="#guava-的-loadingcache" aria-label="Permalink to &quot;Guava 的 LoadingCache&quot;">​</a></h3><p>Guava 是一个常用的工具包，其中的 <strong>LoadingCache</strong> （下面简称 LC），是非常好用的<strong>堆内缓存工具</strong>。通过学习 LC 的结构，即可了解堆内缓存设计的一般思路。</p><p>缓存一般是比较昂贵的组件，容量是有限制的，设置得过小，或者过大，都会影响缓存性能：</p><ul><li><p>缓存空间过小，就会造成高命中率的元素被频繁移出，失去了缓存的意义；</p></li><li><p>缓存空间过大，不仅浪费宝贵的缓存资源，还会对垃圾回收产生一定的压力。</p></li></ul><p>通过 Maven，即可引入 guava 的 jar 包：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">com.google.guava</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">guava</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">29.0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jre</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">com.google.guava</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">guava</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">29.0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jre</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>下面介绍一下 LC 的常用操作：</p>`,9),u=l(`<h4 id="_1-缓存初始化" tabindex="-1">1.缓存初始化 <a class="header-anchor" href="#_1-缓存初始化" aria-label="Permalink to &quot;1.缓存初始化&quot;">​</a></h4><p>首先，我们可以通过下面的参数设置一下 LC 的大小。一般，我们只需给缓存提供一个上限。</p><ul><li><p><strong>maximumSize</strong> 这个参数用来设置缓存池的最大容量，达到此容量将会清理其他元素；</p></li><li><p><strong>initialCapacity</strong> 默认值是 16，表示初始化大小；</p></li><li><p><strong>concurrencyLevel</strong> 默认值是 4，和初始化大小配合使用，表示会将缓存的内存划分成 4 个 segment，用来支持高并发的存取。</p></li></ul><h4 id="_2-缓存操作" tabindex="-1">2.缓存操作 <a class="header-anchor" href="#_2-缓存操作" aria-label="Permalink to &quot;2.缓存操作&quot;">​</a></h4><p>那么缓存数据是怎么放进去的呢？有两种模式：</p><ul><li><p>使用 put 方法手动处理，比如，我从数据库里查询出一个 User 对象，然后手动调用代码进去；</p></li><li><p>主动触发（ 这也是 Loading 这个词的由来），通过提供一个 CacheLoader 的实现，就可以在用到这个对象的时候，进行延迟加载。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    LoadingCache&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; lc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CacheBuilder </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> CacheLoader&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() { </span></span>
<span class="line"><span style="color:#E1E4E8;">                @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">slowMethod</span><span style="color:#E1E4E8;">(key); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">            }); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">slowMethod</span><span style="color:#E1E4E8;">(String key) throws Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.result&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) { </span></span>
<span class="line"><span style="color:#24292E;">    LoadingCache&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheBuilder </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> CacheLoader&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;() { </span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">slowMethod</span><span style="color:#24292E;">(key); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">            }); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">slowMethod</span><span style="color:#24292E;">(String key) throws Exception { </span></span>
<span class="line"><span style="color:#24292E;">    Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.result&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面是主动触发的示例代码，你可以使用 <strong>get</strong> 方法<strong>获取</strong>缓存的值。比如，当我们执行 lc.get(&quot;a&quot;) 时，第一次会比较缓慢，因为它需要到数据源进行获取；第二次就瞬间返回了，也就是缓存命中了。具体时序可以参见下面这张图。</p>`,8),_=l(`<p>除了靠 LC 自带的回收策略，我们也可以<strong>手动删除</strong> 某一个元素，这就是 <strong>invalidate</strong> 方法。当然，数据的这些删除操作，也是可以监听到的，只需要设置一个监听器就可以了，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">removalListener</span><span style="color:#E1E4E8;">(notification </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(notification))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">removalListener</span><span style="color:#24292E;">(notification </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(notification))</span></span></code></pre></div><h4 id="_3-回收策略" tabindex="-1">3.回收策略 <a class="header-anchor" href="#_3-回收策略" aria-label="Permalink to &quot;3.回收策略&quot;">​</a></h4><p>缓存的大小是有限的，满了以后怎么办？这就需要回收策略进行处理，接下来我会向你介绍三种回收策略。</p><p>（1）第一种回收策略<strong>基于容量</strong></p><p>这个比较好理解，也就是说如果缓存满了，就会按照 LRU 算法来移除其他元素。</p><p>（2）第二种回收策略<strong>基于时间</strong></p><ul><li><p>一种方式是，通过 expireAfterWrite 方法设置数据写入以后在某个时间失效；</p></li><li><p>另一种是，通过 expireAfterAccess 方法设置最早访问的元素，并优先将其删除。</p></li></ul><p>（3）第三种回收策略<strong>基于 JVM 的垃圾回收</strong></p><p>我们都知道对象的引用有强、软、弱、虚等四个级别，通过 weakKeys 等函数即可设置相应的引用级别。当 JVM 垃圾回收的时候，会主动清理这些数据。</p><p>关于第三种回收策略，有一个<strong>高频面试题：如果你同时设置了 weakKeys 和 weakValues函数，LC 会有什么反应？</strong></p><p>答案：如果同时设置了这两个函数，它代表的意思是，当没有任何强引用，与 key <strong>或者</strong> value 有关系时，就删掉整个缓存项。这两个函数经常被误解。</p><h4 id="_4-缓存造成内存故障" tabindex="-1">4.缓存造成内存故障 <a class="header-anchor" href="#_4-缓存造成内存故障" aria-label="Permalink to &quot;4.缓存造成内存故障&quot;">​</a></h4><p>LC 可以通过 recordStats 函数，对缓存加载和命中率等情况进行监控。</p><p><strong>值得注意的是：LC 是基于数据条数而不是基于缓存物理大小的，所以如果你缓存的对象特别大，就会造成不可预料的内存占用。</strong></p><p>围绕这点，我分享一个由于不正确使用缓存导致的常见内存故障。</p><p>大多数堆内缓存，都会将对象的引用设置成弱引用或软引用，这样内存不足时，可以优先释放缓存占用的空间，给其他对象腾出地方。这种做法的初衷是好的，但容易出现问题。</p><p>当你的缓存使用非常频繁，数据量又比较大的情况下，缓存会占用大量内存，如果此时发生了垃圾回收（GC），缓存空间会被释放掉，但又被迅速占满，从而会再次触发垃圾回收。如此往返，GC 线程会耗费大量的 CPU 资源，缓存也就失去了它的意义。</p><p>所以在这种情况下，把缓存设置的小一些，减轻 JVM 的负担，是一个很好的方法。</p><h3 id="缓存算法" tabindex="-1">缓存算法 <a class="header-anchor" href="#缓存算法" aria-label="Permalink to &quot;缓存算法&quot;">​</a></h3><h4 id="_1-算法介绍" tabindex="-1">1.算法介绍 <a class="header-anchor" href="#_1-算法介绍" aria-label="Permalink to &quot;1.算法介绍&quot;">​</a></h4><p>堆内缓存最常用的有 FIFO、LRU、LFU 这三种算法。</p><ul><li><strong>FIFO</strong></li></ul><p>这是一种先进先出的模式。如果缓存容量满了，将会<strong>移除最先加入的元素</strong>。这种缓存实现方式简单，但符合先进先出的队列模式场景的功能不多，应用场景较少。</p><ul><li><strong>LRU</strong></li></ul><p>LRU 是最近最少使用的意思，当缓存容量达到上限，它会<strong>优先移除那些最久未被使用的数据</strong> ，LRU是目前<strong>最常用</strong>的缓存算法，稍后我们会使用 Java 的 API 简单实现一个。</p><ul><li><strong>LFU</strong></li></ul><p>LFU 是最近最不常用的意思。相对于 LRU 的时间维度，LFU 增加了访问次数的维度。如果缓存满的时候，将<strong>优先移除访问次数最少的元素</strong> ；而当有多个访问次数相同的元素时，则<strong>优先移除最久未被使用的元素</strong>。</p><h4 id="_2-实现一个-lru-算法" tabindex="-1">2.实现一个 LRU 算法 <a class="header-anchor" href="#_2-实现一个-lru-算法" aria-label="Permalink to &quot;2.实现一个 LRU 算法&quot;">​</a></h4><p>Java 里面实现 LRU 算法可以有多种方式，其中最常用的就是 <strong>LinkedHashMap，<strong>这也是一个需要你注意的</strong>面试高频考点</strong>。</p><p>首先，我们来看一下 LinkedHashMap 的构造方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LinkedHashMap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> initialCapacity, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> loadFactor, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> accessOrder)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedHashMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> initialCapacity, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> loadFactor, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> accessOrder)</span></span></code></pre></div><p>accessOrder 参数是实现 LRU 的关键。当 accessOrder 的值为 true 时，将按照对象的访问顺序排序；当 accessOrder 的值为 false 时，将按照对象的插入顺序排序。我们上面提到过，按照访问顺序排序，其实就是 LRU。</p>`,33),F=l(`<p>如上图，按照缓存的一般设计方式，和 LC 类似，当你向 LinkedHashMap 中添加新对象的时候，就会调用 removeEldestEntry 方法。这个方法默认返回 false，表示永不过期。我们只需要覆盖这个方法，当超出容量的时候返回 true，触发移除动作就可以了。关键代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LRU</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LinkedHashMap</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> capacity; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LRU</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">capacity</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.75f</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.capacity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> capacity; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeEldestEntry</span><span style="color:#E1E4E8;">(Map.Entry </span><span style="color:#FFAB70;">eldest</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> capacity; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LRU</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedHashMap</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> capacity; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LRU</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">capacity</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.75f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.capacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> capacity; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeEldestEntry</span><span style="color:#24292E;">(Map.Entry </span><span style="color:#E36209;">eldest</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> capacity; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相比较 LC，这段代码实现的功能是比较简陋的，它甚至不是线程安全的，但它体现了缓存设计的一般思路，是 Java 中最简单的 LRU 实现方式。</p><h3 id="进一步加速" tabindex="-1">进一步加速 <a class="header-anchor" href="#进一步加速" aria-label="Permalink to &quot;进一步加速&quot;">​</a></h3><p>在 Linux 系统中，通过 free 命令，能够看到系统内存的使用状态。其中，有一块叫作 <strong>cached</strong> 的区域，占用了大量的内存空间。</p>`,5),C=l('<p>如图所示，这个区域，其实就是存放了操作系统的文件缓存，当应用再次用到它的时候，就不用再到磁盘里走一圈，能够从内存里快速载入。</p><p>在文件读取的缓存方面，操作系统做得更多。由于磁盘擅长顺序读写，在随机读写的时候，效率很低，所以，操作系统使用了智能的<strong>预读算法</strong>（readahead），将数据从硬盘中加载到缓存中。</p><p>预读算法有三个关键点：</p><ul><li><p><strong>预测性</strong>，能够根据应用的使用数据，提前预测应用后续的操作目标；</p></li><li><p><strong>提前</strong>，能够将这些数据提前加载到缓存中，保证命中率；</p></li><li><p><strong>批量</strong>，将小块的、频繁的读取操作，合并成顺序的批量读取，提高性能。</p></li></ul><p>预读技术一般都是比较智能的，能够覆盖大多数后续的读取操作。举个极端的例子，如果我们的数据集合比较小，访问频率又非常高，就可以使用完全载入的方式，来替换懒加载的方式。在系统启动的时候，将数据加载到缓存中。</p><h3 id="缓存优化的一般思路" tabindex="-1">缓存优化的一般思路 <a class="header-anchor" href="#缓存优化的一般思路" aria-label="Permalink to &quot;缓存优化的一般思路&quot;">​</a></h3><p>一般，缓存针对的主要是读操作。<strong>当你的功能遇到下面的场景时</strong>，就可以选择使用缓存组件进行性能优化：</p><ul><li><p>存在数据热点，缓存的数据能够被频繁使用；</p></li><li><p>读操作明显比写操作要多；</p></li><li><p>下游功能存在着比较悬殊的性能差异，下游服务能力有限；</p></li><li><p>加入缓存以后，不会影响程序的正确性，或者引入不可预料的复杂性。</p></li></ul><p>缓存组件和缓冲类似，也是在两个组件速度严重不匹配的时候，引入的一个中间层，但<strong>它们服务的目标是不同的：</strong></p><ul><li><p>缓冲，数据一般只使用一次，等待缓冲区满了，就执行 flush 操作；</p></li><li><p>缓存，数据被载入之后，可以多次使用，数据将会共享多次。</p></li></ul><p><strong>缓存最重要的指标就是命中率</strong>，有以下几个因素会影响命中率。</p><p><strong>（1）缓存容量</strong></p><p>缓存的容量总是有限制的，所以就存在一些冷数据的逐出问题。但缓存也不是越大越好，它不能明显挤占业务的内存。</p><p><strong>（2）数据集类型</strong></p><p>如果缓存的数据是非热点数据，或者是操作几次就不再使用的冷数据，那命中率肯定会低，缓存也会失去了它的作用。</p><p><strong>（3）缓存失效策略</strong></p><p>缓存算法也会影响命中率和性能，目前效率最高的算法是 Caffeine 使用的 <strong>W-TinyLFU 算法</strong>，它的命中率非常高，内存占用也更小。新版本的 spring-cache，已经默认支持 Caffeine。</p><p>下图展示了这个算法的性能，<a href="https://github.com/ben-manes/caffeine" target="_blank" rel="noreferrer">从官网的 github 仓库</a>就可以找到 JMH 的测试代码。</p>',18),A=l('<p>推荐使用 Guava Cache 或者 Caffeine 作为堆内缓存解决方案，然后通过它们提供的一系列监控指标，来调整缓存的大小和内容，一般来说：</p><ul><li><p>缓存命中率达到 50% 以上，作用就开始变得显著；</p></li><li><p>缓存命中率低于 10%，那就需要考虑缓存组件的必要性了。</p></li></ul><p>引入缓存组件，能够显著提升系统性能，但也会引入新的问题。其中，最典型的也是面试高频问题：如何保证缓存与源数据的同步？关于这点，我们会在下一课时进行讲解。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>最后，我来总结一下本课时的知识要点。</p><p>我们先以 Guava 的 LoadingCache 为例，讲解了堆内缓存设计的一些思路；同时，介绍了一个因为缓存不合理利用所造成的内存故障，这些都是面试中的高频问题；然后又讲解了，三个常用的缓存算法 LRU、LFU、FIFO，并以 LinkedHashMap 为基础，实现了一个最简单的 LRU 缓存。</p><p>本课时还提到了使用预读或者提前载入等方式，来进一步加速应用的方法，readahead技术，在操作系统、数据库中使用非常多，性能提升也比较显著。</p><p>最后，我们提到可以通过利用缓存框架的一些监控数据，来调整缓存的命中率，要达到50% 的命中率才算有较好的效果。</p><p>接下来，我再简单举两个<strong>缓存应用</strong>的例子。</p><ul><li><p>第一个是 HTTP 304 状态码，它是 Not Modified 的意思。</p><p>浏览器客户端会发送一个条件性的请求，服务端可以通过 If-Modified-Since 头信息判断缓冲的文件是否是最新的。如果是，那么客户端就直接使用缓存，不用进行再读取了。</p></li><li><p>另一个是关于 CDN，这是一种变相的缓存。</p><p>用户会从离它最近最快的节点，读取文件内容。如果这个节点没有缓存这个文件，那么 CDN 节点就会从源站拉取一份，下次有相同的读取请求时，就可以快速返回。</p></li></ul><p>缓存的应用非常广泛，大家在平常的工作中，也可以尝试进行总结、类比。</p>',11);function v(D,b,k,m,L,f){const n=e("Image");return t(),r("div",null,[E,i,y,g,d,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/3C/6B/CgqCHl8nuCKAad7oAAAk6v90xvo900.png"}),s(),h,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/3C/60/Ciqc1F8nuDmAJcstAABnG73x05M360.png"}),s(),u,p(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/3C/6C/CgqCHl8nuFGACX8vAABYHt8o1wc201.png"}),s(),_,p(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/3C/6C/CgqCHl8nuJeAQCW4AABgBDKI74g880.png"}),s(),F,p(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/3C/61/Ciqc1F8nuKqAJaGZAAF4FboRD9E367.png"}),s(),C,p(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/3C/6C/CgqCHl8nuQWAKsjIAAG1hzHS76Q255.png"}),s(),A])}const B=o(c,[["render",v]]);export{T as __pageData,B as default};
