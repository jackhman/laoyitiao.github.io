import{_ as p,j as e,o as t,g as r,k as l,h as n,s,Q as o}from"./chunks/framework.b3d8e22e.js";const G=JSON.parse('{"title":"FileRouterFactory ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4279) 33  路由机制：请求到底怎么走，它说了算（下）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4279) 33  路由机制：请求到底怎么走，它说了算（下）.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4279) 33  路由机制：请求到底怎么走，它说了算（下）.md"},E=s("p",null,"在上一课时，我们介绍了 Router 接口的基本功能以及 RouterChain 加载多个 Router 的实现，之后介绍了 ConditionRouter 这个类对条件路由规则的处理逻辑以及 ScriptRouter 这个类对脚本路由规则的处理逻辑。本课时我们继续上一课时的内容，介绍剩余的三个 Router 接口实现类。",-1),y=s("h3",{id:"filerouterfactory",tabindex:"-1"},[n("FileRouterFactory "),s("a",{class:"header-anchor",href:"#filerouterfactory","aria-label":'Permalink to "FileRouterFactory"'},"​")],-1),i=s("p",null,[s("strong",null,"FileRouterFactory 是 ScriptRouterFactory 的装饰器"),n(" ，其扩展名为 file，FileRouterFactory 在 ScriptRouterFactory 基础上"),s("strong",null,"增加了读取文件的能力"),n("。我们可以将 ScriptRouter 使用的路由规则保存到文件中，然后在 URL 中指定文件路径，FileRouterFactory 从中解析到该脚本文件的路径并进行读取，调用 ScriptRouterFactory 去创建相应的 ScriptRouter 对象。")],-1),u=s("p",null,"下面我们来看 FileRouterFactory 对 getRouter() 方法的具体实现，其中完成了 file 协议的 URL 到 script 协议 URL 的转换，如下是一个转换示例，首先会将 file:// 协议转换成 script:// 协议，然后会添加 type 参数和 rule 参数，其中 type 参数值根据文件后缀名确定，该示例为 js，rule 参数值为文件内容。",-1),g=o(`<p>我们可以再结合接下来这个示例分析 getRouter() 方法的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Router </span><span style="color:#B392F0;">getRouter</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 默认使用script协议</span></span>
<span class="line"><span style="color:#E1E4E8;">    String protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(ROUTER_KEY, ScriptRouterFactory.NAME); </span></span>
<span class="line"><span style="color:#E1E4E8;">    String type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (path </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 获取脚本文件的语言类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取脚本文件中的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    String rule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IOUtils.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getAbsolutePath</span><span style="color:#E1E4E8;">())));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> runtime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(RUNTIME_KEY, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建script协议的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URLBuilder.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(url)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setProtocol</span><span style="color:#E1E4E8;">(protocol)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(TYPE_KEY, type)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(RUNTIME_KEY, runtime)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addParameterAndEncoded</span><span style="color:#E1E4E8;">(RULE_KEY, rule)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取script对应的Router实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> routerFactory.</span><span style="color:#B392F0;">getRouter</span><span style="color:#E1E4E8;">(script);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Router </span><span style="color:#6F42C1;">getRouter</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 默认使用script协议</span></span>
<span class="line"><span style="color:#24292E;">    String protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(ROUTER_KEY, ScriptRouterFactory.NAME); </span></span>
<span class="line"><span style="color:#24292E;">    String type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (path </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 获取脚本文件的语言类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取脚本文件中的内容</span></span>
<span class="line"><span style="color:#24292E;">    String rule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IOUtils.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">())));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> runtime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(RUNTIME_KEY, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建script协议的URL</span></span>
<span class="line"><span style="color:#24292E;">    URL script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> URLBuilder.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(url)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setProtocol</span><span style="color:#24292E;">(protocol)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(TYPE_KEY, type)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(RUNTIME_KEY, runtime)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addParameterAndEncoded</span><span style="color:#24292E;">(RULE_KEY, rule)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取script对应的Router实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> routerFactory.</span><span style="color:#6F42C1;">getRouter</span><span style="color:#24292E;">(script);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="tagrouterfactory-tagrouter" tabindex="-1">TagRouterFactory &amp; TagRouter <a class="header-anchor" href="#tagrouterfactory-tagrouter" aria-label="Permalink to &quot;TagRouterFactory \\&amp; TagRouter&quot;">​</a></h3><p><strong>TagRouterFactory 作为 RouterFactory 接口的扩展实现</strong> ，其扩展名为 tag。但是需要注意的是，TagRouterFactory 与上一课时介绍的 ConditionRouterFactory、ScriptRouterFactory 的不同之处在于，它是<strong>通过继承 CacheableRouterFactory 这个抽象类，间接实现了 RouterFactory 接口</strong>。</p><p>CacheableRouterFactory 抽象类中维护了一个 ConcurrentMap 集合（routerMap 字段）用来缓存 Router，其中的 Key 是 ServiceKey。在 CacheableRouterFactory 的 getRouter() 方法中，会优先根据 URL 的 ServiceKey 查询 routerMap 集合，查询失败之后会调用 createRouter() 抽象方法来创建相应的 Router 对象。在 TagRouterFactory.createRouter() 方法中，创建的自然就是 TagRouter 对象了。</p><h4 id="基于-tag-的测试环境隔离方案" tabindex="-1">基于 Tag 的测试环境隔离方案 <a class="header-anchor" href="#基于-tag-的测试环境隔离方案" aria-label="Permalink to &quot;基于 Tag 的测试环境隔离方案&quot;">​</a></h4><p><strong>通过 TagRouter，我们可以将某一个或多个 Provider 划分到同一分组，约束流量只在指定分组中流转，这样就可以轻松达到流量隔离的目的，从而支持灰度发布等场景。</strong></p><p>目前，Dubbo 提供了动态和静态两种方式给 Provider 打标签，其中动态方式就是通过服务治理平台动态下发标签，静态方式就是在 XML 等静态配置中打标签。Consumer 端可以在 RpcContext 的 attachment 中添加 request.tag 附加属性，注意<strong>保存在 attachment 中的值将会在一次完整的远程调用中持续传递</strong>，我们只需要在起始调用时进行设置，就可以达到标签的持续传递。</p><p>了解了 Tag 的基本概念和功能之后，我们再简单介绍一个 Tag 的使用示例。</p><p>在实际的开发测试中，一个完整的请求会涉及非常多的 Provider，分属不同团队进行维护，这些团队每天都会处理不同的需求，并在其负责的 Provider 服务中进行修改，如果所有团队都使用一套测试环境，那么测试环境就会变得很不稳定。如下图所示，4 个 Provider 分属不同的团队管理，Provider 2 和 Provider 4 在测试环境测试，部署了有 Bug 的版本，这样就会导致整个测试环境无法正常处理请求，在这样一个不稳定的测试环境中排查 Bug 是非常困难的，因为可能排查到最后，发现是别人的 Bug。</p>`,10),F=s("p",null,"不同状态的 Provider 节点",-1),d=s("p",null,"为了解决上述问题，我们可以针对每个需求分别独立出一套测试环境，但是这个方案会占用大量机器，前期的搭建成本以及后续的维护成本也都非常高。",-1),R=s("p",null,"下面是一个通过 Tag 方式实现环境隔离的架构图，其中，需求 1 对 Provider 2 的请求会全部落到有需求 1 标签的 Provider 上，其他 Provider 使用稳定测试环境中的 Provider；需求 2 对 Provider 4 的请求会全部落到有需求 2 标签的 Provider 4 上，其他 Provider 使用稳定测试环境中的 Provider。",-1),A=s("p",null,"依赖 Tag 实现的测试环境隔离方案",-1),v=s("p",null,"在一些特殊场景中，会有 Tag 降级的场景，比如找不到对应 Tag 的 Provider，会按照一定的规则进行降级。如果在 Provider 集群中不存在与请求 Tag 对应的 Provider 节点，则默认将降级请求 Tag 为空的 Provider；如果希望在找不到匹配 Tag 的 Provider 节点时抛出异常的话，我们需设置 request.tag.force = true。",-1),C=s("p",null,[n("如果请求中的 request.tag 未设置，只会匹配 Tag 为空的 Provider，也就是说即使集群中存在可用的服务，若 Tag 不匹配也就无法调用。一句话总结，"),s("strong",null,"携带 Tag 的请求可以降级访问到无 Tag 的 Provider，但不携带 Tag 的请求永远无法访问到带有 Tag 的 Provider"),n("。")],-1),D=s("h4",{id:"tagrouter",tabindex:"-1"},[n("TagRouter "),s("a",{class:"header-anchor",href:"#tagrouter","aria-label":'Permalink to "TagRouter"'},"​")],-1),T=s("p",null,"下面我们再来看 TagRouter 的具体实现。在 TagRouter 中持有一个 TagRouterRule 对象的引用，在 TagRouterRule 中维护了一个 Tag 集合，而在每个 Tag 对象中又都维护了一个 Tag 的名称，以及 Tag 绑定的网络地址集合，如下图所示：",-1),k=s("p",null,"TagRouter、TagRouterRule、Tag 与 address 映射关系图",-1),_=s("p",null,[n("另外，在 TagRouterRule 中还维护了 addressToTagnames、tagnameToAddresses 两个集合（都是 Map<String, List"),s("code",null,"<String>"),n("> 类型），分别记录了 Tag 名称到各个 address 的映射以及 address 到 Tag 名称的映射。在 TagRouterRule 的 init() 方法中，会根据 tags 集合初始化这两个集合。")],-1),h=s("p",null,"了解了 TagRouterRule 的基本构造之后，我们继续来看 TagRouter 构造 TagRouterRule 的过程。TagRouter 除了实现了 Router 接口之外，还实现了 ConfigurationListener 接口，如下图所示：",-1),m=o(`<p>TagRouter 继承关系图</p><p><strong>ConfigurationListener 用于监听配置的变化，其中就包括 TagRouterRule 配置的变更</strong>。当我们通过动态更新 TagRouterRule 配置的时候，就会触发 ConfigurationListener 接口的 process() 方法，TagRouter 对 process() 方法的实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(ConfigChangedEvent event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DELETED事件会直接清空tagRouterRule</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.</span><span style="color:#B392F0;">getChangeType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(ConfigChangeType.DELETED)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tagRouterRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 其他事件会解析最新的路由规则，并记录到tagRouterRule字段中</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tagRouterRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TagRuleParser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(ConfigChangedEvent event) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DELETED事件会直接清空tagRouterRule</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.</span><span style="color:#6F42C1;">getChangeType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(ConfigChangeType.DELETED)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tagRouterRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 其他事件会解析最新的路由规则，并记录到tagRouterRule字段中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tagRouterRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TagRuleParser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以看到，如果是删除配置的操作，则直接将 tagRouterRule 设置为 null，如果是修改或新增配置，则通过 TagRuleParser 解析传入的配置，得到对应的 TagRouterRule 对象。TagRuleParser 可以解析 yaml 格式的 TagRouterRule 配置，下面是一个配置示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">force</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">runtime</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">enabled</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">priority</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider</span></span>
<span class="line"><span style="color:#E1E4E8;">tags</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> tag1</span></span>
<span class="line"><span style="color:#E1E4E8;">    addresses</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> tag2</span></span>
<span class="line"><span style="color:#E1E4E8;">    addresses</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;30.5.120.37:20880&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> tag3</span></span>
<span class="line"><span style="color:#E1E4E8;">    addresses</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">force</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">runtime</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">enabled</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">priority</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider</span></span>
<span class="line"><span style="color:#24292E;">tags</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> tag1</span></span>
<span class="line"><span style="color:#24292E;">    addresses</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> tag2</span></span>
<span class="line"><span style="color:#24292E;">    addresses</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;30.5.120.37:20880&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> tag3</span></span>
<span class="line"><span style="color:#24292E;">    addresses</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []</span></span></code></pre></div><p>经过 TagRuleParser 解析得到的 TagRouterRule 结构，如下所示：</p>`,6),f=s("p",null,"TagRouterRule 结构图",-1),B=s("p",null,"除了上图展示的几个集合字段，TagRouterRule 还从 AbstractRouterRule 抽象类继承了一些控制字段，后面介绍的 ConditionRouterRule 也继承了 AbstractRouterRule。",-1),b=o(`<p>AbstractRouterRule继承关系图</p><p>AbstractRouterRule 中核心字段的具体含义大致可总结为如下。</p><ul><li><p>key（string 类型）、scope（string 类型）：key 明确规则体作用在哪个服务或应用。scope 为 service 时，key 由 [{group}:]{service}[:{version}] 构成；scope 为 application 时，key 为 application 的名称。</p></li><li><p>rawRule（string 类型）：记录了路由规则解析前的原始字符串配置。</p></li><li><p>runtime（boolean 类型）：表示是否在每次调用时执行该路由规则。如果设置为 false，则会在 Provider 列表变更时预先执行并缓存结果，调用时直接从缓存中获取路由结果。</p></li><li><p>force（boolean 类型）：当路由结果为空时，是否强制执行，如果不强制执行，路由结果为空的路由规则将自动失效。该字段默认值为 false。</p></li><li><p>valid（boolean 类型）：用于标识解析生成当前 RouterRule 对象的配置是否合法。</p></li><li><p>enabled（boolean 类型）：标识当前路由规则是否生效。</p></li><li><p>priority（int 类型）：用于表示当前 RouterRule 的优先级。</p></li><li><p>dynamic（boolean 类型）：表示该路由规则是否为持久数据，当注册方退出时，路由规则是否依然存在。</p></li></ul><p>我们可以看到，AbstractRouterRule 中的核心字段与前面的示例配置是一一对应的。</p><p>我们知道，Router 最终目的是要过滤符合条件的 Invoker 对象，下面我们一起来看 TagRouter 是如何使用 TagRouterRule 路由逻辑进行 Invoker 过滤的，大致步骤如下。</p><ol><li><p>如果 invokers 为空，直接返回空集合。</p></li><li><p>检查关联的 tagRouterRule 对象是否可用，如果不可用，则会直接调用 filterUsingStaticTag() 方法进行过滤，并返回过滤结果。在 filterUsingStaticTag() 方法中，会比较请求携带的 tag 值与 Provider URL 中的 tag 参数值。</p></li><li><p>获取此次调用的 tag 信息，这里会尝试从 Invocation 以及 URL 的参数中获取。</p></li><li><p>如果<strong>此次请求指定了 tag 信息</strong>，则首先会获取 tag 关联的 address 集合。</p><ol><li><p>如果 address 集合不为空，则根据该 address 集合中的地址，匹配出符合条件的 Invoker 集合。如果存在符合条件的 Invoker，则直接将过滤得到的 Invoker 集合返回；如果不存在，就会根据 force 配置决定是否返回空 Invoker 集合。</p></li><li><p>如果 address 集合为空，则会将请求携带的 tag 值与 Provider URL 中的 tag 参数值进行比较，匹配出符合条件的 Invoker 集合。如果存在符合条件的 Invoker，则直接将过滤得到的 Invoker 集合返回；如果不存在，就会根据 force 配置决定是否返回空 Invoker 集合。</p></li><li><p>如果 force 配置为 false，且符合条件的 Invoker 集合为空，则返回所有不包含任何 tag 的 Provider 列表。</p></li></ol></li><li><p>如果<strong>此次请求未携带 tag 信息</strong>，则会先获取 TagRouterRule 规则中全部 tag 关联的 address 集合。如果 address 集合不为空，则过滤出不在 address 集合中的 Invoker 并添加到结果集合中，最后，将 Provider URL 中的 tag 值与 TagRouterRule 中的 tag 名称进行比较，得到最终的 Invoker 集合。</p></li></ol><p>上述流程的具体实现是在 TagRouter.route() 方法中，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> invokers, URL url, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 如果invokers为空，直接返回空集合(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TagRouterRule tagRouterRuleCopy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tagRouterRule;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tagRouterRuleCopy </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tagRouterRuleCopy.</span><span style="color:#B392F0;">isValid</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tagRouterRuleCopy.</span><span style="color:#B392F0;">isEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterUsingStaticTag</span><span style="color:#E1E4E8;">(invokers, url, invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查关联的tagRouterRule对象是否可用，如果不可用，则会直接调用filterUsingStaticTag() 方法进行过滤</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invokers;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取此次调用的tag信息，尝试从Invocation以及URL中获取</span></span>
<span class="line"><span style="color:#E1E4E8;">    String tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(invocation.</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(TAG_KEY)) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(TAG_KEY) </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            invocation.</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(TAG_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(tag)) { </span><span style="color:#6A737D;">// 此次请求一个特殊的tag</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取tag关联的address集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; addresses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tagRouterRuleCopy.</span><span style="color:#B392F0;">getTagnameToAddresses</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(tag);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(addresses)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 根据上面的address集合匹配符合条件的Invoker</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterInvoker</span><span style="color:#E1E4E8;">(invokers, invoker </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addressMatches</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), addresses));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果存在符合条件的Invoker，则直接将过滤得到的Invoker集合返回</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果不存在符合条件的Invoker，根据force配置决定是否返回空Invoker集合</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(result) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> tagRouterRuleCopy.</span><span style="color:#B392F0;">isForce</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果 address 集合为空，则会将请求携带的 tag 与 Provider URL 中的 tag 参数值进行比较，匹配出符合条件的 Invoker 集合。</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterInvoker</span><span style="color:#E1E4E8;">(invokers, invoker </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> tag.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(TAG_KEY)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(result) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isForceUseTag</span><span style="color:#E1E4E8;">(invocation)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span><span style="color:#6A737D;">// 存在符合条件的Invoker或是force配置为true</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 如果 force 配置为 false，且符合条件的 Invoker 集合为空，则返回所有不包含任何 tag 的 Provider 列表。</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt; tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterInvoker</span><span style="color:#E1E4E8;">(invokers, invoker </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addressNotMatches</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                    tagRouterRuleCopy.</span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterInvoker</span><span style="color:#E1E4E8;">(tmp, invoker </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(TAG_KEY)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果此次请求未携带 tag 信息，则会先获取 TagRouterRule 规则中全部 tag 关联的 address 集合。</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; addresses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tagRouterRuleCopy.</span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(addresses)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果 address 集合不为空，则过滤出不在 address 集合中的 Invoker 并添加到结果集合中。</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterInvoker</span><span style="color:#E1E4E8;">(invokers, invoker </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addressNotMatches</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), addresses));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(result)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果不存在符合条件的 Invoker 或是 address 集合为空，则会将请求携带的 tag 与 Provider URL 中的 tag 参数值进行比较，得到最终的 Invoker 集合。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterInvoker</span><span style="color:#E1E4E8;">(result, invoker </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String localTag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(TAG_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(localTag) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tagRouterRuleCopy.</span><span style="color:#B392F0;">getTagNames</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(localTag);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> invokers, URL url, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 如果invokers为空，直接返回空集合(略)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TagRouterRule tagRouterRuleCopy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tagRouterRule;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tagRouterRuleCopy </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tagRouterRuleCopy.</span><span style="color:#6F42C1;">isValid</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tagRouterRuleCopy.</span><span style="color:#6F42C1;">isEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filterUsingStaticTag</span><span style="color:#24292E;">(invokers, url, invocation);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查关联的tagRouterRule对象是否可用，如果不可用，则会直接调用filterUsingStaticTag() 方法进行过滤</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invokers;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取此次调用的tag信息，尝试从Invocation以及URL中获取</span></span>
<span class="line"><span style="color:#24292E;">    String tag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(invocation.</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(TAG_KEY)) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(TAG_KEY) </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            invocation.</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(TAG_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(tag)) { </span><span style="color:#6A737D;">// 此次请求一个特殊的tag</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取tag关联的address集合</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; addresses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tagRouterRuleCopy.</span><span style="color:#6F42C1;">getTagnameToAddresses</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(tag);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(addresses)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 根据上面的address集合匹配符合条件的Invoker</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filterInvoker</span><span style="color:#24292E;">(invokers, invoker </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addressMatches</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), addresses));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果存在符合条件的Invoker，则直接将过滤得到的Invoker集合返回</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果不存在符合条件的Invoker，根据force配置决定是否返回空Invoker集合</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(result) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> tagRouterRuleCopy.</span><span style="color:#6F42C1;">isForce</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果 address 集合为空，则会将请求携带的 tag 与 Provider URL 中的 tag 参数值进行比较，匹配出符合条件的 Invoker 集合。</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filterInvoker</span><span style="color:#24292E;">(invokers, invoker </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> tag.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(TAG_KEY)));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(result) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isForceUseTag</span><span style="color:#24292E;">(invocation)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span><span style="color:#6A737D;">// 存在符合条件的Invoker或是force配置为true</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果 force 配置为 false，且符合条件的 Invoker 集合为空，则返回所有不包含任何 tag 的 Provider 列表。</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt; tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filterInvoker</span><span style="color:#24292E;">(invokers, invoker </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addressNotMatches</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                    tagRouterRuleCopy.</span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filterInvoker</span><span style="color:#24292E;">(tmp, invoker </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(TAG_KEY)));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果此次请求未携带 tag 信息，则会先获取 TagRouterRule 规则中全部 tag 关联的 address 集合。</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; addresses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tagRouterRuleCopy.</span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(addresses)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果 address 集合不为空，则过滤出不在 address 集合中的 Invoker 并添加到结果集合中。</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filterInvoker</span><span style="color:#24292E;">(invokers, invoker </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addressNotMatches</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), addresses));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(result)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不存在符合条件的 Invoker 或是 address 集合为空，则会将请求携带的 tag 与 Provider URL 中的 tag 参数值进行比较，得到最终的 Invoker 集合。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filterInvoker</span><span style="color:#24292E;">(result, invoker </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            String localTag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(TAG_KEY);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(localTag) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tagRouterRuleCopy.</span><span style="color:#6F42C1;">getTagNames</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(localTag);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="servicerouter-approuter" tabindex="-1">ServiceRouter &amp; AppRouter <a class="header-anchor" href="#servicerouter-approuter" aria-label="Permalink to &quot;ServiceRouter \\&amp; AppRouter&quot;">​</a></h3><p>除了前文介绍的 TagRouterFactory 继承了 CacheableRouterFactory 之外，<strong>ServiceRouterFactory 也继承 CachabelRouterFactory，具有了缓存的能力</strong>，具体继承关系如下图所示：</p>`,10),I=s("p",null,"CacheableRouterFactory 继承关系图",-1),P=s("p",null,[n("ServiceRouterFactory 创建的 Router 实现是 ServiceRouter，与 ServiceRouter 类似的是 AppRouter，"),s("strong",null,"两者都继承了 ListenableRouter 抽象类"),n("（虽然 ListenableRouter 是个抽象类，但是没有抽象方法留给子类实现），继承关系如下图所示：")],-1),U=o(`<p>ListenableRouter 继承关系图</p><p><strong>ListenableRouter 在 ConditionRouter 基础上添加了动态配置的能力</strong> ，ListenableRouter 的 process() 方法与 TagRouter 中的 process() 方法类似，对于 ConfigChangedEvent.DELETE 事件，直接清空 ListenableRouter 中维护的 ConditionRouterRule 和 ConditionRouter 集合的引用；对于 ADDED、UPDATED 事件，则通过 ConditionRuleParser 解析事件内容，得到相应的 ConditionRouterRule 对象和 ConditionRouter 集合。这里的 ConditionRuleParser 同样是以 yaml 文件的格式解析 ConditionRouterRule 的相关配置。ConditionRouterRule 中维护了一个 conditions 集合（List<code>&lt;String&gt;</code> 类型），记录了多个 Condition 路由规则，对应生成多个 ConditionRouter 对象。</p><p>整个解析 ConditionRouterRule 的过程，与前文介绍的解析 TagRouterRule 的流程类似，这里不再赘述。</p><p>在 ListenableRouter 的 route() 方法中，会遍历全部 ConditionRouter 过滤出符合全部路由条件的 Invoker 集合，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> invokers, URL url, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(invokers) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> conditionRouters.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invokers; </span><span style="color:#6A737D;">// 检查边界条件，直接返回invokers集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Router router </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> conditionRouters) { </span><span style="color:#6A737D;">// 路由规则进行过滤</span></span>
<span class="line"><span style="color:#E1E4E8;">        invokers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> router.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(invokers, url, invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invokers;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> invokers, URL url, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(invokers) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> conditionRouters.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invokers; </span><span style="color:#6A737D;">// 检查边界条件，直接返回invokers集合</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Router router </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> conditionRouters) { </span><span style="color:#6A737D;">// 路由规则进行过滤</span></span>
<span class="line"><span style="color:#24292E;">        invokers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(invokers, url, invocation);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invokers;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ServiceRouter 和 AppRouter 都是简单地继承了 ListenableRouter 抽象类，且没有覆盖 ListenableRouter 的任何方法，两者只有以下两点区别。</p><ul><li><p><strong>一个是 priority 字段值不同</strong>。ServiceRouter 为 140，AppRouter 为 150，也就是说 ServiceRouter 要先于 AppRouter 执行。</p></li><li><p><strong>另一个是获取 ConditionRouterRule 配置的 Key 不同</strong>。ServiceRouter 使用的 RuleKey 是由 {interface}:[version]:[group] 三部分构成，获取的是一个服务对应的 ConditionRouterRule。AppRouter 使用的 RuleKey 是 URL 中的 application 参数值，获取的是一个服务实例对应的 ConditionRouterRule。</p></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们是紧接上一课时的内容，继续介绍了剩余 Router 接口实现的内容。</p><p>我们首先介绍了基于文件的 FileRouter 实现，其底层会依赖上一课时介绍的 ScriptRouter；接下来又讲解了基于 Tag 的测试环境隔离方案，以及如何基于 TagRouter 实现该方案，同时深入分析了 TagRouter 的核心实现；最后我们还介绍了 ListenableRouter 抽象类以及 ServerRouter 和 AppRouter 两个实现，它们是在条件路由的基础上添加了动态变更路由规则的能力，同时区分了服务级别和服务实例级别的配置。</p><p>下一课时，我们会简单介绍一个 Dubbo 中配置相关的话题，记得按时来听课。</p>`,11);function S(L,N,M,q,K,Y){const a=e("Image");return t(),r("div",null,[E,y,i,u,l(a,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/6E/C9/Ciqc1F-zkA2AduheAAGQTzCOwl8784.png"}),g,l(a,{alt:"3.png",src:"https://s0.lgstatic.com/i/image/M00/6E/D4/CgqCHl-zkBuACzVCAABuM5-1_s4317.png"}),n(),F,d,R,l(a,{alt:"4.png",src:"https://s0.lgstatic.com/i/image/M00/6E/D4/CgqCHl-zkCyANtuuAADgH2I1upA475.png"}),n(),A,v,C,D,T,l(a,{alt:"5.png",src:"https://s0.lgstatic.com/i/image/M00/6E/D5/CgqCHl-zkEGALTHPAADFZZM7Y2A139.png"}),n(),k,_,h,l(a,{alt:"6.png",src:"https://s0.lgstatic.com/i/image/M00/6E/C9/Ciqc1F-zkEyAMNXQAAF_oit25-o273.png"}),n(),m,l(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6E/C9/Ciqc1F-zkF6AHgUEAAE3K8dR6QQ826.png"}),n(),f,B,l(a,{alt:"9.png",src:"https://s0.lgstatic.com/i/image/M00/6E/D5/CgqCHl-zkGmAYDBMAAFODGWwRfo125.png"}),n(),b,l(a,{alt:"8.png",src:"https://s0.lgstatic.com/i/image/M00/6E/C9/Ciqc1F-zkHqAH3diAAGWl6aQJy8860.png"}),n(),I,P,l(a,{alt:"7.png",src:"https://s0.lgstatic.com/i/image/M00/6E/C9/Ciqc1F-zkISAPopjAAH9Njd3pOE049.png"}),n(),U])}const z=p(c,[["render",S]]);export{G as __pageData,z as default};
