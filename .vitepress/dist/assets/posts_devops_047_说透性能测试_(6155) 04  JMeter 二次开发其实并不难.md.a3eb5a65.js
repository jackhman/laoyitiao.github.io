import{_ as o,j as e,o as t,g as c,k as l,h as a,s,Q as p}from"./chunks/framework.4e7d56ce.js";const _=JSON.parse('{"title":"04JMeter二次开发其实并不难","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/047_说透性能测试/(6155) 04  JMeter 二次开发其实并不难.md","filePath":"posts/devops/047_说透性能测试/(6155) 04  JMeter 二次开发其实并不难.md","lastUpdated":1696682708000}'),r={name:"posts/devops/047_说透性能测试/(6155) 04  JMeter 二次开发其实并不难.md"},y=s("h1",{id:"_04jmeter二次开发其实并不难",tabindex:"-1"},[a("04JMeter二次开发其实并不难 "),s("a",{class:"header-anchor",href:"#_04jmeter二次开发其实并不难","aria-label":'Permalink to "04JMeter二次开发其实并不难"'},"​")],-1),E=s("p",null,"上一讲我们通过学习 JMeter 的脚本编写方式和执行方式，掌握了如何让 JMeter 更加有效地运行，其技术思路是使用 JMeter 本身或者社区提供的现成方案去实现，这基本已经满足了绝大多数性能测试的需求。",-1),i=s("p",null,"随着互联网行业发展，各种技术方案层出不穷，但是任何方案都不是万能的，有些需求是要我们自己写代码去实现的，JMeter 也留了相应的入口便于我们编写代码，所以本讲将介绍三种插件编写方式：",-1),d=s("ul",null,[s("li",null,[s("p",null,"自定义 BeanShell 功能")]),s("li",null,[s("p",null,"自定义请求编写（Java Sampler）")]),s("li",null,[s("p",null,"自定义函数助手")])],-1),u=p(`<h3 id="自定义-beanshell-功能" tabindex="-1">自定义 BeanShell 功能 <a class="header-anchor" href="#自定义-beanshell-功能" aria-label="Permalink to &quot;自定义 BeanShell 功能&quot;">​</a></h3><h4 id="什么是-beanshell" tabindex="-1">什么是 BeanShell <a class="header-anchor" href="#什么是-beanshell" aria-label="Permalink to &quot;什么是 BeanShell&quot;">​</a></h4><p>BeanShell 是由 Java 编写的，相当于一个小巧的 Java <strong>源码解释器</strong>，简单来说就是你可以在里面写代码，然后通过 Beanshell 翻译成插件可以识别的指令去执行相关操作。</p><h4 id="jmeter-中用-beanshell-的优势" tabindex="-1">JMeter 中用 BeanShell 的优势 <a class="header-anchor" href="#jmeter-中用-beanshell-的优势" aria-label="Permalink to &quot;JMeter 中用 BeanShell 的优势&quot;">​</a></h4><p>JMeter 也是由 Java 编写的，而 Java 运行前需要先编译，而 BeanShell 作为一款解释器直接运行源代码就可以。</p><h4 id="beanshell-在-jmeter-的作用" tabindex="-1">BeanShell 在 JMeter 的作用 <a class="header-anchor" href="#beanshell-在-jmeter-的作用" aria-label="Permalink to &quot;BeanShell 在 JMeter 的作用&quot;">​</a></h4><p>BeanShell 在 JMeter 中有着广泛的应用，包括前置处理器、后置处理器、Sampler 等，我们来看下这些主要应用是做什么的。</p><ul><li><p>前置处理器：主要是在接口请求前做一些逻辑，生成参数化数据。</p></li><li><p>后置处理器：用于提取参数、参数格式设置等。</p></li><li><p>Sampler：可以作为独立的请求，支持各类请求编写、数据生成。</p></li></ul><h4 id="beanshell-的常见用法举例" tabindex="-1">BeanShell 的常见用法举例 <a class="header-anchor" href="#beanshell-的常见用法举例" aria-label="Permalink to &quot;BeanShell 的常见用法举例&quot;">​</a></h4><p>对我来说，BeanShell 最常被用于对请求或者返回内容进行获取或者加工，其中 prev 是对当前的取样进行访问，执行了对响应状态码、响应信息、请求头等的操作，示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;code is  &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">prev.</span><span style="color:#B392F0;">getResponseCode</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">#获取响应的状态码</span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;response is &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">prev.</span><span style="color:#B392F0;">getResponseDataAsString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">#获取响应信息</span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;content_type  &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">prev.</span><span style="color:#B392F0;">getContentType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">#获取头文件中ContentType类型</span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;header &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">prev.</span><span style="color:#B392F0;">getRequestHeaders</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">#获取取样器请求首部字段</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;code is  &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">prev.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">#获取响应的状态码</span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;response is &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">prev.</span><span style="color:#6F42C1;">getResponseDataAsString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">#获取响应信息</span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;content_type  &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">prev.</span><span style="color:#6F42C1;">getContentType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">#获取头文件中ContentType类型</span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;header &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">prev.</span><span style="color:#6F42C1;">getRequestHeaders</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">#获取取样器请求首部字段</span></span></code></pre></div><p>通过以上方式，基本实现了对请求的基本信息的获取，然后你就可以对这些信息做进一步的提取、判断等操作。可能你会问我，使用 info 级别的日志打印，JMeter 还支持 error 级别的日志打印吗？答案是支持的，示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cctester&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cctester&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cctester&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cctester&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>你可以在 BeanShell 中自行验证下，使用 log 和 error 的方式对于 JMeter 的界面提示信息是否有区别。</p><p>JMeter 调用 BeanShell 解释器来运行脚本，同样需要注意的是不建议过度使用这个插件， 因为在 JMeter 高并发时，它将会<strong>消耗较多的本地资源</strong>，所以一般遇到逻辑相对复杂且代码量较大的情况，我们会使用 JMeter 的另一种特色功能：开发自定义插件（jar 形式），一般来说自定义的插件会帮助我们实现两方面功能：</p><ul><li><p>JMeter 本身需要自行拓展的请求或者不支持的测试协议，我们可以使用 Java 请求来完成；</p></li><li><p><strong>自定义辅助函数</strong>，协助我们进行性能测试。</p></li></ul><h3 id="自定义请求编写-java-sampler" tabindex="-1">自定义请求编写（Java Sampler） <a class="header-anchor" href="#自定义请求编写-java-sampler" aria-label="Permalink to &quot;自定义请求编写（Java Sampler）&quot;">​</a></h3><p>为了让你能够系统地学习 Java Sampler 的编写，我将分为如下四部分来介绍。</p><ul><li><p>什么是 Maven</p></li><li><p>什么是 Pom</p></li><li><p>实现 Java Sampler 功能的两种方式</p></li><li><p>实例：使用 Java Sampler 重写 POST 请求</p></li></ul><h4 id="什么是-maven" tabindex="-1">什么是 Maven <a class="header-anchor" href="#什么是-maven" aria-label="Permalink to &quot;什么是 Maven&quot;">​</a></h4><p>Maven 是一个<strong>项目管理工具</strong>，它可以很方便地管理项目依赖的第三方类库及其版本，说得再通俗一点：</p><ul><li><p>没有它之前你得手动下载对应的 jar，并且复制到项目里面，升级的话又得重新下载；</p></li><li><p>有了 Maven 之后你只需要填写依赖的包名词及其版本号，就能自动帮你下载对应的版本然后自动进行构建，如果说 Maven 只是名字或者代号，那么灵魂就是 Pom 了。</p></li></ul><h4 id="什么是-pom" tabindex="-1">什么是 Pom <a class="header-anchor" href="#什么是-pom" aria-label="Permalink to &quot;什么是 Pom&quot;">​</a></h4><p>在 Maven 里，project 可以没有代码，但是必须包含 pom.xml 文件。pom 文件是 Maven 对应的配置文件，我们依赖的相关信息可以在 pom.xml 中进行配置，它必须包含 modelVersion、groupId、artifactId 和 version 这四个元素，下面来看下这些元素具体的作用。</p><ul><li><strong>modelVersion</strong>：指定了当前 POM 模型的版本，对于 Maven 2 及 Maven 3 来说都是 4.0.0。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">modelVersion</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">4.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">modelVersion</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">modelVersion</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">4.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">modelVersion</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><strong>groupId</strong>：组织标识、项目名称。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">com.cctester</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">com.cctester</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><strong>artifactId</strong>：模块名称，当前项目组中唯一的 ID。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">mavenTest</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">mavenTest</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><strong>version</strong>：项目当前的版本号。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">1.0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SNAPSHOT</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">1.0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SNAPSHOT</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><strong>packaging</strong>：打包格式，可以为 jar、war 等。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">packaging</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">jar</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">packaging</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">packaging</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">jar</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">packaging</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>开发之前在 pom 文件里引入相应的 jar 包，这些 jar 包会给我们提供相应的类或者接口，引入方式如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">org.apache.jmeter</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ApacheJMeter_core</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">5.3</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">org.apache.jmeter</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ApacheJMeter_java</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">5.3</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">org.apache.jmeter</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ApacheJMeter_core</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">5.3</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">org.apache.jmeter</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ApacheJMeter_java</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">5.3</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h4 id="实现-java-sampler-功能的两种方式" tabindex="-1"><strong>实现 Java Sampler 功能的两种方式</strong> <a class="header-anchor" href="#实现-java-sampler-功能的两种方式" aria-label="Permalink to &quot;**实现 Java Sampler 功能的两种方式**&quot;">​</a></h4><ul><li><p>继承 AbstractJavaSamplerClient 抽象类；</p></li><li><p>实现 JavaSamplerClient 接口。</p></li></ul><p>通过阅读源码可以发现 AbstractJavaSamplerClient 抽象类是 JavaSamplerClient 接口的子类，想必我们都知道实现一个接口就必须实现接口里的所有方法，然而当你不需要实现所有方法时，继承 AbstractJavaSamplerClient 抽象类也是一个不错的选择。为了学习的全面性我就以实现 JavaSamplerClient 接口的方式去讲解所涉及的四个方法。</p><p>（1）如下所示，这个方法由 JMeter 在进行添加 JavaRequest 时第一个运行，它决定了你要在 GUI 中默认显示哪些属性。当每次在 GUI 里点击建立 java requst sampler 的时候会调用该方法。该方法设置了 parameters 的初始值，也可以在 sampler 的 GUI 界面做进一步的修改。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Arguments </span><span style="color:#B392F0;">getDefaultParameters</span><span style="color:#E1E4E8;">() {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Arguments </span><span style="color:#6F42C1;">getDefaultParameters</span><span style="color:#24292E;">() {}</span></span></code></pre></div><p>（2）如下所示，这个方法用于初始化测试脚本里面用到的变量，这些变量会在后续执行中使用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupTest</span><span style="color:#E1E4E8;">(JavaSamplerContext context) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupTest</span><span style="color:#24292E;">(JavaSamplerContext context) {}</span></span></code></pre></div><p>（3）如下所示，<strong>这个方法是实现功能逻辑的主方法</strong>，每个线程会循环执行这个方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SampleResult </span><span style="color:#B392F0;">runTest</span><span style="color:#E1E4E8;">(JavaSamplerContext context) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SampleResult </span><span style="color:#6F42C1;">runTest</span><span style="color:#24292E;">(JavaSamplerContext context) {}</span></span></code></pre></div><ul><li><p>计时开始的时刻是从 SampleResult 类里面的 sampleStart() 方法执行开始。</p></li><li><p>计时结束的时刻是 sampleEnd() 方法执行结束。</p></li><li><p>setSuccessful() 方法用来表示测试的成功与否，通常使用 try catch 来设置结果，也可以用 if 语句。</p></li><li><p>setResponseData() 方法用来为测试结果传递数据。</p></li></ul><p>（4）如下所示，这个方法在每个线程执行完所有的测试工作之后执行，有点像 finally 的功能，比如，我开了一个数据库的连接，那么我要在所有的线程完成工作后关闭。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">teardownTest</span><span style="color:#E1E4E8;">(JavaSamplerContext context) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">teardownTest</span><span style="color:#24292E;">(JavaSamplerContext context) {}</span></span></code></pre></div><h4 id="案例-使用-javasampler-重写-http-的-post-请求" tabindex="-1">案例：使用 JavaSampler 重写 HTTP 的 POST 请求 <a class="header-anchor" href="#案例-使用-javasampler-重写-http-的-post-请求" aria-label="Permalink to &quot;案例：使用 JavaSampler 重写 HTTP 的 POST 请求&quot;">​</a></h4><p>相信你在平时工作中会经常接触到 POST 请求，接下来我将举一个有更多代入感的例子。</p><p>（1）首先我们来完成 POST 请求的核心方法，先使用 HttpClients 发送构建的 POST 数据包，然后获取到返回值，这一步是完成 POST 请求的基本步骤，示例代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//HttpClients提供功支持 HTTP 协议的客户端工具</span></span>
<span class="line"><span style="color:#E1E4E8;">httpClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HttpClients.</span><span style="color:#B392F0;">createDefault</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//新建一个HttpPost请求的对象将url，接口参数等信息传给这个对象</span></span>
<span class="line"><span style="color:#E1E4E8;">HttpPost httpPost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpPost</span><span style="color:#E1E4E8;">(URL);</span></span>
<span class="line"><span style="color:#6A737D;">//传入请求参数</span></span>
<span class="line"><span style="color:#E1E4E8;">httpPost.</span><span style="color:#B392F0;">setEntity</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UrlEncodedFormEntity</span><span style="color:#E1E4E8;">(Value, UTF8_CHARSET));</span></span>
<span class="line"><span style="color:#6A737D;">// 设置header信息，指定报文头Content-type等</span></span>
<span class="line"><span style="color:#E1E4E8;">httpPost.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;xxxxx&quot;</span><span style="color:#E1E4E8;">)；</span></span>
<span class="line"><span style="color:#6A737D;">// 执行请求操作，并拿到结果</span></span>
<span class="line"><span style="color:#E1E4E8;">response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> httpClient.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(httpPost);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//HttpClients提供功支持 HTTP 协议的客户端工具</span></span>
<span class="line"><span style="color:#24292E;">httpClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HttpClients.</span><span style="color:#6F42C1;">createDefault</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//新建一个HttpPost请求的对象将url，接口参数等信息传给这个对象</span></span>
<span class="line"><span style="color:#24292E;">HttpPost httpPost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpPost</span><span style="color:#24292E;">(URL);</span></span>
<span class="line"><span style="color:#6A737D;">//传入请求参数</span></span>
<span class="line"><span style="color:#24292E;">httpPost.</span><span style="color:#6F42C1;">setEntity</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UrlEncodedFormEntity</span><span style="color:#24292E;">(Value, UTF8_CHARSET));</span></span>
<span class="line"><span style="color:#6A737D;">// 设置header信息，指定报文头Content-type等</span></span>
<span class="line"><span style="color:#24292E;">httpPost.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;xxxxx&quot;</span><span style="color:#24292E;">)；</span></span>
<span class="line"><span style="color:#6A737D;">// 执行请求操作，并拿到结果</span></span>
<span class="line"><span style="color:#24292E;">response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> httpClient.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(httpPost);</span></span></code></pre></div><p>（2）接下来实现 JavaSamplerClient 接口，这是编写 Java Sampler 插件需要实现的核心接口，涉及的方法是 getDefaultParameters() 和 runTest()，作用上文已经描述过。下面带你来看具体怎么使用的，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//这是决定我们JMeter界面需要输入的内容，你可以看到有了url，username 和password信息，并且给出了默认值</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Arguments </span><span style="color:#B392F0;">getDefaultParameters</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Arguments arguments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Arguments</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    arguments.</span><span style="color:#B392F0;">addArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;127.0.0.1:9081&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    arguments.</span><span style="color:#B392F0;">addArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;cctester&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    arguments.</span><span style="color:#B392F0;">addArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arguments;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//这是决定我们JMeter界面需要输入的内容，你可以看到有了url，username 和password信息，并且给出了默认值</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Arguments </span><span style="color:#6F42C1;">getDefaultParameters</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Arguments arguments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arguments</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    arguments.</span><span style="color:#6F42C1;">addArgument</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;127.0.0.1:9081&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    arguments.</span><span style="color:#6F42C1;">addArgument</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cctester&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    arguments.</span><span style="color:#6F42C1;">addArgument</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arguments;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这一步实际的效果图可以看下方的初始界面图。</p>`,55),g=p(`<p>初始界面图</p><p>（3）在上一步骤进行了参数的输入，接下来实现接收这些参数，并进行参数的输入、发送、返回判断等，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SampleResult </span><span style="color:#B392F0;">runTest</span><span style="color:#E1E4E8;">(JavaSamplerContext javaSamplerContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//生成sampleResult对象，用于请求的命名、标记状态、添加返回内容等</span></span>
<span class="line"><span style="color:#E1E4E8;">    SampleResult sampleResult</span><span style="color:#F97583;">=new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SampleResult</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    sampleResult.</span><span style="color:#B392F0;">setSampleLabel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cctester_login&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//调用上文中实现的post请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    PostTest postTest</span><span style="color:#F97583;">=new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostTest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//接受JMeter界面上传输的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    String username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> javaSamplerContext.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> javaSamplerContext.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> javaSamplerContext.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//标记请求开始</span></span>
<span class="line"><span style="color:#E1E4E8;">    sampleResult.</span><span style="color:#B392F0;">sampleStart</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        HttpResponse result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">postTest.</span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">(url,username,password);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String entity</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EntityUtils.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">getEntity</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据返回内容判断结果状态并展示结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.</span><span style="color:#B392F0;">getStatusLine</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStatusCode</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            sampleResult.</span><span style="color:#B392F0;">setSuccessful</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            sampleResult.</span><span style="color:#B392F0;">setResponseCodeOK</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            sampleResult.</span><span style="color:#B392F0;">setResponseData</span><span style="color:#E1E4E8;">(entity, </span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            sampleResult.</span><span style="color:#B392F0;">setSuccessful</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            sampleResult.</span><span style="color:#B392F0;">setResponseData</span><span style="color:#E1E4E8;">(entity, </span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   ）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SampleResult </span><span style="color:#6F42C1;">runTest</span><span style="color:#24292E;">(JavaSamplerContext javaSamplerContext) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//生成sampleResult对象，用于请求的命名、标记状态、添加返回内容等</span></span>
<span class="line"><span style="color:#24292E;">    SampleResult sampleResult</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SampleResult</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    sampleResult.</span><span style="color:#6F42C1;">setSampleLabel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cctester_login&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//调用上文中实现的post请求</span></span>
<span class="line"><span style="color:#24292E;">    PostTest postTest</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostTest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//接受JMeter界面上传输的参数</span></span>
<span class="line"><span style="color:#24292E;">    String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> javaSamplerContext.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> javaSamplerContext.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> javaSamplerContext.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//标记请求开始</span></span>
<span class="line"><span style="color:#24292E;">    sampleResult.</span><span style="color:#6F42C1;">sampleStart</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        HttpResponse result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">postTest.</span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">(url,username,password);</span></span>
<span class="line"><span style="color:#24292E;">        String entity</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EntityUtils.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getEntity</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据返回内容判断结果状态并展示结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.</span><span style="color:#6F42C1;">getStatusLine</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStatusCode</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            sampleResult.</span><span style="color:#6F42C1;">setSuccessful</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            sampleResult.</span><span style="color:#6F42C1;">setResponseCodeOK</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            sampleResult.</span><span style="color:#6F42C1;">setResponseData</span><span style="color:#24292E;">(entity, </span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            sampleResult.</span><span style="color:#6F42C1;">setSuccessful</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            sampleResult.</span><span style="color:#6F42C1;">setResponseData</span><span style="color:#24292E;">(entity, </span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   ）</span></span></code></pre></div><p>（4）完成后打成 jar 包放到 /lib/ext 下重启 JMeter 即可，实际的效果图你可以参考上方的初始界面图和下方的运行图。</p>`,4),F=p(`<p>运行图</p><h3 id="自定义函数助手" tabindex="-1">自定义函数助手 <a class="header-anchor" href="#自定义函数助手" aria-label="Permalink to &quot;自定义函数助手&quot;">​</a></h3><p>通过 Java Sampler 插件开发的学习，我们知道 JMeter 相关插件的开发其实都是有一定的套路可循，那 JMeter 函数助手开发也不例外，接下来进行函数助手开发流程的了解。</p><p>（1）引入 Maven 包，这个包会给我们提供函数助手开发相关的类，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">org.apache.jmeter</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ApacheJMeter_functions</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">5.3</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">org.apache.jmeter</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">ApacheJMeter_functions</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">5.3</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>（2）接下来新建我们的类包，此时新建的包需要特别注意，<strong>名字只能是 functions 结尾</strong>，否则打包放到 JMeter 中是没有办法识别这个插件的，然后代码中继承 AbstractFunction 类就可以实现，一起看下需要实现哪些方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getReferenceKey</span><span style="color:#E1E4E8;">() {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getReferenceKey</span><span style="color:#24292E;">() {}</span></span></code></pre></div><p>这一方法表示函数助手对话框中的下拉框中显示的函数名称，如下图所示：</p>`,8),h=p('<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getArgumentDesc</span><span style="color:#E1E4E8;">() {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getArgumentDesc</span><span style="color:#24292E;">() {}</span></span></code></pre></div><p>这一方法是设置入参的描述语，用于函数助手对话框中，显示函数名称提示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setParameters</span><span style="color:#E1E4E8;">(Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">CompoundVariable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> collection) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setParameters</span><span style="color:#24292E;">(Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">CompoundVariable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> collection) {}</span></span></code></pre></div><p>这一方法用于我们的参数值传入。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(SampleResult sampleResult, Sampler sampler){}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(SampleResult sampleResult, Sampler sampler){}</span></span></code></pre></div><p>这一方法是根据入参，执行核心逻辑，保存结果至相应的变量中。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过本讲的学习，你知道了如何使用代码方式实现自己需要的插件，beanshell 和 jar 包引入都是工作中常见的，相信这部分知识会对你的工作产生比较大的帮助，这也是 JMeter 的特色功能，不仅落地性强而且社区资料完善。</p><p><strong>这里给你留个小作业</strong>：相信经过上文的讲解以及实例，你比较清楚地知道了插件开发的核心流程，你可以根据自己工作中的自定义函数助手的需求，按照上面的代码结构自行完成。在实践过程中遇到任何问题，欢迎在留言区留言。</p><p>下一讲我将继续带你一起进行性能测试平台开发的流程讲解，相信对于工具层面的认知会更上一层楼。</p>',10);function v(m,A,C,D,b,S){const n=e("Image");return t(),c("div",null,[y,E,i,d,l(n,{alt:"Lark20210118-174730.png",src:"https://s0.lgstatic.com/i/image2/M01/06/91/Cip5yGAFWiKADSIlAAEajo52AJ8631.png"}),a(),u,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/06/8C/Cip5yGAFPAKAEmBcAAB8OFXAQYo399.png"}),a(),g,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/06/8C/Cip5yGAFPBOAecdTAAC22dYxB2Q653.png"}),a(),F,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/06/8C/Cip5yGAFPB6ADKzZAAB86ItSH7Q951.png"}),a(),h])}const B=o(r,[["render",v]]);export{_ as __pageData,B as default};
