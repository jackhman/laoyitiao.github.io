import{_ as p,j as e,o,g as t,k as a,s,h as r,Q as l}from"./chunks/framework.e0c66c3f.js";const _=JSON.parse('{"title":"Page 和 Sort 参数原理 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4716) 16  如何自定义 HandlerMethodArgumentReolver？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4716) 16  如何自定义 HandlerMethodArgumentReolver？.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4716) 16  如何自定义 HandlerMethodArgumentReolver？.md"},E=s("p",null,"上一讲我们介绍了 SpringDataWebConfiguration 类的用法，那么这次我们来看一下这个类是如何被加载的，PageableHandlerMethodArgumentResolver 和 SortHandlerMethodArgumentResolver 又是如何生效的，以及如何定义自己的 HandlerMethodArgumentResolvers 类，还有没有其他 Web 场景需要我们自定义呢？",-1),y=s("p",null,"关于上述几个类，你要先在心里有点印象，我们接下来一个一个详细讲解。",-1),i=s("h3",{id:"page-和-sort-参数原理",tabindex:"-1"},[r("Page 和 Sort 参数原理 "),s("a",{class:"header-anchor",href:"#page-和-sort-参数原理","aria-label":'Permalink to "Page 和 Sort 参数原理"'},"​")],-1),d=s("p",null,"想要知道分页和排序参数的加载原理，我们可以通过源码发现是 @EnableSpringDataWebSupport 将这个类加载进去的，其关键代码如下图所示：",-1),u=s("p",null,"其中，@EnableSpringDataWebSupport 注解是上一讲讲解的核心，即 Spring Data JPA 对 Web 支持需要开启的入口，由于我们使用的是 Spring Boot，所以 @EnableSpringDataWebSupport 不需要我们手动去指定。",-1),g=s("p",null,"这是由于 Spring Boot 有自动加载的机制，我们会发现 org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration 类里面引用了 @EnableSpringDataWebSupport 的注解，所以也不需要我们手动去引用了。这里面的关键代码如下图所示：",-1),A=s("p",null,"而 Spring Boot 的自动加载的核心文件就是 spring.factories 文件，那么我们打开 spring-boot-autoconfigure-2.3.3.jar 包，看一下 spring.factories 文件内容，可以找到 SpringDataWebAutoConfiguration 这个配置类，如下：",-1),F=s("p",null,"所以可以得出结论：只要是 Spring Boot 项目，我们什么都不需要做，它就会天然地让 Spring Data JPA 支持 Web 相关的操作。",-1),h=s("p",null,"而 PageableHandlerMethodArgumentResolver 和 SortHandlerMethodArgumentResolver 两个类是通过 SpringDataWebConfiguration 加载进去的，所以我们基本可以知道 Spring Data JPA 的 Page 和 Sort 参数是因为 SpringDataWebConfiguration 里面 @Bean 的注入才生效的。",-1),v=l(`<p>通过 PageableHandlerMethodArgumentResolver 和 SortHandlerMethodArgumentResolver 这两个类的源码，我们可以分析出它们分别实现了 Spring MVC Web 框架里面的 org.springframework.web.method.support.HandlerMethodArgumentResolver 这个接口，从而对 Request 里面的 Page 和 Sort 的参数做了处理逻辑和解析逻辑。</p><p>那么在实际工作中，可能存在特殊情况需要对其进行扩展，比如 Page 的参数可能需要支持多种 Key 的情况，那么我们应该怎么做呢？下面通过 HandlerMethodArgumentResolver 的用法来学习一下。</p><h3 id="handlermethodargumentresolver-用法" tabindex="-1">HandlerMethodArgumentResolver 用法 <a class="header-anchor" href="#handlermethodargumentresolver-用法" aria-label="Permalink to &quot;HandlerMethodArgumentResolver 用法&quot;">​</a></h3><h4 id="handlermethodargumentresolvers-详解" tabindex="-1">HandlerMethodArgumentResolvers 详解 <a class="header-anchor" href="#handlermethodargumentresolvers-详解" aria-label="Permalink to &quot;HandlerMethodArgumentResolvers 详解&quot;">​</a></h4><p>熟悉 MVC 的人都知道，HandlerMethodArgumentResolvers 在 Spring MVC 中的主要作用是对 Controller 里面的方法参数做解析，即可以把 Request 里面的值映射到方法的参数中。我们打开此类的源码会发现只有两个方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HandlerMethodArgumentResolver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//检查方法的参数是否支持处理和转化</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">supportsParameter</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据reqest上下文，解析方法的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   Object </span><span style="color:#B392F0;">resolveArgument</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> ModelAndViewContainer </span><span style="color:#FFAB70;">mavContainer</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         NativeWebRequest </span><span style="color:#FFAB70;">webRequest</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> WebDataBinderFactory </span><span style="color:#FFAB70;">binderFactory</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerMethodArgumentResolver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//检查方法的参数是否支持处理和转化</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">supportsParameter</span><span style="color:#24292E;">(MethodParameter </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据reqest上下文，解析方法的参数</span></span>
<span class="line"><span style="color:#24292E;">   Object </span><span style="color:#6F42C1;">resolveArgument</span><span style="color:#24292E;">(MethodParameter </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> ModelAndViewContainer </span><span style="color:#E36209;">mavContainer</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         NativeWebRequest </span><span style="color:#E36209;">webRequest</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> WebDataBinderFactory </span><span style="color:#E36209;">binderFactory</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此接口的应用场景非常广泛，我们可以看到其子类非常多，如下图所示：</p>`,7),m=l('<p>其中几个类的作用如下：</p><ul><li><p>PathVariableMapMethodArgumentResolver 专门解析 @PathVariable 里面的值；</p></li><li><p>RequestResponseBodyMethodProcessor 专门解析带 @RequestBody 注解的方法参数的值；</p></li><li><p>RequestParamMethodArgumentResolver 专门解析 @RequestParam 的注解参数的值，当方法的参数中没有任何注解的时候，默认是 @RequestParam；</p></li><li><p>以及我们上一讲提到的 PageableHandlerMethodArgumentResolver 和 SortHandlerMethodArgumentResolver。</p></li></ul><p>到这里你会发现，我们上一讲还讲解了 HttpMessageConverter，那么它和 HandlerMethodArgumentResolvers 是什么关系呢？我们接着看。</p><h4 id="handlermethodargumentresolvers-与-httpmessageconverter-的关系" tabindex="-1">HandlerMethodArgumentResolvers 与 HttpMessageConverter 的关系 <a class="header-anchor" href="#handlermethodargumentresolvers-与-httpmessageconverter-的关系" aria-label="Permalink to &quot;HandlerMethodArgumentResolvers 与 HttpMessageConverter 的关系&quot;">​</a></h4><p>我们打开 RequestResponseBodyMethodProcessor 就会发现，这个类中主要处理的是，方法里面带 @RequestBody 注解的参数，如下图所示：</p>',5),D=l(`<p>而其中的 readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType()) 方法，如果我们点进去继续观察，发现里面会根据 Http 请求的 MediaType，来选择不同的 HttpMessageConverter 进行转化。</p><p>所以到这里你可以很清楚 HandlerMethodArgumentResolvers 与 HttpMessageConverter 的关系了，即不同的 HttpMessageConverter 都是由 RequestResponseBodyMethodProcessor 进行调用的。</p><p>那么调用关系我们知道了，如此多的 HttpMessageConverter 之间是通过什么顺序执行的呢？</p><h4 id="httpmessageconverter-的执行顺序" tabindex="-1">HttpMessageConverter 的执行顺序 <a class="header-anchor" href="#httpmessageconverter-的执行顺序" aria-label="Permalink to &quot;HttpMessageConverter 的执行顺序&quot;">​</a></h4><p>当我们自定义 HandlerMethodArgumentResolver 时，通过下面的方法加载进去。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addArgumentResolvers</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">HandlerMethodArgumentResolver</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> resolvers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   resolvers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(myPageableHandlerMethodArgumentResolver);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addArgumentResolvers</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">HandlerMethodArgumentResolver</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> resolvers) {</span></span>
<span class="line"><span style="color:#24292E;">   resolvers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(myPageableHandlerMethodArgumentResolver);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 List<code>&lt;HandlerMethodArgumentResolver&gt;</code> 里面自定义的 resolver 的优先级是最高的，也就是会优先执行 HandlerMethodArgumentResolver 之后，才会按照顺序执行系统里面自带的那一批 HttpMessageConverter，按照 List 的循环顺序一个一个执行。</p><p>Spring 里面有个执行效率问题，就是一旦一次执行找到了需要的 HandlerMethodArgumentResolver 的时候，利用 Spring 中的缓存机制，执行过程中就不会再遍历 List<code>&lt;HandlerMethodArgumentResolver&gt;</code> 了，而是直接用上次找到的 HandlerMethodArgumentResolver，这样提升了执行效率。</p><p>如果想要了解更多的 Resolver，你可以看下图这个类，我不一一细说了。</p>`,9),R=l(`<p>那么了解了这么多，能否举个实战的例子呢？</p><h3 id="自定义-handlermethodargumentresolver-实战" tabindex="-1">自定义 HandlerMethodArgumentResolver 实战 <a class="header-anchor" href="#自定义-handlermethodargumentresolver-实战" aria-label="Permalink to &quot;自定义 HandlerMethodArgumentResolver 实战&quot;">​</a></h3><p>在实际的工作中，你可能会遇到对老项目进行改版的工作，如果要我们把旧的 API 接口改造成 JPA 的技术实现，那么可能会出现需要新、老参数的问题。假设在实际场景中，我们 Page 的参数是 page[number]，而 page size 的参数是 page[size]，看看应该怎么做。</p><p><strong>第一步：新建 MyPageableHandlerMethodArgumentResolver。</strong></p><p>这个类的作用有两个：</p><ol><li><p>用来兼容 ?page[size]=2&amp;page[number]=0 的参数情况；</p></li><li><p>支持 JPA 新的参数形式 ?size=2&amp;page=0。</p></li></ol><p>我们通过自定义的 MyPageableHandlerMethodArgumentResolver 来实现这个需求，请看下面这段代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 通过@Component把此类加载到Spring的容器里面去 </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyPageableHandlerMethodArgumentResolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PageableHandlerMethodArgumentResolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HandlerMethodArgumentResolver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//我们假设sort的参数没有发生变化，采用PageableHandlerMethodArgumentResolver里面的写法</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SortHandlerMethodArgumentResolver DEFAULT_SORT_RESOLVER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SortHandlerMethodArgumentResolver</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//给定两个默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Integer DEFAULT_PAGE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Integer DEFAULT_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//兼容新版，引入JPA的分页参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String JPA_PAGE_PARAMETER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;page&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String JPA_SIZE_PARAMETER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;size&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//兼容原来老的分页参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String DEFAULT_PAGE_PARAMETER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;page[number]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String DEFAULT_SIZE_PARAMETER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;page[size]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SortArgumentResolver sortResolver;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//模仿PageableHandlerMethodArgumentResolver里面的构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyPageableHandlerMethodArgumentResolver</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> SortArgumentResolver </span><span style="color:#FFAB70;">sortResolver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.sortResolver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sortResolver </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> DEFAULT_SORT_RESOLVER </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sortResolver;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">supportsParameter</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">//    假设用我们自己的类MyPageRequest接收参数</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> MyPageRequest.class.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(parameter.</span><span style="color:#B392F0;">getParameterType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//同时我们也可以支持通过Spring Data JPA里面的Pageable参数进行接收，两种效果是一样的</span></span>
<span class="line"><span style="color:#6A737D;">//    return Pageable.class.equals(parameter.getParameterType());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 参数封装逻辑page和sort，JPA参数的优先级高于page[number]和page[size]参数</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//public Pageable resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) { //这种是Pageable的方式</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MyPageRequest </span><span style="color:#B392F0;">resolveArgument</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">, ModelAndViewContainer </span><span style="color:#FFAB70;">mavContainer</span><span style="color:#E1E4E8;">, NativeWebRequest </span><span style="color:#FFAB70;">webRequest</span><span style="color:#E1E4E8;">, WebDataBinderFactory </span><span style="color:#FFAB70;">binderFactory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      String jpaPageString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webRequest.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(JPA_PAGE_PARAMETER);</span></span>
<span class="line"><span style="color:#E1E4E8;">      String jpaSizeString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webRequest.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(JPA_SIZE_PARAMETER);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//我们分别取参数里面page、sort和 page[number]、page[size]的值</span></span>
<span class="line"><span style="color:#E1E4E8;">      String pageString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webRequest.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(DEFAULT_PAGE_PARAMETER);</span></span>
<span class="line"><span style="color:#E1E4E8;">      String sizeString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webRequest.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(DEFAULT_SIZE_PARAMETER);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//当两个都有值时候的优先级，及其默认值的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">      Integer page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jpaPageString </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(jpaPageString) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pageString </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(pageString) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> DEFAULT_PAGE;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//在这里同时可以计算 page+1的逻辑;如：page=page+1;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Integer size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jpaSizeString </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(jpaSizeString) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sizeString </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(sizeString) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> DEFAULT_SIZE;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//我们假设，sort排序的取值方法先不发生改变</span></span>
<span class="line"><span style="color:#E1E4E8;">      Sort sort </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sortResolver.</span><span style="color:#B392F0;">resolveArgument</span><span style="color:#E1E4E8;">(parameter, mavContainer, webRequest, binderFactory);</span></span>
<span class="line"><span style="color:#6A737D;">//    如果使用Pageable参数接收值，我们也可以不用自定义MyPageRequest对象，直接返回PageRequest;</span></span>
<span class="line"><span style="color:#6A737D;">//    return PageRequest.of(page,size,sort);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//将page和size计算出来的记过封装到我们自定义的MyPageRequest类里面去</span></span>
<span class="line"><span style="color:#E1E4E8;">      MyPageRequest myPageRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyPageRequest</span><span style="color:#E1E4E8;">(page, size,sort);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//返回controller里面的参数需要的对象；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> myPageRequest;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 通过@Component把此类加载到Spring的容器里面去 </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPageableHandlerMethodArgumentResolver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PageableHandlerMethodArgumentResolver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerMethodArgumentResolver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//我们假设sort的参数没有发生变化，采用PageableHandlerMethodArgumentResolver里面的写法</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SortHandlerMethodArgumentResolver DEFAULT_SORT_RESOLVER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SortHandlerMethodArgumentResolver</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//给定两个默认值</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Integer DEFAULT_PAGE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Integer DEFAULT_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//兼容新版，引入JPA的分页参数</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String JPA_PAGE_PARAMETER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;page&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String JPA_SIZE_PARAMETER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;size&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//兼容原来老的分页参数</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String DEFAULT_PAGE_PARAMETER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;page[number]&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String DEFAULT_SIZE_PARAMETER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;page[size]&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SortArgumentResolver sortResolver;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//模仿PageableHandlerMethodArgumentResolver里面的构造方法</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPageableHandlerMethodArgumentResolver</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> SortArgumentResolver </span><span style="color:#E36209;">sortResolver</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sortResolver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sortResolver </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> DEFAULT_SORT_RESOLVER </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sortResolver;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">supportsParameter</span><span style="color:#24292E;">(MethodParameter </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">//    假设用我们自己的类MyPageRequest接收参数</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> MyPageRequest.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(parameter.</span><span style="color:#6F42C1;">getParameterType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//同时我们也可以支持通过Spring Data JPA里面的Pageable参数进行接收，两种效果是一样的</span></span>
<span class="line"><span style="color:#6A737D;">//    return Pageable.class.equals(parameter.getParameterType());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 参数封装逻辑page和sort，JPA参数的优先级高于page[number]和page[size]参数</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//public Pageable resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) { //这种是Pageable的方式</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MyPageRequest </span><span style="color:#6F42C1;">resolveArgument</span><span style="color:#24292E;">(MethodParameter </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">, ModelAndViewContainer </span><span style="color:#E36209;">mavContainer</span><span style="color:#24292E;">, NativeWebRequest </span><span style="color:#E36209;">webRequest</span><span style="color:#24292E;">, WebDataBinderFactory </span><span style="color:#E36209;">binderFactory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      String jpaPageString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webRequest.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(JPA_PAGE_PARAMETER);</span></span>
<span class="line"><span style="color:#24292E;">      String jpaSizeString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webRequest.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(JPA_SIZE_PARAMETER);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//我们分别取参数里面page、sort和 page[number]、page[size]的值</span></span>
<span class="line"><span style="color:#24292E;">      String pageString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webRequest.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(DEFAULT_PAGE_PARAMETER);</span></span>
<span class="line"><span style="color:#24292E;">      String sizeString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webRequest.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(DEFAULT_SIZE_PARAMETER);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//当两个都有值时候的优先级，及其默认值的逻辑</span></span>
<span class="line"><span style="color:#24292E;">      Integer page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jpaPageString </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(jpaPageString) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pageString </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(pageString) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> DEFAULT_PAGE;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//在这里同时可以计算 page+1的逻辑;如：page=page+1;</span></span>
<span class="line"><span style="color:#24292E;">      Integer size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jpaSizeString </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(jpaSizeString) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sizeString </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(sizeString) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> DEFAULT_SIZE;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//我们假设，sort排序的取值方法先不发生改变</span></span>
<span class="line"><span style="color:#24292E;">      Sort sort </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sortResolver.</span><span style="color:#6F42C1;">resolveArgument</span><span style="color:#24292E;">(parameter, mavContainer, webRequest, binderFactory);</span></span>
<span class="line"><span style="color:#6A737D;">//    如果使用Pageable参数接收值，我们也可以不用自定义MyPageRequest对象，直接返回PageRequest;</span></span>
<span class="line"><span style="color:#6A737D;">//    return PageRequest.of(page,size,sort);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//将page和size计算出来的记过封装到我们自定义的MyPageRequest类里面去</span></span>
<span class="line"><span style="color:#24292E;">      MyPageRequest myPageRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPageRequest</span><span style="color:#24292E;">(page, size,sort);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//返回controller里面的参数需要的对象；</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> myPageRequest;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以通过代码里面的注释仔细看一下其中的逻辑，其实这个类并不复杂，就是取 Request 的 Page 相关的参数，封装到对象中返回给 Controller 的方法参数里面。其中 MyPageRequest 不是必需的，我只是为了给你演示不同的做法。</p><p><strong>第二步：新建 MyPageRequest。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 继承父类，可以省掉很多计算page和index的逻辑</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyPageRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PageRequest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyPageRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">, Sort </span><span style="color:#FFAB70;">sort</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(page, size, sort);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 继承父类，可以省掉很多计算page和index的逻辑</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPageRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PageRequest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPageRequest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">page</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">, Sort </span><span style="color:#E36209;">sort</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(page, size, sort);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此类，我们用来接收 Page 相关的参数值，也不是必需的。</p><p><strong>第三步：implements WebMvcConfigurer 加载 myPageableHandlerMethodArgumentResolver。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 实现WebMvcConfigurer</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyWebMvcConfigurer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebMvcConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> MyPageableHandlerMethodArgumentResolver myPageableHandlerMethodArgumentResolver;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 覆盖这个方法，把我们自定义的myPageableHandlerMethodArgumentResolver加载到原始的mvc的resolvers里面去</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">resolvers</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addArgumentResolvers</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">HandlerMethodArgumentResolver</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">resolvers</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      resolvers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(myPageableHandlerMethodArgumentResolver);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 实现WebMvcConfigurer</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyWebMvcConfigurer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> MyPageableHandlerMethodArgumentResolver myPageableHandlerMethodArgumentResolver;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 覆盖这个方法，把我们自定义的myPageableHandlerMethodArgumentResolver加载到原始的mvc的resolvers里面去</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">resolvers</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addArgumentResolvers</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">HandlerMethodArgumentResolver</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">resolvers</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      resolvers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(myPageableHandlerMethodArgumentResolver);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我利用 Spring MVC 的机制加载我们自定义的 myPageableHandlerMethodArgumentResolver，由于自定义的优先级是最高的，所以用 MyPageRequest.class</p><p>和 Pageable.class 都是可以的。</p><p><strong>第四步：我们看下 Controller 里面的写法。</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">//用Pageable这种方式也是可以的</span></span>
<span class="line"><span style="color:#E1E4E8;">@GetMapping(&quot;/users&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">public Page&lt;</span><span style="color:#FDAEB7;font-style:italic;">UserInfo</span><span style="color:#E1E4E8;">&gt; queryByPage(Pageable pageable, UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   return userInfoRepository.findAll(Example.of(userInfo),pageable);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">//用MyPageRequest进行接收</span></span>
<span class="line"><span style="color:#E1E4E8;">@GetMapping(&quot;/users/mypage&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">public Page&lt;</span><span style="color:#FDAEB7;font-style:italic;">UserInfo</span><span style="color:#E1E4E8;">&gt; queryByMyPage(MyPageRequest pageable, UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   return userInfoRepository.findAll(Example.of(userInfo),pageable);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">//用Pageable这种方式也是可以的</span></span>
<span class="line"><span style="color:#24292E;">@GetMapping(&quot;/users&quot;)</span></span>
<span class="line"><span style="color:#24292E;">public Page&lt;</span><span style="color:#B31D28;font-style:italic;">UserInfo</span><span style="color:#24292E;">&gt; queryByPage(Pageable pageable, UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#24292E;">   return userInfoRepository.findAll(Example.of(userInfo),pageable);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">//用MyPageRequest进行接收</span></span>
<span class="line"><span style="color:#24292E;">@GetMapping(&quot;/users/mypage&quot;)</span></span>
<span class="line"><span style="color:#24292E;">public Page&lt;</span><span style="color:#B31D28;font-style:italic;">UserInfo</span><span style="color:#24292E;">&gt; queryByMyPage(MyPageRequest pageable, UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#24292E;">   return userInfoRepository.findAll(Example.of(userInfo),pageable);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以看到，这里利用 Pageable 和 MyPageRequest 两种方式都是可以的。<br><strong>第五步：启动项目测试一下。</strong></p><p>我们依次可以测试下面两种情况，发现都是可以正常工作的。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GET http://127.0.0.1:8089/users?page[size]=2&amp;page[number]=0&amp;ages=10&amp;sort=id,desc</span></span>
<span class="line"><span style="color:#E1E4E8;">###</span></span>
<span class="line"><span style="color:#E1E4E8;">GET http://127.0.0.1:8089/users?size=2&amp;page=0&amp;ages=10&amp;sort=id,desc</span></span>
<span class="line"><span style="color:#E1E4E8;">###</span></span>
<span class="line"><span style="color:#E1E4E8;">GET http://127.0.0.1:8089/users/mypage?page[size]=2&amp;page[number]=0&amp;ages=10&amp;sort=id,desc</span></span>
<span class="line"><span style="color:#E1E4E8;">###</span></span>
<span class="line"><span style="color:#E1E4E8;">GET http://127.0.0.1:8089/users/mypage?size=2&amp;page=0&amp;ages=10&amp;sort=id,desc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GET http://127.0.0.1:8089/users?page[size]=2&amp;page[number]=0&amp;ages=10&amp;sort=id,desc</span></span>
<span class="line"><span style="color:#24292E;">###</span></span>
<span class="line"><span style="color:#24292E;">GET http://127.0.0.1:8089/users?size=2&amp;page=0&amp;ages=10&amp;sort=id,desc</span></span>
<span class="line"><span style="color:#24292E;">###</span></span>
<span class="line"><span style="color:#24292E;">GET http://127.0.0.1:8089/users/mypage?page[size]=2&amp;page[number]=0&amp;ages=10&amp;sort=id,desc</span></span>
<span class="line"><span style="color:#24292E;">###</span></span>
<span class="line"><span style="color:#24292E;">GET http://127.0.0.1:8089/users/mypage?size=2&amp;page=0&amp;ages=10&amp;sort=id,desc</span></span></code></pre></div><p>其中，你应该可以注意到，我演示的 Controller 方法里面有多个参数的，每个参数都各司其职，找到自己对应的 HandlerMethodArgumentResolver，这正是 Spring MVC 框架的优雅之处。</p><p>那么除了上面的 Demo，自定义 HandlerMethodArgumentResolver 对我们的实际工作还有什么建议呢？</p><h3 id="实际工作的建议" tabindex="-1">实际工作的建议 <a class="header-anchor" href="#实际工作的建议" aria-label="Permalink to &quot;实际工作的建议&quot;">​</a></h3><p>自定义 HandlerMethodArgumentResolver 到底对我们的实际工作起到哪些作用呢？分为下述几个场景。</p><h4 id="场景一" tabindex="-1">场景一 <a class="header-anchor" href="#场景一" aria-label="Permalink to &quot;场景一&quot;">​</a></h4><p>当我们在 Controller 里面处理某些参数时，重复的步骤非常多，那么我们就可以考虑写一下自己的框架，来处理请求里面的参数，而 Controller 里面的代码就会变得非常优雅，不需要关心其他框架代码，只要知道方法的参数有值就可以了。</p><h4 id="场景二" tabindex="-1">场景二 <a class="header-anchor" href="#场景二" aria-label="Permalink to &quot;场景二&quot;">​</a></h4><p>再举个例子，在实际工作中需要注意的是，默认 JPA 里面的 Page 是从 0 开始，而我们可能有些老的代码也要维护，因为老的代码大多数的 Page 都会从 1 开始。如果我们不自定义 HandlerMethodArgumentResolver，那么在用到分页时，每个 Controller 的方法里面都需要关心这个逻辑。那么这个时候你就应该想到上面列举的自定义 MyPageableHandlerMethodArgumentResolver 的 resolveArgument 方法的实现，使用这种方法我们只需要在里面修改 Page 的计算逻辑即可。</p><h4 id="场景三" tabindex="-1">场景三 <a class="header-anchor" href="#场景三" aria-label="Permalink to &quot;场景三&quot;">​</a></h4><p>再举个例子，在实际的工作中，还经常会遇到&quot;取当前用户&quot;的应用场景。此时，普通做法是，当使用到当前用户的 UserInfo 时，每次都需要根据请求 header 的 token 取到用户信息，伪代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user/info&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">getUserInfo</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestHeader</span><span style="color:#E1E4E8;"> String token) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 伪代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    Long userId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> redisTemplate.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(token);</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserInfo useInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">getById</span><span style="color:#E1E4E8;">(userId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">getUserInfo</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestHeader</span><span style="color:#24292E;"> String token) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 伪代码</span></span>
<span class="line"><span style="color:#24292E;">    Long userId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisTemplate.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(token);</span></span>
<span class="line"><span style="color:#24292E;">    UserInfo useInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">getById</span><span style="color:#24292E;">(userId);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果我们使用<code>HandlerMethodArgumentResolver</code>接口来实现，代码就会变得优雅许多。伪代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. 实现HandlerMethodArgumentResolver接口</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoArgumentResolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HandlerMethodArgumentResolver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RedisTemplate redisTemplate;</span><span style="color:#6A737D;">//伪代码，假设我们token是放在redis里面的</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoArgumentResolver</span><span style="color:#E1E4E8;">(RedisTemplate </span><span style="color:#FFAB70;">redisTemplate</span><span style="color:#E1E4E8;">, UserInfoRepository </span><span style="color:#FFAB70;">userInfoRepository</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.redisTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> redisTemplate;</span><span style="color:#6A737D;">//伪代码，假设我们token是放在redis里面的</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.userInfoRepository </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">supportsParameter</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> UserInfo.class.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(parameter.</span><span style="color:#B392F0;">getParameterType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">resolveArgument</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">, ModelAndViewContainer </span><span style="color:#FFAB70;">mavContainer</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          NativeWebRequest </span><span style="color:#FFAB70;">webRequest</span><span style="color:#E1E4E8;">, WebDataBinderFactory </span><span style="color:#FFAB70;">binderFactory</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">      HttpServletRequest nativeRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (HttpServletRequest) webRequest.</span><span style="color:#B392F0;">getNativeRequest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      String token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nativeRequest.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;token&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      Long userId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Long) redisTemplate.</span><span style="color:#B392F0;">opsForValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(token);</span><span style="color:#6A737D;">//伪代码，假设我们token是放在redis里面的</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserInfo useInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(userId);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> useInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//2. 我们只需要在MyWebMvcConfigurer里面把userInfoArgumentResolver添加进去即可，关键代码如下：</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyWebMvcConfigurer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebMvcConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> MyPageableHandlerMethodArgumentResolver myPageableHandlerMethodArgumentResolver;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfoArgumentResolver userInfoArgumentResolver;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addArgumentResolvers</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">HandlerMethodArgumentResolver</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">resolvers</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   resolvers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(myPageableHandlerMethodArgumentResolver);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//我们只需要把userInfoArgumentResolver加入resolvers中即可</span></span>
<span class="line"><span style="color:#E1E4E8;">   resolvers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(userInfoArgumentResolver);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 在Controller中使用</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//获得当前用户的信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user/info&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">getUserInfo</span><span style="color:#E1E4E8;">(UserInfo </span><span style="color:#FFAB70;">userInfo</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//给当前用户 say hello</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sayHello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(UserInfo </span><span style="color:#FFAB70;">userInfo</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> userInfo.</span><span style="color:#B392F0;">getTelephone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 实现HandlerMethodArgumentResolver接口</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoArgumentResolver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerMethodArgumentResolver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RedisTemplate redisTemplate;</span><span style="color:#6A737D;">//伪代码，假设我们token是放在redis里面的</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoArgumentResolver</span><span style="color:#24292E;">(RedisTemplate </span><span style="color:#E36209;">redisTemplate</span><span style="color:#24292E;">, UserInfoRepository </span><span style="color:#E36209;">userInfoRepository</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.redisTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisTemplate;</span><span style="color:#6A737D;">//伪代码，假设我们token是放在redis里面的</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userInfoRepository </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">supportsParameter</span><span style="color:#24292E;">(MethodParameter </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> UserInfo.class.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(parameter.</span><span style="color:#6F42C1;">getParameterType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">resolveArgument</span><span style="color:#24292E;">(MethodParameter </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">, ModelAndViewContainer </span><span style="color:#E36209;">mavContainer</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          NativeWebRequest </span><span style="color:#E36209;">webRequest</span><span style="color:#24292E;">, WebDataBinderFactory </span><span style="color:#E36209;">binderFactory</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">      HttpServletRequest nativeRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (HttpServletRequest) webRequest.</span><span style="color:#6F42C1;">getNativeRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      String token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nativeRequest.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      Long userId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Long) redisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(token);</span><span style="color:#6A737D;">//伪代码，假设我们token是放在redis里面的</span></span>
<span class="line"><span style="color:#24292E;">      UserInfo useInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(userId);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> useInfo;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//2. 我们只需要在MyWebMvcConfigurer里面把userInfoArgumentResolver添加进去即可，关键代码如下：</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyWebMvcConfigurer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> MyPageableHandlerMethodArgumentResolver myPageableHandlerMethodArgumentResolver;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfoArgumentResolver userInfoArgumentResolver;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addArgumentResolvers</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">HandlerMethodArgumentResolver</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">resolvers</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   resolvers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(myPageableHandlerMethodArgumentResolver);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//我们只需要把userInfoArgumentResolver加入resolvers中即可</span></span>
<span class="line"><span style="color:#24292E;">   resolvers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(userInfoArgumentResolver);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 在Controller中使用</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//获得当前用户的信息</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">getUserInfo</span><span style="color:#24292E;">(UserInfo </span><span style="color:#E36209;">userInfo</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//给当前用户 say hello</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sayHello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(UserInfo </span><span style="color:#E36209;">userInfo</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> userInfo.</span><span style="color:#6F42C1;">getTelephone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码可以看到，在 Contoller 里面可以完全省掉根据 token 从 redis 取当前用户信息的过程，优化了操作流程。</p><h4 id="场景四" tabindex="-1">场景四 <a class="header-anchor" href="#场景四" aria-label="Permalink to &quot;场景四&quot;">​</a></h4><p>有的时候我们也会更改 Pageable 的默认值和参数的名字，也可以在 application.properties 的文件里面通过如下的 Key 值对自定义进行配置，如下图所示：</p>`,37),b=l(`<p>关于 Spring MVC 和 Spring Data 相关的参数处理，你通过了解上面的内容并动手操作一下，基本上就可以掌握了。但是实际工作肯定不会这么简单，还会遇到 WebMvcConfigurer 里面其他方法的需求，我顺带给你介绍一下。</p><h3 id="思路拓展" tabindex="-1">思路拓展 <a class="header-anchor" href="#思路拓展" aria-label="Permalink to &quot;思路拓展&quot;">​</a></h3><h4 id="webmvcconfigurer-介绍" tabindex="-1">WebMvcConfigurer 介绍 <a class="header-anchor" href="#webmvcconfigurer-介绍" aria-label="Permalink to &quot;WebMvcConfigurer 介绍&quot;">​</a></h4><p>当我们做 Spring 的 MVC 开发的时候，可能会通过实现 WebMvcConfigurer 去做一些公用的业务逻辑，下面我列举几个常见的方法，方便你了解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 拦截器配置 */</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addInterceptors</span><span style="color:#E1E4E8;">(InterceptorRegistry var1);</span></span>
<span class="line"><span style="color:#6A737D;">/* 视图跳转控制器 */</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addViewControllers</span><span style="color:#E1E4E8;">(ViewControllerRegistry registry);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">  *静态资源处理</span></span>
<span class="line"><span style="color:#6A737D;">**/</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addResourceHandlers</span><span style="color:#E1E4E8;">(ResourceHandlerRegistry registry);</span></span>
<span class="line"><span style="color:#6A737D;">/* 默认静态资源处理器 */</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureDefaultServletHandling</span><span style="color:#E1E4E8;">(DefaultServletHandlerConfigurer configurer);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">  *这里配置视图解析器</span></span>
<span class="line"><span style="color:#6A737D;"> **/</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureViewResolvers</span><span style="color:#E1E4E8;">(ViewResolverRegistry registry);</span></span>
<span class="line"><span style="color:#6A737D;">/* 配置内容裁决的一些选项*/</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureContentNegotiation</span><span style="color:#E1E4E8;">(ContentNegotiationConfigurer configurer);</span></span>
<span class="line"><span style="color:#6A737D;">/** 解决跨域问题 **/</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addCorsMappings</span><span style="color:#E1E4E8;">(CorsRegistry registry) ;</span></span>
<span class="line"><span style="color:#6A737D;">/** 添加都会contoller的Return的结果的处理 **/</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addReturnValueHandlers</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">HandlerMethodReturnValueHandler</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> handlers)；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 拦截器配置 */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addInterceptors</span><span style="color:#24292E;">(InterceptorRegistry var1);</span></span>
<span class="line"><span style="color:#6A737D;">/* 视图跳转控制器 */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addViewControllers</span><span style="color:#24292E;">(ViewControllerRegistry registry);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">  *静态资源处理</span></span>
<span class="line"><span style="color:#6A737D;">**/</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addResourceHandlers</span><span style="color:#24292E;">(ResourceHandlerRegistry registry);</span></span>
<span class="line"><span style="color:#6A737D;">/* 默认静态资源处理器 */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureDefaultServletHandling</span><span style="color:#24292E;">(DefaultServletHandlerConfigurer configurer);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">  *这里配置视图解析器</span></span>
<span class="line"><span style="color:#6A737D;"> **/</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureViewResolvers</span><span style="color:#24292E;">(ViewResolverRegistry registry);</span></span>
<span class="line"><span style="color:#6A737D;">/* 配置内容裁决的一些选项*/</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureContentNegotiation</span><span style="color:#24292E;">(ContentNegotiationConfigurer configurer);</span></span>
<span class="line"><span style="color:#6A737D;">/** 解决跨域问题 **/</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addCorsMappings</span><span style="color:#24292E;">(CorsRegistry registry) ;</span></span>
<span class="line"><span style="color:#6A737D;">/** 添加都会contoller的Return的结果的处理 **/</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addReturnValueHandlers</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">HandlerMethodReturnValueHandler</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> handlers)；</span></span></code></pre></div><p>当我们实现 Restful 风格的 API 协议时，会经常看到其对 json 响应结果进行了统一的封装，我们也可以采用 HandlerMethodReturnValueHandler 来实现，再来看一个例子。</p><h4 id="用-result-对-json-的返回结果进行统一封装" tabindex="-1">用 Result 对 JSON 的返回结果进行统一封装 <a class="header-anchor" href="#用-result-对-json-的返回结果进行统一封装" aria-label="Permalink to &quot;用 Result 对 JSON 的返回结果进行统一封装&quot;">​</a></h4><p>下面通过五个步骤来实现一个通过自定义注解，利用<strong>HandlerMethodReturnValueHandler 实现 JSON 结果封装</strong>的例子。</p><p><strong>第一步：我们自定义一个注解 @WarpWithData</strong>，表示此注解包装的返回结果用 Data 进行包装，代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@Target({ElementType.TYPE, ElementType.METHOD})</span></span>
<span class="line"><span style="color:#E1E4E8;">@Retention(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">/**</span></span>
<span class="line"><span style="color:#E1E4E8;"> * 自定义一个注解对返回结果进行包装</span></span>
<span class="line"><span style="color:#E1E4E8;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">public @interface WarpWithData {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@Target({ElementType.TYPE, ElementType.METHOD})</span></span>
<span class="line"><span style="color:#24292E;">@Retention(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@Documented</span></span>
<span class="line"><span style="color:#24292E;">/**</span></span>
<span class="line"><span style="color:#24292E;"> * 自定义一个注解对返回结果进行包装</span></span>
<span class="line"><span style="color:#24292E;"> */</span></span>
<span class="line"><span style="color:#24292E;">public @interface WarpWithData {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第二步：自定义 MyWarpWithDataHandlerMethodReturnValueHandler，并继承 RequestResponseBodyMethodProcessor 来实现 HandlerMethodReturnValueHandler 接口</strong>，用来处理 Data 包装的结果，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//自定义自己的return的处理类，我们直接继承RequestResponseBodyMethodProcessor，这样父类里面的方法我们直接使用就可以了</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyWarpWithDataHandlerMethodReturnValueHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestResponseBodyMethodProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HandlerMethodReturnValueHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//参考父类RequestResponseBodyMethodProcessor的做法</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyWarpWithDataHandlerMethodReturnValueHandler</span><span style="color:#E1E4E8;">(List&lt;HttpMessageConverter&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">converters</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(converters);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//只处理需要包装的注解的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">supportsReturnType</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">returnType</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> returnType.</span><span style="color:#B392F0;">hasMethodAnnotation</span><span style="color:#E1E4E8;">(WarpWithData.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//将返回结果包装一层Data</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleReturnValue</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">returnValue</span><span style="color:#E1E4E8;">, MethodParameter </span><span style="color:#FFAB70;">methodParameter</span><span style="color:#E1E4E8;">, ModelAndViewContainer </span><span style="color:#FFAB70;">modelAndViewContainer</span><span style="color:#E1E4E8;">, NativeWebRequest </span><span style="color:#FFAB70;">nativeWebRequest</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException, HttpMediaTypeNotAcceptableException {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">,returnValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handleReturnValue</span><span style="color:#E1E4E8;">(res,methodParameter,modelAndViewContainer,nativeWebRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//自定义自己的return的处理类，我们直接继承RequestResponseBodyMethodProcessor，这样父类里面的方法我们直接使用就可以了</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyWarpWithDataHandlerMethodReturnValueHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestResponseBodyMethodProcessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerMethodReturnValueHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//参考父类RequestResponseBodyMethodProcessor的做法</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyWarpWithDataHandlerMethodReturnValueHandler</span><span style="color:#24292E;">(List&lt;HttpMessageConverter&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">converters</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(converters);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//只处理需要包装的注解的方法</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">supportsReturnType</span><span style="color:#24292E;">(MethodParameter </span><span style="color:#E36209;">returnType</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> returnType.</span><span style="color:#6F42C1;">hasMethodAnnotation</span><span style="color:#24292E;">(WarpWithData.class);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//将返回结果包装一层Data</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleReturnValue</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">returnValue</span><span style="color:#24292E;">, MethodParameter </span><span style="color:#E36209;">methodParameter</span><span style="color:#24292E;">, ModelAndViewContainer </span><span style="color:#E36209;">modelAndViewContainer</span><span style="color:#24292E;">, NativeWebRequest </span><span style="color:#E36209;">nativeWebRequest</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, HttpMediaTypeNotAcceptableException {</span></span>
<span class="line"><span style="color:#24292E;">      Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">,returnValue);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handleReturnValue</span><span style="color:#24292E;">(res,methodParameter,modelAndViewContainer,nativeWebRequest);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第三步：在 MyWebMvcConfigurer 里面直接把 myWarpWithDataHandlerMethodReturnValueHandler 加入 handlers 里面即可</strong>，也是通过覆盖父类 WebMvcConfigurer 里面的 addReturnValueHandlers 方法完成的，关键代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyWebMvcConfigurer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebMvcConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> MyWarpWithDataHandlerMethodReturnValueHandler myWarpWithDataHandlerMethodReturnValueHandler;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//把我们自定义的myWarpWithDataHandlerMethodReturnValueHandler加入handlers里面即可</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addReturnValueHandlers</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">HandlerMethodReturnValueHandler</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">handlers</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      handlers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(myWarpWithDataHandlerMethodReturnValueHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RequestMappingHandlerAdapter requestMappingHandlerAdapter;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//由于HandlerMethodReturnValueHandler处理的优先级问题，我们通过如下方法，把我们自定义的myWarpWithDataHandlerMethodReturnValueHandler放到第一个；</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">PostConstruct</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">     List&lt;</span><span style="color:#F97583;">HandlerMethodReturnValueHandler</span><span style="color:#E1E4E8;">&gt; returnValueHandlers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(myWarpWithDataHandlerMethodReturnValueHandler);</span></span>
<span class="line"><span style="color:#6A737D;">//取出原始列表，重新覆盖进去；</span></span>
<span class="line"><span style="color:#E1E4E8;">        returnValueHandlers.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(requestMappingHandlerAdapter.</span><span style="color:#B392F0;">getReturnValueHandlers</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">     requestMappingHandlerAdapter.</span><span style="color:#B392F0;">setReturnValueHandlers</span><span style="color:#E1E4E8;">(returnValueHandlers);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyWebMvcConfigurer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> MyWarpWithDataHandlerMethodReturnValueHandler myWarpWithDataHandlerMethodReturnValueHandler;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//把我们自定义的myWarpWithDataHandlerMethodReturnValueHandler加入handlers里面即可</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addReturnValueHandlers</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">HandlerMethodReturnValueHandler</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">handlers</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      handlers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(myWarpWithDataHandlerMethodReturnValueHandler);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RequestMappingHandlerAdapter requestMappingHandlerAdapter;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//由于HandlerMethodReturnValueHandler处理的优先级问题，我们通过如下方法，把我们自定义的myWarpWithDataHandlerMethodReturnValueHandler放到第一个；</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">PostConstruct</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">     List&lt;</span><span style="color:#D73A49;">HandlerMethodReturnValueHandler</span><span style="color:#24292E;">&gt; returnValueHandlers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(myWarpWithDataHandlerMethodReturnValueHandler);</span></span>
<span class="line"><span style="color:#6A737D;">//取出原始列表，重新覆盖进去；</span></span>
<span class="line"><span style="color:#24292E;">        returnValueHandlers.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(requestMappingHandlerAdapter.</span><span style="color:#6F42C1;">getReturnValueHandlers</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     requestMappingHandlerAdapter.</span><span style="color:#6F42C1;">setReturnValueHandlers</span><span style="color:#24292E;">(returnValueHandlers);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里需要注意的是，我们利用 @PostConstruct 调整了一下 HandlerMethodReturnValueHandler 加载的优先级，使其生效。</p><p><strong>第四步：Controller 方法中直接加上 @WarpWithData 注解</strong>，关键代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/{id}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">WarpWithData</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">getUserInfoFromPath</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">) Long id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/{id}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">WarpWithData</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">getUserInfoFromPath</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">) Long id) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第五步：我们测试一下。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GET http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user/1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GET http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8089/user/1</span></span></code></pre></div><p>就会得到如下结果，你会发现我们的 JSON 结果多了一个 Data 的包装。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;createUserId&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;createTime&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2020-10-23T00:23:10.185Z&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;lastModifiedUserId&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;lastModifiedTime&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2020-10-23T00:23:10.185Z&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;telephone&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;hibernateLazyInitializer&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;createUserId&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;createTime&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-10-23T00:23:10.185Z&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;lastModifiedUserId&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;lastModifiedTime&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-10-23T00:23:10.185Z&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;telephone&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;hibernateLazyInitializer&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过五个步骤，利用 Spring MVC 的扩展机制，实现了对返回结果的格式统一处理。不知道你是否掌握了这种方法，希望你可以多多实践，将它运用得更好。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>以上就是这一讲的内容了。在这一讲中，我通过原理分析、语法讲解、实战经验分享，帮助你掌握了 HandlerMethodArgumentResolvers 的详细用法，并为你扩展了学习思路，了解了 HandlerMethodReturnValueHandler 的用法。</p><p>其实 Spring MVC 肯定远不止这些，这里我只介绍了一些和 Spring Data 相关的知识点。你在工作和学习中，要时刻保持好奇心和挖掘精神，不断地探究不理解的知识点。</p><p>最后，如果你觉得有帮助就动动手指分享吧，也欢迎你在评论区留言，一起讨论、进步。下一讲我们将学习数据源相关的知识。到时见~</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,27);function C(M,q,P,f,H,B){const n=e("Image");return o(),t("div",null,[E,y,i,d,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/67/F1/CgqCHl-ifKuAZqvLAAGaihgL6z0625.png"}),u,g,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/67/E5/Ciqc1F-ifLGAXeScAACYeXQaXt0313.png"}),A,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/67/F1/CgqCHl-ifLiATqQNAADQjUYmp3o182.png"}),F,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/67/F1/CgqCHl-ifL2AJfQTAAA5uE86eqs914.png"}),h,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/67/E6/Ciqc1F-ifMKAEkZ7AAD0bB-3aYU721.png"}),v,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/67/F1/CgqCHl-ifNKAUr5ZAAKB24GVNXo607.png"}),m,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/67/E6/Ciqc1F-ifNqALsgiAAPVRBCs4Q4327.png"}),D,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/67/F1/CgqCHl-ifQaAX5YQAAN2flcVp0c284.png"}),R,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/67/E6/Ciqc1F-ifTSAY0xeAAIfdBh0SkQ798.png"}),b])}const I=p(c,[["render",C]]);export{_ as __pageData,I as default};
