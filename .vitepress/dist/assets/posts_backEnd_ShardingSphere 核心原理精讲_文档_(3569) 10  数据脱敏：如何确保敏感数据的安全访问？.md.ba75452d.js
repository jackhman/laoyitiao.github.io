import{_ as o,j as e,o as r,g as t,k as p,h as s,s as n,Q as l}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"10数据脱敏：如何确保敏感数据的安全访问？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3569) 10  数据脱敏：如何确保敏感数据的安全访问？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3569) 10  数据脱敏：如何确保敏感数据的安全访问？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3569) 10  数据脱敏：如何确保敏感数据的安全访问？.md"},E=n("h1",{id:"_10数据脱敏-如何确保敏感数据的安全访问",tabindex:"-1"},[s("10数据脱敏：如何确保敏感数据的安全访问？ "),n("a",{class:"header-anchor",href:"#_10数据脱敏-如何确保敏感数据的安全访问","aria-label":'Permalink to "10数据脱敏：如何确保敏感数据的安全访问？"'},"​")],-1),y=n("p",null,"从今天开始，我们又将开始一个全新的主题：介绍 ShardingSphere 中的数据脱敏功能。所谓数据脱敏，是指对某些敏感信息通过脱敏规则进行数据转换，从而实现敏感隐私数据的可靠保护。在日常开发过程中，数据安全一直是一个非常重要和敏感的话题。相较传统的私有化部署方案，互联网应用对数据安全的要求更高，所涉及的范围也更广。根据不同行业和业务场景的属性，不同系统的敏感信息可能有所不同，但诸如身份证号、手机号、卡号、用户姓名、账号密码等个人信息一般都需要进行脱敏处理。",-1),i=n("h3",{id:"shardingsphere-如何抽象数据脱敏",tabindex:"-1"},[s("ShardingSphere 如何抽象数据脱敏？ "),n("a",{class:"header-anchor",href:"#shardingsphere-如何抽象数据脱敏","aria-label":'Permalink to "ShardingSphere 如何抽象数据脱敏？"'},"​")],-1),d=n("p",null,"数据脱敏从概念上讲比较容易理解，但在具体实现过程中存在很多方案。在介绍基于数据脱敏的具体开发过程之前，我们有必要先来梳理实现数据脱敏的抽象过程。这里，我将从敏感数据的存储方式、敏感数据的加解密过程以及在业务代码中嵌入加解密的过程这三个维度来抽象数据脱敏。",-1),u=l('<p>针对每一个维度，我也将基于 ShardingSphere 给出这个框架的具体抽象过程，从而方便你理解使用它的方法和技巧，让我们来一起看一下。</p><h4 id="敏感数据如何存储" tabindex="-1">敏感数据如何存储？ <a class="header-anchor" href="#敏感数据如何存储" aria-label="Permalink to &quot;敏感数据如何存储？&quot;">​</a></h4><p>关于这个问题，要讨论的点在于是否需要将敏感数据以明文形式存储在数据库中。这个问题的答案并不是绝对的。</p><p>我们先来考虑第一种情况。<strong>对于一些敏感数据而言，我们显然应该直接以密文的形式将加密之后的数据进行存储，防止有任何一种途径能够从数据库中获取这些数据明文。</strong> 在这类敏感数据中，最典型的就是用户密码，我们通常会采用 MD5 等不可逆的加密算法对其进行加密，而使用这些数据的方法也只是依赖于它的密文形式，不会涉及对明文的直接处理。</p><p><strong>但对于用户姓名、手机号等信息，由于统计分析等方面的需要，显然我们不能直接采用不可逆的加密算法对其进行加密，还需要将明文信息进行处理</strong>**。**一种常见的处理方式是将一个字段用两列来进行保存，一列保存明文，一列保存密文，这就是第二种情况。</p><p>显然，我们可以将第一种情况看作是第二种情况的特例。也就是说，在第一种情况中没有明文列，只有密文列。</p><p>ShardingSphere 同样基于这两种情况进行了抽象，它将这里的明文列命名为 plainColumn，而将密文列命名为 cipherColumn。其中 plainColumn 属于选填，而 cipherColumn 则是必填。同时，ShardingSphere 还提出了一个逻辑列 logicColumn 的概念，该列代表一种虚拟列，只面向开发人员进行编程使用：</p>',7),h=l(`<h4 id="敏感数据如何加解密" tabindex="-1">敏感数据如何加解密？ <a class="header-anchor" href="#敏感数据如何加解密" aria-label="Permalink to &quot;敏感数据如何加解密？&quot;">​</a></h4><p>数据脱敏本质上就是一种加解密技术应用场景，自然少不了对各种加解密算法和技术的封装。<strong>传统的加解密方式有两种，一种是对称加密，常见的包括 DEA 和 AES；另一种是非对称加密，常见的包括 RSA。</strong></p><p>ShardingSphere 内部也抽象了一个 ShardingEncryptor 组件专门封装各种加解密操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingEncryptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeBasedSPI</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//加密</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">plaintext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//解密</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object </span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">ciphertext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingEncryptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeBasedSPI</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//加密</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">plaintext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//解密</span></span>
<span class="line"><span style="color:#24292E;">    Object </span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">ciphertext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>目前，ShardingSphere 内置了 AESShardingEncryptor 和 MD5ShardingEncryptor 这两个具体的 ShardingEncryptor 实现。当然，由于 ShardingEncryptor 扩展了 TypeBasedSPI 接口，所以开发人员完全可以基于微内核架构和 JDK 所提供的 SPI 机制来实现和动态加载自定义的各种 ShardingEncryptor。我们会在&quot;微内核架构：ShardingSphere 如何实现系统的扩展性？&quot;这个课时中对 ShardingSphere 中的微内核架构和 SPI 机制进行详细的讨论。</p><h4 id="业务代码中如何嵌入数据脱敏" tabindex="-1">业务代码中如何嵌入数据脱敏？ <a class="header-anchor" href="#业务代码中如何嵌入数据脱敏" aria-label="Permalink to &quot;业务代码中如何嵌入数据脱敏？&quot;">​</a></h4><p>数据脱敏的最后一个抽象点在于如何在业务代码中嵌入数据脱敏过程，显然这个过程应该尽量做到自动化，并且具备低侵入性，且应该对开发人员足够透明。</p><p>我们可以通过一个具体的示例来描述数据脱敏的执行流程。假设系统中存在一张 user 表，其中包含一个 user_name 列。我们认为这个 user_name 列属于敏感数据，需要对其进行数据脱敏。那么按照前面讨论的数据存储方案，可以在 user 表中设置两个字段，一个代表明文的 user_name_plain，一个代表密文的 user_name_cipher。然后应用程序通过 user_name 这个逻辑列与数据库表进行交互：</p>`,8),g=l(`<p>针对这个交互过程，我们希望存在一种机制，能够自动将 user_name 逻辑列映射到 user_name_plain 和 user_name_cipher 列。同时，我们希望提供一种配置机制，能够让开发人员根据需要灵活指定脱敏过程中所采用的各种加解密算法。</p><p>作为一款优秀的开源框架，ShardingSphere 就提供了这样一种机制。那么它是如何做到这一点呢？</p><p>首先，ShardingSphere 通过对从应用程序传入的 SQL 进行解析，并依据开发人员提供的脱敏配置对 SQL 进行改写，从而实现对明文数据的自动加密，并将加密后的密文数据存储到数据库中。当我们查询数据时，它又从数据库中取出密文数据，并自动对其解密，最终将解密后的明文数据返回给用户。ShardingSphere 提供了自动化+透明化的数据脱敏过程，业务开发人员可以像使用普通数据那样使用脱敏数据，而不需要关注数据脱敏的实现细节。</p><h3 id="系统改造-如何实现数据脱敏" tabindex="-1">系统改造：如何实现数据脱敏？ <a class="header-anchor" href="#系统改造-如何实现数据脱敏" aria-label="Permalink to &quot;系统改造：如何实现数据脱敏？&quot;">​</a></h3><p>接下来，就让我们继续对系统进行改造，并添加数据脱敏功能吧。这个过程主要有三个步骤：准备数据脱敏、配置数据脱敏和执行数据脱敏。</p><h4 id="准备数据脱敏" tabindex="-1">准备数据脱敏 <a class="header-anchor" href="#准备数据脱敏" aria-label="Permalink to &quot;准备数据脱敏&quot;">​</a></h4><p>为了演示数据脱敏功能，我们重新定义一个 EncryptUser 实体类，该类中定义了与数据脱敏相关的常见用户名、密码等字段，这些字段与数据库中 encrypt_user 表的列是一一对应的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptUser</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//用户Id</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long userId;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//用户名（密文）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String userName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//用户名（明文）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String userNamePlain;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//密码（密文）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String pwd;</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptUser</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//用户Id</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long userId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//用户名（密文）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String userName;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//用户名（明文）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String userNamePlain;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//密码（密文）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String pwd;</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，我们有必要提一下 EncryptUserMapper 中关于 resultMap 和 insert 语句的定义，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namespace</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.tianyilan.shardingsphere.demo.repository.EncryptUserRepository&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">resultMap</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;encryptUserMap&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.tianyilan.shardingsphere.demo.entity.EncryptUser&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userId&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jdbcType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;INTEGER&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;user_name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userName&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jdbcType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;VARCHAR&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;pwd&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;pwd&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jdbcType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;VARCHAR&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">resultMap</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;addEntity&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        INSERT INTO encrypt_user (user_id, user_name, pwd) VALUES (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{pwd,jdbcType=VARCHAR})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       ...</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namespace</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.tianyilan.shardingsphere.demo.repository.EncryptUserRepository&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">resultMap</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;encryptUserMap&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.tianyilan.shardingsphere.demo.entity.EncryptUser&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userId&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jdbcType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;INTEGER&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;user_name&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userName&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jdbcType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;VARCHAR&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;pwd&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;pwd&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jdbcType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;VARCHAR&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">resultMap</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;addEntity&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        INSERT INTO encrypt_user (user_id, user_name, pwd) VALUES (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{pwd,jdbcType=VARCHAR})</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       ...</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>请注意，<strong>我们在 resultMap 中并没有指定 user_name_plain 字段，同时，insert 语句中同样没有指定这个字段。</strong></p><p>有了 Mapper，我们就可以构建 Service 层组件。在这个 EncryptUserServiceImpl 类中，我们分别提供了 processEncryptUsers 和 getEncryptUsers 方法来插入用户以及获取用户列表。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptUserServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptUserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EncryptUserRepository encryptUserRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processEncryptUsers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">insertEncryptUsers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">insertEncryptUsers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       List&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Long i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         EncryptUser encryptUser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptUser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         encryptUser.</span><span style="color:#B392F0;">setUserId</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">         encryptUser.</span><span style="color:#B392F0;">setUserName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username_&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i);</span></span>
<span class="line"><span style="color:#E1E4E8;">         encryptUser.</span><span style="color:#B392F0;">setPwd</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pwd&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i);</span></span>
<span class="line"><span style="color:#E1E4E8;">            encryptUserRepository.</span><span style="color:#B392F0;">addEntity</span><span style="color:#E1E4E8;">(encryptUser);</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(encryptUser.</span><span style="color:#B392F0;">getUserId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">EncryptUser</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getEncryptUsers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> encryptUserRepository.</span><span style="color:#B392F0;">findEntities</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptUserServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptUserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EncryptUserRepository encryptUserRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processEncryptUsers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">insertEncryptUsers</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">insertEncryptUsers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">       List&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Long i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         EncryptUser encryptUser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptUser</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         encryptUser.</span><span style="color:#6F42C1;">setUserId</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">         encryptUser.</span><span style="color:#6F42C1;">setUserName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username_&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">         encryptUser.</span><span style="color:#6F42C1;">setPwd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pwd&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">            encryptUserRepository.</span><span style="color:#6F42C1;">addEntity</span><span style="color:#24292E;">(encryptUser);</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(encryptUser.</span><span style="color:#6F42C1;">getUserId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">EncryptUser</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getEncryptUsers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> encryptUserRepository.</span><span style="color:#6F42C1;">findEntities</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，业务层代码已经准备就绪。由于数据脱敏功能内嵌在 sharding-jdbc-spring-boot-starter 中，所以我们不需要引入额外的依赖包。</p><h4 id="配置数据脱敏" tabindex="-1">配置数据脱敏 <a class="header-anchor" href="#配置数据脱敏" aria-label="Permalink to &quot;配置数据脱敏&quot;">​</a></h4><p>在整体架构上，和分库分表以及读写分离一样，数据脱敏对外暴露的入口也是一个符合 JDBC 规范的 EncryptDataSource 对象。如下面的代码所示，ShardingSphere 提供了 EncryptDataSourceFactory 工厂类，完成了 EncryptDataSource 对象的构建：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptDataSourceFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#FFAB70;">dataSource</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptRuleConfiguration </span><span style="color:#FFAB70;">encryptRuleConfiguration</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties </span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptDataSource</span><span style="color:#E1E4E8;">(dataSource, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptRule</span><span style="color:#E1E4E8;">(encryptRuleConfiguration), props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptDataSourceFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataSource </span><span style="color:#E36209;">dataSource</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptRuleConfiguration </span><span style="color:#E36209;">encryptRuleConfiguration</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties </span><span style="color:#E36209;">props</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptDataSource</span><span style="color:#24292E;">(dataSource, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptRule</span><span style="color:#24292E;">(encryptRuleConfiguration), props);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里存在一个 EncryptRuleConfiguration 类，该类中包含了两个 Map，分别用来配置加解密器列表以及加密表配置列表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//加解密器配置列表</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">EncryptorRuleConfiguration</span><span style="color:#E1E4E8;">&gt; encryptors;</span></span>
<span class="line"><span style="color:#6A737D;">//加密表配置列表</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">EncryptTableRuleConfiguration</span><span style="color:#E1E4E8;">&gt; tables;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//加解密器配置列表</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">EncryptorRuleConfiguration</span><span style="color:#24292E;">&gt; encryptors;</span></span>
<span class="line"><span style="color:#6A737D;">//加密表配置列表</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">EncryptTableRuleConfiguration</span><span style="color:#24292E;">&gt; tables;</span></span></code></pre></div><p>其中 EncryptorRuleConfiguration 集成了 ShardingSphere 中的一个通用抽象类 TypeBasedSPIConfiguration，包含了 type 和 properties 这两个字段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//类型（例如MD5/AES加密器）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String type;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//属性（例如AES加密器用到的Key值）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties properties;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//类型（例如MD5/AES加密器）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String type;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//属性（例如AES加密器用到的Key值）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties properties;</span></span></code></pre></div><p>而 EncryptTableRuleConfiguration 内部是一个包含多个 EncryptColumnRuleConfiguration 的 Map，这个 EncryptColumnRuleConfiguration 就是 ShardingSphere 中对加密列的配置，包含了 plainColumn、cipherColumn 的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptColumnRuleConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//存储明文的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String plainColumn;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//存储密文的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String cipherColumn;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//辅助查询字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String assistedQueryColumn;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//加密器名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String encryptor;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptColumnRuleConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//存储明文的字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String plainColumn;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//存储密文的字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String cipherColumn;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//辅助查询字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String assistedQueryColumn;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//加密器名字</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String encryptor;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>作为总结，我们通过一张图罗列出各个配置类之间的关系，以及数据脱敏所需要配置的各项内容：</p>`,24),F=l(`<p>现在回到代码，为了实现数据脱敏，我们首先需要定义一个数据源，这里命名为 dsencrypt：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names=dsencrypt</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsencrypt.type=com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsencrypt.driver-class-name=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsencrypt.jdbc-url=jdbc:mysql://localhost:3306/dsencrypt</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsencrypt.username=root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsencrypt.password=root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names=dsencrypt</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsencrypt.type=com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsencrypt.driver-class-name=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsencrypt.jdbc-url=jdbc:mysql://localhost:3306/dsencrypt</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsencrypt.username=root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsencrypt.password=root</span></span></code></pre></div><p>配置成功之后，我们再配置加密器，这里定义 name_encryptor 和 pwd_encryptor 这两个加密器，分别用于对 user_name 列和 pwd 列进行加解密。注意，在下面这段代码中，对于 name_encryptor，我们使用了对称加密算法 AES；而对于 pwd_encryptor，我们则直接使用不可逆的 MD5 散列算法：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.encryptors.name_encryptor.type=aes</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.encryptors.name_encryptor.props.aes.key.value=123456</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.encryptors.pwd_encryptor.type=md5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.encryptors.name_encryptor.type=aes</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.encryptors.name_encryptor.props.aes.key.value=123456</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.encryptors.pwd_encryptor.type=md5</span></span></code></pre></div><p>接下来，我们需要完成脱敏表的配置。针对案例中的场景，我们可以选择对 user_name 列设置 plainColumn、cipherColumn 以及 encryptor 属性，而对于 pwd 列而言，由于我们不希望在数据库中存储明文，所以只需要配置 cipherColumn 和 encryptor 属性就可以了。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.plainColumn=user_name_plain</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.cipherColumn=user_name</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.encryptor=name_encryptor</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.pwd.cipherColumn=pwd</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.pwd.encryptor=pwd_encryptor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.plainColumn=user_name_plain</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.cipherColumn=user_name</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.encryptor=name_encryptor</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.pwd.cipherColumn=pwd</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.pwd.encryptor=pwd_encryptor</span></span></code></pre></div><p>最后，ShardingSphere 还提供了一个属性开关，当底层数据库表里同时存储了明文和密文数据后，该属性开关可以决定是直接查询数据库表里的明文数据进行返回，还是查询密文数据并进行解密之后再返回：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.props.query.with.cipher.comlum=true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.props.query.with.cipher.comlum=true</span></span></code></pre></div><h4 id="执行数据脱敏" tabindex="-1">执行数据脱敏 <a class="header-anchor" href="#执行数据脱敏" aria-label="Permalink to &quot;执行数据脱敏&quot;">​</a></h4><p>现在，配置工作一切就绪，我们来执行测试用例。首先执行数据插入操作，下图数据表中对应字段存储的就是加密后的密文数据：</p>`,10),_=n("p",null,"加密后的表数据结果",-1),m=n("p",null,"在这个过程中，ShardingSphere 会把原始的 SQL 语句转换为用于数据脱敏的目标语句：",-1),A=l(`<p>SQL 自动转换示意图</p><p>然后，我们再来执行查询语句并获取控制台日志：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">2020-05-30 15:10:59.174  INFO 31808 --- [           main] ShardingSphere-SQL                       : Rule Type: encrypt</span></span>
<span class="line"><span style="color:#E1E4E8;">2020-05-30 15:10:59.174  INFO 31808 --- [           main] ShardingSphere-SQL                       : SQL: SELECT * FROM encrypt_user;</span></span>
<span class="line"><span style="color:#E1E4E8;">user_id: 1, user_name: username_1, pwd: 99024280cab824efca53a5d1341b9210</span></span>
<span class="line"><span style="color:#E1E4E8;">user_id: 2, user_name: username_2, pwd: 36ddda5af915d91549d3ab5bff1bafec</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">2020-05-30 15:10:59.174  INFO 31808 --- [           main] ShardingSphere-SQL                       : Rule Type: encrypt</span></span>
<span class="line"><span style="color:#24292E;">2020-05-30 15:10:59.174  INFO 31808 --- [           main] ShardingSphere-SQL                       : SQL: SELECT * FROM encrypt_user;</span></span>
<span class="line"><span style="color:#24292E;">user_id: 1, user_name: username_1, pwd: 99024280cab824efca53a5d1341b9210</span></span>
<span class="line"><span style="color:#24292E;">user_id: 2, user_name: username_2, pwd: 36ddda5af915d91549d3ab5bff1bafec</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><p>可以看到这里的路由类型为&quot;encrypt&quot;，获取的 user_name 是经过解密之后的明文而不是数据库中存储的密文，这就是 spring.shardingsphere.props.query.with.cipher.comlum=true 配置项所起到的作用。如果将这个配置项设置为 false，那么返回的就是密文。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>数据脱敏是数据库管理和数据访问控制的一个重要话题，今天我们讲解了 ShardingSphere 在数据脱敏方面提供的技术方案，但实际上，数据脱敏的实现思路有很多，ShardingSphere 采用了一种自动化、透明化的方案完成敏感数据存储、加解密以及和应用程序之间的无缝整合。同时，今天的课程也围绕系统案例对其进行了数据库脱敏改造，我们给出了具体的配置项和执行过程。</p><p>这里给你留一道思考题：当使用 ShardingSphere 的数据脱敏模块时，我们有哪几种方式可以设置一个需要加密的数据项？</p><p>本课时的内容就到这里，在下一课时中，我们将介绍 ShardingSphere 中与编排治理相关的辅助功能，将重点围绕配置中心展开分析。</p>`,8);function S(C,D,v,b,q,f){const a=e("Image");return r(),t("div",null,[E,y,i,d,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/33/60/CgqCHl8P-QmAA0bQAABWInFwGYE998.png"}),s(),u,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/33/60/CgqCHl8P-SWAcpV1AABNv8n4KHg426.png"}),s(),h,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/33/55/Ciqc1F8P-TaAd-1QAABkT9WjY8E581.png"}),s(),g,p(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/33/55/Ciqc1F8P-VqAZq9CAACLcF2qedw534.png"}),s(),F,p(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/33/60/CgqCHl8P-WeAZFtRAABT51HN_2s801.png"}),s(),_,m,p(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/33/55/Ciqc1F8P-W6AVpohAAA833UHvZE135.png"}),s(),A])}const T=o(c,[["render",S]]);export{B as __pageData,T as default};
