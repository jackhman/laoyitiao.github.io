import{_ as o,j as e,o as t,g as r,k as l,h as s,s as a,Q as p}from"./chunks/framework.4e7d56ce.js";const M=JSON.parse('{"title":"05如何基于JMeterAPI开发性能测试平台？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/047_说透性能测试/(6156) 05  如何基于 JMeter API 开发性能测试平台？.md","filePath":"posts/devops/047_说透性能测试/(6156) 05  如何基于 JMeter API 开发性能测试平台？.md","lastUpdated":1696417798000}'),c={name:"posts/devops/047_说透性能测试/(6156) 05  如何基于 JMeter API 开发性能测试平台？.md"},E=a("h1",{id:"_05如何基于jmeterapi开发性能测试平台",tabindex:"-1"},[s("05如何基于JMeterAPI开发性能测试平台？ "),a("a",{class:"header-anchor",href:"#_05如何基于jmeterapi开发性能测试平台","aria-label":'Permalink to "05如何基于JMeterAPI开发性能测试平台？"'},"​")],-1),y=a("p",null,"上一讲我带你学习了 JMeter 二次开发，通过对 JMeter 提供的接口或者抽象类方法重写可以自定义所需要的 JMeter 插件。这一讲我将带你了解如何开发一个性能测试平台。",-1),i=a("p",null,[s("目前测试界比较热门的一个方向就是"),a("strong",null,"开发测试平台"),s("，平台级别的性能测试能减少重复劳动、提升效率，也方便统一管理，自然受到了市场的欢迎，测试平台开发能力也成了资深测试人员的必备技能之一。")],-1),u=p('<p>本专栏，我们应用的主要性能测试工具是 JMeter，那开发性能测试平台需要什么样的能力呢？我认为需要以下能力：</p><ul><li><p><strong>具备较好的 Java 开发能力</strong>，JMeter 本身是 Java 开发，提供了较多的接口，所以使用 Java 开发具备天然的优势；</p></li><li><p>平台主要通过 Web 网页展示，需要具备较好的<strong>前端开发能力</strong>，目前 Vue 是比较流行的前端框架；</p></li><li><p><strong>熟悉 JMeter 源码结构</strong>，尤其是 JMeter 提供的相关 API。</p></li></ul><h3 id="构建性能测试平台的必要性" tabindex="-1">构建性能测试平台的必要性 <a class="header-anchor" href="#构建性能测试平台的必要性" aria-label="Permalink to &quot;构建性能测试平台的必要性&quot;">​</a></h3><p>为什么我会如此推荐你去开发性能测试平台呢？回想一下你在工作中是否遇到过以下场景：</p><ul><li><p>B 同学如果需要 A 同学写完的脚本，A 只能单独发给 B，如果 A 的脚本有变化，不能实时同步到 B，而且发送的过程也存在<strong>沟通成本和时间差</strong>；</p></li><li><p>测试执行后，需要将测试结果同步给开发者，很多测试都是手动截图，不仅方式原始而且还会存在<strong>信息缺失</strong>的情况；</p></li><li><p>结果追溯时，我们需要找一些历史数据却发现并没有<strong>存档或共享</strong>。</p></li></ul><p>这些场景使我们的性能测试平台具有了更多现实意义，我们希望有一个<strong>可以协作共享</strong> ，并能够<strong>追溯历史数据的性能测试平台</strong>。基于这点我梳理了性能测试平台的基础功能，如下图所示：</p>',6),d=a("p",null,"图 1：性能测试平台基础功能",-1),F=a("p",null,"目前市面上的性能测试平台大多是基于 JMeter 提供的 API 开发的，核心流程如下图所示：",-1),C=p(`<p>图 2：性能测试平台开发核心流程</p><p>接下来我们根据这 4 个阶段来学习如何使用 JMeter 的 API 实现性能测试。</p><h3 id="环境初始化" tabindex="-1">环境初始化 <a class="header-anchor" href="#环境初始化" aria-label="Permalink to &quot;环境初始化&quot;">​</a></h3><p>JMeter API 在执行过程中，首先会读取 JMeter 软件安装目录文件下配置文件里的属性，所以我们要通过 JMeter API 读取指定的 JMeter 主配置文件的目录以及 JMeter 的安装目录；此外，我们还需要初始化 JMeter API 运行的<strong>语言环境</strong> （默认是英语）和<strong>资源</strong>。以上便是 JMeter API 做初始化的目的。</p><p>其中环境初始化主要包括以下 2 个步骤：</p><ol><li><p>通过 JMeterUtils.loadJMeterProperties 加载安装目录的 JMeter 主配置文件 JMeter.properties，然后把 jmeter.properties 中的所有属性赋值给 JMeterUtils 对象，以便在脚本运行时可以获取所需的配置；</p></li><li><p>设置 JMeter 的安装目录，JMeter API 会根据我们指定的目录加载脚本运行时需要的配置，例如 saveservice.properties 配置文件中的所有配置。</p></li></ol><p>参考代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">JMeterUtils.</span><span style="color:#B392F0;">loadJMeterProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:/Program Files/JMeter/bin/jmeter.properties&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">JMeterUtils.</span><span style="color:#B392F0;">setJMeterHome</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C:/Program Files/JMeter&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">JMeterUtils.</span><span style="color:#B392F0;">initLocale</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">JMeterUtils.</span><span style="color:#6F42C1;">loadJMeterProperties</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;C:/Program Files/JMeter/bin/jmeter.properties&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">JMeterUtils.</span><span style="color:#6F42C1;">setJMeterHome</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;C:/Program Files/JMeter&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">JMeterUtils.</span><span style="color:#6F42C1;">initLocale</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这样一来，我们就实现了环境初始化，代码中的目录可以根据自己实际的目录设置。</p><h3 id="脚本加载" tabindex="-1">脚本加载 <a class="header-anchor" href="#脚本加载" aria-label="Permalink to &quot;脚本加载&quot;">​</a></h3><p>脚本加载可以构建 HashTree，然后把构建的 HashTree 转成 JMeter 可执行的测试计划，进而执行测试用例。HashTree 是 JMeter API 中不可缺少的一种数据结构，在 JMeter API 中，HashTree 有 2 种构建方式，分别是<strong>本地脚本加载</strong> 和<strong>创建脚本文件</strong>。</p><p>先来说<strong>本地脚本加载</strong>的方式。用 JMeter 客户端手动生成 jmx 脚本文件后，我们可以通过 SaveService.loadTree 解析本地的 jmx 文件来运行脚本，核心步骤如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//加载本地 jmx 脚本</span></span>
<span class="line"><span style="color:#E1E4E8;">HashTree jmxTree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SaveService.</span><span style="color:#B392F0;">loadTree</span><span style="color:#E1E4E8;">(file);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//加载本地 jmx 脚本</span></span>
<span class="line"><span style="color:#24292E;">HashTree jmxTree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SaveService.</span><span style="color:#6F42C1;">loadTree</span><span style="color:#24292E;">(file);</span></span></code></pre></div><p>由于本地脚本是 JMeter 客户端手动生成的，所以这里只需要做读取文件操作即可，loadTree 会把 jmx 文件转成内存对象，并返回内存对象中生成的 HashTree。</p><p>那<strong>创建脚本文件</strong>是怎么做的呢？它是通过 API 构建测试计划，然后再保存为 JMeter 的 jmx 文件格式。核心步骤如下图所示：</p>`,15),g=p(`<p>图 3：脚本文件创建步骤</p><p>该方式需要自己构建 HashTree，我们可以参考 JMeter 客户端生成的 jmx 文件。</p><p>通过观察 jmx 文件我们可以知道需要构建的 jmx 结构，最外层是 TestPlan，TestPlan 是 HashTree 结构，包含 ThreadGroup（线程组）、HTTPSamplerProxy、LoopController（可选）、ResultCollector（结果收集）等节点。</p><p>接下来我将讲解 JMeter API 创建脚本文件的 6 个步骤，这 6 个步骤也是我们通过 JMeter 客户端创建脚本最常用的步骤，它们依次是创建测试计划、创建 ThreadGroup、创建循环控制器、创建 Sampler、创建结果收集器以及构建 tree，生成 jmx 脚本。</p><p><strong>（1）创建测试计划</strong></p><p>先生成一个 testplan，之后所有的测试活动都在 testplan 下面进行。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TestPlan testPlan </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestPlan</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;创建 JMeter 测试脚本&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    testPlan.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(TestElement.TEST_CLASS, TestPlan.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    testPlan.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(TestElement.GUI_CLASS, TestPlanGui.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    testPlan.</span><span style="color:#B392F0;">setUserDefinedVariables</span><span style="color:#E1E4E8;">((Arguments) </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArgumentsPanel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">createTestElement</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    TestPlan testPlan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestPlan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;创建 JMeter 测试脚本&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    testPlan.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(TestElement.TEST_CLASS, TestPlan.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    testPlan.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(TestElement.GUI_CLASS, TestPlanGui.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    testPlan.</span><span style="color:#6F42C1;">setUserDefinedVariables</span><span style="color:#24292E;">((Arguments) </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArgumentsPanel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">createTestElement</span><span style="color:#24292E;">());</span></span></code></pre></div><p>通过以上代码，我们生成了 testplan。</p><p><strong>（2）创建 ThreadGroup</strong></p><p>ThreadGroup 是我们平时使用的线程组插件，它可以模拟并发用户数，一个线程通常认为是模拟一个用户。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    ThreadGroup threadGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadGroup</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    threadGroup.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Example Thread Group&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    threadGroup.</span><span style="color:#B392F0;">setNumThreads</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    threadGroup.</span><span style="color:#B392F0;">setRampUp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    threadGroup.</span><span style="color:#B392F0;">setSamplerController</span><span style="color:#E1E4E8;">(loopController);</span></span>
<span class="line"><span style="color:#E1E4E8;">    threadGroup.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(TestElement.TEST_CLASS, ThreadGroup.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    threadGroup.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(TestElement.GUI_CLASS, ThreadGroupGui.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    ThreadGroup threadGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    threadGroup.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Example Thread Group&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    threadGroup.</span><span style="color:#6F42C1;">setNumThreads</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    threadGroup.</span><span style="color:#6F42C1;">setRampUp</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    threadGroup.</span><span style="color:#6F42C1;">setSamplerController</span><span style="color:#24292E;">(loopController);</span></span>
<span class="line"><span style="color:#24292E;">    threadGroup.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(TestElement.TEST_CLASS, ThreadGroup.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    threadGroup.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(TestElement.GUI_CLASS, ThreadGroupGui.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span></code></pre></div><p>以上是我们使用 JMeter API 创建 ThreadGroup 的代码，它实现了我们线程数的设置，如启动设置等。</p><p><strong>（3）创建循环控制器</strong></p><p>这一步是一个可选项。我们在实际测试过程中，可以选择多线程的循环或者按时间段进行。创建循环控制器是为了模拟一个用户多次进行同样操作的行为，不创建循环控制器则默认是只执行一次操作。循环控制器创建的代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    LoopController loopController </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoopController</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//设置循环次数，1 代表循环 1 次</span></span>
<span class="line"><span style="color:#E1E4E8;">    loopController.</span><span style="color:#B392F0;">setLoops</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    loopController.</span><span style="color:#B392F0;">setFirst</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    loopController.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(TestElement.TEST_CLASS, LoopController.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    loopController.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(TestElement.GUI_CLASS, LoopControlPanel.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    loopController.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    LoopController loopController </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoopController</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//设置循环次数，1 代表循环 1 次</span></span>
<span class="line"><span style="color:#24292E;">    loopController.</span><span style="color:#6F42C1;">setLoops</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    loopController.</span><span style="color:#6F42C1;">setFirst</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    loopController.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(TestElement.TEST_CLASS, LoopController.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    loopController.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(TestElement.GUI_CLASS, LoopControlPanel.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    loopController.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong>（4）创建 Sampler</strong></p><p>这一步来创建我们的实际请求，也是我们 JMeter 真正要执行的内容。以 HttpSampler 为例，创建 HttpSampler 是为了设置请求相关的一些信息，JMeter API 执行脚本的时候就可以根据我们设置的一些信息（比如请求地址、端口号、请求方式等）发送 HTTP 请求。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2.创建一个 HTTP Sampler - 打开 本地一个模拟地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    HTTPSamplerProxy httpSamplerProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HTTPSamplerProxy</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpSamplerProxy.</span><span style="color:#B392F0;">setDomain</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1:8080/index&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpSamplerProxy.</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpSamplerProxy.</span><span style="color:#B392F0;">setPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpSamplerProxy.</span><span style="color:#B392F0;">setMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpSamplerProxy.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Open ip&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpSamplerProxy.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(TestElement.TEST_CLASS, HTTPSamplerProxy.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    httpSamplerProxy.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(TestElement.GUI_CLASS, HttpTestSampleGui.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2.创建一个 HTTP Sampler - 打开 本地一个模拟地址</span></span>
<span class="line"><span style="color:#24292E;">    HTTPSamplerProxy httpSamplerProxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTTPSamplerProxy</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    httpSamplerProxy.</span><span style="color:#6F42C1;">setDomain</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1:8080/index&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    httpSamplerProxy.</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    httpSamplerProxy.</span><span style="color:#6F42C1;">setPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    httpSamplerProxy.</span><span style="color:#6F42C1;">setMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    httpSamplerProxy.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Open ip&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    httpSamplerProxy.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(TestElement.TEST_CLASS, HTTPSamplerProxy.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    httpSamplerProxy.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(TestElement.GUI_CLASS, HttpTestSampleGui.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span></code></pre></div><p>以上按照一个 HTTP 的请求方式设置了 IP、端口等。</p><p><strong>（5）创建结果收集器</strong></p><p>结果收集器可以保存每次 Sampler 操作完成之后的结果的相关数据，例如，每次接口请求返回的状态、服务器响应的数据。</p><p>我们可以根据结果数据做一些性能指标计算返回给前端，如果在这里创建了结果收集器，那第 4 个阶段&quot;结果收集&quot;中就不用再创建了。创建代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    ResultCollector resultCollector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResultCollector</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    resultCollector.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(ResultCollector.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    ResultCollector resultCollector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResultCollector</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    resultCollector.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(ResultCollector.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span></code></pre></div><p><strong>（6）构建 tree，生成 jmx 脚本</strong></p><p>以上第 2 步到第 5 步其实都是创建了一个 HashTree 的节点，就像我们用准备好的零件去拼装一辆赛车。我们把创建的这 4 个节点都添加到一个新建的子 HashTree 节点中，然后把子 HashTree 加到第 1 步的 testplan 中，最后再把 tesplan 节点加到构建好的父 HashTree 节点，这样就生成了我们的脚本可执行文件 jmx。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    HashTree subTree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashTree</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    subTree.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(httpSamplerProxy);</span></span>
<span class="line"><span style="color:#E1E4E8;">    subTree.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(loopController);</span></span>
<span class="line"><span style="color:#E1E4E8;">    subTree.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(threadGroup);</span></span>
<span class="line"><span style="color:#E1E4E8;">    subTree.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(resultCollector);</span></span>
<span class="line"><span style="color:#E1E4E8;">    HashTree tree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashTree</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    tree.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(testPlan,subTree);</span></span>
<span class="line"><span style="color:#E1E4E8;">    SaveService.</span><span style="color:#B392F0;">saveTree</span><span style="color:#E1E4E8;">(tree, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test.jmx&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    HashTree subTree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashTree</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    subTree.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(httpSamplerProxy);</span></span>
<span class="line"><span style="color:#24292E;">    subTree.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(loopController);</span></span>
<span class="line"><span style="color:#24292E;">    subTree.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(threadGroup);</span></span>
<span class="line"><span style="color:#24292E;">    subTree.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(resultCollector);</span></span>
<span class="line"><span style="color:#24292E;">    HashTree tree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashTree</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    tree.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(testPlan,subTree);</span></span>
<span class="line"><span style="color:#24292E;">    SaveService.</span><span style="color:#6F42C1;">saveTree</span><span style="color:#24292E;">(tree, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test.jmx&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过以上代码我们可以创建出 JMeter 可识别的 HashTree 结构，并且可以通过 saveTree 保存为 test.jmx 文件。</p><p>到这里我们就完成了创建脚本文件的流程。我在这一讲的开始提到：<strong>脚本加载可以构建 HashTree</strong> ，<strong>然后把构建的 HashTree 转成 JMeter 可执行的测试计划</strong> ，<strong>进而执行测试用例</strong>。因此，我们接下来进入第 3 个阶段：测试执行。</p><h3 id="测试执行" tabindex="-1">测试执行 <a class="header-anchor" href="#测试执行" aria-label="Permalink to &quot;测试执行&quot;">​</a></h3><p>通过脚本文件的执行（测试执行），我们便可以开始对服务器发起请求，进行性能测试。测试执行主要包括 2 个步骤：</p><ol><li><p>把可执行的测试文件加载到 StandardJMeterEngine；</p></li><li><p>通过 StandardJMeterEngine 的 run 方法执行，便实现了 Runable 的接口，其中 engine.run 执行的便是线程的 run 方法。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//根据 HashTree 执行测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">StandardJMeterEngine engine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StandardJMeterEngine</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">engine.</span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(jmxTree);</span></span>
<span class="line"><span style="color:#E1E4E8;">engine.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//根据 HashTree 执行测试用例</span></span>
<span class="line"><span style="color:#24292E;">StandardJMeterEngine engine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardJMeterEngine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">engine.</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(jmxTree);</span></span>
<span class="line"><span style="color:#24292E;">engine.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span></code></pre></div><p>通过以上代码，我们完成了代码方式驱动 JMeter 执行的核心步骤。</p><h3 id="结果收集" tabindex="-1">结果收集 <a class="header-anchor" href="#结果收集" aria-label="Permalink to &quot;结果收集&quot;">​</a></h3><p>性能实时数据采集可以更方便发现和分析出现的性能问题。我们在性能测试平台的脚本页面点击执行了性能测试脚本，当然希望能看到实时压测的性能测试数据，如果等测试完再生成测试报告，时效性就低了。</p><p>性能测试平台结果收集的流程图如下：</p>`,36),h=p(`<p>图 4：结果收集流程图</p><p>上面流程图中与 JMeter 关联最密切的是第 1 步，获取 JMeter 结果数据。那我们如何获取这些数据呢？</p><p>JMeter 性能测试用例执行完成之后会生成结果报告，既然生成了结果报告，那 JMeter 源码里一定有获取每次 loop 执行结果的地方。我们可以找到这个类，然后新建一个类去继承这个类，再重写每次结果获取的方法就能得到实时结果了。如果获取每次 loop 执行结果的是私有方法，我们也可以通过反射拿到它。</p><p>既然是这样，那关键就是找到， JMeter 执行中是在哪个类、哪个方法里拿的每次 loop 的结果。</p><p>通过查看 JMeter API 可以发现，JMeter API 提供了一个结果收集器（ResultCollector），从结果收集器的源码中可以找到获取每次 loop 执行结果的方法。结果收集器的部分源码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* When a test result is received, display it and save it.</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">event</span></span>
<span class="line"><span style="color:#6A737D;">*            the sample event that was received</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sampleOccurred</span><span style="color:#E1E4E8;">(SampleEvent event){...}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* When a test result is received, display it and save it.</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">event</span></span>
<span class="line"><span style="color:#6A737D;">*            the sample event that was received</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sampleOccurred</span><span style="color:#24292E;">(SampleEvent event){...}</span></span></code></pre></div><p>分析以上代码得知，我们可以重写 sampleOccurred 方法来收集每次 loop 的结果。该方法的参数 SampleEvent 中有我们需要的实时监控数据，这样实时监控就变得简单了。接下来，我以<strong>单客户端获取 QPS 实时监控数据</strong>为例，讲解性能测试平台结果收集相关代码实现的思路。</p><p>单客户端获取 QPS 实时监控数据，首先需要新建一个类继承 ResultCollector，并且重写 sampleOccurred 方法，但是这里有个问题：<strong>怎么接收 SampleEvent 里面的实时监控数据，或者说怎么取出来在我们的业务代码里应用呢</strong>？我们可以在 sampleOccurred 把监控数据存起来，然后写个接口读取存储的数据返回给前端。</p><p>图 4 中有一个中间件，这个中间件可以是<strong>内存数据库</strong> ，也可以是<strong>消息组件</strong>，根据中间件的不同有以下 2 种实现方式。</p><ol><li><p><strong>把需要的监控数据存在静态 map 里</strong> ，<strong>接口读取 map 里的数据返回给前端</strong>。这种方法虽然有利于初学者快速实现，但它的数据是存在内存中的 ，并且没有做持久化处理，容易出现丢失的情况，所以我们一般只在演示中使用。</p></li><li><p><strong>把数据存到消息队列里面</strong> ，<strong>接口将消费队列的数据返回给前端</strong>。这是目前在互联网公司中较为常用的使用方式，在高并发下可靠性也不错。</p></li></ol><p>下面我来讲解下第 2 种方式的代码：</p><ul><li>新建一个类继承 ResultCollector 重写 sampleOccurred 方法，使用 Kafka 接收消息；</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CCTestResultCollector</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResultCollector</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String REQUEST_COUNT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;requestCount&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CCTestResultCollector</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CCTestResultCollector</span><span style="color:#E1E4E8;">(Summariser </span><span style="color:#FFAB70;">summer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(summer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sampleOccurred</span><span style="color:#E1E4E8;">(SampleEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sampleOccurred</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ......</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//代码片段,使用 kafka 发送消息</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ProducerRecord&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&quot;monitorData&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;requestCount&quot;</span><span style="color:#E1E4E8;">, requestCountMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(REQUEST_COUNT) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (requestCountMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(REQUEST_COUNT) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CCTestResultCollector</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResultCollector</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String REQUEST_COUNT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;requestCount&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CCTestResultCollector</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CCTestResultCollector</span><span style="color:#24292E;">(Summariser </span><span style="color:#E36209;">summer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(summer);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sampleOccurred</span><span style="color:#24292E;">(SampleEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sampleOccurred</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">        ......</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//代码片段,使用 kafka 发送消息</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ProducerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;(</span><span style="color:#032F62;">&quot;monitorData&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;requestCount&quot;</span><span style="color:#24292E;">, requestCountMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(REQUEST_COUNT) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (requestCountMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(REQUEST_COUNT) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>后端获取存储的实时采集数据，这一步是后端获取数据并进行计算，生成的数据给前端展示使用。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getMonitorData&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">getMonitorData</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> MonitorDataReq monitorDataReq) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; monitorDataMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Long monitorXData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> monitorDataReq.</span><span style="color:#B392F0;">getMonitorXData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ......</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//kafka 消费消息代码片段，仅做示例演示</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//获取 ConsumerRecords，一秒钟轮训一次</span></span>
<span class="line"><span style="color:#E1E4E8;">            ConsumerRecords&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> consumer.</span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">(Duration.</span><span style="color:#B392F0;">ofMillis</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//消费消息，遍历 records</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ConsumerRecord&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; r </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> records) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(r.</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> r.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;requestCount&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(r.</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">())){</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">//r.value 便可以获取到我们上个代码片段发送的消息，然后对 requestCount 做计算，计算后的值 put 到 monitorDataMap 后返回给前端；</span></span>
<span class="line"><span style="color:#E1E4E8;">                  ......</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Result.</span><span style="color:#B392F0;">resultSuccess</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, monitorDataMap, ResultType.GET_PERFORMANCE_REPORT_SUCCE</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getMonitorData&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">getMonitorData</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> MonitorDataReq monitorDataReq) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; monitorDataMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Long monitorXData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monitorDataReq.</span><span style="color:#6F42C1;">getMonitorXData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ......</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//kafka 消费消息代码片段，仅做示例演示</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//获取 ConsumerRecords，一秒钟轮训一次</span></span>
<span class="line"><span style="color:#24292E;">            ConsumerRecords&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; records </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> consumer.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(Duration.</span><span style="color:#6F42C1;">ofMillis</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//消费消息，遍历 records</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ConsumerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; r </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> records) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(r.</span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> r.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;requestCount&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(r.</span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">())){</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">//r.value 便可以获取到我们上个代码片段发送的消息，然后对 requestCount 做计算，计算后的值 put 到 monitorDataMap 后返回给前端；</span></span>
<span class="line"><span style="color:#24292E;">                  ......</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Result.</span><span style="color:#6F42C1;">resultSuccess</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, monitorDataMap, ResultType.GET_PERFORMANCE_REPORT_SUCCE</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span></code></pre></div><p>实现后的效果图如下：</p>`,16),m=p('<p>图 5 ：效果图</p><blockquote><p>其中横坐标是时间，纵坐标是实时处理能力的展示，可以看到每秒请求次数在 400 ~ 600 之间波动。</p></blockquote><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我主要介绍了性能测试平台的功能模块划分，JMeter API 核心功能的 4 个阶段：环境初始化、脚本加载、测试执行和结果收集，并对脚本构建的 2 种方式和获取监控数据部分的代码实现思路做了一个详细的分析，同时贴出了关键部分的代码。</p><p>希望这一讲能够对你在开发性能测试平台时有所帮助，特别是关于平台实现还没有找到切入点的同学，性能测试平台开发相关的大多数需求都可以在这一讲的基础上扩展。</p><p>到此，我们对于工具的学习也告一段落了，通过<strong>模块一</strong>的学习，你不仅知道了工具的原理，还知道了它们的基础使用方法以及拓展方法。希望你也能在日常工作中，把这些工具用起来，有任何问题，都欢迎在留言区交流。</p><p>接下来，我们就进入<strong>模块二</strong>，系统地学习性能测试的需求分析、方案编写等。下一讲将为你讲解&quot;Nginx 在系统架构中的作用&quot;。</p>',7);function T(A,v,S,_,P,D){const n=e("Image");return t(),r("div",null,[E,y,i,l(n,{alt:"05.png",src:"https://s0.lgstatic.com/i/image2/M01/07/6C/CgpVE2AIEHeAGseIAAEYqQmZkM8141.png"}),s(),u,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8E/A0/Ciqc1GAFPJ-ASd02AAB5h9Xz8Ok173.png"}),s(),d,F,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8E/AB/CgqCHmAFPKaACL8lAACO4B5j9fY519.png"}),s(),C,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/06/8C/Cip5yGAFPLWAE3XRAAHi31Yd_oY766.png"}),s(),g,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/06/8E/CgpVE2AFPMiAUfRUAAHZ0vk2YZg058.png"}),s(),h,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/06/8C/Cip5yGAFPNWAIzKMAACkBrnfdmY418.png"}),s(),m])}const q=o(c,[["render",T]]);export{M as __pageData,q as default};
