import{_ as o,j as e,o as t,h as c,k as p,f as n,s,Q as l}from"./chunks/framework.d3daa342.js";const J=JSON.parse('{"title":"04数据是如何在React组件之间流动的？（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/046_深入浅出搞定 React/(4853) 04  数据是如何在 React 组件之间流动的？（上）.md","filePath":"posts/frontEnd/046_深入浅出搞定 React/(4853) 04  数据是如何在 React 组件之间流动的？（上）.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/046_深入浅出搞定 React/(4853) 04  数据是如何在 React 组件之间流动的？（上）.md"},E=s("h1",{id:"_04数据是如何在react组件之间流动的-上",tabindex:"-1"},[n("04数据是如何在React组件之间流动的？（上） "),s("a",{class:"header-anchor",href:"#_04数据是如何在react组件之间流动的-上","aria-label":'Permalink to "04数据是如何在React组件之间流动的？（上）"'},"​")],-1),y=s("p",null,[n('通过前面 3 个课时的学习，相信你已经对 React 生命周期相关的"Why""What"和"How"有了系统的理解和掌握。当我们谈论生命周期时，其实谈论的是组件的"内心世界"。但组件和人是一样的，它不仅需要拥有丰富的内心世界，还应该建立健全的"人际关系"，要学会'),s("strong",null,"沟通和表达"),n("。")],-1),i=s("p",null,[n('从本课时开始，我们将一起探索蕴含在 React 组件中的"沟通与表达"的艺术。我们知道，React 的核心特征是"'),s("strong",null,"数据驱动视图"),n('"，这个特征在业内有一个非常有名的函数式来表达：')],-1),F=l("",6),h=l("",13),d=s("p",null,"通过子组件顺利读取到父组件的 this.props.text，从这一点可以看出，父-子之间的通信是没有问题的。此时假如我们点击父组件中的按钮，父组件的 this.state.text 会发生变化，同时子组件读取到的 props.text 也会跟着发生变化（如下图所示），也就是说，父子组件的数据始终保持一致。",-1),g=l("",12),C=s("p",null,"注意，在这个 case 中，我们将具有更新数据能力的按钮转移到了子组件中。",-1),u=s("p",null,"当点击子组件中的按钮时，会调用已经绑定了父组件上下文的 this.props.changeFatherText 方法，同时将子组件的 this.state.text 以函数入参的形式传入，由此便能够间接地用子组件的 state 去更新父组件的 state。",-1),A=s("p",null,"点击按钮后，父组件的文本会按照我们的预期被子组件更新掉，如下图所示：",-1),D=s("h4",{id:"兄弟组件通信",tabindex:"-1"},[n("兄弟组件通信 "),s("a",{class:"header-anchor",href:"#兄弟组件通信","aria-label":'Permalink to "兄弟组件通信"'},"​")],-1),v=s("p",null,[s("strong",null,"原理讲解")],-1),B=s("p",null,"兄弟组件之间共享了同一个父组件，如下图所示，这是一个非常重要的先决条件。",-1),m=s("p",null,'这个先决条件使得我们可以继续利用父子组件这一层关系，将"兄弟 1 → 兄弟 2"之间的通信，转化为"兄弟 1 → 父组件"（子-父通信）、"父组件 → 兄弟 2"（父-子）通信两个步骤，如下图所示，这样一来就能够巧妙地把"兄弟"之间的新问题化解为"父子"之间的旧问题。',-1),q=l("",7),_=s("p",null,"由于整体结构稍微复杂了一些，这里我把 Father、Child 和 NewChild 在图中的大致范围标一下：",-1),x=s("ul",null,[s("li",null,[s("p",null,"红色所圈范围为 Father 组件，它包括了 Child 和 NewChild；")]),s("li",null,[s("p",null,"灰色圈住的按钮是 NewChild 组件的渲染结果，它可以触发数据的改变；")]),s("li",null,[s("p",null,"蓝色圈住的文本是 Child 组件的渲染结果，它负责感知和渲染数据。")])],-1),b=s("p",null,'现在我点击位于 NewChild 组件中的"点击更新 Child 组件的文本"按钮，就可以看到 Child 会跟着发生变化，如下图所示，进而验证方案的可行性。',-1),T=s("h4",{id:"为什么不推荐用-props-解决其他场景的需求",tabindex:"-1"},[n("为什么不推荐用 props 解决其他场景的需求 "),s("a",{class:"header-anchor",href:"#为什么不推荐用-props-解决其他场景的需求","aria-label":'Permalink to "为什么不推荐用 props 解决其他场景的需求"'},"​")],-1),k=s("p",null,"至此，我们给出了 props 传参这种形式比较适合处理的三种场景。尽管这并不意味着其他场景不能用 props 处理，但如果你试图用简单的 props 传递完成更加复杂的通信需求，往往会得不偿失。这里我给你举一个比较极端的例子：",-1),f=l("",38),w=l("",9),M=s("p",null,"依次点击顶部和底部的按钮，就可以实现对 someEvent 这个事件的监听和触发，进而观察到中间这行文本的改变，如下图所示：",-1),N=s("p",null,"由此我们便可以验证到发布-订阅模式驱动 React 数据流的可行性。为了强化你对过程的理解，我将 A 与 B 的通信过程梳理进了一张图里，供你参考：",-1),R=l("",5);function S(P,j,I,O,H,V){const a=e("Image");return t(),c("div",null,[E,y,i,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-OmrSAZkEwAAA2ThydXNs410.png"}),n(),F,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/61/02/CgqCHl-OmsuAF_FSAAB4ormSPI8355.png"}),n(),h,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/61/02/CgqCHl-OmuWAaqeoAABhmFu-VMo782.png"}),n(),d,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Omu-AcVKJAABe2pgKMlQ354.png"}),n(),g,p(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/61/03/CgqCHl-Om1qAWYoYAABEbXaJOH4748.png"}),n(),C,u,A,p(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/61/03/CgqCHl-Om1KAR7b2AABAwOe1KdQ729.png"}),n(),D,v,B,p(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Om2qAJmdoAADBknkoDh4735.png"}),n(),m,p(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/61/03/CgqCHl-Om3KAMCvhAADUh2BcieU209.png"}),n(),q,p(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Om4CAaYYmAABgp6tGilY796.png"}),n(),_,p(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Om4eAFvb7AACD10q8ddE601.png"}),n(),x,b,p(a,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Om5GAagXzAAIiBlsRdIM293.png"}),n(),T,k,p(a,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image/M00/60/F8/Ciqc1F-Om5iAAUUhAABLimeJTao712.png"}),n(),f,p(a,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image/M00/60/F8/Ciqc1F-Om7eAC75dAAMfTZMkn3A636.png"}),n(),w,p(a,{alt:"Drawing 18.png",src:"https://s0.lgstatic.com/i/image/M00/61/03/CgqCHl-Om8uAMxXIAAA9zJmLTSg441.png"}),n(),M,p(a,{alt:"Drawing 19.png",src:"https://s0.lgstatic.com/i/image/M00/60/F8/Ciqc1F-Om9CAUv1uAABH1-iBy-U054.png"}),n(),N,p(a,{alt:"Lark20201117-141619.png",src:"https://s0.lgstatic.com/i/image/M00/6E/B0/Ciqc1F-zbFSAa6tMAAC2rDdKPpI299.png"}),n(),R])}const L=o(r,[["render",S]]);export{J as __pageData,L as default};
