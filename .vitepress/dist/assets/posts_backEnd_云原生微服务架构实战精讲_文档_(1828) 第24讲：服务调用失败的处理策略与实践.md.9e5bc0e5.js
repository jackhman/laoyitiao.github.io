import{_ as o,D as e,o as t,g as r,J as l,h as s,Q as p,m as n}from"./chunks/framework.f67d7268.js";const C=JSON.parse('{"title":"第24讲：服务调用失败的处理策略与实践","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1828) 第24讲：服务调用失败的处理策略与实践.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1828) 第24讲：服务调用失败的处理策略与实践.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1828) 第24讲：服务调用失败的处理策略与实践.md"},E=p(`<h1 id="第24讲-服务调用失败的处理策略与实践" tabindex="-1">第24讲：服务调用失败的处理策略与实践 <a class="header-anchor" href="#第24讲-服务调用失败的处理策略与实践" aria-label="Permalink to &quot;第24讲：服务调用失败的处理策略与实践&quot;">​</a></h1><p>在微服务架构的应用中，微服务之间一般有两种类型的交互方式，一种是使用消息中间件的异步消息模式，也就是第 14 课时中提到的事件驱动设计，微服务之间进行交互的是消息、事件和命令；另外一种是基于 REST 或 gRPC 的同步调用，微服务之间通过 API 调用来进行交互。从设计的角度来说，事件驱动的方式更加适合于微服务架构的应用，但是在实际开发中，基于 REST 或 gRPC 的 API 同步调用的使用更加广泛。这主要是因为 API 调用的方式可以与开发中常用的方法调用进行类比，更容易理解和实现。本课时介绍的是服务调用时如何进行错误处理，以 REST API 来说明。</p><h3 id="服务-api-调用" tabindex="-1">服务 API 调用 <a class="header-anchor" href="#服务-api-调用" aria-label="Permalink to &quot;服务 API 调用&quot;">​</a></h3><p>服务 API 调用是微服务之间最直接的交互方式。由于不同微服务有各自界定的上下文和内部的模型，相互之间只能通过开放 API 来访问。在实现某些业务场景时，一个微服务可能需要调用其他微服务的 API。比如，在示例应用中，行程管理服务在创建行程时需要与行程验证服务和支付服务进行交互。如果不使用基于异步消息传递的 Saga 来实现，就必须由行程管理服务来调用另外两个服务的 API。</p><p>服务的 API 调用可以与代码中常见的方法调用进行类比，只不过调用方式改成了发送 HTTP 请求并解析响应内容，这其中还涉及请求和响应内容的序列化与反序列化。如果采用 API 优先的设计，可以直接从 OpenAPI 文档中通过 Swagger 工具生成调用 API 的客户端，屏蔽底层 HTTP 请求的细节，可以直接等同于方法调用。</p><p>在下面对 API 调用的描述中，发送请求的一方称为请求方，接收请求的一方称为响应方。</p><h3 id="api-调用的失败场景" tabindex="-1">API 调用的失败场景 <a class="header-anchor" href="#api-调用的失败场景" aria-label="Permalink to &quot;API 调用的失败场景&quot;">​</a></h3><p>由于 API 调用发生在两个独立运行的微服务之间，可能出现错误的情况要比一般的方法调用要多，主要分为下表中的几类。</p><table><thead><tr><th style="text-align:left;">错误类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">网络错误</td><td style="text-align:left;">由于网络原因，造成请求方的请求无法发送到响应方。造成的原因可能是网络连接中断，或者是响应方已崩溃</td></tr><tr><td style="text-align:left;">协议错误</td><td style="text-align:left;">请求方所发送的请求格式，不满足双方所达成的交互协议的要求</td></tr><tr><td style="text-align:left;">应用错误</td><td style="text-align:left;">响应方在处理请求时产生的错误</td></tr></tbody></table><p><strong>网络错误</strong>指的是由于网络原因，而造成请求方的请求无法发送到响应方。产生该错误的原因，可能是请求方和响应方之间的网络连接出现问题，也有可能是响应方已崩溃，或者是在重新启动的过程中。这样的错误会在底层的 TCP/IP 协议栈中抛出异常。在 Java 中，与这样的错误相关的是 SocketException 异常类型及其子类型 ConnectException 和 NoRouteToHostException。</p><p><strong>协议错误</strong>指的是请求方和响应方在数据传输的协议上产生了不一致，其中一方没有遵循协议的要求。这类错误分成客户端错误和服务器端错误两种。客户端错误指的是客户端发送的请求内容不满足协议的格式要求，比如非法的内容格式、错误的参数类型或数据格式；服务器端错误指的是服务器发送的响应内容不满足协议的格式要求，比如非法的内容格式。</p><p><strong>应用错误</strong>指的是应用在处理请求时产生的内部错误，与每个应用的业务逻辑紧密相关，比如请求的内容虽然满足协议的要求，但是无法通过应用的验证，或是由于应用所依赖的外部服务产生了错误。</p><p>上述三类错误可以从另外一个维度分成两个类别：当网络错误产生时，请求方发送的 HTTP 请求无法得到响应；而协议错误和应用错误则可以得到响应，但是 HTTP 响应中包含的是表示错误的状态码。</p><p>HTTP 协议使用不同的状态码来表示响应的状态。HTTP 客户端可以根据响应的状态码来进行不同的处理。HTTP 状态码中表示错误的是以 4 开头的客户端错误，和以 5 开头的服务器端错误。</p><p>下表是以 4 开头的 HTTP 状态码的说明。</p><table><thead><tr><th style="text-align:left;"><strong>状态码</strong></th><th style="text-align:left;"><strong>名称</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">400</td><td style="text-align:left;">Bad Request</td><td style="text-align:left;">非法的请求</td></tr><tr><td style="text-align:left;">401</td><td style="text-align:left;">Unauthorized</td><td style="text-align:left;">未授权的访问请求，没有包含认证信息或认证信息无效</td></tr><tr><td style="text-align:left;">403</td><td style="text-align:left;">Forbidden</td><td style="text-align:left;">被禁止的访问请求</td></tr><tr><td style="text-align:left;">404</td><td style="text-align:left;">Not Found</td><td style="text-align:left;">访问的资源不存在</td></tr><tr><td style="text-align:left;">405</td><td style="text-align:left;">Method Not Allowed</td><td style="text-align:left;">不支持的 HTTP 方法</td></tr><tr><td style="text-align:left;">409</td><td style="text-align:left;">Conflict</td><td style="text-align:left;">资源的状态产生冲突</td></tr><tr><td style="text-align:left;">412</td><td style="text-align:left;">Precondition Failed</td><td style="text-align:left;">服务器无法满足客户端在 HTTP 头中指定的前置条件</td></tr><tr><td style="text-align:left;">415</td><td style="text-align:left;">Unsupported Media Type</td><td style="text-align:left;">请求内容使用了不支持的媒体类型</td></tr><tr><td style="text-align:left;">422</td><td style="text-align:left;">Unprocessable Entity</td><td style="text-align:left;">无法处理的请求实体</td></tr><tr><td style="text-align:left;">429</td><td style="text-align:left;">Too Many Requests</td><td style="text-align:left;">客户端在一段时间内的请求数量过多</td></tr></tbody></table><p>下表是以 5 开头的 HTTP 状态码的说明。</p><table><thead><tr><th style="text-align:left;"><strong>状态码</strong></th><th style="text-align:left;"><strong>名称</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">500</td><td style="text-align:left;">Internal Server Error</td><td style="text-align:left;">未预期的服务器内部错误</td></tr><tr><td style="text-align:left;">501</td><td style="text-align:left;">Not Implemented</td><td style="text-align:left;">暂时未实现的功能</td></tr><tr><td style="text-align:left;">502</td><td style="text-align:left;">Bad Gateway</td><td style="text-align:left;">当服务器作为网关或代理时，接收到来自上游服务器的无效响应</td></tr><tr><td style="text-align:left;">503</td><td style="text-align:left;">Service Unavailable</td><td style="text-align:left;">服务器暂时无法处理请求</td></tr><tr><td style="text-align:left;">504</td><td style="text-align:left;">Gateway Timeout</td><td style="text-align:left;">当服务器作为网关或代理时，上游服务器没有在指定的时间内返回响应</td></tr></tbody></table><p>在 API 调用的错误处理中，很重要的一点是根据 HTTP 状态码来应用不同的处理策略。当一个 HTTP 请求出现错误时，最直接的处理方法是出错，抛出异常之后由应用代码进行处理；另外一种做法是对请求的响应结果进行缓存，当出现错误时，在缓存中查找同样请求的上一次响应值，作为这次请求的响应。最后一种做法是使用固定值来作为返回结果。</p><h3 id="错误处理策略" tabindex="-1">错误处理策略 <a class="header-anchor" href="#错误处理策略" aria-label="Permalink to &quot;错误处理策略&quot;">​</a></h3><p>当 API 调用发生错误时，可以采取不同的错误处理策略。</p><h4 id="重试" tabindex="-1">重试 <a class="header-anchor" href="#重试" aria-label="Permalink to &quot;重试&quot;">​</a></h4><p>当 API 调用出错时，一种常见的处理方式是重试。重试在某些情况下是有作用的，比如由于服务器突发的过大负载，或是与依赖的支撑服务的连接出现暂时性中断。当再次发送请求时，服务器可能已经从故障中恢复，可以正常处理请求。在应用运行时，总是会有各种突发的瞬时性的问题，重试则可以解决这些问题。</p><p>只有幂等的请求才可以进行重试，也就是说，重复的请求不会产生副作用。HTTP 中的 GET 请求从语义上来说是幂等的，在实现中，也应该避免在处理 GET 请求时改变资源的状态。对于 POST、PUT 和 DELETE 这样的请求，是否幂等取决于请求的语义和实现方式。对于非幂等的请求，重试时需要谨慎注意。比如，在进行支付的 API 调用时，如果调用超时，尽管客户端会出错，但实际的支付操作可能已经正常完成。客户端如果进行重试，可能会造成重复支付的情况。</p><p>在重试时可以有不同的策略，典型的策略包括<strong>固定时间间隔</strong> 和<strong>指数回退间隔</strong> ，对于重试的次数，也应该设置上限。在 Java 中，推荐使用 <a href="https://github.com/spring-projects/spring-retry" target="_blank" rel="noreferrer">Spring Retry</a> 库来进行重试。在下面的代码中，RetryTemplate 是 Spring Retry 提供的重试模板类，通过构建器来创建。它在遇到 SampleServiceException 异常时会进行重试，最大的重试次数是 3，每次重试之间的间隔是 1 秒钟。RetryTemplate 的 execute 方法用来执行需要进行重试的代码逻辑。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RetryExample</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doRetry</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SampleService service </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SampleService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RetryTemplate template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RetryTemplate.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">maxAttempts</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">fixedBackoff</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">retryOn</span><span style="color:#E1E4E8;">(SampleServiceException.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(context </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> service.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RetryExample</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doRetry</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SampleService service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SampleService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RetryTemplate template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RetryTemplate.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">maxAttempts</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">fixedBackoff</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">retryOn</span><span style="color:#24292E;">(SampleServiceException.class)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(context </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="设置网络超时" tabindex="-1">设置网络超时 <a class="header-anchor" href="#设置网络超时" aria-label="Permalink to &quot;设置网络超时&quot;">​</a></h4><p>HTTP 协议采用的是<strong>请求-响应</strong>的模式。在获取到服务器端返回的响应之前，客户端需要进行等待。在等待响应时，要避免无限制地等待，所有的 HTTP 请求都需要加上超时时间。如果超过给定的时间间隔，仍然没有接收到响应，则需要进入超时错误的异常处理。这可以避免长时间的请求占用过多的资源。</p><p>常用的 HTTP 客户端都提供了对请求超时的支持。默认的超时设置不一定满足应用的要求，需要根据被调用服务的特征来进行调整，过长或过短的超时设置都有问题。</p><h4 id="应用请求限制" tabindex="-1">应用请求限制 <a class="header-anchor" href="#应用请求限制" aria-label="Permalink to &quot;应用请求限制&quot;">​</a></h4><p>请求限制用来限制一段时间内允许的最大请求的数量。通过限制请求数量，可以避免负载过大造成服务崩溃。</p><h4 id="使用断路器" tabindex="-1">使用断路器 <a class="header-anchor" href="#使用断路器" aria-label="Permalink to &quot;使用断路器&quot;">​</a></h4><p>断路器的概念来自电气工程领域。断路器平时处于闭合状态，当电路中的电流过大时，断路器会打开，从而切断电路，保护电路中的元器件不受影响。在 API 调用中，断路器可以作为是否允许调用进行的开关。正常情况下，断路器处于闭合状态，API 调用可以正常进行；当 API 调用在一段时间内频繁出错时，断路器会打开，从而阻止 API 调用的进行。当断路器处于打开状态时，所有 API 调用会直接出错。在一段时间过后，客户端可以进行重试。如果 API 调用成功，那么闭合断路器。</p><p>断路器负责监控成功和失败的 API 调用的数量。当一段时间内的错误率超过指定的阈值时，这通常意味着响应方处于不可用的状态，新的调用请求也大概率会失败。与其让所有请求因为超时而失败，还不如直接失败，断路器可以避免服务之间的级联失败。</p><p>在示例应用中，对于接收到的行程创建请求，行程管理服务需要调用支付服务来完成支付。当由于请求过多，造成支付服务的响应时间变长之后，新的请求会由于等待支付服务的返回结果，而处于阻塞状态，直到出现超时错误才能恢复。这会造成行程管理服务中堆积大量未处理的请求，可能造成该服务的崩溃。在使用了断路器之后，当监测到支付服务出现问题时，新的请求会直接出错，从而可以快速地进行处理。</p><h3 id="服务器端错误处理" tabindex="-1">服务器端错误处理 <a class="header-anchor" href="#服务器端错误处理" aria-label="Permalink to &quot;服务器端错误处理&quot;">​</a></h3><p>响应方需要处理客户端产生的错误。通常的 REST API 实现框架都提供了相应的支持。以 Spring MVC 为例，如果请求的 URL 查询参数或请求内容的格式不正确，Spring MVC 会自动返回 400 错误。在处理请求中产生的异常，Spring MVC 也会进行捕获，并返回 500 错误，应用代码也可以添加自定义的错误处理逻辑。</p><p>在下面代码中，OrderService 的 findOrder 方法在找不到 orderId 所对应的 Order 对象时，会抛出运行时异常 OrderNotFoundException。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">findOrder</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderNotFoundException</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">findOrder</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderNotFoundException</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在对应的 Spring MVC 的 REST 控制器 OrderController 类中，getOrder 方法并不需要进行异常处理。handleException 方法上的 @ExceptionHandler 注解，用来声明该方法包含了对 OrderNotFoundException 异常的处理逻辑。在异常产生时，handleException 方法的返回值会作为 HTTP 响应的内容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/order&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  OrderService orderService;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{orderId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">getOrder</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderId&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.orderService.</span><span style="color:#B392F0;">findOrder</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">ExceptionHandler</span><span style="color:#E1E4E8;">(OrderNotFoundException.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseEntity&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">handleException</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> OrderNotFoundException </span><span style="color:#FFAB70;">exception</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ResponseEntity.</span><span style="color:#B392F0;">notFound</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/order&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  OrderService orderService;</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{orderId}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">getOrder</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderId&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.orderService.</span><span style="color:#6F42C1;">findOrder</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(OrderNotFoundException.class)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseEntity&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">handleException</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> OrderNotFoundException </span><span style="color:#E36209;">exception</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResponseEntity.</span><span style="color:#6F42C1;">notFound</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外一种做法是通过 @ControllerAdvice 注解来添加全局的异常处理器。下面代码中的 handleException 方法对 PaymentException 异常进行了处理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ControllerAdvice</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GlobalExceptionHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">ExceptionHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseEntity&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">handleException</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PaymentException </span><span style="color:#FFAB70;">exception</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ResponseEntity.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(HttpStatus.INTERNAL_SERVER_ERROR)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(exception.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ControllerAdvice</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GlobalExceptionHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">ExceptionHandler</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseEntity&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">handleException</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PaymentException </span><span style="color:#E36209;">exception</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResponseEntity.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(HttpStatus.INTERNAL_SERVER_ERROR)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(exception.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="客户端错误处理" tabindex="-1">客户端错误处理 <a class="header-anchor" href="#客户端错误处理" aria-label="Permalink to &quot;客户端错误处理&quot;">​</a></h3><p>在客户端处理 API 调用错误时，根据调用方式的不同，有不同的处理方式。</p><h4 id="使用-http-客户端" tabindex="-1">使用 HTTP 客户端 <a class="header-anchor" href="#使用-http-客户端" aria-label="Permalink to &quot;使用 HTTP 客户端&quot;">​</a></h4><p>最直接的做法是使用 Java 中的 HTTP 客户端来发送请求和处理响应。在下面的代码中，PaymentGateway 的 makePayment 方法使用 OkHttp 来发送 HTTP 请求。如果发送 HTTP 请求时产生 IOException 异常，这说明产生了网络相关的错误；如果可以得到 HTTP 响应，则根据 HTTP 状态码来判断是否出错。对于这两种出错的情况，都抛出运行时异常 PaymentException。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PaymentGateway</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MediaType JSON </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MediaType.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;application/json; charset=utf-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> OkHttpClient client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OkHttpClient</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">makePayment</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://httpbin.org/status/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> orderId;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RequestBody body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RequestBody.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(JSON, </span><span style="color:#9ECBFF;">&quot;{}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Request request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Request.</span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(url)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(body)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Response response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.client.</span><span style="color:#B392F0;">newCall</span><span style="color:#E1E4E8;">(request).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.</span><span style="color:#B392F0;">isSuccessful</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PaymentException</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PaymentException</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PaymentGateway</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MediaType JSON </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MediaType.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;application/json; charset=utf-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> OkHttpClient client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OkHttpClient</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">makePayment</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://httpbin.org/status/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> orderId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RequestBody body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestBody.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(JSON, </span><span style="color:#032F62;">&quot;{}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Request request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Request.</span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">url</span><span style="color:#24292E;">(url)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(body)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Response response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.client.</span><span style="color:#6F42C1;">newCall</span><span style="color:#24292E;">(request).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.</span><span style="color:#6F42C1;">isSuccessful</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PaymentException</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PaymentException</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="使用-swagger-客户端" tabindex="-1">使用 Swagger 客户端 <a class="header-anchor" href="#使用-swagger-客户端" aria-label="Permalink to &quot;使用 Swagger 客户端&quot;">​</a></h4><p>如果从 OpenAPI 文档中产生了 Swagger 客户端代码，可以直接使用。下面代码中的 TripServiceProxy 类使用行程管理服务生成的 TripApi 来调用服务，只需要捕获 ApiException 异常就可以处理错误。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@Component</span></span>
<span class="line"><span style="color:#E1E4E8;">public class TripServiceProxy {</span></span>
<span class="line"><span style="color:#E1E4E8;">  private final TripApi tripApi = new TripApi();</span></span>
<span class="line"><span style="color:#E1E4E8;">  public void createTrip(final CreateTripRequest request) throws ApiException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.tripApi.createTrip(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@Component</span></span>
<span class="line"><span style="color:#24292E;">public class TripServiceProxy {</span></span>
<span class="line"><span style="color:#24292E;">  private final TripApi tripApi = new TripApi();</span></span>
<span class="line"><span style="color:#24292E;">  public void createTrip(final CreateTripRequest request) throws ApiException {</span></span>
<span class="line"><span style="color:#24292E;">    this.tripApi.createTrip(request);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有一些流行的开源库可以用来处理 API 调用失败。Java 中常用的库包括 Netflix 的 <a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noreferrer">Hystrix</a>、阿里巴巴的 <a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noreferrer">Sentinel</a> 和 <a href="https://github.com/resilience4j/resilience4j" target="_blank" rel="noreferrer">resilience4j</a>。Hystrix 是这一领域的先行者，很多目前广泛流行的理念都来自这个库。不过目前 Netflix 已经不再开发 Hystrix，这个项目目前处于维护状态。阿里巴巴的 Sentinel 是另外一个流行的选择。本课时将对这两个库进行简要地介绍。</p><h4 id="hystrix" tabindex="-1">Hystrix <a class="header-anchor" href="#hystrix" aria-label="Permalink to &quot;Hystrix&quot;">​</a></h4><p>Hystrix 把对 API 的调用抽象成命令的执行。首先需要为每个 API 调用请求创建 HystrixCommand 类的子类，类型参数 R 是命令的返回值类型。</p><p>下面代码中的 MakePaymentCommand 类封装了对 PaymentGateway 的 makePayment 方法的调用。在构造器中，设置了命令的分组和超时时间。命令执行的逻辑封装在 run 方法中，当命令执行出现错误时，getFallback 方法的返回值会作为命令的执行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakePaymentCommand</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixCommand</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PaymentGateway paymentGateway;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String orderId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakePaymentCommand</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PaymentGateway </span><span style="color:#FFAB70;">paymentGateway</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(Setter.</span><span style="color:#B392F0;">withGroupKey</span><span style="color:#E1E4E8;">(HystrixCommandGroupKey.Factory.</span><span style="color:#B392F0;">asKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Payment&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">andCommandPropertiesDefaults</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            HystrixCommandProperties.</span><span style="color:#B392F0;">Setter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">withExecutionTimeoutInMilliseconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.paymentGateway </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> paymentGateway;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.orderId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.paymentGateway.</span><span style="color:#B392F0;">makePayment</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getFallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;fallback&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakePaymentCommand</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixCommand</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PaymentGateway paymentGateway;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String orderId;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakePaymentCommand</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PaymentGateway </span><span style="color:#E36209;">paymentGateway</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(Setter.</span><span style="color:#6F42C1;">withGroupKey</span><span style="color:#24292E;">(HystrixCommandGroupKey.Factory.</span><span style="color:#6F42C1;">asKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Payment&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">andCommandPropertiesDefaults</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            HystrixCommandProperties.</span><span style="color:#6F42C1;">Setter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withExecutionTimeoutInMilliseconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.paymentGateway </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paymentGateway;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderId;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.paymentGateway.</span><span style="color:#6F42C1;">makePayment</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.orderId);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getFallback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;fallback&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>HystrixCommand 类提供了不同的方式来执行命令，如下表所示。</p><table><thead><tr><th style="text-align:left;"><strong>方法</strong></th><th style="text-align:left;"><strong>返回值类型</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">execute</td><td style="text-align:left;">R</td><td style="text-align:left;">同步的命令执行</td></tr><tr><td style="text-align:left;">queue</td><td style="text-align:left;">Future</td><td style="text-align:left;">异步的命令执行</td></tr><tr><td style="text-align:left;">observe</td><td style="text-align:left;">Observable</td><td style="text-align:left;">使用RxJava进行反应式执行</td></tr></tbody></table><p>在下面的代码中，创建了一个新的 MakePaymentCommand 对象，并调用 execute 方法来进行同步命令执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">makePaymentHystrixSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String orderId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakePaymentCommand</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.paymentGateway, orderId).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">makePaymentHystrixSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String orderId) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakePaymentCommand</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.paymentGateway, orderId).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Hystrix 支持对命令执行结果的缓存。HystrixCommand 的子类可以覆写 getCacheKey 方法来提供缓存的键的名称。在启用了缓存之后，命令执行时会首先尝试从缓存中读取之前保存的值来作为响应。一般的做法是在处理 GET 请求时读取缓存值，而处理 POST、PUT 和 PATCH 请求时会使得缓存的值无效。</p><p>Hystrix 提供了一个仪表板界面来监控 API 调用的状态，该仪表板的界面如下图所示，从中可以看到 MakePaymentCommand 命令的执行结果的统计信息。</p>`,62),y=p(`<h4 id="sentinel" tabindex="-1">Sentinel <a class="header-anchor" href="#sentinel" aria-label="Permalink to &quot;Sentinel&quot;">​</a></h4><p>Sentinel 使用资源（Resource）来描述需要被保护的对象，最常用的资源是 Java 中的方法调用。通过 SphU.entry 和 Entry 的 exit 方法来分别定义保护的起点和终点。在下面的代码中，SphU.entry 方法的参数是资源的名称，在使用了 try-with-resources 语句之后，不再需要显式的调用 Entry 的 exit 方法。BlockException 异常表明方法调用被阻止运行，在处理该异常时可以添加相应的错误处理逻辑。下面的代码展示了 Sentinel 的基本用法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">makePaymentSentinel</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String orderId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Entry ignored </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SphU.</span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;payment&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.paymentGateway.</span><span style="color:#B392F0;">makePayment</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> BlockException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;fallback&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">makePaymentSentinel</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String orderId) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Entry ignored </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SphU.</span><span style="color:#6F42C1;">entry</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;payment&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.paymentGateway.</span><span style="color:#6F42C1;">makePayment</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> BlockException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;fallback&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Sentinel 可以通过规则来进行流量控制，这可以避免服务调用由于负载过大而崩溃。在下面的代码中，每个 FlowRule 对象表示一个规则，规则应用在指定的资源上。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">FlowRule</span><span style="color:#E1E4E8;">&gt; rules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> FlowRule rule1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FlowRule</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  rule1.</span><span style="color:#B392F0;">setResource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;payment&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  rule1.</span><span style="color:#B392F0;">setCount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  rule1.</span><span style="color:#B392F0;">setGrade</span><span style="color:#E1E4E8;">(RuleConstant.FLOW_GRADE_QPS);</span></span>
<span class="line"><span style="color:#E1E4E8;">  rules.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(rule1);</span></span>
<span class="line"><span style="color:#E1E4E8;">  FlowRuleManager.</span><span style="color:#B392F0;">loadRules</span><span style="color:#E1E4E8;">(rules);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">FlowRule</span><span style="color:#24292E;">&gt; rules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> FlowRule rule1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FlowRule</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  rule1.</span><span style="color:#6F42C1;">setResource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;payment&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  rule1.</span><span style="color:#6F42C1;">setCount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  rule1.</span><span style="color:#6F42C1;">setGrade</span><span style="color:#24292E;">(RuleConstant.FLOW_GRADE_QPS);</span></span>
<span class="line"><span style="color:#24292E;">  rules.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(rule1);</span></span>
<span class="line"><span style="color:#24292E;">  FlowRuleManager.</span><span style="color:#6F42C1;">loadRules</span><span style="color:#24292E;">(rules);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Sentinel 也提供了功能强大的仪表板，如下图所示。</p>`,6),i=n("h3",{id:"总结",tabindex:"-1"},[s("总结 "),n("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),d=n("p",null,"微服务之间可以通过同步 API 调用来进行交互。本课时以 REST API 为例，说明了服务调用失败时的处理策略，包括重试和使用断路器等，还介绍了 Hystrix 和 Sentinel 这两个开源库。通过本课时的学习，你可以掌握在 API 调用时如何对可能出现的错误情况进行处理，以及使用 Hystrix 或 Sentinel 来帮助你解决问题。",-1);function F(u,g,h,A,x,m){const a=e("Image");return t(),r("div",null,[E,l(a,{alt:"hystrix-dashboard.png",src:"https://s0.lgstatic.com/i/image/M00/19/09/Ciqc1F7Z6G6AKyimAAI8lkXCM94013.png"}),s(),y,l(a,{alt:"sentinel-dashboard.png",src:"https://s0.lgstatic.com/i/image/M00/19/09/Ciqc1F7Z6HuAXO9ZAAIXI0MwGo8355.png"}),s(),i,d])}const b=o(c,[["render",F]]);export{C as __pageData,b as default};
