import{_ as l,j as o,o as e,h as t,k as n,f as a,Q as p,s as c}from"./chunks/framework.d3daa342.js";const B=JSON.parse('{"title":"09从实战出发，从0到1构建一个符合标准的公共库","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5914) 09  从实战出发，从 0 到 1 构建一个符合标准的公共库.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5914) 09  从实战出发，从 0 到 1 构建一个符合标准的公共库.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5914) 09  从实战出发，从 0 到 1 构建一个符合标准的公共库.md"},E=p(`<h1 id="_09从实战出发-从0到1构建一个符合标准的公共库" tabindex="-1">09从实战出发，从0到1构建一个符合标准的公共库 <a class="header-anchor" href="#_09从实战出发-从0到1构建一个符合标准的公共库" aria-label="Permalink to &quot;09从实战出发，从0到1构建一个符合标准的公共库&quot;">​</a></h1><p>上一讲我们从 Babel 编译预设的角度理清了前端生态中的公共库和应用的丝缕关联，这一讲我们就从实战出发，动手剖析一个公共库从设计到完成的过程。</p><p>（源码出处：<a href="https://github.com/intricatecloud/reusable-js-demo" target="_blank" rel="noreferrer">Creating a simple npm library to use in and out of the browser）</a></p><h3 id="实战打造一个公共库" tabindex="-1">实战打造一个公共库 <a class="header-anchor" href="#实战打造一个公共库" aria-label="Permalink to &quot;实战打造一个公共库&quot;">​</a></h3><p>下面我们从实战出发，从 0 到 1 构建一个符合标准的公共库。我们的目标是，借助 <a href="https://github.com/public-apis/public-apis" target="_blank" rel="noreferrer">Public APIs</a>，通过网络请求获取 dogs/cats/goats 三种动物的随机图像，并进行展示。更重要的是，将整个逻辑过程抽象成可以在浏览器端和 Node.js 端复用的 npm 包，编译构建使用 Webpack 和 Babel。</p><p>首先创建文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ mkdir animal</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">api</span></span>
<span class="line"><span style="color:#E1E4E8;">$ cd animal</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">api</span></span>
<span class="line"><span style="color:#E1E4E8;">$ npm init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ mkdir animal</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">api</span></span>
<span class="line"><span style="color:#24292E;">$ cd animal</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">api</span></span>
<span class="line"><span style="color:#24292E;">$ npm init</span></span></code></pre></div><p>并通过 npm init 初始化一个 package.json 文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;animal-api&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1.0.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;echo </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Error: no test specified</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;author&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;license&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ISC&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;animal-api&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1.0.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;echo </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Error: no test specified</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;author&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;license&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ISC&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>编写<code>index.js</code>代码逻辑非常简单，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios from &#39;axios&#39;;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getCat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> axios.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://aws.random.cat/meow&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((response) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> imageSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.data.file</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;CAT&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {imageSrc, text}</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getDog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> axios.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://random.dog/woof.json&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((response) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> imageSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.data.url</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;DOG&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {imageSrc, text}</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getGoat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> imageSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://placegoat.com/200&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;GOAT&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">({imageSrc, text})</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    getDog,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getCat,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getGoat</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios from &#39;axios&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getCat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://aws.random.cat/meow&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((response) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> imageSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.data.file</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;CAT&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {imageSrc, text}</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getDog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://random.dog/woof.json&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((response) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> imageSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.data.url</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;DOG&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {imageSrc, text}</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getGoat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> imageSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://placegoat.com/200&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;GOAT&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({imageSrc, text})</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    getDog,</span></span>
<span class="line"><span style="color:#24292E;">    getCat,</span></span>
<span class="line"><span style="color:#24292E;">    getGoat</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过三个接口：</p><ul><li><p><a href="https://aws.random.cat/meow" target="_blank" rel="noreferrer">https://aws.random.cat/meow</a></p></li><li><p><a href="https://random.dog/woof.json" target="_blank" rel="noreferrer">https://random.dog/woof.json</a></p></li><li><p><a href="http://placegoat.com/200" target="_blank" rel="noreferrer">http://placegoat.com/200</a></p></li></ul><p>封装了三个获取图片地址的函数：</p><ul><li><p>getDog()</p></li><li><p>getCat()</p></li><li><p>getGoat()</p></li></ul><p><a href="https://github.com/intricatecloud/reusable-js-demo" target="_blank" rel="noreferrer">源码</a>通过 ESM 的方式提供对外接口，请你注意这里的模块化方式，这是一个公共库设计的关键点之一，后文会更详细解析。</p><p>对公共库来说，质量保证至关重要。我们使用 Jest 来进行 animal-api 这个公共库的单元测试。Jest 作为 devDependecies 被安装，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">save</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">dev jest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">save</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">dev jest</span></span></code></pre></div><p>编写测试脚本<code>animal-api/spec/index.spec.js</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> AnimalApi from &#39;.</span><span style="color:#FDAEB7;font-style:italic;">.</span><span style="color:#E1E4E8;">/index&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">describe(&#39;animal</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">api&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    it(&#39;gets dogs&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> AnimalApi.getDog()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .then((animal) =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">                expect(animal.imageSrc).not.toBeUndefined()</span></span>
<span class="line"><span style="color:#E1E4E8;">                expect(animal.text).toEqual(&#39;DOG&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">            })</span></span>
<span class="line"><span style="color:#E1E4E8;">   })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> AnimalApi from &#39;.</span><span style="color:#B31D28;font-style:italic;">.</span><span style="color:#24292E;">/index&#39;</span></span>
<span class="line"><span style="color:#24292E;">describe(&#39;animal</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">api&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    it(&#39;gets dogs&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> AnimalApi.getDog()</span></span>
<span class="line"><span style="color:#24292E;">            .then((animal) =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">                expect(animal.imageSrc).not.toBeUndefined()</span></span>
<span class="line"><span style="color:#24292E;">                expect(animal.text).toEqual(&#39;DOG&#39;)</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">   })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>改写 package.json 中 test script 为 &quot;test&quot;: &quot;jest&quot;，我们通过运行<code>npm run test</code>来测试。</p><p>这时候会得到报错：SyntaxError: Unexpected identifier，如下图所示：</p>`,22),y=p(`<p>不要慌，这是因为 Jest 并不&quot;认识&quot;import 这样的关键字。Jest 运行在 Node.js 环境中，大部分 Node.js 版本（v10 以下）运行时并不支持 ESM，为了可以使用 ESM 方式编写测试脚本，我们需要<strong>安装 babel-jest 和 Babel 相关依赖到开发环境中</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">save</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">dev babel</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jest @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">core @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">preset</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">env</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">save</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">dev babel</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jest @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">core @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">preset</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">env</span></span></code></pre></div><p>同时创建<code>babel.config.js</code>，内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  presets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        targets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;current&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  presets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        targets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;current&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>注意上述代码，我们将 @babel/preset-env 的 targets.node 属性设置为当前环境 current。再次执行<code>npm run test</code>，得到报错如下：Cannot find module &#39;axios&#39; from &#39;index.js&#39;。</p>`,5),i=p('<p>原因看报错信息即可得到，我们需要安装 axios。注意：axios 应该作为生产依赖被安装：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">save axios</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">save axios</span></span></code></pre></div><p>现在，我们的测试脚本就可以正常运行了。如下图：</p>',3),d=p('<p>当然，这只是给公共库接入测试，&quot;万里长征&quot;才开始第一步。接下来我们按照各种场景进行更多探索。</p><h3 id="打造公共库-支持-script-标签引入" tabindex="-1">打造公共库，支持 script 标签引入 <a class="header-anchor" href="#打造公共库-支持-script-标签引入" aria-label="Permalink to &quot;打造公共库，支持 script 标签引入&quot;">​</a></h3><p>在大部分不支持 import 语法特性的浏览器中，为了让我们的脚本直接在浏览器中使用 script 标签引入代码，首先我们<strong>需要将已有公共库脚本编译为 UMD 方式</strong>。类似上面使用 babel-jest 将测试脚本编译降级为当前 Node.js 版本支持的代码，我们还是需要 Babel 进行降级。</p><p>注意这次不同之处在于：<strong>这里的降级需要输出代码内容到一个 output 目录中，浏览器即可直接引入该 output 目录中的编译后资源</strong> 。我们使用<code>@babel/plugin-transform-modules-umd</code>来完成对代码的降级编译：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm install </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">save</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">dev @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">transform</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">modules</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">umd @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">core @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">cli</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm install </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">save</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">dev @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">transform</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">modules</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">umd @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">core @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">cli</span></span></code></pre></div><p>同时在 package.json 中加入相关 script 内容：<code>&quot;build&quot;: &quot;babel index.js -d lib&quot;</code>，执行<code>npm run build</code>，得到产出（如下图）：</p>',6),u=p(`<p>我们在浏览器中验证产出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    AnimalApi.</span><span style="color:#B392F0;">getDog</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(animal) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#imageSrc&#39;</span><span style="color:#E1E4E8;">).textContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> animal.imageSrc</span></span>
<span class="line"><span style="color:#E1E4E8;">        document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#text&#39;</span><span style="color:#E1E4E8;">).textContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> animal.text</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;./lib/index.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    AnimalApi.</span><span style="color:#6F42C1;">getDog</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(animal) {</span></span>
<span class="line"><span style="color:#24292E;">        document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#imageSrc&#39;</span><span style="color:#24292E;">).textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> animal.imageSrc</span></span>
<span class="line"><span style="color:#24292E;">        document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#text&#39;</span><span style="color:#24292E;">).textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> animal.text</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>结果出现了报错：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">index.html</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> Uncaught ReferenceError</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> AnimalApi is not defined</span></span>
<span class="line"><span style="color:#E1E4E8;">    at index.html</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">11</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">index.html</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> Uncaught ReferenceError</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> AnimalApi is not defined</span></span>
<span class="line"><span style="color:#24292E;">    at index.html</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">11</span></span></code></pre></div><p>并没有找到 AnimalApi 这个对象，重新翻看编译产出源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(exports, </span><span style="color:#9ECBFF;">&quot;__esModule&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">exports.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 引入 axios</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _axios </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_interopRequireDefault</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;axios&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">//  兼容 default 导出</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">_interopRequireDefault</span><span style="color:#E1E4E8;">(obj) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> obj.__esModule </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> obj }; }</span></span>
<span class="line"><span style="color:#6A737D;">// 原 getCat 方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getCat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _axios.default.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://aws.random.cat/meow&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(response </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> imageSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.data.file;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;CAT&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      imageSrc,</span></span>
<span class="line"><span style="color:#E1E4E8;">      text</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 原 getDog 方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getDog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _axios.default.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://random.dog/woof.json&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(response </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> imageSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.data.url;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;DOG&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      imageSrc,</span></span>
<span class="line"><span style="color:#E1E4E8;">      text</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 原 getGoat 方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getGoat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> imageSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://placegoat.com/200&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;GOAT&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    imageSrc,</span></span>
<span class="line"><span style="color:#E1E4E8;">    text</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 默认导出对象</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  getDog,</span></span>
<span class="line"><span style="color:#E1E4E8;">  getCat,</span></span>
<span class="line"><span style="color:#E1E4E8;">  getGoat</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">exports.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _default;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(exports, </span><span style="color:#032F62;">&quot;__esModule&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">exports.default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 引入 axios</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _axios </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_interopRequireDefault</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;axios&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//  兼容 default 导出</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">_interopRequireDefault</span><span style="color:#24292E;">(obj) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> obj.__esModule </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> obj }; }</span></span>
<span class="line"><span style="color:#6A737D;">// 原 getCat 方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getCat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _axios.default.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://aws.random.cat/meow&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(response </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> imageSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.data.file;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;CAT&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      imageSrc,</span></span>
<span class="line"><span style="color:#24292E;">      text</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 原 getDog 方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getDog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _axios.default.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://random.dog/woof.json&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(response </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> imageSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.data.url;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;DOG&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      imageSrc,</span></span>
<span class="line"><span style="color:#24292E;">      text</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 原 getGoat 方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getGoat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> imageSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://placegoat.com/200&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;GOAT&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    imageSrc,</span></span>
<span class="line"><span style="color:#24292E;">    text</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 默认导出对象</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  getDog,</span></span>
<span class="line"><span style="color:#24292E;">  getCat,</span></span>
<span class="line"><span style="color:#24292E;">  getGoat</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">exports.default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _default;</span></span></code></pre></div><p>发现出现报错是因为 Babel 的编译产出如果要支持全局命名（AnimalApi）空间，需要添加以下配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      [</span><span style="color:#9ECBFF;">&quot;@babel/plugin-transform-modules-umd&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      exactGlobals</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      globals</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        index</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;AnimalApi&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }]</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  plugins</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      [</span><span style="color:#032F62;">&quot;@babel/plugin-transform-modules-umd&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">      exactGlobals</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      globals</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        index</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;AnimalApi&#39;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }]</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span></code></pre></div><p>调整后再运行编译，得到源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// umd 导出格式</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (global, factory) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 兼容 amd 方式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof define </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> define.amd) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;axios&quot;</span><span style="color:#E1E4E8;">], factory);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof exports </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">factory</span><span style="color:#E1E4E8;">(exports, </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;axios&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mod </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      exports</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">factory</span><span style="color:#E1E4E8;">(mod.exports, global.axios);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 挂载 AnimalApi 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    global.AnimalApi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mod.exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})(typeof globalThis </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> globalThis </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> typeof self </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> self </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (_exports, _axios) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(_exports, </span><span style="color:#9ECBFF;">&quot;__esModule&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  _exports.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  _axios </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_interopRequireDefault</span><span style="color:#E1E4E8;">(_axios);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 兼容 default 导出</span></span>
<span class="line"><span style="color:#E1E4E8;">  function </span><span style="color:#B392F0;">_interopRequireDefault</span><span style="color:#E1E4E8;">(obj) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> obj.__esModule </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> obj }; }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getCat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _axios.default.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://aws.random.cat/meow&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(response </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> imageSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.data.file;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;CAT&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        imageSrc,</span></span>
<span class="line"><span style="color:#E1E4E8;">        text</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getDog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 省略</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getGoat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 省略</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    getDog,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getCat,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getGoat</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  _exports.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _default;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// umd 导出格式</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (global, factory) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 兼容 amd 方式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof define </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> define.amd) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">define</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;axios&quot;</span><span style="color:#24292E;">], factory);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof exports </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(exports, </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;axios&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      exports</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(mod.exports, global.axios);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 挂载 AnimalApi 对象</span></span>
<span class="line"><span style="color:#24292E;">    global.AnimalApi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mod.exports;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})(typeof globalThis </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> globalThis </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> typeof self </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> self </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (_exports, _axios) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(_exports, </span><span style="color:#032F62;">&quot;__esModule&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  _exports.default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  _axios </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_interopRequireDefault</span><span style="color:#24292E;">(_axios);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 兼容 default 导出</span></span>
<span class="line"><span style="color:#24292E;">  function </span><span style="color:#6F42C1;">_interopRequireDefault</span><span style="color:#24292E;">(obj) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> obj.__esModule </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> obj }; }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getCat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _axios.default.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://aws.random.cat/meow&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(response </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> imageSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.data.file;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;CAT&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        imageSrc,</span></span>
<span class="line"><span style="color:#24292E;">        text</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getDog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ... 省略</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getGoat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ... 省略</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    getDog,</span></span>
<span class="line"><span style="color:#24292E;">    getCat,</span></span>
<span class="line"><span style="color:#24292E;">    getGoat</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  _exports.default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _default;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>这时，<strong>编译源码产出内容改为了由一个 IIFE 形式实现的命名空间</strong>。同时观察源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">global.AnimalApi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mod.exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    getDog,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getCat,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getGoat</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  _exports.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _default;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">global.AnimalApi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mod.exports;</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    getDog,</span></span>
<span class="line"><span style="color:#24292E;">    getCat,</span></span>
<span class="line"><span style="color:#24292E;">    getGoat</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  _exports.default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _default;</span></span></code></pre></div><p>为了兼容 ESM 特性，导出内容全部挂在了 default 属性中（可以通过 libraryExport 属性来切换），我们的引用方式需要改为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">AnimalApi.default.</span><span style="color:#B392F0;">getDog</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(animal) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">AnimalApi.default.</span><span style="color:#6F42C1;">getDog</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(animal) {</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>解决了以上所有问题，看似大功告成了，但是工程的设计没有这么简单。事实上，<strong>在源码中，我们没有使用引入并编译 index.js 所需要的依赖</strong> ，比如 axios 并没有被引入处理。正确的方式应该是<strong>把公共库需要的依赖，一并按照依赖关系进行打包和引入</strong>。</p><p>为了解决上面这个问题，此时需要引入 Webpack：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">save</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">dev webpack webpack</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cli</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">save</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">dev webpack webpack</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cli</span></span></code></pre></div><p>同时添加<code>webpack.config.js</code>，内容为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;lib&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;animal-api.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    library</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;AnimalApi&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    libraryTarget</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;var&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  output</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;lib&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;animal-api.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    library</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;AnimalApi&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    libraryTarget</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;var&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>我们设置入口为<code>./index.js</code>，构建产出为<code>./lib/animal-api.js</code>，同时通过设置 library 和 libraryTarget 将 AnimalApi 作为公共库对外暴露的命名空间。修改<code>package.json</code>中的 build script 为<code>&quot;build&quot;: &quot;webpack&quot;</code>，执行<code>npm run build</code>，得到产出，如下图：</p>`,20),F=p(`<p>至此，我们终于构造出了能够在浏览器中通过 script 标签引入的公共库。当然，一个现代化的公共库还需要支持更多场景，请继续阅读。</p><h3 id="打造公共库-支持-node-js-环境" tabindex="-1">打造公共库，支持 Node.js 环境 <a class="header-anchor" href="#打造公共库-支持-node-js-环境" aria-label="Permalink to &quot;打造公共库，支持 Node.js 环境&quot;">​</a></h3><p>现在已经完成了公共库的浏览器端支持，下面我们要集中精力适配一下 Node.js 环境了。</p><p>首先编写一个<code>node.test.js</code>文件，进行 Node.js 环境的验证：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> AnimalApi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./index.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">AnimalApi.</span><span style="color:#B392F0;">getCat</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(animal </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(animal)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> AnimalApi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./index.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">AnimalApi.</span><span style="color:#6F42C1;">getCat</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(animal </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(animal)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>这个文件的意义在于<strong>测试公共库是否能在 Node.js 环境下使用</strong> 。执行<code>node node-test.js</code>，不出意料得到报错，如下图：</p>`,6),g=p(`<p>这个错误我们并不陌生，在 Node.js 环境中，我们不能通过 require 来引入一个通过 ESM 编写的模块化文件。上面的操作中，我们通过 Webpack 编译出来了符合 UMD 规范的代码，尝试修改<code>node.test.js</code>文件为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> AnimalApi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./lib/index&#39;</span><span style="color:#E1E4E8;">).default</span></span>
<span class="line"><span style="color:#E1E4E8;">AnimalApi.</span><span style="color:#B392F0;">getCat</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((animal) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(animal)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> AnimalApi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./lib/index&#39;</span><span style="color:#24292E;">).default</span></span>
<span class="line"><span style="color:#24292E;">AnimalApi.</span><span style="color:#6F42C1;">getCat</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((animal) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(animal)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>如上代码，我们按照<code>require(&#39;./lib/index&#39;).default</code>的方式引用，就可以愉快地在 Node.js 环境中运行了。</p><p>事实上，依赖上一步的构建产出，我们只需要按照正确的引用路径，就可以轻松地支持 Node.js 环境了。是不是有些恍恍惚惚：&quot;基本什么都没做，这就搞定了&quot;，下面，我们从代码原理上阐述说明。</p><p>符合 UMD 规范的代码，形如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (root, factory) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof define </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> define.amd) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// AMD. Register as an anonymous module.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">], factory);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof module </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> module.exports) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Node.</span></span>
<span class="line"><span style="color:#E1E4E8;">        module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">factory</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Browser globals (root is window)</span></span>
<span class="line"><span style="color:#E1E4E8;">        root.returnExports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">factory</span><span style="color:#E1E4E8;">(root.b);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}(typeof self </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> self </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (b) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Use b in some fashion.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Just return a value to define the module export.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This example returns an object, but the module</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// can return a function as the exported value.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (root, factory) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof define </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> define.amd) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// AMD. Register as an anonymous module.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">define</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">], factory);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof module </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> module.exports) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Node.</span></span>
<span class="line"><span style="color:#24292E;">        module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Browser globals (root is window)</span></span>
<span class="line"><span style="color:#24292E;">        root.returnExports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(root.b);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}(typeof self </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> self </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (b) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Use b in some fashion.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Just return a value to define the module export.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This example returns an object, but the module</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// can return a function as the exported value.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span></code></pre></div><p>如上结构，通过 if...else 判断是否根据环境加载代码。我们的编译产出类似上面 UMD 格式，因此是天然支持浏览器和 Node.js 环境的。</p><p>但是这样的设计将 Node.js 和浏览器环境融合在了一个 bundle 当中，并不优雅，也不利于使用方优化。另外一个常见的做法是<strong>将公共库按环境区分，分别产出两个 bundle，分别支持 Node.js 和浏览器环境</strong>。如下图架构：</p>`,8),m=p(`<p>公共库支持浏览器/Node.js 环境方式示意图</p><p>当然，如果编译和产出为两种不同环境的资源，还得需要设置 package.json 中的相关字段。事实上，<strong>如果一个 npm 需要在不同环境下加载 npm 包不同的入口文件，就会牵扯到</strong> <code>main</code><strong>字段</strong> 、<code>module</code><strong>以及</strong> <code>browser</code><strong>字段</strong>。简单来说：</p><ul><li><p><code>main</code>定义了<code>npm</code>包的入口文件，Browser 环境和 Node 环境均可使用；</p></li><li><p><code>module</code>定义<code>npm</code>包的 ESM 规范的入口文件，Browser 环境和 Node 环境均可使用；</p></li><li><p><code>browser</code>定义<code>npm</code>包在 Browser 环境下的入口文件。</p></li></ul><p>而这三个字段也需要区分优先级，打包工具对于不同环境适配不同入口的字段在选择上还是要以实际情况为准。经我测试后，在目前状态，<strong>Webpack 在 Web 浏览器环境配置下，优先选择：browser &gt; module &gt; main，在 Node.js 环境下 module &gt; main</strong>。</p><h3 id="从开源库总结生态设计" tabindex="-1">从开源库总结生态设计 <a class="header-anchor" href="#从开源库总结生态设计" aria-label="Permalink to &quot;从开源库总结生态设计&quot;">​</a></h3><p>最后一部分，我们针对一个真正的公共库，来总结一下编译适配不同环境的&quot;公共库最佳实践&quot;。<a href="https://www.npmjs.com/package/@riversun/simple-date-format" target="_blank" rel="noreferrer">simple-date-format</a> 可以将 Date 类型转换为标准定义格式的字符串类型，它支持了多种环境：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> SimpleDateFormat from &quot;@riversun/simple</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">date</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">format&quot;;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> SimpleDateFormat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@riversun/simple-date-format&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;https://cdn.jsdelivr.net/npm/@riversun/simple-date-format@1.1.2/lib/simple-date-format.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SimpleDateFormat from &quot;@riversun/simple</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">date</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">format&quot;;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> SimpleDateFormat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@riversun/simple-date-format&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;https://cdn.jsdelivr.net/npm/@riversun/simple-date-format@1.1.2/lib/simple-date-format.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>使用方式也很简单：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2018/07/17 12:08:56&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> sdf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleDateFormat</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sdf.</span><span style="color:#B392F0;">formatWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&quot;</span><span style="color:#E1E4E8;">, date));</span><span style="color:#6A737D;">//to be &quot;2018-07-17T12:08:56+09:00&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2018/07/17 12:08:56&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> sdf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleDateFormat</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sdf.</span><span style="color:#6F42C1;">formatWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&quot;</span><span style="color:#24292E;">, date));</span><span style="color:#6A737D;">//to be &quot;2018-07-17T12:08:56+09:00&quot;</span></span></code></pre></div><p>我们看这个公共库的相关设计，<a href="https://github.com/riversun/simple-date-format/blob/master/webpack.config.js#L24" target="_blank" rel="noreferrer">源码</a>如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 入口配置</span></span>
<span class="line"><span style="color:#E1E4E8;">entry</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;simple-date-format&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;./src/simple-date-format.js&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#6A737D;">// 产出配置</span></span>
<span class="line"><span style="color:#E1E4E8;">output</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;lib&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  publicPath</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据环境产出不同的文件名</span></span>
<span class="line"><span style="color:#E1E4E8;">  filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> argv.mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> \`[name].js\` </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`[name].js\`,  </span><span style="color:#6A737D;">//\`[name].min.js\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  library</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;SimpleDateFormat&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  libraryExport</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// umd 模块化方式</span></span>
<span class="line"><span style="color:#E1E4E8;">  libraryTarget</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  globalObject</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;this&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//for both browser and node.js</span></span>
<span class="line"><span style="color:#E1E4E8;">  umdNamedDefine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在和 output.library 和 output.libraryTarget 一起使用时，auxiliaryComment 选项允许用户向导出文件中插入注释</span></span>
<span class="line"><span style="color:#E1E4E8;">  auxiliaryComment</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;for Root&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    commonjs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;for CommonJS environment&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    commonjs2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;for CommonJS2 environment&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    amd</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;for AMD environment&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 入口配置</span></span>
<span class="line"><span style="color:#24292E;">entry</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;simple-date-format&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;./src/simple-date-format.js&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6A737D;">// 产出配置</span></span>
<span class="line"><span style="color:#24292E;">output</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;lib&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  publicPath</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 根据环境产出不同的文件名</span></span>
<span class="line"><span style="color:#24292E;">  filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> argv.mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> \`[name].js\` </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`[name].js\`,  </span><span style="color:#6A737D;">//\`[name].min.js\`</span></span>
<span class="line"><span style="color:#24292E;">  library</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;SimpleDateFormat&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  libraryExport</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;default&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// umd 模块化方式</span></span>
<span class="line"><span style="color:#24292E;">  libraryTarget</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;umd&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  globalObject</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;this&#39;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//for both browser and node.js</span></span>
<span class="line"><span style="color:#24292E;">  umdNamedDefine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在和 output.library 和 output.libraryTarget 一起使用时，auxiliaryComment 选项允许用户向导出文件中插入注释</span></span>
<span class="line"><span style="color:#24292E;">  auxiliaryComment</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;for Root&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    commonjs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;for CommonJS environment&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    commonjs2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;for CommonJS2 environment&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    amd</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;for AMD environment&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre></div><p>设计方式与前文类似，因为这个库的目标就是：<strong>作为一个函数 helper 库，同时支持浏览器和 Node.js 环境</strong>。它采取了比较&quot;偷懒&quot;的方式，使用了 UMD 规范来输出代码。</p><p>我们再看另一个例子，在 <a href="https://github.com/lodash/lodash/blob/master/package.json#L12" target="_blank" rel="noreferrer">Lodash</a> 的构建脚本中，分为了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;npm run build:main &amp;&amp; npm run build:fp&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;build:fp&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node lib/fp/build-dist.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;build:fp-modules&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node lib/fp/build-modules.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;build:main&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node lib/main/build-dist.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;build:main-modules&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node lib/main/build-modules.js&quot;</span><span style="color:#E1E4E8;">,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;npm run build:main &amp;&amp; npm run build:fp&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">&quot;build:fp&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node lib/fp/build-dist.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">&quot;build:fp-modules&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node lib/fp/build-modules.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">&quot;build:main&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node lib/main/build-dist.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#032F62;">&quot;build:main-modules&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node lib/main/build-modules.js&quot;</span><span style="color:#24292E;">,</span></span></code></pre></div><p>其中主命令为 build，同时按照编译所需，提供：ES 版本、FP 版本等（build:fp/build:fp-modules/build:main/build:main-modules）。官方甚至提供了 <a href="https://www.npmjs.com/package/lodash-cli" target="_blank" rel="noreferrer">lodash-cli</a> 支持开发者自定义构建，更多相关内容可以参考 <a href="https://lodash.com/custom-builds" target="_blank" rel="noreferrer">Custom Builds</a>。</p><p>我们在构建环节&quot;颇费笔墨&quot;，目的是让你理解前端生态天生&quot;混乱&quot;，不统一的运行环境使得公共库的架构，尤其是相关的构建设计更加复杂。更多构建相关内容，我们会在后续章节继续讨论，这里先到此为止。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这两节课我们从公共库的设计和使用方接入两个方面进行了梳理。当前前端生态多种规范并行、多类环境共存，因此使得&quot;启用或设计一个公共库&quot;并不简单，单纯的 &#39;npm install&#39; 后，才是一系列工程化问题的开始。</p><p>与此同时，开发者经常疲于业务开发，对于编译和构建，以及公共库设计和前端生态的理解往往得过且过，但这些内容正是前端基础设施道路上的重要一环，也是开发者通往前端架构师的必经之路。建议你将本节知识融入自己手上的真实项目中，刨根问底，相信你一定会有更多收获！</p>`,19),A=c("p",null,"最后，如果本节内容你难以一步到位地理解消化，请不要灰心，我们会在后续章节中不断巩固梳理。我们下一讲再见！",-1);function D(h,b,C,f,v,q){const s=o("Image");return e(),t("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8D/0B/Ciqc1F_4C52AbkzPAAJt3nzLhAo939.png"}),a(),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8D/0B/Ciqc1F_4C6iABmVIAAGxme4pZVw996.png"}),a(),i,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/8D/16/CgqCHl_4C7CAd4ITAAJD5qJ-Ziw380.png"}),a(),d,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/8D/0B/Ciqc1F_4C7iARwtEAAEQS1jliOM385.png"}),a(),u,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/04/EE/Cip5yF_4C9GAfFJAAAYFu4ci4cM274.png"}),a(),F,n(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image2/M01/04/EE/Cip5yF_4C9iAVDQkAANk3PGzLdI933.png"}),a(),g,n(s,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image2/M01/04/F0/CgpVE1_4C-KADRY4AAFZJiKE29s142.png"}),a(),m,n(s,{alt:"Lark20210108-153014.png",src:"https://s0.lgstatic.com/i/image/M00/8D/16/CgqCHl_4Ch-AQCAEAAVodGYCdmY431.png"}),a(),A])}const x=l(r,[["render",D]]);export{B as __pageData,x as default};
