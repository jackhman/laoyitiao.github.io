import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const d=JSON.parse('{"title":"列表表达式（List Comprehension） ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4667) 05  告别 CURD，拥抱 Python 高阶编程.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4667) 05  告别 CURD，拥抱 Python 高阶编程.md","lastUpdated":null}'),p={name:"posts/devops/114-测试开发入门与实战文档/(4667) 05  告别 CURD，拥抱 Python 高阶编程.md"},o=l(`<p>上节课我们一起学习了 Python 的基础编程知识，本课时我将带你继续进阶，向你讲解 Python 的高阶编程知识。</p><p>我想，你在自主开发测试框架的过程中，经常会碰见这样的困惑：</p><ul><li><p>我仅仅想运行带着某些特定标签的测试用例，但是我不知道具体哪些用例带着这些标签，我该怎么做？</p></li><li><p>我想给我的每一个函数都增加个打印功能，但是我又不想改动函数本身，该怎么做？</p></li><li><p>我想让测试框架根据用户输入，做出不同的处理反应，但是我的输入不是一成不变的，我输入的参数多一些或者少一些，框架就报错了，该怎么办？</p></li></ul><p>这些问题看起来是一个个不同的业务需求，但它们的背后，其实对应着 Python 语言中的一个个高阶编程技巧。</p><p>这些技巧，就好比是绝世武功中的内功心法和武功秘籍， 所谓&quot;万丈高楼平地起&quot;，掌握这些高阶技巧，有助你开发出更优秀的测试框架。下面我们就一起来看一看，Python 中的这些内功心法有哪些？</p><h3 id="列表表达式-list-comprehension" tabindex="-1">列表表达式（List Comprehension） <a class="header-anchor" href="#列表表达式-list-comprehension" aria-label="Permalink to &quot;列表表达式（List Comprehension）&quot;">​</a></h3><p>俗话说&quot;人生苦短，我用 Python&quot;，Python 为了简化程序的代码行数做了很多努力，其中最经典的就是列表表达式。</p><p>比如我有如下函数，用来输出一个单词中的所有字符：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">def output_letter(letter)</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">l = []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">for item in letter</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">l.append(item)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">return l</span></span>
<span class="line"><span style="color:#85E89D;">if __name__ == &quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">print(output_letter(&#39;kevin&#39;))</span></span>
<span class="line"><span style="color:#6A737D;">#此方法的输出为：</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;k&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;v&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;n]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">def output_letter(letter)</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">l = []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">for item in letter</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">l.append(item)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">return l</span></span>
<span class="line"><span style="color:#22863A;">if __name__ == &quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">print(output_letter(&#39;kevin&#39;))</span></span>
<span class="line"><span style="color:#6A737D;">#此方法的输出为：</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;k&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;v&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;i&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;n]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Python 觉得这样写代码行数太多了，不优雅，于是有了如下的写法：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[expression </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item in list]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[expression </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item in list]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对应于我们的函数就变成了：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">def output_letter(letter)</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">return [l for l in letter]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">if __name__ == &quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">print(output_letter(&#39;kevin&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#此方法的输出为：</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;k&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;v&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;n&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">def output_letter(letter)</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">return [l for l in letter]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">if __name__ == &quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">print(output_letter(&#39;kevin&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#此方法的输出为：</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;k&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;v&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;i&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;n&#39;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>是不是瞬间少了很多代码，逻辑也更清晰？不仅如此，Python 还允许我们在列表表达式中进行判断。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[expression </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item in list </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> xxx </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> yyy]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[expression </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item in list </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> xxx </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> yyy]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如我有一个列表，里面包括多个字符，我希望返回那些包含字母 k 的字符。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">output_letter</span><span style="color:#E1E4E8;">(letter):</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [l </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> letter </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;k&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> l]</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(output_letter([</span><span style="color:#9ECBFF;">&#39;kevin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;did&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;automation&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;well&#39;</span><span style="color:#E1E4E8;">]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">output_letter</span><span style="color:#24292E;">(letter):</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [l </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> letter </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;k&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> l]</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(output_letter([</span><span style="color:#032F62;">&#39;kevin&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;did&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;automation&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;well&#39;</span><span style="color:#24292E;">]))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>列表表达式可以使我们的函数非常简洁易懂，并且减少代码量。</p><h3 id="匿名函数-lambda" tabindex="-1">匿名函数（lambda） <a class="header-anchor" href="#匿名函数-lambda" aria-label="Permalink to &quot;匿名函数（lambda）&quot;">​</a></h3><p>除了列表表达式可以减少代码量以外，Python 中还提供了匿名函数，当你的函数逻辑非常少时，你无须再定义一个函数，可采用匿名函数来减少代码量。匿名函数的语法如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">lambda arguments </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> expression</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">lambda arguments </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> expression</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>举例来说，我们有一个函数，用来得出列表中的每一个元素的平方，正常的写法是这样的：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">def </span><span style="color:#B392F0;">square</span><span style="color:#E1E4E8;">(l)</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    square_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ele in l</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        square_list.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(ele </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> ele)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> square_list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> __name__ </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">square</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">def </span><span style="color:#6F42C1;">square</span><span style="color:#24292E;">(l)</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    square_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ele in l</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        square_list.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(ele </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> ele)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> square_list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> __name__ </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">square</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>用了 lambda 后，是这样的：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lambda l</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [item </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item in l]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> __name__ </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lambda l</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [item </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item in l]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> __name__ </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>匿名函数大大地减少了代码工作量，但是也会让代码的可读性降低，所以通常逻辑不复杂的函数，可以考虑使用匿名函数。</p><h3 id="自省-反射-reflection" tabindex="-1">自省/反射（Reflection） <a class="header-anchor" href="#自省-反射-reflection" aria-label="Permalink to &quot;自省/反射（Reflection）&quot;">​</a></h3><p>在编程中，自省是一种在运行时查找有关对象的信息的能力；而反射则更进一步，它使对象能够在运行时进行修改。</p><p>自省和反射是 Python 中非常重要的概念，我们可以通过自省和反射来实现很多高级功能，例如动态查找待运行测试用例。</p><p>自省最经典的用法就是查看对象类型。</p><h4 id="_1-type" tabindex="-1">1.type <a class="header-anchor" href="#_1-type" aria-label="Permalink to &quot;1.type&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#返回对象类型</span></span>
<span class="line"><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">（obj）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#返回对象类型</span></span>
<span class="line"><span style="color:#005CC5;">type</span><span style="color:#24292E;">（obj）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>比如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">class </span><span style="color:#9ECBFF;">&#39;int&#39;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">class </span><span style="color:#9ECBFF;">&#39;float&#39;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">class </span><span style="color:#9ECBFF;">&#39;type&#39;</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">class </span><span style="color:#032F62;">&#39;int&#39;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">class </span><span style="color:#032F62;">&#39;float&#39;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">class </span><span style="color:#032F62;">&#39;type&#39;</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>type() 函数的返回值，我们称为类型对象，类型对象告诉我们参数属于哪种类对象实例。如上文所示，解释器便在告诉我们整数 7 属于 int 类，2.0 属于 float 类，而 int 属于类类型。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">() 常常跟函数isinstance() 配合使用，用来检测一个变量是否是我们需要的类型：</span></span>
<span class="line"><span style="color:#6A737D;">#下述例子判断给定的数字是否整型(int类)</span></span>
<span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(x, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;I am int&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#你的逻辑</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">type</span><span style="color:#24292E;">() 常常跟函数isinstance() 配合使用，用来检测一个变量是否是我们需要的类型：</span></span>
<span class="line"><span style="color:#6A737D;">#下述例子判断给定的数字是否整型(int类)</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(x, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;I am int&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#你的逻辑</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>自省还有以下其他几种用法。</p><h4 id="_2-dir" tabindex="-1">2.dir <a class="header-anchor" href="#_2-dir" aria-label="Permalink to &quot;2.dir&quot;">​</a></h4><p>dir() 可以用来获取当前模块的属性列表，也可以获取指定一个属性。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    my_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">dir</span><span style="color:#E1E4E8;">(my_list))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">dir</span><span style="color:#E1E4E8;">(my_list).</span><span style="color:#79B8FF;">__class__</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    my_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">dir</span><span style="color:#24292E;">(my_list))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">dir</span><span style="color:#24292E;">(my_list).</span><span style="color:#005CC5;">__class__</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>比如我们运行上述代码，则会有如下结果。</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#第一个print返回</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;__add__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__class__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__contains__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__delattr__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__delitem__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__dir__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__doc__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__eq__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__format__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__ge__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__getattribute__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__getitem__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__gt__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__hash__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__iadd__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__imul__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__init__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__init_subclass__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__iter__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__le__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__len__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__lt__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__mul__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__ne__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__new__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__reduce__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__reduce_ex__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__repr__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__reversed__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__rmul__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__setattr__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__setitem__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__sizeof__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__str__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__subclasshook__&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;append&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;clear&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;copy&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;extend&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;insert&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pop&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;remove&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;reverse&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;sort&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">#第二个print返回</span></span>
<span class="line"><span style="color:#F97583;">&lt;class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;list&#39;</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#第一个print返回</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;__add__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__class__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__contains__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__delattr__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__delitem__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__dir__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__doc__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__eq__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__format__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__ge__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__getattribute__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__getitem__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__gt__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__hash__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__iadd__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__imul__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__init__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__init_subclass__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__iter__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__le__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__len__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__lt__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__mul__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__ne__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__new__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__reduce__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__reduce_ex__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__repr__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__reversed__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__rmul__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__setattr__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__setitem__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__sizeof__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__str__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__subclasshook__&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;append&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;clear&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;copy&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;count&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;extend&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;index&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;insert&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pop&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;remove&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;reverse&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;sort&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">#第二个print返回</span></span>
<span class="line"><span style="color:#D73A49;">&lt;class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;list&#39;</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-id" tabindex="-1">3. id <a class="header-anchor" href="#_3-id" aria-label="Permalink to &quot;3. id&quot;">​</a></h4><p><strong>id()</strong> 函数返回对象的唯一标识符。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;kevin&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">(name))</span></span>
<span class="line"><span style="color:#6A737D;">#输出</span></span>
<span class="line"><span style="color:#79B8FF;">140245720259120</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;kevin&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">(name))</span></span>
<span class="line"><span style="color:#6A737D;">#输出</span></span>
<span class="line"><span style="color:#005CC5;">140245720259120</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_4-inspect" tabindex="-1">4.inspect <a class="header-anchor" href="#_4-inspect" aria-label="Permalink to &quot;4.inspect&quot;">​</a></h4><p>inspect 模块提供了一些有用的函数帮助获取对象的信息，例如模块、类、方法、函数、回溯、帧对象，以及代码对象。</p><p>例如它可以帮助你检查类的内容，获取某个方法的源代码，取得并格式化某个函数的参数列表，或者获取你需要显示的回溯的详细信息。</p><p>inspect 有很多函数，我以一个实际例子为依托，介绍常用的几种。假设现在我们有个项目，它的文件结构是这样的：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">testProject</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">--|tests</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">--|__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">--|test1.py</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">--|test2.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">testProject</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">--|tests</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">--|__init__.py</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">--|test1.py</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">--|test2.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中，test1.py 的内容如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> inspect</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> tests.test2 </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> hello</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KevinTest</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;i am kevin cai&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say_hello</span><span style="color:#E1E4E8;">(self, name):</span></span>
<span class="line"><span style="color:#E1E4E8;">        hello()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hello </span><span style="color:#79B8FF;">{name}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> inspect</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> tests.test2 </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> hello</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KevinTest</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;i am kevin cai&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say_hello</span><span style="color:#24292E;">(self, name):</span></span>
<span class="line"><span style="color:#24292E;">        hello()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello </span><span style="color:#005CC5;">{name}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">name)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>test2.py 内容如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello from test2&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello from test2&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>inspect.getmodulename</strong></li></ul><p>inspect.getmodulename(path) 用来获取指定路径下的 module 名。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在test1.py中新增如下代码。</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#此打印语句输出test1。 即当前模块名是test1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(inspect.getmodulename(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在test1.py中新增如下代码。</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#此打印语句输出test1。 即当前模块名是test1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(inspect.getmodulename(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>inspect.getmodule</strong></li></ul><p>inspect.getmodule(object) 用来返回 object 定义在哪个 module 中。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在test1.py中新增如下代码。</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#此语句输出&lt;module &#39;tests.test2&#39; from &#39;/Users/kevin/automation/testProjectPython/tests/test2.py&#39;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(inspect.getmodule(hello))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在test1.py中新增如下代码。</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#此语句输出&lt;module &#39;tests.test2&#39; from &#39;/Users/kevin/automation/testProjectPython/tests/test2.py&#39;&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(inspect.getmodule(hello))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>inspect.getfile</strong></li></ul><p>inspect.getfile(object) 用来返回 object 定义在哪个 file 中。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在test1.py中新增如下代码。</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> KevinTest()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#此语句输出/Users/kevin/automation/testProjectPython/tests/test1.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(inspect.getfile(test.say_hello))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在test1.py中新增如下代码。</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span></span>
<span class="line"><span style="color:#24292E;">    test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> KevinTest()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#此语句输出/Users/kevin/automation/testProjectPython/tests/test1.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(inspect.getfile(test.say_hello))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><strong>inspect.getmembers</strong></li></ul><p>inspect.getmembers(object) 用来返回 object 的所有成员列表（为 (name, value) 的形式）。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在test1.py中新增如下代码。</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> KevinTest()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#此语句输出test里的所有是方法的成员变量。输出是一个列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#[(&#39;__init__&#39;, &lt;bound method KevinTest.__init__ of &lt;__main__.KevinTest object at 0x10911ef28&gt;&gt;), (&#39;say_hello&#39;, &lt;bound method KevinTest.say_hello of &lt;__main__.KevinTest object at 0x10911ef28&gt;&gt;)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(inspect.getmembers(test, inspect.ismethod))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在test1.py中新增如下代码。</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> KevinTest()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#此语句输出test里的所有是方法的成员变量。输出是一个列表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#[(&#39;__init__&#39;, &lt;bound method KevinTest.__init__ of &lt;__main__.KevinTest object at 0x10911ef28&gt;&gt;), (&#39;say_hello&#39;, &lt;bound method KevinTest.say_hello of &lt;__main__.KevinTest object at 0x10911ef28&gt;&gt;)]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(inspect.getmembers(test, inspect.ismethod))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="闭包-closure" tabindex="-1">闭包（closure） <a class="header-anchor" href="#闭包-closure" aria-label="Permalink to &quot;闭包（closure）&quot;">​</a></h3><p>闭包是一个概念，是指在能够读取其他函数内部变量的函数。这个定义比较抽象，我们来看一段代码：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">outer</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    cheer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello &#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">inner</span><span style="color:#E1E4E8;">(name):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cheer </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> inner</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#输出hello kevin</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(outer()(</span><span style="color:#9ECBFF;">&#39;kevin&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">outer</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    cheer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello &#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inner</span><span style="color:#24292E;">(name):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cheer </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inner</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#输出hello kevin</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(outer()(</span><span style="color:#032F62;">&#39;kevin&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>以上代码的意思如下：我定义了一个外部函数 outer 和一个内部函数 inner；在外部函数 outer 内部，我又定义了一个局部变量 cheer（并给定初始值为hello）；然后我在内部函数 inner 里引用了这个局部变量 cheer。最后 outer 函数的返回值是 inner 函数本身。</p><p>在本例的调用里，outer 函数接受了两个参数，第一个参数为空，第二个参数为 kevin。那么outer() 的返回值就是 inner。所以 outer()(&#39;kevin&#39;) 的返回值就是 inner(&#39;kevin&#39;)。</p><p>为了方便你理解，我贴出这个函数的运行过程：</p><ul><li>当代码运行时，首先执行的是入口函数，即第 8 行代码，接着是第 10 行代码。</li></ul><p><img src="https://s0.lgstatic.com/i/image/M00/55/2C/CgqCHl9pzJ2AGcCRAAEDr2CYkic136.png" alt="Drawing 0.png"></p><ul><li>继续向后执行，就会进入到第 1 行代码，即 outer() 函数内部；接着第 2 行代码开始执行，变量cheer被定义，并且赋值为&quot;hello&quot;；接着第 3 行代码开始运行，需要注意的是，第 3 行代码执行完，并不会执行第 4 行代码，而是执行第 5 行代码。</li></ul><p><img src="https://s0.lgstatic.com/i/image/M00/55/2C/CgqCHl9pzKSAbpBPAAFuLtfzxWU099.png" alt="Drawing 1.png"></p><ul><li>第 5 行代码执行完毕后，outer() 函数的整个生命周期就已经结束了，继续往后执行：</li></ul><p><img src="https://s0.lgstatic.com/i/image/M00/55/21/Ciqc1F9pzKqAVnrtAAFpN4pwEGg451.png" alt="Drawing 2.png"></p><p>可以看到，代码进入了 inner 函数内部，而且 inner 函数内部可以访问生命周期已经结束的 outer 函数的成员变量 cheer，这个就是闭包的魔力。</p><p>最后，inner 函数继续执行，outer 函数里定义的 cheer 被取出，并且连同 name 一起返回。我们就获得到了函数的最终结果&quot;hello kevin&quot;。</p><p><img src="https://s0.lgstatic.com/i/image/M00/55/2C/CgqCHl9pzLGAdIdCAAF2FPx794k879.png" alt="Drawing 3.png"></p><p>了解了闭包如何起作用的，我来总结下闭包的特点。</p><p><strong>闭包的特点：</strong></p><ul><li><p>在一个外部函数里定义一个内部函数，且内部函数里包含对外部函数的访问（即使外部函数生命周期结束后，内部函数仍然可以访问外部函数变量）；</p></li><li><p>外部函数的返回值是内部函数本身。</p></li></ul><p>&quot;闭包&quot;这个概念非常重要，除了在 Python 中，闭包在 JavaScript、Go、PHP 等许多语言中都有广泛的应用。</p><p>而闭包在 Python 中的经典应用就是装饰器，而装饰器使 Python 代码能够夹带很多&quot;私货&quot;，下面我们就来看下装饰器的应用。</p><h3 id="装饰器-decorator" tabindex="-1">装饰器（decorator） <a class="header-anchor" href="#装饰器-decorator" aria-label="Permalink to &quot;装饰器（decorator）&quot;">​</a></h3><p>装饰器是闭包的一个经典应用。装饰器（decorator）在 python 中用来扩展原函数的功能，目的是在不改变原来函数代码的情况下，给函数增加新的功能。</p><h4 id="_1-实现装饰器" tabindex="-1">1.实现装饰器 <a class="header-anchor" href="#_1-实现装饰器" aria-label="Permalink to &quot;1.实现装饰器&quot;">​</a></h4><p>在我们的测试框架开发中，装饰器非常重要，它可以给函数添加 log 且不影响函数本身。</p><p>假设我们有一个函数 sum，作用是用来计算 N 个数字的和：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ele </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> kwargs:</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ele </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> kwargs:</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>现在，我们加了需求，需要记录这个函数开始的时间和结束的时间。</p><p>正常情况下，我们的代码是这样的：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function start at </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ele </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> kwargs:</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function end at </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function start at </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ele </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> kwargs:</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function end at </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>后来，我们发现这个记录函数开始和结束时间的功能很好用，我们要求把这个功能加到每一个运行函数中去。</p><p>那么怎么办呢？难道要每一个函数都去加这样的代码吗？ 这样一点也不符合我们在前几节说的代码规范原则。</p><p>所以我们来稍做改变，把计算的函数sum的函数单独抽取出来不变，把时间处理的语句另行定义函数处理。于是上面的函数，就变成了以下的样子：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ele </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> kwargs:</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">record_time</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function start at </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function end at </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ele </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> kwargs:</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">record_time</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function start at </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function end at </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>以后我们再给函数加有关时间处理的功能，加到 record_time 里好了，而 sum 函数根本不用变。那这个函数还能更加简化吗？</p><p>结合我们刚刚讲过的闭包概念，我们用外函数和内函数来替换下：</p><p>record_time就相当于我刚刚讲的outer函数，wrapper函数就是inner函数，只不过我们的inner函数的入参是个函数，这样我们就实现了对函数本身功能的装饰。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 这个是外函数</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">record_time</span><span style="color:#E1E4E8;">(func):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function start at </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> func(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function end at </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wrapper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 这个是我们真正的功能函数</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ele </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> kwargs:</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 外函数，内函数，和功能函数一起，实现了不改变功能函数的前提下，给功能函数加功能的操作。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(record_time(</span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">)(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 这个是外函数</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">record_time</span><span style="color:#24292E;">(func):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapper</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function start at </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function end at </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wrapper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 这个是我们真正的功能函数</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ele </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> kwargs:</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 外函数，内函数，和功能函数一起，实现了不改变功能函数的前提下，给功能函数加功能的操作。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(record_time(</span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>运行一下，测试结果为：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function start at </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">08</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span></span>
<span class="line"><span style="color:#E1E4E8;">function end at </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">08</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49</span></span>
<span class="line"><span style="color:#79B8FF;">10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function start at </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">08</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span></span>
<span class="line"><span style="color:#24292E;">function end at </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">08</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span></span>
<span class="line"><span style="color:#005CC5;">10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>假设我们的需求又变化啦，我们现在不统计函数的运行开始和结束时间了，改成统计函数的运行时长了，那么我们只需要改 record_time 这个函数就好了，而我们的功能函数 sum 就无须再改了，这样是不是方便了很多？</p><p>有了装饰器，我们可以在不改变原有函数代码的前提下，增加、改变原有函数的功能。这种方式也被称作&quot;切面编程&quot;，实际上，装饰器正是切面编程的最佳释例。</p><h4 id="_2-语法糖" tabindex="-1">2.语法糖 <a class="header-anchor" href="#_2-语法糖" aria-label="Permalink to &quot;2.语法糖&quot;">​</a></h4><p>不过你发现没，我们的调用仍然很麻烦，record_time(sum)(1,2,3,4)的调用方式，不容易让使用者理解我们这个函数是在做什么，于是 Python 中为了让大家写起来方便，给了装饰器一个语法糖，其用法如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">decorator</span></span>
<span class="line"><span style="color:#E1E4E8;">#对应我们的例子就是</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">record_time</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">decorator</span></span>
<span class="line"><span style="color:#24292E;">#对应我们的例子就是</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">record_time</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用语法糖后，在调用函数时，我们就无须再写这个装饰器函数了，<strong>转而直接写我们的功能函数就可以了</strong>，于是我们的例子就变成了：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">record_time</span><span style="color:#E1E4E8;">(func):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function start at </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> func(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function end at </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wrapper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#注意这一行，我们把record_time这个函数装饰到sum函数上。</span></span>
<span class="line"><span style="color:#B392F0;">@record_time</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ele </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> kwargs:</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#注意此次无须再写record_time了，这样有利于大家把关注点放在功能函数本身。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">))</span><span style="color:#FDAEB7;font-style:italic;">\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">record_time</span><span style="color:#24292E;">(func):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapper</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function start at </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function end at </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, time.localtime()) ))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wrapper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#注意这一行，我们把record_time这个函数装饰到sum函数上。</span></span>
<span class="line"><span style="color:#6F42C1;">@record_time</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ele </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> kwargs:</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#注意此次无须再写record_time了，这样有利于大家把关注点放在功能函数本身。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span><span style="color:#B31D28;font-style:italic;">\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>有了装饰器，我们就可以做很多额外的工作，例如插入日志、做事务处理等，在后续的章节中我也会介绍如何利用装饰器给测试用例打标签。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本小节我向你介绍了 Python 的一些常用高阶技巧，这些技巧有的是单纯地帮助你减少代码量，有的可以使你动态地获取某些对象的属性并进行判断，有些则可以帮助你扩展你原本函数所有的功能。</p><p>掌握这些技巧会使你的 Python 编码水平更进一步，更有助于你后续的学习。希望你仔细研读这些技巧并做到熟练应用。</p><hr><p><a href="https://shenceyun.lagou.com/t/eka" target="_blank" rel="noreferrer">&quot;测试开发工程师名企直推营&quot; 入口，免费领取 50G 资料包</a></p>`,118),e=[o];function t(r,c,y,E,i,F){return n(),a("div",null,e)}const _=s(p,[["render",t]]);export{d as __pageData,_ as default};
