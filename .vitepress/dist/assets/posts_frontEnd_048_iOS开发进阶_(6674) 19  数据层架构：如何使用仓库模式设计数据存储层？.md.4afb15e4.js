import{_ as a,j as o,o as p,g as l,k as e,Q as s}from"./chunks/framework.e0c66c3f.js";const D=JSON.parse('{"title":"Repository 模式的架构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6674) 19  数据层架构：如何使用仓库模式设计数据存储层？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6674) 19  数据层架构：如何使用仓库模式设计数据存储层？.md","lastUpdated":1696338709000}'),t={name:"posts/frontEnd/048_iOS开发进阶/(6674) 19  数据层架构：如何使用仓库模式设计数据存储层？.md"},c=s('<p>数据是 App 的血液，没有了数据，App 就没办法工作了。但是要保持数据的一致性，并不是一件简单的事情。因为在 App 中多个页面共享同一份数据的情况经常出现。比如，朋友圈时间轴列表页面和朋友圈详情页都共享了朋友圈数据，当我们在详情页点了赞，怎样让时间轴页面同步状态数据呢？如果有多于两个页面，它们之间又怎样保持同步呢？</p><p>目前比较流行的方案是使用<strong>Repository（数据仓库）模式</strong> 。 例如 Android Architecture Components 就推荐使用该模式。在 Moments App 中，我也使用 Repository 模式维护唯一数据源，通过<strong>RxSwift 的 Subject</strong> 保证数据的自动更新。为了与具体的数据库进行解耦并提高程序的灵活性，我还使用了<strong>DataStore 模块</strong>来抽象本地数据存储与访问。这一讲我就和你介绍下我是怎么做的。</p><h3 id="repository-模式的架构" tabindex="-1">Repository 模式的架构 <a class="header-anchor" href="#repository-模式的架构" aria-label="Permalink to &quot;Repository 模式的架构&quot;">​</a></h3><p>所谓 Repository 模式，就是为数据访问提供抽象的接口，数据使用者在读写数据时，只调用相关的接口函数，并不关心数据到底存放在网络还是本地，也不用关心本地数据库的具体实现。使用 Repository 模式有以下几大优势：</p><ol><li><p>Repository 模块作为唯一数据源统一管理所有数据，能有效保证整个 App 数据的一致性；</p></li><li><p>Repository 模块封装了所有数据访问的细节，可提高程序的可扩展性和灵活性，例如，在不改变接口的情况下，把本地存储替换成其他的数据库；</p></li><li><p>结合 RxSwift 的 Subject， Repository 模块能自动更新 App 的数据与状态。</p></li></ol><p>我们以朋友圈功能为例，看看如何使用 Repository 模式。下面是 Repository 模块的架构图。</p>',6),r=s(`<p><strong>ViewModel 模块</strong> 是 Repository 模块的上层数据使用者，在朋友圈功能里面,<code>MomentsTimelineViewModel</code>和<code>MomentListItemViewModel</code>都通过<code>MomentsRepoType</code>的<code>momentsDetails</code>Subject 来订阅数据的更新。</p><p><strong>Repository 模块分成两大部分： Repo 和 DataStore</strong>。其中 Repo 负责统一管理数据（如访问网络的数据、读写本地数据），并通过 Subject 来为订阅者分发新的数据。</p><p>Repo 由<code>MomentsRepoType</code>协议和遵循该协议的<code>MomentsRepo</code>结构体所组成。<code>MomentsRepoType</code>协议用于定义接口，而<code>MomentsRepo</code>封装具体的实现，当<code>MomentsRepo</code>需要读取和更新 BFF 的数据时，会调用 Networking 模块的组件，这方面我在上一讲已经详细介绍过了。而当<code>MomentsRepo</code>需要读取和更新本地数据时，会使用到 DataStore。</p><p>DataStore 负责本地数据的存储，它由<code>PersistentDataStoreType</code>协议和<code>UserDefaultsPersistentDataStore</code>结构体所组成。其中，<code>PersistentDataStoreType</code>协议用于定义本地数据读写的接口。而<code>UserDefaultsPersistentDataStore</code>结构体是其中一种实现。从名字可以看到，该实现使用了 iOS 系统所提供的 UserDefaults 来存储数据。</p><p>假如我们需要支持 Core Data，那么可以提供另外一个结构体来遵循<code>PersistentDataStoreType</code>协议，比如把该结构体命名为<code>CoreDataPersistentDataStore</code>，并使用它来封装所有 Core Data 的访问细节。有了 DataStore 的接口，我们可以很方便地替换不同的本地数据库。</p><h3 id="repository-模式的实现" tabindex="-1">Repository 模式的实现 <a class="header-anchor" href="#repository-模式的实现" aria-label="Permalink to &quot;Repository 模式的实现&quot;">​</a></h3><p>看完 Repository 模式的架构设计，我们一起了解下 Repo 和 DataStore 的具体实现。</p><p>首先我们看一下 DataStore 模块，下面是<code>PersistentDataStoreType</code>协议的定义。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PersistentDataStoreType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> momentsDetails: ReplaySubject&lt;MomentsDetails&gt; { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">momentsDetails</span><span style="color:#E1E4E8;">: MomentsDetails)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersistentDataStoreType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> momentsDetails: ReplaySubject&lt;MomentsDetails&gt; { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">momentsDetails</span><span style="color:#24292E;">: MomentsDetails)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该协议提供了<code>momentsDetails</code>属性来给数据使用者读取朋友圈数据，并提供了<code>save(momentsDetails: MomentsDetails)</code>方法来保存朋友圈信息。</p><p>在 Moments App 里面，我们为<code>PersistentDataStoreType</code>协议提供一个封装了 UserDefaults 的实现，其具体代码如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserDefaultsPersistentDataStore</span><span style="color:#E1E4E8;">: PersistentDataStoreType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shared: UserDefaultsPersistentDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> momentsDetails: ReplaySubject&lt;MomentsDetails&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">bufferSize</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> disposeBage: DisposeBag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> defaults </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserDefaults.standard</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> momentsDetailsKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">describing</span><span style="color:#E1E4E8;">: MomentsDetails.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        defaults.rx</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">observe</span><span style="color:#E1E4E8;">(Data.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, momentsDetailsKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .compactMap { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">            .compactMap { </span><span style="color:#F97583;">try?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSONDecoder</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">decode</span><span style="color:#E1E4E8;">(MomentsDetails.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(momentsDetails)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBage)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">momentsDetails</span><span style="color:#E1E4E8;">: MomentsDetails) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> encodedData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">try?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSONEncoder</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">encode</span><span style="color:#E1E4E8;">(momentsDetails) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            defaults.</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(encodedData, </span><span style="color:#79B8FF;">forKey</span><span style="color:#E1E4E8;">: momentsDetailsKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDefaultsPersistentDataStore</span><span style="color:#24292E;">: PersistentDataStoreType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> shared: UserDefaultsPersistentDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">set</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> momentsDetails: ReplaySubject&lt;MomentsDetails&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">bufferSize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> disposeBage: DisposeBag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> defaults </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserDefaults.standard</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> momentsDetailsKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">describing</span><span style="color:#24292E;">: MomentsDetails.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        defaults.rx</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">observe</span><span style="color:#24292E;">(Data.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">, momentsDetailsKey)</span></span>
<span class="line"><span style="color:#24292E;">            .compactMap { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">            .compactMap { </span><span style="color:#D73A49;">try?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSONDecoder</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">decode</span><span style="color:#24292E;">(MomentsDetails.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) }</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(momentsDetails)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBage)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">momentsDetails</span><span style="color:#24292E;">: MomentsDetails) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> encodedData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">try?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSONEncoder</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">encode</span><span style="color:#24292E;">(momentsDetails) {</span></span>
<span class="line"><span style="color:#24292E;">            defaults.</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(encodedData, </span><span style="color:#005CC5;">forKey</span><span style="color:#24292E;">: momentsDetailsKey)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为<code>UserDefaultsPersistentDataStore</code>遵循了<code>PersistentDataStoreType</code>协议，因此需要实现<code>momentsDetails</code>属性和<code>save()</code>方法。</p><p>其中<code>momentsDetails</code>属性为 RxSwfit 的<code>ReplaySubject</code>类型。它负责把数据的更新事件发送给订阅者。在<code>init()</code>方法中，我们通过了 Key 来订阅 UserDefaults 里的数据更新，一旦与该 Key 相关联的数据发生了变化，我们就使用<code>JSONDecoder</code>来把更新的数据解码成<code>MomentsDetails</code>类型，然后发送给<code>momentsDetails</code>Subject 属性。这样<code>momentsDetails</code>属性就可以把数据事件中转给外部的订阅者了。</p><p><code>save(momentsDetails: MomentsDetails)</code>方法用于保存数据，首先把传递进来的<code>momentsDetails</code>对象通过<code>JSONEncoder</code>来编码，并把编码后的数据写入 UserDefaults 中。这里需要注意，我们在读写 UserDefaults 时，提供的 Key 必须保持一致。为了保证这一点，我们使用了同一个私有属性<code>momentsDetailsKey</code>来进行读写。</p><p>接着来看 Repo 模块，下面是<code>MomentsRepoType</code>协议的定义。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentsRepoType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> momentsDetails: ReplaySubject&lt;MomentsDetails&gt; { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateLike</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isLiked</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">momentID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">fromUserID</span><span style="color:#E1E4E8;"> userID: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentsRepoType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> momentsDetails: ReplaySubject&lt;MomentsDetails&gt; { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateLike</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isLiked</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">momentID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">fromUserID</span><span style="color:#24292E;"> userID: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在该协议中，<code>momentsDetails</code>属性用来为订阅者发送朋友圈数据的更新事件。<code>getMoments(userID: String) -&gt; Observable&lt;Void&gt;</code>方法用于获取朋友圈信息数据，而<code>updateLike(isLiked: Bool, momentID: String, fromUserID userID: String) -&gt; Observable&lt;Void&gt;</code>方法用于更新点赞信息。</p><p>因为<code>MomentsRepo</code>结构体遵循了<code>MomentsRepoType</code>协议，它也实现了<code>momentsDetails</code>属性以及<code>getMoments()</code>和<code>updateLike()</code>方法。</p><p><code>momentsDetails</code>属性是一个<code>ReplaySubject</code>的对象，用于转发朋友圈数据的更新事件，我们可以从<code>init()</code>方法里面看到它是怎样转发数据的。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">persistentDataStore</span><span style="color:#E1E4E8;">: PersistentDataStoreType,</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#B392F0;">getMomentsByUserIDSession</span><span style="color:#E1E4E8;">: GetMomentsByUserIDSessionType,</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#B392F0;">updateMomentLikeSession</span><span style="color:#E1E4E8;">: UpdateMomentLikeSessionType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.persistentDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> persistentDataStore</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.getMomentsByUserIDSession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> getMomentsByUserIDSession</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.updateMomentLikeSession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> updateMomentLikeSession</span></span>
<span class="line"><span style="color:#E1E4E8;">    persistentDataStore</span></span>
<span class="line"><span style="color:#E1E4E8;">        .momentsDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(momentsDetails)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">persistentDataStore</span><span style="color:#24292E;">: PersistentDataStoreType,</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6F42C1;">getMomentsByUserIDSession</span><span style="color:#24292E;">: GetMomentsByUserIDSessionType,</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6F42C1;">updateMomentLikeSession</span><span style="color:#24292E;">: UpdateMomentLikeSessionType) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.persistentDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> persistentDataStore</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.getMomentsByUserIDSession </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> getMomentsByUserIDSession</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.updateMomentLikeSession </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> updateMomentLikeSession</span></span>
<span class="line"><span style="color:#24292E;">    persistentDataStore</span></span>
<span class="line"><span style="color:#24292E;">        .momentsDetails</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(momentsDetails)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其核心代码是订阅<code>persistentDataStore</code>的<code>momentsDetails</code>属性，然后把接收到所有事件都转发到自己的<code>momentsDetails</code>属性。</p><p>然后我们来看<code>getMoments()</code>和<code>updateLike()</code>方法。 其代码如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> getMomentsByUserIDSession</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">do</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: { persistentDataStore.</span><span style="color:#79B8FF;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">momentsDetails</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) })</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> () }</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">catchErrorJustReturn</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateLike</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isLiked</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">momentID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">fromUserID</span><span style="color:#E1E4E8;"> userID: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> updateMomentLikeSession</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">updateLike</span><span style="color:#E1E4E8;">(isLiked, </span><span style="color:#79B8FF;">momentID</span><span style="color:#E1E4E8;">: momentID, </span><span style="color:#79B8FF;">fromUserID</span><span style="color:#E1E4E8;">: userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">do</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: { persistentDataStore.</span><span style="color:#79B8FF;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">momentsDetails</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) })</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> () }</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">catchErrorJustReturn</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> getMomentsByUserIDSession</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: userID)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">do</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: { persistentDataStore.</span><span style="color:#005CC5;">save</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">momentsDetails</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) })</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> () }</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">catchErrorJustReturn</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateLike</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isLiked</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">momentID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">fromUserID</span><span style="color:#24292E;"> userID: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> updateMomentLikeSession</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">updateLike</span><span style="color:#24292E;">(isLiked, </span><span style="color:#005CC5;">momentID</span><span style="color:#24292E;">: momentID, </span><span style="color:#005CC5;">fromUserID</span><span style="color:#24292E;">: userID)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">do</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: { persistentDataStore.</span><span style="color:#005CC5;">save</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">momentsDetails</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) })</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> () }</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">catchErrorJustReturn</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>getMoments()</code>方法通过请求 BFF 来获取朋友圈信息，因为 Repository 模块所有的网络请求操作都通过调用 Networking 模块来完成。在这个方法里面，我们调用了<code>getMomentsByUserIDSession</code>的<code>getMoments()</code>方法来发起 BFF 的网络请求。当我们得到朋友圈数据时，就会调用<code>persistentDataStore</code>的<code>save()</code>方法，把返回数据保存到本地。<br><code>updateLike()</code>方法通过访问 BFF 来更新点赞信息。在这个方法里面，我们调用了<code>updateMomentLikeSession</code>的<code>updateLike()</code>方法来发起更新请求。当我们得到更新后的朋友圈数据时，也会调用<code>persistentDataStore</code>的<code>save()</code>方法把数据保存到本地。</p><p>当其他模块，例如 ViewModel 模块想得到自动更新的朋友圈数据时，只需要订阅<code>MomentsRepoType</code>的<code>momentsDetails</code>Subject 属性即可。下面是<code>MomentsTimelineViewModel</code>中的例子代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">momentsRepo.momentsDetails.</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 接收并处理朋友圈数据更新</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">momentsRepo.momentsDetails.</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收并处理朋友圈数据更新</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre></div><h3 id="rxswift-subject" tabindex="-1">RxSwift Subject <a class="header-anchor" href="#rxswift-subject" aria-label="Permalink to &quot;RxSwift Subject&quot;">​</a></h3><p>你可以看到，在 Repository 模块里面，我大量使用了 RxSwift 的 Subject 来中转数据事件。 在 RxSwift 里面，常见的 Subject 有<strong>PublishSubject、BehaviorSubject 和 ReplaySubject</strong>。它们的区别在于订阅者能否收到订阅前的事件。那么，在程序代码中它们是如何工作的呢？接下来我就为你一一介绍下。</p><h4 id="publishsubject" tabindex="-1">PublishSubject <a class="header-anchor" href="#publishsubject" aria-label="Permalink to &quot;PublishSubject&quot;">​</a></h4><p>首先看一下 PublishSuject。顾名思义，PublishSuject 用于发布（Publish）事件，它的特点是订阅者只能接收订阅后的事件。下面是 PublishSuject 的例子代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> publishSubject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PublishSubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Int</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">publishSubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> observer1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> publishSubject.subscribe { event </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;observer1: </span><span style="color:#9ECBFF;">\\(event)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1.</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">publishSubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> observer2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> publishSubject.subscribe { event </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;observer2: </span><span style="color:#9ECBFF;">\\(event)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2.</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">publishSubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">publishSubject.</span><span style="color:#79B8FF;">onCompleted</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">publishSubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> publishSubject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PublishSubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Int</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">publishSubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> observer1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> publishSubject.subscribe { event </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;observer1: </span><span style="color:#032F62;">\\(event)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">observer1.</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">publishSubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> observer2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> publishSubject.subscribe { event </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;observer2: </span><span style="color:#032F62;">\\(event)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">observer2.</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">publishSubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">publishSubject.</span><span style="color:#005CC5;">onCompleted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">publishSubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span></code></pre></div><p>首先，我们生成一个名叫<code>publishSubject</code>的对象，并发出<code>onNext(1)</code>事件，接着通过<code>subscribe</code>方法来生成一个名叫<code>observer1</code>的订阅者。由于<code>publishSubject</code>的订阅者只能收到订阅以后的事件，因此<code>observer1</code>无法收到之前的<code>onNext(1)</code>的事件。</p><p>当<code>publishSubject</code>发出<code>onNext(2)</code>事件时，<code>observer1</code>就会收到该事件。在此之后，我们又生成了第二个订阅者<code>observer2</code>，该订阅者也没法接收到以前的事件。当<code>publishSubject</code>发出<code>onNext(3)</code>和<code>completed</code>事件的时候，两个订阅者都能接收到。因为<code>completed</code>事件把该 Subject 关闭了，之后所有订阅者都不能接收到<code>onNext(4)</code>事件。</p><p>下面是整段程序的执行效果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> completed</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> completed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> completed</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> completed</span></span></code></pre></div><p>PublishSubject 很适合发送新的事件，但有时候，消息发送者需要比订阅者先进行初始化，此时订阅者就无法接收到原有事件。例如在 Moments App 里面，<code>UserDefaultsPersistentDataStore</code>就先于<code>MomentsRepo</code>进行初始化并立刻读取 UserDefaults 里缓存的数据，假如我们使用 PublishSubject，<code>MomentsRepo</code>将无法读取到第一条的朋友圈数据。</p><p>那怎样解决这样的问题呢？RxSwift 提供了 BehaviorSubject 和 ReplaySubject 来帮助我们读取在 Subject 里缓存的数据。</p><h4 id="behaviorsubject" tabindex="-1">BehaviorSubject <a class="header-anchor" href="#behaviorsubject" aria-label="Permalink to &quot;BehaviorSubject&quot;">​</a></h4><p>BehaviorSubject 用于缓存一个事件，当订阅者订阅 BehaviorSubject 时，会马上收到该 Subject 里面最后一个事件。我们通过例子来看看 BehaviorSubject 是怎样工作的。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> behaviorSubject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BehaviorSubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Int</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> observer1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> behaviorSubject.subscribe { event </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;observer1: </span><span style="color:#9ECBFF;">\\(event)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1.</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">behaviorSubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> observer2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> behaviorSubject.subscribe { event </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;observer2: </span><span style="color:#9ECBFF;">\\(event)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2.</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">behaviorSubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">behaviorSubject.</span><span style="color:#79B8FF;">onCompleted</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">behaviorSubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> behaviorSubject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BehaviorSubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Int</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> observer1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> behaviorSubject.subscribe { event </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;observer1: </span><span style="color:#032F62;">\\(event)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">observer1.</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">behaviorSubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> observer2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> behaviorSubject.subscribe { event </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;observer2: </span><span style="color:#032F62;">\\(event)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">observer2.</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">behaviorSubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">behaviorSubject.</span><span style="color:#005CC5;">onCompleted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">behaviorSubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span></code></pre></div><p>因为 BehaviorSubject 要给订阅者提供订阅前的最后一条事件，我们需要传递初始值来生成BehaviorSubject。在上面的代码中可以看到，我们传递了<code>1</code>来新建<code>behaviorSubject</code>对象，当<code>observer1</code>订阅时马上就能接收到<code>next(1)</code>事件。而<code>observer2</code>订阅的时候只能接收到前一个<code>next(2)</code>事件。接着，它们都能收到<code>next(3)</code>事件。当收到<code>completed</code>事件后，<code>observer1</code>和<code>observer2</code>都停止接收其他事件了。其运行效果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> completed</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> completed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> completed</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> completed</span></span></code></pre></div><h4 id="replaysubject" tabindex="-1">ReplaySubject <a class="header-anchor" href="#replaysubject" aria-label="Permalink to &quot;ReplaySubject&quot;">​</a></h4><p>BehaviorSubject 只能缓存一个事件，当我们需要缓存 N 个事件时，就可以使用 ReplaySubject。例如我们需要统计最后三天的天气信息，那么可以把 N 设置为 3，当订阅者开始订阅时，就可以得到前三天的天气信息。以下是 ReplaySubject 工作的大致过程。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> replaySubject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReplaySubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Int</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">bufferSize</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">replaySubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">replaySubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> observer1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> replaySubject.subscribe { event </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;observer1: </span><span style="color:#9ECBFF;">\\(event)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1.</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">replaySubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> observer2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> replaySubject.subscribe { event </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;observer2: </span><span style="color:#9ECBFF;">\\(event)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2.</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">replaySubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">replaySubject.</span><span style="color:#79B8FF;">onCompleted</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">replaySubject.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> replaySubject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReplaySubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Int</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">bufferSize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">replaySubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">replaySubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> observer1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> replaySubject.subscribe { event </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;observer1: </span><span style="color:#032F62;">\\(event)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">observer1.</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">replaySubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> observer2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> replaySubject.subscribe { event </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;observer2: </span><span style="color:#032F62;">\\(event)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">observer2.</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">replaySubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">replaySubject.</span><span style="color:#005CC5;">onCompleted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">replaySubject.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span></code></pre></div><p>为了看出与 BehaviorSubject 的不同之处，在这里我把 N 设置为 &quot;2&quot;。首先我们把 2 传入<code>bufferSize</code>来创建一个<code>replaySubject</code>对象，然后发出两个<code>next</code>事件，当<code>observer1</code>订阅时会马上得到<code>1</code>和<code>2</code>两个值。</p><p>接着<code>replaySubject</code>再发出一个<code>next(3)</code>事件。当<code>observer2</code>订阅的时候会接收到最近的两个值<code>2</code>和<code>3</code>。在此以后<code>observer1</code>和<code>observer2</code>会不断接收<code>replaySubject</code>的事件，直到收到<code>completed</code>事件后停止。其运行效果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> completed</span></span>
<span class="line"><span style="color:#E1E4E8;">observer2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> completed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">observer1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> completed</span></span>
<span class="line"><span style="color:#24292E;">observer2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> completed</span></span></code></pre></div><p>除了能缓存更多的数据以外，还有一情况我们会选择使用 ReplaySubject 而不是BehaviorSubject。</p><p>在初始化 BehaviorSubject 的时候，我们必须提供一个初始值。如果我没办法提供，只能把存放的类型定义为 Optional （可空）类型。但是我们可以使用 ReplaySubject 来避免这种情况。这就是为什么我们把<code>UserDefaultsPersistentDataStore</code>和<code>MomentsRepo</code>的<code>momentsDetails</code>Subject 属性都定义为 ReplaySubject 而不是 BehaviorSubject 的原因。</p><p>除了上面的三个 Subject 以外，RxSwift 还为我们提供了两个特殊的 Subject：<strong>PublishRelay 和 BehaviorRelay</strong> ，它们的名字和 BehaviorSubject 和 ReplaySubject 非常类似，区别是 Relay 只中继<code>next</code>事件，我们并不能往 Relay 里发送<code>completed</code>或<code>error</code>事件。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲中，我们介绍了 Repository 模式的架构与实现，然后通过例子来解释各种 Subject 的区别。我把本讲 Subject 的例子代码都放在项目中的<strong>RxSwift Playground 文件</strong>里面，希望你能多练习，灵活运用。</p><p>下面是一些在项目场景中使用 Subject 的经验，希望对你有帮助。</p><ol><li><p>如果需要把 Subject 传递给其他类型发送消息，例如在朋友圈时间轴列表页面把 Subject 传递给各个朋友圈子组件，然后接收来自子组件的事件。 这种情况我们一般会传递 PublishSubject，因为在传递前在主页面（如例子中的朋友圈时间轴页面）已经订阅了该 PublishSubject，子组件所发送事件，主页面都能收到。</p></li><li><p>BehaviorSubject 可用于状态管理，例如管理页面的加载状态，开始时可以把 BehaviorSubject 初始化为加载状态，一旦得到返回数据就可以转换为成功状态。</p></li><li><p>因为 BehaviorSubject 必须赋予初始值，但有些情况下，我们并没有初始化，如果使用 BehaviorSubject 必须把其存放的类型定义为 Optional 类型。为了避免使用 Optional，我们可以使用 bufferSize 为 1 的 ReplaySubject 来代替 BehaviorSubject。</p></li><li><p>Subject 和 Relay 都能用于中转事件，当中转的事件中没有<code>completed</code>或<code>error</code>时，我们都选择 Relay。</p></li></ol><p><strong>思考题</strong></p><blockquote><p>请问你们的 App 使用本地数据库吗？使用的是哪一款数据库，有没有试过替换数据库的情况，能分享一下这方面的经验吗？</p></blockquote><p>请把你的想法写到留言区哦，下一讲我将介绍如何使用 ViewModel 模式来为 UI 层的准备呈现的数据。</p><p><strong>源码地址：</strong></p><blockquote><p>RxSwift Playground 文件地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Playgrounds/RxSwiftPlayground.playground/Contents.swift?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Playgrounds/RxSwiftPlayground.playground/Contents.swift</a></p><p>Repo 源码地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Moments/Moments/Features/Moments/Repositories/Moments?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Moments/Moments/Features/Moments/Repositories/Moments</a>Repo.swift</p><p>DataStore 源码地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/DataStore?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/DataStore</a></p></blockquote>`,61);function E(y,i,d,F,b,u){const n=o("Image");return p(),l("div",null,[c,e(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/C1/CioPOWCGgkOAFlCeAANesZhJjDM002.png"}),r])}const m=a(t,[["render",E]]);export{D as __pageData,m as default};
