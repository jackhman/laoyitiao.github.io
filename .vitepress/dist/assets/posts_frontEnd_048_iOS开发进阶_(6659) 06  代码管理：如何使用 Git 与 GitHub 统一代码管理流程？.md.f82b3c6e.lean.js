import{_ as s,j as c,o as p,g as n,k as i,Q as l,s as t,h as e}from"./chunks/framework.e0c66c3f.js";const Q=JSON.parse('{"title":"Git 分支管理 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6659) 06  代码管理：如何使用 Git 与 GitHub 统一代码管理流程？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6659) 06  代码管理：如何使用 Git 与 GitHub 统一代码管理流程？.md","lastUpdated":1696338709000}'),a={name:"posts/frontEnd/048_iOS开发进阶/(6659) 06  代码管理：如何使用 Git 与 GitHub 统一代码管理流程？.md"},_=l("",12),u=l("",5),d=l("",8),r=t("p",null,"这套流程分成六步。",-1),g=t("p",null,"第一步，当我们要开发一个新功能或者修改一个 Bug 时，从主分支的签出并建立一个功能分支。这里需要注意的是，为了减少合并时出现的冲突，我们需要从主分支最新的一个 commit 签出。",-1),m=t("p",null,"第二步，我们可以在功能分支上持续开发并多次提交 commit。因为我们是在独立的功能分支上进行开发，所有的变动都不会影响到主分支，所以可以放心修改所需的代码。",-1),h=t("p",null,"第三步，当我们完成一个功能的开发以后，就可以提交一个 PR 了。为了避免合并冲突，我建议在提交 PR 前先 rebase 主分支的 Git 历史。同时为了方便其他成员审查代码和参与讨论，我们在提交 PR 的时候需要清楚地描述所完成的功能，并把注意 事项，UI 前后变动的区别，测试步骤等等一同写到 PR 描述文档里面。",-1),b=t("p",null,[e("在我们 Moments App 项目中，为了方便开发者编写 PR 描述文档，我们建立了一个模板文件"),t("code",null,"pull_request_template.md"),e("。当我们提交 PR 的时候，GitHub 会自动读取并准备好描述文档的模板，我们只需要填写相关内容即可。")],-1),A=t("p",null,[e("你可以到"),t("a",{href:"https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.github/pull_request_template.md",target:"_blank",rel:"noreferrer"},"拉钩的代码仓库"),e("查看该模板文件。")],-1),P=t("p",null,[e("在提交 PR 的时候，我们还可以加上代码审查人（Reviewer）来通知他/她审查代码。同时也可以加上分类的标签（Label）来方便管理所有的 PR，例如使用"),t("code",null,"enhancement"),e("表示功能开发，使用"),t("code",null,"bug"),e("表示 Bug 修改。如果你的项目由多团队同时开发，我们还会为每个产品团队都建立一个标签，这样就能清楚地知道这个 PR 来自那个产品团队了。")],-1),R=t("p",null,"第四步，一旦 PR 提交以后，其他成员就会收到通知消息，他们可以进行代码审查，并把反馈意见留言到 RP 里面。提交者可以根据留言来修改代码和提交新的 commit。当所有留言都修正和完善以后，可以再次通知审查人进行进一步的审查。",-1),G=t("p",null,"在项目之初，这个过程可能需要来回好几遍。但随着团队的不断磨合，这个过程会越来越快。因为代码审查人一般由项目中最资深开发者组成，他们的留言能帮助团队新成员迅速熟悉项目相关的技术和背景知识。同时能保证代码风格的一致性和提高整个项目的代码质量。",-1),f=t("p",null,"根据我们的经验，在代码审查上的投资所得到的好处，远高于所花的时间成本，我建议你或者你所在的团队在项目初期多投入 PR 审查工作。",-1),B=t("p",null,"第五步，大家通过协商得到共识以后，审查人就可以批准（approve）该 PR。这表示该 PR 可以随时合并到主分支了。",-1),C=t("p",null,"第六步，当 PR 得到批准以后，提交人可以把 PR 合并到主分支里面去。我建议在合并之前先 rebase 主分支上的最新 commit，这样能保证合并过程没有冲突，并使得 Git 的历史更加简洁。",-1),S=t("p",null,"上面就是我们的统一的代码管理流程。为了进一步保证少犯错误，我们可以通过修改 GitHub 上的配置来为每一步操作做自动检查，以保证所有成员都必须严格遵循一致的代码管理流程。",-1),H=t("h3",{id:"github-配置",tabindex:"-1"},[e("GitHub 配置 "),t("a",{class:"header-anchor",href:"#github-配置","aria-label":'Permalink to "GitHub 配置"'},"​")],-1),q=t("p",null,"首先，我们可以把主分支保护起来，不允许任何人直接 Push 到主分支。",-1),k=t("p",null,"然后要求所有 PR 在合并之前都必须经过一个或以上的代码审查人批准。审查人的数量可以根据团队的情况进行调整。",-1),T=t("p",null,"当 Github 检查到有某些条件不完全符合时，就不允许我们合并该 PR。",-1),x=t("p",null,[e("比如，因为我们的 Moments 项目配置了所有的 PR 都必须有一个或以上的代码审查人批准后才能合并。上图可以见 GitHub PR 页面上的"),t("strong",null,"Merge pull request"),e('按钮是失效的，并提示 "Merging can be performed automatically with 1 approving review" （需要一个代码审查通过后才能合并）。')],-1),M=t("h3",{id:"总结",tabindex:"-1"},[e("总结 "),t("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),O=t("p",null,"在这一讲我介绍了 Git 的分支管理和 GitHub 的 Pull Request 流程。根据多年的项目经验，我给出了一套完整的统一代码管理流程，其重点是把 Git 分支分成三类，主分支、功能分支和发布分支，然后严格按照 GitHub Pull Request 流程来把代码合并到主分支里面。",-1),V=t("p",null,"有了这个规范，开发者就能严格遵循这个流程贡献代码，从而保证主分支在管控状态，同时也为项目的自动化和工程化打下基础。",-1),v=t("p",null,"思考题：",-1),I=t("blockquote",null,[t("p",null,"请问你是使用怎样的流程来进行代码管理的？在上述 PR 流程的第一步是从主分支签出一个功能分支，而不是使用 Fork，为什么这样做？")],-1),K=t("p",null,"可以把你的答案写得留言区哦，下一讲我将介绍如何统一设计规范，提高沟通效率。",-1),W=t("p",null,"源码地址：",-1),E=t("blockquote",null,[t("p",null,[e("pull_request_template.md"),t("br"),t("a",{href:"https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.github/pull_request_template.md",target:"_blank",rel:"noreferrer"},"https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.github/pull_request_template.md")])],-1);function N(U,w,D,F,j,L){const o=c("Image");return p(),n("div",null,[_,i(o,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/16/11/CioPOWBF-duAKS0tAAC-6ZH1k9w147.png"}),u,i(o,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/16/14/Cgp9HWBF-eaARQ3lAACY5uUYZq0336.png"}),d,i(o,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/16/14/Cgp9HWBF-fKAVu_QAAKUNfBQLr8841.png"}),r,g,m,h,b,i(o,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/11/Cgp9HWBK9gSAXnguAAMUTTFvSAg277.png"}),A,P,i(o,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/0E/CioPOWBK9fKAaGtgAAHLCg2avjU907.png"}),R,G,f,B,C,S,H,q,i(o,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/11/Cgp9HWBK9eKAGESRAAJW2j80OLg852.png"}),k,i(o,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/10/CioPOWBK9pGAWYgdAANH9SPivxA932.png"}),T,i(o,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/0F/CioPOWBK9lyAEzO1AAOXuc4tDlg494.png"}),x,M,O,i(o,{alt:"思维导图+二维码.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/14/Cgp9HWBK-BSAHpViAAapoc7YA9U941.png"}),V,v,I,K,W,E])}const Y=s(a,[["render",N]]);export{Q as __pageData,Y as default};
