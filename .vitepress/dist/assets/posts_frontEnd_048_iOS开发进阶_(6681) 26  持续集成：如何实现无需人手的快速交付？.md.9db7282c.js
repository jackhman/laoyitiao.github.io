import{_ as o,j as e,o as t,g as c,k as p,h as s,Q as l,s as a}from"./chunks/framework.cfb14fe0.js";const S=JSON.parse('{"title":"26持续集成：如何实现无需人手的快速交付？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6681) 26  持续集成：如何实现无需人手的快速交付？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6681) 26  持续集成：如何实现无需人手的快速交付？.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6681) 26  持续集成：如何实现无需人手的快速交付？.md"},i=l('<h1 id="_26持续集成-如何实现无需人手的快速交付" tabindex="-1">26持续集成：如何实现无需人手的快速交付？ <a class="header-anchor" href="#_26持续集成-如何实现无需人手的快速交付" aria-label="Permalink to &quot;26持续集成：如何实现无需人手的快速交付？&quot;">​</a></h1><p>在前面的课程中，我们已经讲过如何使用 fastlane 来自动化常用的操作，例如管理私钥、证书和 Provisioning Profile 文件，打包和签名 App，以及把 App 上传到 App Store 等。有了这些自动化操作，我们就可以很方便地通过一条命令把 App 发布到 App Store。但有没有更好的办法做到不需要人手就能自动完成打包和上传等所有的操作呢？当然有！我们可以通过 CI，也就是<strong>持续集成</strong>（Continuous Integration）来完成这一任务。</p><p>那什么是 CI 呢？<strong>CI 是一种有效的工程实践，能帮助团队更频繁、更可靠地交付代码</strong>。我们可以利用 CI 来不断优化构建、测试和发布流程，从而保证产品的快速交付，推动工程化进程与最佳实践，并推进工程师文化的建设。</p><h3 id="ci-的系统架构" tabindex="-1">CI 的系统架构 <a class="header-anchor" href="#ci-的系统架构" aria-label="Permalink to &quot;CI 的系统架构&quot;">​</a></h3><p>要搭建一套完整的 CI，我们需要理解 CI 的构建流程和系统架构。首先，我们以 Moments App 为例子来看看一套完整 CI 的构建流程吧。</p>',5),E=a("p",null,[s("通过上图，我们可以看到一套 CI 流程主要由两大部分组成：GitHub 流程和 CI 管道。其中，"),a("strong",null,"GitHub 流程是 CI 流程的触发者，而 CI 管道是 CI 流程的执行者"),s("。")],-1),y=a("p",null,[s("我们在"),a("a",{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=657&sid=20-h5Url-0&buyFrom=2&pageId=1pz4#/detail/pc?id=6659&fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"《06 | 代码管理：如何使用 Git 与 GitHub 统一代码管理流程？》"),s("里讲述过管理多个分支的代码流程，在此基础上，我们可以让分支在合并的时候自动触发 CI 流程，例如，在功能分支合并到主分支时触发 CI 管道 1，当主分支合并到发布分支时触发 CI 管道 2。")],-1),d=a("p",null,[s("那 CI 管道到底是什么呢？"),a("strong",null,"CI 管道是自动化软件交付的流程定义，它把多个自动化操作串联起来，并按照一定的顺序执行，最终达到从源码到交付的全自动化"),s("。例如，CI 管道 1 执行编译、运行测试、打包和签名 AdHoc 版本的 App，以及上传到 Firebase 的 App 分发服务等操作。而 CI 管道 2 执行了打包和签名 AppStore 版本的 App ，以及上传到 AppStore 这两项操作。可以看到，在整个 CI 流程中没有任何手工操作的参与，都是由 GitHub 流程自动触发的。")],-1),u=a("p",null,"那没有任何人手参与，CI 管道到底在哪里执行呢？答案能在下面 CI 的系统架构图中找到。",-1),_=l('<p>CI 架构通常由 CI<strong>中心服务</strong> 和 CI<strong>构建中介</strong> （Build Agent）所组成。当 GitHub 发生变更时会通知 CI 中心服务，中心服务会把构建任务（Build Job）调度和分发给可用的 CI 构建中介。当接收到任务时，构建中介会从 GitHub 上下载代码并按照 CI 管道的配置来执行构建任务。对，<strong>CI 构建中介就是具体的执行者</strong>。</p><p>目前流行的 CI 构建中介主要分成三大类。</p><ul><li><p><strong>全手工维护 CI</strong>。该类 CI 从物理主机、操作系统、Ruby 环境以及 Xcode 版本都由开发团队维护。这类型的 CI 维护成本比较高，例如，需要管理物理主机和网络联通性，需要维护操作系统的安全更新等，但同时也给了我们很大管控性和灵活性。</p></li><li><p><strong>云端虚拟机 CI</strong>。该类 CI 是通过租用云 Mac 虚拟机来进行搭建，目前比较流行的 Mac 虚拟机服务提供商有亚马逊的 AWS 和 MacStadium。有了这些云服务提供商，我们就不用再进行安全补丁等常规维护了，只需选择特定的 Mac OS 版本来启动虚拟机，然后在虚拟机上执行脚本来搭建 Ruby 和 Xcode 环境即可，就如 Moments App 项目里执行 setup.sh 脚本就能完成项目搭建。</p></li><li><p><strong>全服务 CI</strong>。该类 CI 不仅为我们提供了虚拟机，而且还提供了 Ruby 和 Xcode 等环境，我们只需要提供一个 CI 管道配置文件就能完成这个 App 的自动构建。</p></li></ul><p>没有一类 CI 是完美的，它们都有各自的优缺点。这三类 CI 从上往下看，维护成本越来越低，但从长远来看，运行成本却越来越高。从便利性来看，下面的类型会比上面的更加易用，但同时也牺牲了灵活性。</p><p>我建议你根据团队的自身情况来选择。假如你所在的团队没有专门的人员来维护 CI，可以从全服务 CI 开始。随着项目和团队的发展，慢慢地升级为云端虚拟机 CI 和全手工维护 CI。作为一个只有一个开发者的开源项目，Moments App 也选择了全服务 CI。</p><p>下面我们就以 Moments App 为例子，看看如何配置一个全服务 CI。</p><h3 id="配置-travis-ci" tabindex="-1">配置 Travis CI <a class="header-anchor" href="#配置-travis-ci" aria-label="Permalink to &quot;配置 Travis CI&quot;">​</a></h3><p>Moments App 选择了 Travis CI 作为全服务 CI，原因有如下四个。</p><ul><li><p>Travis CI 使用了&quot;代码即配置&quot;的方式来配置 CI 管道，这是最重要的一个原因。我们可以把 CI 管道的配置信息都写在一个 YAML 文件里面，并保存在 GitHub 上。这样能方便我们把 CI 配置共享到多个项目，而且通过 Git 历史记录来不断对比和优化 CI 配置。除此之外，YAML 文件的配置方式已成为 CI 配置的标准，当需要升级为云端虚拟机 CI 和全手工维护 CI 时，我们可以重用 Travis CI 的 YAML 文件。相比之下，有些 CI 需要在网页上进行手工配置，而且无法看到修改历史，这使得我们无法通过代码把配置信息共享到其他项目中去。</p></li><li><p>Travis CI 免费给开源项目使用。</p></li><li><p>Travis CI 整合了 GitHub 和 GitLab 等代码管理平台，只需要一次授权就能整合 CI 服务。</p></li><li><p>Travis CI 支持多个不同版本的 Mac OS 和 Xcode，我们可以根据项目的要求来灵活选择不同的版本。例如通过 Travis CI，我们可以方便地测试 Xcode Beta 版的构建情况。</p></li></ul><h4 id="连接-travis-ci-与-github" tabindex="-1">连接 Travis CI 与 GitHub <a class="header-anchor" href="#连接-travis-ci-与-github" aria-label="Permalink to &quot;连接 Travis CI 与 GitHub&quot;">​</a></h4><p>要搭建 Travis CI，首先需要使用 GitHub 账户登录到 Travis CI，然后给 Travis CI 授权，如下图所示：</p>',11),C=a("p",null,"然后在 Travis CI 的配置页面上点击 Activate 按钮来激活 Travis CI 与 GitHub 的连接。",-1),g=a("p",null,"就这样，Travis CI 与 GitHub 的连接完成了。",-1),I=a("p",null,"假如你需要管理该连接，可以到 GitHub 的 Settings -> Applications -> Installed GitHub Apps 下点击 Configure 按钮来打开下面的管理页面。",-1),h=l(`<h4 id="配置-travis-yml" tabindex="-1">配置 .travis.yml <a class="header-anchor" href="#配置-travis-yml" aria-label="Permalink to &quot;配置 .travis.yml&quot;">​</a></h4><p>完成 Travis CI 与 GitHub 的连接以后，下一步是通过 .travis.yml 文件来配置 CI 管道。.yml 也叫作 YAML 文件，全称是 YAML Ain&#39;t Markup Language （YAML 并不是标记语言）。<strong>相比其他标记语言，YAML 具有更好的可读性，非常适合来做配置文件</strong>。下面我们一起看看 Moments App 的 .travis.yml 文件吧。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">language</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">swift</span></span>
<span class="line"><span style="color:#85E89D;">osx_image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">xcode12.2</span></span>
<span class="line"><span style="color:#85E89D;">env</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">global</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">CI_BUILD_NUMBER=\${TRAVIS_BUILD_NUMBER}</span></span>
<span class="line"><span style="color:#85E89D;">before_install</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">bundle install</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">bundle exec pod install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">language</span><span style="color:#24292E;">: </span><span style="color:#032F62;">swift</span></span>
<span class="line"><span style="color:#22863A;">osx_image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">xcode12.2</span></span>
<span class="line"><span style="color:#22863A;">env</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">global</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">CI_BUILD_NUMBER=\${TRAVIS_BUILD_NUMBER}</span></span>
<span class="line"><span style="color:#22863A;">before_install</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">bundle install</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">bundle exec pod install</span></span></code></pre></div><p>在 .travis.yml 文件的开头，我们定义了项目所使用的语言以及 Xcode 的版本号。接着定义全局的环境变量<code>CI_BUILD_NUMBER</code>，该变量的值来自<code>TRAVIS_BUILD_NUMBER</code>，<code>TRAVIS_BUILD_NUMBER</code>的值由 Travis CI 系统所提供，它能帮助我们生成一个自增的 Build Number（构建数值）。</p><p><code>CI_BUILD_NUMBER</code>会在 increment_build_number.sh 脚本中使用，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">VERSION_XCCONFIG</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Moments/Moments/Configurations/BaseTarget.xcconfig&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">SED_CMD</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;s/</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">(PRODUCT_VERSION_SUFFIX=</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">).*/</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">1\${CI_BUILD_NUMBER}/&quot;</span><span style="color:#E1E4E8;"> # Make sure setting </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> environment variable before call script.</span></span>
<span class="line"><span style="color:#E1E4E8;">sed </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e \${SED_CMD} </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i.bak \${VERSION_XCCONFIG} </span></span>
<span class="line"><span style="color:#E1E4E8;">rm </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f \${VERSION_XCCONFIG}.bak</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">VERSION_XCCONFIG</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Moments/Moments/Configurations/BaseTarget.xcconfig&quot;</span></span>
<span class="line"><span style="color:#24292E;">SED_CMD</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;s/</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">(PRODUCT_VERSION_SUFFIX=</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">).*/</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">1\${CI_BUILD_NUMBER}/&quot;</span><span style="color:#24292E;"> # Make sure setting </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> environment variable before call script.</span></span>
<span class="line"><span style="color:#24292E;">sed </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e \${SED_CMD} </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i.bak \${VERSION_XCCONFIG} </span></span>
<span class="line"><span style="color:#24292E;">rm </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f \${VERSION_XCCONFIG}.bak</span></span></code></pre></div><p>这个 Shell 会更新 BaseTarget.xcconfig 文件里面的<code>PRODUCT_VERSION</code>的值。在下面 CI 管道的配置里，你将会看到如何使用该值。</p><p>最后是定义<code>before_install</code>步骤，该步骤会在每一个构建任务执行前先运行。在 Moments App 的 CI 里，我们在该步骤里安装了 Bundler 和 CocoaPods 的各个依赖项。</p><p>准备工作做完以后，我们看看如何配置 CI 管道的构建任务。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">jobs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">include</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">stage</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Build&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Build internal app&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">set -o pipefail</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">echo &quot;machine github.com login $GITHUB_API_TOKEN&quot; &gt;&gt; ~/.netrc</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">bundle exec fastlane download_profiles</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">bundle exec fastlane archive_internal</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">include</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">stage</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Build&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Build internal app&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">script</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">set -o pipefail</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">echo &quot;machine github.com login $GITHUB_API_TOKEN&quot; &gt;&gt; ~/.netrc</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">bundle exec fastlane download_profiles</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">bundle exec fastlane archive_internal</span></span></code></pre></div><p>所有的 CI 管道都配置在<code>jobs</code>下面，首先看一下用于构建的<code>Build</code>任务。为了让 CI 可以访问存放在 GitHub 私有 Repo 里面的私钥、证书和 Provisioning Profile 文件，我们要为 Travis CI 配置<code>GITHUB_API_TOKEN</code>。在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=657&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6679&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《24 | 解决打包痛点：如何统一管理 Certificates 和 Profiles？》</a> 里，我们讲过如何获取 GitHub Access Token，假如你记不清楚了，可以回去复习一下。当拿到 GitHub Access Token 以后，就可以在 Travis CI 上的项目 Settings 页面里面进行添加，如下图所示：</p>`,11),F=l(`<p>同时，我们还需要把 local.keys 文件的其他环境变量一同加上。</p><p>配置好<code>GITHUB_API_TOKEN</code>环境变量后，我们就可以调用 fastlane 的<code>download_profiles</code>和<code>archive_internal</code>来完成 Build 的步骤了。</p><p>下面看看执行测试的<code>Test</code>任务。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">- </span><span style="color:#85E89D;">stage</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Test&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Test app&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">set -o pipefail</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">bundle exec fastlane tests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">- </span><span style="color:#22863A;">stage</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Test&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Test app&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">script</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">set -o pipefail</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">bundle exec fastlane tests</span></span></code></pre></div><p>执行测试的操作非常简单，只需要执行 fastlane 的<code>tests</code>即可。</p><p>接着再看看打包和部署 Internal App 的任务，具体代码如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">- </span><span style="color:#85E89D;">stage</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Archive, sign and deploy internal app&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Archive Internal app&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">branch = main</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">set -o pipefail</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">echo &quot;machine github.com login $GITHUB_API_TOKEN&quot; &gt;&gt; ~/.netrc</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">bundle exec fastlane download_profiles</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">./scripts/increment_build_number.sh</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">bundle exec fastlane archive_internal</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">bundle exec fastlane deploy_internal</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">- </span><span style="color:#22863A;">stage</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Archive, sign and deploy internal app&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Archive Internal app&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">if</span><span style="color:#24292E;">: </span><span style="color:#032F62;">branch = main</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">script</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">set -o pipefail</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">echo &quot;machine github.com login $GITHUB_API_TOKEN&quot; &gt;&gt; ~/.netrc</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">bundle exec fastlane download_profiles</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">./scripts/increment_build_number.sh</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">bundle exec fastlane archive_internal</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">bundle exec fastlane deploy_internal</span></span></code></pre></div><p>为了访问 GitHub 私有 Repo，我们也需要把<code>GITHUB_API_TOKEN</code>配置到 .netrc 文件里面，然后就可以下载私钥、证书和 Provisioning Profile 等文件了。接着是执行<code>increment_build_number.sh</code>来更新<code>PRODUCT_VERSION</code>的值。因为 Info.plist 文件引用了更新过的<code>PRODUCT_VERSION</code>，每次打包时，App 都具备不同的 Build Number。最后是执行 fastlane 的<code>archive_internal</code>和<code>deploy_internal</code>来完成打包和上传任务。</p><p>最后一个是打包和上传 Production 版本的 App 到 App Store，具体配置代码如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">- </span><span style="color:#85E89D;">stage</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Archive, sign and deploy production app&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Archive Production app&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">branch = release</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">set -o pipefail</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">echo &quot;machine github.com login $GITHUB_API_TOKEN&quot; &gt;&gt; ~/.netrc</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">bundle exec fastlane download_profiles</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">./scripts/increment_build_number.sh</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">bundle exec fastlane archive_appstore</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">bundle exec fastlane deploy_appstore</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">- </span><span style="color:#22863A;">stage</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Archive, sign and deploy production app&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Archive Production app&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">if</span><span style="color:#24292E;">: </span><span style="color:#032F62;">branch = release</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">script</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">set -o pipefail</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">echo &quot;machine github.com login $GITHUB_API_TOKEN&quot; &gt;&gt; ~/.netrc</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">bundle exec fastlane download_profiles</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">./scripts/increment_build_number.sh</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">bundle exec fastlane archive_appstore</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">bundle exec fastlane deploy_appstore</span></span></code></pre></div><p>这个在步骤上与打包和部署 Internal App 的任务基本一致，不同的地方是，我们通过条件判断语句<code>if: branch = release</code>来构建发布分支而不是主分支，并且最后调用的是 fastlane 的<code>archive_appstore</code>和<code>deploy_appstore</code>来打包和发布到 App Store。</p><p>到这里，Moments App 的 CI 就配置完毕了，其执行效果如下：</p>`,12),b=l('<h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲，我们讲述了 CI 的系统架构和构建流程，并且还以 Moments App 为例子讲述了如何使用 Travis CI 来搭建一套完整的 CI。在此基础上，你可以根据项目的具体需求，不断地完善 CI 管道，并推动项目的自动化与工程化建设。CI 是每个工程化团队所必备的，我建议每个团队都建立起自己的 CI 并不断优化。CI 不仅能解放所有手工操作，还能减少错误的发生，更重要的是 CI 能推动一个团队工程师文化的发展。</p><p><strong>思考题</strong></p><blockquote><p>你可能已经注意到，在 .travis.yml 文件里面，我们都是调用 fastlane 里面的 Lane 来完成具体的构建任务，这样做有什么好处呢？</p></blockquote><p>可以把你的答案写到留言区哦。从下一讲开始，我们就进入本模块的下半部分------App 上架后的优化，我会先介绍如何使用 Firebase 的统计分析服务，记得按时来听课。</p><p><strong>源码地址</strong></p><blockquote><p>.travis.yml 文件地址：<a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.travis.yml?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.travis.yml</a></p></blockquote>',7);function m(A,v,f,T,B,q){const n=e("Image");return t(),c("div",null,[i,p(n,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M01/40/6B/CioPOWCkxAqAU2EgAAZuYYLOM70201.png"}),s(),E,y,d,u,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/3F/DD/CioPOWCiCryALxStAAJGPQUyTrA302.png"}),s(),_,p(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/3F/D4/Cgp9HWCiCsqAWtJkAAHWmLlqjFY886.png"}),s(),C,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/3F/DD/CioPOWCiCtKABmSKAAJlbBo-xLw222.png"}),s(),g,I,p(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/3F/DD/CioPOWCiCtiAKcJKAAOx6n3LWLo595.png"}),s(),h,p(n,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image6/M00/40/63/Cgp9HWCkxF2Ab0pqAANKAzqQfK8033.png"}),s(),F,p(n,{alt:"图片8.png",src:"https://s0.lgstatic.com/i/image6/M00/40/63/Cgp9HWCkxH2AP76qAAMmv7m5zGQ751.png"}),s(),b])}const k=o(r,[["render",m]]);export{S as __pageData,k as default};
