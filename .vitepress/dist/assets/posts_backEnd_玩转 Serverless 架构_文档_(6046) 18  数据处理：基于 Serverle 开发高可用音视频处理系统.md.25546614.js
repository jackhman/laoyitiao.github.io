import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const d=JSON.parse('{"title":"传统音视频处理方案 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/玩转 Serverless 架构_文档/(6046) 18  数据处理：基于 Serverle 开发高可用音视频处理系统.md","filePath":"posts/backEnd/玩转 Serverless 架构_文档/(6046) 18  数据处理：基于 Serverle 开发高可用音视频处理系统.md","lastUpdated":null}'),p={name:"posts/backEnd/玩转 Serverless 架构_文档/(6046) 18  数据处理：基于 Serverle 开发高可用音视频处理系统.md"},o=l(`<p>在推广 Serverless 的过程中，经常有同学问我：除了用来开发后端接口、服务端渲染应用等场景，Serverless 还能用来做什么呢？</p><p>其实，Serverless 的应用场景非常广泛，除了上述几种，它还可以用于大数据计算、物联网应用、音视频处理等。为了让你了解到更多的 Serverless 的应用场景，我准备了今天的内容。</p><p>音视频处理是一个 CPU 密集型的操作，非常消耗计算资源，以往我们处理视频就要采购大量的高性能服务器，财务成本和维护成本都很高。有了 Serverless 后，就不用再关心计算资源不足的问题，也不用担心服务器的维护，并且还能降低成本。</p><p>接下来，我先带你了解传统的音视频处理方案，然后在此基础上再带你学习并实践基于 Serverless 的音视频处理系统，这样你理解得会更加深入。</p><h3 id="传统音视频处理方案" tabindex="-1">传统音视频处理方案 <a class="header-anchor" href="#传统音视频处理方案" aria-label="Permalink to &quot;传统音视频处理方案&quot;">​</a></h3><p>近几年，计算机技术和通信技术日新月异，信息传播的媒介也在不断演变，从文字到图片再到视频，各种短视频、直播甚至 AR、VR 等产品百花齐放。在这些产品的背后，离不开音视频处理技术。</p><p>得益于云计算的发展，有些云厂商推出了对应的视频解决方案，因此你现在要搭建一个视频处理程序是很容易的（下图就是一个典型的视频处理方案）：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/07/36/Cgp9HWAzRsKAW-EAAATCejrS5YI741.png" alt="Drawing 0.png"><br> 传统视频处理解决方案</p><p>在该方案中，我们用 OSS 来存储海量的视频内容，视频上传后用视频转码服务将不同来源的视频进行转码，以适配各种终端，然后利用 CDN 提升客户端访问视频的速度。</p><p>不过，虽然用了视频转码服务，但我们还是要购买大量的服务器，搭建自己的视频处理系统，对视频进行更高级的自定义处理，比如视频转码后将元数据存入数据库、生成视频前几秒的 GIF 图片用来做视频的封面，以及各种格式的音视频转换等。</p><p>除此之外，当我们已经在服务器上部署了一套视频处理系统后，可能还会遇到一些问题。比如，如何应对大量并发任务？能否让这个系统有更高的弹性和可用性？这些问题其实超出了视频处理本身的范围，我们的需求只是进行视频处理，但不得不面临繁重的运维工作。并且我们可能为了应对周期大量处理任务或瞬时流量，不得不购买大量的服务器，成本大幅增加，在服务器的闲置期间还造成了不必要的资源浪费。而且我们也无法 100% 利用机器的性能，这也是一种资源浪费。</p><p>而 Serverless 就能解决这些问题，基于 Serverless 你可以很轻松实现一个弹性、可扩展、低成本、免运维、高可用的音视频处理系统。</p><h3 id="基于-serverless-的音视频处理系统" tabindex="-1">基于 Serverless 的音视频处理系统 <a class="header-anchor" href="#基于-serverless-的音视频处理系统" aria-label="Permalink to &quot;基于 Serverless 的音视频处理系统&quot;">​</a></h3><p>从基础设施的角度来看，基于 Serverless 的音视频解决方案，<strong>主要是替换了传统方案中的计算资源，也就是替换了服务器。</strong></p><p>此外，我们基于 Serverless 平台提供的丰富的触发器，也能简化编程模型。比如以往我们需要用户将视频上传到 OSS 后，再通过接口主动通知服务器进行视频处理，但在 Serverless 架构中，我们可以为函数设置 OSS 触发器，这样只要有文件被上传到 OSS 中，就可以触发函数执行，进而简化了业务逻辑。</p><p>下图就是基于 Serverless 的视频处理系统解决方案：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/07/36/Cgp9HWAzRsuAb0gaAAGQSnOzXmk655.png" alt="Drawing 1.png"><br> 基于 Serverless 的视频处理系统</p><p>用户将视频上传后 OSS 后，触发函数计算中的视频转码函数执行，该函数对视频进行转码后，将元数据存入数据库，然后将转码后的视频再保存到 OSS 中。</p><p>接下来我们就实现一个基于 Serverless 的音视频处理系统，系统主要有以下几个功能：</p><ul><li><p>获取视频时长；</p></li><li><p>获取视频元数据；</p></li><li><p>截取视频 GIF 图；</p></li><li><p>为视频添加水印；</p></li><li><p>对视频进行转码。</p></li></ul><p>为了方便你实践，我为你提供了一份<a href="https://github.com/nodejh/serverless-class/tree/master/18/serverless-video" target="_blank" rel="noreferrer">示例代码</a>，你可以通过 git 下载查看：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ git clone https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/nodejh/serverless-class</span></span>
<span class="line"><span style="color:#E1E4E8;">$ cd </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">serverless</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">video</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ git clone https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/nodejh/serverless-class</span></span>
<span class="line"><span style="color:#24292E;">$ cd </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">serverless</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">video</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>代码结构如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">├── functions</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── common</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   └── utils.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── get_duration</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   └── index.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── get_meta</span></span>
<span class="line"><span style="color:#E1E4E8;">│       └── index.js</span></span>
<span class="line"><span style="color:#E1E4E8;">├── build.js</span></span>
<span class="line"><span style="color:#E1E4E8;">├── ffmpeg</span></span>
<span class="line"><span style="color:#E1E4E8;">├── ffprobe</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#F97583;">package</span><span style="color:#E1E4E8;">.json</span></span>
<span class="line"><span style="color:#E1E4E8;">└── template.yml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">├── functions</span></span>
<span class="line"><span style="color:#24292E;">│   ├── common</span></span>
<span class="line"><span style="color:#24292E;">│   │   └── utils.js</span></span>
<span class="line"><span style="color:#24292E;">│   ├── get_duration</span></span>
<span class="line"><span style="color:#24292E;">│   │   └── index.js</span></span>
<span class="line"><span style="color:#24292E;">│   └── get_meta</span></span>
<span class="line"><span style="color:#24292E;">│       └── index.js</span></span>
<span class="line"><span style="color:#24292E;">├── build.js</span></span>
<span class="line"><span style="color:#24292E;">├── ffmpeg</span></span>
<span class="line"><span style="color:#24292E;">├── ffprobe</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#D73A49;">package</span><span style="color:#24292E;">.json</span></span>
<span class="line"><span style="color:#24292E;">└── template.yml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>其中 functions 中是函数源代码，<code>common/utils.js</code>是一些公共方法，<code>get_duration</code>、<code>get_meta</code>等目录则分别对应的每个具体的功能。<code>build.js</code>是用来构建函数的脚本。在代码中，我们会使用 <a href="https://ffmpeg.org/" target="_blank" rel="noreferrer">FFmpeg</a> 进行视频处理，FFmpeg 是一款功能强大、用途广泛的开源软件，很多视频网站都在用它，比如 Youtube、Bilibili。ffmpeg 和 ffprobe 是 FFmpeg 的两个命令行工具，我们会将其作为依赖部署到 FaaS 平台（函数计算）上，这样在函数中就可以使用这两个命令来处理视频了。</p><p>接下来就让我们学习具体如何实现。</p><p>由于这几个函数的逻辑基本类似，所以我主要针对&quot;获取视频时长&quot;函数进行讲解，学会了这个函数的实现就很容易理解其他函数了。另外，由于该视频处理系统用到了公共方法及依赖，所以我还会为你介绍如何部署这些函数。</p><h4 id="获取视频时长函数的实现" tabindex="-1">获取视频时长函数的实现 <a class="header-anchor" href="#获取视频时长函数的实现" aria-label="Permalink to &quot;获取视频时长函数的实现&quot;">​</a></h4><p>首先是获取视频时长的实现，也就是 get_duration 函数。我们可以通过 ffprobe 来获取视频时长，命令如下：</p><div class="language-c# vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ ffprobe </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v quiet </span><span style="color:#F97583;">-</span><span style="color:#B392F0;">show_entries</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">format</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">duration </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">print_format json </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i video.mp4</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;format&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;duration&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;170.859000&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ ffprobe </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v quiet </span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">show_entries</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">format</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">duration </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">print_format json </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i video.mp4</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;format&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;duration&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;170.859000&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中<code>-print_format json</code>是指以 JSON 格式输出结果，<code>-i</code>是指定文件位置，可以是本地文件，也可以是网络上的远程文件。</p><p><strong>所以获取视频时长的函数逻辑就是：</strong> 下载 OSS 中的文件到本地，然后运行 ffprobe 命令得到视频时长，最后返回视频时长。</p><p>为了让代码尽可能复用，所以我在<code>common/utils.js</code>中实现了一些公共方法，代码大致如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// common/utils.js</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 运行 Linux 命令</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">command</span><span style="color:#6A737D;"> 待运行的命令</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">command</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(command)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    child_process.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(command, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">stdout</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">stderr</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stderr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(stderr)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(stderr);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(stdout)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(stdout);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获取 OSS Client</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">context</span><span style="color:#6A737D;"> 函数上下文</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOssClient</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取函数计算的临时访问凭证</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">accessKeyId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.credentials.accessKeyId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">accessKeySecret</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.credentials.accessKeySecret;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">securityToken</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.credentials.securityToken;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化 OSS 客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">oss</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    accessKeyId,</span></span>
<span class="line"><span style="color:#E1E4E8;">    accessKeySecret,</span></span>
<span class="line"><span style="color:#E1E4E8;">    stsToken: securityToken,</span></span>
<span class="line"><span style="color:#E1E4E8;">    bucket: </span><span style="color:#79B8FF;">OSS_BUCKET_NAME</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    region: </span><span style="color:#79B8FF;">OSS_REGION</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> client;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  exec,</span></span>
<span class="line"><span style="color:#E1E4E8;">  getOssClient,</span></span>
<span class="line"><span style="color:#E1E4E8;">  OSS_VIDEO_NAME,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// common/utils.js</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 运行 Linux 命令</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">command</span><span style="color:#6A737D;"> 待运行的命令</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#E36209;">command</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(command)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    child_process.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(command, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">stdout</span><span style="color:#24292E;">, </span><span style="color:#E36209;">stderr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stderr) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(stderr)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(stderr);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(stdout)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(stdout);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获取 OSS Client</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">context</span><span style="color:#6A737D;"> 函数上下文</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOssClient</span><span style="color:#24292E;">(</span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取函数计算的临时访问凭证</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">accessKeyId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.credentials.accessKeyId;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">accessKeySecret</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.credentials.accessKeySecret;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">securityToken</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.credentials.securityToken;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化 OSS 客户端</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">oss</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    accessKeyId,</span></span>
<span class="line"><span style="color:#24292E;">    accessKeySecret,</span></span>
<span class="line"><span style="color:#24292E;">    stsToken: securityToken,</span></span>
<span class="line"><span style="color:#24292E;">    bucket: </span><span style="color:#005CC5;">OSS_BUCKET_NAME</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    region: </span><span style="color:#005CC5;">OSS_REGION</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> client;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  exec,</span></span>
<span class="line"><span style="color:#24292E;">  getOssClient,</span></span>
<span class="line"><span style="color:#24292E;">  OSS_VIDEO_NAME,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p><code>common/utils.js</code>的代码主要就包含两个方法：<code>exec</code>和<code>getOssClient</code>，分别用来执行 Linux 系统命令和获取 OSS 客户端。</p><p>这样我们在<code>functions/get_duration/index.js</code>中就可以直接引入并使用了：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// functions/get_duration/index.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">exec</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">getOssClient</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">OSS_VIDEO_NAME</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../common/utils&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获取视频元信息</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">client</span><span style="color:#6A737D;"> OSS client</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDuration</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filePath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/tmp/video.mp4&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">OSS_VIDEO_NAME</span><span style="color:#E1E4E8;">, filePath);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">command</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`./ffprobe -v quiet -show_entries format=duration -print_format json -i \${</span><span style="color:#E1E4E8;">filePath</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(command);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取 OSS 客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOssClient</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getDuration</span><span style="color:#E1E4E8;">(client)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;视频时长: </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err));</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// functions/get_duration/index.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">exec</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">getOssClient</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">OSS_VIDEO_NAME</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../common/utils&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获取视频元信息</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">client</span><span style="color:#6A737D;"> OSS client</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDuration</span><span style="color:#24292E;">(</span><span style="color:#E36209;">client</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filePath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/tmp/video.mp4&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">OSS_VIDEO_NAME</span><span style="color:#24292E;">, filePath);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">command</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`./ffprobe -v quiet -show_entries format=duration -print_format json -i \${</span><span style="color:#24292E;">filePath</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(command);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取 OSS 客户端</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOssClient</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getDuration</span><span style="color:#24292E;">(client)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;视频时长: </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err));</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>首先注意第 20 行，我们通过 getOssClient 获取到 OSS 客户端，然后调用 getDuration 函数执行业务逻辑，也就是获取视频时长。</p><p>在 getDuration 中，我们先下载视频到临时目录<code>/tmp/video.mp4</code>中，临时目录是可以读写的，当前代码目录只能写不能读。然后在第 13 行，通过 exec 执行了获取视频时长的命令，最后将得到的结果返回。</p><p>这样获取视频时长的功能就开发完成了。</p><p>获取视频元数据等其他函数与获取视频时长的实现是非常类似的，不同之处主要在于执行的命令，也就是第 12 行的<code>command</code>变量。具体实现可以参考我的示例代码，这里就不赘述。</p><p>由于该系统包含多个函数，且函数不仅依赖了 ffmpeg ，还依赖了公共的<code>common/utils.js</code>，所以很多同学就犯难了，这些函数应该怎么部署呢？</p><h4 id="音视频处理系统的部署" tabindex="-1">音视频处理系统的部署 <a class="header-anchor" href="#音视频处理系统的部署" aria-label="Permalink to &quot;音视频处理系统的部署&quot;">​</a></h4><p>让我们先回顾一下 &quot;06 | 依赖管理：Serverless 应用怎么安装依赖？&quot;的内容，这一讲我们学习了函数的依赖需要一起打包上传到 FaaS 平台，所以我们需要将 ffmpeg 或 ffprobe 上传。看起来比较简单，我们直接将其放在函数代码目录并上传就可以了。</p><p><strong>不过这里需要注意的是，</strong> 由于 ffmpeg 和 ffprobe 是可执行文件，最终我们需要用到这两个命令，所以在上传到 FaaS 平台之前，需要为其赋予可执行权限。</p><p>你可以通过<code>ls -l</code>来查看文件的权限：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rwxr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">xr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x    </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root  staff  </span><span style="color:#79B8FF;">39000328</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">59</span><span style="color:#E1E4E8;"> ffmpeg</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rwxr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">xr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x    </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root  staff  </span><span style="color:#79B8FF;">38906056</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;"> ffprobe</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rwxr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">xr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x    </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root  staff  </span><span style="color:#005CC5;">39000328</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">59</span><span style="color:#24292E;"> ffmpeg</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rwxr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">xr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x    </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root  staff  </span><span style="color:#005CC5;">38906056</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#24292E;"> ffprobe</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>-rwxr-xr-x</code>分为四部分：</p><ul><li><p>第 0 位<code>-</code>表示文件类型；</p></li><li><p>第 1-3 位<code>rwx</code>表示文件所有者的权限；</p></li><li><p>第 4-6 位<code>r-x</code>是同组用户的权限；</p></li><li><p>第 7-9<code>r-x</code>位表示其他用户的权限。</p></li></ul><p>r 表示读权限，w 表示写权限，x 表示执行权限。从文件权限可以看出，针对所有用户这两个文件都有可执行权限。</p><p>如果你的这两个文件没有执行权限，则需要通过下面的命令添加权限：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ chmod </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">x ffmpeg</span></span>
<span class="line"><span style="color:#E1E4E8;">$ chmod </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">x ffprobe</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ chmod </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">x ffmpeg</span></span>
<span class="line"><span style="color:#24292E;">$ chmod </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">x ffprobe</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样在 FaaS 平台上，Node.js 才可以执行这两个命令。</p><p>解决了可执行文件的权限问题后，还有一个问题是函数的权限。</p><p>由于函数需要读写 OSS，所以我们需要为函数设置角色，并为该角色添加管理 OSS 的权限。如果你不清楚如何授权，可以复习一下 &quot;10｜访问控制：如何授权访问其他云服务？&quot;的内容。</p><p>在我提供的示例代码中，我在 template.yaml 的第 7 行设置了函数的角色<code>acs:ram::1457216987974698:role/aliyunfclogexecutionrole</code>，文件内容如下所示：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">ROSTemplateFormatVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Transform</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">serverless-video</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Role</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">acs:ram::1457216987974698:role/aliyunfclogexecutionrole</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;基于 Serverless 开发高可用音视频处理系统&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">get_duration</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">index.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">600</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">MemorySize</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">256</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">./.serverless/get_duration</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">get_meta</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">index.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">600</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">MemorySize</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">256</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">./.serverless/get_meta</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">......</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">ROSTemplateFormatVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#22863A;">Transform</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#22863A;">Resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">serverless-video</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Role</span><span style="color:#24292E;">: </span><span style="color:#032F62;">acs:ram::1457216987974698:role/aliyunfclogexecutionrole</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;基于 Serverless 开发高可用音视频处理系统&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">get_duration</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">index.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">600</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">MemorySize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">256</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">./.serverless/get_duration</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">get_meta</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">index.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">600</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">MemorySize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">256</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">./.serverless/get_meta</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">......</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>细心的你可能发现了，在该 YAML 配置中，函数的 CodeUri 不是<code>./functions/get_durtion</code>，而是<code>./.serverless/get_meta</code>，这是为什么呢？</p><p>这主要是因为我们需要对函数代码进行构建，<code>./.serverless/get_duration</code>对应的是构建后的代码。之所以需要构建，是为了解决<code>common/utils.js</code>代码共用的问题。</p><p>如果不对代码进行构建，直接部署<code>functions/get_duration</code>中的代码，函数执行时就会报错：<code>Cannot find module &#39;../common/utils</code>，因为<code>common/utils.js</code>不在入口函数目录中，没有部署到 FaaS 上。</p><p>要解决这个问题，就需要对代码进行构建，将函数及依赖的所有代码构建为单个文件，这样部署时就只需要部署一个文件，不涉及目录和依赖的问题了。</p><p>我们可以使用 <a href="https://github.com/vercel/ncc" target="_blank" rel="noreferrer">ncc</a> 这个工具对函数进行构建，使用方法如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ncc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./functions/get_duration/index.js</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./.serverless/get_duration/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ali-oss</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ncc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./functions/get_duration/index.js</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./.serverless/get_duration/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ali-oss</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该命令就会将<code>functions/get_duration/index.js</code>进行构建，最终会将<code>index.js</code>以及缩依赖的 exec、getOSSClient 等方法进行编译，最终合并为一个文件并输出到<code>./.serverless/get_duration/</code>目录中。</p><p><strong>这里还需要注意的是</strong> <code>-e ali-oss</code>这个参数，含义是构建时，排除 ali-oss 这个依赖，也就是不将其编译到最终的<code>index.js</code>文件中。这是因为函数计算的 Node.js 运行时内置了 ali-oss 模块，所以我们的构建产物就不需要包含 ali-oss 的代码了。</p><p>处理对代码进行构建，我们还需要将 ffmpeg 和 ffprobe 复制到对应的函数目录中。最终我将这些步骤编写到了<code>build.js</code>中，内容如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// build.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">exec</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./functions/common/utils&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 清空编译目录</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rm -rf .serverless/*&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 编译 get_duration 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mkdir -p ./.serverless/get_duration&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`ncc build ./functions/get_duration/index.js -o ./.serverless/get_duration/ -e ali-oss\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cp ./ffprobe ./.serverless/get_duration/ffprobe&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 编译 get_meta 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mkdir -p ./.serverless/get_meta&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`ncc build ./functions/get_meta/index.js -o ./.serverless/get_meta/ -e ali-oss\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cp ./ffprobe ./.serverless/get_meta/ffprobe&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// build.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">exec</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./functions/common/utils&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 清空编译目录</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rm -rf .serverless/*&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 编译 get_duration 函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mkdir -p ./.serverless/get_duration&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`ncc build ./functions/get_duration/index.js -o ./.serverless/get_duration/ -e ali-oss\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cp ./ffprobe ./.serverless/get_duration/ffprobe&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 编译 get_meta 函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mkdir -p ./.serverless/get_meta&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`ncc build ./functions/get_meta/index.js -o ./.serverless/get_meta/ -e ali-oss\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cp ./ffprobe ./.serverless/get_meta/ffprobe&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>然后我在 package.json 中添加了两个命令：</p><ul><li><p><code>build</code>构建函数</p></li><li><p><code>deploy</code>构建并部署</p></li></ul><p>例如你开发完成后需要部署，就可以直接运行：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deploy</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> serverless-video@1.0.0 deploy</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> npm run build &amp;&amp; </span><span style="color:#B392F0;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deploy</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> serverless-video@1.0.0 build</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> node build.js</span></span>
<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.serverless/</span><span style="color:#79B8FF;">*</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./.serverless/get_duration</span></span>
<span class="line"><span style="color:#B392F0;">ncc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./functions/get_duration/index.js</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./.serverless/get_duration/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ali-oss</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">template:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">template.yml</span></span>
<span class="line"><span style="color:#B392F0;">Waiting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">service</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless-video</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Waiting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get_duration</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Waiting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">packaging</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get_duration</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get_duration</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">has</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">been</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">packaged.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">files</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">were</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">compressed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">size</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">was</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15.2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MB</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_duration</span><span style="color:#E1E4E8;"> deploy success</span></span>
<span class="line"><span style="color:#E1E4E8;">......</span></span>
<span class="line"><span style="color:#E1E4E8;">service serverless-video deploy success</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deploy</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> serverless-video@1.0.0 deploy</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> npm run build &amp;&amp; </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deploy</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> serverless-video@1.0.0 build</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> node build.js</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.serverless/</span><span style="color:#005CC5;">*</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./.serverless/get_duration</span></span>
<span class="line"><span style="color:#6F42C1;">ncc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./functions/get_duration/index.js</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./.serverless/get_duration/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ali-oss</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">using</span><span style="color:#24292E;"> </span><span style="color:#032F62;">template:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">template.yml</span></span>
<span class="line"><span style="color:#6F42C1;">Waiting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">service</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless-video</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deployed...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Waiting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get_duration</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deployed...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Waiting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">packaging</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get_duration</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get_duration</span><span style="color:#24292E;"> </span><span style="color:#032F62;">has</span><span style="color:#24292E;"> </span><span style="color:#032F62;">been</span><span style="color:#24292E;"> </span><span style="color:#032F62;">packaged.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">files</span><span style="color:#24292E;"> </span><span style="color:#032F62;">were</span><span style="color:#24292E;"> </span><span style="color:#032F62;">compressed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">final</span><span style="color:#24292E;"> </span><span style="color:#032F62;">size</span><span style="color:#24292E;"> </span><span style="color:#032F62;">was</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15.2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MB</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_duration</span><span style="color:#24292E;"> deploy success</span></span>
<span class="line"><span style="color:#24292E;">......</span></span>
<span class="line"><span style="color:#24292E;">service serverless-video deploy success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>部署成功后，我们就可以对函数进行测试了，可以直接在控制台上运行函数，也可以通过<code>fun invoke</code>执行函数：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ fun invoke get_duration</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;format&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;duration&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;170.859000&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ fun invoke get_duration</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;format&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;duration&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;170.859000&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>今天这一讲我们学习了怎么基于 Serverless 实现一个音视频处理系统，在代码中我们使用到了 FFmpeg 进行视频处理。同时我也为你介绍了如何通过 ncc 进行代码构建，通过 ncc 我们可以将分散在多个文件中的函数代码构建为单个文件，这样就不用担心单个函数部署后找不到依赖的问题，同时还能减小代码体积。</p><p>总的来说，我想要强调下面几点：</p><ul><li><p>Serverless 除了适合 Web 接口、服务端渲染等场景，还适合 CPU 密集型的任务；</p></li><li><p>基于 Serverless 开发的音视频处理系统，本身就具备弹性、可扩展、低成本、免运维、高可用的能力；</p></li><li><p>对于需要通过代码执行的命令行工具等依赖，部署到 FaaS 平台之前需要为其设置可执行权限；若函数依需要调用其他云产品的接口，需要为函数授予相应权限；</p></li><li><p>对于添加水印、视频转码等消耗资源的操作，需要为函数设置较大的内存和超时时间。</p></li></ul><p>最后，本节课我留给你的作业是：亲自动手实现课上所学的视频处理程序。</p>`,78),e=[o];function c(r,t,E,y,i,u){return n(),a("div",null,e)}const b=s(p,[["render",c]]);export{d as __pageData,b as default};
