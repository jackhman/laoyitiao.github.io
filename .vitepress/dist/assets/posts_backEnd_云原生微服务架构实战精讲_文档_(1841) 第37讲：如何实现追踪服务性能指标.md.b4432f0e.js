import{_ as o,j as e,o as t,g as r,k as n,h as s,Q as p,s as l}from"./chunks/framework.cfb14fe0.js";const m=JSON.parse('{"title":"第37讲：如何实现追踪服务性能指标","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1841) 第37讲：如何实现追踪服务性能指标.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1841) 第37讲：如何实现追踪服务性能指标.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1841) 第37讲：如何实现追踪服务性能指标.md"},E=p('<h1 id="第37讲-如何实现追踪服务性能指标" tabindex="-1">第37讲：如何实现追踪服务性能指标 <a class="header-anchor" href="#第37讲-如何实现追踪服务性能指标" aria-label="Permalink to &quot;第37讲：如何实现追踪服务性能指标&quot;">​</a></h1><p>在一个微服务架构的应用中，微服务的数量可能很大，尤其是对于复杂的业务系统来说，微服务的数量可能成百上千。面对如此数量的微服务，相关的运维变得很困难，其中，最典型的两个问题是性能调优和错误调试。因此，本课时我们来一起了解 Istio 提供的服务性能指标和调用追踪功能。</p><p><strong>服务性能指标</strong> 指的是记录每个服务在运行时的性能指标数据，包括访问次数和响应时间等；<strong>调用追踪</strong>指的是对于每个请求，记录该请求在不同服务之间的调用关系。一个业务场景通常由多个微服务协作来完成，而即便是在相同的业务场景下，不同的请求所实际调用的服务也可能不同。比如在支付订单时，用户选择用账户余额支付或微信支付，所调用的服务是不同的。</p><p>服务性能指标和调用追踪两个功能相辅相成。在系统的运行过程中，通过监控服务性能指标可以发现系统中的异常情况。比如某个服务的响应时间突然出现了很大的延迟，具体的原因可能来自服务自身，也可能是由于来自调用者的请求变多。这些情况有时候是正常的，比如外部用户的访问量变大，造成整个系统的负载变大；有些情况是异常的，比如由于调用者出现了 Bug，造成了调用请求过多。为了定位问题，就需要查看并比对所有关联服务在同一时间段之内的性能指标。</p><p>服务追踪的一个典型应用场景是客户支持。当接收到用户报告的异常情况时，需要能够查看该用户请求的实际调用流程，来定位问题所在。比如，用户报告没有收到订单的产品，问题可能出在发货服务本身，也可能是上游的服务并没有调用发货服务的 API。通过服务追踪，查看请求的实际调用追踪记录，可以很清楚地知道应该从哪里查找问题。</p><h3 id="性能指标数据" tabindex="-1">性能指标数据 <a class="header-anchor" href="#性能指标数据" aria-label="Permalink to &quot;性能指标数据&quot;">​</a></h3><p>Istio 的服务代理已经提供了一些性能指标数据，其在这基础上添加对 Prometheus 和 Grafana 的集成。Prometheus 用来收集性能指标数据，而 Grafana 用来提供图形化界面进行展示。</p><h4 id="预置的-prometheus-和-grafana-组件" tabindex="-1">预置的 Prometheus 和 Grafana 组件 <a class="header-anchor" href="#预置的-prometheus-和-grafana-组件" aria-label="Permalink to &quot;预置的 Prometheus 和 Grafana 组件&quot;">​</a></h4><p>Istio 默认的安装概要文件中已经包含了 Prometheus，而 Grafana 只在概要文件 demo 中启用。通过下面的命令可以确保 Prometheus 和 Grafana 都启用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">istioctl install </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">set addonComponents.prometheus.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">set addonComponents.grafana.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">istioctl install </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">set addonComponents.prometheus.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">set addonComponents.grafana.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre></div><p>Istio 提供的 Prometheus 和 Grafana 组件已经预先进行了配置，Prometheus 会自动抓取服务代理的性能指标数据。我们可以使用下面的命令打开 Prometheus 的界面。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">istioctl dashboard prometheus</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">istioctl dashboard prometheus</span></span></code></pre></div><p>在打开的 Prometheus 界面的目标页面中，可以看到 Prometheus 收集的数据来源，如下图所示。这些数据来源通过 Kubernetes 上的自动发现机制来查找。</p>',13),y=p('<p>在这些来源中，Istio 的性能指标数据由 Envoy 来提供，对应与上图中的 envoy-stats 列表，在服务代理的边车容器中，访问 15090 端口上的 /stats/prometheus 路径，可以获取到 Prometheus 格式的数据。</p><p>Istio 的 Grafana 组件预置了一些仪表盘来查看服务网格的状态。通过下面的命令可以打开 Grafana 界面。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">istioctl dashboard grafana</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">istioctl dashboard grafana</span></span></code></pre></div><h4 id="istio-性能指标" tabindex="-1">Istio 性能指标 <a class="header-anchor" href="#istio-性能指标" aria-label="Permalink to &quot;Istio 性能指标&quot;">​</a></h4><p>除了 Envoy 自身提供的数据之外，Istio 也提供了一些抽象层次比较高的性能指标数据，这些性能指标的名称都以 istio 作为前缀。</p><p>下表给出了与 HTTP、HTTP/2 和 gRPC 相关的性能指标。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>istio_requests_total</td><td>计数器</td><td>处理的请求数量</td></tr><tr><td>istio_request_duration_milliseconds</td><td>分布式概要</td><td>请求的处理时间</td></tr><tr><td>istio_request_bytes</td><td>分布式概要</td><td>请求内容的大小</td></tr><tr><td>istio_response_bytes</td><td>分布式概要</td><td>响应内容的大小</td></tr></tbody></table><p>下表给出了与 TCP 相关的性能指标。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>istio_tcp_sent_bytes_total</td><td>计数器</td><td>发送的字节总数</td></tr><tr><td>istio_tcp_received_bytes_total</td><td>计数器</td><td>接收的字节总数</td></tr><tr><td>istio_tcp_connections_opened_total</td><td>计数器</td><td>打开的连接总数</td></tr><tr><td>istio_tcp_connections_closed_total</td><td>计数器</td><td>关闭的连接总数</td></tr></tbody></table><p>每个性能指标都包含了一系列的标签，可以对数据进行过滤。下表给出了一些常用标签的说明。</p><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>source_canonical_service</td><td>发送请求的服务的名称</td></tr><tr><td>destination_canonical_service</td><td>接收请求的服务的名称</td></tr><tr><td>request_protocol</td><td>请求的协议</td></tr><tr><td>response_code</td><td>响应的状态码</td></tr><tr><td>source_principal</td><td>发送请求的主体</td></tr></tbody></table><h4 id="性能分析" tabindex="-1">性能分析 <a class="header-anchor" href="#性能分析" aria-label="Permalink to &quot;性能分析&quot;">​</a></h4><p>下面通过一个示例场景来说明性能指标的用法。乘客界面的 GraphQL API 在获取乘客信息时，需要同时访问乘客管理服务和地址管理服务的 API。当在入口网关检测到 GraphQL 的查询请求延迟过高时，可以通过性能指标 istio_request_duration_milliseconds 来查找问题。</p><p>在下图中，通过 Grafana 显示了从 GraphQL 服务中发送到乘客管理服务和地址管理服务的请求的处理时间。图中的绿线表示的是乘客管理服务的处理时间，而黄线表示的是地址管理服务的处理时间。从图中可以看到，同一时间段内，地址管理服务的处理时间远高于乘客管理服务，说明该服务的内部可能有问题。这个时候可以对地址管理服务进行水平扩展，也可以等待熔断器来触发。</p>',14),i=p(`<h4 id="envoy-性能指标" tabindex="-1">Envoy 性能指标 <a class="header-anchor" href="#envoy-性能指标" aria-label="Permalink to &quot;Envoy 性能指标&quot;">​</a></h4><p>Istio 自身的性能指标比较有限，一些底层的数据由 Envoy 提供，其所提供的性能指标数据非常多。这些性能指标的名称以英文句点的形式分隔成多个部分，对应于 Envoy 中的不同组件。在 Prometheus 中，Envoy 相关的性能指标都以 envoy_ 开头，可以通过 Prometheus 的界面来查看。</p><p>虽然性能指标在运维中很有价值，但是收集过多的数据也会带来性能上的开销。Istio 默认对 Envoy 进行了配置，只收集部分数据，性能指标是否收集根据字符串匹配来完成。</p><p>对于一个 Pod，可以通过下面的命令来查看性能指标的匹配模式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">istioctl proxy</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">config bootstrap </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pod_name</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> jq </span><span style="color:#9ECBFF;">&quot;.bootstrap.statsConfig.statsMatcher.inclusionList&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">istioctl proxy</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">config bootstrap </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pod_name</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> jq </span><span style="color:#032F62;">&quot;.bootstrap.statsConfig.statsMatcher.inclusionList&quot;</span></span></code></pre></div><p>下面的代码是 Istio 的默认匹配模式，以前缀的形式来匹配。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;patterns&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;reporter=&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cluster_manager&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;listener_manager&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;http_mixer_filter&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;tcp_mixer_filter&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;server&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cluster.xds-grpc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;wasm&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;prefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;component&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;patterns&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;reporter=&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cluster_manager&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;listener_manager&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;http_mixer_filter&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;tcp_mixer_filter&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;server&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cluster.xds-grpc&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;wasm&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;prefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;component&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果默认的配置不能满足需求，可以进行调整，调整的方式是在 Kubernetes 部署中通过注解 sidecar.istio.io/statsInclusionPrefixes 来指定新的前缀列表。</p><p>如果需要添加应用自定义的性能指标数据，请参考第 28 课时的相关介绍。</p><h3 id="服务追踪" tabindex="-1">服务追踪 <a class="header-anchor" href="#服务追踪" aria-label="Permalink to &quot;服务追踪&quot;">​</a></h3><p>分布式追踪是分布式系统中的一个常见问题，在微服务架构中也是必不可少的一部分。分布式追踪相关的开源和商用产品非常多，虽然在具体的实现存在一些差异，但基本的概念是相似的。</p><h4 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h4><p>分布式追踪中最基本的概念是<strong>痕迹（Trace）和跨度（Span）</strong>。痕迹是操作的历史轨迹，通常与一个业务行为相对应，也可以是任意感兴趣的动作。痕迹由相互嵌套的跨度组成，跨度表示的是痕迹中的单个操作。</p><p>同一个痕迹中的不同跨度之间可能存在引用关系。最典型的引用关系是父子关系，也就是父跨度所对应操作的结果，依赖于子跨度所对应操作的结果。这种父子关系可以与编程语言中的方法调用形成的调用栈进行类比。需要被追踪的方法是整个痕迹的入口。每当这个方法调用其他方法时，会创建新的子跨度。这种方式递归下去，就形成了完整的痕迹。</p><p>为了能够记录完整的痕迹，在记录属于同一痕迹的不同跨度时，需要传递与痕迹相关的上下文对象。该上下文对象的作用是把可能产生在不同系统中的跨度串联起来，组织在同一个痕迹中。该上下文对象的具体格式，与使用的分布式追踪系统相关。</p><p>为了解决不同追踪系统的互操作问题，W3C 发布了痕迹上下文（Trace Context）推荐规范。根据该规范，该上下文对象应该包含下表中的两个字段：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>traceparent</td><td>当前的跨度在整个痕迹中的位置</td></tr><tr><td>tracestate</td><td>供应商特有的附加数据，以名值对的方式组织</td></tr></tbody></table><p>traceparent 字段由下表中的 4 个字段组成：</p><table><thead><tr><th>字段</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>1 字节</td><td>版本号</td></tr><tr><td>trace-id</td><td>16 字节</td><td>痕迹标识符</td></tr><tr><td>parent-id</td><td>8 字节</td><td>父跨度标识符</td></tr><tr><td>trace-flags</td><td>8 比特</td><td>痕迹的标志位</td></tr></tbody></table><p>在进行传输时，traceparent 中的 4 个字段会首先以 16 进制来编码，然后再以&quot; - &quot;来连接。</p><p>在 REST API 的请求中，上下文对象中的这两个字段会以 HTTP 头的形式来传递。下面的代码给出了这两个头的值的示例。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">traceparent: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01</span></span>
<span class="line"><span style="color:#E1E4E8;">tracestate: test=hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">traceparent: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01</span></span>
<span class="line"><span style="color:#24292E;">tracestate: test=hello</span></span></code></pre></div><p>在实际的开发中，可能需要根据分布式追踪实现的不同，来使用不同的上下文对象格式。比如，Zipkin 使用的是以 x-b3 开头的 HTTP 头。这些实现的差异性，可以通过第三方库来屏蔽，大部分时候并不需要了解底层的实现细节。</p><h4 id="istio-服务追踪" tabindex="-1">Istio 服务追踪 <a class="header-anchor" href="#istio-服务追踪" aria-label="Permalink to &quot;Istio 服务追踪&quot;">​</a></h4><p>服务代理可以拦截对服务的调用请求。如果需要追踪服务之间的调用情况，服务代理可以在接收到请求之后，自动创建出相应的跨度，并发送到追踪服务器。Istio 提供了对一些追踪服务的支持，包括 Zipkin、Jaeger 和 Lightstep 等。</p><p>在启用了 tracing 组件之后，Istio 会运行 Jaeger 来作为分布式追踪实现，并配置服务代理来发送追踪数据。通过下面的命令可以打开 Jaeger 的界面。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">istioctl dashboard jaeger</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">istioctl dashboard jaeger</span></span></code></pre></div><h4 id="应用服务追踪" tabindex="-1">应用服务追踪 <a class="header-anchor" href="#应用服务追踪" aria-label="Permalink to &quot;应用服务追踪&quot;">​</a></h4><p>为了启用服务追踪，每个服务本身的代码也需要进行修改。做的修改取决于服务在整个追踪过程中的参与程度。</p><p>第一种参与方式是只进行简单的上下文传播，不添加新的跨度，这种情况下，只需要传递上下文对象即可。接收到的请求中已经包含了与跨度上下文相关的 HTTP 头，当该服务调用其他微服务的 API 时，需要把同样的 HTTP 头传递过去。这样才可以保证追踪痕迹不中断。</p><p>第二种参与方式是添加新的跨度。当需要追踪一个服务内部的处理流程时，可以使用追踪实现的客户端来添加新的跨度。在调用其他微服务的 API 时，需要传递的是新的跨度上下文，其中痕迹的标识符保持不变，但是父跨度标识符会变成新创建的跨度。</p><p>下面以乘客管理的 GraphQL API 为例来分别说明这两种参与方式的用法，使用的 Jaeger 客户端库。</p><p>我们需要添加的是对 GraphQL 查询的追踪。通过乘客界面的 GraphQL API 发送下面代码中的查询到 Istio 的入口网关。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">query allPassengers {</span></span>
<span class="line"><span style="color:#E1E4E8;">  passengers {</span></span>
<span class="line"><span style="color:#E1E4E8;">    id</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span></span>
<span class="line"><span style="color:#E1E4E8;">    email</span></span>
<span class="line"><span style="color:#E1E4E8;">    userAddresses {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name</span></span>
<span class="line"><span style="color:#E1E4E8;">      address {</span></span>
<span class="line"><span style="color:#E1E4E8;">        addressLine</span></span>
<span class="line"><span style="color:#E1E4E8;">        lat</span></span>
<span class="line"><span style="color:#E1E4E8;">        lng</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">query allPassengers {</span></span>
<span class="line"><span style="color:#24292E;">  passengers {</span></span>
<span class="line"><span style="color:#24292E;">    id</span></span>
<span class="line"><span style="color:#24292E;">    name</span></span>
<span class="line"><span style="color:#24292E;">    email</span></span>
<span class="line"><span style="color:#24292E;">    userAddresses {</span></span>
<span class="line"><span style="color:#24292E;">      name</span></span>
<span class="line"><span style="color:#24292E;">      address {</span></span>
<span class="line"><span style="color:#24292E;">        addressLine</span></span>
<span class="line"><span style="color:#24292E;">        lat</span></span>
<span class="line"><span style="color:#24292E;">        lng</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从这个查询中可以看出，该请求所涉及的服务之间的调用关系路径如下图所示。</p>`,35),d=l("p",null,"当在 Jaeger 的界面搜索痕迹时，会发现每一个查询请求，实际上对应的是 3 条痕迹，每条痕迹中只包含两个跨度，如下图所示。这是因为 Istio 的服务代理在记录跨度时，只知道当前请求的来源和目的地。在没有跨度上下文把这些服务调用串联起来的情况下，每个服务调用都会被当成独立的痕迹。",-1),F=p(`<p>如果在 GraphQL API 服务内部不记录额外的跨度时，只需要把 HTTP 请求中与跨度上下文相关的一些头记录下来，在调用乘客管理服务和地址管理服务的 API 时，把这些 HTTP 头添加进去即可。</p><p>从实现上来说，单纯地转发 HTTP 头并不需要第三方库的支持。我们可以在 Servlet 过滤器中把 HTTP 头的值记录下来，在使用 HTTP 客户端调用其他微服务的 REST API 时，把记录下来的这些 HTTP 头添加到 HTTP 请求中即可。这种做法实现起来简单，不过维护性比较差，更好的做法是使用第三方库。示例应用使用的是 OpenTracing 的 API，以及该 API 的 Jaeger 实现。</p><p>完整的实现分成三个部分，分别是跨度上下文的抽取、跨度的创建以及跨度上下文的注入，其中前后两个部分是必须的，中间跨度的创建是可选的。</p><p>第一步部分指的是从 HTTP 请求头中抽取跨度上下文的信息。OpenTracing 库 opentracing-web-servlet-filter 提供了一个 Servlet 过滤器实现来抽取跨度上下文信息，只需要注册该过滤器即可。</p><p>在下面的代码中，使用 Jaeger 客户端库创建了一个新的 OpenTracing API 中的 Tracer 对象，并注册了一个 TracingFilter 类型的过滤器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TracingConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Tracer </span><span style="color:#B392F0;">tracer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> io.jaegertracing.Configuration.</span><span style="color:#B392F0;">fromEnv</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTracer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> FilterRegistrationBean&lt;</span><span style="color:#F97583;">TracingFilter</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">tracingFilter</span><span style="color:#E1E4E8;">(Tracer </span><span style="color:#FFAB70;">tracer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> FilterRegistrationBean&lt;&gt;(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TracingFilter</span><span style="color:#E1E4E8;">(tracer));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TracingConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Tracer </span><span style="color:#6F42C1;">tracer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> io.jaegertracing.Configuration.</span><span style="color:#6F42C1;">fromEnv</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTracer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> FilterRegistrationBean&lt;</span><span style="color:#D73A49;">TracingFilter</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">tracingFilter</span><span style="color:#24292E;">(Tracer </span><span style="color:#E36209;">tracer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> FilterRegistrationBean&lt;&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TracingFilter</span><span style="color:#24292E;">(tracer));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>GraphQL API 服务使用的是从 OpenAPI 文档中自动生成的 Java 客户端来访问另外两个微服务的 API，该 Java 客户端使用 OkHttp 来调用 REST API。为了在发送 REST API 请求时添加追踪相关的 HTTP 头，我们使用 OkHttp 中的拦截器。</p><p>在下面的代码中，ApiTracingInterceptor 用来拦截 OkHttp 客户端发出的 HTTP 请求，并在请求中添加相关的 HTTP 头。在 intercept 方法中，首先使用 Tracer 对象的 activeSpan 方法来获取到当前活动的跨度对象。如果存在活动的跨度对象，则通过 Tracer 对象的 inject 方法来把跨度上下文以 HTTP 头的形式注入 HTTP 请求中。通过这样的方式，所有对外的 HTTP 请求都会自动传播跨度上下文。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApiTracingInterceptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Interceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Tracer tracer;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApiTracingInterceptor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Tracer </span><span style="color:#FFAB70;">tracer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tracer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tracer;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Chain </span><span style="color:#FFAB70;">chain</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Builder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chain.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tracer.</span><span style="color:#B392F0;">activeSpan</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tracer.</span><span style="color:#B392F0;">inject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tracer.</span><span style="color:#B392F0;">activeSpan</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">          Format.Builtin.HTTP_HEADERS,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InjectOnlyTextMap</span><span style="color:#E1E4E8;">(builder));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chain.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">(builder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InjectOnlyTextMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextMap</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Builder builder;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InjectOnlyTextMap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Builder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builder;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Iterator&lt;Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Only context injection is supported&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.builder.</span><span style="color:#B392F0;">addHeader</span><span style="color:#E1E4E8;">(key, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiTracingInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Interceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Tracer tracer;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiTracingInterceptor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Tracer </span><span style="color:#E36209;">tracer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tracer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tracer;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Chain </span><span style="color:#E36209;">chain</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Builder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chain.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tracer.</span><span style="color:#6F42C1;">activeSpan</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tracer.</span><span style="color:#6F42C1;">inject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tracer.</span><span style="color:#6F42C1;">activeSpan</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">          Format.Builtin.HTTP_HEADERS,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InjectOnlyTextMap</span><span style="color:#24292E;">(builder));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> chain.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">(builder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InjectOnlyTextMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextMap</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Builder builder;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InjectOnlyTextMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Builder </span><span style="color:#E36209;">builder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builder;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Iterator&lt;Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Only context injection is supported&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.builder.</span><span style="color:#6F42C1;">addHeader</span><span style="color:#24292E;">(key, value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下一步我们需要修改 API 客户端使用的 OkHttpClient 对象来启用拦截器。在下面的代码中，updateHttpClient 方法用来获取到更新之后的 OkHttpClient 对象，除了添加 ApiTracingInterceptor 拦截器之外，还配置了 OkHttpClient 使用新的 Dispatcher 对象。该 Dispatcher 对象使用的是 TracedExecutorService 作为 ExecutorService 的实现。这样做的目的是确保在异步调用时，不会丢失跨度上下文，因为跨度上下文保存在 ThreadLocal 对象中。TracedExecutorService 实现来自 opentracing-concurrent 库。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(ServiceDestinationConfig.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApiServiceConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  ServiceDestinationConfig config;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PassengerApi </span><span style="color:#B392F0;">passengerApi</span><span style="color:#E1E4E8;">(Tracer </span><span style="color:#FFAB70;">tracer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    PassengerApi passengerApi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassengerApi</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    passengerApi.</span><span style="color:#B392F0;">getApiClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setHttpClient</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">updateHttpClient</span><span style="color:#E1E4E8;">(tracer,</span></span>
<span class="line"><span style="color:#E1E4E8;">            passengerApi.</span><span style="color:#B392F0;">getApiClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHttpClient</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    passengerApi.</span><span style="color:#B392F0;">getApiClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setBasePath</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.config.</span><span style="color:#B392F0;">getPassenger</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> passengerApi;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> AddressApi </span><span style="color:#B392F0;">addressApi</span><span style="color:#E1E4E8;">(Tracer </span><span style="color:#FFAB70;">tracer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    AddressApi addressApi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressApi</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    addressApi.</span><span style="color:#B392F0;">getApiClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setHttpClient</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">updateHttpClient</span><span style="color:#E1E4E8;">(tracer,</span></span>
<span class="line"><span style="color:#E1E4E8;">            addressApi.</span><span style="color:#B392F0;">getApiClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHttpClient</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    addressApi.</span><span style="color:#B392F0;">getApiClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setBasePath</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.config.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> addressApi;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> OkHttpClient </span><span style="color:#B392F0;">updateHttpClient</span><span style="color:#E1E4E8;">(Tracer </span><span style="color:#FFAB70;">tracer</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      OkHttpClient </span><span style="color:#FFAB70;">httpClient</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> httpClient.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">dispatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dispatcher</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TracedExecutorService</span><span style="color:#E1E4E8;">(httpClient.</span><span style="color:#B392F0;">dispatcher</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">executorService</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                tracer)))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">addInterceptor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApiTracingInterceptor</span><span style="color:#E1E4E8;">(tracer)).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(ServiceDestinationConfig.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiServiceConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  ServiceDestinationConfig config;</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PassengerApi </span><span style="color:#6F42C1;">passengerApi</span><span style="color:#24292E;">(Tracer </span><span style="color:#E36209;">tracer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    PassengerApi passengerApi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassengerApi</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    passengerApi.</span><span style="color:#6F42C1;">getApiClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setHttpClient</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">updateHttpClient</span><span style="color:#24292E;">(tracer,</span></span>
<span class="line"><span style="color:#24292E;">            passengerApi.</span><span style="color:#6F42C1;">getApiClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHttpClient</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    passengerApi.</span><span style="color:#6F42C1;">getApiClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setBasePath</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.config.</span><span style="color:#6F42C1;">getPassenger</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> passengerApi;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AddressApi </span><span style="color:#6F42C1;">addressApi</span><span style="color:#24292E;">(Tracer </span><span style="color:#E36209;">tracer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    AddressApi addressApi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressApi</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    addressApi.</span><span style="color:#6F42C1;">getApiClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setHttpClient</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">updateHttpClient</span><span style="color:#24292E;">(tracer,</span></span>
<span class="line"><span style="color:#24292E;">            addressApi.</span><span style="color:#6F42C1;">getApiClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHttpClient</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    addressApi.</span><span style="color:#6F42C1;">getApiClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setBasePath</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.config.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> addressApi;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OkHttpClient </span><span style="color:#6F42C1;">updateHttpClient</span><span style="color:#24292E;">(Tracer </span><span style="color:#E36209;">tracer</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      OkHttpClient </span><span style="color:#E36209;">httpClient</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> httpClient.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">dispatcher</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dispatcher</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TracedExecutorService</span><span style="color:#24292E;">(httpClient.</span><span style="color:#6F42C1;">dispatcher</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">executorService</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                tracer)))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">addInterceptor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiTracingInterceptor</span><span style="color:#24292E;">(tracer)).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>完成上述两步之后，整个痕迹就被串联起来，如下图所示。每个 GraphQL 查询请求只对应于一条痕迹。</p>`,12),u=p(`<p>下面介绍如何通过 OpenTracing API 来添加额外的跨度。在下面的代码中，getAddress 方法用来获取到乘客的详细地址信息。在实现中，首先从当前的 GraphQL 执行上下文中获取到 Tracer 对象，然后使用 Tracer 对象的 buildSpan 方法来创建名为 getAddress 的跨度，在创建时可以提供标签来作为附加数据。Tracer 对象的 activateSpan 方法把新创建的 Span 对象作为当前的活动跨度，这就意味着该 Span 对象会作为之后创建的 Span 对象的父跨度。由于获取地址信息是异步操作，我们在返回的 CompletableFuture 对象完成之后，通过 Span 对象的 finish 方法来结束跨度。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddress</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String id;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String addressId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture&lt;</span><span style="color:#F97583;">AddressVO</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      DataFetchingEnvironment </span><span style="color:#FFAB70;">environment</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    GraphQLServletContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> environment.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Tracer tracer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Tracer) context.</span><span style="color:#B392F0;">getHttpServletRequest</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getServletContext</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">getAttribute</span><span style="color:#E1E4E8;">(Tracer.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    Span span </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tracer.</span><span style="color:#B392F0;">buildSpan</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAddress&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">withTag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userAddressId&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">withTag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;addressId&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressId)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (Scope ignored </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tracer.</span><span style="color:#B392F0;">activateSpan</span><span style="color:#E1E4E8;">(span)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getDataLoaderRegistry</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              registry </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> registry.</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, AddressVO</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">getDataLoader</span><span style="color:#E1E4E8;">(USER_ADDRESS_DATA_LOADER)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  .</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressId))</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(CompletableFuture</span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">completedFuture</span><span style="color:#E1E4E8;">(AddressVO.</span><span style="color:#B392F0;">nullObject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressId)))</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">whenComplete</span><span style="color:#E1E4E8;">((addressVO, throwable) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> span.</span><span style="color:#B392F0;">finish</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddress</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String id;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String addressId;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture&lt;</span><span style="color:#D73A49;">AddressVO</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      DataFetchingEnvironment </span><span style="color:#E36209;">environment</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    GraphQLServletContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Tracer tracer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Tracer) context.</span><span style="color:#6F42C1;">getHttpServletRequest</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getServletContext</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(Tracer.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    Span span </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tracer.</span><span style="color:#6F42C1;">buildSpan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAddress&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">withTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userAddressId&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">withTag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;addressId&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressId)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (Scope ignored </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tracer.</span><span style="color:#6F42C1;">activateSpan</span><span style="color:#24292E;">(span)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getDataLoaderRegistry</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              registry </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> registry.</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, AddressVO</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">getDataLoader</span><span style="color:#24292E;">(USER_ADDRESS_DATA_LOADER)</span></span>
<span class="line"><span style="color:#24292E;">                  .</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressId))</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(CompletableFuture</span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">completedFuture</span><span style="color:#24292E;">(AddressVO.</span><span style="color:#6F42C1;">nullObject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressId)))</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">whenComplete</span><span style="color:#24292E;">((addressVO, throwable) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> span.</span><span style="color:#6F42C1;">finish</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下图展示了添加自定义的跨度之后的痕迹，从中可以看到对 getAddress 方法的调用。</p>`,3),g=l("h3",{id:"总结",tabindex:"-1"},[s("总结 "),l("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),h=l("p",null,"性能指标数据和服务追踪是微服务架构中两个很重要的功能，在开发和运维中都起着重要的作用。通过本课时的学习，你可以了解到如何使用 Istio 提供的 Prometheus 和 Grafana 组件来查看应用的性能指标，还可以了解到如何为应用添加分布式追踪的功能，包括在服务内部添加自定义的追踪信息。",-1);function C(A,b,v,_,B,T){const a=e("Image");return t(),r("div",null,[E,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/36/9F/CgqCHl8X4FqAUqD0AAIGlZTiMr0929.png"}),s(),y,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/36/9F/CgqCHl8X4ISACHhnAANIm5WxE3M425.png"}),s(),i,n(a,{alt:"5.png",src:"https://s0.lgstatic.com/i/image/M00/36/A9/Ciqc1F8X9WeASYVRAABoS7Kr6lk678.png"}),s(),d,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/36/94/Ciqc1F8X4KyAIYt5AAG66uhEe1w882.png"}),s(),F,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/36/94/Ciqc1F8X4RCAPkBkAAI2pgeGv9I243.png"}),s(),u,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/36/A0/CgqCHl8X4R6APFv-AAMEAMNViJw037.png"}),s(),g,h])}const D=o(c,[["render",C]]);export{m as __pageData,D as default};
