import{_ as l,j as e,o as t,g as r,k as o,h as n,s,Q as p}from"./chunks/framework.4e7d56ce.js";const P=JSON.parse('{"title":"基础配置类 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(6102) 48  配置中心设计与实现：集中化配置 and 本地化配置，我都要（下）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(6102) 48  配置中心设计与实现：集中化配置 and 本地化配置，我都要（下）.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(6102) 48  配置中心设计与实现：集中化配置 and 本地化配置，我都要（下）.md"},E=s("p",null,[n("在上一课时，我们详细分析了 Configuration 接口以及 DynamicConfiguration 接口的实现，"),s("strong",null,"其中 DynamicConfiguration 接口实现是动态配置中心的基础"),n("。那 Dubbo 中的动态配置中心是如何启动的呢？我们将在本课时详细介绍。")],-1),i=s("h3",{id:"基础配置类",tabindex:"-1"},[n("基础配置类 "),s("a",{class:"header-anchor",href:"#基础配置类","aria-label":'Permalink to "基础配置类"'},"​")],-1),y=s("p",null,"在 DubboBootstrap 初始化的过程中，会调用 ApplicationModel.initFrameworkExts() 方法初始化所有 FrameworkExt 接口实现，继承关系如下图所示：",-1),g=p(`<p>FrameworkExt 继承关系图</p><p>相关代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initFrameworkExts</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">FrameworkExt</span><span style="color:#E1E4E8;">&gt; exts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(FrameworkExt.class).</span><span style="color:#B392F0;">getSupportedExtensionInstances</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (FrameworkExt ext </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> exts) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ext.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initFrameworkExts</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">FrameworkExt</span><span style="color:#24292E;">&gt; exts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(FrameworkExt.class).</span><span style="color:#6F42C1;">getSupportedExtensionInstances</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (FrameworkExt ext </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> exts) {</span></span>
<span class="line"><span style="color:#24292E;">        ext.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>ConfigManager 用于管理当前 Dubbo 节点中全部 AbstractConfig 对象</strong>，其中就包括 ConfigCenterConfig 这个实现的对象，我们通过 XML、Annotation 或是 API 方式添加的配置中心的相关信息（例如，配置中心的地址、端口、协议等），会转换成 ConfigCenterConfig 对象。</p><p><strong>在 Environment 中维护了上一课时介绍的多个 Configuration 对象</strong>，具体含义如下。</p><ul><li><p>propertiesConfiguration（PropertiesConfiguration 类型）：全部 OrderedPropertiesProvider 实现提供的配置以及环境变量或是 -D 参数中指定配置文件的相关配置信息。</p></li><li><p>systemConfiguration（SystemConfiguration 类型）：-D 参数配置直接添加的配置信息。</p></li><li><p>environmentConfiguration（EnvironmentConfiguration 类型）：环境变量中直接添加的配置信息。</p></li><li><p>externalConfiguration、appExternalConfiguration（InmemoryConfiguration 类型）：使用 Spring 框架且将 include-spring-env 配置为 true 时，会自动从 Spring Environment 中读取配置。默认依次读取 key 为 dubbo.properties 和 application.dubbo.properties 到这里两个 InmemoryConfiguration 对象中。</p></li><li><p>globalConfiguration（CompositeConfiguration 类型）：用于组合上述各个配置来源。</p></li><li><p>dynamicConfiguration（CompositeDynamicConfiguration 类型）：用于组合当前全部的配置中心对应的 DynamicConfiguration。</p></li><li><p>configCenterFirst（boolean 类型）：用于标识配置中心的配置是否为最高优先级。</p></li></ul><p>在 Environment 的构造方法中会初始化上述 Configuration 对象，在 initialize() 方法中会将从 Spring Environment 中读取到的配置填充到 externalConfiguration 以及 appExternalConfiguration 中。相关的实现片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Environment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建上述Configuration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.propertiesConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PropertiesConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.systemConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SystemConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.environmentConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnvironmentConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.externalConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InmemoryConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.appExternalConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InmemoryConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">() throws IllegalStateException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取对应配置，填充上述Configuration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigManager configManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ApplicationModel.</span><span style="color:#B392F0;">getConfigManager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Optional&lt;Collection&lt;</span><span style="color:#F97583;">ConfigCenterConfig</span><span style="color:#E1E4E8;">&gt;&gt; defaultConfigs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configManager.</span><span style="color:#B392F0;">getDefaultConfigCenter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultConfigs.</span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">(configs </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ConfigCenterConfig config </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> configs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setExternalConfigMap</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getExternalConfiguration</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setAppExternalConfigMap</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getAppExternalConfiguration</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.externalConfiguration.</span><span style="color:#B392F0;">setProperties</span><span style="color:#E1E4E8;">(externalConfigurationMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.appExternalConfiguration.</span><span style="color:#B392F0;">setProperties</span><span style="color:#E1E4E8;">(appExternalConfigurationMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Environment</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建上述Configuration对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.propertiesConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropertiesConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.systemConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SystemConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.environmentConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnvironmentConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.externalConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InmemoryConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.appExternalConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InmemoryConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">() throws IllegalStateException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取对应配置，填充上述Configuration对象</span></span>
<span class="line"><span style="color:#24292E;">    ConfigManager configManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ApplicationModel.</span><span style="color:#6F42C1;">getConfigManager</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Optional&lt;Collection&lt;</span><span style="color:#D73A49;">ConfigCenterConfig</span><span style="color:#24292E;">&gt;&gt; defaultConfigs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configManager.</span><span style="color:#6F42C1;">getDefaultConfigCenter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    defaultConfigs.</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(configs </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ConfigCenterConfig config </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> configs) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setExternalConfigMap</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getExternalConfiguration</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setAppExternalConfigMap</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getAppExternalConfiguration</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.externalConfiguration.</span><span style="color:#6F42C1;">setProperties</span><span style="color:#24292E;">(externalConfigurationMap);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.appExternalConfiguration.</span><span style="color:#6F42C1;">setProperties</span><span style="color:#24292E;">(appExternalConfigurationMap);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="启动配置中心" tabindex="-1">启动配置中心 <a class="header-anchor" href="#启动配置中心" aria-label="Permalink to &quot;启动配置中心&quot;">​</a></h3><p>完成了 Environment 的初始化之后，DubboBootstrap 接下来会调用 startConfigCenter() 方法启动一个或多个配置中心客户端，核心操作有两个：一个是调用 ConfigCenterConfig.refresh() 方法<strong>刷新配置中心的相关配置</strong> ；另一个是通过 prepareEnvironment() 方法根据 ConfigCenterConfig 中的配置<strong>创建 DynamicConfiguration 对象</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startConfigCenter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">ConfigCenterConfig</span><span style="color:#E1E4E8;">&gt; configCenters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configManager.</span><span style="color:#B392F0;">getConfigCenters</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(configCenters)) { </span><span style="color:#6A737D;">// 未指定配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... ... </span><span style="color:#6A737D;">// 省略该部分逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ConfigCenterConfig configCenterConfig </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> configCenters) { </span><span style="color:#6A737D;">// 可能配置了多个配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">            configCenterConfig.</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 刷新配置</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 检查配置中心的配置是否合法           ConfigValidationUtils.validateConfigCenterConfig(configCenterConfig);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(configCenters)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建CompositeDynamicConfiguration对象，用于组装多个DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompositeDynamicConfiguration compositeDynamicConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompositeDynamicConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ConfigCenterConfig configCenter </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> configCenters) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 根据ConfigCenterConfig创建相应的DynamicConfig对象，并添加到CompositeDynamicConfiguration中</span></span>
<span class="line"><span style="color:#E1E4E8;">compositeDynamicConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">prepareEnvironment</span><span style="color:#E1E4E8;">(configCenter));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将CompositeDynamicConfiguration记录到Environment中的dynamicConfiguration字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        environment.</span><span style="color:#B392F0;">setDynamicConfiguration</span><span style="color:#E1E4E8;">(compositeDynamicConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    configManager.</span><span style="color:#B392F0;">refreshAll</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 刷新所有AbstractConfig配置</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startConfigCenter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">ConfigCenterConfig</span><span style="color:#24292E;">&gt; configCenters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configManager.</span><span style="color:#6F42C1;">getConfigCenters</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(configCenters)) { </span><span style="color:#6A737D;">// 未指定配置中心</span></span>
<span class="line"><span style="color:#24292E;">        ... ... </span><span style="color:#6A737D;">// 省略该部分逻辑</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ConfigCenterConfig configCenterConfig </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> configCenters) { </span><span style="color:#6A737D;">// 可能配置了多个配置中心</span></span>
<span class="line"><span style="color:#24292E;">            configCenterConfig.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 刷新配置</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 检查配置中心的配置是否合法           ConfigValidationUtils.validateConfigCenterConfig(configCenterConfig);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(configCenters)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建CompositeDynamicConfiguration对象，用于组装多个DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#24292E;">        CompositeDynamicConfiguration compositeDynamicConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompositeDynamicConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ConfigCenterConfig configCenter </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> configCenters) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 根据ConfigCenterConfig创建相应的DynamicConfig对象，并添加到CompositeDynamicConfiguration中</span></span>
<span class="line"><span style="color:#24292E;">compositeDynamicConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">prepareEnvironment</span><span style="color:#24292E;">(configCenter));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将CompositeDynamicConfiguration记录到Environment中的dynamicConfiguration字段</span></span>
<span class="line"><span style="color:#24292E;">        environment.</span><span style="color:#6F42C1;">setDynamicConfiguration</span><span style="color:#24292E;">(compositeDynamicConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    configManager.</span><span style="color:#6F42C1;">refreshAll</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 刷新所有AbstractConfig配置</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_1-刷新配置中心的配置" tabindex="-1">1. 刷新配置中心的配置 <a class="header-anchor" href="#_1-刷新配置中心的配置" aria-label="Permalink to &quot;1. 刷新配置中心的配置&quot;">​</a></h4><p>首先来看 ConfigCenterConfig.refresh() 方法，该方法会组合 Environment 对象中全部已初始化的 Configuration，然后遍历 ConfigCenterConfig 中全部字段的 setter 方法，并从 Environment 中获取对应字段的最终值。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Environment对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    Environment env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ApplicationModel.</span><span style="color:#B392F0;">getEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将当前已初始化的所有Configuration合并返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    CompositeConfiguration compositeConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> env.</span><span style="color:#B392F0;">getPrefixedConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">[] methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethods</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Method method </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> methods) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (MethodUtils.</span><span style="color:#B392F0;">isSetter</span><span style="color:#E1E4E8;">(method)) { </span><span style="color:#6A737D;">// 获取ConfigCenterConfig中各个字段的setter方法</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 根据配置中心的相关配置以及Environment中的各个Configuration，获取该字段的最终值</span></span>
<span class="line"><span style="color:#E1E4E8;">            String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">(compositeConfiguration.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">extractPropertyName</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), method)));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 调用setter方法更新ConfigCenterConfig的相应字段</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(value) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> ClassUtils.</span><span style="color:#B392F0;">isTypeMatch</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">()[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, ClassUtils.</span><span style="color:#B392F0;">convertPrimitive</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">()[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], value));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isParametersSetter</span><span style="color:#E1E4E8;">(method)) { </span><span style="color:#6A737D;">// 设置parameters字段，与设置其他字段的逻辑基本类似，但是实现有所不同</span></span>
<span class="line"><span style="color:#E1E4E8;">            String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">(compositeConfiguration.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">extractPropertyName</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), method)));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 获取当前已有的parameters字段</span></span>
<span class="line"><span style="color:#E1E4E8;">                Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invokeGetParameters</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> map;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 覆盖parameters集合 </span></span>
<span class="line"><span style="color:#E1E4E8;">                map.</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">convert</span><span style="color:#E1E4E8;">(StringUtils.</span><span style="color:#B392F0;">parseParameters</span><span style="color:#E1E4E8;">(value), </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 设置parameters字段</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">invokeSetParameters</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, map);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Environment对象</span></span>
<span class="line"><span style="color:#24292E;">    Environment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ApplicationModel.</span><span style="color:#6F42C1;">getEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将当前已初始化的所有Configuration合并返回</span></span>
<span class="line"><span style="color:#24292E;">    CompositeConfiguration compositeConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> env.</span><span style="color:#6F42C1;">getPrefixedConfiguration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Method method </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> methods) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (MethodUtils.</span><span style="color:#6F42C1;">isSetter</span><span style="color:#24292E;">(method)) { </span><span style="color:#6A737D;">// 获取ConfigCenterConfig中各个字段的setter方法</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 根据配置中心的相关配置以及Environment中的各个Configuration，获取该字段的最终值</span></span>
<span class="line"><span style="color:#24292E;">            String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">(compositeConfiguration.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">extractPropertyName</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), method)));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 调用setter方法更新ConfigCenterConfig的相应字段</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> ClassUtils.</span><span style="color:#6F42C1;">isTypeMatch</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], value)) {</span></span>
<span class="line"><span style="color:#24292E;">                method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, ClassUtils.</span><span style="color:#6F42C1;">convertPrimitive</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], value));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isParametersSetter</span><span style="color:#24292E;">(method)) { </span><span style="color:#6A737D;">// 设置parameters字段，与设置其他字段的逻辑基本类似，但是实现有所不同</span></span>
<span class="line"><span style="color:#24292E;">            String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">(compositeConfiguration.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">extractPropertyName</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), method)));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 获取当前已有的parameters字段</span></span>
<span class="line"><span style="color:#24292E;">                Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invokeGetParameters</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> map;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 覆盖parameters集合 </span></span>
<span class="line"><span style="color:#24292E;">                map.</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">convert</span><span style="color:#24292E;">(StringUtils.</span><span style="color:#6F42C1;">parseParameters</span><span style="color:#24292E;">(value), </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 设置parameters字段</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">invokeSetParameters</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, map);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们关注一下 Environment.getPrefixedConfiguration() 方法，该方法会将 Environment 中已有的 Configuration 对象以及当前的 ConfigCenterConfig 按照顺序合并，得到一个 CompositeConfiguration 对象，用于确定配置中心的最终配置信息。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> CompositeConfiguration </span><span style="color:#B392F0;">getPrefixedConfiguration</span><span style="color:#E1E4E8;">(AbstractConfig config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建CompositeConfiguration对象，这里的prefix和id是根据ConfigCenterConfig确定的</span></span>
<span class="line"><span style="color:#E1E4E8;">    CompositeConfiguration prefixedConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompositeConfiguration</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getPrefix</span><span style="color:#E1E4E8;">(), config.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将ConfigCenterConfig封装成ConfigConfigurationAdapter</span></span>
<span class="line"><span style="color:#E1E4E8;">    Configuration configuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigConfigurationAdapter</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isConfigCenterFirst</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 根据配置确定ConfigCenterConfig配置的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// The sequence would be: SystemConfiguration -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; AbstractConfig -&gt; PropertiesConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 按序组合已有Configuration对象以及ConfigCenterConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(systemConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(environmentConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(appExternalConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(externalConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(configuration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(propertiesConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 配置优先级如下：SystemConfiguration -&gt; AbstractConfig -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; PropertiesConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(systemConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(environmentConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(configuration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(appExternalConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(externalConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        prefixedConfiguration.</span><span style="color:#B392F0;">addConfiguration</span><span style="color:#E1E4E8;">(propertiesConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> prefixedConfiguration;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> CompositeConfiguration </span><span style="color:#6F42C1;">getPrefixedConfiguration</span><span style="color:#24292E;">(AbstractConfig config) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建CompositeConfiguration对象，这里的prefix和id是根据ConfigCenterConfig确定的</span></span>
<span class="line"><span style="color:#24292E;">    CompositeConfiguration prefixedConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompositeConfiguration</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getPrefix</span><span style="color:#24292E;">(), config.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将ConfigCenterConfig封装成ConfigConfigurationAdapter</span></span>
<span class="line"><span style="color:#24292E;">    Configuration configuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigConfigurationAdapter</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isConfigCenterFirst</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 根据配置确定ConfigCenterConfig配置的位置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// The sequence would be: SystemConfiguration -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; AbstractConfig -&gt; PropertiesConfiguration</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 按序组合已有Configuration对象以及ConfigCenterConfig</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(systemConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(environmentConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(appExternalConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(externalConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(configuration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(propertiesConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 配置优先级如下：SystemConfiguration -&gt; AbstractConfig -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; PropertiesConfiguration</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(systemConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(environmentConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(configuration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(appExternalConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(externalConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        prefixedConfiguration.</span><span style="color:#6F42C1;">addConfiguration</span><span style="color:#24292E;">(propertiesConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prefixedConfiguration;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-创建-dynamicconfiguration-对象" tabindex="-1">2. 创建 DynamicConfiguration 对象 <a class="header-anchor" href="#_2-创建-dynamicconfiguration-对象" aria-label="Permalink to &quot;2. 创建 DynamicConfiguration 对象&quot;">​</a></h4><p>通过 ConfigCenterConfig.refresh() 方法确定了所有配置中心的最终配置之后，接下来就会对每个配置中心执行 prepareEnvironment() 方法，得到对应的 DynamicConfiguration 对象。具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DynamicConfiguration </span><span style="color:#B392F0;">prepareEnvironment</span><span style="color:#E1E4E8;">(ConfigCenterConfig configCenter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (configCenter.</span><span style="color:#B392F0;">isValid</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 检查ConfigCenterConfig是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">configCenter.</span><span style="color:#B392F0;">checkOrUpdateInited</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 检查ConfigCenterConfig是否已初始化，这里不能重复初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据ConfigCenterConfig中的各个字段，拼接出配置中心的URL，创建对应的DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        DynamicConfiguration dynamicConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDynamicConfiguration</span><span style="color:#E1E4E8;">(configCenter.</span><span style="color:#B392F0;">toUrl</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从配置中心获取externalConfiguration和appExternalConfiguration，并进行覆盖</span></span>
<span class="line"><span style="color:#E1E4E8;">        String configContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dynamicConfiguration.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">(configCenter.</span><span style="color:#B392F0;">getConfigFile</span><span style="color:#E1E4E8;">(), configCenter.</span><span style="color:#B392F0;">getGroup</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        String appGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getApplication</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String appConfigContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(appGroup)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            appConfigContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dynamicConfiguration.getProperties</span></span>
<span class="line"><span style="color:#E1E4E8;">                    (</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(configCenter.</span><span style="color:#B392F0;">getAppConfigFile</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> configCenter.</span><span style="color:#B392F0;">getAppConfigFile</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> configCenter.</span><span style="color:#B392F0;">getConfigFile</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                            appGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">                    );</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 更新Environment</span></span>
<span class="line"><span style="color:#E1E4E8;">            environment.</span><span style="color:#B392F0;">setConfigCenterFirst</span><span style="color:#E1E4E8;">(configCenter.</span><span style="color:#B392F0;">isHighestPriority</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            environment.</span><span style="color:#B392F0;">updateExternalConfigurationMap</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseProperties</span><span style="color:#E1E4E8;">(configContent));</span></span>
<span class="line"><span style="color:#E1E4E8;">            environment.</span><span style="color:#B392F0;">updateAppExternalConfigurationMap</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseProperties</span><span style="color:#E1E4E8;">(appConfigContent));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to parse configurations from Config Center.&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dynamicConfiguration; </span><span style="color:#6A737D;">// 返回通过该ConfigCenterConfig创建的DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DynamicConfiguration </span><span style="color:#6F42C1;">prepareEnvironment</span><span style="color:#24292E;">(ConfigCenterConfig configCenter) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (configCenter.</span><span style="color:#6F42C1;">isValid</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 检查ConfigCenterConfig是否合法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">configCenter.</span><span style="color:#6F42C1;">checkOrUpdateInited</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 检查ConfigCenterConfig是否已初始化，这里不能重复初始化</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据ConfigCenterConfig中的各个字段，拼接出配置中心的URL，创建对应的DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#24292E;">        DynamicConfiguration dynamicConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDynamicConfiguration</span><span style="color:#24292E;">(configCenter.</span><span style="color:#6F42C1;">toUrl</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从配置中心获取externalConfiguration和appExternalConfiguration，并进行覆盖</span></span>
<span class="line"><span style="color:#24292E;">        String configContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dynamicConfiguration.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">(configCenter.</span><span style="color:#6F42C1;">getConfigFile</span><span style="color:#24292E;">(), configCenter.</span><span style="color:#6F42C1;">getGroup</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        String appGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getApplication</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String appConfigContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(appGroup)) {</span></span>
<span class="line"><span style="color:#24292E;">            appConfigContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dynamicConfiguration.getProperties</span></span>
<span class="line"><span style="color:#24292E;">                    (</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(configCenter.</span><span style="color:#6F42C1;">getAppConfigFile</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> configCenter.</span><span style="color:#6F42C1;">getAppConfigFile</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> configCenter.</span><span style="color:#6F42C1;">getConfigFile</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                            appGroup</span></span>
<span class="line"><span style="color:#24292E;">                    );</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 更新Environment</span></span>
<span class="line"><span style="color:#24292E;">            environment.</span><span style="color:#6F42C1;">setConfigCenterFirst</span><span style="color:#24292E;">(configCenter.</span><span style="color:#6F42C1;">isHighestPriority</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            environment.</span><span style="color:#6F42C1;">updateExternalConfigurationMap</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseProperties</span><span style="color:#24292E;">(configContent));</span></span>
<span class="line"><span style="color:#24292E;">            environment.</span><span style="color:#6F42C1;">updateAppExternalConfigurationMap</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseProperties</span><span style="color:#24292E;">(appConfigContent));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to parse configurations from Config Center.&quot;</span><span style="color:#24292E;">, e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dynamicConfiguration; </span><span style="color:#6A737D;">// 返回通过该ConfigCenterConfig创建的DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>完成 DynamicConfiguration 的创建之后，DubboBootstrap 会将多个配置中心对应的 DynamicConfiguration 对象封装成一个 CompositeDynamicConfiguration 对象，并记录到 Environment.dynamicConfiguration 字段中，等待后续使用。另外，还会调用全部 AbstractConfig 的 refresh() 方法（即根据最新的配置更新各个 AbstractConfig 对象的字段）。这些逻辑都在 DubboBootstrap.startConfigCenter() 方法中，前面已经展示过了，这里不再重复。</p><h3 id="配置中心初始化的后续流程" tabindex="-1">配置中心初始化的后续流程 <a class="header-anchor" href="#配置中心初始化的后续流程" aria-label="Permalink to &quot;配置中心初始化的后续流程&quot;">​</a></h3><p>完成明确指定的配置中心初始化之后，DubboBootstrap 接下来会执行 useRegistryAsConfigCenterIfNecessary() 方法，检测当前 Dubbo 是否要将注册中心也作为一个配置中心使用（常见的注册中心，都可以直接作为配置中心使用，这样可以降低运维成本）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRegistryAsConfigCenterIfNecessary</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (environment.</span><span style="color:#B392F0;">getDynamicConfiguration</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 如果当前配置中心已经初始化完成，则不会将注册中心作为配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(configManager.</span><span style="color:#B392F0;">getConfigCenters</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 明确指定了配置中心的配置，哪怕配置中心初始化失败，也不会将注册中心作为配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从ConfigManager中获取注册中心的配置（即RegistryConfig），并转换成配置中心的配置（即ConfigCenterConfig）</span></span>
<span class="line"><span style="color:#E1E4E8;">    configManager.</span><span style="color:#B392F0;">getDefaultRegistries</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(registryConfig </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> registryConfig.</span><span style="color:#B392F0;">getUseAsConfigCenter</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> registryConfig.</span><span style="color:#B392F0;">getUseAsConfigCenter</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(registryConfig </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                String protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registryConfig.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;config-center-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> protocol </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> registryConfig.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                ConfigCenterConfig cc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigCenterConfig</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cc.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    cc.</span><span style="color:#B392F0;">setParameters</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (registryConfig.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    cc.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(registryConfig.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CLIENT_KEY, registryConfig.</span><span style="color:#B392F0;">getClient</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">setProtocol</span><span style="color:#E1E4E8;">(registryConfig.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(registryConfig.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">setAddress</span><span style="color:#E1E4E8;">(registryConfig.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">setNamespace</span><span style="color:#E1E4E8;">(registryConfig.</span><span style="color:#B392F0;">getGroup</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(registryConfig.</span><span style="color:#B392F0;">getUsername</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(registryConfig.</span><span style="color:#B392F0;">getPassword</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (registryConfig.</span><span style="color:#B392F0;">getTimeout</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    cc.</span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(registryConfig.</span><span style="color:#B392F0;">getTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">longValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                cc.</span><span style="color:#B392F0;">setHighestPriority</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 这里优先级较低</span></span>
<span class="line"><span style="color:#E1E4E8;">                configManager.</span><span style="color:#B392F0;">addConfigCenter</span><span style="color:#E1E4E8;">(cc);</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">startConfigCenter</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 重新调用startConfigCenter()方法，初始化配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRegistryAsConfigCenterIfNecessary</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (environment.</span><span style="color:#6F42C1;">getDynamicConfiguration</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 如果当前配置中心已经初始化完成，则不会将注册中心作为配置中心</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(configManager.</span><span style="color:#6F42C1;">getConfigCenters</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 明确指定了配置中心的配置，哪怕配置中心初始化失败，也不会将注册中心作为配置中心</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从ConfigManager中获取注册中心的配置（即RegistryConfig），并转换成配置中心的配置（即ConfigCenterConfig）</span></span>
<span class="line"><span style="color:#24292E;">    configManager.</span><span style="color:#6F42C1;">getDefaultRegistries</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(registryConfig </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> registryConfig.</span><span style="color:#6F42C1;">getUseAsConfigCenter</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> registryConfig.</span><span style="color:#6F42C1;">getUseAsConfigCenter</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(registryConfig </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                String protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registryConfig.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;config-center-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> protocol </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> registryConfig.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                ConfigCenterConfig cc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigCenterConfig</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cc.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    cc.</span><span style="color:#6F42C1;">setParameters</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (registryConfig.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    cc.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(registryConfig.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CLIENT_KEY, registryConfig.</span><span style="color:#6F42C1;">getClient</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">setProtocol</span><span style="color:#24292E;">(registryConfig.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(registryConfig.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">setAddress</span><span style="color:#24292E;">(registryConfig.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">setNamespace</span><span style="color:#24292E;">(registryConfig.</span><span style="color:#6F42C1;">getGroup</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(registryConfig.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(registryConfig.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (registryConfig.</span><span style="color:#6F42C1;">getTimeout</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    cc.</span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(registryConfig.</span><span style="color:#6F42C1;">getTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">longValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                cc.</span><span style="color:#6F42C1;">setHighestPriority</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 这里优先级较低</span></span>
<span class="line"><span style="color:#24292E;">                configManager.</span><span style="color:#6F42C1;">addConfigCenter</span><span style="color:#24292E;">(cc);</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">startConfigCenter</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 重新调用startConfigCenter()方法，初始化配置中心</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>完成配置中心的初始化之后，后续需要 DynamicConfiguration 的地方直接从 Environment 中获取即可，例如，DynamicConfigurationServiceNameMapping 就是依赖 DynamicConfiguration 实现 Service ID 与 Service Name 映射的管理。</p><p>接下来，DubboBootstrap 执行 loadRemoteConfigs() 方法，根据前文更新后的 externalConfigurationMap 和 appExternalConfigurationMap 配置信息，确定是否配置了额外的注册中心或 Protocol，如果有，则在此处转换成 RegistryConfig 和 ProtocolConfig，并记录到 ConfigManager 中，等待后续逻辑使用。</p><p>随后，DubboBootstrap 执行 checkGlobalConfigs() 方法完成 ProviderConfig、ConsumerConfig、MetadataReportConfig 等一系列 AbstractConfig 的检查和初始化，具体实现比较简单，这里就不再展示。</p><p>再紧接着，DubboBootstrap 会通过 initMetadataService() 方法初始化 MetadataReport、MetadataReportInstance 以及 MetadataService、MetadataServiceExporter，这些元数据相关的组件在前面的课时中已经深入分析过了，这里的初始化过程并不复杂，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>在 DubboBootstrap 初始化的最后，会调用 initEventListener() 方法将 DubboBootstrap 作为 EventListener 监听器添加到 EventDispatcher 中。DubboBootstrap 继承了 GenericEventListener 抽象类，如下图所示：</p>`,28),C=p(`<p>EventListener 继承关系图</p><p><strong>GenericEventListener 是一个泛型监听器，它可以让子类监听任意关心的 Event 事件，只需定义相关的 onEvent() 方法即可</strong>。在 GenericEventListener 中维护了一个 handleEventMethods 集合，其中 Key 是 Event 的子类，即监听器关心的事件，Value 是处理该类型 Event 的相应 onEvent() 方法。</p><p>在 GenericEventListener 的构造方法中，通过反射将当前 GenericEventListener 实现的全部 onEvent() 方法都查找出来，并记录到 handleEventMethods 字段中。具体查找逻辑在 findHandleEventMethods() 方法中实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">, Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Method</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findHandleEventMethods</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, Set&lt;</span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">&gt;&gt; eventMethods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethods</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 遍历当前GenericEventListener子类的全部方法</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 过滤得到onEvent()方法，具体过滤条件在isHandleEventMethod()方法之中：</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 1.方法必须是public的</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 2.方法参数列表只有一个参数，且该参数为Event子类</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 3.方法返回值为void，且没有声明抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">isHandleEventMethod) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(method </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; paramType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">()[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                Set&lt;</span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">&gt; methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eventMethods.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(paramType, key </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashSet&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">                methods.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(method);</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> eventMethods;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">, Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Method</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findHandleEventMethods</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, Set&lt;</span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">&gt;&gt; eventMethods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 遍历当前GenericEventListener子类的全部方法</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 过滤得到onEvent()方法，具体过滤条件在isHandleEventMethod()方法之中：</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 1.方法必须是public的</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 2.方法参数列表只有一个参数，且该参数为Event子类</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3.方法返回值为void，且没有声明抛出异常</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">isHandleEventMethod) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(method </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; paramType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                Set&lt;</span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">&gt; methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eventMethods.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(paramType, key </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashSet&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">                methods.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(method);</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> eventMethods;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 GenericEventListener 的 onEvent() 方法中，会根据收到的 Event 事件的具体类型，从 handleEventMethods 集合中找到相应的 onEvent() 方法进行调用，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onEvent</span><span style="color:#E1E4E8;">(Event event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取Event的实际类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; eventClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据Event的类型获取对应的onEvent()方法并调用</span></span>
<span class="line"><span style="color:#E1E4E8;">    handleEventMethods.</span><span style="color:#B392F0;">getOrDefault</span><span style="color:#E1E4E8;">(eventClass,  </span><span style="color:#B392F0;">emptySet</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(method </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ThrowableConsumer.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(method, m </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            m.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, event);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onEvent</span><span style="color:#24292E;">(Event event) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取Event的实际类型</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; eventClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据Event的类型获取对应的onEvent()方法并调用</span></span>
<span class="line"><span style="color:#24292E;">    handleEventMethods.</span><span style="color:#6F42C1;">getOrDefault</span><span style="color:#24292E;">(eventClass,  </span><span style="color:#6F42C1;">emptySet</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(method </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ThrowableConsumer.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(method, m </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            m.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, event);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以查看 DubboBootstrap 的所有方法，目前并没有发现符合 isHandleEventMethod() 条件的方法。但在 GenericEventListener 的另一个实现------ LoggingEventListener 中，可以看到多个符合 isHandleEventMethod() 条件的方法（如下图所示），在这些 onEvent() 方法重载中会输出 INFO 日志。</p>`,7),f=s("p",null,"LoggingEventListener 中 onEvent 方法重载",-1),F=s("p",null,"至此，DubboBootstrap 整个初始化过程，以及该过程中与配置中心相关的逻辑就介绍完了。",-1),u=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),d=s("p",null,"本课时我们重点介绍了 Dubbo 动态配置中心启动的核心流程，以及该流程涉及的重要组件类。",-1),m=s("p",null,"首先，我们介绍了 ConfigManager 和 Environment 这两个非常基础的配置类；然后又讲解了 DubboBootstrap 初始化动态配置中心的核心流程，以及动态配置中心启动的流程；最后，还分析了 GenericEventListener 监听器的相关内容。",-1),D=s("p",null,"关于这部分的内容，如果你有什么问题或者好的经验，欢迎你在留言区和我分享。",-1);function A(h,v,B,x,b,_){const a=e("Image");return t(),r("div",null,[E,i,y,o(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image2/M01/04/E5/Cip5yF_3wFOADgbQAAExvdg5FgU982.png"}),n(),g,o(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8C/BD/CgqCHl_z0G2AfVK7AABzPAVnhNE632.png"}),n(),C,o(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/8C/BD/CgqCHl_z0HeARRBdAAF6NMV2xrI252.png"}),n(),f,F,u,d,m,D])}const S=l(c,[["render",A]]);export{P as __pageData,S as default};
