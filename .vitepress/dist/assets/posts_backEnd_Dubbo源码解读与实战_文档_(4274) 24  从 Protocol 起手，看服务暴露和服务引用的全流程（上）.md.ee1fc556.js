import{_ as o,j as e,o as t,g as r,k as l,h as n,s,Q as p}from"./chunks/framework.4e7d56ce.js";const K=JSON.parse('{"title":"export 流程简析 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4274) 24  从 Protocol 起手，看服务暴露和服务引用的全流程（上）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4274) 24  从 Protocol 起手，看服务暴露和服务引用的全流程（上）.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4274) 24  从 Protocol 起手，看服务暴露和服务引用的全流程（上）.md"},E=s("p",null,"在上一课时我们讲解了 Protocol 的核心接口，那本课时我们就以 Protocol 接口为核心，详细介绍整个 Protocol 的核心实现。下图展示了 Protocol 接口的继承关系：",-1),y=s("p",null,"Protocol 接口继承关系图",-1),i=s("p",null,[n("其中，"),s("strong",null,"AbstractProtocol"),n("提供了一些 Protocol 实现需要的公共能力以及公共字段，它的核心字段有如下三个。")],-1),d=s("ul",null,[s("li",null,"exporterMap（Map<String, Exporter<?>>类型）：用于存储出去的服务集合，其中的 Key 通过 ProtocolUtils.serviceKey() 方法创建的服务标识，在 ProtocolUtils 中维护了多层的 Map 结构（如下图所示）。首先按照 group 分组，在实践中我们可以根据需求设置 group，例如，按照机房、地域等进行 group 划分，做到就近调用；在 GroupServiceKeyCache 中，依次按照 serviceName、serviceVersion、port 进行分类，最终缓存的 serviceKey 是前面三者拼接而成的。")],-1),D=p(`<p>groupServiceKeyCacheMap 结构图</p><ul><li><p>serverMap（Map&lt;String, ProtocolServer&gt;类型）：记录了全部的 ProtocolServer 实例，其中的 Key 是 host 和 port 组成的字符串，Value 是监听该地址的 ProtocolServer。ProtocolServer 就是对 RemotingServer 的一层简单封装，表示一个服务端。</p></li><li><p>invokers（Set&lt;Invoker&lt;?&gt;&gt;类型）：服务引用的集合。</p></li></ul><p>AbstractProtocol 没有对 Protocol 的 export() 方法进行实现，对 refer() 方法的实现也是委托给了 protocolBindingRefer() 这个抽象方法，然后由子类实现。AbstractProtocol 唯一实现的方法就是 destory() 方法，其首先会遍历 Invokers 集合，销毁全部的服务引用，然后遍历全部的 exporterMap 集合，销毁发布出去的服务，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Invoker&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; invoker </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (invoker </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            invokers.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(invoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">            invoker.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 关闭全部的服务引用</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String key </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;(exporterMap.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Exporter&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; exporter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exporterMap.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (exporter </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            exporter.</span><span style="color:#B392F0;">unexport</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 关闭暴露出去的服务</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Invoker&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; invoker </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokers) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (invoker </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            invokers.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(invoker);</span></span>
<span class="line"><span style="color:#24292E;">            invoker.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 关闭全部的服务引用</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(exporterMap.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        Exporter&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; exporter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exporterMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (exporter </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            exporter.</span><span style="color:#6F42C1;">unexport</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 关闭暴露出去的服务</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="export-流程简析" tabindex="-1">export 流程简析 <a class="header-anchor" href="#export-流程简析" aria-label="Permalink to &quot;export 流程简析&quot;">​</a></h3><p>了解了 AbstractProtocol 提供的公共能力之后，我们再来分析<strong>Dubbo 默认使用的 Protocol 实现类------ DubboProtocol 实现</strong>。这里我们首先关注 DubboProtocol 的 export() 方法，也就是服务发布的相关实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Exporter</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> invoker) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建ServiceKey，其核心实现在前文已经详细分析过了，这里不再重复</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serviceKey</span><span style="color:#E1E4E8;">(url); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将上层传入的Invoker对象封装成DubboExporter对象，然后记录到exporterMap集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">    DubboExporter&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; exporter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> DubboExporter&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;(invoker, key, exporterMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">    exporterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, exporter);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略一些日志操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 启动ProtocolServer</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">openServer</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 进行序列化的优化处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">optimizeSerialization</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exporter;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Exporter</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> invoker) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建ServiceKey，其核心实现在前文已经详细分析过了，这里不再重复</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serviceKey</span><span style="color:#24292E;">(url); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将上层传入的Invoker对象封装成DubboExporter对象，然后记录到exporterMap集合中</span></span>
<span class="line"><span style="color:#24292E;">    DubboExporter&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; exporter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> DubboExporter&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;(invoker, key, exporterMap);</span></span>
<span class="line"><span style="color:#24292E;">    exporterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, exporter);</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略一些日志操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 启动ProtocolServer</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">openServer</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 进行序列化的优化处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">optimizeSerialization</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exporter;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_1-dubboexporter" tabindex="-1">1. DubboExporter <a class="header-anchor" href="#_1-dubboexporter" aria-label="Permalink to &quot;1. DubboExporter&quot;">​</a></h4><p>这里涉及的第一个点是 DubboExporter 对 Invoker 的封装，DubboExporter 的继承关系如下图所示：</p>`,9),F=s("p",null,"DubboExporter 继承关系图",-1),u=s("p",null,"AbstractExporter 中维护了一个 Invoker 对象，以及一个 unexported 字段（boolean 类型），在 unexport() 方法中会设置 unexported 字段为 true，并调用 Invoker 对象的 destory() 方法进行销毁。",-1),A=s("p",null,"DubboExporter 也比较简单，其中会维护底层 Invoker 对应的 ServiceKey 以及 DubboProtocol 中的 exportMap 集合，在其 unexport() 方法中除了会调用父类 AbstractExporter 的 unexport() 方法之外，还会清理该 DubboExporter 实例在 exportMap 中相应的元素。",-1),v=s("h4",{id:"_2-服务端初始化",tabindex:"-1"},[n("2. 服务端初始化 "),s("a",{class:"header-anchor",href:"#_2-服务端初始化","aria-label":'Permalink to "2. 服务端初始化"'},"​")],-1),g=s("p",null,"了解了 Exporter 实现之后，我们继续看 DubboProtocol 中服务发布的流程。从下面这张调用关系图中可以看出，openServer() 方法会一路调用前面介绍的 Exchange 层、Transport 层，并最终创建 NettyServer 来接收客户端的请求。",-1),b=p(`<p>export() 方法调用栈</p><p>下面我们将逐个介绍 export() 方法栈中的每个被调用的方法。</p><p>首先，在 openServer() 方法中会根据 URL 判断当前是否为服务端，只有服务端才能创建 ProtocolServer 并对外服务。如果是来自服务端的调用，会依靠 serverMap 集合检查是否已有 ProtocolServer 在监听 URL 指定的地址；如果没有，会调用 createServer() 方法进行创建。openServer() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">openServer</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取host:port这个地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isServer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(IS_SERVER_KEY, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isServer) { </span><span style="color:#6A737D;">// 只有Server端才能启动Server对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        ProtocolServer server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serverMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (server </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 无ProtocolServer监听该地址</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// DoubleCheck，防止并发问题</span></span>
<span class="line"><span style="color:#E1E4E8;">                server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serverMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (server </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 调用createServer()方法创建ProtocolServer对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                    serverMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, </span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(url));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果已有ProtocolServer实例，则尝试根据URL信息重置ProtocolServer</span></span>
<span class="line"><span style="color:#E1E4E8;">            server.</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">openServer</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取host:port这个地址</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isServer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(IS_SERVER_KEY, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isServer) { </span><span style="color:#6A737D;">// 只有Server端才能启动Server对象</span></span>
<span class="line"><span style="color:#24292E;">        ProtocolServer server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (server </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 无ProtocolServer监听该地址</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// DoubleCheck，防止并发问题</span></span>
<span class="line"><span style="color:#24292E;">                server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (server </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 调用createServer()方法创建ProtocolServer对象</span></span>
<span class="line"><span style="color:#24292E;">                    serverMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, </span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(url));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果已有ProtocolServer实例，则尝试根据URL信息重置ProtocolServer</span></span>
<span class="line"><span style="color:#24292E;">            server.</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>createServer() 方法首先会为 URL 添加一些默认值，同时会进行一些参数值的检测，主要有五个。</p><ul><li><p>HEARTBEAT_KEY 参数值，默认值为 60000，表示默认的心跳时间间隔为 60 秒。</p></li><li><p>CHANNEL_READONLYEVENT_SENT_KEY 参数值，默认值为 true，表示 ReadOnly 请求需要阻塞等待响应返回。在 Server 关闭的时候，只能发送 ReadOnly 请求，这些 ReadOnly 请求由这里设置的 CHANNEL_READONLYEVENT_SENT_KEY 参数值决定是否需要等待响应返回。</p></li><li><p>CODEC_KEY 参数值，默认值为 dubbo。你可以回顾 Codec2 接口中 @Adaptive 注解的参数，都是获取该 URL 中的 CODEC_KEY 参数值。</p></li><li><p>检测 SERVER_KEY 参数指定的扩展实现名称是否合法，默认值为 netty。你可以回顾 Transporter 接口中 @Adaptive 注解的参数，它决定了 Transport 层使用的网络库实现，默认使用 Netty 4 实现。</p></li><li><p>检测 CLIENT_KEY 参数指定的扩展实现名称是否合法。同 SERVER_KEY 参数的检查流程。</p></li></ul><p>完成上述默认参数值的设置之后，我们就可以通过 Exchangers 门面类创建 ExchangeServer，并封装成 DubboProtocolServer 返回。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ProtocolServer </span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URLBuilder.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(url)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ReadOnly请求是否阻塞等待</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addParameterIfAbsent</span><span style="color:#E1E4E8;">(CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 心跳间隔</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addParameterIfAbsent</span><span style="color:#E1E4E8;">(HEARTBEAT_KEY, String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(DEFAULT_HEARTBEAT))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(CODEC_KEY, DubboCodec.NAME) </span><span style="color:#6A737D;">// Codec2扩展实现</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测SERVER_KEY参数指定的Transporter扩展实现是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">    String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SERVER_KEY, DEFAULT_REMOTING_SERVER); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (str </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Transporter.class).</span><span style="color:#B392F0;">hasExtension</span><span style="color:#E1E4E8;">(str)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过Exchangers门面类，创建ExchangeServer对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExchangeServer server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Exchangers.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(url, requestHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 检测CLIENT_KEY参数指定的Transporter扩展实现是否合法(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将ExchangeServer封装成DubboProtocolServer返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DubboProtocolServer</span><span style="color:#E1E4E8;">(server);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ProtocolServer </span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> URLBuilder.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(url)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ReadOnly请求是否阻塞等待</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addParameterIfAbsent</span><span style="color:#24292E;">(CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 心跳间隔</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addParameterIfAbsent</span><span style="color:#24292E;">(HEARTBEAT_KEY, String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(DEFAULT_HEARTBEAT))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(CODEC_KEY, DubboCodec.NAME) </span><span style="color:#6A737D;">// Codec2扩展实现</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测SERVER_KEY参数指定的Transporter扩展实现是否合法</span></span>
<span class="line"><span style="color:#24292E;">    String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SERVER_KEY, DEFAULT_REMOTING_SERVER); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (str </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Transporter.class).</span><span style="color:#6F42C1;">hasExtension</span><span style="color:#24292E;">(str)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过Exchangers门面类，创建ExchangeServer对象</span></span>
<span class="line"><span style="color:#24292E;">    ExchangeServer server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Exchangers.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(url, requestHandler);</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 检测CLIENT_KEY参数指定的Transporter扩展实现是否合法(略)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将ExchangeServer封装成DubboProtocolServer返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DubboProtocolServer</span><span style="color:#24292E;">(server);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 createServer() 方法中还有几个细节需要展开分析一下。第一个是创建 ExchangeServer 时，使用的 Codec2 接口实现实际上是 DubboCountCodec，对应的 SPI 配置文件如下：</p>`,9),C=p(`<p>Codec2 SPI 配置文件</p><p>DubboCountCodec 中维护了一个 DubboCodec 对象，编解码的能力都是 DubboCodec 提供的，DubboCountCodec 只负责在解码过程中 ChannelBuffer 的 readerIndex 指针控制，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(Channel channel, ChannelBuffer buffer) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> save </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buffer.</span><span style="color:#B392F0;">readerIndex</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 首先保存readerIndex指针位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建MultiMessage对象，其中可以存储多条消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    MultiMessage result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MultiMessage.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过DubboCodec提供的解码能力解码一条消息</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> codec.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(channel, buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果可读字节数不足一条消息，则会重置readerIndex指针</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Codec2.DecodeResult.NEED_MORE_INPUT </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            buffer.</span><span style="color:#B392F0;">readerIndex</span><span style="color:#E1E4E8;">(save);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 将成功解码的消息添加到MultiMessage中暂存</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">addMessage</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">logMessageLength</span><span style="color:#E1E4E8;">(obj, buffer.</span><span style="color:#B392F0;">readerIndex</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> save);</span></span>
<span class="line"><span style="color:#E1E4E8;">            save </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buffer.</span><span style="color:#B392F0;">readerIndex</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 一条消息也未解码出来，则返回NEED_MORE_INPUT错误码</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Codec2.DecodeResult.NEED_MORE_INPUT;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 只解码出来一条消息，则直接返回该条消息</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解码出多条消息的话，会将MultiMessage返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(Channel channel, ChannelBuffer buffer) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> save </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buffer.</span><span style="color:#6F42C1;">readerIndex</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 首先保存readerIndex指针位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建MultiMessage对象，其中可以存储多条消息</span></span>
<span class="line"><span style="color:#24292E;">    MultiMessage result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MultiMessage.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过DubboCodec提供的解码能力解码一条消息</span></span>
<span class="line"><span style="color:#24292E;">        Object obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> codec.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(channel, buffer);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果可读字节数不足一条消息，则会重置readerIndex指针</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Codec2.DecodeResult.NEED_MORE_INPUT </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#24292E;">            buffer.</span><span style="color:#6F42C1;">readerIndex</span><span style="color:#24292E;">(save);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 将成功解码的消息添加到MultiMessage中暂存</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">addMessage</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">logMessageLength</span><span style="color:#24292E;">(obj, buffer.</span><span style="color:#6F42C1;">readerIndex</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> save);</span></span>
<span class="line"><span style="color:#24292E;">            save </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buffer.</span><span style="color:#6F42C1;">readerIndex</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 一条消息也未解码出来，则返回NEED_MORE_INPUT错误码</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Codec2.DecodeResult.NEED_MORE_INPUT;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 只解码出来一条消息，则直接返回该条消息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解码出多条消息的话，会将MultiMessage返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>DubboCountCodec、DubboCodec 都实现了第 22 课时介绍的 Codec2 接口，其中 DubboCodec 是 ExchangeCodec 的子类。</p>`,4),h=p(`<p>DubboCountCodec 及 DubboCodec 继承关系图</p><p>我们知道 ExchangeCodec 只处理了 Dubbo 协议的请求头，而 DubboCodec 则是通过继承的方式，在 ExchangeCodec 基础之上，添加了解析 Dubbo 消息体的功能。在第 22 课时介绍 ExchangeCodec 实现的时候，我们重点分析了 encodeRequest() 方法，即 Request 请求的编码实现，其中会调用 encodeRequestData() 方法完成请求体的编码。</p><p>DubboCodec 中就覆盖了 encodeRequestData() 方法，按照 Dubbo 协议的格式编码 Request 请求体，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeRequestData</span><span style="color:#E1E4E8;">(Channel channel, ObjectOutput out, Object data, String version) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请求体相关的内容，都封装在了RpcInvocation</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcInvocation inv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (RpcInvocation) data; </span></span>
<span class="line"><span style="color:#E1E4E8;">    out.</span><span style="color:#B392F0;">writeUTF</span><span style="color:#E1E4E8;">(version); </span><span style="color:#6A737D;">// 写入版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inv.</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(INTERFACE_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (serviceName </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inv.</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(PATH_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 写入服务名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    out.</span><span style="color:#B392F0;">writeUTF</span><span style="color:#E1E4E8;">(serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 写入Service版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">    out.</span><span style="color:#B392F0;">writeUTF</span><span style="color:#E1E4E8;">(inv.</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(VERSION_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 写入方法名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    out.</span><span style="color:#B392F0;">writeUTF</span><span style="color:#E1E4E8;">(inv.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 写入参数类型列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    out.</span><span style="color:#B392F0;">writeUTF</span><span style="color:#E1E4E8;">(inv.</span><span style="color:#B392F0;">getParameterTypesDesc</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 依次写入全部参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inv.</span><span style="color:#B392F0;">getArguments</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> args.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            out.</span><span style="color:#B392F0;">writeObject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">encodeInvocationArgument</span><span style="color:#E1E4E8;">(channel, inv, i));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 依次写入全部的附加信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    out.</span><span style="color:#B392F0;">writeAttachments</span><span style="color:#E1E4E8;">(inv.</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeRequestData</span><span style="color:#24292E;">(Channel channel, ObjectOutput out, Object data, String version) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请求体相关的内容，都封装在了RpcInvocation</span></span>
<span class="line"><span style="color:#24292E;">    RpcInvocation inv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (RpcInvocation) data; </span></span>
<span class="line"><span style="color:#24292E;">    out.</span><span style="color:#6F42C1;">writeUTF</span><span style="color:#24292E;">(version); </span><span style="color:#6A737D;">// 写入版本号</span></span>
<span class="line"><span style="color:#24292E;">    String serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inv.</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(INTERFACE_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (serviceName </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inv.</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(PATH_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写入服务名称</span></span>
<span class="line"><span style="color:#24292E;">    out.</span><span style="color:#6F42C1;">writeUTF</span><span style="color:#24292E;">(serviceName);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写入Service版本号</span></span>
<span class="line"><span style="color:#24292E;">    out.</span><span style="color:#6F42C1;">writeUTF</span><span style="color:#24292E;">(inv.</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(VERSION_KEY));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写入方法名称</span></span>
<span class="line"><span style="color:#24292E;">    out.</span><span style="color:#6F42C1;">writeUTF</span><span style="color:#24292E;">(inv.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写入参数类型列表</span></span>
<span class="line"><span style="color:#24292E;">    out.</span><span style="color:#6F42C1;">writeUTF</span><span style="color:#24292E;">(inv.</span><span style="color:#6F42C1;">getParameterTypesDesc</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 依次写入全部参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inv.</span><span style="color:#6F42C1;">getArguments</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> args.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            out.</span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">encodeInvocationArgument</span><span style="color:#24292E;">(channel, inv, i));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 依次写入全部的附加信息</span></span>
<span class="line"><span style="color:#24292E;">    out.</span><span style="color:#6F42C1;">writeAttachments</span><span style="color:#24292E;">(inv.</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>RpcInvocation 实现了上一课时介绍的 Invocation 接口，如下图所示：</p>`,5),_=p("<p>RpcInvocation 继承关系图</p><p>下面是 RpcInvocation 中的核心字段，通过读写这些字段即可实现 Invocation 接口的全部方法。</p><ul><li><p>targetServiceUniqueName（String类型）：要调用的唯一服务名称，其实就是 ServiceKey，即 interface/group:version 三部分构成的字符串。</p></li><li><p>methodName（String类型）：调用的目标方法名称。</p></li><li><p>serviceName（String类型）：调用的目标服务名称，示例中就是org.apache.dubbo.demo.DemoService。</p></li><li><p>parameterTypes（Class&lt;?&gt;[]类型）：记录了目标方法的全部参数类型。</p></li><li><p>parameterTypesDesc（String类型）：参数列表签名。</p></li><li><p>arguments（Object[]类型）：具体参数值。</p></li><li><p>attachments（Map&lt;String, Object&gt;类型）：此次调用的附加信息，可以被序列化到请求中。</p></li><li><p>attributes（Map&lt;Object, Object&gt;类型）：此次调用的属性信息，这些信息不能被发送出去。</p></li><li><p>invoker（Invoker&lt;?&gt;类型）：此次调用关联的 Invoker 对象。</p></li><li><p>returnType（Class&lt;?&gt;类型）：返回值的类型。</p></li><li><p>invokeMode（InvokeMode类型）：此次调用的模式，分为 SYNC、ASYNC 和 FUTURE 三类。</p></li></ul><p>我们在上面的继承图中看到 RpcInvocation 的一个子类------ DecodeableRpcInvocation，它是用来支持解码的，其实现的 decode() 方法正好是 DubboCodec.encodeRequestData() 方法对应的解码操作，在 DubboCodec.decodeBody() 方法中就调用了这个方法，调用关系如下图所示：</p>",4),S=p(`<p>decode() 方法调用栈</p><p>这个解码过程中有个细节，在 DubboCodec.decodeBody() 方法中有如下代码片段，其中会根据 DECODE_IN_IO_THREAD_KEY 这个参数决定是否在 DubboCodec 中进行解码（DubboCodec 是在 IO 线程中调用的）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// decode request.</span></span>
<span class="line"><span style="color:#E1E4E8;">Request req </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">... </span><span style="color:#6A737D;">// 省略Request中其他字段的设置</span></span>
<span class="line"><span style="color:#E1E4E8;">Object data;</span></span>
<span class="line"><span style="color:#E1E4E8;">DecodeableRpcInvocation inv;</span></span>
<span class="line"><span style="color:#6A737D;">// 这里会检查DECODE_IN_IO_THREAD_KEY参数</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (channel.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(DECODE_IN_IO_THREAD_KEY, DEFAULT_DECODE_IN_IO_THREAD)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    inv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DecodeableRpcInvocation</span><span style="color:#E1E4E8;">(channel, req, is, proto);</span></span>
<span class="line"><span style="color:#E1E4E8;">    inv.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 直接调用decode()方法在当前IO线程中解码</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 这里只是读取数据，不会调用decode()方法在当前IO线程中进行解码</span></span>
<span class="line"><span style="color:#E1E4E8;">    inv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DecodeableRpcInvocation</span><span style="color:#E1E4E8;">(channel, req,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsafeByteArrayInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">readMessageData</span><span style="color:#E1E4E8;">(is)), proto);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inv;</span></span>
<span class="line"><span style="color:#E1E4E8;">req.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">(data); </span><span style="color:#6A737D;">// 设置到Request请求的data字段</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> req;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// decode request.</span></span>
<span class="line"><span style="color:#24292E;">Request req </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">... </span><span style="color:#6A737D;">// 省略Request中其他字段的设置</span></span>
<span class="line"><span style="color:#24292E;">Object data;</span></span>
<span class="line"><span style="color:#24292E;">DecodeableRpcInvocation inv;</span></span>
<span class="line"><span style="color:#6A737D;">// 这里会检查DECODE_IN_IO_THREAD_KEY参数</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (channel.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(DECODE_IN_IO_THREAD_KEY, DEFAULT_DECODE_IN_IO_THREAD)) {</span></span>
<span class="line"><span style="color:#24292E;">    inv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DecodeableRpcInvocation</span><span style="color:#24292E;">(channel, req, is, proto);</span></span>
<span class="line"><span style="color:#24292E;">    inv.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 直接调用decode()方法在当前IO线程中解码</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 这里只是读取数据，不会调用decode()方法在当前IO线程中进行解码</span></span>
<span class="line"><span style="color:#24292E;">    inv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DecodeableRpcInvocation</span><span style="color:#24292E;">(channel, req,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsafeByteArrayInputStream</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">readMessageData</span><span style="color:#24292E;">(is)), proto);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inv;</span></span>
<span class="line"><span style="color:#24292E;">req.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">(data); </span><span style="color:#6A737D;">// 设置到Request请求的data字段</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> req;</span></span></code></pre></div><p>如果不在 DubboCodec 中解码，那会在哪里解码呢？你可以回顾第 20 课时介绍的 DecodeHandler（Transport 层），它的 received() 方法也是可以进行解码的，另外，DecodeableRpcInvocation 中有一个 hasDecoded 字段来判断当前是否已经完成解码，这样，三者配合就可以根据 DECODE_IN_IO_THREAD_KEY 参数决定执行解码操作的线程了。</p><p>如果你对线程模型不清楚，可以依次回顾一下 Exchangers、HeaderExchanger、Transporters 三个门面类的 bind() 方法，以及 Dispatcher 各实现提供的线程模型，搞清楚各个 ChannelHandler 是由哪个线程执行的，这些知识点在前面课时都介绍过了，不再重复。这里我们就直接以 AllDispatcher 实现为例给出结论。</p><ul><li><p>IO 线程内执行的 ChannelHandler 实现依次有：InternalEncoder、InternalDecoder（两者底层都是调用 DubboCodec）、IdleStateHandler、MultiMessageHandler、HeartbeatHandler 和 NettyServerHandler。</p></li><li><p>在非 IO 线程内执行的 ChannelHandler 实现依次有：DecodeHandler、HeaderExchangeHandler 和 DubboProtocol$requestHandler。</p></li></ul><p>在 DubboProtocol 中有一个 requestHandler 字段，它是一个实现了 ExchangeHandlerAdapter 抽象类的匿名内部类的实例，间接实现了 ExchangeHandler 接口，其核心是 reply() 方法，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reply</span><span style="color:#E1E4E8;">(ExchangeChannel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 这里省略了检查message类型的逻辑，通过前面Handler的处理，这里收到的message必须是Invocation类型的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    Invocation inv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Invocation) message;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取此次调用Invoker对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    Invoker&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(channel, inv);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 针对客户端回调的内容，在后面详细介绍，这里不再展开分析</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将客户端的地址记录到RpcContext中</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setRemoteAddress</span><span style="color:#E1E4E8;">(channel.</span><span style="color:#B392F0;">getRemoteAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行真正的调用</span></span>
<span class="line"><span style="color:#E1E4E8;">    Result result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(inv);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">thenApply</span><span style="color:#E1E4E8;">(Function.</span><span style="color:#B392F0;">identity</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reply</span><span style="color:#24292E;">(ExchangeChannel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 这里省略了检查message类型的逻辑，通过前面Handler的处理，这里收到的message必须是Invocation类型的对象</span></span>
<span class="line"><span style="color:#24292E;">    Invocation inv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Invocation) message;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取此次调用Invoker对象</span></span>
<span class="line"><span style="color:#24292E;">    Invoker&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(channel, inv);</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 针对客户端回调的内容，在后面详细介绍，这里不再展开分析</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将客户端的地址记录到RpcContext中</span></span>
<span class="line"><span style="color:#24292E;">    RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setRemoteAddress</span><span style="color:#24292E;">(channel.</span><span style="color:#6F42C1;">getRemoteAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行真正的调用</span></span>
<span class="line"><span style="color:#24292E;">    Result result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(inv);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">thenApply</span><span style="color:#24292E;">(Function.</span><span style="color:#6F42C1;">identity</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中 getInvoker() 方法会先根据 Invocation 携带的信息构造 ServiceKey，然后从 exporterMap 集合中查找对应的 DubboExporter 对象，并从中获取底层的 Invoker 对象返回，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(Channel channel, Invocation inv) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略对客户端Callback以及stub的处理逻辑，后面单独介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">    String serviceKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serviceKey</span><span style="color:#E1E4E8;">(port, path, (String) inv.</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(VERSION_KEY),</span></span>
<span class="line"><span style="color:#E1E4E8;">            (String) inv.</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(GROUP_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">    DubboExporter&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; exporter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (DubboExporter</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) exporterMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(serviceKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">//  查找不到相应的DubboExporter对象时，会直接抛出异常，这里省略了这个检测</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exporter.</span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取exporter中获取Invoker对象</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(Channel channel, Invocation inv) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略对客户端Callback以及stub的处理逻辑，后面单独介绍</span></span>
<span class="line"><span style="color:#24292E;">    String serviceKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serviceKey</span><span style="color:#24292E;">(port, path, (String) inv.</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(VERSION_KEY),</span></span>
<span class="line"><span style="color:#24292E;">            (String) inv.</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(GROUP_KEY));</span></span>
<span class="line"><span style="color:#24292E;">    DubboExporter&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; exporter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (DubboExporter</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) exporterMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(serviceKey);</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">//  查找不到相应的DubboExporter对象时，会直接抛出异常，这里省略了这个检测</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exporter.</span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取exporter中获取Invoker对象</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，我们终于见到了对 Invoker 对象的调用，对 Invoker 实现的介绍和分析，在后面课时我们会深入介绍，这里就先专注于 DubboProtocol 的相关内容。</p><h4 id="_3-序列化优化处理" tabindex="-1">3. 序列化优化处理 <a class="header-anchor" href="#_3-序列化优化处理" aria-label="Permalink to &quot;3. 序列化优化处理&quot;">​</a></h4><p>下面我们回到 DubboProtocol.export() 方法继续分析，在完成 ProtocolServer 的启动之后，export() 方法最后会调用 optimizeSerialization() 方法对指定的序列化算法进行优化。</p><p>这里先介绍一个基础知识，在使用某些序列化算法（例如， Kryo、FST 等）时，为了让其能发挥出最佳的性能，最好将那些需要被序列化的类提前注册到 Dubbo 系统中。例如，我们可以通过一个实现了 SerializationOptimizer 接口的优化器，并在配置中指定该优化器，如下示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SerializationOptimizerImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SerializationOptimizer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">Class</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getSerializableClasses</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Class</span><span style="color:#E1E4E8;">&gt; classes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        classes.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(xxxx.class); </span><span style="color:#6A737D;">// 添加需要被序列化的类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> classes;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SerializationOptimizerImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SerializationOptimizer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">Class</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getSerializableClasses</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Class</span><span style="color:#24292E;">&gt; classes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        classes.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(xxxx.class); </span><span style="color:#6A737D;">// 添加需要被序列化的类</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> classes;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 DubboProtocol.optimizeSerialization() 方法中，就会获取该优化器中注册的类，通知底层的序列化算法进行优化，序列化的性能将会被大大提升。当然，在进行序列化的时候，难免会级联到很多 Java 内部的类（例如，数组、各种集合类型等），Kryo、FST 等序列化算法已经自动将JDK 中的常用类进行了注册，所以无须重复注册它们。</p><p>下面我们回头来看 optimizeSerialization() 方法，分析序列化优化操作的具体实现细节：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">optimizeSerialization</span><span style="color:#E1E4E8;">(URL url) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据URL中的optimizer参数值，确定SerializationOptimizer接口的实现类</span></span>
<span class="line"><span style="color:#E1E4E8;">    String className </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(OPTIMIZER_KEY, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class clazz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getContextClassLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(className);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建SerializationOptimizer实现类的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    SerializationOptimizer optimizer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (SerializationOptimizer) clazz.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用getSerializableClasses()方法获取需要注册的类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Class c </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> optimizer.</span><span style="color:#B392F0;">getSerializableClasses</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SerializableClassRegistry.</span><span style="color:#B392F0;">registerClass</span><span style="color:#E1E4E8;">(c); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(className);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">optimizeSerialization</span><span style="color:#24292E;">(URL url) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据URL中的optimizer参数值，确定SerializationOptimizer接口的实现类</span></span>
<span class="line"><span style="color:#24292E;">    String className </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(OPTIMIZER_KEY, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Class clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getContextClassLoader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">loadClass</span><span style="color:#24292E;">(className);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建SerializationOptimizer实现类的对象</span></span>
<span class="line"><span style="color:#24292E;">    SerializationOptimizer optimizer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (SerializationOptimizer) clazz.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用getSerializableClasses()方法获取需要注册的类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Class c </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> optimizer.</span><span style="color:#6F42C1;">getSerializableClasses</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        SerializableClassRegistry.</span><span style="color:#6F42C1;">registerClass</span><span style="color:#24292E;">(c); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    optimizers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(className);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SerializableClassRegistry 底层维护了一个 static 的 Map（REGISTRATIONS 字段），registerClass() 方法就是将待优化的类写入该集合中暂存，在使用 Kryo、FST 等序列化算法时，会读取该集合中的类，完成注册操作，相关的调用关系如下图所示：</p>`,19),m=s("p",null,"getRegisteredClasses() 方法的调用位置",-1),x=s("p",null,"按照 Dubbo 官方文档的说法，即使不注册任何类进行优化，Kryo 和 FST 的性能依然普遍优于Hessian2 和 Dubbo 序列化。",-1),I=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),R=s("p",null,"本课时我们重点介绍了 DubboProtocol 发布一个 Dubbo 服务的核心流程。首先，我们介绍了 AbstractProtocol 这个抽象类为 Protocol 实现类提供的公共能力和字段，然后我们结合 Dubbo 协议对应的 DubboProtocol 实现，讲解了发布一个 Dubbo 服务的核心流程，其中涉及整个服务端核心启动流程、RpcInvocation 实现、DubboProtocol.requestHandler 字段调用 Invoker 对象以及序列化相关的优化处理等内容。",-1),T=s("p",null,"下一课时，我们将继续介绍 DubboProtocol 引用服务的相关实现。",-1);function k(B,P,O,N,f,M){const a=e("Image");return t(),r("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5D/C5/Ciqc1F-FTHGAOVGKAAJe5PD5u9A015.png"}),n(),y,i,d,l(a,{alt:"Lark20201016-164613.png",src:"https://s0.lgstatic.com/i/image/M00/5F/74/Ciqc1F-JXfmAJK8RAAHUliqXmBc629.png"}),n(),D,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/5D/D0/CgqCHl-FTJSAd9oTAAAm0DgOmVo715.png"}),n(),F,u,A,v,g,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5D/D0/CgqCHl-FTKGAJNO8AAElldtvsRM104.png"}),n(),b,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/5D/D0/CgqCHl-FTK-AUlLCAADTWhhySe8432.png"}),n(),C,l(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/5D/C5/Ciqc1F-FTLuAZ-AoAACeZ02hpEg723.png"}),n(),h,l(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/5D/D0/CgqCHl-FTMSAYeP7AAA_pzU2CPA016.png"}),n(),_,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/5D/C5/Ciqc1F-FTM2Ae73pAAC0_daI0N4088.png"}),n(),S,l(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/5D/C5/Ciqc1F-FTOGAEWu7AADOU3xBmjA069.png"}),n(),m,x,I,R,T])}const j=o(c,[["render",k]]);export{K as __pageData,j as default};
