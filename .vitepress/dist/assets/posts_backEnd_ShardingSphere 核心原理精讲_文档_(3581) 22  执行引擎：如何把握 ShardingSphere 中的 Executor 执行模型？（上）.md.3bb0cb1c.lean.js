import{_ as l,j as p,o,g as e,k as n,s as t,Q as a}from"./chunks/framework.b3d8e22e.js";const h=JSON.parse('{"title":"AbstractStatementExecutor ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3581) 22  执行引擎：如何把握 ShardingSphere 中的 Executor 执行模型？（上）.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3581) 22  执行引擎：如何把握 ShardingSphere 中的 Executor 执行模型？（上）.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3581) 22  执行引擎：如何把握 ShardingSphere 中的 Executor 执行模型？（上）.md"},r=t("p",null,"在上一课时中，我们对 ShardingGroupExecuteCallback 和 SQLExecuteTemplate 做了介绍。从设计上讲，前者充当 ShardingExecuteEngine 的回调入口；而后者则是一个模板类，完成对 ShardingExecuteEngine 的封装并提供了对外的统一入口，这些类都位于底层的 sharding-core-execute 工程中。",-1),E=a("",16),y=a("",28),i=a("",42);function u(F,d,g,S,C,x){const s=p("Image");return o(),e("div",null,[r,n(s,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/47/4A/CgqCHl9HalOAccqPAACp0Ky_Tl8886.png"}),E,n(s,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/47/3F/Ciqc1F9HamWACCzmAABPdP2Sna8714.png"}),y,n(s,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/47/3F/Ciqc1F9HaoaAYskMAACJIb5G6C8859.png"}),i])}const D=l(c,[["render",u]]);export{h as __pageData,D as default};
