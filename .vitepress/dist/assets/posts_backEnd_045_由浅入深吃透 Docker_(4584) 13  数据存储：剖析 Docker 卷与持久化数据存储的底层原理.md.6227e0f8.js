import{_ as l,j as n,o,g as p,k as e,h as t,Q as s}from"./chunks/framework.a0d18f64.js";const m=JSON.parse('{"title":"13数据存储：剖析Docker卷与持久化数据存储的底层原理","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/045_由浅入深吃透 Docker/(4584) 13  数据存储：剖析 Docker 卷与持久化数据存储的底层原理.md","filePath":"posts/backEnd/045_由浅入深吃透 Docker/(4584) 13  数据存储：剖析 Docker 卷与持久化数据存储的底层原理.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/045_由浅入深吃透 Docker/(4584) 13  数据存储：剖析 Docker 卷与持久化数据存储的底层原理.md"},r=s(`<h1 id="_13数据存储-剖析docker卷与持久化数据存储的底层原理" tabindex="-1">13数据存储：剖析Docker卷与持久化数据存储的底层原理 <a class="header-anchor" href="#_13数据存储-剖析docker卷与持久化数据存储的底层原理" aria-label="Permalink to &quot;13数据存储：剖析Docker卷与持久化数据存储的底层原理&quot;">​</a></h1><p>上一课时我介绍了 Docker 网络实现，为我们的容器插上了网线。这一课时我将介绍 Docker 的卷，为我们的容器插上磁盘，实现容器数据的持久化。</p><h3 id="为什么容器需要持久化存储" tabindex="-1">为什么容器需要持久化存储 <a class="header-anchor" href="#为什么容器需要持久化存储" aria-label="Permalink to &quot;为什么容器需要持久化存储&quot;">​</a></h3><p>容器按照业务类型，总体可以分为两类：</p><ul><li><p>无状态的（数据不需要被持久化）</p></li><li><p>有状态的（数据需要被持久化）</p></li></ul><p>显然，容器更擅长无状态应用。因为未持久化数据的容器根目录的生命周期与容器的生命周期一样，容器文件系统的本质是在镜像层上面创建的读写层，运行中的容器对任何文件的修改都存在于该读写层，当容器被删除时，容器中的读写层也会随之消失。</p><p>虽然容器希望所有的业务都尽量保持无状态，这样容器就可以开箱即用，并且可以任意调度，但实际业务总是有各种需要数据持久化的场景，比如 MySQL、Kafka 等有状态的业务。因此为了解决有状态业务的需求，Docker 提出了卷（Volume）的概念。</p><p>什么是卷？卷的本质是文件或者目录，它可以绕过默认的联合文件系统，直接以文件或目录的形式存在于宿主机上。卷的概念不仅解决了数据持久化的问题，还解决了容器间共享数据的问题。使用卷可以将容器内的目录或文件持久化，当容器重启后保证数据不丢失，例如我们可以使用卷将 MySQL 的目录持久化，实现容器重启数据库数据不丢失。</p><p>Docker 提供了卷（Volume）的功能，使用<code>docker volume</code>命令可以实现对卷的创建、查看和删除等操作。下面我们来详细了解一下这些命令。</p><h3 id="docker-卷的操作" tabindex="-1">Docker 卷的操作 <a class="header-anchor" href="#docker-卷的操作" aria-label="Permalink to &quot;Docker 卷的操作&quot;">​</a></h3><h4 id="创建数据卷" tabindex="-1">创建数据卷 <a class="header-anchor" href="#创建数据卷" aria-label="Permalink to &quot;创建数据卷&quot;">​</a></h4><p>使用<code>docker volume create</code>命令可以创建一个数据卷。</p><p>我们使用以下命令创建一个名为 myvolume 的数据卷：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myvolume</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myvolume</span></span></code></pre></div><p>在这里要说明下，默认情况下 ，Docker 创建的数据卷为 local 模式，仅能提供本主机的容器访问。如果想要实现远程访问，需要借助网络存储来实现。Docker 的 local 存储模式并未提供配额管理，因此在生产环境中需要手动维护磁盘存储空间。</p><p>除了使用<code>docker volume create</code>的方式创建卷，我们还可以在 Docker 启动时使用 -v 的方式指定容器内需要被持久化的路径，Docker 会自动为我们创建卷，并且绑定到容器中，使用命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name=nginx-volume</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/share/nginx/html</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=nginx-volume</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/share/nginx/html</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span></code></pre></div><p>使用以上命令，我们启动了一个 nginx 容器，<code>-v</code>参数使得 Docker 自动生成一个卷并且绑定到容器的 /usr/share/nginx/html 目录中。</p><p>我们可以使用<code>docker volume ls</code>命令来查看下主机上的卷：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span>
<span class="line"><span style="color:#B392F0;">DRIVER</span><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">VOLUME</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NAME</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;">               </span><span style="color:#9ECBFF;">eaa8a223eb61a2091bf5cd5247c1b28ac287450a086d6eee9632d9d1b9f69171</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span>
<span class="line"><span style="color:#6F42C1;">DRIVER</span><span style="color:#24292E;">              </span><span style="color:#032F62;">VOLUME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NAME</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;">               </span><span style="color:#032F62;">eaa8a223eb61a2091bf5cd5247c1b28ac287450a086d6eee9632d9d1b9f69171</span></span></code></pre></div><p>可以看到，Docker 自动为我们创建了一个名称为随机 ID 的卷。</p><h4 id="查看数据卷" tabindex="-1">查看数据卷 <a class="header-anchor" href="#查看数据卷" aria-label="Permalink to &quot;查看数据卷&quot;">​</a></h4><p>已经创建的数据卷可以使用 docker volume ls 命令查看。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span>
<span class="line"><span style="color:#B392F0;">DRIVER</span><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">VOLUME</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NAME</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;">               </span><span style="color:#9ECBFF;">myvolume</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span>
<span class="line"><span style="color:#6F42C1;">DRIVER</span><span style="color:#24292E;">              </span><span style="color:#032F62;">VOLUME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NAME</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;">               </span><span style="color:#032F62;">myvolume</span></span></code></pre></div><p>通过输出可以看到 myvolume 卷已经创建成功。</p><p>如果想要查看某个数据卷的详细信息，可以使用<code>docker volume inspect</code>命令。例如，我想查看 myvolume 的详细信息，命令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker volume inspect myvolume</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;CreatedAt&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2020-09-08T09:10:50Z&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Driver&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;local&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Labels&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Mountpoint&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/var/lib/docker/volumes/myvolume/_data&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myvolume&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Options&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Scope&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;local&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker volume inspect myvolume</span></span>
<span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;CreatedAt&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-09-08T09:10:50Z&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Driver&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;local&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Labels&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Mountpoint&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/var/lib/docker/volumes/myvolume/_data&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myvolume&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Options&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Scope&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;local&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>通过<code>docker volume inspect</code>命令可以看到卷的创建日期、命令、挂载路径信息。</p><h4 id="使用数据卷" tabindex="-1">使用数据卷 <a class="header-anchor" href="#使用数据卷" aria-label="Permalink to &quot;使用数据卷&quot;">​</a></h4><p>使用<code>docker volume</code>创建的卷在容器启动时，添加 --mount 参数指定卷的名称即可使用。</p><p>这里我们使用上一步创建的卷来启动一个 nginx 容器，并将 /usr/share/nginx/html 目录与卷关联，命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name=nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--mount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">source=myvolume,target=/usr/share/nginx/html</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=nginx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--mount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">source=myvolume,target=/usr/share/nginx/html</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span></code></pre></div><p>使用 Docker 的卷可以实现指定目录的文件持久化，下面我们进入容器中并且修改 index.html 文件内容，命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span></span>
<span class="line"><span style="color:#6A737D;">## 使用以下内容直接替换 /usr/share/nginx/html/index.html 文件 </span></span>
<span class="line"><span style="color:#B392F0;">root@719d3c32e211:/#</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#9ECBFF;">EOF</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">/usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;title&gt;Hello, Docker Volume!&lt;/title&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;style&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    body {</span></span>
<span class="line"><span style="color:#9ECBFF;">        width: 35em;</span></span>
<span class="line"><span style="color:#9ECBFF;">        margin: 0 auto;</span></span>
<span class="line"><span style="color:#9ECBFF;">        font-family: Tahoma, Verdana, Arial, sans-serif;</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/style&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;h1&gt;Hello, Docker Volume!&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;">  </span><span style="color:#032F62;">nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span></span>
<span class="line"><span style="color:#6A737D;">## 使用以下内容直接替换 /usr/share/nginx/html/index.html 文件 </span></span>
<span class="line"><span style="color:#6F42C1;">root@719d3c32e211:/#</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">EOF</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">/usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="color:#032F62;">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;title&gt;Hello, Docker Volume!&lt;/title&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;style&gt;</span></span>
<span class="line"><span style="color:#032F62;">    body {</span></span>
<span class="line"><span style="color:#032F62;">        width: 35em;</span></span>
<span class="line"><span style="color:#032F62;">        margin: 0 auto;</span></span>
<span class="line"><span style="color:#032F62;">        font-family: Tahoma, Verdana, Arial, sans-serif;</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">&lt;/style&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/head&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;h1&gt;Hello, Docker Volume!&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/body&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#032F62;">EOF</span></span></code></pre></div><p>此时我们使用<code>docker rm</code>命令将运行中的 nginx 容器彻底删除。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span></code></pre></div><p>旧的 nginx 容器删除后，我们再使用<code>docker run</code>命令启动一个新的容器，并且挂载 myvolume 卷，命令如下。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name=nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--mount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">source=myvolume,target=/usr/share/nginx/html</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=nginx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--mount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">source=myvolume,target=/usr/share/nginx/html</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span></code></pre></div><p>新容器启动后，我们进入容器查看一下 index.html 文件内容：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker exec </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">it nginx bash</span></span>
<span class="line"><span style="color:#E1E4E8;">root@7</span><span style="color:#B392F0;">ffac645f431</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"># cat </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">share</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nginx</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.html</span></span>
<span class="line"><span style="color:#F97583;">&lt;!</span><span style="color:#79B8FF;">DOCTYPE</span><span style="color:#E1E4E8;"> html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Hello, Docker Volume!&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    body {</span></span>
<span class="line"><span style="color:#E1E4E8;">        width: 35em;</span></span>
<span class="line"><span style="color:#E1E4E8;">        margin: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> auto;</span></span>
<span class="line"><span style="color:#E1E4E8;">        font</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">family: Tahoma, Verdana, Arial, sans</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">serif;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Hello, Docker Volume!&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker exec </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">it nginx bash</span></span>
<span class="line"><span style="color:#24292E;">root@7</span><span style="color:#6F42C1;">ffac645f431</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"># cat </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">share</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nginx</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">index.html</span></span>
<span class="line"><span style="color:#D73A49;">&lt;!</span><span style="color:#005CC5;">DOCTYPE</span><span style="color:#24292E;"> html</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Hello, Docker Volume!&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    body {</span></span>
<span class="line"><span style="color:#24292E;">        width: 35em;</span></span>
<span class="line"><span style="color:#24292E;">        margin: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> auto;</span></span>
<span class="line"><span style="color:#24292E;">        font</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">family: Tahoma, Verdana, Arial, sans</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">serif;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Hello, Docker Volume!&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>可以看到，此时 index.html 文件内容依旧为我们之前写入的内容。可见，使用 Docker 卷后我们的数据并没有随着容器的删除而消失。</p><h4 id="删除数据卷" tabindex="-1">删除数据卷 <a class="header-anchor" href="#删除数据卷" aria-label="Permalink to &quot;删除数据卷&quot;">​</a></h4><p>容器的删除并不会自动删除已经创建的数据卷，因此不再使用的数据卷需要我们手动删除，删除的命令为 docker volume rm 。例如，我们想要删除上面创建 myvolume 数据卷，可以使用以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myvolume</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myvolume</span></span></code></pre></div><p>这里需要注意，正在被使用中的数据卷无法删除，如果你想要删除正在使用中的数据卷，需要先删除所有关联的容器。</p><p>有时候，两个容器之间会有共享数据的需求，很典型的一个场景就是容器内产生的日志需要一个专门的日志采集程序去采集日志内容，例如我需要使用 Filebeat (一种日志采集工具)采集 nginx 容器内的日志，我就需要使用卷来共享一个日志目录，从而使得 Filebeat 和 nginx 容器都可以访问到这个目录，这时就需要用到容器之间共享数据卷的方式。</p><h4 id="容器与容器之间数据共享" tabindex="-1">容器与容器之间数据共享 <a class="header-anchor" href="#容器与容器之间数据共享" aria-label="Permalink to &quot;容器与容器之间数据共享&quot;">​</a></h4><p>那如何实现容器与容器之间数据共享呢？下面我举例说明。</p><p>首先使用<code>docker volume create</code>命令创建一个共享日志的数据卷。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log-vol</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log-vol</span></span></code></pre></div><p>启动一个生产日志的容器（下面用 producer 窗口来表示）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--mount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">source=log-vol,target=/tmp/log</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name=log-producer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">busybox</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--mount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">source=log-vol,target=/tmp/log</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=log-producer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">busybox</span></span></code></pre></div><p>然后新打开一个命令行窗口，启动一个消费者容器（下面用 consumer 窗口来表示）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">it </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">name consumer </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">volumes</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">from log</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">producer  busybox</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">it </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">name consumer </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">volumes</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">from log</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">producer  busybox</span></span></code></pre></div><p>使用<code>volumes-from</code>参数可以在启动新的容器时来挂载已经存在的容器的卷，<code>volumes-from</code>参数后面跟已经启动的容器名称。</p><p>下面我们切换到 producer 窗口，使用以下命令创建一个 mylog.log 文件并写入 &quot;Hello，My log.&quot; 的内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># cat &lt;&lt;EOF &gt;/tmp/log/mylog.log</span></span>
<span class="line"><span style="color:#B392F0;">Hello,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">My</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log.</span></span>
<span class="line"><span style="color:#B392F0;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># cat &lt;&lt;EOF &gt;/tmp/log/mylog.log</span></span>
<span class="line"><span style="color:#6F42C1;">Hello,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">My</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log.</span></span>
<span class="line"><span style="color:#6F42C1;">EOF</span></span></code></pre></div><p>然后我们切换到 consumer 窗口，查看一下相关内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># cat /tmp/log/mylog.log</span></span>
<span class="line"><span style="color:#B392F0;">Hello,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">My</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># cat /tmp/log/mylog.log</span></span>
<span class="line"><span style="color:#6F42C1;">Hello,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">My</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log.</span></span></code></pre></div><p>可以看到我们从 producer 容器写入的文件内容会自动出现在 consumer 容器中，证明我们成功实现了两个容器间的数据共享。</p><p>总结一下，我们首先使用 docker volume create 命令创建了 log-vol 卷来作为共享目录，log-producer 容器向该卷写入数据，consumer 容器从该卷读取数据。这就像主机上的两个进程，一个向主机目录写数据，一个从主机目录读数据，利用主机的目录，实现了容器之间的数据共享。</p><h4 id="主机与容器之间数据共享" tabindex="-1">主机与容器之间数据共享 <a class="header-anchor" href="#主机与容器之间数据共享" aria-label="Permalink to &quot;主机与容器之间数据共享&quot;">​</a></h4><p>Docker 卷的目录默认在 /var/lib/docker 下，当我们想把主机的其他目录映射到容器内时，就需要用到主机与容器之间数据共享的方式了，例如我想把 MySQL 容器中的 /var/lib/mysql 目录映射到主机的 /var/lib/mysql 目录中，我们就可以使用主机与容器之间数据共享的方式来实现。</p><p>要实现主机与容器之间数据共享，其实很简单，只需要我们在启动容器的时候添加<code>-v</code>参数即可, 使用格式为：<code>-v HOST_PATH:CONTIANAER_PATH</code>。</p><p>例如，我想挂载主机的 /data 目录到容器中的 /usr/local/data 中，可以使用以下命令来启动容器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/data:/usr/local/data</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">busybox</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/data:/usr/local/data</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">busybox</span></span></code></pre></div><p>容器启动后，便可以在容器内的 /usr/local/data 访问到主机 /data 目录的内容了，并且容器重启后，/data 目录下的数据也不会丢失。</p><p>以上就是 Docker 卷的操作，关键命令我帮你总结如下：</p>`,68),y=s(`<p>那你了解完卷的相关操作后，你有没有想过 Docker 的卷是怎么实现的呢？接下来我们就看看卷的实现原理。</p><h3 id="docker-卷的实现原理" tabindex="-1">Docker 卷的实现原理 <a class="header-anchor" href="#docker-卷的实现原理" aria-label="Permalink to &quot;Docker 卷的实现原理&quot;">​</a></h3><p>在了解 Docker 卷的原理之前，我们先来回顾一下镜像和容器的文件系统原理。</p><blockquote><p><strong>镜像和容器的文件系统原理：</strong> 镜像是由多层文件系统组成的，当我们想要启动一个容器时，Docker 会在镜像上层创建一个可读写层，容器中的文件都工作在这个读写层中，当容器删除时，与容器相关的工作文件将全部丢失。</p></blockquote><p>Docker 容器的文件系统不是一个真正的文件系统，而是通过联合文件系统实现的一个伪文件系统，而 Docker 卷则是直接利用主机的某个文件或者目录，它可以绕过联合文件系统，直接挂载主机上的文件或目录到容器中，这就是它的工作原理。</p><p>下面，我们通过一个实例来说明卷的工作原理。首先，我们创建一个名称为 volume-data 的卷：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume-data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume-data</span></span></code></pre></div><p>我们使用 ls 命令查看一下 /var/lib/docker/volumes 目录下的内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ sudo ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">volumes</span></span>
<span class="line"><span style="color:#E1E4E8;">drwxr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">xr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x. </span><span style="color:#FDAEB7;font-style:italic;">3</span><span style="color:#E1E4E8;"> root root    </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> Sep  </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">59</span><span style="color:#E1E4E8;"> volume</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ sudo ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">docker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">volumes</span></span>
<span class="line"><span style="color:#24292E;">drwxr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">xr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x. </span><span style="color:#B31D28;font-style:italic;">3</span><span style="color:#24292E;"> root root    </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> Sep  </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">59</span><span style="color:#24292E;"> volume</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span></span></code></pre></div><p>然后再看下 volume-data 目录下有什么内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ sudo ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">volumes</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">volume</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">total </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">drwxr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">xr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x. </span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> Sep  </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">59</span><span style="color:#E1E4E8;"> _data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ sudo ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">docker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">volumes</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">volume</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span></span>
<span class="line"><span style="color:#24292E;">total </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">drwxr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">xr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x. </span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> Sep  </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">59</span><span style="color:#24292E;"> _data</span></span></code></pre></div><p>可以看到我们创建的卷出现在了 /var/lib/docker/volumes 目录下，并且 volume-data 目录下还创建了一个 _data 目录。</p><p>实际上，在我们创建 Docker 卷时，Docker 会把卷的数据全部放在 /var/lib/docker/volumes 目录下，并且在每个对应的卷的目录下创建一个 _data 目录，然后把 _data 目录绑定到容器中。因此我们在容器中挂载卷的目录下操作文件，实际上是在操作主机上的 _data 目录。为了证实我的说法，我们来实际演示下。</p><p>首先，我们启动一个容器，并且绑定 volume-data 卷到容器内的 /data 目录下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--mount</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">source=volume-data,target=/data</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">busybox</span></span>
<span class="line"><span style="color:#B392F0;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">  </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--mount</span><span style="color:#24292E;"> </span><span style="color:#032F62;">source=volume-data,target=/data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">busybox</span></span>
<span class="line"><span style="color:#6F42C1;">/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#</span></span></code></pre></div><p>我们进入到容器的 /data 目录，创建一个 data.log 文件:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># cd data/</span></span>
<span class="line"><span style="color:#B392F0;">/data</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># touch data.log</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># cd data/</span></span>
<span class="line"><span style="color:#6F42C1;">/data</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># touch data.log</span></span></code></pre></div><p>然后我们新打开一个命令行窗口，查看一下主机上的文件内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/var/lib/docker/volumes/volume-data/_data</span></span>
<span class="line"><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">-rw-r--r--.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Sep</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">:15</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">data.log</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">  </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/var/lib/docker/volumes/volume-data/_data</span></span>
<span class="line"><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">-rw-r--r--.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Sep</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">:15</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data.log</span></span></code></pre></div><p>可以看到主机上的 _data 目录下也出现了 data.log 文件。这说明，在容器内操作卷挂载的目录就是直接操作主机上的 _data 目录，符合我上面的说法。</p><p>综上，<strong>Docker 卷的实现原理是在主机的 /var/lib/docker/volumes 目录下，根据卷的名称创建相应的目录，然后在每个卷的目录下创建 _data 目录，在容器启动时如果使用 --mount 参数，Docker 会把主机上的目录直接映射到容器的指定目录下，实现数据持久化。</strong></p><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>到此，相信你已经了解了 Docker 使用卷做持久化存储的必要性，也了解 Docker 卷的常用操作，并且对卷的实现原理也有了较清晰的认识。</p><p>那么，你知道 Docker 如何使用卷来挂载 NFS 类型的持久化存储到容器内吗？思考后，把你的想法写在留言区。</p><p>下一课时，我将讲解 Docker 文件存储驱动 AUFS 的系统原理及生产环境的最佳配置。</p>`,25);function E(i,d,F,u,h,g){const a=n("Image");return o(),p("div",null,[r,e(a,{alt:"Lark20201010-145710.png",src:"https://s0.lgstatic.com/i/image/M00/5C/50/Ciqc1F-BW1SAQEkaAACOwJuMTHI950.png"}),t(),y])}const v=l(c,[["render",E]]);export{m as __pageData,v as default};
