import{_ as l,j as o,o as t,g as c,k as a,s,h as e,Q as p}from"./chunks/framework.e0c66c3f.js";const Z=JSON.parse('{"title":"MultiScopesSpanListener ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1744) 第26讲：trace-receiver 插件拆解，Trace 蕴含的宝贵信息（下）.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1744) 第26讲：trace-receiver 插件拆解，Trace 蕴含的宝贵信息（下）.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1744) 第26讲：trace-receiver 插件拆解，Trace 蕴含的宝贵信息（下）.md"},E=s("h3",{id:"multiscopesspanlistener",tabindex:"-1"},[e("MultiScopesSpanListener "),s("a",{class:"header-anchor",href:"#multiscopesspanlistener","aria-label":'Permalink to "MultiScopesSpanListener"'},"​")],-1),y=s("p",null,"接下来重点分析 MultiScopesSpanListener 这条支线对 TraceSegment 数据的处理。MultiScopesSpanListener 继承了 GlobalTraceIdsListener、ExitSpanListener、EntrySpanListener 三个接口，如下图所示：",-1),i=p(`<p>从 containsPoint() 方法实现中也可能看出， MultiScopesSpanListener 能够处理 TraceSegment 中的 TraceId、Entry 类型 Span 以及 Exit 类型 Span。按照前面 SegmentParseV2 解析 TraceSegment 的流程，下面将会按照 parseGlobalTraceId() 方法、parseEntry() 方法、parseExit() 方法、build() 方法的顺序依次介绍 MultiScopesSpanListener 逻辑。</p><h4 id="parseglobaltraceid" tabindex="-1">parseGlobalTraceId <a class="header-anchor" href="#parseglobaltraceid" aria-label="Permalink to &quot;parseGlobalTraceId&quot;">​</a></h4><p>parseGlobalTraceId() 方法比较简单，主要是将 TraceSegment 中的第一个 UniqueId</p><p>拼接成 String 记录到 traceId 字段中，这里不再展开分析。</p><h4 id="parseentry" tabindex="-1">parseEntry <a class="header-anchor" href="#parseentry" aria-label="Permalink to &quot;parseEntry&quot;">​</a></h4><p>前文介绍中提到，在 EntrySpan 的 refs 字段中记录的一个（或多个） TraceSegmentReference ，分别指向了上一个（或是多个）上游系统的 TraceSegment，SkyWalking OAP 可以通过 TraceSegmentReference 将两个系统的调用关系串联起来。</p><p>MultiScopesSpanListener.parseEntry() 方法的核心就是来解析 EntrySpan.refs 字段中记录的全部 TraceSegmentReference 对象，为每一个 TraceSegmentReference 生成一个相应的 SourceBuilder 对象并记录下来（ entrySourceBuilders 字段，List 类型）。在 build() 方法中还会继续处理这些 SourceBuilder 对象。</p><p>在 SourceBuilder 中记录了上下游两个系统的基础信息，核心字段如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 上游系统的 service 信息、serviceInstance 信息以及 Endpoint 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sourceServiceId;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String sourceServiceName;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sourceServiceInstanceId;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String sourceServiceInstanceName;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sourceEndpointId;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String sourceEndpointName;</span></span>
<span class="line"><span style="color:#6A737D;">// 下游系统的 service 信息、serviceInstance 信息以及 Endpoint 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> destServiceId;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String destServiceName;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> destServiceInstanceId;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String destServiceInstanceName;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> destEndpointId;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String destEndpointName;</span></span>
<span class="line"><span style="color:#6A737D;">// 当前系统的组件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> componentId;</span></span>
<span class="line"><span style="color:#6A737D;">// 在当前系统中的耗时</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> latency;</span></span>
<span class="line"><span style="color:#6A737D;">// 当前系统是否发生Error</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> status;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> responseCode; </span><span style="color:#6A737D;">// 默认为0</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RequestType type; </span><span style="color:#6A737D;">// 请求类型</span></span>
<span class="line"><span style="color:#6A737D;">// 调用关系中的角色，是调用方(Client)、被调用方(Server)还是代理(Proxy)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DetectPoint detectPoint; </span></span>
<span class="line"><span style="color:#6A737D;">// TraceSegment 起始时间所在分钟级时间窗口</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timeBucket;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 上游系统的 service 信息、serviceInstance 信息以及 Endpoint 信息</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sourceServiceId;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String sourceServiceName;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sourceServiceInstanceId;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String sourceServiceInstanceName;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sourceEndpointId;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String sourceEndpointName;</span></span>
<span class="line"><span style="color:#6A737D;">// 下游系统的 service 信息、serviceInstance 信息以及 Endpoint 信息</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> destServiceId;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String destServiceName;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> destServiceInstanceId;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String destServiceInstanceName;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> destEndpointId;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String destEndpointName;</span></span>
<span class="line"><span style="color:#6A737D;">// 当前系统的组件类型</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> componentId;</span></span>
<span class="line"><span style="color:#6A737D;">// 在当前系统中的耗时</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> latency;</span></span>
<span class="line"><span style="color:#6A737D;">// 当前系统是否发生Error</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> status;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> responseCode; </span><span style="color:#6A737D;">// 默认为0</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RequestType type; </span><span style="color:#6A737D;">// 请求类型</span></span>
<span class="line"><span style="color:#6A737D;">// 调用关系中的角色，是调用方(Client)、被调用方(Server)还是代理(Proxy)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DetectPoint detectPoint; </span></span>
<span class="line"><span style="color:#6A737D;">// TraceSegment 起始时间所在分钟级时间窗口</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeBucket;</span></span></code></pre></div><p>parseEntry() 方法解析 EntrySpan 中全部 TraceSegmentReference 的核心逻辑如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 记录 TraceSegment 起始的分钟级时间窗口</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.minuteTimeBucket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> segmentCoreInfo.</span><span style="color:#B392F0;">getMinuteTimeBucket</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> spanDecorator.</span><span style="color:#B392F0;">getRefsCount</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取 TraceSegmentReference对应的的ReferenceDecorator</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReferenceDecorator reference </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> spanDecorator.</span><span style="color:#B392F0;">getRefs</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建对应的SourceBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">    SourceBuilder sourceBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SourceBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录上游系统的 serviceId、serviceInstanceId 以及 endpointId</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setSourceEndpointId</span><span style="color:#E1E4E8;">(reference.</span><span style="color:#B392F0;">getParentEndpointId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里省略了针对 MQ 组件的特殊处理，如果你感兴趣可以翻一下代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setSourceServiceInstanceId</span><span style="color:#E1E4E8;">(reference.</span><span style="color:#B392F0;">getParentServiceInstanceId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setSourceServiceId</span><span style="color:#E1E4E8;">(instanceInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(reference.</span><span style="color:#B392F0;">getParentServiceInstanceId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录下游(当前)系统的 serviceId、serviceInstanceId 以及 endpointId</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setDestEndpointId</span><span style="color:#E1E4E8;">(spanDecorator.</span><span style="color:#B392F0;">getOperationNameId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setDestServiceInstanceId</span><span style="color:#E1E4E8;">(segmentCoreInfo.</span><span style="color:#B392F0;">getServiceInstanceId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setDestServiceId</span><span style="color:#E1E4E8;">(segmentCoreInfo.</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setDetectPoint</span><span style="color:#E1E4E8;">(DetectPoint.SERVER);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录当前组件的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setComponentId</span><span style="color:#E1E4E8;">(spanDecorator.</span><span style="color:#B392F0;">getComponentId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里将解析 EntrySpan 和 ExitSpan 都会设置的一些公共信息封装到了setPublicAttrs中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setPublicAttrs</span><span style="color:#E1E4E8;">(sourceBuilder, spanDecorator);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将 SourceBuilder 记录到 entrySourceBuilders 集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">    entrySourceBuilders.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(sourceBuilder);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 记录 TraceSegment 起始的分钟级时间窗口</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.minuteTimeBucket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> segmentCoreInfo.</span><span style="color:#6F42C1;">getMinuteTimeBucket</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> spanDecorator.</span><span style="color:#6F42C1;">getRefsCount</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取 TraceSegmentReference对应的的ReferenceDecorator</span></span>
<span class="line"><span style="color:#24292E;">    ReferenceDecorator reference </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> spanDecorator.</span><span style="color:#6F42C1;">getRefs</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建对应的SourceBuilder</span></span>
<span class="line"><span style="color:#24292E;">    SourceBuilder sourceBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SourceBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录上游系统的 serviceId、serviceInstanceId 以及 endpointId</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setSourceEndpointId</span><span style="color:#24292E;">(reference.</span><span style="color:#6F42C1;">getParentEndpointId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里省略了针对 MQ 组件的特殊处理，如果你感兴趣可以翻一下代码</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setSourceServiceInstanceId</span><span style="color:#24292E;">(reference.</span><span style="color:#6F42C1;">getParentServiceInstanceId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setSourceServiceId</span><span style="color:#24292E;">(instanceInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(reference.</span><span style="color:#6F42C1;">getParentServiceInstanceId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录下游(当前)系统的 serviceId、serviceInstanceId 以及 endpointId</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setDestEndpointId</span><span style="color:#24292E;">(spanDecorator.</span><span style="color:#6F42C1;">getOperationNameId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setDestServiceInstanceId</span><span style="color:#24292E;">(segmentCoreInfo.</span><span style="color:#6F42C1;">getServiceInstanceId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setDestServiceId</span><span style="color:#24292E;">(segmentCoreInfo.</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setDetectPoint</span><span style="color:#24292E;">(DetectPoint.SERVER);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录当前组件的类型</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setComponentId</span><span style="color:#24292E;">(spanDecorator.</span><span style="color:#6F42C1;">getComponentId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里将解析 EntrySpan 和 ExitSpan 都会设置的一些公共信息封装到了setPublicAttrs中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setPublicAttrs</span><span style="color:#24292E;">(sourceBuilder, spanDecorator);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将 SourceBuilder 记录到 entrySourceBuilders 集合中</span></span>
<span class="line"><span style="color:#24292E;">    entrySourceBuilders.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(sourceBuilder);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="parseexit" tabindex="-1">parseExit <a class="header-anchor" href="#parseexit" aria-label="Permalink to &quot;parseExit&quot;">​</a></h4><p>接下来， parseExit() 方法主要处理 ExitSpan ，其中会为每个 ExitSpan 创建相应的 SourceBuilder 对象，并将上游（当前）系统和下游系统的基础信息记录到其中，最后会将该 SourceBuilder 对象填充到 exitSourceBuilders 集合中，等待在 build() 方法中处理。</p><p>parseExit() 方法的实现逻辑与 parseEntry() 方法非常类似，大致如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SourceBuilder sourceBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SourceBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 记录下游系统的 serviceId、serviceInstanceId以及endpointId</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> peerId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> spanDecorator.</span><span style="color:#B392F0;">getPeerId</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> destServiceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInventoryCache.</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">(peerId);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mappingServiceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(destServiceId).</span><span style="color:#B392F0;">getMappingServiceId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 如果存在 mappingServiceId,则更新下游系统的 serviceId，mappingServiceId 相关讲解在后面介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">setDestServiceId</span><span style="color:#E1E4E8;">(mappingServiceId);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> destInstanceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instanceInventoryCache.</span><span style="color:#B392F0;">getServiceInstanceId</span><span style="color:#E1E4E8;">(destServiceId, peerId);</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">setDestEndpointId</span><span style="color:#E1E4E8;">(spanDecorator.</span><span style="color:#B392F0;">getOperationNameId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">setDestServiceInstanceId</span><span style="color:#E1E4E8;">(destInstanceId);</span></span>
<span class="line"><span style="color:#6A737D;">// 记录当前(上游)系统的 serviceId、serviceInstanceId 以及 endpointId</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">setSourceEndpointId</span><span style="color:#E1E4E8;">(Const.USER_ENDPOINT_ID);</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">setSourceServiceInstanceId</span><span style="color:#E1E4E8;">(segmentCoreInfo.</span><span style="color:#B392F0;">getServiceInstanceId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">setSourceServiceId</span><span style="color:#E1E4E8;">(segmentCoreInfo.</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">setDetectPoint</span><span style="color:#E1E4E8;">(DetectPoint.CLIENT);</span></span>
<span class="line"><span style="color:#6A737D;">// Client 角色</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">setComponentId</span><span style="color:#E1E4E8;">(spanDecorator.</span><span style="color:#B392F0;">getComponentId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#B392F0;">setPublicAttrs</span><span style="color:#E1E4E8;">(sourceBuilder, spanDecorator);</span></span>
<span class="line"><span style="color:#6A737D;">// 将 SourceBuilder 记录到 exitSourceBuilders 集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">exitSourceBuilders.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(sourceBuilder);</span></span>
<span class="line"><span style="color:#6A737D;">// 这里省略了对 DB 慢查询的特殊处理</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SourceBuilder sourceBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SourceBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 记录下游系统的 serviceId、serviceInstanceId以及endpointId</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> peerId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> spanDecorator.</span><span style="color:#6F42C1;">getPeerId</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> destServiceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInventoryCache.</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">(peerId);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mappingServiceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(destServiceId).</span><span style="color:#6F42C1;">getMappingServiceId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 如果存在 mappingServiceId,则更新下游系统的 serviceId，mappingServiceId 相关讲解在后面介绍</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">setDestServiceId</span><span style="color:#24292E;">(mappingServiceId);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> destInstanceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instanceInventoryCache.</span><span style="color:#6F42C1;">getServiceInstanceId</span><span style="color:#24292E;">(destServiceId, peerId);</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">setDestEndpointId</span><span style="color:#24292E;">(spanDecorator.</span><span style="color:#6F42C1;">getOperationNameId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">setDestServiceInstanceId</span><span style="color:#24292E;">(destInstanceId);</span></span>
<span class="line"><span style="color:#6A737D;">// 记录当前(上游)系统的 serviceId、serviceInstanceId 以及 endpointId</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">setSourceEndpointId</span><span style="color:#24292E;">(Const.USER_ENDPOINT_ID);</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">setSourceServiceInstanceId</span><span style="color:#24292E;">(segmentCoreInfo.</span><span style="color:#6F42C1;">getServiceInstanceId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">setSourceServiceId</span><span style="color:#24292E;">(segmentCoreInfo.</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">setDetectPoint</span><span style="color:#24292E;">(DetectPoint.CLIENT);</span></span>
<span class="line"><span style="color:#6A737D;">// Client 角色</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">setComponentId</span><span style="color:#24292E;">(spanDecorator.</span><span style="color:#6F42C1;">getComponentId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6F42C1;">setPublicAttrs</span><span style="color:#24292E;">(sourceBuilder, spanDecorator);</span></span>
<span class="line"><span style="color:#6A737D;">// 将 SourceBuilder 记录到 exitSourceBuilders 集合中</span></span>
<span class="line"><span style="color:#24292E;">exitSourceBuilders.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(sourceBuilder);</span></span>
<span class="line"><span style="color:#6A737D;">// 这里省略了对 DB 慢查询的特殊处理</span></span></code></pre></div><p>在 SourceBuilder 中，除了填充上述 id 字段之外，还会记录这些 id 对应的字符串，这些字符串都是在 setPublicAttrs() 这个方法进行填充的，该方法在 parseEntry() 和 parseExit() 方法中都会出现，其核心实现代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setPublicAttrs</span><span style="color:#E1E4E8;">(SourceBuilder sourceBuilder, SpanDecorator spanDecorator) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 计算 latency，即当前 Span 的时间跨度，在后面计算系统延迟的时候会用到</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> latency </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> spanDecorator.</span><span style="color:#B392F0;">getEndTime</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> spanDecorator.</span><span style="color:#B392F0;">getStartTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setLatency</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)latency);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 填充上下游系统中的 serviceName、serviceInstanceName 以及 endpointName</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setSourceServiceName</span><span style="color:#E1E4E8;">(serviceInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(sourceBuilder.</span><span style="color:#B392F0;">getSourceServiceId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setSourceServiceInstanceName</span><span style="color:#E1E4E8;">(instanceInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(sourceBuilder.</span><span style="color:#B392F0;">getSourceServiceInstanceId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setSourceEndpointName</span><span style="color:#E1E4E8;">(endpointInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(sourceBuilder.</span><span style="color:#B392F0;">getSourceEndpointId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setDestServiceName</span><span style="color:#E1E4E8;">(serviceInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(sourceBuilder.</span><span style="color:#B392F0;">getDestServiceId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setDestServiceInstanceName</span><span style="color:#E1E4E8;">(instanceInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(sourceBuilder.</span><span style="color:#B392F0;">getDestServiceInstanceId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">setDestEndpointName</span><span style="color:#E1E4E8;">(endpointInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(sourceBuilder.</span><span style="color:#B392F0;">getDestEndpointId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setPublicAttrs</span><span style="color:#24292E;">(SourceBuilder sourceBuilder, SpanDecorator spanDecorator) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 计算 latency，即当前 Span 的时间跨度，在后面计算系统延迟的时候会用到</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> latency </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> spanDecorator.</span><span style="color:#6F42C1;">getEndTime</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> spanDecorator.</span><span style="color:#6F42C1;">getStartTime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setLatency</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)latency);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 填充上下游系统中的 serviceName、serviceInstanceName 以及 endpointName</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setSourceServiceName</span><span style="color:#24292E;">(serviceInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(sourceBuilder.</span><span style="color:#6F42C1;">getSourceServiceId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setSourceServiceInstanceName</span><span style="color:#24292E;">(instanceInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(sourceBuilder.</span><span style="color:#6F42C1;">getSourceServiceInstanceId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setSourceEndpointName</span><span style="color:#24292E;">(endpointInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(sourceBuilder.</span><span style="color:#6F42C1;">getSourceEndpointId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setDestServiceName</span><span style="color:#24292E;">(serviceInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(sourceBuilder.</span><span style="color:#6F42C1;">getDestServiceId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setDestServiceInstanceName</span><span style="color:#24292E;">(instanceInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(sourceBuilder.</span><span style="color:#6F42C1;">getDestServiceInstanceId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">setDestEndpointName</span><span style="color:#24292E;">(endpointInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(sourceBuilder.</span><span style="color:#6F42C1;">getDestEndpointId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外，setPublicAttrs() 方法中还会 latency 耗时，这个比较重要，后面计算相应监控值时比较关键，会详细说明该值的作用。</p><h3 id="all-相关指标" tabindex="-1">All 相关指标 <a class="header-anchor" href="#all-相关指标" aria-label="Permalink to &quot;All 相关指标&quot;">​</a></h3><p>MultiScopesSpanListener.build() 方法主要负责将 entrySourceBuilders 和 exitSourceBuilders 两个集合中的全部 SourceBuilder 转换成相应的 Source 对象，然后交给 SourceReceiver 走 MetricsStreamProcessor 处理。</p><p>entrySourceBuilders 集合中的每个 SourceBuilder 对象都会生成多个 Source 对象，如下图所示。</p>`,21),d=s("p",null,"AllDispatcher 会将一个 All 对象转换成多个 AllP*Metrics 对象，如下图所示：",-1),u=s("p",null,"前文提到，Metrics 抽象类是所有监控类的父类，其中只记录了该监控数据所在的分钟级窗口（timeBucket 字段）， 前面介绍的 JVM 相关的监控类涉及 SumMetrics 和 LongAvgMetrics 两个抽象类，分别用于计算 sum 值和平均值，具体的分析不再展开。",-1),F=s("p",null,"这里的 AllP*Metrics 继承了PxxMetrics 抽象类，如下图所示，而 PxxMetrics 也继承了 Metrics 抽象类。",-1),v=p(`<p>PxxMetrics 的核心字段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 监控值的精度，默认是10毫秒级的监控</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">columnName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;precision&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> precision;</span></span>
<span class="line"><span style="color:#6A737D;">// 记录当前监控在时间窗口内的全部数据，IntKeyLongValueArray 继承了 ArrayList，其中每个元素都是 IntKeyLongValue 类型</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">columnName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;detail_group&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> IntKeyLongValueArray detailGroup;</span></span>
<span class="line"><span style="color:#6A737D;">// 计算之后的监控结果</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">columnName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">isValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Function.Avg) </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#6A737D;">// 分位数，例如，P99Metrics 中该字段值为 99，P90Metrics 中该字段值为90</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> percentileRank;</span></span>
<span class="line"><span style="color:#6A737D;">// 用于合并相同监控值，其中 key 为监控值(降精度的)，value 记录了对应的IntKeyLongValue对象</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">IntKeyLongValue</span><span style="color:#E1E4E8;">&gt; detailIndex;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 监控值的精度，默认是10毫秒级的监控</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">columnName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;precision&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> precision;</span></span>
<span class="line"><span style="color:#6A737D;">// 记录当前监控在时间窗口内的全部数据，IntKeyLongValueArray 继承了 ArrayList，其中每个元素都是 IntKeyLongValue 类型</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">columnName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;detail_group&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IntKeyLongValueArray detailGroup;</span></span>
<span class="line"><span style="color:#6A737D;">// 计算之后的监控结果</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">columnName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">isValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">function</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Function.Avg) </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#6A737D;">// 分位数，例如，P99Metrics 中该字段值为 99，P90Metrics 中该字段值为90</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> percentileRank;</span></span>
<span class="line"><span style="color:#6A737D;">// 用于合并相同监控值，其中 key 为监控值(降精度的)，value 记录了对应的IntKeyLongValue对象</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">IntKeyLongValue</span><span style="color:#24292E;">&gt; detailIndex;</span></span></code></pre></div><p>在 detailIndex 和 detailGroup 两个集合中的元素都是 IntKeyLongValue 类型，IntKeyLongValue 是一个KV结构，key 是降精度的监控值，value 是该监控值在当前时间窗口中出现的次数。</p><p>PxxMetrics 的核心是 combine() 方法，具体实现代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">combine</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">SourceFrom</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> value, @</span><span style="color:#F97583;">Arg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> precision) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.precision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> precision; </span><span style="color:#6A737D;">// 确定监控精度，默认为10，即10毫秒级别</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (detailIndex </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 初始化 detailIndex这个Map</span></span>
<span class="line"><span style="color:#E1E4E8;">        detailIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        detailGroup.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(element </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> detailIndex.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(element.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), element));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> precision;</span></span>
<span class="line"><span style="color:#E1E4E8;">    IntKeyLongValue element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> detailIndex.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (element </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 创建 IntKeyLongValue 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntKeyLongValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        element.</span><span style="color:#B392F0;">setKey</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"><span style="color:#E1E4E8;">        element.</span><span style="color:#B392F0;">setValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 记录到 detailGroup 和 detailIndex 集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        detailGroup.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">        detailIndex.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(element.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), element);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        element.</span><span style="color:#B392F0;">addValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 递增 value</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">SourceFrom</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value, @</span><span style="color:#D73A49;">Arg</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> precision) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.precision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> precision; </span><span style="color:#6A737D;">// 确定监控精度，默认为10，即10毫秒级别</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (detailIndex </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 初始化 detailIndex这个Map</span></span>
<span class="line"><span style="color:#24292E;">        detailIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        detailGroup.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(element </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> detailIndex.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(element.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), element));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> precision;</span></span>
<span class="line"><span style="color:#24292E;">    IntKeyLongValue element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> detailIndex.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (element </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 创建 IntKeyLongValue 对象</span></span>
<span class="line"><span style="color:#24292E;">        element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntKeyLongValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        element.</span><span style="color:#6F42C1;">setKey</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">        element.</span><span style="color:#6F42C1;">setValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 记录到 detailGroup 和 detailIndex 集合中</span></span>
<span class="line"><span style="color:#24292E;">        detailGroup.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">        detailIndex.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(element.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), element);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        element.</span><span style="color:#6F42C1;">addValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 递增 value</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面通过一个示例介绍 combine() 方法的执行过程。如下图所示：</p>`,6),g=s("p",null,"假设此时的一个 AllP90Metrics 对象通过 combine() 方法合并另一个监控数据（latency=850ms, precision=10）时，会先进行降精度得到 index=85，然后在 detailIndex 集合中未查找到对应的元素，最后新建 IntKeyLongValue 并记录到 detailIndex 和 detailGroup 集合，如下图所示：",-1),A=s("p",null,"接下来又收到一个监控数据（latency=300ms, precision=10），在通过 combine() 方法合并时，detailIndex.get(300/10) 可以查找到对应的 IntKeyLongValue 元素，直接递增其 value 即可，如下图所示：",-1),S=p(`<p>在开始介绍 PxxMetric 的 calculate() 方法实现之前，先来介绍一下 Pxx 这个指标的含义，这里以 P90 为例说明：计算 P90 是在一个监控序列中，找到一个最小的值，大于序列中 90% 的监控值。</p><p>PxxMetric.calculate() 方法具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calculate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collections.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(detailGroup); </span><span style="color:#6A737D;">// 排序detailGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 计算该窗口监控点的总个数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> detailGroup.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">mapToInt</span><span style="color:#E1E4E8;">(element </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)element.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查找指定分位数的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> roof </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(total </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> percentileRank </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0f</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (IntKeyLongValue element </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> detailGroup) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 累加监控点个数，直至到达(或超过)上面的 roof 值，此时的监控值即为指定分位数监控值</span></span>
<span class="line"><span style="color:#E1E4E8;">        count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> element.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (count </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> roof) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> precision;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calculate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(detailGroup); </span><span style="color:#6A737D;">// 排序detailGroup</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 计算该窗口监控点的总个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> detailGroup.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">mapToInt</span><span style="color:#24292E;">(element </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)element.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查找指定分位数的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> roof </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(total </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> percentileRank </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (IntKeyLongValue element </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> detailGroup) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 累加监控点个数，直至到达(或超过)上面的 roof 值，此时的监控值即为指定分位数监控值</span></span>
<span class="line"><span style="color:#24292E;">        count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> element.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (count </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> roof) {</span></span>
<span class="line"><span style="color:#24292E;">            value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> precision;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里接着上例进行分析，该 AllP90Metrics 在计算 P90 值的时候，会先根据监控值（即IntKeyLongValue 中的 key）对 detailGroup 进行排序（如下图所示），然后计算 roof 值得到 9 ，最后累加 count 找到 &gt;= roof 值的位置，此位置记录的监控值即为该时间窗口的 P90 值（即图中 100*10=1000ms）。</p>`,4),D=p(`<p>PxxMetrics 的核心实现到这里就介绍完了，这也是 P<em>Metrics 抽象类以及 AllP</em>Metrics 实现类的核心逻辑。</p><p>最后，根据前文对 Model 的介绍，每个 AllP*Metrics 在 ES 中有四个对应的 Index 名称分别是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">all_p</span><span style="color:#F97583;">*-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">all_p</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_hour</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">all_p</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_day</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">all_p</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_month</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">202001</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">all_p</span><span style="color:#D73A49;">*-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">all_p</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">_hour</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">all_p</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">_day</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">all_p</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">_month</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">202001</span></span></code></pre></div><p>前文提到，每个 Metrics 对象对应 Document 的 id 是由其 id() 方法生成的， AllP*Metrics.id() 方法都是直接其所在的时间窗口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTimeBucket</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTimeBucket</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MetricsAggregateWorker 和 MetricsPersistentWorker 处理 Metrics 的时候，会根据 Map.containKey() 方法确定需要合并的 Metrics 对象，最终是通过 Metrics 实现的 hashCode() 和 equals() 方法进行比较的，多数 Metrics 实现的 equals() 方法比较的字段就是 id() 方法中用于构成 Document Id 的字段，例如：这里的 AllP* Metrics.equals() 方法比较的是时间窗口（即 getTimeBucket() 方法的返回值），JVM 小节介绍的 InstanceJvmOldGcTimeMetrics 对应的 Document Id 是由 serviceInstanceId 和 timeBucket 两部分构成，equals() 方法也是比较这两个字段。</p><p>最后，我们以 AllP90Metrics 为例，看一下 AllP* Metrics 在 ElasticSearch 存储的 Document 内容是什么样子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_index&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;all_p90-20191209&quot;</span><span style="color:#E1E4E8;">,  # Index 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;201912091056&quot;</span><span style="color:#E1E4E8;">, # Document Id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_score&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_source&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;precision&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, # 精度，10ms 精度</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;time_bucket&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">201912091056</span><span style="color:#E1E4E8;">, # 时间窗口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2010</span><span style="color:#E1E4E8;">,   # 计算之后的value值，即 P90 值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;detail_group&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;200,1|201,1&quot;</span><span style="color:#E1E4E8;"> # 该时间窗口内的全部监控数据(10ms精度)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_index&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;all_p90-20191209&quot;</span><span style="color:#24292E;">,  # Index 名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;201912091056&quot;</span><span style="color:#24292E;">, # Document Id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_score&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_source&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;precision&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, # 精度，10ms 精度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;time_bucket&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">201912091056</span><span style="color:#24292E;">, # 时间窗口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2010</span><span style="color:#24292E;">,   # 计算之后的value值，即 P90 值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;detail_group&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;200,1|201,1&quot;</span><span style="color:#24292E;"> # 该时间窗口内的全部监控数据(10ms精度)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 AllDispatcher 中除了生成多个 AllP*Metrics 对象之外，还会生成一个 AllHeatmapMetrics 对象。AllHeatmapMetrics 提供了热图（Heatmap）功能，热图的核心逻辑是在其父类 ThermodynamicMetrics 中实现的 ，其继承关系如下图所示：</p>`,9),I=p(`<p>抽象类 ThermodynamicMetrics 的核心逻辑是将监控点按照 latency 分为多个区间，每个区间的跨度是 100ms，总共 20 个区间，并统计每个区间中监控点的个数。</p><p>ThermodynamicMetrics 的核心字段与前面介绍的 PxxMetrics 类似，只不过 IntKeyLongValue 中的 key 值含义变成了区间编号：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">columnName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> STEP) </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> step </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 每个区间的时间跨度，默认 100ms</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">columnName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NUM_OF_STEPS) </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> numOfSteps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 区间总数，默认20</span></span>
<span class="line"><span style="color:#6A737D;">// 用于记录每个区间中监控点的个数，IntKeyLongValue 中，key 是区间编号，value 是该区间点的个数</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">columnName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DETAIL_GROUP, </span><span style="color:#79B8FF;">isValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> IntKeyLongValueArray detailGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntKeyLongValueArray</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// key 是区间编号，value 是区间对应的 IntKeyLongValue 对象，用于快速查找区间数据</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">IntKeyLongValue</span><span style="color:#E1E4E8;">&gt; detailIndex;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">columnName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> STEP) </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> step </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 每个区间的时间跨度，默认 100ms</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">columnName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NUM_OF_STEPS) </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> numOfSteps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 区间总数，默认20</span></span>
<span class="line"><span style="color:#6A737D;">// 用于记录每个区间中监控点的个数，IntKeyLongValue 中，key 是区间编号，value 是该区间点的个数</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">columnName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DETAIL_GROUP, </span><span style="color:#005CC5;">isValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IntKeyLongValueArray detailGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntKeyLongValueArray</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// key 是区间编号，value 是区间对应的 IntKeyLongValue 对象，用于快速查找区间数据</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">IntKeyLongValue</span><span style="color:#24292E;">&gt; detailIndex;</span></span></code></pre></div><p>ThermodynamicMetrics.combine() 方法的实现与 PxxMetrics 基本类似，calculate() 方法为空实现（因为 heatmap 结果已经在 detailGroup 字段中存储了，无须单独计算）。这里不再展开分析，如果你感兴趣可以参考源码进行分析。</p><h3 id="service-相关指标" tabindex="-1">Service 相关指标 <a class="header-anchor" href="#service-相关指标" aria-label="Permalink to &quot;Service 相关指标&quot;">​</a></h3><p>MultiScopesSpanListener.entrySourceBuilders 集合中的每个 SourceBuilder 元素还会生成 一个 Service 对象，在 ServiceDispatcher 中会将一个 Service 对象转换成多个 Metrics 对象，如下图所示：</p>`,6),C=s("p",null,"ServiceP* Metrics 与前面介绍的 AllP* Metrics 类似，也继承了 PxxMetrics 抽象类，如下图所示：",-1),m=p(`<p>与 AllP*Metrics 的不同之处主要有两点：</p><ol><li>Index 名称。ServiceP*Metrics 对应的 Index 名称为：</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">service_p</span><span style="color:#F97583;">*-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">service_p</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_hour</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">service_p</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_day</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">service_p</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_month</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20200115</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service_p</span><span style="color:#D73A49;">*-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">service_p</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">_hour</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">service_p</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">_day</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">service_p</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">_month</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20200115</span></span></code></pre></div><ol start="2"><li>Document ID 结构。ServiceP*Metrics 对应的 Document Id 由 serviceId + timeBucket 两部分构成。显然，计算的维度不同，例如，ServiceP90Metrics 会将同一时间窗口内、同一 Service 的 P90 监控数据合并到一个 Document 中存储，而 AllP90Metrics 则是将同一时间窗口内的全部 Service 的 P90 监控数据合并到一个 Document 中存储。</li></ol><p>接下来看 ServiceCpmMetrics，它统计的是一个 Service 一分钟请求的次数，继承关系如下图所示：</p>`,5),B=p(`<p>SkyWalking 不仅会统计 Service 级别的 cpm 监控，还会统计 ServiceInstance 、Endpoint 以及 Relation 的 cpm 监控，它们都继承了 CPMMetrics 抽象类，CPMMetrics 有两个核心字段：一个是 total 字段（long 类型）记录了请求总量，在 combine() 方法中会累加该 total 字段；另一个是 value 字段（long 类型），它记录了 total / 分钟数的结果，该计算是在 calculate() 方法中完成的。</p><p>这就是所有 CPMMetrics 实现的核心逻辑，不同之处只在于 Index 名称以及 Document Id 的构成。这里，ServiceCpmMetrics 对应的 Index 为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">service_cpm</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">service_cpm_hour</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">service_cpm_day</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20200115</span></span>
<span class="line"><span style="color:#E1E4E8;">service_cpm_month</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">202001</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service_cpm</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">service_cpm_hour</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">service_cpm_day</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20200115</span></span>
<span class="line"><span style="color:#24292E;">service_cpm_month</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">202001</span></span></code></pre></div><p>其中 Document Id 也是由 ServiceId 以及 timeBucket 两部分构成（后面介绍的其他 ServiceSlaMetrics、ServiceRespTimeMetrics 皆是如此）。</p><p>ServiceSlaMetrics 用于计算一个 Service 的 Sla。Sla（Service level agreement，服务等级协议）对于互联网公司来说，其实就是一个服务可用性的保证。一般用百分比表示，该值越大，表示服务可用时间越长，服务更可靠，停机时间越短，反之亦然。</p><p>SkyWalking 除了会计算 Service 的 Sla 指标，还会计算 ServiceInstance、Endpoint 等的 Sla，如下图所示，它们都继承了 PercentMetrics 抽象类，PercentMetrics 实现了计算 Sla 的核心逻辑：</p>`,6),_=s("p",null,"在 PercentMetrics 中的 total 字段（long 类型）记录了请求总量，match 字段（long 类型）记录了正常请求（EntrySpan.isError = true）的总量，combine() 方法合并两个 PercentMetrics 时，实际上是累加这两个字段。 percentage 字段记录了 match *10000 / total 的结果值（即 sla 值，该运算在 calculate() 方法中完成）。",-1),h=s("p",null,"ServiceSlaMetrics 对应的 Index 名称以及其中 Document Id 的格式与前面介绍的 ServiceCpmMetrics 类似，这里不再重复。",-1),M=s("p",null,"Service 相关的最后一个监控指标是 ServiceRespTimeMetrics ，用于统计 Service 的响应时间。ServiceRespTimeMetrics 与前面介绍的 InstanceJvmOldGcTimeMetrics 基本类似，继承了 LongAvgMetrics，其中记录了一个 Service 在一个时间窗口内的总耗时（summation 字段）以及请求个数（count，即监控点的个数），并计算平均值（value = summation / count）作为 Service 响应耗时。",-1),b=s("p",null,"ServiceRespTimeMetrics 对应的 Index 名称以及其中 Document Id 的格式与前面介绍的 ServiceCpmMetrics 类似，这里不再重复。",-1),k=s("h3",{id:"serviceinstance-相关指标",tabindex:"-1"},[e("ServiceInstance 相关指标 "),s("a",{class:"header-anchor",href:"#serviceinstance-相关指标","aria-label":'Permalink to "ServiceInstance 相关指标"'},"​")],-1),P=s("p",null,"这里 ServiceInstance 相关的有 ServiceInstanceSlaMetrics、ServiceInstanceRespTimeMetrics、ServiceInstanceCpmMetrics 三个指标，它们分别从 Sla、响应时间（Response Time）以及每分钟请求数（Cpm）三个角度去衡量一个 ServiceInstance。",-1),f=s("p",null,"这三种指标的计算方式在前面的 Service 相关指标小节已经详细介绍过了，这里不再重复。需要注意的是 Index 名称的变化，以及 Document Id 的变化（由 InstanceId + timebucket 两部分构成）。",-1),T=s("h3",{id:"endpoint-相关指标",tabindex:"-1"},[e("Endpoint 相关指标 "),s("a",{class:"header-anchor",href:"#endpoint-相关指标","aria-label":'Permalink to "Endpoint 相关指标"'},"​")],-1),x=s("p",null,"这里 Endpoint 相关的有 EndpointSlaMetrics、EndpointAvgMetrics、EndpointCpmMetrics、EndpointP*Metrics 四类指标，它们分别从 Sla、平均响应时间、每分钟请求数（Cpm）以及多个分位数四个角度去衡量一个 Endpoint。",-1),q=s("p",null,"这些指标的相关实现不再展开分析，上述 Endpoint 指标对应的 Document 中，除了记录对应监控数据本身，还会记录关联的 serviceId 和 serviceInstanceId。",-1),R=s("h3",{id:"relation-指标",tabindex:"-1"},[e("Relation 指标 "),s("a",{class:"header-anchor",href:"#relation-指标","aria-label":'Permalink to "Relation 指标"'},"​")],-1),G=s("p",null,"entrySourceBuilders 中的 SourceBuilder 对象会生成三个 Relation 类型的 Source 对象，Relation 表示的某种调用关系，例如：一个 ServiceRelation 对象记录了某两个 Service 之间的调用关系，一个 ServiceInstanceRelation 对象记录了某两个 ServiceInstance 之间的调用关系，一个 EndpointRelation 对象记录了某两个 Endpoint 之间的调用关系。",-1),N=s("p",null,"本课时将以 ServiceRelation 为例介绍 Relation 相关的指标，下图按照指标生成的位置分成了 Server 端和 Client 端两类：",-1),V=s("p",null,"其中，Server 类型指标产生的位置对应被调用系统（接收请求者）的 EntrySpan，而 Client 类型指标产生位置对应调用系统（发起请求者）的 ExitSpan，大致如下图所示：",-1),L=p(`<p>这样的话，在 entrySourceBuilders 集合中的 SourceBuilder 生成的都是 Server 端的 Relaiton 指标，而无法生成 Client 端的 Relation 指标，因为 entrySourceBuilders 集合是 EntrySpan 的处理结果。同理可知 exitSourceBuilders 集合，只会生成 Client 端的 Relation 指标。</p><p>理清 Server 端和 Client 端两个分类之后，下面选取 ServiceRelationServerCpmMetrics 为例继续分析， ServiceRelationServerCpmMetrics 这个指标表示的是上游系统（sourceService）每分钟调用下游系统（destService）的次数，继承了 CPMMetrics，核心计算方式不必多说，对应的 Index 与前面介绍的格式也是类似的，关键在于其 Document Id 的格式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timebucket_sourceServiceId_destServiceId</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timebucket_sourceServiceId_destServiceId</span></span></code></pre></div><p>通过 Document Id 可以明确知道该 Document 记录了哪个上游系统在哪一个时间段调用了哪个下游系统多少次。其他的 Relation 指标也是类似的，具体指标的计算方式在前面都介绍过了，这里不再重复。</p><p>MultiScopesSpanListener.build() 方法对 entrySourceBuilders 集合的处理逻辑到这里就分析完了。exitSourceBuilders 集合中的 SourceBuilder 对象会生成的 Client 端的 Relation 监控指标，这里就不再展开分析了，如果你感兴趣可以参考代码进行分析。</p><h3 id="servicemappingspanlistener" tabindex="-1">ServiceMappingSpanListener <a class="header-anchor" href="#servicemappingspanlistener" aria-label="Permalink to &quot;ServiceMappingSpanListener&quot;">​</a></h3><p>在 Agent 创建 ExitSpan 的时候，只知道下游系统的 peer 信息（remotePeer 或 peerId），在 MultiScopesSpanListener.parseExit() 方法中处理 ExitSpan 的时候，会通过下面这段代码将 peerId 转换成下游系统的 ServiceId：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 获取 peerId 在 service_inventory 中对应的 id</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> destServiceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInventoryCache.</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">(peerId);</span></span>
<span class="line"><span style="color:#6A737D;">// 在 ServiceInventory 中有一个 mappingServiceId 字段，记录了 peerId 关联的真的 Service 的Id</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mappingServiceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(destServiceId).</span><span style="color:#B392F0;">getMappingServiceId</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取 peerId 在 service_inventory 中对应的 id</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> destServiceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInventoryCache.</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">(peerId);</span></span>
<span class="line"><span style="color:#6A737D;">// 在 ServiceInventory 中有一个 mappingServiceId 字段，记录了 peerId 关联的真的 Service 的Id</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mappingServiceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(destServiceId).</span><span style="color:#6F42C1;">getMappingServiceId</span><span style="color:#24292E;">();</span></span></code></pre></div><p>将 peerId 与对应 Service 的 serviceId 进行关联的逻辑是在 ServiceMappingSpanListener 中实现的。ServiceMappingSpanListener 的集成关系如下图所示：</p>`,9),K=p(`<p>在 ServiceMappingSpanListener.parseEntry() 方法中，会遍历 EntrySpan.refs 字段中记录的全部 SegmentReference。正如前面内容所示，TraceSegmentRef 指向了上一个 TraceSegment，而上一个 TraceSegment 的基本信息会被封装成 ContextCarrier 对象随着请求一起传递过来的。上游系统的 Agent 在 ExitSpan 中创建 ContextCarrier 对象的时候，会将下游系统的 peerId（或是 peer 字符串）一起带上。这样的话，从 SegmentReference 中拿到的 peerId 即为当前服务暴露的地址对应的 peerId，将该 peerId 与当前服务的 ServiceId 的绑定即可。</p><p>ServiceMappingSpanListener.parseEntry() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (spanDecorator.</span><span style="color:#B392F0;">getRefsCount</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> spanDecorator.</span><span style="color:#B392F0;">getRefsCount</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取 peerId (即 addressId)对应的 serviceId</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> serviceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInventoryCache.</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">(spanDecorator.</span><span style="color:#B392F0;">getRefs</span><span style="color:#E1E4E8;">(i).</span><span style="color:#B392F0;">getNetworkAddressId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取 addressId 关联的 serviceId，如果发现不一致，则创建ServiceMapping 对象并记录下来，等待更新该关联关系</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mappingServiceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInventoryCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(serviceId).</span><span style="color:#B392F0;">getMappingServiceId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mappingServiceId </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> segmentCoreInfo.</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ServiceMapping serviceMapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceMapping</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            serviceMapping.</span><span style="color:#B392F0;">setServiceId</span><span style="color:#E1E4E8;">(serviceId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将 peerId (即addressId)与当前 serviceId 进行关联</span></span>
<span class="line"><span style="color:#E1E4E8;">            serviceMapping.</span><span style="color:#B392F0;">setMappingServiceId</span><span style="color:#E1E4E8;">(segmentCoreInfo.</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            serviceMappings.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(serviceMapping);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (spanDecorator.</span><span style="color:#6F42C1;">getRefsCount</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> spanDecorator.</span><span style="color:#6F42C1;">getRefsCount</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取 peerId (即 addressId)对应的 serviceId</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> serviceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInventoryCache.</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">(spanDecorator.</span><span style="color:#6F42C1;">getRefs</span><span style="color:#24292E;">(i).</span><span style="color:#6F42C1;">getNetworkAddressId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取 addressId 关联的 serviceId，如果发现不一致，则创建ServiceMapping 对象并记录下来，等待更新该关联关系</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mappingServiceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInventoryCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(serviceId).</span><span style="color:#6F42C1;">getMappingServiceId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mappingServiceId </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> segmentCoreInfo.</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            ServiceMapping serviceMapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceMapping</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            serviceMapping.</span><span style="color:#6F42C1;">setServiceId</span><span style="color:#24292E;">(serviceId);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将 peerId (即addressId)与当前 serviceId 进行关联</span></span>
<span class="line"><span style="color:#24292E;">            serviceMapping.</span><span style="color:#6F42C1;">setMappingServiceId</span><span style="color:#24292E;">(segmentCoreInfo.</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            serviceMappings.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(serviceMapping);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ServiceMappingSpanListener.build() 方法实现比较简单：它会根据 serviceMappings 集合的记录更新 service_inventory 索引中的映射关系，这里不再展开分析，如果你感兴趣可以参考源码进行分析。</p>`,4);function w(j,O,H,W,U,Q){const n=o("Image");return t(),c("div",null,[E,y,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C8/Ciqc1F7fR2GAbKuNAABGmRcouQo855.png"}),i,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR4CAWJP2AAQ7w0mOVog425.png"}),d,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR4eAUSGvAAIzGoF5axs249.png"}),u,F,a(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/1B/D4/CgqCHl7fR5KAF9wYAAI4moSl37k284.png"}),v,a(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/1B/D4/CgqCHl7fR5yAewjnAADQAPU9JCQ196.png"}),g,a(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR6aAcH_jAALKBr8ccz8545.png"}),A,a(n,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR62ANtWZAAJLuUbjfPw407.png"}),S,a(n,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR8GARLdiAAEbWCXQjI0237.png"}),D,a(n,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image/M00/1B/D5/CgqCHl7fR8uAUZkXAAAyr8M-ZaI851.png"}),I,a(n,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR9aAdAr3AAIOl5wa4Bo103.png"}),a(n,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR92AfwMGAAAARmu_22A208.png"}),C,a(n,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR-eAO-uWAAJvFQm4-p0823.png"}),m,a(n,{alt:"Drawing 18.png",src:"https://s0.lgstatic.com/i/image/M00/1B/C9/Ciqc1F7fR_WAHPZxAAB7CBwbRyA669.png"}),B,a(n,{alt:"Drawing 19.png",src:"https://s0.lgstatic.com/i/image/M00/1B/D5/CgqCHl7fSACAK908AAAARmu_22A884.png"}),a(n,{alt:"Drawing 20.png",src:"https://s0.lgstatic.com/i/image/M00/1B/D5/CgqCHl7fSAqAI_LVAAE9CtYG6Z8919.png"}),_,h,M,b,k,P,a(n,{alt:"Drawing 21.png",src:"https://s0.lgstatic.com/i/image/M00/1B/D5/CgqCHl7fSBSADOVYAADp1oyXZNI781.png"}),f,T,x,a(n,{alt:"Drawing 22.png",src:"https://s0.lgstatic.com/i/image/M00/1B/CA/Ciqc1F7fSCeAeOOCAADZWpkOhmE460.png"}),q,R,G,N,a(n,{alt:"Drawing 23.png",src:"https://s0.lgstatic.com/i/image/M00/1B/CA/Ciqc1F7fSDCAdW4GAAKBRnkhCFc134.png"}),V,a(n,{alt:"Drawing 24.png",src:"https://s0.lgstatic.com/i/image/M00/1B/CA/Ciqc1F7fSDeAAHV4AAAARmu_22A770.png"}),a(n,{alt:"Drawing 25.png",src:"https://s0.lgstatic.com/i/image/M00/1B/CA/Ciqc1F7fSD6AbkzBAAEoxUOvcbE477.png"}),L,a(n,{alt:"Drawing 26.png",src:"https://s0.lgstatic.com/i/image/M00/1B/D5/CgqCHl7fSEeAUq1LAAB7wN6gSQQ910.png"}),K])}const $=l(r,[["render",w]]);export{Z as __pageData,$ as default};
