import{_ as p,j as o,o as e,g as t,k as a,s,Q as l}from"./chunks/framework.b3d8e22e.js";const B=JSON.parse('{"title":"MetricsImplementor 模板 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(4155) 第32讲：OAL 语言，原来定义创造一门新语言如此轻松（下）.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(4155) 第32讲：OAL 语言，原来定义创造一门新语言如此轻松（下）.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(4155) 第32讲：OAL 语言，原来定义创造一门新语言如此轻松（下）.md"},r=s("p",null,"了解了 OAL 语言的基础语法以及 official_analysis.oal 文件中典型的 OAL 语句之后，我们来看 official_analysis.oal 文件是如何被解析的。",-1),E=s("p",null,"在generate-tool-grammar 模块中会使 antlr4-maven-plugin 这个 Maven 插件处理 OALParser.g4 以及 OALLexer.g4 文件，得到相应的辅助类，如下图所示，这与前文 Antlr4 示例相同：",-1),y=l(`<p>generate-tool 模块会使用上述辅助类识别 official_analysis.oal 文件并最终转换成 OALScripts 对象，相关的代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 构造 official_analysis.oal 文件的完整路径</span></span>
<span class="line"><span style="color:#E1E4E8;">String scriptFilePath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtil.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(File.separatorChar,</span></span>
<span class="line"><span style="color:#E1E4E8;">    modulePath, </span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;resources&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;official_analysis.oal&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 ScriptParser实例</span></span>
<span class="line"><span style="color:#E1E4E8;">ScriptParser scriptParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">      ScriptParser.</span><span style="color:#B392F0;">createFromFile</span><span style="color:#E1E4E8;">(scriptFilePath);</span></span>
<span class="line"><span style="color:#6A737D;">// 调用 parse()方法识别 official_analysis.oal文件</span></span>
<span class="line"><span style="color:#E1E4E8;">OALScripts oalScripts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scriptParser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 构造 official_analysis.oal 文件的完整路径</span></span>
<span class="line"><span style="color:#24292E;">String scriptFilePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtil.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(File.separatorChar,</span></span>
<span class="line"><span style="color:#24292E;">    modulePath, </span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;resources&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;official_analysis.oal&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 ScriptParser实例</span></span>
<span class="line"><span style="color:#24292E;">ScriptParser scriptParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">      ScriptParser.</span><span style="color:#6F42C1;">createFromFile</span><span style="color:#24292E;">(scriptFilePath);</span></span>
<span class="line"><span style="color:#6A737D;">// 调用 parse()方法识别 official_analysis.oal文件</span></span>
<span class="line"><span style="color:#24292E;">OALScripts oalScripts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scriptParser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span></code></pre></div><p>在 ScriptParser.parse() 方法中可以看到，generate-tool 模块与前文示例一样，也是使用 Listener 模式遍历生成的抽象语法树（AST）。最后生成的 OALScripts 对象底层封装了一个 List<code>&lt;AnalysisResult&gt;</code>，每个 AnalysisResult 对应一条 OAL 语句。</p><p>下面以 instance_jvm_old_gc_time 这条 OAL 语句生成的 AST 为例介绍 OALListener 中各个回调方法的执行流程，下图是该语句生成的简化版 AST，其中的红色箭头标记了 ParseTreeWalker 遍历各个节点的路径：</p>`,4),i=l("<p>另外，上图还按序标记了在对应节点上触发的 OALListener 方法，下面是这些方法的具体功能：</p><p>(1).enterAggregationStatement() 方法：创建该语句对应的 AnalysisResult 对象。</p><p>(2).exitVariable() 方法：填充 AnalysisResult 的 varName、metricsName、tableName 三个字段，会对大小写以及下划线进行处理。</p><p>(3).enterSource() 方法：填充 AnalysisResult 的 sourceName、sourceScopeId 两个字段。</p><p>(4).enterSourceAttribute() 方法：填充 AnalysisResult 的 sourceAttribute 字段。</p><p>(5).enterFilterStatement() 方法：创建 ConditionExpression 对象。</p><p>(6)~(8) 三个方法分别填充 ConditionExpression 对象中的三个字段。</p><p>(9).exitFilterStatement() 方法：将 ConditionExpression 添加到 AnalysisResult 中的 filterExpressionsParserResult 集合。</p><p>(10).enterFunctionName() 方法：填充 AnalysisResult 的 aggregationFunctionName 字段。</p><p>到此为止，该 AnalysisResult 填充的字段如下图所示：</p>",10),F=s("p",null,"(11).exitAggregationStatement() 方法：这里使用 DeepAnalysis 分析前 10 步从 OAL 语句获取到的信息，从而完整填充整个 AnalysisResult 对象。",-1),g=s("ul",null,[s("li",null,"在 DeepAnalysis 中首先会根据 aggregationFunctionName 确定当前指标的类型并填充 metricsClassName 字段。示例中的 longAvg 会查找到 LongAvgMetrics 类，如下图所示：")],-1),u=l(`<ul><li>接下来会查找 LongAvgMetrics 类中 @Entrance 注解标注的入口方法，即 combine() 方法，创建相应的 EntryMethod 对象填充到 entryMethod 字段中。这里生成的 EntryMethod 对象不仅包含入口方法的名称，还会根据入口方法参数上的注解生成相应的参数表达式。</li></ul><p>依然以 LongAvgMetrics 为例，combine() 方法的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entrance</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">combine</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">SourceFrom</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> summation, @</span><span style="color:#F97583;">ConstOne</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.summation </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> summation;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> count;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entrance</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">SourceFrom</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> summation, @</span><span style="color:#D73A49;">ConstOne</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.summation </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> summation;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> count;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>之前我们只关心了方法内的具体逻辑，没有关注方法以及参数上的注解。@Entrance 注解标识了该方法为入口方法，@SourceFrom 标识了该参数来自 OAL 语句前面指定的 source.sourceAttribute，即 ServiceInstanceJVMGC.time，@ ConstOne 标识该参数固定为 1。</p><p>查找 @Entrance 标注的方法的逻辑比较简单，就是遍历 LongAvgMetrics 以及父类所有方法即可。这里来看处理 @SourceFrom 以及 @ConstOne 注解的相关代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">EntryMethod entryMethod </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EntryMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">setEntryMethod</span><span style="color:#E1E4E8;">(entryMethod); </span></span>
<span class="line"><span style="color:#6A737D;">// @Entrance注解标注的入口方法名</span></span>
<span class="line"><span style="color:#E1E4E8;">entryMethod.</span><span style="color:#B392F0;">setMethodName</span><span style="color:#E1E4E8;">(entranceMethod.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 根据入口方法的参数设置参数代码</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Parameter parameter </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> entranceMethod.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Annotation</span><span style="color:#E1E4E8;">[] parameterAnnotations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parameter.</span><span style="color:#B392F0;">getAnnotations</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Annotation annotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parameterAnnotations[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (annotation </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SourceFrom) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        entryMethod.</span><span style="color:#B392F0;">addArg</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;source.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ClassMethodUtil</span></span>
<span class="line"><span style="color:#E1E4E8;">             .</span><span style="color:#B392F0;">toGetMethod</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">getSourceAttribute</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;()&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (annotation </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ConstOne) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        entryMethod.</span><span style="color:#B392F0;">addArg</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 还有针对其他注解的处理，例如 @Expression、@ExpressionArg0等，不再展开</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">EntryMethod entryMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EntryMethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">setEntryMethod</span><span style="color:#24292E;">(entryMethod); </span></span>
<span class="line"><span style="color:#6A737D;">// @Entrance注解标注的入口方法名</span></span>
<span class="line"><span style="color:#24292E;">entryMethod.</span><span style="color:#6F42C1;">setMethodName</span><span style="color:#24292E;">(entranceMethod.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 根据入口方法的参数设置参数代码</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Parameter parameter </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> entranceMethod.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Annotation</span><span style="color:#24292E;">[] parameterAnnotations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parameter.</span><span style="color:#6F42C1;">getAnnotations</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Annotation annotation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parameterAnnotations[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (annotation </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SourceFrom) {</span></span>
<span class="line"><span style="color:#24292E;">        entryMethod.</span><span style="color:#6F42C1;">addArg</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;source.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ClassMethodUtil</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">toGetMethod</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getSourceAttribute</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;()&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (annotation </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ConstOne) {</span></span>
<span class="line"><span style="color:#24292E;">        entryMethod.</span><span style="color:#6F42C1;">addArg</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 还有针对其他注解的处理，例如 @Expression、@ExpressionArg0等，不再展开</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最终创建的 EntryMethod 对象如下图所示：</p>`,7),d=s("ul",null,[s("li",null,[s("p",null,"扫描 LongAvgMetrics 中的全部字段，将所有 @Column 注解标注的字段封装成 DataColumn 对象记录到 persistentFields 集合中。")]),s("li",null,[s("p",null,"根据 sourceName 字段的值从 generator-scope-meta.yml 文件中查找该 source 默认新增的字段，如下图所示，InstanceJvmOldGcTimeMetrics 需要新增 entityId、serviceId 两个字段，这也与我们之前的分析相同。这些新增字段会记录到 fieldsFromSource 集合中。")])],-1),A=l(`<p>到此为止，instance_jvm_old_gc_time 这条 OAL 语句对应的 AnalysisResult 对象填充完毕。在第 11 步 exitAggregationStatement() 方法的最后，会将该 AnalysisResult 对象记录到 OALScripts.metricsStmts 集合中，作为后续 FreeMarker 填充模板的数据。</p><h3 id="metricsimplementor-模板" tabindex="-1">MetricsImplementor 模板 <a class="header-anchor" href="#metricsimplementor-模板" aria-label="Permalink to &quot;MetricsImplementor 模板&quot;">​</a></h3><p>在完成 official_analysis.oal 文件中全部 OAL 语句的处理之后，会将 OALScripts 对象传入到 FileGenerator 中完成 Java 代码生成。在 FileGenerator 的构造方法中会初始化 Configuration 对象，与前面介绍的 FreeMarker 示例相同。</p><p>在 FileGenerator.generate() 方法中会遍历全部 AnalysisResult 对象，为每个 AnalysisResult 对象生成相应的 Metrics 类以及 Dispatcher 类。创建 Metrics 类时使用的是 MetricsImplementor.ftl 模板文件，相关代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateMetricsImplementor</span><span style="color:#E1E4E8;">(AnalysisResult result,Writer output) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   configuration.</span><span style="color:#B392F0;">getTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MetricsImplementor.ftl&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(result, output);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateMetricsImplementor</span><span style="color:#24292E;">(AnalysisResult result,Writer output) {</span></span>
<span class="line"><span style="color:#24292E;">   configuration.</span><span style="color:#6F42C1;">getTemplate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MetricsImplementor.ftl&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(result, output);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 MetricsImplementor.ftl 这个模板文件中，我们重点关注一下字段生成的逻辑以及 id() 方法的逻辑，具体如下所示：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 直接获取 AnalysisResult中相应的字段值，生成的</span><span style="color:#F97583;">@Stream</span><span style="color:#E1E4E8;">注解</span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">@Stream</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#79B8FF;">tableName</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        scopeId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \${sourceScopeId}, </span></span>
<span class="line"><span style="color:#E1E4E8;">        builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \${metricsName}</span><span style="color:#79B8FF;">Metrics</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">Builder</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        processor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MetricsStreamProcessor</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 填充类名以及父类名称 </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> \${metricsName}</span><span style="color:#79B8FF;">Metrics</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> \${metricsClassName} </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WithMetadata</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 遍历 AnalysisResult中的 fieldsFromSource集合，生成相应的字段 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#list fieldsFromSource </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> sourceField</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 设置 </span><span style="color:#F97583;">@Column</span><span style="color:#E1E4E8;">注解的名称 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@Setter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">@Getter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">@Column</span><span style="color:#E1E4E8;">(columnName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#79B8FF;">sourceField</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">columnName</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 根据配置是否添加 </span><span style="color:#F97583;">@IDColumn</span><span style="color:#E1E4E8;">注解 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> sourceField.</span><span style="color:#B392F0;">isID</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">&gt;@IDColumn&lt;/</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if&gt;</span><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">    private \${sourceField.typeName} \${sourceField.fieldName};</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">#list</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@Override</span><span style="color:#E1E4E8;"> public </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> splitJointId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTimeBucket</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 遍历 AnalysisResult中的 fieldsFromSource集合 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#list fieldsFromSource </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> sourceField</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> sourceField.</span><span style="color:#B392F0;">isID</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 根据ID配置决定是否参与构造</span><span style="color:#79B8FF;">Document</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Id</span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> sourceField.</span><span style="color:#B392F0;">getTypeName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;java.lang.String&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            splitJointId </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Const</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">ID_SPLIT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> \${sourceField.fieldName};</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">else&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            splitJointId </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Const</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">ID_SPLIT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(\${sourceField.fieldName});</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">#list</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> splitJointId;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 省略后续其他方法 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 直接获取 AnalysisResult中相应的字段值，生成的</span><span style="color:#D73A49;">@Stream</span><span style="color:#24292E;">注解</span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">@Stream</span><span style="color:#24292E;">(name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#005CC5;">tableName</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        scopeId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \${sourceScopeId}, </span></span>
<span class="line"><span style="color:#24292E;">        builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \${metricsName}</span><span style="color:#005CC5;">Metrics</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">Builder</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">class</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        processor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MetricsStreamProcessor</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">class</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 填充类名以及父类名称 </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> \${metricsName}</span><span style="color:#005CC5;">Metrics</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> \${metricsClassName} </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">WithMetadata</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 遍历 AnalysisResult中的 fieldsFromSource集合，生成相应的字段 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#list fieldsFromSource </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> sourceField</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 设置 </span><span style="color:#D73A49;">@Column</span><span style="color:#24292E;">注解的名称 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@Setter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">@Getter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">@Column</span><span style="color:#24292E;">(columnName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#005CC5;">sourceField</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">columnName</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 根据配置是否添加 </span><span style="color:#D73A49;">@IDColumn</span><span style="color:#24292E;">注解 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> sourceField.</span><span style="color:#6F42C1;">isID</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&gt;@IDColumn&lt;/</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if&gt;</span><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">    private \${sourceField.typeName} \${sourceField.fieldName};</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">#list</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@Override</span><span style="color:#24292E;"> public </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> splitJointId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTimeBucket</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 遍历 AnalysisResult中的 fieldsFromSource集合 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#list fieldsFromSource </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> sourceField</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> sourceField.</span><span style="color:#6F42C1;">isID</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 根据ID配置决定是否参与构造</span><span style="color:#005CC5;">Document</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Id</span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> sourceField.</span><span style="color:#6F42C1;">getTypeName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;java.lang.String&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            splitJointId </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Const</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">ID_SPLIT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> \${sourceField.fieldName};</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">else&gt;</span></span>
<span class="line"><span style="color:#24292E;">            splitJointId </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Const</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">ID_SPLIT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(\${sourceField.fieldName});</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">#list</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> splitJointId;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 省略后续其他方法 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Metrics 类其他方法的生成方式与 id() 方法类似，只是使用的 AnalysisResult 字段不同。你可以将 MetricsImplementor.ftl 模板与 InstanceJvmOldGcTimeMetrics.java 进行比较，更便于理解。</p><h3 id="dispatchertemplate-模板" tabindex="-1">DispatcherTemplate 模板 <a class="header-anchor" href="#dispatchertemplate-模板" aria-label="Permalink to &quot;DispatcherTemplate 模板&quot;">​</a></h3><p>在前文介绍 Dispatcher 的时候提到，不同 Dispatcher 实现会对关联的 Source 进行分析并转换成 Metrics 传入到 MetricsStreamProcessor 进行后续的流处理。例如，ServiceInstanceJVMGCDispatcher 会将一个 ServiceInstanceJVMGC 对象转换成下图展示的四个 Metrics 对象：</p>`,10),m=l(`<p>相应的，FileGenerator 生成 Dispatcher 实现类的代码之前，会将由同一个 Source 衍生出来的 Metrics 封装到一个 DispatcherContext 对象， DispatcherContext 的核心字段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String source; </span><span style="color:#6A737D;">// Source 名称</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String packageName; </span><span style="color:#6A737D;">// Dispatcher所在包名</span></span>
<span class="line"><span style="color:#6A737D;">// 该 Source所有衍生 Metrics对应的 AnalysisResult对象集合</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">AnalysisResult</span><span style="color:#E1E4E8;">&gt; metrics </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String source; </span><span style="color:#6A737D;">// Source 名称</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String packageName; </span><span style="color:#6A737D;">// Dispatcher所在包名</span></span>
<span class="line"><span style="color:#6A737D;">// 该 Source所有衍生 Metrics对应的 AnalysisResult对象集合</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">AnalysisResult</span><span style="color:#24292E;">&gt; metrics </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span></code></pre></div><p>生成 Dispatcher 实现类使用的是 DispatcherTemplate.ftl 模板文件，填充的数据来自 DispatcherContext，入口是 FileGenerator.generateDispatcher() 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateDispatcher</span><span style="color:#E1E4E8;">(AnalysisResult result, Writer output) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String scopeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getSourceName</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据 Source名称查找相应的 DispatcherContext</span></span>
<span class="line"><span style="color:#E1E4E8;">    DispatcherContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">         allDispatcherContext.</span><span style="color:#B392F0;">getAllContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(scopeName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 生成 Dispatcher实现类的代码并写入到指定文件中</span></span>
<span class="line"><span style="color:#E1E4E8;">    configuration.</span><span style="color:#B392F0;">getTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DispatcherTemplate.ftl&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(context, output);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateDispatcher</span><span style="color:#24292E;">(AnalysisResult result, Writer output) {</span></span>
<span class="line"><span style="color:#24292E;">    String scopeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getSourceName</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据 Source名称查找相应的 DispatcherContext</span></span>
<span class="line"><span style="color:#24292E;">    DispatcherContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">         allDispatcherContext.</span><span style="color:#6F42C1;">getAllContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(scopeName);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 生成 Dispatcher实现类的代码并写入到指定文件中</span></span>
<span class="line"><span style="color:#24292E;">    configuration.</span><span style="color:#6F42C1;">getTemplate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DispatcherTemplate.ftl&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(context, output);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来看 DispatcherTemplate.ftl 的实现，它会遍历 DispatcherContext.metrics 集合为每个 Metrics 生成相应的 do*() 方法，核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#list metrics as metrics</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 遍历 DispatcherContext.metrics 集合 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 填充 </span><span style="color:#F97583;">do*</span><span style="color:#E1E4E8;">()方法签名 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 示例中对应 </span><span style="color:#B392F0;">doInstanceJvmOldGcTime</span><span style="color:#E1E4E8;">(ServiceInstanceJVMGC)方法 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;">\${metrics.metricsName}(\${source} source) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 创建相应的Metrics实例 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        \${metrics.metricsName}Metrics metrics </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> \${metrics.metricsName}</span><span style="color:#B392F0;">Metrics</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> metrics.filterExpressions</span><span style="color:#F97583;">??&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;">根据 OAL语句中 </span><span style="color:#B392F0;">filter表达式生成对source过滤的代码</span><span style="color:#E1E4E8;">(略) </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 下面开始填充 Metrics对象 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        metrics.</span><span style="color:#B392F0;">setTimeBucket</span><span style="color:#E1E4E8;">(source.</span><span style="color:#B392F0;">getTimeBucket</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#list metrics.fieldsFromSource as field</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        metrics.\${field.fieldSetter}(source.\${field.fieldGetter}());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">#list</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 根据 AnalysisResult.entryMethod 生成调用入口方法的代码 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doInstanceJvmOldGcTime</span><span style="color:#E1E4E8;">() 方法中调用的是 </span><span style="color:#B392F0;">combine</span><span style="color:#E1E4E8;">() 方法 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        metrics.\${metrics.entryMethod.methodName}(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 生成入口方法的参数 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#list metrics.entryMethod.argsExpressions as arg</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">             \${arg}</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> arg_has_next</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">#</span><span style="color:#F97583;">if&gt;&lt;/</span><span style="color:#E1E4E8;">#list</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         );</span></span>
<span class="line"><span style="color:#E1E4E8;">        MetricsStreamProcessor.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">in</span><span style="color:#E1E4E8;">(metrics);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">#list</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#list metrics as metrics</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 遍历 DispatcherContext.metrics 集合 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 填充 </span><span style="color:#D73A49;">do*</span><span style="color:#24292E;">()方法签名 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 示例中对应 </span><span style="color:#6F42C1;">doInstanceJvmOldGcTime</span><span style="color:#24292E;">(ServiceInstanceJVMGC)方法 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">do</span><span style="color:#24292E;">\${metrics.metricsName}(\${source} source) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 创建相应的Metrics实例 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        \${metrics.metricsName}Metrics metrics </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> \${metrics.metricsName}</span><span style="color:#6F42C1;">Metrics</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> metrics.filterExpressions</span><span style="color:#D73A49;">??&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;">根据 OAL语句中 </span><span style="color:#6F42C1;">filter表达式生成对source过滤的代码</span><span style="color:#24292E;">(略) </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 下面开始填充 Metrics对象 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        metrics.</span><span style="color:#6F42C1;">setTimeBucket</span><span style="color:#24292E;">(source.</span><span style="color:#6F42C1;">getTimeBucket</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#list metrics.fieldsFromSource as field</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        metrics.\${field.fieldSetter}(source.\${field.fieldGetter}());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">#list</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 根据 AnalysisResult.entryMethod 生成调用入口方法的代码 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doInstanceJvmOldGcTime</span><span style="color:#24292E;">() 方法中调用的是 </span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">() 方法 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        metrics.\${metrics.entryMethod.methodName}(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 生成入口方法的参数 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#list metrics.entryMethod.argsExpressions as arg</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">             \${arg}</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> arg_has_next</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">#</span><span style="color:#D73A49;">if&gt;&lt;/</span><span style="color:#24292E;">#list</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">         );</span></span>
<span class="line"><span style="color:#24292E;">        MetricsStreamProcessor.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">in</span><span style="color:#24292E;">(metrics);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">#list</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>为了更好地理解 FreeMarker 填充数据的逻辑，你可以将 DispatcherTemplate.ftl 模板生成 do*() 方法的逻辑与生成后的 ServiceInstanceJVMGCDispatcher.doInstanceJvmOldGcTime() 方法进行比较。</p><h3 id="内置-oal-引擎" tabindex="-1">内置 oal 引擎 <a class="header-anchor" href="#内置-oal-引擎" aria-label="Permalink to &quot;内置 oal 引擎&quot;">​</a></h3><p>从 6.3 版本的开始，SkyWalking 将 OAL 引擎内置到 OAP Server 中，在 OAP Server 启动时会动态生成 Metrics 类实现以及相应 Dispatcher 实现，我们可以在 CoreModuleProvider.prepare() 方法中看到下面这段代码（6.3 版本之后的代码）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">oalEngine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> OALEngineLoader.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">oalEngine.</span><span style="color:#B392F0;">setStreamListener</span><span style="color:#E1E4E8;">(streamAnnotationListener);</span></span>
<span class="line"><span style="color:#E1E4E8;">oalEngine.</span><span style="color:#B392F0;">setDispatcherListener</span><span style="color:#E1E4E8;">(receiver.</span><span style="color:#B392F0;">getDispatcherManager</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">oalEngine.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getClassLoader</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">oalEngine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OALEngineLoader.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">oalEngine.</span><span style="color:#6F42C1;">setStreamListener</span><span style="color:#24292E;">(streamAnnotationListener);</span></span>
<span class="line"><span style="color:#24292E;">oalEngine.</span><span style="color:#6F42C1;">setDispatcherListener</span><span style="color:#24292E;">(receiver.</span><span style="color:#6F42C1;">getDispatcherManager</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">oalEngine.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getClassLoader</span><span style="color:#24292E;">());</span></span></code></pre></div><p>在 oalEngine.start() 方法中会解析 official_analysis.oal 文件得到 OALScripts 对象，然后使用 Javassist 和 FreeMarker 生成的 Metrics 和 Dispatcher 实现类，最后直接通过传入的 ClassLoader 加载到 JVM。</p><p>6.3 版本中生成代码的核心实现与 6.2 版本中生成代码的核心实现基本类似，只有下面的微小区别：</p><ul><li><p>6.3 版本之后的 OAL 语法略有改动，但改动很小，并不影响理解。</p></li><li><p>6.3 版本之后在运行时生成代码，而 6.2 版本是在编译期生成。</p></li><li><p>6.3 版本之后生成代码时使用了 Javassist 和 FreeMarker，6.2 版本只使用了 FreeMarker。</p></li><li><p>6.3 版本之后生成的代码默认不会保存到磁盘中，我们可以在环境变量中设置 SW_OAL_ENGINE_DEBUG=Y 参数保存运行时生成的 Java 文件。如果你感兴趣可以对比 6.2 和 6.3 生成的 Java 代码，会发现两者区别不大。</p></li></ul>`,13);function D(C,h,_,v,S,f){const n=o("Image");return e(),t("div",null,[r,E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/2E/1A/CgqCHl8ETYeADqgoAAE8NIoy0_c302.png"}),y,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/2E/0E/Ciqc1F8ETZ2APvsSAAMOZtTc1cI758.png"}),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/2E/0E/Ciqc1F8ETaeAbBI9AAK4QkZfEcY292.png"}),F,g,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/2E/1A/CgqCHl8ETbGAKMAIAAEGRmp6VX8630.png"}),u,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/2E/0E/Ciqc1F8ETcGAFSJfAAD90Ejj-vM209.png"}),d,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/2E/1A/CgqCHl8ETciAVpVKAAEuRAJmdIU888.png"}),A,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/2E/0E/Ciqc1F8ETfCABEkKAAEpESqaVTE235.png"}),m])}const I=p(c,[["render",D]]);export{B as __pageData,I as default};
