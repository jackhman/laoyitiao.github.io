import{_ as s,j as l,o as _,h as a,k as e,f as p,Q as o,s as t}from"./chunks/framework.d3daa342.js";const C=JSON.parse('{"title":"第42讲：单元测试必须TDD吗？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/112-高效敏捷测试文档/(1627) 第42讲：单元测试必须 TDD 吗？.md","filePath":"posts/devops/112-高效敏捷测试文档/(1627) 第42讲：单元测试必须 TDD 吗？.md","lastUpdated":1696682708000}'),T={name:"posts/devops/112-高效敏捷测试文档/(1627) 第42讲：单元测试必须 TDD 吗？.md"},n=o("",10),i=t("p",null,"图1 开发测试自己代码和测试人员的测试之对比",-1),r=t("p",null,[p("（from "),t("a",{href:"https://hugelol.com/lol/651590%EF%BC%89",target:"_blank",rel:"noreferrer"},"https://hugelol.com/lol/651590）")],-1),c=t("p",null,"TDD 是测试在前，开发在后，自然也保证了代码的可测试性，而且确保 100% 的测试覆盖率，是最为彻底的单元测试，相当于测试脚本在每个时刻都是就绪的，任何时刻看，单元测试都已经是先于代码完成的，真正能做到持续交付，即真正确保敏捷的终极目标------持续交付的实现。没有 TDD，也就没有真正的持续交付。",-1),u=t("p",null,'当初在极限编程（eXtreme Programming，XP）提出 TDD，设计 TDD 那样的模式，如图 2 所示，也是考虑"写新代码"和"代码重构"共用一个模型。而在敏捷开发中，开发节奏快，代码经常需要重构，而重构的前提是单元测试的脚本就绪，你才敢大胆地重构、有信心重构。所以从代码重构角度看，TDD 也是必需的。TDD 做得好，重构会持续进行，代码修改一般也不出什么缺陷，即使出 1~2 个 Bug，都是小问题，很容易修改，并及时补上测试代码。代码的坏味道能及时被消除，代码整洁。',-1),d=o("",13);function g(m,h,A,q,f,B){const D=l("Image");return _(),a("div",null,[n,e(D,{alt:"image1.png",src:"https://s0.lgstatic.com/i/image/M00/13/C1/Ciqc1F7PlySAX5fdABjS4wfl1Hk940.png"}),p(),i,r,c,u,e(D,{alt:"image2.png",src:"https://s0.lgstatic.com/i/image/M00/13/C2/Ciqc1F7Pl0SAa0-cAACjemjMAWY981.png"}),p(),d])}const P=s(T,[["render",g]]);export{C as __pageData,P as default};
