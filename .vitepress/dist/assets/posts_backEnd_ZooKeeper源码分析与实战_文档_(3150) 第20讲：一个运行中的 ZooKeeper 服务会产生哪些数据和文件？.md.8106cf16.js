import{_ as a,j as l,o as p,g as o,k as e,Q as s}from"./chunks/framework.b3d8e22e.js";const C=JSON.parse('{"title":"内存数据 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3150) 第20讲：一个运行中的 ZooKeeper 服务会产生哪些数据和文件？.md","filePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3150) 第20讲：一个运行中的 ZooKeeper 服务会产生哪些数据和文件？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/ZooKeeper源码分析与实战_文档/(3150) 第20讲：一个运行中的 ZooKeeper 服务会产生哪些数据和文件？.md"},r=s(`<p>之前的课程我们都在介绍 ZooKeeper 框架能够实现的功能，而无论是什么程序，其本质就是对数据的操作。比如 MySQl 数据库操作的是数据表，Redis 数据库操作的是存储在内存中的 Key-Value 值。不同的数据格式和存储方式对系统运行的效率和处理能力都有很大影响。本课时就来学习，在 ZooKeeper 程序运行期间，都会处理哪些数据，以及他们的存储格式和存储位置。</p><p>ZooKeeper 服务提供了创建节点、添加 Watcher 监控机制、集群服务等丰富的功能。这些功能服务的实现，离不开底层数据的支持。从数据存储地点角度讲，ZooKeeper 服务产生的数据可以分为内存数据和磁盘数据。而从数据的种类和作用上来说，又可以分为事务日志数据和数据快照数据。</p><h3 id="内存数据" tabindex="-1">内存数据 <a class="header-anchor" href="#内存数据" aria-label="Permalink to &quot;内存数据&quot;">​</a></h3><p>首先，我们介绍一下什么是内存数据。在专栏的基础篇中，主要讲解了通过 ZooKeeper 数据节点的特性，来实现一些像发布订阅这样的功能。而这些数据节点实际上就是 ZooKeeper 在服务运行过程中所操作的数据。</p><p>我在基础篇中提到过，ZooKeeper 的数据模型可以看作一棵<strong>树形结构</strong>，而数据节点就是这棵树上的叶子节点。从数据存储的角度看，ZooKeeper 的数据模型是存储在内存中的。我们可以把 ZooKeeper 的数据模型看作是存储在内存中的数据库，而这个数据库不但存储数据的节点信息，还存储每个数据节点的 ACL 权限信息以及 stat 状态信息等。</p><p>而在底层实现中，ZooKeeper 数据模型是通过 DataTree 类来定义的。如下面的代码所示，DataTree 类定义了一个 ZooKeeper 数据的内存结构。DataTree 的内部定义类 nodes 节点类型、root 根节点信息、子节点的 WatchManager 监控信息等数据模型中的相关信息。可以说，一个 DataTree 类定义了 ZooKeeper 内存数据的逻辑结构。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataTree</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DataNode root</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> WatchManager dataWatches</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> WatchManager childWatches</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String rootZookeeper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataTree</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DataNode root</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> WatchManager dataWatches</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> WatchManager childWatches</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String rootZookeeper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="事务日志" tabindex="-1">事务日志 <a class="header-anchor" href="#事务日志" aria-label="Permalink to &quot;事务日志&quot;">​</a></h3><p>在介绍 ZooKeeper 集群服务的时候，我们介绍过，为了整个 ZooKeeper 集群中数据的一致性，Leader 服务器会向 ZooKeeper 集群中的其他角色服务发送数据同步信息，在接收到数据同步信息后， ZooKeeper 集群中的 Follow 和 Observer 服务器就会进行数据同步。而这两种角色服务器所接收到的信息就是 Leader 服务器的事务日志。在接收到事务日志后，并在本地服务器上执行。这种数据同步的方式，避免了直接使用实际的业务数据，减少了网络传输的开销，提升了整个 ZooKeeper 集群的执行性能。</p><p>在我们启动一个 ZooKeeper 服务器之前，首先要创建一个 zoo.cfg 文件并进行相关配置，其中有一项配置就是 dataLogDir 。在这项配置中，我们会指定该台 ZooKeeper 服务器事务日志的存放位置。</p><p>在 ZooKeeper 服务的底层实现中，是通过 FileTxnLog 类来实现事务日志的底层操作的。如下图代码所示，在 FileTxnLog 类中定义了一些属性字段，分别是：</p><ul><li><p>preAllocSize：可存储的日志文件大小。如用户不进行特殊设置，默认的大小为 65536*1024 字节。</p></li><li><p>TXNLOG_MAGIC：设置日志文件的魔数信息为ZKLG。</p></li><li><p>VERSION：设置日志文件的版本信息。</p></li><li><p>lastZxidSeen：最后一次更新日志得到的 ZXID。</p></li></ul>`,12),c=s(`<p>定义了事务日志操作的相关指标参数后，在 FileTxnLog 类中调用 static 静态代码块，来将这些配置参数进行初始化。比如读取 preAllocSize 参数分配给日志文件的空间大小等操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    LOG </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(FileTxnLog.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zookeeper.preAllocSize&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (size </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            preAllocSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Long.</span><span style="color:#B392F0;">parseLong</span><span style="color:#E1E4E8;">(size) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (NumberFormatException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            LOG.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(size </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; is not a valid value for preAllocSize&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Long fsyncWarningThreshold;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((fsyncWarningThreshold </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Long.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zookeeper.fsync.warningthresholdms&quot;</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        fsyncWarningThreshold </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Long.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fsync.warningthresholdms&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fsyncWarningThresholdMS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fsyncWarningThreshold;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    LOG </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(FileTxnLog.class);</span></span>
<span class="line"><span style="color:#24292E;">    String size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zookeeper.preAllocSize&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (size </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            preAllocSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Long.</span><span style="color:#6F42C1;">parseLong</span><span style="color:#24292E;">(size) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (NumberFormatException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            LOG.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(size </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is not a valid value for preAllocSize&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Long fsyncWarningThreshold;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((fsyncWarningThreshold </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Long.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zookeeper.fsync.warningthresholdms&quot;</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        fsyncWarningThreshold </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Long.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fsync.warningthresholdms&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    fsyncWarningThresholdMS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fsyncWarningThreshold;</span></span></code></pre></div><p>经过参数定义和日志文件的初始化创建后，在 ZooKeeper 服务器的 dataDir 路径下就生成了一个用于存储事务性操作的日志文件。我们知道在 ZooKeeper 服务运行过程中，会不断地接收和处理来自客户端的事务性会话请求，这就要求每次在处理事务性请求的时候，都要记录这些信息到事务日志中。</p><p>如下面的代码所示，在 FileTxnLog 类中，实现记录事务操作的核心方法是 append。从方法的命名中可以看出，ZooKeeper 采用末尾追加的方式来维护新的事务日志数据到日志文件中。append 方法首先会解析事务请求的头信息，并根据解析出来的 zxid 字段作为事务日志的文件名，之后设置日志的文件头信息 magic、version、dbid 以及日志文件的大小 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(TxnHeader hdr, Record txn)</span></span>
<span class="line"><span style="color:#E1E4E8;">    throws IOException</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hdr </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hdr.</span><span style="color:#B392F0;">getZxid</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> lastZxidSeen) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        LOG.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Current zxid &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> hdr.</span><span style="color:#B392F0;">getZxid</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; is &lt;= &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> lastZxidSeen </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; for &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> hdr.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        lastZxidSeen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hdr.</span><span style="color:#B392F0;">getZxid</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logStream</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(LOG.</span><span style="color:#B392F0;">isInfoEnabled</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">            LOG.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Creating new log file: log.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Long.</span><span style="color:#B392F0;">toHexString</span><span style="color:#E1E4E8;">(hdr.</span><span style="color:#B392F0;">getZxid</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       logFileWrite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(logDir, (</span><span style="color:#9ECBFF;">&quot;log.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">               Long.</span><span style="color:#B392F0;">toHexString</span><span style="color:#E1E4E8;">(hdr.</span><span style="color:#B392F0;">getZxid</span><span style="color:#E1E4E8;">())));</span></span>
<span class="line"><span style="color:#E1E4E8;">       fos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(logFileWrite);</span></span>
<span class="line"><span style="color:#E1E4E8;">       logStream</span><span style="color:#F97583;">=new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedOutputStream</span><span style="color:#E1E4E8;">(fos);</span></span>
<span class="line"><span style="color:#E1E4E8;">       oa </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BinaryOutputArchive.</span><span style="color:#B392F0;">getArchive</span><span style="color:#E1E4E8;">(logStream);</span></span>
<span class="line"><span style="color:#E1E4E8;">       FileHeader fhdr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileHeader</span><span style="color:#E1E4E8;">(TXNLOG_MAGIC,VERSION, dbId);</span></span>
<span class="line"><span style="color:#E1E4E8;">       fhdr.</span><span style="color:#B392F0;">serialize</span><span style="color:#E1E4E8;">(oa, </span><span style="color:#9ECBFF;">&quot;fileheader&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// Make sure that the magic number is written before padding.</span></span>
<span class="line"><span style="color:#E1E4E8;">       logStream.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       currentSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fos.</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       streamsToFlush.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(fos);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">padFile</span><span style="color:#E1E4E8;">(fos);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Util.</span><span style="color:#B392F0;">marshallTxnEntry</span><span style="color:#E1E4E8;">(hdr, txn);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (buf </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> buf.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IOException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Faulty serialization for header &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;and txn&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Checksum crc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeChecksumAlgorithm</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    crc.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(buf, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, buf.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">    oa.</span><span style="color:#B392F0;">writeLong</span><span style="color:#E1E4E8;">(crc.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;txnEntryCRC&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Util.</span><span style="color:#B392F0;">writeTxnBytes</span><span style="color:#E1E4E8;">(oa, buf);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(TxnHeader hdr, Record txn)</span></span>
<span class="line"><span style="color:#24292E;">    throws IOException</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hdr </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hdr.</span><span style="color:#6F42C1;">getZxid</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> lastZxidSeen) {</span></span>
<span class="line"><span style="color:#24292E;">        LOG.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Current zxid &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> hdr.</span><span style="color:#6F42C1;">getZxid</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is &lt;= &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> lastZxidSeen </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; for &quot;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> hdr.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        lastZxidSeen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hdr.</span><span style="color:#6F42C1;">getZxid</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logStream</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(LOG.</span><span style="color:#6F42C1;">isInfoEnabled</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">            LOG.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Creating new log file: log.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    Long.</span><span style="color:#6F42C1;">toHexString</span><span style="color:#24292E;">(hdr.</span><span style="color:#6F42C1;">getZxid</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       logFileWrite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(logDir, (</span><span style="color:#032F62;">&quot;log.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">               Long.</span><span style="color:#6F42C1;">toHexString</span><span style="color:#24292E;">(hdr.</span><span style="color:#6F42C1;">getZxid</span><span style="color:#24292E;">())));</span></span>
<span class="line"><span style="color:#24292E;">       fos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(logFileWrite);</span></span>
<span class="line"><span style="color:#24292E;">       logStream</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedOutputStream</span><span style="color:#24292E;">(fos);</span></span>
<span class="line"><span style="color:#24292E;">       oa </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BinaryOutputArchive.</span><span style="color:#6F42C1;">getArchive</span><span style="color:#24292E;">(logStream);</span></span>
<span class="line"><span style="color:#24292E;">       FileHeader fhdr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileHeader</span><span style="color:#24292E;">(TXNLOG_MAGIC,VERSION, dbId);</span></span>
<span class="line"><span style="color:#24292E;">       fhdr.</span><span style="color:#6F42C1;">serialize</span><span style="color:#24292E;">(oa, </span><span style="color:#032F62;">&quot;fileheader&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// Make sure that the magic number is written before padding.</span></span>
<span class="line"><span style="color:#24292E;">       logStream.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       currentSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fos.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       streamsToFlush.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(fos);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">padFile</span><span style="color:#24292E;">(fos);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Util.</span><span style="color:#6F42C1;">marshallTxnEntry</span><span style="color:#24292E;">(hdr, txn);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (buf </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> buf.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IOException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Faulty serialization for header &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;and txn&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Checksum crc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeChecksumAlgorithm</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    crc.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(buf, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, buf.length);</span></span>
<span class="line"><span style="color:#24292E;">    oa.</span><span style="color:#6F42C1;">writeLong</span><span style="color:#24292E;">(crc.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;txnEntryCRC&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Util.</span><span style="color:#6F42C1;">writeTxnBytes</span><span style="color:#24292E;">(oa, buf);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span></code></pre></div><p>从对事务日志的底底层代码分析中可以看出，在 datadir 配置参数路径下存放着 ZooKeeper 服务器所有的事务日志，所有事务日志的命名方法都是&quot;log.+ 该条事务会话的 zxid&quot;。</p><h3 id="数据快照" tabindex="-1">数据快照 <a class="header-anchor" href="#数据快照" aria-label="Permalink to &quot;数据快照&quot;">​</a></h3><p>最后，我们来介绍 ZooKeeper 服务运行过程中产生的最后一个数据文件，即事务快照。</p><p>说到快照，可能很多技术人员都不陌生。一个快照可以看作是当前系统或软件服务运行状态和数据的副本。在 ZooKeeper 中，数据快照的作用是将内存数据结构存储到本地磁盘中。因此，从设计的角度说，数据快照与内存数据的逻辑结构一样，都使用 DataTree 结构。在 ZooKeeper 服务运行的过程中，数据快照每间隔一段时间，就会把 ZooKeeper 内存中的数据存储到磁盘中，快照文件是间隔一段时间后对内存数据的备份。</p><p>因此，与内存数据相比，快照文件的数据具有滞后性。而与上面介绍的事务日志文件一样，在创建数据快照文件时，也是使用 zxid 作为文件名称。</p><p>在代码层面，ZooKeeper 通过 FileTxnSnapLog 类来实现数据快照的相关功能。如下图所示，在FileTxnSnapLog 类的内部，最核心的方法是 save 方法，在 save 方法的内部，首先会创建数据快照文件，之后调用 FileSnap 类对内存数据进行序列化，并写入到快照文件中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(DataTree dataTree,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 ConcurrentHashMap</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Long, Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> sessionsWithTimeouts,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> syncSnap)</span></span>
<span class="line"><span style="color:#E1E4E8;">    throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> lastZxid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataTree.lastProcessedZxid;</span></span>
<span class="line"><span style="color:#E1E4E8;">    File snapshotFile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(snapDir, Util.</span><span style="color:#B392F0;">makeSnapshotName</span><span style="color:#E1E4E8;">(lastZxid));</span></span>
<span class="line"><span style="color:#E1E4E8;">    LOG.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Snapshotting: 0x{} to {}&quot;</span><span style="color:#E1E4E8;">, Long.</span><span style="color:#B392F0;">toHexString</span><span style="color:#E1E4E8;">(lastZxid),</span></span>
<span class="line"><span style="color:#E1E4E8;">            snapshotFile);</span></span>
<span class="line"><span style="color:#E1E4E8;">    snapLog.</span><span style="color:#B392F0;">serialize</span><span style="color:#E1E4E8;">(dataTree, sessionsWithTimeouts, snapshotFile, syncSnap);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(DataTree dataTree,</span></span>
<span class="line"><span style="color:#24292E;">                 ConcurrentHashMap</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Long, Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> sessionsWithTimeouts,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> syncSnap)</span></span>
<span class="line"><span style="color:#24292E;">    throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> lastZxid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataTree.lastProcessedZxid;</span></span>
<span class="line"><span style="color:#24292E;">    File snapshotFile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(snapDir, Util.</span><span style="color:#6F42C1;">makeSnapshotName</span><span style="color:#24292E;">(lastZxid));</span></span>
<span class="line"><span style="color:#24292E;">    LOG.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Snapshotting: 0x{} to {}&quot;</span><span style="color:#24292E;">, Long.</span><span style="color:#6F42C1;">toHexString</span><span style="color:#24292E;">(lastZxid),</span></span>
<span class="line"><span style="color:#24292E;">            snapshotFile);</span></span>
<span class="line"><span style="color:#24292E;">    snapLog.</span><span style="color:#6F42C1;">serialize</span><span style="color:#24292E;">(dataTree, sessionsWithTimeouts, snapshotFile, syncSnap);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过本课时的学习，我们知道在 ZooKeeper 服务的运行过程中，<strong>会涉及内存数据</strong> 、<strong>事务日志</strong> 、<strong>数据快照这三种数据文件</strong>。从存储位置上来说，事务日志和数据快照一样，都存储在本地磁盘上；而从业务角度来讲，内存数据就是我们创建数据节点、添加监控等请求时直接操作的数据。事务日志数据主要用于记录本地事务性会话操作，用于 ZooKeeper 集群服务器之间的数据同步。事务快照则是将内存数据持久化到本地磁盘。</p><p>这里要注意的一点是，<strong>数据快照是每间隔一段时间才把内存数据存储到本地磁盘，因此数据并不会一直与内存数据保持一致</strong>。在单台 ZooKeeper 服务器运行过程中因为异常而关闭时，可能会出现数据丢失等情况。</p>`,15);function E(y,i,F,d,g,u){const n=l("Image");return p(),o("div",null,[r,e(n,{alt:"image (11).png",src:"https://s0.lgstatic.com/i/image/M00/2F/DF/Ciqc1F8IC-uAcS1bAABJoZ4awKg473.png"}),c])}const A=a(t,[["render",E]]);export{C as __pageData,A as default};
