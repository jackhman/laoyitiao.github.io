import{_ as o,j as e,o as t,g as c,k as a,s,Q as l,h as p}from"./chunks/framework.e0c66c3f.js";const f=JSON.parse('{"title":"破题 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/107-前端面试宝典之 React篇文档/(5804) 14  如何避免重复渲染？.md","filePath":"posts/frontEnd/107-前端面试宝典之 React篇文档/(5804) 14  如何避免重复渲染？.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/107-前端面试宝典之 React篇文档/(5804) 14  如何避免重复渲染？.md"},E=l('<p>上一讲讲到，React 的性能问题通常有两类：一类是<strong>长列表</strong> ，一类是<strong>重复渲染</strong> 。这里再提一下长列表，它指的是你的页面渲染了很长的列表，通常有上百甚至上千行数据。长列表本身不是 React 特有的问题，无论是什么技术栈，都可能遇到。它的通用解决方案是采用<strong>虚拟滚动</strong> ，业界做得比较好的解决方案有<strong>react-virtualized</strong> 和<strong>react-window</strong>，已经非常成熟了。</p><p>那重复渲染的解决方案有没有这么成熟呢？不仅没有，甚至还存在一些误区。所以这一讲我们就这个主题来讲解下。</p><h3 id="破题" tabindex="-1">破题 <a class="header-anchor" href="#破题" aria-label="Permalink to &quot;破题&quot;">​</a></h3><p>在前面的生命周期与渲染流程等章节中都有提过避免重复渲染的具体方案，但为什么还是会发生重复渲染呢？因为当业务复杂度与项目规模还没有上升到引发页面性能下降时，这个问题不值得探讨，因为即使处理了也会白费功夫。这就让我想起了这句话：</p><blockquote><p>过早的优化是万恶之源。</p><p>------ Donald Knuth 《计算机编程艺术》</p></blockquote><p>互联网时代，是一个追求快速交付的时代。保证业务快速上线远比代码质量更为重要。只要业务能跑，性能往往是相对靠后的要求。这就需要我们明确优化时机的问题，即什么时候该做，什么时候不该做。</p><p>其次需要讨论如何排查问题页面，借助什么工具去定位？</p><p>然后就是一些常见忽略的点，即有哪些我们以为不会引发重渲染的写法，实际上会有问题？又该如何避免？</p><p>最后就是如何设计优化方案，有什么好的实践，以及有什么反面的做法。</p><h3 id="审题" tabindex="-1">审题 <a class="header-anchor" href="#审题" aria-label="Permalink to &quot;审题&quot;">​</a></h3><p>那么基于这样一个思路，可以整理下答题方式：</p><ul><li><p><strong>优化时机</strong>，说明应该在什么时候做优化，这样做的理由是什么；</p></li><li><p><strong>定位方式</strong>，用什么方式可以快速地定位相关问题；</p></li><li><p><strong>常见的坑</strong>，明确哪些常见的问题会被我们忽略，从而导致重渲染；</p></li><li><p><strong>处理方案</strong>，有哪些方案可以帮助我们解决这个问题。</p></li></ul>',12),y=l('<p>这里需要强调一个问题，通常我们认为制定<strong>处理方案</strong> 是整个过程的重点，但对于大厂而言，更重要的是先证明这件事是否有做的必要性。这就要求我们具备洞察力，能辨别矛盾的主次关系，合理安排人力与资源，往<strong>要害处</strong>下手。所以这就需要我们先想清楚为什么要优化，以及什么时候做优化。</p><h3 id="入手" tabindex="-1">入手 <a class="header-anchor" href="#入手" aria-label="Permalink to &quot;入手&quot;">​</a></h3><h4 id="优化时机" tabindex="-1">优化时机 <a class="header-anchor" href="#优化时机" aria-label="Permalink to &quot;优化时机&quot;">​</a></h4><p>正如开篇所讲，重新渲染可以是一个问题，也可以不是。在厘清问题之前，不妨先回顾下重新渲染时会发生什么。</p><p><strong>原理</strong></p><p>React 会构建并维护一套内部的虚拟 DOM 树，因为操作 DOM 相对操作 JavaScript 对象更慢，所以根据虚拟 DOM 树生成的差异更新真实 DOM。那么每当一个组件的 props 或者 state 发生变更时，React 都会将最新返回的元素与之前渲染的元素进行对比，以此决定是否有必要更新真实的 DOM。当它们不相同时，React 会更新该 DOM。这个过程被称为<strong>协调</strong>。</p><p>协调的成本非常昂贵，如果一次性引发的重新渲染层级足够多、足够深，就会阻塞 UI 主线程的执行，造成卡顿，引起页面帧率下降。</p><p><strong>时机</strong></p><p>虽然重新渲染会带来额外的性能负担，但这并不意味着我们就需要立刻优化它。正如上一讲所说，任何结论应该建立在业务标准与数据基础上分析。数据基础很好理解，上一讲提过，那业务标准是什么呢？</p><p>比如，当前的前端页面有 10 个，其中有 9 个页面经过数据采集后 TP99 在 52 FPS 左右，其中有 1 个页面 TP99 在 29 FPS 左右。</p><p>既然 52 FPS 没到 60，那有必要优化吗？</p><ul><li><p>一般 50 ~ 60 FPS，就相当流畅了；</p></li><li><p>在 30 ~ 50 FPS 之间就因人而异了，通常属于尚可接受的范畴；</p></li><li><p>在 30 FPS 以下属于有明显卡顿，会令人不适。</p></li></ul><p>依照上面的标准，其中的 9 个页面都没有优化的必要，完全可以放任自流，只需要聚焦 29 FPS 的页面即可。但在开展优化工作之前，还需要调查<strong>客观运行环境</strong>的情况，比如浏览器与运行设备等。</p><ul><li><p>如果该用户将页面运行在 IE 中，而你的业务不需要支持 IE，低帧率需要优化吗？显然也是不需要的。</p></li><li><p>如果该用户的手机是 5 年前的旧机型，配置相当低，运行内存只有 512 MB，那还需要优化吗？你的业务如果需要兼容这部分用户的机型，那就要去做。</p></li></ul><p>所以<strong>你的业务在目标群体中的运行环境标准就是业务标准</strong>。</p><p>有数据有标准才能分析是否有做的必要，是否能产生业务价值。</p><h4 id="定位方式" tabindex="-1">定位方式 <a class="header-anchor" href="#定位方式" aria-label="Permalink to &quot;定位方式&quot;">​</a></h4><p>通过数据采集，确认页面在 TP99 帧率不足 30 FPS，然后就需要开始定位该页面的问题。定位的第一步应该是<strong>还原场景</strong> 、<strong>完整复现</strong>。</p><p><strong>复现</strong></p><p>如果你能直接在设备上成功复现该问题，那是最好的，这个问题就没有什么探讨的价值了。而在实际工作中常常会出现一种截然相反的情况，就是无法复现。那首要采取的行动就是寻找运行该页面的<strong>设备机型</strong> 与<strong>浏览器版本</strong>，确保能在相同环境下复现。如果还是不能，就需要确认影响范围，是否只是在特定的设备或者特定的浏览器版本才会出现该问题，这样就需要转入长期作战，增加埋点日志，采集更多的数据进行复现方式的分析。</p><p><strong>工具</strong></p><p>成功复现后，就需要通过工具定位问题点。通常通过两个工具去处理：</p><ul><li><p>通过 Chrome 自带的 Performance 分析，主要用于查询 JavaScript 执行栈中的耗时，确认函数卡顿点，由于和重复渲染关联度不高，你可以自行查阅使用文档；</p></li><li><p>通过 React Developer Tools 中的 Profiler 分析组件渲染次数、开始时间及耗时。</p></li></ul><p>如果需要查看页面上的组件是否有重新渲染，可以在配置项里直接开启<strong>Highlight updates when components render</strong>。此时，有组件渲染了，就会直接高亮。</p>',24),i=s("p",null,"打开录制功能，在操作一段时间后暂停，就能看见具体的渲染情况：",-1),d=s("ul",null,[s("li",null,[s("p",null,[p("不渲染的内容，会直接标记为"),s("strong",null,"Did not render"),p("；")])]),s("li",null,[s("p",null,"重复渲染的内容可直接查看渲染耗时等消息。")])],-1),g=s("p",null,"如下图所示：",-1),F=l(`<p>React Profiler 的详细使用方式建议阅读<a href="https://zh-hans.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html" target="_blank" rel="noreferrer">官方文档</a>，在排查重复渲染上没有比这更好的工具了。</p><h4 id="常见的坑" tabindex="-1">常见的坑 <a class="header-anchor" href="#常见的坑" aria-label="Permalink to &quot;常见的坑&quot;">​</a></h4><p>在 React Profiler 的运行结果中，我们可以看出，避免重复渲染并不是不让它去渲染。</p><ul><li><p>如果页面有显示信息变化的需求，那就要重新渲染；</p></li><li><p>但如果仅仅是更新单个组件，却触发了大量无关组件更新，那就有问题了。</p></li></ul><p>所以我们避免的是无效的重复渲染，毕竟协调成本很昂贵。</p><p>比如有一个这样的列表，内部元素的顺序可以上移下移。代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initListData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  initListData.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ text: i, id: i });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LisItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">onMoveUp</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">onMoveDown</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {text}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onMoveUp</span><span style="color:#E1E4E8;">(id)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        上移</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onMoveDown</span><span style="color:#E1E4E8;">(id)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        下移</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     listData: initListData,</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">handleMoveUp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">handleMoveDown</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">listData</span></span>
<span class="line"><span style="color:#E1E4E8;">     } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">           {</span></span>
<span class="line"><span style="color:#E1E4E8;">               list.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;"> }, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#79B8FF;">ListItem</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">text</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{text}</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">onMoveUp</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleMoveUp}</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">onMoveDown</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleMoveDown}</span></span>
<span class="line"><span style="color:#E1E4E8;">                /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              ))</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initListData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  initListData.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ text: i, id: i });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LisItem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">text</span><span style="color:#24292E;">, </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onMoveUp</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onMoveDown</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {text}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onMoveUp</span><span style="color:#24292E;">(id)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        上移</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onMoveDown</span><span style="color:#24292E;">(id)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        下移</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     listData: initListData,</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">handleMoveUp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">handleMoveDown</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">listData</span></span>
<span class="line"><span style="color:#24292E;">     } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">           {</span></span>
<span class="line"><span style="color:#24292E;">               list.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">text</span><span style="color:#24292E;">, </span><span style="color:#E36209;">id</span><span style="color:#24292E;"> }, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#005CC5;">ListItem</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{id}</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{id}</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">text</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{text}</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">onMoveUp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleMoveUp}</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">onMoveDown</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleMoveDown}</span></span>
<span class="line"><span style="color:#24292E;">                /&gt;</span></span>
<span class="line"><span style="color:#24292E;">              ))</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">       &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码分为两个部分：</p><ul><li><p><strong>List</strong>组件用于展示列表，执行上下移动的逻辑；</p></li><li><p><strong>ListItem</strong>，也就是列表中展示的行，渲染每行的内容。</p></li></ul><p>执行这段代码后，如果你点击某行的 ListItem 进行上下移动，在 React Profile 中你会发现其他行也会重新渲染。</p><p>如果应用我们前面所学的知识，为 ListItem 添加 React.memo 就可以阻止每行内容重新渲染。如下代码所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LisItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> React.</span><span style="color:#B392F0;">memo</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">onMoveUp</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">onMoveDown</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {text}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onMoveUp</span><span style="color:#E1E4E8;">(item)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        上移</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onMoveDown</span><span style="color:#E1E4E8;">(item)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        下移</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LisItem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> React.</span><span style="color:#6F42C1;">memo</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">text</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onMoveUp</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onMoveDown</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {text}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onMoveUp</span><span style="color:#24292E;">(item)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        上移</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onMoveDown</span><span style="color:#24292E;">(item)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        下移</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">))</span></span></code></pre></div><p>要知道无论是 React.memo 还是 PureComponent 都是通过<strong>浅比较</strong>的方式对比变化前后的 props 与 state，对比过程就是下面这段摘抄于 React 源码的代码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.isPureReactComponent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">shallowEqual</span><span style="color:#E1E4E8;">(oldProps, newProps) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">shallowEqual</span><span style="color:#E1E4E8;">(oldState, newState)</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">type</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">type</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.isPureReactComponent) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">shallowEqual</span><span style="color:#24292E;">(oldProps, newProps) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">shallowEqual</span><span style="color:#24292E;">(oldState, newState)</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>那是否存在<strong>失效的情况</strong>呢？</p><p>最常见的情况莫过于使用<strong>箭头函数</strong>，比如像下面这样的写法，通过箭头函数取代原有的 handleMoveUp 函数。 那么此时再打开 React Profile，你会发现每次移动某行时，其他无关行又开始重复渲染了。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">ListItem</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">text</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{text}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onMoveUp</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">//... }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    onMoveDown</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{this.handleMoveDown}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">ListItem</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{id}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{id}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">text</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{text}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onMoveUp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">//... }}</span></span>
<span class="line"><span style="color:#24292E;">    onMoveDown</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{this.handleMoveDown}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">/&gt;</span></span></code></pre></div><p>这是因为箭头函数在 List 每次调用 render 时都会动态生成一个新的函数，函数的引用变化了，这时即便使用 React.memo 也是无效的。</p><p>JSX 的问题比较好解决，将整个函数提取为一个类属性的函数就可以了，但还有一类问题并不好解决，比如在 React Native 中，有个错误的使用案例是这样的：FlatList 是一个 PureComponent，但每次调用 render 函数都会生成一个新的 data 对象，与上面同理，PureComponent 就破防了，如果下层的子组件没有设置防护，那就层层击穿，开始昂贵的协调了。如下代码所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.list.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">/*... */</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">FlatList</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{data}</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">renderItem</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.renderItem}</span></span>
<span class="line"><span style="color:#E1E4E8;">        /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.list.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">/*... */</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">FlatList</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{data}</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">renderItem</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.renderItem}</span></span>
<span class="line"><span style="color:#24292E;">        /&gt;</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>所以在使用组件缓存的 API 时，一定要避开这些问题。</p><h4 id="处理方案" tabindex="-1">处理方案 <a class="header-anchor" href="#处理方案" aria-label="Permalink to &quot;处理方案&quot;">​</a></h4><p>那怎么解决呢？React 在设计上是通过<strong>数据的变化引发视图层的更新</strong>。</p><p><strong>缓存</strong></p><p><strong>性能不够</strong> ，<strong>缓存来凑</strong>，第一类方案是添加缓存来处理，常见的解决方案有 Facebook 自研的 reselect。让我们回到 FlatList 的案例，虽然 this.props.list 每次必须经过转换后才能使用，但我们只要保证 list 不变时转换后的 data 不变，就可以避免重复渲染。</p><p>reselect 会将输入与输出建立映射，缓存函数产出结果。只要输入一致，那么会直接吐出对应的输出结果，从而保证计算结果不变，以此来保证 pureComponent 不会被破防。如以下案例所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createSelector } fr om </span><span style="color:#9ECBFF;">&#39;reselect&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">const listSelector = props =&gt; props.list || []</span></span>
<span class="line"><span style="color:#E1E4E8;">const dataSelector = createSelector(</span></span>
<span class="line"><span style="color:#E1E4E8;">  listSelector,</span></span>
<span class="line"><span style="color:#E1E4E8;">  list =&gt; list.map((item) =&gt; { </span><span style="color:#6A737D;">/*... */</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">render() {</span></span>
<span class="line"><span style="color:#E1E4E8;">     return (</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;FlatList</span></span>
<span class="line"><span style="color:#E1E4E8;">          data={dataSelector(this.props)}</span></span>
<span class="line"><span style="color:#E1E4E8;">          renderItem={this.renderItem}</span></span>
<span class="line"><span style="color:#E1E4E8;">        /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createSelector } fr om </span><span style="color:#032F62;">&#39;reselect&#39;</span></span>
<span class="line"><span style="color:#24292E;">const listSelector = props =&gt; props.list || []</span></span>
<span class="line"><span style="color:#24292E;">const dataSelector = createSelector(</span></span>
<span class="line"><span style="color:#24292E;">  listSelector,</span></span>
<span class="line"><span style="color:#24292E;">  list =&gt; list.map((item) =&gt; { </span><span style="color:#6A737D;">/*... */</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">render() {</span></span>
<span class="line"><span style="color:#24292E;">     return (</span></span>
<span class="line"><span style="color:#24292E;">        &lt;FlatList</span></span>
<span class="line"><span style="color:#24292E;">          data={dataSelector(this.props)}</span></span>
<span class="line"><span style="color:#24292E;">          renderItem={this.renderItem}</span></span>
<span class="line"><span style="color:#24292E;">        /&gt;</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p><strong>不可变数据</strong></p><p>第二类方案的心智成本相对比较高，是使用<strong>不可变数据</strong> ，最早的方案是使用<strong>ImmutableJS</strong>。如果我们无法将 props 或者 state 扁平化，存在多级嵌套且足够深，那么每次修改指定节点时，可能会导致其他节点被更新为新的引用，而ImmutableJS 可以保证修改操作返回一个新引用，并且只修改需要修改的节点。</p><p>ImmutableJS 常见的一个错误使用方式就是下面这样的，即在传参时，使用 toJS 函数生成新的对象，那就又破防了。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">FlatList</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{immutableList.</span><span style="color:#B392F0;">toJS</span><span style="color:#E1E4E8;">()}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">renderItem</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.renderItem}</span></span>
<span class="line"><span style="color:#E1E4E8;">  /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">FlatList</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{immutableList.</span><span style="color:#6F42C1;">toJS</span><span style="color:#24292E;">()}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">renderItem</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.renderItem}</span></span>
<span class="line"><span style="color:#24292E;">  /&gt;</span></span></code></pre></div><p>这样的错误写法太常见了，存在于大量的 ImmutableJS 项目中。造成的原因是 ImmutableJS 本身的数据遍历 API 使用麻烦，且不符合直觉，所以如今 immerjs 更为流行。</p><p><strong>手动控制</strong></p><p>最后一种解决方案就是<strong>自己手动控制</strong>，通过使用 shouldComponentUpdate API 来处理，在生命周期一讲中有详细介绍过，这里就不赘述了。</p><p>需要注意，使用 shouldComponentUpdate 可能会带来意想不到的 Bug，所以这个方案应该放到最后考虑。</p><h3 id="答题" tabindex="-1">答题 <a class="header-anchor" href="#答题" aria-label="Permalink to &quot;答题&quot;">​</a></h3><blockquote><p>如何避免重复渲染分为三个步骤：选择优化时机、定位重复渲染的问题、引入解决方案。</p><p>优化时机需要根据当前业务标准与页面性能数据分析，来决定是否有必要。如果卡顿的情况在业务要求范围外，那确实没有必要做；如果有需要，那就进入下一步------定位。</p><p>定位问题首先需要复现问题，通常采用还原用户使用环境的方式进行复现，然后使用 Performance 与 React Profiler 工具进行分析，对照卡顿点与组件重复渲染次数及耗时排查性能问题。</p><p>通常的解决方案是加 PureComponent 或者使用 React.memo 等组件缓存 API，减少重新渲染。但错误的使用方式会使其完全无效，比如在 JSX 的属性中使用箭头函数，或者每次都生成新的对象，那基本就破防了。</p><p>针对这样的情况有三个解决方案：</p><ol><li><p>缓存，通常使用 reselect 缓存函数执行结果，来避免产生新的对象；</p></li><li><p>不可变数据，使用数据 ImmutableJS 或者 immerjs 转换数据结构；</p></li><li><p>手动控制，自己实现 shouldComponentUpdate 函数，但这类方案一般不推荐，因为容易带来意想不到的 Bug，可以作为保底手段使用。</p></li></ol><p>通过以上的手段就可以避免无效渲染带来的性能问题了。</p></blockquote>`,37),h=s("h3",{id:"总结",tabindex:"-1"},[p("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),u=s("p",null,'本讲中并没有出现实际的案例，但如果你在项目中有重复渲染案例，不妨根据第 13 讲"如何分析和调优性能瓶颈？"中的流程，自己再总结一份答案，看看是否会有新的收获。',-1),m=s("p",null,"在介绍完 React 的性能相关问题后，下一讲我会为你介绍如何提升 React 代码的可维护性。",-1),D=s("hr",null,null,-1),C={href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},A=s("p",null,"《大前端高薪训练营》",-1),v=s("p",null,[p("对标阿里 P7 技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),s("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"点击链接"),p("，快来领取！")],-1);function _(B,b,k,P,S,M){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8D/10/Ciqc1F_4LCOAM1yTAABLaS6Gj1s774.png"}),y,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/8D/10/Ciqc1F_4LC-AY-tlAAJ1NiFv3y0123.png"}),i,d,g,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/8D/1B/CgqCHl_4LDaAJYLZAAF8Ok2N4c0224.png"}),F,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image2/M01/04/F6/CgpVE1_4LHOAYmuIAADInUKQ548136.png"}),h,u,m,D,s("p",null,[s("a",C,[a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png"})])]),A,v])}const x=o(r,[["render",_]]);export{f as __pageData,x as default};
